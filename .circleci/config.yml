version: 2.0
jobs:
  production_postgresql_backup:
    docker:
      - image: cimg/node:18.16.0
    environment:
      DEVOPS_REPO: "git@github.com:ParabolInc/action-devops.git"
      DEVOPS_REPO_TAG: "v0.2.0"
      DEVOPS_WORKDIR: "~/action-devops"
      PRODUCTION_BACKUP_LOCATION: "dokku@backups.action-production.parabol.co"
    working_directory: ~/action
    resource_class: medium
    steps:
      - setup_remote_docker:
          version: 20.10.18
      - add_ssh_keys:
          fingerprints:
            - "53:a8:37:35:c3:7e:54:f5:19:f6:8e:a1:e0:78:52:da"
      - run:
          name: Slack setup
          command: |
            curl --ssl -X POST -H 'Content-type: application/json' --data '{"text":"Starting `Production` PostgreSQL backup..."}' $SLACK_DEVOPS_URL
      - run:
          name: DevOps checkout
          command: |
            mkdir -p ~/.ssh
            echo "github.com ssh-rsa ${GITHUB_RSA_HOST_KEY}" >> ~/.ssh/known_hosts
            git clone --depth 1 --branch $DEVOPS_REPO_TAG $DEVOPS_REPO $DEVOPS_WORKDIR
      - run:
          name: Backup
          no_output_timeout: 55m
          command: |
            $DEVOPS_WORKDIR/postgres/postgres-backup.sh -s production
      - run:
          name: Slack completion
          command: |
            curl --ssl -X POST -H 'Content-type: application/json' --data '{"text":"`Production` PostgreSQL backup pipeline done. Please, check its status in Gitlab."}' $SLACK_DEVOPS_URL
  staging_postgresql_restore:
    docker:
      - image: cimg/node:18.16.0
    environment:
      DEVOPS_REPO: "git@github.com:ParabolInc/action-devops.git"
      DEVOPS_REPO_TAG: "v0.2.0"
      DEVOPS_WORKDIR: "~/action-devops"
      STAGING_BACKUP_LOCATION: "backups.action-staging.parabol.co"
      S3_DB_BACKUPS_BUCKET: "db-backups.parabol.co"
    working_directory: ~/action
    resource_class: medium
    steps:
      - setup_remote_docker:
          version: 20.10.18
      - add_ssh_keys:
          fingerprints:
            - "53:a8:37:35:c3:7e:54:f5:19:f6:8e:a1:e0:78:52:da"
      - run:
          name: Slack setup
          command: |
            curl --ssl -X POST -H 'Content-type: application/json' --data '{"text":"Starting `Staging` PostgreSQL wipe out and restore..."}' $SLACK_DEVOPS_URL
      - run:
          name: DevOps checkout
          command: |
            mkdir -p ~/.ssh
            echo "github.com ssh-rsa ${GITHUB_RSA_HOST_KEY}" >> ~/.ssh/known_hosts
            git clone --depth 1 --branch $DEVOPS_REPO_TAG $DEVOPS_REPO $DEVOPS_WORKDIR
      - run:
          name: Restore to Staging
          no_output_timeout: 55m
          command: |
            $DEVOPS_WORKDIR/postgres/postgres-restore.sh -s production -u staging -d parabol-saas -y
      - run:
          name: Slack completion
          command: |
            curl --ssl -X POST -H 'Content-type: application/json' --data '{"text":"`Staging` PostgreSQL data restoration pipeline done. Please, check its status in Gitlab."}' $SLACK_DEVOPS_URL
  production_rethinkdb_backup:
    docker:
      - image: cimg/node:18.16.0
    environment:
      DEVOPS_REPO: "git@github.com:ParabolInc/action-devops.git"
      DEVOPS_REPO_TAG: "v0.2.0"
      DEVOPS_WORKDIR: "~/action-devops"
      PRODUCTION_BACKUP_LOCATION: "dokku@backups.action-production.parabol.co"
      PRODUCTION_BACKUP_VOLUME: "/mnt/volume_nyc1_01/action-production-rethinkdb-nyc1-01"
      S3_DB_BACKUPS_BUCKET: "db-backups.parabol.co"
    working_directory: ~/action
    resource_class: medium
    steps:
      - add_ssh_keys:
          fingerprints:
            - "53:a8:37:35:c3:7e:54:f5:19:f6:8e:a1:e0:78:52:da"
      - run:
          name: Slack setup
          command: |
            curl --ssl -X POST -H 'Content-type: application/json' --data '{"text":"Starting `Production` RethinkDB back up..."}' $SLACK_DEVOPS_URL
      - run:
          name: DevOps checkout
          command: |
            mkdir -p ~/.ssh
            echo "github.com ssh-rsa ${GITHUB_RSA_HOST_KEY}" >> ~/.ssh/known_hosts
            git clone --depth 1 --branch $DEVOPS_REPO_TAG $DEVOPS_REPO $DEVOPS_WORKDIR
      - run:
          name: Backup
          no_output_timeout: 55m
          command: |
            ssh -o StrictHostKeyChecking=no "${PRODUCTION_BACKUP_LOCATION}" -T >/dev/null
            $DEVOPS_WORKDIR/rethinkdb/rethinkdb-backup.sh \
              -s "${PRODUCTION_BACKUP_LOCATION}" -d "${PRODUCTION_BACKUP_VOLUME}" \
              -b "${S3_DB_BACKUPS_BUCKET}" -p production
      - run:
          name: Slack completion
          command: |
            curl --ssl -X POST -H 'Content-type: application/json' --data '{"text":"`Production` RethinkDB backup done"}' $SLACK_DEVOPS_URL
  staging_rethinkdb_restore:
    docker:
      - image: cimg/node:18.16.0
    environment:
      DEVOPS_REPO: "git@github.com:ParabolInc/action-devops.git"
      DEVOPS_REPO_TAG: "v0.2.0"
      DEVOPS_WORKDIR: "~/action-devops"
      STAGING_BACKUP_LOCATION: "dokku@backups.action-staging.parabol.co"
      S3_DB_BACKUPS_BUCKET: "db-backups.parabol.co"
    working_directory: ~/action
    resource_class: medium
    steps:
      - add_ssh_keys:
          fingerprints:
            - "53:a8:37:35:c3:7e:54:f5:19:f6:8e:a1:e0:78:52:da"
      - run:
          name: Slack setup
          command: |
            curl --ssl -X POST -H 'Content-type: application/json' --data '{"text":"Starting `Staging` RethinkDB wipe out and restore..."}' $SLACK_DEVOPS_URL
      - run:
          name: DevOps checkout
          command: |
            mkdir -p ~/.ssh
            echo "github.com ssh-rsa ${GITHUB_RSA_HOST_KEY}" >> ~/.ssh/known_hosts
            git clone --depth 1 --branch $DEVOPS_REPO_TAG $DEVOPS_REPO $DEVOPS_WORKDIR
      - run:
          name: Assure folder for temporary backups exists
          no_output_timeout: 55m
          command: |
            ssh -o StrictHostKeyChecking=no "${STAGING_BACKUP_LOCATION}" bash -c \"mkdir -p /tmp/rdb-tmp-backups/\"
      - run:
          name: Clean up previous backups
          no_output_timeout: 55m
          command: |
            ssh -o StrictHostKeyChecking=no "${STAGING_BACKUP_LOCATION}" bash -c \"rm -f /tmp/rdb-tmp-backups/last_backup.tar.gz\"
      - run:
          name: Fetch last Production backup
          no_output_timeout: 55m
          command: |
            ssh -o StrictHostKeyChecking=no "${STAGING_BACKUP_LOCATION}" bash -c \"$DEVOPS_WORKDIR/rethinkdb/rethinkdb-fetch-latest-backup.sh -b db-backups.parabol.co -p production -o /tmp/rdb-tmp-backups/last_backup.tar.gz\"
      - run:
          name: Restore to Staging
          no_output_timeout: 55m
          command: |
            ssh -o StrictHostKeyChecking=no "${STAGING_BACKUP_LOCATION}" bash -c \"$DEVOPS_WORKDIR/rethinkdb/rethinkdb-restore.sh -s dokku@backups.action-staging.parabol.co -i /tmp/rdb-tmp-backups/last_backup.tar.gz -y\"
      - run:
          name: Clean up last backup
          no_output_timeout: 55m
          command: |
            ssh -o StrictHostKeyChecking=no "${STAGING_BACKUP_LOCATION}" bash -c \"rm -f /tmp/rdb-tmp-backups/last_backup.tar.gz\"
      - run:
          name: Slack completion
          command: |
            curl --ssl -X POST -H 'Content-type: application/json' --data '{"text":"`Staging` RethinkDB data restoration done."}' $SLACK_DEVOPS_URL
  build:
    docker:
      - image: cimg/node:18.16.0
      - image: rethinkdb:2.4.0
      - image: cimg/postgres:12.9 # TODO: update to 12.10 when https://github.com/CircleCI-Public/cimg-postgres/pull/42 is merged
        environment:
          # These env values need to be synced up with the `test` environment file
          POSTGRES_PASSWORD: "p9_p455w02d_f02_73575"
          POSTGRES_USER: "pgparaboladmin"
          POSTGRES_DB: "parabol-saas"
          POSTGRES_HOST: "localhost"
          POSTGRES_PORT: "5432"
      - image: redis:6.2.6-alpine
        environment:
          TERM: xterm
    environment:
      DEVOPS_REPO: "git@github.com:ParabolInc/action-devops.git"
      DEVOPS_WORKDIR: "~/action-devops"
      GITHUB_REMOTE_PRODUCTION: "dokku@action-production-web-nyc1-03.parabol.co:web"
      GITHUB_REMOTE_STAGING: "dokku@action-staging-web-nyc1-03.parabol.co:web"
      SENTRY_ORG: "parabol"
      SENTRY_PROJECT: "action-production"
      PLAYWRIGHT_BROWSERS_PATH: "0" # install playwright browsers to node_modules for caching
    working_directory: ~/action
    resource_class: large
    steps:
      - add_ssh_keys:
          fingerprints:
            - "53:a8:37:35:c3:7e:54:f5:19:f6:8e:a1:e0:78:52:da"
      - run:
          name: Slack setup
          command: |
            if [ "${CIRCLE_BRANCH}" == "production" ]; then
              curl --ssl -X POST -H 'Content-type: application/json' --data '{"text":"Starting `production` CI and Deployment..."}' $SLACK_DEVOPS_URL
            elif [ "${CIRCLE_BRANCH}" == "staging" ]; then
              curl --ssl -X POST -H 'Content-type: application/json' --data '{"text":"Starting `staging` CI and Deployment..."}' $SLACK_DEVOPS_URL
            fi
      - checkout
      - restore_cache:
          keys:
            - yarn-packages-v1-{{ .Branch }}-{{ checksum "yarn.lock" }}
            - yarn-packages-v1-{{ .Branch }}-
            - yarn-packages-v1-
      - run:
          name: Install dependencies
          command: |
            yarn --frozen-lockfile
            yarn workspace integration-tests playwright install
      - save_cache:
          key: yarn-packages-v1-{{ .Branch }}-{{ checksum "yarn.lock" }}
          paths:
            - ~/.cache/yarn
      - run:
          name: DevOps checkout
          command: |
            mkdir -p ~/.ssh
            echo "github.com ssh-rsa ${GITHUB_RSA_HOST_KEY}" >> ~/.ssh/known_hosts
            git clone --depth 1 $DEVOPS_REPO $DEVOPS_WORKDIR
      - run:
          name: Build Databases
          # Use the test env so the ports match up (NODE_ENV=testing)
          command: |
            cp $DEVOPS_WORKDIR/environments/test .env
            yarn db:migrate
            yarn pg:migrate up
            yarn pg:build
            # Generate types for PG to later verify the checked in types are current
            yarn pg:generate
      - run:
          name: Build Assets
          # Use the staging env to run webpack (NODE_ENV=production)
          command: |
            if [ "${CIRCLE_BRANCH}" == "production" ] || [ "${CIRCLE_BRANCH}" == "staging" ]; then
              cp $DEVOPS_WORKDIR/environments/$CIRCLE_BRANCH .env
              yarn build --deploy
            else
              cp $DEVOPS_WORKDIR/environments/local .env
              yarn build --deploy
            fi
      - deploy:
          name: Commit Deployment
          command: |
            if [ "${CIRCLE_BRANCH}" == "production" ]; then
              export GITHUB_REMOTE="${GITHUB_REMOTE_PRODUCTION}"
              export DEPLOY_ENV="production"
            elif [ "${CIRCLE_BRANCH}" == "staging" ]; then
              export GITHUB_REMOTE="${GITHUB_REMOTE_STAGING}"
              export DEPLOY_ENV="staging"
            else
              export DEPLOY_ENV="local"
            fi
            if [ -n "${GITHUB_REMOTE}" ]; then
              cp $DEVOPS_WORKDIR/environments/$DEPLOY_ENV .env
              export ACTION_VERSION=$(grep '"version":' package.json | cut -d\" -f4)
              git config --global user.name "Parabol CircleCI"
              git config --global user.email "admin+circleci@parabol.co"
              git add queryMap.json build dist packages/client/__generated__ scripts/toolbox packages/server/postgres/queries/generated -f
              git commit -m "build $ACTION_VERSION" --no-verify
              git remote add dokku $GITHUB_REMOTE
              export SSH_DESTINATION=$(echo $GITHUB_REMOTE | cut -f1 -d:)
              ssh -o StrictHostKeyChecking=no "${SSH_DESTINATION}" -T >/dev/null
            fi &&
            if [ -n "${GITHUB_REMOTE}" ]; then
              git push -f dokku $CIRCLE_BRANCH:master
            fi
      - run:
          name: Slack completion
          command: |
            if [ "${CIRCLE_BRANCH}" == "production" ]; then
              curl --ssl -X POST -H 'Content-type: application/json' --data '{"text":"`production` CI and Deployment complete"}' $SLACK_DEVOPS_URL
            elif [ "${CIRCLE_BRANCH}" == "staging" ]; then
              curl --ssl -X POST -H 'Content-type: application/json' --data '{"text":"`staging` CI and Deployment complete"}' $SLACK_DEVOPS_URL
            fi
      - store_artifacts:
          path: ~/action/build
          destination: build
      - store_artifacts:
          path: ~/action/dist
          destination: dist
      - run:
          name: Upload sentry artifacts
          command: |
            if [ "${CIRCLE_BRANCH}" == "production" ]; then
              curl -sL https://sentry.io/get-cli/ | bash
              export ACTION_VERSION=$(grep '"version":' package.json | cut -d\" -f4)
              sentry-cli releases new "$ACTION_VERSION"
              sentry-cli releases files "$ACTION_VERSION" upload-sourcemaps ~/action/build
              sentry-cli releases files "$ACTION_VERSION" upload-sourcemaps ~/action/dist
              sentry-cli releases finalize "$ACTION_VERSION"
            fi
      - run:
          name: Upload source maps to datadog
          # adding the node dep for datadog-ci here as it's not needed in the core app, only used for sourcemap upload
          command: |
            if [ "${CIRCLE_BRANCH}" == "production" ]; then
              export ACTION_VERSION=$(grep '"version":' package.json | cut -d\" -f4)
              yarn add @datadog/datadog-ci -W
              yarn datadog-ci sourcemaps upload ./build \
                --service=parabol-saas-production \
                --release-version=$ACTION_VERSION \
                --minified-path-prefix=https://action-files.parabol.co/production/build/v$ACTION_VERSION
            fi
            if [ "${CIRCLE_BRANCH}" == "staging" ]; then
              export ACTION_VERSION=$(grep '"version":' package.json | cut -d\" -f4)
              yarn add @datadog/datadog-ci -W
              yarn datadog-ci sourcemaps upload ./build \
                --service=parabol-saas-staging \
                --release-version=$ACTION_VERSION \
                --minified-path-prefix=https://action-files.parabol.co/staging/build/v$ACTION_VERSION
            fi

workflows:
  version: 2
  ############################################
  # Main pipeline for Staging and Production #
  ############################################
  #
  # Step 1 - RethinkDB backup. Not mandatory and controlled by a manual approval.
  01_rethinkdb-1-backup:
    jobs:
      - approve-for-production-rethinkdb-backup:
          type: approval
          filters:
            branches:
              only:
                - production
                - staging
      - production_rethinkdb_backup:
          requires:
            - approve-for-production-rethinkdb-backup
          filters:
            branches:
              only:
                - production
                - staging
  #
  # Step 1 - Second sub-step, optional and only for Staging, to wipe the current database and restore it to the production data. Controlled by a manual approval.
  01_rethinkdb-2-restore:
    jobs:
      - approve-for-staging-rethinkdb-restore:
          type: approval
          filters:
            branches:
              only:
                - staging
      - staging_rethinkdb_restore:
          requires:
            - approve-for-staging-rethinkdb-restore
          filters:
            branches:
              only:
                - staging
  #
  # Step 2 - PostgreSQL backups. Not mandatory and controlled by a manual approval.
  02_postgresql-1-backup:
    jobs:
      - approve-for-production-postgresql-backup:
          type: approval
          filters:
            branches:
              only:
                - production
                - staging
      - production_postgresql_backup:
          requires:
            - approve-for-production-postgresql-backup
          filters:
            branches:
              only:
                - production
                - staging
  #
  # Step 2 - Second sub-step, optional and only for Staging, to wipe the current database and restore it to the production data. Controlled by a manual approval.
  02_postgresql-2-restore:
    jobs:
      - approve-for-staging-postgresql-restore:
          type: approval
          filters:
            branches:
              only:
                - staging
      - staging_postgresql_restore:
          requires:
            - approve-for-staging-postgresql-restore
          filters:
            branches:
              only:
                - staging
  #
  # Step 3 - Deployment. Last stage of the process, only for Production and Staging. It builds and deploys
  03_build-and-deploy:
    jobs:
      - approve-for-build-and-deploy:
          type: approval
          filters:
            branches:
              only:
                - production
                - staging
      - build:
          requires:
            - approve-for-build-and-deploy
          filters:
            branches:
              only:
                - production
                - staging
