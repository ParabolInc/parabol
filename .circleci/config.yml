version: 2.0
jobs:
  build:
    docker:
      - image: cimg/node:16.14.0
      - image: rethinkdb:2.4.0
      - image: postgres:12.3
        environment:
          # These env values need to be synced up with the `test` environment file
          POSTGRES_PASSWORD: "p9_p455w02d_f02_73575"
          POSTGRES_USER: "pgparaboladmin"
          POSTGRES_DB: "parabol-saas"
          POSTGRES_HOST: "localhost"
          POSTGRES_PORT: "5432"
      - image: redis:6.2.6-alpine
        environment:
          TERM: xterm
    environment:
      DEVOPS_REPO: "git@github.com:ParabolInc/action-devops.git"
      DEVOPS_WORKDIR: "~/action-devops"
      GITHUB_REMOTE_DEVELOPMENT: "dokku@action-dev-nyc1-01.parabol.co:web"
      GITHUB_REMOTE_PRODUCTION: "dokku@action-production.parabol.co:web"
      GITHUB_REMOTE_STAGING: "dokku@action-staging.parabol.co:web"
      PRODUCTION_BACKUP_LOCATION: "dokku@backups.action-production.parabol.co"
      PRODUCTION_BACKUP_VOLUME: "/mnt/volume_nyc1_01/action-production-rethinkdb-nyc1-01"
      SENTRY_ORG: "parabol"
      SENTRY_PROJECT: "action-production"
      S3_DB_BACKUPS_BUCKET: "db-backups.parabol.co"
      SERVER_ID: "0"
      PLAYWRIGHT_BROWSERS_PATH: "0" # install playwright browsers to node_modules for caching
    working_directory: ~/action
    resource_class: medium+
    steps:
      - add_ssh_keys:
          fingerprints:
            - "53:a8:37:35:c3:7e:54:f5:19:f6:8e:a1:e0:78:52:da"
      - run:
          name: Slack setup
          command: |
            if [ "${CIRCLE_BRANCH}" == "production" ]; then
              curl --ssl -X POST -H 'Content-type: application/json' --data '{"text":"Starting `production` CI and Deployment..."}' $SLACK_DEVOPS_URL
            elif [ "${CIRCLE_BRANCH}" == "staging" ]; then
              curl --ssl -X POST -H 'Content-type: application/json' --data '{"text":"Starting `staging` CI and Deployment..."}' $SLACK_DEVOPS_URL
            elif [ "${CIRCLE_BRANCH}" == "development" ]; then
              curl --ssl -X POST -H 'Content-type: application/json' --data '{"text":"Starting `development` CI and Deployment..."}' $SLACK_DEVOPS_URL
            fi
      - checkout
      - restore_cache:
          keys:
            - yarn-packages-v1-{{ .Branch }}-{{ checksum "yarn.lock" }}
            - yarn-packages-v1-{{ .Branch }}-
            - yarn-packages-v1-
      - run:
          name: Install dependencies
          command: |
            MEDIASOUP_MAX_CORES=8 yarn --frozen-lockfile
            yarn workspace integration-tests playwright install
      - save_cache:
          key: yarn-packages-v1-{{ .Branch }}-{{ checksum "yarn.lock" }}
          paths:
            - ~/.cache/yarn
      - run:
          name: DevOps checkout
          command: |
            git clone $DEVOPS_REPO $DEVOPS_WORKDIR
      - run:
          name: Start dev server
          command: |
            cp $DEVOPS_WORKDIR/environments/test .env
            yarn dev || true
          background: true
      - run:
          name: Wait for dev server to be healthy
          command: curl -4 --retry 30 --retry-connrefused --retry-delay 10 http://localhost:3000/graphql
      - run:
          name: Run server tests
          command: yarn workspace parabol-server test --runInBand --reporters=default --reporters=jest-junit
          environment:
            JEST_JUNIT_OUTPUT_DIR: ./reports/junit
      - store_test_results:
          path: ./packages/server/reports/junit/
      - store_artifacts:
          path: ./packages/server/reports/junit
      - run:
          name: Install Playwright system dependencies
          command: sudo yarn workspace integration-tests playwright install-deps
      - run:
          name: Run Playwright tests
          command: yarn workspace integration-tests test --workers 2 --reporter list,junit
          environment:
            PLAYWRIGHT_JUNIT_OUTPUT_NAME: ./test-results/junit/junit.xml
      - store_test_results:
          path: ./packages/integration-tests/test-results/junit/
      - store_artifacts:
          path: ./packages/integration-tests/test-results
      - run:
          name: Kill server
          command: pkill node
          when: always
      - run:
          name: Build Assets
          command: |
            if [ "${CIRCLE_BRANCH}" == "production" ] || [ "${CIRCLE_BRANCH}" == "staging" ] || [ "${CIRCLE_BRANCH}" == "development" ]; then
              cp $DEVOPS_WORKDIR/environments/$CIRCLE_BRANCH .env
              yarn build --deploy
            fi
            if [ "${CIRCLE_BRANCH}" == "master" ]; then
              cp $DEVOPS_WORKDIR/environments/development .env
              yarn build --deploy
            fi
      - deploy:
          name: Commit Deployment
          command: |
            if [ "${CIRCLE_BRANCH}" == "production" ]; then
              export GITHUB_REMOTE="${GITHUB_REMOTE_PRODUCTION}"
              export DEPLOY_ENV="production"
            elif [ "${CIRCLE_BRANCH}" == "staging" ]; then
              export GITHUB_REMOTE="${GITHUB_REMOTE_STAGING}"
              export DEPLOY_ENV="staging"
            elif [ "${CIRCLE_BRANCH}" == "development" ]; then
              export GITHUB_REMOTE="${GITHUB_REMOTE_DEVELOPMENT}"
              export DEPLOY_ENV="development"
            else
              export DEPLOY_ENV="local"
            fi
            if [ -n "${GITHUB_REMOTE}" ]; then
              cp $DEVOPS_WORKDIR/environments/$DEPLOY_ENV .env
              export ACTION_VERSION=$(grep '"version":' package.json | cut -d\" -f4)
              git config --global user.name "Parabol CircleCI"
              git config --global user.email "admin+circleci@parabol.co"
              git add queryMap.json build dist packages/client/__generated__ scripts/toolbox -f
              git commit -m "build $ACTION_VERSION"
              git remote add dokku $GITHUB_REMOTE
              export SSH_DESTINATION=$(echo $GITHUB_REMOTE | cut -f1 -d:)
              ssh -o StrictHostKeyChecking=no "${SSH_DESTINATION}" -T >/dev/null
            fi &&
            if [ "${GITHUB_REMOTE}" == "${GITHUB_REMOTE_PRODUCTION}" ]; then
              ssh -o StrictHostKeyChecking=no "${PRODUCTION_BACKUP_LOCATION}" -T >/dev/null
              $DEVOPS_WORKDIR/rethinkdb/rethinkdb-backup.sh \
                -s "${PRODUCTION_BACKUP_LOCATION}" -d "${PRODUCTION_BACKUP_VOLUME}" \
                -b "${S3_DB_BACKUPS_BUCKET}" -p "${CIRCLE_BRANCH}"
            fi &&
            if [ -n "${GITHUB_REMOTE}" ]; then
              git push -f dokku $CIRCLE_BRANCH:master
            fi
      - run:
          name: Slack completion
          command: |
            if [ "${CIRCLE_BRANCH}" == "production" ]; then
              curl --ssl -X POST -H 'Content-type: application/json' --data '{"text":"`production` CI and Deployment complete"}' $SLACK_DEVOPS_URL
            elif [ "${CIRCLE_BRANCH}" == "staging" ]; then
              curl --ssl -X POST -H 'Content-type: application/json' --data '{"text":"`staging` CI and Deployment complete"}' $SLACK_DEVOPS_URL
            elif [ "${CIRCLE_BRANCH}" == "development" ]; then
              curl --ssl -X POST -H 'Content-type: application/json' --data '{"text":"`development` CI and Deployment complete"}' $SLACK_DEVOPS_URL
            fi
      - store_artifacts:
          path: ~/action/build
          destination: build
      - store_artifacts:
          path: ~/action/dist
          destination: dist
      - run:
          name: Upload sentry artifacts
          command: |
            if [ "${CIRCLE_BRANCH}" == "production" ]; then
              curl -sL https://sentry.io/get-cli/ | bash
              export ACTION_VERSION=$(grep '"version":' package.json | cut -d\" -f4)
              sentry-cli releases new "$ACTION_VERSION"
              sentry-cli releases files "$ACTION_VERSION" upload-sourcemaps ~/action/build
              sentry-cli releases files "$ACTION_VERSION" upload-sourcemaps ~/action/dist
              sentry-cli releases finalize "$ACTION_VERSION"
            fi
workflows:
  version: 2
  build-and-deploy:
    jobs:
      - build
