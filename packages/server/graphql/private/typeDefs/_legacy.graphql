"""
This file was generated from before we moved to SDL-driven development
It's HUGE, and editing it directly could result in a headache.
Please don't add anything to this file.
Instead, add your new types to their own typeDef file
"""
type Query {
  """
  Get the number of logins, optionally broken down by domain
  """
  logins(
    """
    only include users whose accounts were created after this date
    """
    after: DateTime

    """
    if true, only include active users, else count all users
    """
    isActive: Boolean = false
  ): LoginsPayload!

  """
  Ping various services to determine response time & availability
  """
  ping: PingableServices!

  """
  All the info about a specific company
  """
  company(
    """
    the top level doamin for a company (e.g. parabol.co)
    """
    domain: ID

    """
    if domain is not provided, the userId that belongs to the company
    """
    userId: ID
  ): Company

  """
  Post signup and login metrics to slack
  """
  dailyPulse(
    """
    the earliest time to run the query
    """
    after: DateTime!

    """
    the email that holds the credentials to the channelId
    """
    email: String!

    """
    the ID of channel to post to
    """
    channelId: ID!
  ): Boolean

  """
  Check if this server is alive (an example query).
  """
  pingActionTick: String
  suCountTiersForUser(
    """
    the user for which you want the count of tier membership
    """
    userId: ID!
  ): UserTiersCount
  suUserCount(
    """
    which tier of org shall we count?
    """
    tier: TierEnum = team
  ): Int

  suOrgCount(
    """
    the minimum number of users within the org to count it
    """
    minOrgSize: Int = 2

    """
    which tier of org shall we count?
    """
    tier: TierEnum = team
  ): Int

  """
  Dig into a user by providing the email or userId
  """
  user(
    """
    the email of the user
    """
    email: String

    """
    the ID of the user
    """
    userId: ID
  ): User

  """
  Dig into many users by providing the userId
  """
  users(
    """
    a list of userIds
    """
    userIds: [ID!]!
  ): [User]!

  """
  Get the number of signups, optionally broken down by domain
  """
  signups(
    """
    only include users whose accounts were created after this date
    """
    after: DateTime

    """
    if true, only include active users, else count all users
    """
    isActive: Boolean = false
  ): SignupsPayload!
}

type LoginsPayload {
  """
  the total number of records
  """
  total: Int!

  """
  The total broken down by email domain
  """
  byDomain: [DomainCountPayload!]!
}

type DomainCountPayload {
  """
  the email domain
  """
  domain: ID!

  """
  the sum total
  """
  total: Int!
}

type PingableServices {
  """
  Response time for RethinkDB (in milliseconds) -1 if unreachable after 5 seconds
  """
  rethinkdb: Int!

  """
  Response time for Postgres (in milliseconds) -1 if unreachable after 5 seconds
  """
  postgres: Int!

  """
  Response time for Redis (in milliseconds) -1 if unreachable after 5 seconds
  """
  redis: Int!
}

type Mutation {
  """
  Updates the user email
  """
  updateEmail(
    """
    User current email
    """
    oldEmail: Email!

    """
    User new email
    """
    newEmail: Email!
  ): Boolean!

  """
  broadcast a new feature to the entire userbase
  """
  addNewFeature(
    """
    The text of the action button in the snackbar
    """
    actionButtonCopy: String!

    """
    The description of the new feature
    """
    snackbarMessage: String!

    """
    The permalink to the blog post describing the new feature
    """
    url: String!
  ): AddNewFeaturePayload

  """
  automatically pause users that have been inactive for 30 days. returns the number of users paused
  """
  autopauseUsers: Int

  """
  copies all the records from RethinkDB for a list of organizations
  """
  backupOrganization(orgIds: [ID!]!): String!

  """
  check equality of a table between rethinkdb and postgres
  """
  checkRethinkPgEquality(
    """
    The table name to be compared
    """
    tableName: String!

    """
    How many errors should be returned
    """
    maxErrors: Int

    """
    Whether the output should be written to file
    """
    writeToFile: Boolean
  ): String!

  """
  a server-side mutation called when a client connects
  """
  connectSocket(
    """
    The ID of the server this socket is connected to
    """
    socketServerId: ID!
  ): User!

  """
  profile the CPU
  """
  profileCPU: String

  """
  a server-side mutation called when a client disconnects
  """
  disconnectSocket(
    """
    the userId to disconnect
    """
    userId: ID
  ): DisconnectSocketPayload

  """
  Create a stripe customer & subscription in stripe, send them an invoice for an enterprise license
  """
  draftEnterpriseInvoice(
    """
    the org requesting the upgrade
    """
    orgId: ID!

    """
    The number of users the license grants the organization
    """
    quantity: Int!

    """
    Email address of billing leader, if different from the org billing leader
    """
    email: ID

    """
    The email address for Accounts Payable. Use only if the invoice will be sent to a non-user!
    """
    apEmail: ID

    """
    the stripe id of the plan in stripe, if not using the default plan
    """
    plan: ID
  ): DraftEnterpriseInvoicePayload

  """
  dump the memory heap to a file
  """
  dumpHeap(
    """
    must pass true to make it work
    """
    isDangerous: Boolean!
  ): String

  """
  add/remove a flag on an org asking them to pay
  """
  flagConversionModal(
    """
    true to turn the modal on, false to turn it off
    """
    active: Boolean!

    """
    the orgId to toggle the flag for
    """
    orgId: ID!
  ): FlagConversionModalPayload

  """
  hard deletes a user and all its associated objects
  """
  hardDeleteUser(
    """
    a userId
    """
    userId: ID

    """
    the user email
    """
    email: ID

    """
    the reason why the user wants to delete their account
    """
    reasonText: String
  ): DeleteUserPayload!

  """
  Lock/Unlock teams, flagging them as unpaid/paid. Return true if successful
  """
  lockTeams(
    """
    List of teams to target
    """
    teamIds: [ID]!

    """
    true to unlock the teams, false to lock
    """
    isPaid: Boolean!

    """
    The HTML to show if isPaid is false
    """
    message: String
  ): Boolean!

  """
  Send a message to all authorised Slack users
  """
  messageAllSlackUsers(
    """
    The slack message that will be sent to all Slack users
    """
    message: String!
  ): MessageAllSlackUsersPayload!

  """
  Remove Slack integrations for all users
  """
  removeAllSlackAuths: RemoveAllSlackAuthsPayload!

  """
  schedule upcoming jobs to be run
  """
  runScheduledJobs(
    """
    Queue up all jobs that are scheduled to run within this many seconds
    """
    seconds: Int!
  ): Int

  """
  Send summary emails of unread notifications to all users who have not been seen within the last 24 hours
  """
  sendBatchNotificationEmails: [String]

  """
  send an email to organizations including all the users that were added in the current billing cycle
  """
  sendUpcomingInvoiceEmails: [String]

  """
  manually set the domain that the organization belongs to
  """
  setOrganizationDomain(
    """
    The unique identifier for the organization
    """
    orgId: ID!

    """
    The top level domain of the company. Usually the part after the "@" in their email address
    """
    domain: ID!
  ): Boolean!

  """
  When stripe tells us an invoice is ready, create a pretty version
  """
  stripeCreateInvoice(
    """
    The stripe invoice ID
    """
    invoiceId: ID!
  ): Boolean

  """
  When stripe tells us an invoice payment failed, update it in our DB
  """
  stripeFailPayment(
    """
    The stripe invoice ID
    """
    invoiceId: ID!
  ): StripeFailPaymentPayload

  """
  When stripe tells us an invoice payment was successful, update it in our DB
  """
  stripeSucceedPayment(
    """
    The stripe invoice ID
    """
    invoiceId: ID!
  ): Boolean

  """
  When stripe tells us a credit card was updated, update the details in our own DB
  """
  stripeUpdateCreditCard(
    """
    The stripe customer ID, or stripeId
    """
    customerId: ID!
  ): Boolean

  """
  When a new invoiceitem is sent from stripe, tag it with metadata
  """
  stripeUpdateInvoiceItem(
    """
    The stripe invoice ID
    """
    invoiceItemId: ID!
  ): Boolean

  """
  An invice has been sent from stripe, meaning it is finalized
  """
  stripeInvoiceFinalized(
    """
    The stripe invoice ID
    """
    invoiceId: ID!
  ): Boolean

  """
  add/remove user(s) to/from the watchlist so that we start/stop recording their sessions
  """
  updateWatchlist(
    """
    a list of email addresses of users whose sessions we want to start/stop recording
    """
    emails: [String!]

    """
    add/remove the entire domain to/from the watchlist. The part of the email after the @
    """
    domain: String

    """
    true if the user should be added to the watchlist, false if not
    """
    includeInWatchlist: Boolean!
  ): UpdateWatchlistPayload!

  """
  Updates Atlassian OAuth tokens that haven't been updated since the date specified in input
  """
  updateOAuthRefreshTokens(
    """
    Threshold date for `updatedAt` from AtlassianAuth
    """
    updatedBefore: DateTime!
  ): Int
}

"""
An authentication provider configuration
"""
interface IntegrationProvider {
  """
  The provider's unique identifier
  """
  id: ID!

  """
  The team that created the provider. "aGhostTeam" if global
  """
  teamId: ID!

  """
  The timestamp the provider was created
  """
  createdAt: DateTime!

  """
  The timestamp the token was updated at
  """
  updatedAt: DateTime!

  """
  The name of the integration service (GitLab, Mattermost, etc)
  """
  service: IntegrationProviderServiceEnum!

  """
  The kind of token used by this provider (OAuth2, PAT, Webhook)
  """
  authStrategy: IntegrationProviderAuthStrategyEnum!

  """
  The scope this provider configuration was created at (globally, org-wide, or by the team)
  """
  scope: IntegrationProviderScopeEnum!

  """
  true if the provider configuration should be used
  """
  isActive: Boolean!
}

scalar DateTime

"""
The name of the service of the Integration Provider
"""
enum IntegrationProviderServiceEnum {
  jira
  github
  gitlab
  mattermost
  jiraServer
  azureDevOps
}

"""
The kind of token provided by the service
"""
enum IntegrationProviderAuthStrategyEnum {
  oauth1
  oauth2
  pat
  webhook
}

"""
The scope this provider was created on (globally, org-wide, or on the team)
"""
enum IntegrationProviderScopeEnum {
  global
  org
  team
}

scalar URL

"""
An authentication strategy to log in to Parabol
"""
interface AuthIdentity {
  """
  true if the email address using this strategy is verified, else false
  """
  isEmailVerified: Boolean!
  type: AuthIdentityTypeEnum!
}

"""
The types of authentication strategies
"""
enum AuthIdentityTypeEnum {
  LOCAL
  GOOGLE
}

interface NewMeetingPhase {
  """
  shortid
  """
  id: ID!
  meetingId: ID!
  teamId: ID!

  """
  The type of phase
  """
  phaseType: NewMeetingPhaseTypeEnum!
  stages: [NewMeetingStage!]!
}

"""
The phase of the meeting
"""
enum NewMeetingPhaseTypeEnum {
  lobby
  checkin
  updates
  firstcall
  agendaitems
  lastcall
  reflect
  group
  vote
  discuss
  SUMMARY
  SCOPE
  ESTIMATE
  RESPONSES
}

"""
An instance of a meeting phase item. On the client, this usually represents a single view
"""
interface NewMeetingStage {
  """
  stageId, shortid
  """
  id: ID!

  """
  The datetime the stage was completed
  """
  endAt: DateTime

  """
  foreign key. try using meeting
  """
  meetingId: ID!

  """
  The meeting this stage belongs to
  """
  meeting: NewMeeting

  """
  true if the facilitator has completed this stage, else false. Should be boolean(endAt)
  """
  isComplete: Boolean!

  """
  true if any meeting participant can navigate to this stage
  """
  isNavigable: Boolean!

  """
  true if the facilitator can navigate to this stage
  """
  isNavigableByFacilitator: Boolean!

  """
  The phase this stage belongs to
  """
  phase: NewMeetingPhase

  """
  The type of the phase
  """
  phaseType: NewMeetingPhaseTypeEnum

  """
  The datetime the stage was started
  """
  startAt: DateTime

  """
  Number of times the facilitator has visited this stage
  """
  viewCount: Int

  """
  true if a time limit is set, false if end time is set, null if neither is set
  """
  isAsync: Boolean

  """
  true if the viewer is ready to advance, else false
  """
  isViewerReady: Boolean!

  """
  the number of meeting members ready to advance, excluding the facilitator
  """
  readyCount: Int!

  """
  The datetime the phase is scheduled to be finished, null if no time limit or end time is set
  """
  scheduledEndTime: DateTime

  """
  The suggested ending datetime for a phase to be completed async, null if not enough data to make a suggestion
  """
  suggestedEndTime: DateTime

  """
  The suggested time limit for a phase to be completed together, null if not enough data to make a suggestion
  """
  suggestedTimeLimit: Float
  teamId: ID!

  """
  The number of milliseconds left before the scheduled end time. Useful for unsynced client clocks. null if scheduledEndTime is null
  """
  timeRemaining: Float
}

"""
A team meeting history for all previous meetings
"""
interface NewMeeting {
  """
  The unique meeting id. shortid.
  """
  id: ID!

  """
  The timestamp the meeting was created
  """
  createdAt: DateTime!

  """
  The id of the user that created the meeting
  """
  createdBy: ID!

  """
  The user that created the meeting
  """
  createdByUser: User!

  """
  The timestamp the meeting officially ended
  """
  endedAt: DateTime

  """
  The location of the facilitator in the meeting
  """
  facilitatorStageId: ID!

  """
  The userId (or anonymousId) of the most recent facilitator
  """
  facilitatorUserId: ID!

  """
  The facilitator team member
  """
  facilitator: TeamMember!

  """
  The team members that were active during the time of the meeting
  """
  meetingMembers: [MeetingMember!]!

  """
  The auto-incrementing meeting number for the team
  """
  meetingNumber: Int!
  meetingType: MeetingTypeEnum!

  """
  The name of the meeting
  """
  name: String!

  """
  The organization this meeting belongs to
  """
  organization: Organization!

  """
  The phases the meeting will go through, including all phase-specific state
  """
  phases: [NewMeetingPhase!]!

  """
  true if should show the org the conversion modal, else false
  """
  showConversionModal: Boolean!

  """
  The time the meeting summary was emailed to the team
  """
  summarySentAt: DateTime

  """
  foreign key for team
  """
  teamId: ID!

  """
  The team that ran the meeting
  """
  team: Team!

  """
  The last time a meeting was updated (stage completed, finished, etc)
  """
  updatedAt: DateTime

  """
  The meeting member of the viewer
  """
  viewerMeetingMember: MeetingMember

  """
  Is this locked for starter plans?
  """
  locked: Boolean!
}

"""
An item that can be put in a thread
"""
interface Threadable {
  """
  shortid
  """
  id: ID!

  """
  The rich text body of the item
  """
  content: String!

  """
  The timestamp the item was created
  """
  createdAt: DateTime!

  """
  The userId that created the item
  """
  createdBy: ID

  """
  The user that created the item
  """
  createdByUser: User

  """
  the replies to this threadable item
  """
  replies: [Threadable!]!

  """
  The FK of the discussion this task was created in. Null if task was not created in a discussion
  """
  discussionId: ID

  """
  the parent, if this threadable is a reply, else null
  """
  threadParentId: ID

  """
  the order of this threadable, relative to threadParentId
  """
  threadSortOrder: Float

  """
  The timestamp the item was updated
  """
  updatedAt: DateTime!
}

"""
The suggested repos and projects a user can integrate with
"""
interface RepoIntegration {
  id: ID!
  service: IntegrationProviderServiceEnum!
}

"""
The right drawer types available on the team dashboard
"""
enum TeamDrawer {
  agenda
  manageTeam
}

scalar Email

"""
A connection to a list of items.
"""
type JiraIssueConnection {
  """
  Page info with cursors coerced to ISO8601 dates
  """
  pageInfo: PageInfoDateCursor

  """
  A list of edges.
  """
  edges: [JiraIssueEdge!]!

  """
  An error with the connection, if any
  """
  error: StandardMutationError
}

"""
An edge in a connection.
"""
type JiraIssueEdge {
  """
  The item at the end of the edge
  """
  node: JiraIssue!
  cursor: DateTime
}

interface TaskIntegration {
  id: ID!
}

type StandardMutationError {
  """
  The title of the error
  """
  title: String

  """
  The full error
  """
  message: String!
}

"""
A jira search query including all filters selected when the query was executed
"""
type JiraSearchQuery {
  """
  shortid
  """
  id: ID!

  """
  The query string, either simple or JQL depending on the isJQL flag
  """
  queryString: String!

  """
  true if the queryString is JQL, else false
  """
  isJQL: Boolean!

  """
  The list of project keys selected as a filter. null if not set
  """
  projectKeyFilters: [ID!]!

  """
  the time the search query was last used. Used for sorting
  """
  lastUsedAt: DateTime!
}

"""
The auth credentials for a token, specific to a team member
"""
interface TeamMemberIntegrationAuth {
  """
  The token's unique identifier
  """
  id: ID!

  """
  The team that the token is linked to
  """
  teamId: ID!

  """
  The timestamp the token was created
  """
  createdAt: DateTime!

  """
  The timestamp the token was updated at
  """
  updatedAt: DateTime!

  """
  The GQL GUID of the DB providerId foreign key
  """
  providerId: ID!

  """
  The service this token is associated with, denormalized from the provider
  """
  service: IntegrationProviderServiceEnum!

  """
  true if the token configuration should be used
  """
  isActive: Boolean!

  """
  The provider to connect to
  """
  provider: IntegrationProvider!
}

"""
A connection to a list of items.
"""
type JiraServerIssueConnection {
  """
  Page info with cursors coerced to ISO8601 dates
  """
  pageInfo: PageInfo

  """
  A list of edges.
  """
  edges: [JiraServerIssueEdge!]!

  """
  An error with the connection, if any
  """
  error: StandardMutationError
}

"""
An edge in a connection.
"""
type JiraServerIssueEdge {
  """
  The item at the end of the edge
  """
  node: JiraServerIssue!
  cursor: String
}

"""
The Jira Issue that comes direct from Jira Server
"""
type JiraServerIssue implements TaskIntegration {
  id: ID!
  issueKey: ID!
  projectKey: ID!

  """
  The parabol teamId this issue was fetched for
  """
  teamId: ID!

  """
  The parabol userId this issue was fetched for
  """
  userId: ID!

  """
  The url to access the issue
  """
  url: String!

  """
  The plaintext summary of the jira issue
  """
  summary: String!
  description: String!

  """
  The description converted into raw HTML
  """
  descriptionHTML: String!
}

"""
A GitHub search query including all filters selected when the query was executed
"""
type GitHubSearchQuery {
  """
  shortid
  """
  id: ID!

  """
  The query string in GitHub format, including repository filters. e.g. is:issue is:open
  """
  queryString: String!

  """
  the time the search query was last used. Used for sorting
  """
  lastUsedAt: DateTime!
}

"""
The event that triggers a slack notification
"""
enum SlackNotificationEventEnum {
  meetingStart
  meetingEnd
  MEETING_STAGE_TIME_LIMIT_END
  MEETING_STAGE_TIME_LIMIT_START
}

"""
The type of event for a slack notification
"""
enum SlackNotificationEventTypeEnum {
  """
  notification that concerns the whole team
  """
  team

  """
  notification that concerns a single member on the team
  """
  member
}

"""
The Azure DevOps auth + integration helpers for a specific team member
"""
type AzureDevOpsIntegration {
  """
  The OAuth2 Authorization for this team member
  """
  auth: TeamMemberIntegrationAuthOAuth2

  """
  Composite key in ado:teamId:userId format
  """
  id: ID!

  """
  true if the auth is valid, else false
  """
  isActive: Boolean!

  """
  The access token to Azure DevOps. null if no access token available or the viewer is not the user
  """
  accessToken: ID

  """
  The Azure DevOps account ID
  """
  accountId: ID!

  """
  The Azure DevOps instance IDs that the user has granted
  """
  instanceIds: [ID!]!

  """
  The timestamp the provider was created
  """
  createdAt: DateTime!

  """
  The team that the token is linked to
  """
  teamId: ID!

  """
  The timestamp the token was updated at
  """
  updatedAt: DateTime!

  """
  The user that the access token is attached to
  """
  userId: ID!

  """
  The cloud provider the team member may choose to integrate with. Nullable based on env vars
  """
  cloudProvider: IntegrationProviderOAuth2

  """
  The non-global providers shared with the team or organization
  """
  sharedProviders: [IntegrationProviderOAuth2!]!
}

"""
The Azure DevOps Issue that comes direct from Azure DevOps
"""
type AzureDevOpsWorkItem {
  """
  GUID instanceId:issueKey
  """
  id: ID!

  """
  URL to the issue
  """
  url: String!
}

"""
All the user details for a specific meeting
"""
interface MeetingMember {
  """
  A composite of userId::meetingId
  """
  id: ID!

  """
  true if present, false if absent, else null
  """
  isCheckedIn: Boolean
    @deprecated(
      reason: "Members are checked in when they enter the meeting now & not created beforehand"
    )
  meetingId: ID!
  meetingType: MeetingTypeEnum!
  teamId: ID!
  teamMember: TeamMember!
  user: User!
  userId: ID!

  """
  The last time a meeting was updated (stage completed, finished, etc)
  """
  updatedAt: DateTime!
}

"""
The type of meeting
"""
enum MeetingTypeEnum {
  action
  retrospective
  poker
  teamPrompt
}

"""
The details associated with the possible repo and project integrations
"""
type RepoIntegrationQueryPayload {
  error: StandardMutationError

  """
  true if the items returned are a subset of all the possible integration, else false (all possible integrations)
  """
  hasMore: Boolean!

  """
  All the integrations that are likely to be integrated
  """
  items: [RepoIntegration!]
}

"""
The scope of a shareable item
"""
enum SharingScopeEnum {
  TEAM
  ORGANIZATION
  PUBLIC
}

"""
The team settings for a specific type of meeting
"""
interface TeamMeetingSettings {
  id: ID!

  """
  The type of meeting these settings apply to
  """
  meetingType: MeetingTypeEnum!

  """
  The broad phase types that will be addressed during the meeting
  """
  phaseTypes: [NewMeetingPhaseTypeEnum!]!

  """
  FK
  """
  teamId: ID!

  """
  The team these settings belong to
  """
  team: Team!
}

"""
The pay tier of the team
"""
enum TierEnum {
  starter
  team
  enterprise
}

"""
A grouping of organizations. Automatically grouped by top level domain of each
"""
type Company {
  """
  the top level domain
  """
  id: ID!

  """
  the number of active teams across all organizations
  """
  activeTeamCount: Int!

  """
  the number of active users across all organizations
  """
  activeUserCount: Int!

  """
  the last time any team in the organization started a meeting, null if no meetings were ever run
  """
  lastMetAt: DateTime

  """
  the total number of meetings started across all teams on all organizations
  """
  meetingCount: Int!

  """
  the longest monthly streak for meeting at least once per month for any team in the company
  """
  monthlyTeamStreakMax: Int!

  """
  Get the list of all organizations that belong to the company
  """
  organizations: [Organization!]!

  """
  The highest tier for any organization within the company
  """
  tier: TierEnum!

  """
  the total number of users across all organizations
  """
  userCount: Int!
}

"""
The role of the org user
"""
enum OrgUserRole {
  BILLING_LEADER
}

type OrgUserCount {
  """
  The number of orgUsers who have an inactive flag
  """
  inactiveUserCount: Int!

  """
  The number of orgUsers who do not have an inactive flag
  """
  activeUserCount: Int!
}

"""
The source that a change to a record came in through
"""
enum ChangeSourceEnum {
  meeting
  task
  external
}

type TaskEditorDetails {
  """
  The userId of the person editing the task
  """
  userId: ID!

  """
  The name of the userId editing the task
  """
  preferredName: String!
}

"""
The status of the task
"""
enum TaskStatusEnum {
  active
  stuck
  done
  future
}

"""
The types of flags that give an individual user super powers
"""
type UserFeatureFlags {
  """
  true if spotlight is allowed
  """
  spotlight: Boolean!

  """
  true if standups is allowed
  """
  standups: Boolean!

  """
  true if gitlab is allowed
  """
  gitlab: Boolean!

  """
  true if azuredevops is allowed
  """
  azureDevOps: Boolean!

  """
  true if recurrence is allowed
  """
  recurrence: Boolean!
}

"""
A big picture line item
"""
enum InvoiceLineItemEnum {
  ADDED_USERS
  INACTIVITY_ADJUSTMENTS
  OTHER_ADJUSTMENTS
  REMOVED_USERS
}

"""
The payment status of the invoice
"""
enum InvoiceStatusEnum {
  PENDING
  PAID
  FAILED
  UPCOMING
}

"""
A past event that is important to the viewer
"""
interface SuggestedAction {
  """
  shortid
  """
  id: ID!

  """
  * The timestamp the action was created at
  """
  createdAt: DateTime!

  """
  The priority of the suggested action compared to other suggested actions (smaller number is higher priority)
  """
  priority: Float

  """
  * The timestamp the action was removed at
  """
  removedAt: DateTime!

  """
  The specific type of suggested action
  """
  type: SuggestedActionTypeEnum!

  """
  * The userId this action is for
  """
  userId: ID!

  """
  The user than can see this event
  """
  user: User!
}

"""
The specific type of the suggested action
"""
enum SuggestedActionTypeEnum {
  inviteYourTeam
  tryTheDemo
  tryRetroMeeting
  createNewTeam
  tryActionMeeting
}

"""
A past event that is important to the viewer
"""
interface TimelineEvent {
  """
  shortid
  """
  id: ID!

  """
  * The timestamp the event was created at
  """
  createdAt: DateTime!

  """
  the number of times the user has interacted with (ie clicked) this event
  """
  interactionCount: Int!

  """
  true if the timeline event is active, false if archived
  """
  isActive: Boolean!

  """
  The orgId this event is associated with. Null if not traceable to one org
  """
  orgId: ID

  """
  The organization this event is associated with
  """
  organization: Organization

  """
  the number of times the user has seen this event
  """
  seenCount: Int!

  """
  The teamId this event is associated with. Null if not traceable to one team
  """
  teamId: ID

  """
  The team that can see this event
  """
  team: Team

  """
  The specific type of event
  """
  type: TimelineEventEnum!

  """
  * The userId that can see this event
  """
  userId: ID!

  """
  The user than can see this event
  """
  user: User!
}

"""
The specific type of event
"""
enum TimelineEventEnum {
  retroComplete
  actionComplete
  joinedParabol
  createdTeam
  POKER_COMPLETE
  TEAM_PROMPT_COMPLETE
}

"""
The topic being discussed
"""
enum DiscussionTopicTypeEnum {
  agendaItem
  reflectionGroup
  task
  teamPromptResponse
  githubIssue
  jiraIssue
}

interface Notification {
  """
  A shortid for the notification
  """
  id: ID!

  """
  UNREAD if new, READ if viewer has seen it, CLICKED if viewed clicked it
  """
  status: NotificationStatusEnum!

  """
  The datetime to activate the notification & send it to the client
  """
  createdAt: DateTime!
  type: NotificationEnum!

  """
  *The userId that should see this notification
  """
  userId: ID!
}

"""
The status of the notification interaction
"""
enum NotificationStatusEnum {
  UNREAD
  READ
  CLICKED
}

"""
The kind of notification
"""
enum NotificationEnum {
  KICKED_OUT
  PAYMENT_REJECTED
  PROMOTE_TO_BILLING_LEADER
  TEAM_INVITATION
  TEAM_ARCHIVED
  TASK_INVOLVES
  MEETING_STAGE_TIME_LIMIT_END
  TEAMS_LIMIT_EXCEEDED
  TEAMS_LIMIT_REMINDER
  PROMPT_TO_JOIN_ORG
  REQUEST_TO_JOIN_ORG
}

"""
An item that can have reactjis
"""
interface Reactable {
  """
  shortid
  """
  id: ID!

  """
  All the reactjis for the given reflection
  """
  reactjis: [Reactji!]!
}

type GoogleAnalyzedEntity {
  """
  The lemma (dictionary entry) of the entity name. Fancy way of saying the singular form of the name, if plural.
  """
  lemma: String!

  """
  The name of the entity. Usually 1 or 2 words. Always a noun, sometimes a proper noun.
  """
  name: String!

  """
  The salience of the entity in the provided text. The salience of all entities always sums to 1
  """
  salience: Float!
}

"""
An instance of a meeting phase item. On the client, this usually represents a single view
"""
interface NewMeetingTeamMemberStage {
  """
  The meeting member that is the focus for this phase item
  """
  meetingMember: MeetingMember!

  """
  foreign key. use teamMember
  """
  teamMemberId: ID!

  """
  The team member that is the focus for this phase item
  """
  teamMember: TeamMember!
}

type MeetingGreeting {
  """
  The foreign-language greeting
  """
  content: String!

  """
  The source language for the greeting
  """
  language: String!
}

"""
A meeting template that can be shared across team, orgnization and public
"""
interface MeetingTemplate {
  """
  shortid
  """
  id: ID!
  createdAt: DateTime!

  """
  True if template can be used, else false
  """
  isActive: Boolean!

  """
  The time of the meeting the template was last used
  """
  lastUsedAt: DateTime

  """
  The name of the template
  """
  name: String!

  """
  *Foreign key. The organization that owns the team that created the template
  """
  orgId: ID!

  """
  Who can see this template
  """
  scope: SharingScopeEnum!

  """
  *Foreign key. The team this template belongs to
  """
  teamId: ID!

  """
  The team this template belongs to
  """
  team: Team!

  """
  The type of the template
  """
  type: MeetingTypeEnum!
  updatedAt: DateTime!
}

"""
A meeting stage that includes a discussion thread
"""
interface DiscussionThreadStage {
  """
  The ID to find the discussion that goes in the stage
  """
  discussionId: ID!

  """
  The discussion about the stage
  """
  discussion: Discussion!
}

"""
The meeting phase where each of the team members can respond to prompts
"""
type TeamPromptResponsesPhase implements NewMeetingPhase {
  """
  shortid
  """
  id: ID!
  meetingId: ID!
  teamId: ID!

  """
  The type of phase
  """
  phaseType: NewMeetingPhaseTypeEnum!
  stages: [TeamPromptResponseStage!]!
}

"""
The stage where the single team member responds to a prompt
"""
type TeamPromptResponseStage implements NewMeetingStage & DiscussionThreadStage {
  """
  stageId, shortid
  """
  id: ID!

  """
  The datetime the stage was completed
  """
  endAt: DateTime

  """
  foreign key. try using meeting
  """
  meetingId: ID!

  """
  The meeting this stage belongs to
  """
  meeting: NewMeeting

  """
  true if the facilitator has completed this stage, else false. Should be boolean(endAt)
  """
  isComplete: Boolean!

  """
  true if any meeting participant can navigate to this stage
  """
  isNavigable: Boolean!

  """
  true if the facilitator can navigate to this stage
  """
  isNavigableByFacilitator: Boolean!

  """
  The phase this stage belongs to
  """
  phase: NewMeetingPhase

  """
  The type of the phase
  """
  phaseType: NewMeetingPhaseTypeEnum

  """
  The datetime the stage was started
  """
  startAt: DateTime

  """
  Number of times the facilitator has visited this stage
  """
  viewCount: Int

  """
  true if a time limit is set, false if end time is set, null if neither is set
  """
  isAsync: Boolean

  """
  true if the viewer is ready to advance, else false
  """
  isViewerReady: Boolean!

  """
  the number of meeting members ready to advance, excluding the facilitator
  """
  readyCount: Int!

  """
  The datetime the phase is scheduled to be finished, null if no time limit or end time is set
  """
  scheduledEndTime: DateTime

  """
  The suggested ending datetime for a phase to be completed async, null if not enough data to make a suggestion
  """
  suggestedEndTime: DateTime

  """
  The suggested time limit for a phase to be completed together, null if not enough data to make a suggestion
  """
  suggestedTimeLimit: Float
  teamId: ID!

  """
  The number of milliseconds left before the scheduled end time. Useful for unsynced client clocks. null if scheduledEndTime is null
  """
  timeRemaining: Float

  """
  The ID to find the discussion that goes in the stage
  """
  discussionId: ID!

  """
  The discussion about the stage
  """
  discussion: Discussion!

  """
  The response to the prompt
  """
  response: TeamPromptResponse!
}

"""
A response of a single team member in a team prompt
"""
type TeamPromptResponse implements Reactable {
  """
  shortid
  """
  id: ID!

  """
  All the reactjis for the given reflection
  """
  reactjis: [Reactji!]!

  """
  Id of the user who created the team prompt response
  """
  userId: ID!

  """
  The user who created the response
  """
  user: User

  """
  the content of the response
  """
  content: String!

  """
  the plain text content of the response
  """
  plaintextContent: String!

  """
  the shared sort order for reponses
  """
  sortOrder: Float!

  """
  The team this response belongs to
  """
  team: Team!
}

interface TeamNotification {
  id: ID
  type: NotificationEnum
}

"""
sorts for the reflection group. default is sortOrder. sorting by voteCount filters out items without votes.
"""
enum ReflectionGroupSortEnum {
  voteCount
  stageOrder
}

"""
A count of the number of account tiers a user belongs to.
"""
type UserTiersCount {
  """
  The number of starter orgs the user is active upon
  """
  tierStarterCount: Int

  """
  The number of team orgs the user is active upon
  """
  tierTeamCount: Int

  """
  The number of pro orgs the user holds the role of Billing Leader
  """
  tierTeamBillingLeaderCount: Int
  user: User
}

type SignupsPayload {
  """
  the total number of signups for the given time range
  """
  total: Int!

  """
  The total broken down by email domain
  """
  byDomain: [DomainCountPayload!]!
}

type AddNewFeaturePayload {
  """
  the new feature broadcast
  """
  newFeature: NewFeatureBroadcast
}

type DisconnectSocketPayload {
  """
  The user that disconnected
  """
  user: User
}

type DraftEnterpriseInvoicePayload {
  error: StandardMutationError

  """
  The updated organization
  """
  organization: Organization
}

type FlagConversionModalPayload {
  error: StandardMutationError

  """
  the org with the limit added or removed
  """
  org: Organization
}

type DeleteUserPayload {
  error: StandardMutationError
}

type ErrorPayload {
  error: StandardMutationError!
}

"""
Return object for MessageAllSlackUsersPayload
"""
union MessageAllSlackUsersPayload = ErrorPayload | MessageAllSlackUsersSuccess

type MessageAllSlackUsersSuccess {
  """
  A list of the Parabol user ids that have been sent a direct message in Slack
  """
  messagedUserIds: [ID!]!

  """
  Slack messages that failed to send
  """
  errors: [MessageSlackUserError!]
}

"""
An error from sending a message to a Slack user
"""
type MessageSlackUserError {
  userId: ID!

  """
  The error message received from Slack
  """
  error: String!
}

"""
Return object for RemoveAllSlackAuthsPayload
"""
union RemoveAllSlackAuthsPayload = ErrorPayload | RemoveAllSlackAuthsSuccess

type RemoveAllSlackAuthsSuccess {
  """
  Response from removing all Slack auths
  """
  slackAuthRes: String!

  """
  Response from removing all Slack notifications
  """
  slackNotificationRes: String!
}

type StripeFailPaymentPayload {
  error: StandardMutationError
  organization: Organization

  """
  The notification to a billing leader stating the payment was rejected
  """
  notification: NotifyPaymentRejected!
}

"""
Return object for UpdateWatchlistPayload
"""
union UpdateWatchlistPayload = ErrorPayload | UpdateWatchlistSuccess

type UpdateWatchlistSuccess {
  """
  true if the mutation was successfully executed
  """
  success: Boolean
}
