enum CanAccessEntity {
  Team
  Meeting
  Organization
}

"""
The user account profile
"""
type User {
  """
  The userId provided by us
  """
  id: ID!
  archivedTasks(
    first: Int!

    """
    the datetime cursor
    """
    after: DateTime

    """
    The unique team ID
    """
    teamId: ID!
  ): TaskConnection
  archivedTasksCount(
    """
    The unique team ID
    """
    teamId: ID!
  ): Int

  """
  The assumed company this organizaiton belongs to
  """
  company: Company

  """
  The timestamp the user was created
  """
  createdAt: DateTime!

  """
  The domains the user is a lead of
  """
  domains: [Company!]!

  """
  Domain join request
  """
  domainJoinRequest(requestId: ID!): DomainJoinRequest

  """
  The user email
  """
  email: Email!

  """
  Any super power given to the user via a super user
  """
  featureFlags: UserFeatureFlags!

  """
  An array of objects with information about the user's identities.
        More than one will exists in case accounts are linked
  """
  identities: [AuthIdentity]

  """
  true if the user is not currently being billed for service. removed on every websocket handshake
  """
  inactive: Boolean
  invoiceDetails(
    """
    The id of the invoice
    """
    invoiceId: ID!
  ): Invoice
  invoices(
    first: Int!

    """
    the datetime cursor
    """
    after: DateTime

    """
    The id of the organization
    """
    orgId: ID!
  ): InvoiceConnection

  """
  true if the user is a billing leader on any organization, else false
  """
  isAnyBillingLeader: Boolean!

  """
  true if the user is currently online
  """
  isConnected: Boolean

  """
  true if the user is the first to sign up from their domain, else false
  """
  isPatientZero: Boolean!

  """
  the reason the user account was removed
  """
  reasonRemoved: String

  """
  true if the user was removed from parabol, else false
  """
  isRemoved: Boolean!

  """
  true if all user sessions are being recorded in LogRocket, else false
  """
  isWatched: Boolean!

  """
  the endedAt timestamp of the most recent meeting they were a member of
  """
  lastMetAt: DateTime

  """
  The number of meetings the user has attended
  """
  meetingCount: Int!

  """
  The largest number of consecutive months the user has checked into a meeting
  """
  monthlyStreakMax: Int!

  """
  The number of consecutive 30-day intervals that the user has checked into a meeting as of this moment
  """
  monthlyStreakCurrent: Int!

  """
  the most important actions for the user to perform
  """
  suggestedActions: [SuggestedAction!]!

  """
  the number of times the user clicked pay later
  """
  payLaterClickCount: Int!

  """
  The timeline of important events for the viewer
  """
  timeline(
    """
    the datetime cursor
    """
    after: DateTime

    """
    the number of timeline events to return
    """
    first: Int!
  ): TimelineEventConnection!

  """
  the comments and tasks created from the discussion
  """
  discussion(
    """
    The ID of the discussion
    """
    id: ID!
  ): Discussion

  """
  the ID of the newest feature, null if the user has dismissed it
  """
  newFeatureId: ID

  """
  The new feature released by Parabol. null if the user already hid it
  """
  newFeature: NewFeatureBroadcast

  """
  url of user’s profile picture
  """
  picture: URL!

  """
  The application-specific name, defaults to email before the tld
  """
  preferredName: String!

  """
  url of user’s raster profile picture (if user profile pic is an SVG, raster will be a PNG)
  """
  rasterPicture: URL!

  """
  The last day the user connected via websocket or navigated to a common area
  """
  lastSeenAt: DateTime!

  """
  The paths that the user is currently visiting. This is null if the user is not currently online. A URL can also be null if the socket is not in a meeting, e.g. on the timeline.
  """
  lastSeenAtURLs: [String]

  """
  The meeting member associated with this user, if a meeting is currently in progress
  """
  meetingMember(
    """
    The specific meeting ID
    """
    meetingId: ID!
  ): MeetingMember

  """
  A previous meeting that the user was in (present or absent)
  """
  meeting(
    """
    The meeting ID
    """
    meetingId: ID!
  ): NewMeeting

  """
  A previous meeting that the user was in (present or absent)
  """
  newMeeting(
    """
    The meeting ID
    """
    meetingId: ID!
  ): NewMeeting

  """
  all the notifications for a single user
  """
  notifications(first: Int!, after: DateTime, types: [NotificationEnum!]): NotificationConnection!

  """
  get a single organization
  """
  organization(
    """
    the orgId
    """
    orgId: ID!
  ): Organization

  """
  The connection between a user and an organization
  """
  organizationUser(
    """
    the orgId
    """
    orgId: ID!
  ): OrganizationUser

  """
  A single user that is connected to a single organization
  """
  organizationUsers: [OrganizationUser!]!

  """
  Get the list of all organizations a user belongs to
  """
  organizations: [Organization!]!

  """
  a string with message stating that the user is over the free tier limit, else null
  """
  overLimitCopy: String

  """
  The reflection groups that are similar to the selected reflection in the Spotlight
  """
  similarReflectionGroups(
    """
    The id of the selected reflection group in the Spotlight
    """
    reflectionGroupId: ID!

    """
    Only return reflection groups that match the search query
    """
    searchQuery: String!
  ): [RetroReflectionGroup!]!
  tasks(
    """
    the number of tasks to return
    """
    first: Int!

    """
    the datetime cursor
    """
    after: DateTime

    """
    a list of user Ids that you want tasks for. if null, will return tasks for all possible team members. An id is null if it is not assigned to anyone.
    """
    userIds: [ID]

    """
    a list of team Ids that you want tasks for. if null, will return tasks for all possible active teams
    """
    teamIds: [ID!]

    """
    true to only return archived tasks; false to return active tasks
    """
    archived: Boolean = false

    """
    filter tasks by the chosen statuses
    """
    statusFilters: [TaskStatusEnum!]

    """
    only return tasks which match the given filter query
    """
    filterQuery: String

    """
    if true, include unassigned tasks. If false, only return assigned tasks
    """
    includeUnassigned: Boolean = false
  ): TaskConnection!

  """
  Check whether the viewer can access a given entity. This can be used to distinguish errors from unauthorized access which requires an invite.
  """
  canAccess(
    """
    the entity to check
    """
    entity: CanAccessEntity!

    """
    the id of the entity
    """
    id: ID!
  ): Boolean!

  """
  A query for a team
  """
  team(
    """
    The team ID for the desired team
    """
    teamId: ID!
  ): Team

  """
  The invitation sent to the user, even if it was sent before they were a user
  """
  teamInvitation(
    """
    The meetingId to check for the invitation, if teamId not available (e.g. on a meeting route)
    """
    meetingId: ID

    """
    The teamId to check for the invitation
    """
    teamId: ID
  ): TeamInvitationPayload!

  """
  all the teams the user is on that the viewer can see.
  """
  teams: [Team!]!

  """
  The team member associated with this user
  """
  teamMember(
    """
    The team the user is on
    """
    teamId: ID!

    """
    If null, defaults to the team member for this user. Else, will grab the team member. Returns null if not on team.
    """
    userId: ID
  ): TeamMember

  """
  The highest tier of any org the user belongs to
  """
  tier: TierEnum!

  """
  all the teams the user is a part of that the viewer can see
  """
  tms: [ID!]!

  """
  The timestamp the user was last updated
  """
  updatedAt: DateTime
  userOnTeam(
    """
    The other user
    """
    userId: ID!
  ): User

  availableTemplates(
    first: Int!

    """
    The cursor, which is the templateId
    """
    after: ID
  ): MeetingTemplateConnection!
}
