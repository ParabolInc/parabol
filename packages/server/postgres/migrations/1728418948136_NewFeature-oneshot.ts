import {Kysely, PostgresDialect, sql} from 'kysely'
import {Client} from 'pg'
import connectRethinkDB from '../../database/connectRethinkDB'
import getPg from '../getPg'
import getPgConfig from '../getPgConfig'

export async function up() {
  await connectRethinkDB()
  const pg = new Kysely<any>({
    dialect: new PostgresDialect({
      pool: getPg()
    })
  })
  await sql`
  DO $$
  BEGIN
    CREATE TABLE IF NOT EXISTS "NewFeature" (
      "id" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
      "actionButtonCopy" VARCHAR(50) NOT NULL,
      "snackbarMessage" VARCHAR(255) NOT NULL,
      "url" VARCHAR(2056) NOT NULL
    );
  END $$;
`.execute(pg)

  // empty out old new features, do not migrate them over
  await pg.updateTable('User').set({newFeatureId: null}).execute()
  await pg.schema
    .alterTable('User')
    .alterColumn('newFeatureId', (builder) =>
      builder.setDataType(sql`INTEGER USING "newFeatureId"::integer`)
    )
    .execute()
  await pg.schema
    .alterTable('User')
    .addForeignKeyConstraint('fk_newFeatureId', ['newFeatureId'], 'NewFeature', ['id'])
    .onDelete('set null')
    .execute()
}

export async function down() {
  const client = new Client(getPgConfig())
  await client.connect()
  await client.query(`
    DROP TABLE IF EXISTS "NewFeature";
    ` /* Do undo magic */)
  await client.end()
}
