import {Client} from 'pg'
import getPgConfig from '../getPgConfig'

export async function up() {
  const client = new Client(getPgConfig())
  await client.connect()
  await client.query(`
  DO $$
  BEGIN
    IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'IntegrationProviderServiceEnum') THEN
      CREATE TYPE "IntegrationProviderServiceEnum" AS ENUM (
        'gitlab',
        'mattermost'
      );
    END IF;
    IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'IntegrationProviderTypeEnum') THEN
      CREATE TYPE "IntegrationProviderTypeEnum" AS ENUM (
        'pat',
        'oauth2',
        'webhook'
      );
    END IF;
    IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'IntegrationProviderScopeEnum') THEN
      CREATE TYPE "IntegrationProviderScopeEnum" AS ENUM (
        'global',
        'org',
        'team'
      );
    END IF;
    CREATE TABLE IF NOT EXISTS "IntegrationProvider" (
      "id" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
      "createdAt" TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP NOT NULL,
      "updatedAt" TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP NOT NULL,
      "service" "IntegrationProviderServiceEnum" NOT NULL,
      "type" "IntegrationProviderTypeEnum" NOT NULL,
      "scope" "IntegrationProviderScopeEnum" NOT NULL,
      "scopeGlobal" BOOLEAN GENERATED ALWAYS AS (
        CASE
          WHEN "scope" = 'global' THEN TRUE
          ELSE FALSE
        END
      ) STORED NOT NULL,
      "teamId" VARCHAR(100) NOT NULL,
      "isActive" BOOLEAN DEFAULT TRUE NOT NULL,
      "providerMetadata" JSONB NOT NULL DEFAULT '{}',
      UNIQUE("scopeGlobal", "service"),
      CONSTRAINT global_provider_must_be_oauth2 CHECK (
        "scopeGlobal" IS FALSE OR ("scopeGlobal" = TRUE AND "type" = 'oauth2')
      ),
      CONSTRAINT "fk_team"
        FOREIGN KEY("teamId")
          REFERENCES "Team"("id")
          ON DELETE CASCADE
    );
    CREATE INDEX IF NOT EXISTS "idx_IntegrationProvider_teamId" ON "IntegrationProvider"("teamId");

    CREATE TABLE IF NOT EXISTS "IntegrationToken" (
      "createdAt" TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP NOT NULL,
      "updatedAt" TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP NOT NULL,
      "teamId" VARCHAR(100) NOT NULL,
      "userId" VARCHAR(100) NOT NULL,
      "providerId" INT NOT NULL,
      "service" "IntegrationProviderServiceEnum" NOT NULL,
      "isActive" BOOLEAN DEFAULT TRUE NOT NULL,
      "tokenMetadata" JSONB NOT NULL DEFAULT '{}',
      PRIMARY KEY ("userId", "teamId", "service"),
      CONSTRAINT "fk_userId"
        FOREIGN KEY("userId")
          REFERENCES "User"("id")
          ON DELETE CASCADE,
      CONSTRAINT "fk_integrationProvider"
        FOREIGN KEY("providerId")
          REFERENCES "IntegrationProvider"("id")
          ON DELETE CASCADE,
      CONSTRAINT "fk_teamId"
        FOREIGN KEY("teamId")
          REFERENCES "Team"("id")
          ON DELETE CASCADE
    );
    CREATE INDEX IF NOT EXISTS "idx_IntegrationTokens_teamId" ON "IntegrationToken"("teamId");
    CREATE INDEX IF NOT EXISTS "idx_IntegrationTokens_providerId" ON "IntegrationToken"("providerId");
  END $$;
  `)
  await client.end()
}

export async function down() {
  const client = new Client(getPgConfig())
  await client.connect()
  await client.query(`
  DROP TABLE IF EXISTS "IntegrationToken";
  DROP TABLE IF EXISTS "IntegrationProvider";
  DROP TYPE IF EXISTS "IntegrationProviderScopeEnum";
  DROP TYPE IF EXISTS "IntegrationProviderTypeEnum";
  DROP TYPE IF EXISTS "IntegrationProviderServiceEnum";
  `)
  await client.end()
}
