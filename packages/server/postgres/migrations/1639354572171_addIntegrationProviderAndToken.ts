import {Client} from 'pg'
import getPgConfig from '../getPgConfig'

export async function up() {
  const client = new Client(getPgConfig())
  await client.connect()
  await client.query(`
  DO $$
  BEGIN
    IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'IntegrationProviderServiceEnum') THEN
      CREATE TYPE "IntegrationProviderServiceEnum" AS ENUM (
        'gitlab',
        'mattermost'
      );
    END IF;
    IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'IntegrationProviderAuthStrategyEnum') THEN
      CREATE TYPE "IntegrationProviderAuthStrategyEnum" AS ENUM (
        'pat',
        'oauth2',
        'webhook'
      );
    END IF;
    IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'IntegrationProviderScopeEnum') THEN
      CREATE TYPE "IntegrationProviderScopeEnum" AS ENUM (
        'global',
        'org',
        'team'
      );
    END IF;
    CREATE TABLE IF NOT EXISTS "IntegrationProvider" (
      "id" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
      "createdAt" TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP NOT NULL,
      "updatedAt" TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP NOT NULL,
      "service" "IntegrationProviderServiceEnum" NOT NULL,
      "authStrategy" "IntegrationProviderAuthStrategyEnum" NOT NULL,
      "scope" "IntegrationProviderScopeEnum" NOT NULL,
      "scopeGlobal" BOOLEAN GENERATED ALWAYS AS (
        CASE
          WHEN "scope" = 'global' THEN TRUE
          ELSE FALSE
        END
      ) STORED NOT NULL,
      "teamId" VARCHAR(100) NOT NULL,
      "isActive" BOOLEAN DEFAULT TRUE NOT NULL,
      "clientId" VARCHAR(255),
      "clientSecret" VARCHAR(255),
      "serverBaseUrl" VARCHAR(255),
      "webhookUrl" VARCHAR(255),
      UNIQUE("teamId", "service", "authStrategy"),
      CONSTRAINT global_provider_must_be_oauth2 CHECK (
        "scopeGlobal" IS FALSE OR ("scopeGlobal" = TRUE AND "authStrategy" = 'oauth2')
      ),
      CONSTRAINT "fk_team"
        FOREIGN KEY("teamId")
          REFERENCES "Team"("id")
          ON DELETE CASCADE
    );
    CREATE INDEX IF NOT EXISTS "idx_IntegrationProvider_teamId" ON "IntegrationProvider"("teamId");

    CREATE TABLE IF NOT EXISTS "TeamMemberIntegrationAuth" (
      "createdAt" TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP NOT NULL,
      "updatedAt" TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP NOT NULL,
      "teamId" VARCHAR(100) NOT NULL,
      "userId" VARCHAR(100) NOT NULL,
      "providerId" INT NOT NULL,
      "service" "IntegrationProviderServiceEnum" NOT NULL,
      "isActive" BOOLEAN DEFAULT TRUE NOT NULL,
      "accessToken" VARCHAR(1028),
      "refreshToken" VARCHAR(1028),
      "scopes" VARCHAR(255),
      PRIMARY KEY ("userId", "teamId", "service"),
      CONSTRAINT "fk_userId"
        FOREIGN KEY("userId")
          REFERENCES "User"("id")
          ON DELETE CASCADE,
      CONSTRAINT "fk_integrationProvider"
        FOREIGN KEY("providerId")
          REFERENCES "IntegrationProvider"("id")
          ON DELETE CASCADE,
      CONSTRAINT "fk_teamId"
        FOREIGN KEY("teamId")
          REFERENCES "Team"("id")
          ON DELETE CASCADE
    );
    CREATE INDEX IF NOT EXISTS "idx_TeamMemberIntegrationAuths_teamId" ON "TeamMemberIntegrationAuth"("teamId");
    CREATE INDEX IF NOT EXISTS "idx_TeamMemberIntegrationAuths_providerId" ON "TeamMemberIntegrationAuth"("providerId");
  END $$;
  `)
  await client.end()
}

export async function down() {
  const client = new Client(getPgConfig())
  await client.connect()
  await client.query(`
  DROP TABLE IF EXISTS "TeamMemberIntegrationAuth" CASCADE;
  DROP TABLE IF EXISTS "IntegrationProvider" CASCADE;
  DROP TYPE IF EXISTS "IntegrationProviderScopeEnum" CASCADE;
  DROP TYPE IF EXISTS "IntegrationProviderAuthStrategyEnum" CASCADE;
  DROP TYPE IF EXISTS "IntegrationProviderServiceEnum" CASCADE;
  `)
  await client.end()
}
