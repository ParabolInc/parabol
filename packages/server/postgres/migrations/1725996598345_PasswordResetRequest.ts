import {Kysely, PostgresDialect, sql} from 'kysely'
import {Client} from 'pg'
import {r} from 'rethinkdb-ts'
import connectRethinkDB from '../../database/connectRethinkDB'
import getPg from '../getPg'
import getPgConfig from '../getPgConfig'

export async function up() {
  await connectRethinkDB()
  const pg = new Kysely<any>({
    dialect: new PostgresDialect({
      pool: getPg()
    })
  })
  await sql`
  DO $$
  BEGIN
    CREATE TABLE IF NOT EXISTS "PasswordResetRequest" (
      "id" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
      "ip" cidr NOT NULL,
      "email" "citext" NOT NULL,
      "time" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
      "token" VARCHAR(64) NOT NULL,
      "isValid" BOOLEAN NOT NULL DEFAULT TRUE
    );
    CREATE INDEX IF NOT EXISTS "idx_PasswordResetRequest_ip" ON "PasswordResetRequest"("ip");
    CREATE INDEX IF NOT EXISTS "idx_PasswordResetRequest_email" ON "PasswordResetRequest"("email");
    CREATE INDEX IF NOT EXISTS "idx_PasswordResetRequest_token" ON "PasswordResetRequest"("token");
  END $$;
`.execute(pg)

  const rRequests = await r.table('PasswordResetRequest').coerceTo('array').run()

  await Promise.all(
    rRequests.map(async (row) => {
      const {ip, email, time, token, isValid} = row
      try {
        return await pg
          .insertInto('PasswordResetRequest')
          .values({
            ip,
            email,
            time,
            token,
            isValid
          })
          .execute()
      } catch (e) {
        console.log(e, row)
      }
    })
  )
}

export async function down() {
  const client = new Client(getPgConfig())
  await client.connect()
  await client.query(`
    DROP TABLE IF EXISTS "PasswordResetRequest";
    ` /* Do undo magic */)
  await client.end()
}
