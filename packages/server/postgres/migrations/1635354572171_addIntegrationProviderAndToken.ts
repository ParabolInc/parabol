import {Client} from 'pg'
import getPgConfig from '../getPgConfig'

export async function up() {
  const client = new Client(getPgConfig())
  await client.connect()
  await client.query(`
  DO $$
  BEGIN
    IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'IntegrationProvidersEnum') THEN
      CREATE TYPE "IntegrationProvidersEnum" AS ENUM (
        'gitlab',
        'mattermost'
      );
    END IF;
    IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'IntegrationProviderTypesEnum') THEN
      CREATE TYPE "IntegrationProviderTypesEnum" AS ENUM (
        'pat',
        'oauth2',
        'webhook'
      );
    END IF;
    IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'IntegrationProviderScopesEnum') THEN
      CREATE TYPE "IntegrationProviderScopesEnum" AS ENUM (
        'global',
        'org',
        'team'
      );
    END IF;
    CREATE TABLE IF NOT EXISTS "IntegrationProvider" (
      "id" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
      "createdAt" TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP NOT NULL,
      "updatedAt" TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP NOT NULL,
      "provider" "IntegrationProvidersEnum" NOT NULL,
      "type" "IntegrationProviderTypesEnum" NOT NULL,
      "scope" "IntegrationProviderScopesEnum" NOT NULL,
      "scopeGlobal" BOOLEAN GENERATED ALWAYS AS (
        CASE
          WHEN "scope" = 'global' THEN TRUE
          ELSE NULL
        END
      ) STORED,
      "orgId" VARCHAR(100),
      "teamId" VARCHAR(100),
      "isActive" BOOLEAN DEFAULT TRUE NOT NULL,
      "name" VARCHAR(250) NOT NULL,
      "providerMetadata" JSONB NOT NULL DEFAULT '{}',
      UNIQUE("scopeGlobal", "provider"),
      CONSTRAINT global_provider_must_be_oauth2 CHECK (
        "scopeGlobal" IS NULL OR ("scopeGlobal" = TRUE AND "type" = 'oauth2')
      )
    );
    CREATE INDEX IF NOT EXISTS "idx_IntegrationProvider_providerAndScope"
      ON "IntegrationProvider"("provider", "scope");
    CREATE INDEX IF NOT EXISTS "idx_IntegrationProvider_orgId" ON "IntegrationProvider"("orgId");
    CREATE INDEX IF NOT EXISTS "idx_IntegrationProvider_teamId" ON "IntegrationProvider"("teamId");
    CREATE TABLE IF NOT EXISTS "IntegrationToken" (
      "createdAt" TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP NOT NULL,
      "updatedAt" TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP NOT NULL,
      "teamId" VARCHAR(100) NOT NULL,
      "userId" VARCHAR(100) NOT NULL,
      "providerId" INT NOT NULL,
      "isActive" BOOLEAN DEFAULT TRUE NOT NULL,
      "tokenMetadata" JSONB NOT NULL DEFAULT '{}',
      PRIMARY KEY ("providerId", "userId", "teamId"),
      CONSTRAINT "fk_userId"
        FOREIGN KEY("userId")
          REFERENCES "User"("id"),
      CONSTRAINT "fk_integrationProvider"
        FOREIGN KEY("providerId")
          REFERENCES "IntegrationProvider"("id")
    );
    CREATE INDEX IF NOT EXISTS "idx_IntegrationTokens_teamId" ON "IntegrationToken"("teamId");
    CREATE INDEX IF NOT EXISTS "idx_IntegrationTokens_providerId" ON "IntegrationToken"("providerId");
  END $$;
  `)
  await client.end()
}

export async function down() {
  const client = new Client(getPgConfig())
  await client.connect()
  await client.query(`
  DROP TABLE "IntegrationToken";
  DROP TABLE "IntegrationProvider";
  DROP TYPE "IntegrationProviderScopesEnum";
  DROP TYPE "IntegrationProviderTypesEnum";
  DROP TYPE "IntegrationProvidersEnum";
  `)
  await client.end()
}
