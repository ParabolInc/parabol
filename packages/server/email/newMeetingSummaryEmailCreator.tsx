import {PALETTE} from 'parabol-client/styles/paletteV3'
import {MEETING_SUMMARY_LABEL} from 'parabol-client/utils/constants'
import appOrigin from '../appOrigin'
import AuthToken from '../database/types/AuthToken'
import {type InternalContext} from '../graphql/graphql'
import ServerEnvironment from './ServerEnvironment'
import emailTemplate from './emailTemplate'
import renderSSRElement from './renderSSRElement'

interface Props {
  meetingId: string
  context: InternalContext
}

const newMeetingSummaryEmailCreator = async (props: Props) => {
  const {meetingId, context} = props
  const {dataLoader} = context

  const newMeeting = await dataLoader.get('newMeetings').loadNonNull(meetingId)
  const facilitator = await dataLoader.get('users').loadNonNull(newMeeting.facilitatorUserId!)
  const {tms} = facilitator
  const authToken = new AuthToken({sub: newMeeting.facilitatorUserId!, tms, rol: 'impersonate'})
  const environment = new ServerEnvironment({...context, authToken})

  // this depends on types, and those types are generated by created the schema, which must crawl the endMeeting file
  const MeetingSummaryEmailRootSSR =
    require('parabol-client/modules/email/components/MeetingSummaryEmailRootSSR').default
  const bodyContent = await renderSSRElement(
    <MeetingSummaryEmailRootSSR appOrigin={appOrigin} meetingId={meetingId} />,
    environment
  )
  const team = await dataLoader.get('teams').loadNonNull(newMeeting.teamId)
  const {name: meetingName} = newMeeting
  const {name: teamName} = team
  const subject = `${teamName} ${meetingName} ${MEETING_SUMMARY_LABEL}`
  const html = emailTemplate({
    bodyContent,
    title: subject,
    previewText: subject,
    bgColor: PALETTE.SLATE_200
  })

  return {
    subject,
    body: `Hello, ${teamName}. Here is your ${meetingName} summary`,
    html
  }
}

export default newMeetingSummaryEmailCreator
