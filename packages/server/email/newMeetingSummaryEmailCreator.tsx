import {PALETTE} from 'parabol-client/styles/paletteV3'
import {MEETING_SUMMARY_LABEL} from 'parabol-client/utils/constants'
import React from 'react'
import appOrigin from '../appOrigin'
import {GQLContext} from '../graphql/graphql'
import emailTemplate from './emailTemplate'
import renderSSRElement from './renderSSRElement'
import ServerEnvironment from './ServerEnvironment'
interface Props {
  meetingId: string
  context: GQLContext
}

const newMeetingSummaryEmailCreator = async (props: Props) => {
  const {meetingId, context} = props
  const {authToken, dataLoader} = context
  const dataLoaderId = dataLoader.share()
  const environment = new ServerEnvironment(authToken, dataLoaderId)
  // this depends on types, and those types are generated by created the schema, which must crawl the endMeeting file
  const MeetingSummaryEmailRootSSR =
    require('parabol-client/modules/email/components/MeetingSummaryEmailRootSSR').default
  const bodyContent = await renderSSRElement(
    <MeetingSummaryEmailRootSSR
      appOrigin={appOrigin}
      environment={environment}
      meetingId={meetingId}
    />,
    environment
  )
  const newMeeting = await dataLoader.get('newMeetings').load(meetingId)
  const team = await dataLoader.get('teams').loadNonNull(newMeeting.teamId)
  const {name: meetingName} = newMeeting
  const {name: teamName} = team
  const subject = `${teamName} ${meetingName} ${MEETING_SUMMARY_LABEL}`
  const html = emailTemplate({
    bodyContent,
    title: subject,
    previewText: subject,
    bgColor: PALETTE.SLATE_200
  })

  return {
    subject,
    body: `Hello, ${teamName}. Here is your ${meetingName} summary`,
    html
  }
}

export default newMeetingSummaryEmailCreator
