// AUTOMATICALLY GENERATED FILE - DO NOT EDIT

// tslint:disable

export interface IGraphQLResponseRoot {
  data?: IQuery | IMutation | ISubscription;
  errors?: Array<IGraphQLResponseError>;
}

export interface IGraphQLResponseError {
  /** Required for all errors */
  message: string;
  locations?: Array<IGraphQLResponseErrorLocation>;
  /** 7.2.2 says 'GraphQL servers may provide additional entries to error' */
  [propName: string]: any;
}

export interface IGraphQLResponseErrorLocation {
  line: number;
  column: number;
}

/**
 * Autogenerated input type of AcceptEnterpriseAdministratorInvitation
 */
export interface IXGitHubAcceptEnterpriseAdministratorInvitationInput {
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;

  /**
   * The id of the invitation being accepted
   */
  invitationId: string;
}

/**
 * Autogenerated return type of AcceptEnterpriseAdministratorInvitation
 */
export interface IXGitHubAcceptEnterpriseAdministratorInvitationPayload {
  __typename: '_xGitHubAcceptEnterpriseAdministratorInvitationPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The invitation that was accepted.
   */
  invitation: IXGitHubEnterpriseAdministratorInvitation | null;

  /**
   * A message confirming the result of accepting an administrator invitation.
   */
  message: string | null;
}

/**
 * Autogenerated input type of AcceptTopicSuggestion
 */
export interface IXGitHubAcceptTopicSuggestionInput {
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;

  /**
   * The name of the suggested topic.
   */
  name: string;

  /**
   * The Node ID of the repository.
   */
  repositoryId: string;
}

/**
 * Autogenerated return type of AcceptTopicSuggestion
 */
export interface IXGitHubAcceptTopicSuggestionPayload {
  __typename: '_xGitHubAcceptTopicSuggestionPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The accepted topic.
   */
  topic: IXGitHubTopic | null;
}

/**
 * Represents an object which can take actions on GitHub. Typically a User or Bot.
 */
export type _xGitHubActor =
  | IXGitHubBot
  | IXGitHubEnterpriseUserAccount
  | IXGitHubMannequin
  | IXGitHubOrganization
  | IXGitHubUser;

/**
 * Represents an object which can take actions on GitHub. Typically a User or Bot.
 */
export interface IXGitHubActor {
  __typename: '_xGitHubActor';

  /**
   * A URL pointing to the actor's public avatar.
   */
  avatarUrl: any;

  /**
   * The username of the actor.
   */
  login: string;

  /**
   * The HTTP path for this actor.
   */
  resourcePath: any;

  /**
   * The HTTP URL for this actor.
   */
  url: any;
}

export interface IAvatarUrlOnXGitHubActorArguments {
  /**
   * The size of the resulting square image.
   */
  size?: number | null;
}

/**
 * Location information for an actor
 */
export interface IXGitHubActorLocation {
  __typename: '_xGitHubActorLocation';

  /**
   * City
   */
  city: string | null;

  /**
   * Country name
   */
  country: string | null;

  /**
   * Country code
   */
  countryCode: string | null;

  /**
   * Region name
   */
  region: string | null;

  /**
   * Region or state code
   */
  regionCode: string | null;
}

/**
 * Autogenerated input type of AddAssigneesToAssignable
 */
export interface IXGitHubAddAssigneesToAssignableInput {
  /**
   * The id of the assignable object to add assignees to.
   */
  assignableId: string;

  /**
   * The id of users to add as assignees.
   */
  assigneeIds: Array<string>;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of AddAssigneesToAssignable
 */
export interface IXGitHubAddAssigneesToAssignablePayload {
  __typename: '_xGitHubAddAssigneesToAssignablePayload';

  /**
   * The item that was assigned.
   */
  assignable: _xGitHubAssignable | null;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;
}

/**
 * Autogenerated input type of AddComment
 */
export interface IXGitHubAddCommentInput {
  /**
   * The contents of the comment.
   */
  body: string;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;

  /**
   * The Node ID of the subject to modify.
   */
  subjectId: string;
}

/**
 * Autogenerated return type of AddComment
 */
export interface IXGitHubAddCommentPayload {
  __typename: '_xGitHubAddCommentPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The edge from the subject's comment connection.
   */
  commentEdge: IXGitHubIssueCommentEdge | null;

  /**
   * The subject
   */
  subject: _xGitHubNode | null;

  /**
   * The edge from the subject's timeline connection.
   */
  timelineEdge: IXGitHubIssueTimelineItemEdge | null;
}

/**
 * Autogenerated input type of AddDiscussionComment
 */
export interface IXGitHubAddDiscussionCommentInput {
  /**
   * The contents of the comment.
   */
  body: string;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;

  /**
   * The Node ID of the discussion to comment on.
   */
  discussionId: string;

  /**
   * The Node ID of the discussion comment within this discussion to reply to.
   */
  replyToId?: string | null;
}

/**
 * Autogenerated return type of AddDiscussionComment
 */
export interface IXGitHubAddDiscussionCommentPayload {
  __typename: '_xGitHubAddDiscussionCommentPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The newly created discussion comment.
   */
  comment: IXGitHubDiscussionComment | null;
}

/**
 * Autogenerated input type of AddEnterpriseSupportEntitlement
 */
export interface IXGitHubAddEnterpriseSupportEntitlementInput {
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;

  /**
   * The ID of the Enterprise which the admin belongs to.
   */
  enterpriseId: string;

  /**
   * The login of a member who will receive the support entitlement.
   */
  login: string;
}

/**
 * Autogenerated return type of AddEnterpriseSupportEntitlement
 */
export interface IXGitHubAddEnterpriseSupportEntitlementPayload {
  __typename: '_xGitHubAddEnterpriseSupportEntitlementPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * A message confirming the result of adding the support entitlement.
   */
  message: string | null;
}

/**
 * Autogenerated input type of AddLabelsToLabelable
 */
export interface IXGitHubAddLabelsToLabelableInput {
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;

  /**
   * The ids of the labels to add.
   */
  labelIds: Array<string>;

  /**
   * The id of the labelable object to add labels to.
   */
  labelableId: string;
}

/**
 * Autogenerated return type of AddLabelsToLabelable
 */
export interface IXGitHubAddLabelsToLabelablePayload {
  __typename: '_xGitHubAddLabelsToLabelablePayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The item that was labeled.
   */
  labelable: _xGitHubLabelable | null;
}

/**
 * Autogenerated input type of AddProjectCard
 */
export interface IXGitHubAddProjectCardInput {
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;

  /**
   * The content of the card. Must be a member of the ProjectCardItem union
   */
  contentId?: string | null;

  /**
   * The note on the card.
   */
  note?: string | null;

  /**
   * The Node ID of the ProjectColumn.
   */
  projectColumnId: string;
}

/**
 * Autogenerated return type of AddProjectCard
 */
export interface IXGitHubAddProjectCardPayload {
  __typename: '_xGitHubAddProjectCardPayload';

  /**
   * The edge from the ProjectColumn's card connection.
   */
  cardEdge: IXGitHubProjectCardEdge | null;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The ProjectColumn
   */
  projectColumn: IXGitHubProjectColumn | null;
}

/**
 * Autogenerated input type of AddProjectColumn
 */
export interface IXGitHubAddProjectColumnInput {
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;

  /**
   * The name of the column.
   */
  name: string;

  /**
   * The Node ID of the project.
   */
  projectId: string;
}

/**
 * Autogenerated return type of AddProjectColumn
 */
export interface IXGitHubAddProjectColumnPayload {
  __typename: '_xGitHubAddProjectColumnPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The edge from the project's column connection.
   */
  columnEdge: IXGitHubProjectColumnEdge | null;

  /**
   * The project
   */
  project: IXGitHubProject | null;
}

/**
 * Autogenerated input type of AddPullRequestReviewComment
 */
export interface IXGitHubAddPullRequestReviewCommentInput {
  /**
   * The text of the comment.
   */
  body: string;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;

  /**
   * The SHA of the commit to comment on.
   */
  commitOID?: any | null;

  /**
   * The comment id to reply to.
   */
  inReplyTo?: string | null;

  /**
   * The relative path of the file to comment on.
   */
  path?: string | null;

  /**
   * The line index in the diff to comment on.
   */
  position?: number | null;

  /**
   * The node ID of the pull request reviewing
   */
  pullRequestId?: string | null;

  /**
   * The Node ID of the review to modify.
   */
  pullRequestReviewId?: string | null;
}

/**
 * Autogenerated return type of AddPullRequestReviewComment
 */
export interface IXGitHubAddPullRequestReviewCommentPayload {
  __typename: '_xGitHubAddPullRequestReviewCommentPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The newly created comment.
   */
  comment: IXGitHubPullRequestReviewComment | null;

  /**
   * The edge from the review's comment connection.
   */
  commentEdge: IXGitHubPullRequestReviewCommentEdge | null;
}

/**
 * Autogenerated input type of AddPullRequestReview
 */
export interface IXGitHubAddPullRequestReviewInput {
  /**
   * The contents of the review body comment.
   */
  body?: string | null;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;

  /**
   * The review line comments.
   */
  comments?: Array<IXGitHubDraftPullRequestReviewComment | null> | null;

  /**
   * The commit OID the review pertains to.
   */
  commitOID?: any | null;

  /**
   * The event to perform on the pull request review.
   */
  event?: XGitHubPullRequestReviewEvent | null;

  /**
   * The Node ID of the pull request to modify.
   */
  pullRequestId: string;

  /**
   * The review line comment threads.
   */
  threads?: Array<IXGitHubDraftPullRequestReviewThread | null> | null;
}

/**
 * Autogenerated return type of AddPullRequestReview
 */
export interface IXGitHubAddPullRequestReviewPayload {
  __typename: '_xGitHubAddPullRequestReviewPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The newly created pull request review.
   */
  pullRequestReview: IXGitHubPullRequestReview | null;

  /**
   * The edge from the pull request's review connection.
   */
  reviewEdge: IXGitHubPullRequestReviewEdge | null;
}

/**
 * Autogenerated input type of AddPullRequestReviewThread
 */
export interface IXGitHubAddPullRequestReviewThreadInput {
  /**
   * Body of the thread's first comment.
   */
  body: string;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;

  /**
   * The line of the blob to which the thread refers. The end of the line range for multi-line comments.
   */
  line: number;

  /**
   * Path to the file being commented on.
   */
  path: string;

  /**
   * The node ID of the pull request reviewing
   */
  pullRequestId?: string | null;

  /**
   * The Node ID of the review to modify.
   */
  pullRequestReviewId?: string | null;

  /**
   * The side of the diff on which the line resides. For multi-line comments, this is the side for the end of the line range.
   * @default "RIGHT"
   */
  side?: XGitHubDiffSide | null;

  /**
   * The first line of the range to which the comment refers.
   */
  startLine?: number | null;

  /**
   * The side of the diff on which the start line resides.
   * @default "RIGHT"
   */
  startSide?: XGitHubDiffSide | null;
}

/**
 * Autogenerated return type of AddPullRequestReviewThread
 */
export interface IXGitHubAddPullRequestReviewThreadPayload {
  __typename: '_xGitHubAddPullRequestReviewThreadPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The newly created thread.
   */
  thread: IXGitHubPullRequestReviewThread | null;
}

/**
 * Autogenerated input type of AddReaction
 */
export interface IXGitHubAddReactionInput {
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;

  /**
   * The name of the emoji to react with.
   */
  content: XGitHubReactionContent;

  /**
   * The Node ID of the subject to modify.
   */
  subjectId: string;
}

/**
 * Autogenerated return type of AddReaction
 */
export interface IXGitHubAddReactionPayload {
  __typename: '_xGitHubAddReactionPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The reaction object.
   */
  reaction: IXGitHubReaction | null;

  /**
   * The reactable subject.
   */
  subject: _xGitHubReactable | null;
}

/**
 * Autogenerated input type of AddStar
 */
export interface IXGitHubAddStarInput {
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;

  /**
   * The Starrable ID to star.
   */
  starrableId: string;
}

/**
 * Autogenerated return type of AddStar
 */
export interface IXGitHubAddStarPayload {
  __typename: '_xGitHubAddStarPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The starrable.
   */
  starrable: _xGitHubStarrable | null;
}

/**
 * Autogenerated input type of AddUpvote
 */
export interface IXGitHubAddUpvoteInput {
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;

  /**
   * The Node ID of the discussion or comment to upvote.
   */
  subjectId: string;
}

/**
 * Autogenerated return type of AddUpvote
 */
export interface IXGitHubAddUpvotePayload {
  __typename: '_xGitHubAddUpvotePayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The votable subject.
   */
  subject: _xGitHubVotable | null;
}

/**
 * Autogenerated input type of AddVerifiableDomain
 */
export interface IXGitHubAddVerifiableDomainInput {
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;

  /**
   * The URL of the domain
   */
  domain: any;

  /**
   * The ID of the owner to add the domain to
   */
  ownerId: string;
}

/**
 * Autogenerated return type of AddVerifiableDomain
 */
export interface IXGitHubAddVerifiableDomainPayload {
  __typename: '_xGitHubAddVerifiableDomainPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The verifiable domain that was added.
   */
  domain: IXGitHubVerifiableDomain | null;
}

/**
 * Represents a 'added_to_project' event on a given issue or pull request.
 */
export interface IXGitHubAddedToProjectEvent {
  __typename: '_xGitHubAddedToProjectEvent';

  /**
   * Identifies the actor who performed the event.
   */
  actor: _xGitHubActor | null;

  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: any;

  /**
   * Identifies the primary key from the database.
   */
  databaseId: number | null;
  id: string;
}

/**
 * A GitHub App.
 */
export interface IXGitHubApp {
  __typename: '_xGitHubApp';

  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: any;

  /**
   * Identifies the primary key from the database.
   */
  databaseId: number | null;

  /**
   * The description of the app.
   */
  description: string | null;
  id: string;

  /**
   * The IP addresses of the app.
   */
  ipAllowListEntries: IXGitHubIpAllowListEntryConnection;

  /**
   * The hex color code, without the leading '#', for the logo background.
   */
  logoBackgroundColor: string;

  /**
   * A URL pointing to the app's logo.
   */
  logoUrl: any;

  /**
   * The name of the app.
   */
  name: string;

  /**
   * A slug based on the name of the app for use in URLs.
   */
  slug: string;

  /**
   * Identifies the date and time when the object was last updated.
   */
  updatedAt: any;

  /**
   * The URL to the app's homepage.
   */
  url: any;
}

export interface IIpAllowListEntriesOnXGitHubAppArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Ordering options for IP allow list entries returned.
   * @default {"direction":"ASC","field":"ALLOW_LIST_VALUE"}
   */
  orderBy?: IXGitHubIpAllowListEntryOrder | null;
}

export interface ILogoUrlOnXGitHubAppArguments {
  /**
   * The size of the resulting image.
   */
  size?: number | null;
}

/**
 * Autogenerated input type of ApproveDeployments
 */
export interface IXGitHubApproveDeploymentsInput {
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;

  /**
   * Optional comment for approving deployments
   * @default ""
   */
  comment?: string | null;

  /**
   * The ids of environments to reject deployments
   */
  environmentIds: Array<string>;

  /**
   * The node ID of the workflow run containing the pending deployments.
   */
  workflowRunId: string;
}

/**
 * Autogenerated return type of ApproveDeployments
 */
export interface IXGitHubApproveDeploymentsPayload {
  __typename: '_xGitHubApproveDeploymentsPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The affected deployments.
   */
  deployments: Array<IXGitHubDeployment> | null;
}

/**
 * Autogenerated input type of ApproveVerifiableDomain
 */
export interface IXGitHubApproveVerifiableDomainInput {
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;

  /**
   * The ID of the verifiable domain to approve.
   */
  id: string;
}

/**
 * Autogenerated return type of ApproveVerifiableDomain
 */
export interface IXGitHubApproveVerifiableDomainPayload {
  __typename: '_xGitHubApproveVerifiableDomainPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The verifiable domain that was approved.
   */
  domain: IXGitHubVerifiableDomain | null;
}

/**
 * Autogenerated input type of ArchiveRepository
 */
export interface IXGitHubArchiveRepositoryInput {
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;

  /**
   * The ID of the repository to mark as archived.
   */
  repositoryId: string;
}

/**
 * Autogenerated return type of ArchiveRepository
 */
export interface IXGitHubArchiveRepositoryPayload {
  __typename: '_xGitHubArchiveRepositoryPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The repository that was marked as archived.
   */
  repository: IXGitHubRepository | null;
}

/**
 * An object that can have users assigned to it.
 */
export type _xGitHubAssignable = IXGitHubIssue | IXGitHubPullRequest;

/**
 * An object that can have users assigned to it.
 */
export interface IXGitHubAssignable {
  __typename: '_xGitHubAssignable';

  /**
   * A list of Users assigned to this object.
   */
  assignees: IXGitHubUserConnection;
}

export interface IAssigneesOnXGitHubAssignableArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

/**
 * Represents an 'assigned' event on any assignable object.
 */
export interface IXGitHubAssignedEvent {
  __typename: '_xGitHubAssignedEvent';

  /**
   * Identifies the actor who performed the event.
   */
  actor: _xGitHubActor | null;

  /**
   * Identifies the assignable associated with the event.
   */
  assignable: _xGitHubAssignable;

  /**
   * Identifies the user or mannequin that was assigned.
   */
  assignee: _xGitHubAssignee | null;

  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: any;
  id: string;

  /**
   * Identifies the user who was assigned.
   * @deprecated "Assignees can now be mannequins. Use the `assignee` field instead. Removal on 2020-01-01 UTC."
   */
  user: IXGitHubUser | null;
}

/**
 * Types that can be assigned to issues.
 */
export type _xGitHubAssignee =
  | IXGitHubBot
  | IXGitHubMannequin
  | IXGitHubOrganization
  | IXGitHubUser;

/**
 * An entry in the audit log.
 */
export type _xGitHubAuditEntry =
  | IXGitHubMembersCanDeleteReposClearAuditEntry
  | IXGitHubMembersCanDeleteReposDisableAuditEntry
  | IXGitHubMembersCanDeleteReposEnableAuditEntry
  | IXGitHubOauthApplicationCreateAuditEntry
  | IXGitHubOrgAddBillingManagerAuditEntry
  | IXGitHubOrgAddMemberAuditEntry
  | IXGitHubOrgBlockUserAuditEntry
  | IXGitHubOrgConfigDisableCollaboratorsOnlyAuditEntry
  | IXGitHubOrgConfigEnableCollaboratorsOnlyAuditEntry
  | IXGitHubOrgCreateAuditEntry
  | IXGitHubOrgDisableOauthAppRestrictionsAuditEntry
  | IXGitHubOrgDisableSamlAuditEntry
  | IXGitHubOrgDisableTwoFactorRequirementAuditEntry
  | IXGitHubOrgEnableOauthAppRestrictionsAuditEntry
  | IXGitHubOrgEnableSamlAuditEntry
  | IXGitHubOrgEnableTwoFactorRequirementAuditEntry
  | IXGitHubOrgInviteMemberAuditEntry
  | IXGitHubOrgInviteToBusinessAuditEntry
  | IXGitHubOrgOauthAppAccessApprovedAuditEntry
  | IXGitHubOrgOauthAppAccessDeniedAuditEntry
  | IXGitHubOrgOauthAppAccessRequestedAuditEntry
  | IXGitHubOrgRemoveBillingManagerAuditEntry
  | IXGitHubOrgRemoveMemberAuditEntry
  | IXGitHubOrgRemoveOutsideCollaboratorAuditEntry
  | IXGitHubOrgRestoreMemberAuditEntry
  | IXGitHubOrgUnblockUserAuditEntry
  | IXGitHubOrgUpdateDefaultRepositoryPermissionAuditEntry
  | IXGitHubOrgUpdateMemberAuditEntry
  | IXGitHubOrgUpdateMemberRepositoryCreationPermissionAuditEntry
  | IXGitHubOrgUpdateMemberRepositoryInvitationPermissionAuditEntry
  | IXGitHubPrivateRepositoryForkingDisableAuditEntry
  | IXGitHubPrivateRepositoryForkingEnableAuditEntry
  | IXGitHubRepoAccessAuditEntry
  | IXGitHubRepoAddMemberAuditEntry
  | IXGitHubRepoAddTopicAuditEntry
  | IXGitHubRepoArchivedAuditEntry
  | IXGitHubRepoChangeMergeSettingAuditEntry
  | IXGitHubRepoConfigDisableAnonymousGitAccessAuditEntry
  | IXGitHubRepoConfigDisableCollaboratorsOnlyAuditEntry
  | IXGitHubRepoConfigDisableContributorsOnlyAuditEntry
  | IXGitHubRepoConfigDisableSockpuppetDisallowedAuditEntry
  | IXGitHubRepoConfigEnableAnonymousGitAccessAuditEntry
  | IXGitHubRepoConfigEnableCollaboratorsOnlyAuditEntry
  | IXGitHubRepoConfigEnableContributorsOnlyAuditEntry
  | IXGitHubRepoConfigEnableSockpuppetDisallowedAuditEntry
  | IXGitHubRepoConfigLockAnonymousGitAccessAuditEntry
  | IXGitHubRepoConfigUnlockAnonymousGitAccessAuditEntry
  | IXGitHubRepoCreateAuditEntry
  | IXGitHubRepoDestroyAuditEntry
  | IXGitHubRepoRemoveMemberAuditEntry
  | IXGitHubRepoRemoveTopicAuditEntry
  | IXGitHubRepositoryVisibilityChangeDisableAuditEntry
  | IXGitHubRepositoryVisibilityChangeEnableAuditEntry
  | IXGitHubTeamAddMemberAuditEntry
  | IXGitHubTeamAddRepositoryAuditEntry
  | IXGitHubTeamChangeParentTeamAuditEntry
  | IXGitHubTeamRemoveMemberAuditEntry
  | IXGitHubTeamRemoveRepositoryAuditEntry;

/**
 * An entry in the audit log.
 */
export interface IXGitHubAuditEntry {
  __typename: '_xGitHubAuditEntry';

  /**
   * The action name
   */
  action: string;

  /**
   * The user who initiated the action
   */
  actor: _xGitHubAuditEntryActor | null;

  /**
   * The IP address of the actor
   */
  actorIp: string | null;

  /**
   * A readable representation of the actor's location
   */
  actorLocation: IXGitHubActorLocation | null;

  /**
   * The username of the user who initiated the action
   */
  actorLogin: string | null;

  /**
   * The HTTP path for the actor.
   */
  actorResourcePath: any | null;

  /**
   * The HTTP URL for the actor.
   */
  actorUrl: any | null;

  /**
   * The time the action was initiated
   */
  createdAt: any;

  /**
   * The corresponding operation type for the action
   */
  operationType: XGitHubOperationType | null;

  /**
   * The user affected by the action
   */
  user: IXGitHubUser | null;

  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin: string | null;

  /**
   * The HTTP path for the user.
   */
  userResourcePath: any | null;

  /**
   * The HTTP URL for the user.
   */
  userUrl: any | null;
}

/**
 * Types that can initiate an audit log event.
 */
export type _xGitHubAuditEntryActor =
  | IXGitHubBot
  | IXGitHubOrganization
  | IXGitHubUser;

/**
 * Ordering options for Audit Log connections.
 */
export interface IXGitHubAuditLogOrder {
  /**
   * The ordering direction.
   */
  direction?: XGitHubOrderDirection | null;

  /**
   * The field to order Audit Logs by.
   */
  field?: XGitHubAuditLogOrderField | null;
}

/**
 * Properties by which Audit Log connections can be ordered.
 */
export const enum XGitHubAuditLogOrderField {
  /**
   * Order audit log entries by timestamp
   */
  CREATED_AT = 'CREATED_AT'
}

/**
 * Represents a 'auto_merge_disabled' event on a given pull request.
 */
export interface IXGitHubAutoMergeDisabledEvent {
  __typename: '_xGitHubAutoMergeDisabledEvent';

  /**
   * Identifies the actor who performed the event.
   */
  actor: _xGitHubActor | null;

  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: any;

  /**
   * The user who disabled auto-merge for this Pull Request
   */
  disabler: IXGitHubUser | null;
  id: string;

  /**
   * PullRequest referenced by event
   */
  pullRequest: IXGitHubPullRequest | null;

  /**
   * The reason auto-merge was disabled
   */
  reason: string | null;

  /**
   * The reason_code relating to why auto-merge was disabled
   */
  reasonCode: string | null;
}

/**
 * Represents a 'auto_merge_enabled' event on a given pull request.
 */
export interface IXGitHubAutoMergeEnabledEvent {
  __typename: '_xGitHubAutoMergeEnabledEvent';

  /**
   * Identifies the actor who performed the event.
   */
  actor: _xGitHubActor | null;

  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: any;

  /**
   * The user who enabled auto-merge for this Pull Request
   */
  enabler: IXGitHubUser | null;
  id: string;

  /**
   * PullRequest referenced by event.
   */
  pullRequest: IXGitHubPullRequest | null;
}

/**
 * Represents an auto-merge request for a pull request
 */
export interface IXGitHubAutoMergeRequest {
  __typename: '_xGitHubAutoMergeRequest';

  /**
   * The email address of the author of this auto-merge request.
   */
  authorEmail: string | null;

  /**
   * The commit message of the auto-merge request.
   */
  commitBody: string | null;

  /**
   * The commit title of the auto-merge request.
   */
  commitHeadline: string | null;

  /**
   * When was this auto-merge request was enabled.
   */
  enabledAt: any | null;

  /**
   * The actor who created the auto-merge request.
   */
  enabledBy: _xGitHubActor | null;

  /**
   * The merge method of the auto-merge request.
   */
  mergeMethod: XGitHubPullRequestMergeMethod;

  /**
   * The pull request that this auto-merge request is set against.
   */
  pullRequest: IXGitHubPullRequest;
}

/**
 * Represents a 'auto_rebase_enabled' event on a given pull request.
 */
export interface IXGitHubAutoRebaseEnabledEvent {
  __typename: '_xGitHubAutoRebaseEnabledEvent';

  /**
   * Identifies the actor who performed the event.
   */
  actor: _xGitHubActor | null;

  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: any;

  /**
   * The user who enabled auto-merge (rebase) for this Pull Request
   */
  enabler: IXGitHubUser | null;
  id: string;

  /**
   * PullRequest referenced by event.
   */
  pullRequest: IXGitHubPullRequest | null;
}

/**
 * Represents a 'auto_squash_enabled' event on a given pull request.
 */
export interface IXGitHubAutoSquashEnabledEvent {
  __typename: '_xGitHubAutoSquashEnabledEvent';

  /**
   * Identifies the actor who performed the event.
   */
  actor: _xGitHubActor | null;

  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: any;

  /**
   * The user who enabled auto-merge (squash) for this Pull Request
   */
  enabler: IXGitHubUser | null;
  id: string;

  /**
   * PullRequest referenced by event.
   */
  pullRequest: IXGitHubPullRequest | null;
}

/**
 * Represents a 'automatic_base_change_failed' event on a given pull request.
 */
export interface IXGitHubAutomaticBaseChangeFailedEvent {
  __typename: '_xGitHubAutomaticBaseChangeFailedEvent';

  /**
   * Identifies the actor who performed the event.
   */
  actor: _xGitHubActor | null;

  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: any;
  id: string;

  /**
   * The new base for this PR
   */
  newBase: string;

  /**
   * The old base for this PR
   */
  oldBase: string;

  /**
   * PullRequest referenced by event.
   */
  pullRequest: IXGitHubPullRequest;
}

/**
 * Represents a 'automatic_base_change_succeeded' event on a given pull request.
 */
export interface IXGitHubAutomaticBaseChangeSucceededEvent {
  __typename: '_xGitHubAutomaticBaseChangeSucceededEvent';

  /**
   * Identifies the actor who performed the event.
   */
  actor: _xGitHubActor | null;

  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: any;
  id: string;

  /**
   * The new base for this PR
   */
  newBase: string;

  /**
   * The old base for this PR
   */
  oldBase: string;

  /**
   * PullRequest referenced by event.
   */
  pullRequest: IXGitHubPullRequest;
}

/**
 * Represents a 'base_ref_changed' event on a given issue or pull request.
 */
export interface IXGitHubBaseRefChangedEvent {
  __typename: '_xGitHubBaseRefChangedEvent';

  /**
   * Identifies the actor who performed the event.
   */
  actor: _xGitHubActor | null;

  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: any;

  /**
   * Identifies the name of the base ref for the pull request after it was changed.
   */
  currentRefName: string;

  /**
   * Identifies the primary key from the database.
   */
  databaseId: number | null;
  id: string;

  /**
   * Identifies the name of the base ref for the pull request before it was changed.
   */
  previousRefName: string;

  /**
   * PullRequest referenced by event.
   */
  pullRequest: IXGitHubPullRequest;
}

/**
 * Represents a 'base_ref_deleted' event on a given pull request.
 */
export interface IXGitHubBaseRefDeletedEvent {
  __typename: '_xGitHubBaseRefDeletedEvent';

  /**
   * Identifies the actor who performed the event.
   */
  actor: _xGitHubActor | null;

  /**
   * Identifies the name of the Ref associated with the `base_ref_deleted` event.
   */
  baseRefName: string | null;

  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: any;
  id: string;

  /**
   * PullRequest referenced by event.
   */
  pullRequest: IXGitHubPullRequest | null;
}

/**
 * Represents a 'base_ref_force_pushed' event on a given pull request.
 */
export interface IXGitHubBaseRefForcePushedEvent {
  __typename: '_xGitHubBaseRefForcePushedEvent';

  /**
   * Identifies the actor who performed the event.
   */
  actor: _xGitHubActor | null;

  /**
   * Identifies the after commit SHA for the 'base_ref_force_pushed' event.
   */
  afterCommit: IXGitHubCommit | null;

  /**
   * Identifies the before commit SHA for the 'base_ref_force_pushed' event.
   */
  beforeCommit: IXGitHubCommit | null;

  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: any;
  id: string;

  /**
   * PullRequest referenced by event.
   */
  pullRequest: IXGitHubPullRequest;

  /**
   * Identifies the fully qualified ref name for the 'base_ref_force_pushed' event.
   */
  ref: IXGitHubRef | null;
}

/**
 * Represents a Git blame.
 */
export interface IXGitHubBlame {
  __typename: '_xGitHubBlame';

  /**
   * The list of ranges from a Git blame.
   */
  ranges: Array<IXGitHubBlameRange>;
}

/**
 * Represents a range of information from a Git blame.
 */
export interface IXGitHubBlameRange {
  __typename: '_xGitHubBlameRange';

  /**
   * Identifies the recency of the change, from 1 (new) to 10 (old). This is
   * calculated as a 2-quantile and determines the length of distance between the
   * median age of all the changes in the file and the recency of the current
   * range's change.
   */
  age: number;

  /**
   * Identifies the line author
   */
  commit: IXGitHubCommit;

  /**
   * The ending line for the range
   */
  endingLine: number;

  /**
   * The starting line for the range
   */
  startingLine: number;
}

/**
 * Represents a Git blob.
 */
export interface IXGitHubBlob {
  __typename: '_xGitHubBlob';

  /**
   * An abbreviated version of the Git object ID
   */
  abbreviatedOid: string;

  /**
   * Byte size of Blob object
   */
  byteSize: number;

  /**
   * The HTTP path for this Git object
   */
  commitResourcePath: any;

  /**
   * The HTTP URL for this Git object
   */
  commitUrl: any;
  id: string;

  /**
   * Indicates whether the Blob is binary or text. Returns null if unable to determine the encoding.
   */
  isBinary: boolean | null;

  /**
   * Indicates whether the contents is truncated
   */
  isTruncated: boolean;

  /**
   * The Git object ID
   */
  oid: any;

  /**
   * The Repository the Git object belongs to
   */
  repository: IXGitHubRepository;

  /**
   * UTF8 text data or null if the Blob is binary
   */
  text: string | null;
}

/**
 * A special type of user which takes actions on behalf of GitHub Apps.
 */
export interface IXGitHubBot {
  __typename: '_xGitHubBot';

  /**
   * A URL pointing to the GitHub App's public avatar.
   */
  avatarUrl: any;

  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: any;

  /**
   * Identifies the primary key from the database.
   */
  databaseId: number | null;
  id: string;

  /**
   * The username of the actor.
   */
  login: string;

  /**
   * The HTTP path for this bot
   */
  resourcePath: any;

  /**
   * Identifies the date and time when the object was last updated.
   */
  updatedAt: any;

  /**
   * The HTTP URL for this bot
   */
  url: any;
}

export interface IAvatarUrlOnXGitHubBotArguments {
  /**
   * The size of the resulting square image.
   */
  size?: number | null;
}

/**
 * A branch protection rule.
 */
export interface IXGitHubBranchProtectionRule {
  __typename: '_xGitHubBranchProtectionRule';

  /**
   * Can this branch be deleted.
   */
  allowsDeletions: boolean;

  /**
   * Are force pushes allowed on this branch.
   */
  allowsForcePushes: boolean;

  /**
   * A list of conflicts matching branches protection rule and other branch protection rules
   */
  branchProtectionRuleConflicts: IXGitHubBranchProtectionRuleConflictConnection;

  /**
   * The actor who created this branch protection rule.
   */
  creator: _xGitHubActor | null;

  /**
   * Identifies the primary key from the database.
   */
  databaseId: number | null;

  /**
   * Will new commits pushed to matching branches dismiss pull request review approvals.
   */
  dismissesStaleReviews: boolean;
  id: string;

  /**
   * Can admins overwrite branch protection.
   */
  isAdminEnforced: boolean;

  /**
   * Repository refs that are protected by this rule
   */
  matchingRefs: IXGitHubRefConnection;

  /**
   * Identifies the protection rule pattern.
   */
  pattern: string;

  /**
   * A list push allowances for this branch protection rule.
   */
  pushAllowances: IXGitHubPushAllowanceConnection;

  /**
   * The repository associated with this branch protection rule.
   */
  repository: IXGitHubRepository | null;

  /**
   * Number of approving reviews required to update matching branches.
   */
  requiredApprovingReviewCount: number | null;

  /**
   * List of required status check contexts that must pass for commits to be accepted to matching branches.
   */
  requiredStatusCheckContexts: Array<string | null> | null;

  /**
   * Are approving reviews required to update matching branches.
   */
  requiresApprovingReviews: boolean;

  /**
   * Are reviews from code owners required to update matching branches.
   */
  requiresCodeOwnerReviews: boolean;

  /**
   * Are commits required to be signed.
   */
  requiresCommitSignatures: boolean;

  /**
   * Are conversations required to be resolved before merging.
   */
  requiresConversationResolution: boolean;

  /**
   * Are merge commits prohibited from being pushed to this branch.
   */
  requiresLinearHistory: boolean;

  /**
   * Are status checks required to update matching branches.
   */
  requiresStatusChecks: boolean;

  /**
   * Are branches required to be up to date before merging.
   */
  requiresStrictStatusChecks: boolean;

  /**
   * Is pushing to matching branches restricted.
   */
  restrictsPushes: boolean;

  /**
   * Is dismissal of pull request reviews restricted.
   */
  restrictsReviewDismissals: boolean;

  /**
   * A list review dismissal allowances for this branch protection rule.
   */
  reviewDismissalAllowances: IXGitHubReviewDismissalAllowanceConnection;
}

export interface IBranchProtectionRuleConflictsOnXGitHubBranchProtectionRuleArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IMatchingRefsOnXGitHubBranchProtectionRuleArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Filters refs with query on name
   */
  query?: string | null;
}

export interface IPushAllowancesOnXGitHubBranchProtectionRuleArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IReviewDismissalAllowancesOnXGitHubBranchProtectionRuleArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

/**
 * A conflict between two branch protection rules.
 */
export interface IXGitHubBranchProtectionRuleConflict {
  __typename: '_xGitHubBranchProtectionRuleConflict';

  /**
   * Identifies the branch protection rule.
   */
  branchProtectionRule: IXGitHubBranchProtectionRule | null;

  /**
   * Identifies the conflicting branch protection rule.
   */
  conflictingBranchProtectionRule: IXGitHubBranchProtectionRule | null;

  /**
   * Identifies the branch ref that has conflicting rules
   */
  ref: IXGitHubRef | null;
}

/**
 * The connection type for BranchProtectionRuleConflict.
 */
export interface IXGitHubBranchProtectionRuleConflictConnection {
  __typename: '_xGitHubBranchProtectionRuleConflictConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubBranchProtectionRuleConflictEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitHubBranchProtectionRuleConflict | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface IXGitHubBranchProtectionRuleConflictEdge {
  __typename: '_xGitHubBranchProtectionRuleConflictEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitHubBranchProtectionRuleConflict | null;
}

/**
 * The connection type for BranchProtectionRule.
 */
export interface IXGitHubBranchProtectionRuleConnection {
  __typename: '_xGitHubBranchProtectionRuleConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubBranchProtectionRuleEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitHubBranchProtectionRule | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface IXGitHubBranchProtectionRuleEdge {
  __typename: '_xGitHubBranchProtectionRuleEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitHubBranchProtectionRule | null;
}

/**
 * The Common Vulnerability Scoring System
 */
export interface IXGitHubCVSS {
  __typename: '_xGitHubCVSS';

  /**
   * The CVSS score associated with this advisory
   */
  score: number;

  /**
   * The CVSS vector string associated with this advisory
   */
  vectorString: string | null;
}

/**
 * A common weakness enumeration
 */
export interface IXGitHubCWE {
  __typename: '_xGitHubCWE';

  /**
   * The id of the CWE
   */
  cweId: string;

  /**
   * A detailed description of this CWE
   */
  description: string;
  id: string;

  /**
   * The name of this CWE
   */
  name: string;
}

/**
 * The connection type for CWE.
 */
export interface IXGitHubCWEConnection {
  __typename: '_xGitHubCWEConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubCWEEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitHubCWE | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface IXGitHubCWEEdge {
  __typename: '_xGitHubCWEEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitHubCWE | null;
}

/**
 * Autogenerated input type of CancelEnterpriseAdminInvitation
 */
export interface IXGitHubCancelEnterpriseAdminInvitationInput {
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;

  /**
   * The Node ID of the pending enterprise administrator invitation.
   */
  invitationId: string;
}

/**
 * Autogenerated return type of CancelEnterpriseAdminInvitation
 */
export interface IXGitHubCancelEnterpriseAdminInvitationPayload {
  __typename: '_xGitHubCancelEnterpriseAdminInvitationPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The invitation that was canceled.
   */
  invitation: IXGitHubEnterpriseAdministratorInvitation | null;

  /**
   * A message confirming the result of canceling an administrator invitation.
   */
  message: string | null;
}

/**
 * Autogenerated input type of ChangeUserStatus
 */
export interface IXGitHubChangeUserStatusInput {
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;

  /**
   * The emoji to represent your status. Can either be a native Unicode emoji or an emoji name with colons, e.g., :grinning:.
   */
  emoji?: string | null;

  /**
   * If set, the user status will not be shown after this date.
   */
  expiresAt?: any | null;

  /**
   * Whether this status should indicate you are not fully available on GitHub, e.g., you are away.
   * @default false
   */
  limitedAvailability?: boolean | null;

  /**
   * A short description of your current status.
   */
  message?: string | null;

  /**
   * The ID of the organization whose members will be allowed to see the status. If
   * omitted, the status will be publicly visible.
   */
  organizationId?: string | null;
}

/**
 * Autogenerated return type of ChangeUserStatus
 */
export interface IXGitHubChangeUserStatusPayload {
  __typename: '_xGitHubChangeUserStatusPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * Your updated status.
   */
  status: IXGitHubUserStatus | null;
}

/**
 * A single check annotation.
 */
export interface IXGitHubCheckAnnotation {
  __typename: '_xGitHubCheckAnnotation';

  /**
   * The annotation's severity level.
   */
  annotationLevel: XGitHubCheckAnnotationLevel | null;

  /**
   * The path to the file that this annotation was made on.
   */
  blobUrl: any;

  /**
   * Identifies the primary key from the database.
   */
  databaseId: number | null;

  /**
   * The position of this annotation.
   */
  location: IXGitHubCheckAnnotationSpan;

  /**
   * The annotation's message.
   */
  message: string;

  /**
   * The path that this annotation was made on.
   */
  path: string;

  /**
   * Additional information about the annotation.
   */
  rawDetails: string | null;

  /**
   * The annotation's title
   */
  title: string | null;
}

/**
 * The connection type for CheckAnnotation.
 */
export interface IXGitHubCheckAnnotationConnection {
  __typename: '_xGitHubCheckAnnotationConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubCheckAnnotationEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitHubCheckAnnotation | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * Information from a check run analysis to specific lines of code.
 */
export interface IXGitHubCheckAnnotationData {
  /**
   * Represents an annotation's information level
   */
  annotationLevel: XGitHubCheckAnnotationLevel;

  /**
   * The location of the annotation
   */
  location: IXGitHubCheckAnnotationRange;

  /**
   * A short description of the feedback for these lines of code.
   */
  message: string;

  /**
   * The path of the file to add an annotation to.
   */
  path: string;

  /**
   * Details about this annotation.
   */
  rawDetails?: string | null;

  /**
   * The title that represents the annotation.
   */
  title?: string | null;
}

/**
 * An edge in a connection.
 */
export interface IXGitHubCheckAnnotationEdge {
  __typename: '_xGitHubCheckAnnotationEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitHubCheckAnnotation | null;
}

/**
 * Represents an annotation's information level.
 */
export const enum XGitHubCheckAnnotationLevel {
  /**
   * An annotation indicating an inescapable error.
   */
  FAILURE = 'FAILURE',

  /**
   * An annotation indicating some information.
   */
  NOTICE = 'NOTICE',

  /**
   * An annotation indicating an ignorable error.
   */
  WARNING = 'WARNING'
}

/**
 * A character position in a check annotation.
 */
export interface IXGitHubCheckAnnotationPosition {
  __typename: '_xGitHubCheckAnnotationPosition';

  /**
   * Column number (1 indexed).
   */
  column: number | null;

  /**
   * Line number (1 indexed).
   */
  line: number;
}

/**
 * Information from a check run analysis to specific lines of code.
 */
export interface IXGitHubCheckAnnotationRange {
  /**
   * The ending column of the range.
   */
  endColumn?: number | null;

  /**
   * The ending line of the range.
   */
  endLine: number;

  /**
   * The starting column of the range.
   */
  startColumn?: number | null;

  /**
   * The starting line of the range.
   */
  startLine: number;
}

/**
 * An inclusive pair of positions for a check annotation.
 */
export interface IXGitHubCheckAnnotationSpan {
  __typename: '_xGitHubCheckAnnotationSpan';

  /**
   * End position (inclusive).
   */
  end: IXGitHubCheckAnnotationPosition;

  /**
   * Start position (inclusive).
   */
  start: IXGitHubCheckAnnotationPosition;
}

/**
 * The possible states for a check suite or run conclusion.
 */
export const enum XGitHubCheckConclusionState {
  /**
   * The check suite or run requires action.
   */
  ACTION_REQUIRED = 'ACTION_REQUIRED',

  /**
   * The check suite or run has been cancelled.
   */
  CANCELLED = 'CANCELLED',

  /**
   * The check suite or run has failed.
   */
  FAILURE = 'FAILURE',

  /**
   * The check suite or run was neutral.
   */
  NEUTRAL = 'NEUTRAL',

  /**
   * The check suite or run was skipped.
   */
  SKIPPED = 'SKIPPED',

  /**
   * The check suite or run was marked stale by GitHub. Only GitHub can use this conclusion.
   */
  STALE = 'STALE',

  /**
   * The check suite or run has failed at startup.
   */
  STARTUP_FAILURE = 'STARTUP_FAILURE',

  /**
   * The check suite or run has succeeded.
   */
  SUCCESS = 'SUCCESS',

  /**
   * The check suite or run has timed out.
   */
  TIMED_OUT = 'TIMED_OUT'
}

/**
 * A check run.
 */
export interface IXGitHubCheckRun {
  __typename: '_xGitHubCheckRun';

  /**
   * The check run's annotations
   */
  annotations: IXGitHubCheckAnnotationConnection | null;

  /**
   * The check suite that this run is a part of.
   */
  checkSuite: IXGitHubCheckSuite;

  /**
   * Identifies the date and time when the check run was completed.
   */
  completedAt: any | null;

  /**
   * The conclusion of the check run.
   */
  conclusion: XGitHubCheckConclusionState | null;

  /**
   * Identifies the primary key from the database.
   */
  databaseId: number | null;

  /**
   * The corresponding deployment for this job, if any
   */
  deployment: IXGitHubDeployment | null;

  /**
   * The URL from which to find full details of the check run on the integrator's site.
   */
  detailsUrl: any | null;

  /**
   * A reference for the check run on the integrator's system.
   */
  externalId: string | null;
  id: string;

  /**
   * Whether this is required to pass before merging for a specific pull request.
   */
  isRequired: boolean;

  /**
   * The name of the check for this check run.
   */
  name: string;

  /**
   * Information about a pending deployment, if any, in this check run
   */
  pendingDeploymentRequest: IXGitHubDeploymentRequest | null;

  /**
   * The permalink to the check run summary.
   */
  permalink: any;

  /**
   * The repository associated with this check run.
   */
  repository: IXGitHubRepository;

  /**
   * The HTTP path for this check run.
   */
  resourcePath: any;

  /**
   * Identifies the date and time when the check run was started.
   */
  startedAt: any | null;

  /**
   * The current status of the check run.
   */
  status: XGitHubCheckStatusState;

  /**
   * The check run's steps
   */
  steps: IXGitHubCheckStepConnection | null;

  /**
   * A string representing the check run's summary
   */
  summary: string | null;

  /**
   * A string representing the check run's text
   */
  text: string | null;

  /**
   * A string representing the check run
   */
  title: string | null;

  /**
   * The HTTP URL for this check run.
   */
  url: any;
}

export interface IAnnotationsOnXGitHubCheckRunArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IIsRequiredOnXGitHubCheckRunArguments {
  /**
   * The id of the pull request this is required for
   */
  pullRequestId?: string | null;

  /**
   * The number of the pull request this is required for
   */
  pullRequestNumber?: number | null;
}

export interface IStepsOnXGitHubCheckRunArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Step number
   */
  number?: number | null;
}

/**
 * Possible further actions the integrator can perform.
 */
export interface IXGitHubCheckRunAction {
  /**
   * A short explanation of what this action would do.
   */
  description: string;

  /**
   * A reference for the action on the integrator's system.
   */
  identifier: string;

  /**
   * The text to be displayed on a button in the web UI.
   */
  label: string;
}

/**
 * The connection type for CheckRun.
 */
export interface IXGitHubCheckRunConnection {
  __typename: '_xGitHubCheckRunConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubCheckRunEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitHubCheckRun | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface IXGitHubCheckRunEdge {
  __typename: '_xGitHubCheckRunEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitHubCheckRun | null;
}

/**
 * The filters that are available when fetching check runs.
 */
export interface IXGitHubCheckRunFilter {
  /**
   * Filters the check runs created by this application ID.
   */
  appId?: number | null;

  /**
   * Filters the check runs by this name.
   */
  checkName?: string | null;

  /**
   * Filters the check runs by this type.
   */
  checkType?: XGitHubCheckRunType | null;

  /**
   * Filters the check runs by this status.
   */
  status?: XGitHubCheckStatusState | null;
}

/**
 * Descriptive details about the check run.
 */
export interface IXGitHubCheckRunOutput {
  /**
   * The annotations that are made as part of the check run.
   */
  annotations?: Array<IXGitHubCheckAnnotationData> | null;

  /**
   * Images attached to the check run output displayed in the GitHub pull request UI.
   */
  images?: Array<IXGitHubCheckRunOutputImage> | null;

  /**
   * The summary of the check run (supports Commonmark).
   */
  summary: string;

  /**
   * The details of the check run (supports Commonmark).
   */
  text?: string | null;

  /**
   * A title to provide for this check run.
   */
  title: string;
}

/**
 * Images attached to the check run output displayed in the GitHub pull request UI.
 */
export interface IXGitHubCheckRunOutputImage {
  /**
   * The alternative text for the image.
   */
  alt: string;

  /**
   * A short image description.
   */
  caption?: string | null;

  /**
   * The full URL of the image.
   */
  imageUrl: any;
}

/**
 * The possible types of check runs.
 */
export const enum XGitHubCheckRunType {
  /**
   * Every check run available.
   */
  ALL = 'ALL',

  /**
   * The latest check run.
   */
  LATEST = 'LATEST'
}

/**
 * The possible states for a check suite or run status.
 */
export const enum XGitHubCheckStatusState {
  /**
   * The check suite or run has been completed.
   */
  COMPLETED = 'COMPLETED',

  /**
   * The check suite or run is in progress.
   */
  IN_PROGRESS = 'IN_PROGRESS',

  /**
   * The check suite or run is in pending state.
   */
  PENDING = 'PENDING',

  /**
   * The check suite or run has been queued.
   */
  QUEUED = 'QUEUED',

  /**
   * The check suite or run has been requested.
   */
  REQUESTED = 'REQUESTED',

  /**
   * The check suite or run is in waiting state.
   */
  WAITING = 'WAITING'
}

/**
 * A single check step.
 */
export interface IXGitHubCheckStep {
  __typename: '_xGitHubCheckStep';

  /**
   * Identifies the date and time when the check step was completed.
   */
  completedAt: any | null;

  /**
   * The conclusion of the check step.
   */
  conclusion: XGitHubCheckConclusionState | null;

  /**
   * A reference for the check step on the integrator's system.
   */
  externalId: string | null;

  /**
   * The step's name.
   */
  name: string;

  /**
   * The index of the step in the list of steps of the parent check run.
   */
  number: number;

  /**
   * Number of seconds to completion.
   */
  secondsToCompletion: number | null;

  /**
   * Identifies the date and time when the check step was started.
   */
  startedAt: any | null;

  /**
   * The current status of the check step.
   */
  status: XGitHubCheckStatusState;
}

/**
 * The connection type for CheckStep.
 */
export interface IXGitHubCheckStepConnection {
  __typename: '_xGitHubCheckStepConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubCheckStepEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitHubCheckStep | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface IXGitHubCheckStepEdge {
  __typename: '_xGitHubCheckStepEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitHubCheckStep | null;
}

/**
 * A check suite.
 */
export interface IXGitHubCheckSuite {
  __typename: '_xGitHubCheckSuite';

  /**
   * The GitHub App which created this check suite.
   */
  app: IXGitHubApp | null;

  /**
   * The name of the branch for this check suite.
   */
  branch: IXGitHubRef | null;

  /**
   * The check runs associated with a check suite.
   */
  checkRuns: IXGitHubCheckRunConnection | null;

  /**
   * The commit for this check suite
   */
  commit: IXGitHubCommit;

  /**
   * The conclusion of this check suite.
   */
  conclusion: XGitHubCheckConclusionState | null;

  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: any;

  /**
   * The user who triggered the check suite.
   */
  creator: IXGitHubUser | null;

  /**
   * Identifies the primary key from the database.
   */
  databaseId: number | null;
  id: string;

  /**
   * A list of open pull requests matching the check suite.
   */
  matchingPullRequests: IXGitHubPullRequestConnection | null;

  /**
   * The push that triggered this check suite.
   */
  push: IXGitHubPush | null;

  /**
   * The repository associated with this check suite.
   */
  repository: IXGitHubRepository;

  /**
   * The HTTP path for this check suite
   */
  resourcePath: any;

  /**
   * The status of this check suite.
   */
  status: XGitHubCheckStatusState;

  /**
   * Identifies the date and time when the object was last updated.
   */
  updatedAt: any;

  /**
   * The HTTP URL for this check suite
   */
  url: any;

  /**
   * The workflow run associated with this check suite.
   */
  workflowRun: IXGitHubWorkflowRun | null;
}

export interface ICheckRunsOnXGitHubCheckSuiteArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Filters the check runs by this type.
   */
  filterBy?: IXGitHubCheckRunFilter | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IMatchingPullRequestsOnXGitHubCheckSuiteArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * The base ref name to filter the pull requests by.
   */
  baseRefName?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * The head ref name to filter the pull requests by.
   */
  headRefName?: string | null;

  /**
   * A list of label names to filter the pull requests by.
   */
  labels?: Array<string> | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Ordering options for pull requests returned from the connection.
   */
  orderBy?: IXGitHubIssueOrder | null;

  /**
   * A list of states to filter the pull requests by.
   */
  states?: Array<XGitHubPullRequestState> | null;
}

/**
 * The auto-trigger preferences that are available for check suites.
 */
export interface IXGitHubCheckSuiteAutoTriggerPreference {
  /**
   * The node ID of the application that owns the check suite.
   */
  appId: string;

  /**
   * Set to `true` to enable automatic creation of CheckSuite events upon pushes to the repository.
   */
  setting: boolean;
}

/**
 * The connection type for CheckSuite.
 */
export interface IXGitHubCheckSuiteConnection {
  __typename: '_xGitHubCheckSuiteConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubCheckSuiteEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitHubCheckSuite | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface IXGitHubCheckSuiteEdge {
  __typename: '_xGitHubCheckSuiteEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitHubCheckSuite | null;
}

/**
 * The filters that are available when fetching check suites.
 */
export interface IXGitHubCheckSuiteFilter {
  /**
   * Filters the check suites created by this application ID.
   */
  appId?: number | null;

  /**
   * Filters the check suites by this name.
   */
  checkName?: string | null;
}

/**
 * Autogenerated input type of ClearLabelsFromLabelable
 */
export interface IXGitHubClearLabelsFromLabelableInput {
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;

  /**
   * The id of the labelable object to clear the labels from.
   */
  labelableId: string;
}

/**
 * Autogenerated return type of ClearLabelsFromLabelable
 */
export interface IXGitHubClearLabelsFromLabelablePayload {
  __typename: '_xGitHubClearLabelsFromLabelablePayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The item that was unlabeled.
   */
  labelable: _xGitHubLabelable | null;
}

/**
 * Autogenerated input type of CloneProject
 */
export interface IXGitHubCloneProjectInput {
  /**
   * The description of the project.
   */
  body?: string | null;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;

  /**
   * Whether or not to clone the source project's workflows.
   */
  includeWorkflows: boolean;

  /**
   * The name of the project.
   */
  name: string;

  /**
   * The visibility of the project, defaults to false (private).
   */
  public?: boolean | null;

  /**
   * The source project to clone.
   */
  sourceId: string;

  /**
   * The owner ID to create the project under.
   */
  targetOwnerId: string;
}

/**
 * Autogenerated return type of CloneProject
 */
export interface IXGitHubCloneProjectPayload {
  __typename: '_xGitHubCloneProjectPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The id of the JobStatus for populating cloned fields.
   */
  jobStatusId: string | null;

  /**
   * The new cloned project.
   */
  project: IXGitHubProject | null;
}

/**
 * Autogenerated input type of CloneTemplateRepository
 */
export interface IXGitHubCloneTemplateRepositoryInput {
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;

  /**
   * A short description of the new repository.
   */
  description?: string | null;

  /**
   * Whether to copy all branches from the template to the new repository. Defaults
   * to copying only the default branch of the template.
   * @default false
   */
  includeAllBranches?: boolean | null;

  /**
   * The name of the new repository.
   */
  name: string;

  /**
   * The ID of the owner for the new repository.
   */
  ownerId: string;

  /**
   * The Node ID of the template repository.
   */
  repositoryId: string;

  /**
   * Indicates the repository's visibility level.
   */
  visibility: XGitHubRepositoryVisibility;
}

/**
 * Autogenerated return type of CloneTemplateRepository
 */
export interface IXGitHubCloneTemplateRepositoryPayload {
  __typename: '_xGitHubCloneTemplateRepositoryPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The new repository.
   */
  repository: IXGitHubRepository | null;
}

/**
 * An object that can be closed
 */
export type _xGitHubClosable =
  | IXGitHubIssue
  | IXGitHubMilestone
  | IXGitHubProject
  | IXGitHubPullRequest;

/**
 * An object that can be closed
 */
export interface IXGitHubClosable {
  __typename: '_xGitHubClosable';

  /**
   * `true` if the object is closed (definition of closed may depend on type)
   */
  closed: boolean;

  /**
   * Identifies the date and time when the object was closed.
   */
  closedAt: any | null;
}

/**
 * Autogenerated input type of CloseIssue
 */
export interface IXGitHubCloseIssueInput {
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;

  /**
   * ID of the issue to be closed.
   */
  issueId: string;
}

/**
 * Autogenerated return type of CloseIssue
 */
export interface IXGitHubCloseIssuePayload {
  __typename: '_xGitHubCloseIssuePayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The issue that was closed.
   */
  issue: IXGitHubIssue | null;
}

/**
 * Autogenerated input type of ClosePullRequest
 */
export interface IXGitHubClosePullRequestInput {
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;

  /**
   * ID of the pull request to be closed.
   */
  pullRequestId: string;
}

/**
 * Autogenerated return type of ClosePullRequest
 */
export interface IXGitHubClosePullRequestPayload {
  __typename: '_xGitHubClosePullRequestPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The pull request that was closed.
   */
  pullRequest: IXGitHubPullRequest | null;
}

/**
 * Represents a 'closed' event on any `Closable`.
 */
export interface IXGitHubClosedEvent {
  __typename: '_xGitHubClosedEvent';

  /**
   * Identifies the actor who performed the event.
   */
  actor: _xGitHubActor | null;

  /**
   * Object that was closed.
   */
  closable: _xGitHubClosable;

  /**
   * Object which triggered the creation of this event.
   */
  closer: _xGitHubCloser | null;

  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: any;
  id: string;

  /**
   * The HTTP path for this closed event.
   */
  resourcePath: any;

  /**
   * The HTTP URL for this closed event.
   */
  url: any;
}

/**
 * The object which triggered a `ClosedEvent`.
 */
export type _xGitHubCloser = IXGitHubCommit | IXGitHubPullRequest;

/**
 * The Code of Conduct for a repository
 */
export interface IXGitHubCodeOfConduct {
  __typename: '_xGitHubCodeOfConduct';

  /**
   * The body of the Code of Conduct
   */
  body: string | null;
  id: string;

  /**
   * The key for the Code of Conduct
   */
  key: string;

  /**
   * The formal name of the Code of Conduct
   */
  name: string;

  /**
   * The HTTP path for this Code of Conduct
   */
  resourcePath: any | null;

  /**
   * The HTTP URL for this Code of Conduct
   */
  url: any | null;
}

/**
 * Collaborators affiliation level with a subject.
 */
export const enum XGitHubCollaboratorAffiliation {
  /**
   * All collaborators the authenticated user can see.
   */
  ALL = 'ALL',

  /**
   * All collaborators with permissions to an organization-owned subject, regardless of organization membership status.
   */
  DIRECT = 'DIRECT',

  /**
   * All outside collaborators of an organization-owned subject.
   */
  OUTSIDE = 'OUTSIDE'
}

/**
 * Represents a comment.
 */
export type _xGitHubComment =
  | IXGitHubCommitComment
  | IXGitHubDiscussion
  | IXGitHubDiscussionComment
  | IXGitHubGistComment
  | IXGitHubIssue
  | IXGitHubIssueComment
  | IXGitHubPullRequest
  | IXGitHubPullRequestReview
  | IXGitHubPullRequestReviewComment
  | IXGitHubTeamDiscussion
  | IXGitHubTeamDiscussionComment;

/**
 * Represents a comment.
 */
export interface IXGitHubComment {
  __typename: '_xGitHubComment';

  /**
   * The actor who authored the comment.
   */
  author: _xGitHubActor | null;

  /**
   * Author's association with the subject of the comment.
   */
  authorAssociation: XGitHubCommentAuthorAssociation;

  /**
   * The body as Markdown.
   */
  body: string;

  /**
   * The body rendered to HTML.
   */
  bodyHTML: any;

  /**
   * The body rendered to text.
   */
  bodyText: string;

  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: any;

  /**
   * Check if this comment was created via an email reply.
   */
  createdViaEmail: boolean;

  /**
   * The actor who edited the comment.
   */
  editor: _xGitHubActor | null;
  id: string;

  /**
   * Check if this comment was edited and includes an edit with the creation data
   */
  includesCreatedEdit: boolean;

  /**
   * The moment the editor made the last edit
   */
  lastEditedAt: any | null;

  /**
   * Identifies when the comment was published at.
   */
  publishedAt: any | null;

  /**
   * Identifies the date and time when the object was last updated.
   */
  updatedAt: any;

  /**
   * A list of edits to this content.
   */
  userContentEdits: IXGitHubUserContentEditConnection | null;

  /**
   * Did the viewer author this comment.
   */
  viewerDidAuthor: boolean;
}

export interface IUserContentEditsOnXGitHubCommentArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

/**
 * A comment author association with repository.
 */
export const enum XGitHubCommentAuthorAssociation {
  /**
   * Author has been invited to collaborate on the repository.
   */
  COLLABORATOR = 'COLLABORATOR',

  /**
   * Author has previously committed to the repository.
   */
  CONTRIBUTOR = 'CONTRIBUTOR',

  /**
   * Author has not previously committed to GitHub.
   */
  FIRST_TIMER = 'FIRST_TIMER',

  /**
   * Author has not previously committed to the repository.
   */
  FIRST_TIME_CONTRIBUTOR = 'FIRST_TIME_CONTRIBUTOR',

  /**
   * Author is a placeholder for an unclaimed user.
   */
  MANNEQUIN = 'MANNEQUIN',

  /**
   * Author is a member of the organization that owns the repository.
   */
  MEMBER = 'MEMBER',

  /**
   * Author has no association with the repository.
   */
  NONE = 'NONE',

  /**
   * Author is the owner of the repository.
   */
  OWNER = 'OWNER'
}

/**
 * The possible errors that will prevent a user from updating a comment.
 */
export const enum XGitHubCommentCannotUpdateReason {
  /**
   * Unable to create comment because repository is archived.
   */
  ARCHIVED = 'ARCHIVED',

  /**
   * You cannot update this comment
   */
  DENIED = 'DENIED',

  /**
   * You must be the author or have write access to this repository to update this comment.
   */
  INSUFFICIENT_ACCESS = 'INSUFFICIENT_ACCESS',

  /**
   * Unable to create comment because issue is locked.
   */
  LOCKED = 'LOCKED',

  /**
   * You must be logged in to update this comment.
   */
  LOGIN_REQUIRED = 'LOGIN_REQUIRED',

  /**
   * Repository is under maintenance.
   */
  MAINTENANCE = 'MAINTENANCE',

  /**
   * At least one email address must be verified to update this comment.
   */
  VERIFIED_EMAIL_REQUIRED = 'VERIFIED_EMAIL_REQUIRED'
}

/**
 * Represents a 'comment_deleted' event on a given issue or pull request.
 */
export interface IXGitHubCommentDeletedEvent {
  __typename: '_xGitHubCommentDeletedEvent';

  /**
   * Identifies the actor who performed the event.
   */
  actor: _xGitHubActor | null;

  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: any;

  /**
   * Identifies the primary key from the database.
   */
  databaseId: number | null;

  /**
   * The user who authored the deleted comment.
   */
  deletedCommentAuthor: _xGitHubActor | null;
  id: string;
}

/**
 * Represents a Git commit.
 */
export interface IXGitHubCommit {
  __typename: '_xGitHubCommit';

  /**
   * An abbreviated version of the Git object ID
   */
  abbreviatedOid: string;

  /**
   * The number of additions in this commit.
   */
  additions: number;

  /**
   * The merged Pull Request that introduced the commit to the repository. If the
   * commit is not present in the default branch, additionally returns open Pull
   * Requests associated with the commit
   */
  associatedPullRequests: IXGitHubPullRequestConnection | null;

  /**
   * Authorship details of the commit.
   */
  author: IXGitHubGitActor | null;

  /**
   * Check if the committer and the author match.
   */
  authoredByCommitter: boolean;

  /**
   * The datetime when this commit was authored.
   */
  authoredDate: any;

  /**
   * The list of authors for this commit based on the git author and the Co-authored-by
   * message trailer. The git author will always be first.
   */
  authors: IXGitHubGitActorConnection;

  /**
   * Fetches `git blame` information.
   */
  blame: IXGitHubBlame;

  /**
   * The number of changed files in this commit.
   */
  changedFiles: number;

  /**
   * The check suites associated with a commit.
   */
  checkSuites: IXGitHubCheckSuiteConnection | null;

  /**
   * Comments made on the commit.
   */
  comments: IXGitHubCommitCommentConnection;

  /**
   * The HTTP path for this Git object
   */
  commitResourcePath: any;

  /**
   * The HTTP URL for this Git object
   */
  commitUrl: any;

  /**
   * The datetime when this commit was committed.
   */
  committedDate: any;

  /**
   * Check if committed via GitHub web UI.
   */
  committedViaWeb: boolean;

  /**
   * Committer details of the commit.
   */
  committer: IXGitHubGitActor | null;

  /**
   * The number of deletions in this commit.
   */
  deletions: number;

  /**
   * The deployments associated with a commit.
   */
  deployments: IXGitHubDeploymentConnection | null;

  /**
   * The tree entry representing the file located at the given path.
   */
  file: IXGitHubTreeEntry | null;

  /**
   * The linear commit history starting from (and including) this commit, in the same order as `git log`.
   */
  history: IXGitHubCommitHistoryConnection;
  id: string;

  /**
   * The Git commit message
   */
  message: string;

  /**
   * The Git commit message body
   */
  messageBody: string;

  /**
   * The commit message body rendered to HTML.
   */
  messageBodyHTML: any;

  /**
   * The Git commit message headline
   */
  messageHeadline: string;

  /**
   * The commit message headline rendered to HTML.
   */
  messageHeadlineHTML: any;

  /**
   * The Git object ID
   */
  oid: any;

  /**
   * The organization this commit was made on behalf of.
   */
  onBehalfOf: IXGitHubOrganization | null;

  /**
   * The parents of a commit.
   */
  parents: IXGitHubCommitConnection;

  /**
   * The datetime when this commit was pushed.
   */
  pushedDate: any | null;

  /**
   * The Repository this commit belongs to
   */
  repository: IXGitHubRepository;

  /**
   * The HTTP path for this commit
   */
  resourcePath: any;

  /**
   * Commit signing information, if present.
   */
  signature: _xGitHubGitSignature | null;

  /**
   * Status information for this commit
   */
  status: IXGitHubStatus | null;

  /**
   * Check and Status rollup information for this commit.
   */
  statusCheckRollup: IXGitHubStatusCheckRollup | null;

  /**
   * Returns a list of all submodules in this repository as of this Commit parsed from the .gitmodules file.
   */
  submodules: IXGitHubSubmoduleConnection;

  /**
   * Returns a URL to download a tarball archive for a repository.
   * Note: For private repositories, these links are temporary and expire after five minutes.
   */
  tarballUrl: any;

  /**
   * Commit's root Tree
   */
  tree: IXGitHubTree;

  /**
   * The HTTP path for the tree of this commit
   */
  treeResourcePath: any;

  /**
   * The HTTP URL for the tree of this commit
   */
  treeUrl: any;

  /**
   * The HTTP URL for this commit
   */
  url: any;

  /**
   * Check if the viewer is able to change their subscription status for the repository.
   */
  viewerCanSubscribe: boolean;

  /**
   * Identifies if the viewer is watching, not watching, or ignoring the subscribable entity.
   */
  viewerSubscription: XGitHubSubscriptionState | null;

  /**
   * Returns a URL to download a zipball archive for a repository.
   * Note: For private repositories, these links are temporary and expire after five minutes.
   */
  zipballUrl: any;
}

export interface IAssociatedPullRequestsOnXGitHubCommitArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Ordering options for pull requests.
   * @default {"direction":"ASC","field":"CREATED_AT"}
   */
  orderBy?: IXGitHubPullRequestOrder | null;
}

export interface IAuthorsOnXGitHubCommitArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IBlameOnXGitHubCommitArguments {
  /**
   * The file whose Git blame information you want.
   */
  path: string;
}

export interface ICheckSuitesOnXGitHubCommitArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Filters the check suites by this type.
   */
  filterBy?: IXGitHubCheckSuiteFilter | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface ICommentsOnXGitHubCommitArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IDeploymentsOnXGitHubCommitArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Environments to list deployments for
   */
  environments?: Array<string> | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Ordering options for deployments returned from the connection.
   * @default {"direction":"ASC","field":"CREATED_AT"}
   */
  orderBy?: IXGitHubDeploymentOrder | null;
}

export interface IFileOnXGitHubCommitArguments {
  /**
   * The path for the file
   */
  path: string;
}

export interface IHistoryOnXGitHubCommitArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * If non-null, filters history to only show commits with matching authorship.
   */
  author?: IXGitHubCommitAuthor | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * If non-null, filters history to only show commits touching files under this path.
   */
  path?: string | null;

  /**
   * Allows specifying a beginning time or date for fetching commits.
   */
  since?: any | null;

  /**
   * Allows specifying an ending time or date for fetching commits.
   */
  until?: any | null;
}

export interface IParentsOnXGitHubCommitArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface ISubmodulesOnXGitHubCommitArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

/**
 * Specifies an author for filtering Git commits.
 */
export interface IXGitHubCommitAuthor {
  /**
   * Email addresses to filter by. Commits authored by any of the specified email addresses will be returned.
   */
  emails?: Array<string> | null;

  /**
   * ID of a User to filter by. If non-null, only commits authored by this user
   * will be returned. This field takes precedence over emails.
   */
  id?: string | null;
}

/**
 * Represents a comment on a given Commit.
 */
export interface IXGitHubCommitComment {
  __typename: '_xGitHubCommitComment';

  /**
   * The actor who authored the comment.
   */
  author: _xGitHubActor | null;

  /**
   * Author's association with the subject of the comment.
   */
  authorAssociation: XGitHubCommentAuthorAssociation;

  /**
   * Identifies the comment body.
   */
  body: string;

  /**
   * The body rendered to HTML.
   */
  bodyHTML: any;

  /**
   * The body rendered to text.
   */
  bodyText: string;

  /**
   * Identifies the commit associated with the comment, if the commit exists.
   */
  commit: IXGitHubCommit | null;

  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: any;

  /**
   * Check if this comment was created via an email reply.
   */
  createdViaEmail: boolean;

  /**
   * Identifies the primary key from the database.
   */
  databaseId: number | null;

  /**
   * The actor who edited the comment.
   */
  editor: _xGitHubActor | null;
  id: string;

  /**
   * Check if this comment was edited and includes an edit with the creation data
   */
  includesCreatedEdit: boolean;

  /**
   * Returns whether or not a comment has been minimized.
   */
  isMinimized: boolean;

  /**
   * The moment the editor made the last edit
   */
  lastEditedAt: any | null;

  /**
   * Returns why the comment was minimized.
   */
  minimizedReason: string | null;

  /**
   * Identifies the file path associated with the comment.
   */
  path: string | null;

  /**
   * Identifies the line position associated with the comment.
   */
  position: number | null;

  /**
   * Identifies when the comment was published at.
   */
  publishedAt: any | null;

  /**
   * A list of reactions grouped by content left on the subject.
   */
  reactionGroups: Array<IXGitHubReactionGroup> | null;

  /**
   * A list of Reactions left on the Issue.
   */
  reactions: IXGitHubReactionConnection;

  /**
   * The repository associated with this node.
   */
  repository: IXGitHubRepository;

  /**
   * The HTTP path permalink for this commit comment.
   */
  resourcePath: any;

  /**
   * Identifies the date and time when the object was last updated.
   */
  updatedAt: any;

  /**
   * The HTTP URL permalink for this commit comment.
   */
  url: any;

  /**
   * A list of edits to this content.
   */
  userContentEdits: IXGitHubUserContentEditConnection | null;

  /**
   * Check if the current viewer can delete this object.
   */
  viewerCanDelete: boolean;

  /**
   * Check if the current viewer can minimize this object.
   */
  viewerCanMinimize: boolean;

  /**
   * Can user react to this subject
   */
  viewerCanReact: boolean;

  /**
   * Check if the current viewer can update this object.
   */
  viewerCanUpdate: boolean;

  /**
   * Reasons why the current viewer can not update this comment.
   */
  viewerCannotUpdateReasons: Array<XGitHubCommentCannotUpdateReason>;

  /**
   * Did the viewer author this comment.
   */
  viewerDidAuthor: boolean;
}

export interface IReactionsOnXGitHubCommitCommentArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Allows filtering Reactions by emoji.
   */
  content?: XGitHubReactionContent | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Allows specifying the order in which reactions are returned.
   */
  orderBy?: IXGitHubReactionOrder | null;
}

export interface IUserContentEditsOnXGitHubCommitCommentArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

/**
 * The connection type for CommitComment.
 */
export interface IXGitHubCommitCommentConnection {
  __typename: '_xGitHubCommitCommentConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubCommitCommentEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitHubCommitComment | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface IXGitHubCommitCommentEdge {
  __typename: '_xGitHubCommitCommentEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitHubCommitComment | null;
}

/**
 * A thread of comments on a commit.
 */
export interface IXGitHubCommitCommentThread {
  __typename: '_xGitHubCommitCommentThread';

  /**
   * The comments that exist in this thread.
   */
  comments: IXGitHubCommitCommentConnection;

  /**
   * The commit the comments were made on.
   */
  commit: IXGitHubCommit | null;
  id: string;

  /**
   * The file the comments were made on.
   */
  path: string | null;

  /**
   * The position in the diff for the commit that the comment was made on.
   */
  position: number | null;

  /**
   * The repository associated with this node.
   */
  repository: IXGitHubRepository;
}

export interface ICommentsOnXGitHubCommitCommentThreadArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

/**
 * The connection type for Commit.
 */
export interface IXGitHubCommitConnection {
  __typename: '_xGitHubCommitConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubCommitEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitHubCommit | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * Ordering options for commit contribution connections.
 */
export interface IXGitHubCommitContributionOrder {
  /**
   * The ordering direction.
   */
  direction: XGitHubOrderDirection;

  /**
   * The field by which to order commit contributions.
   */
  field: XGitHubCommitContributionOrderField;
}

/**
 * Properties by which commit contribution connections can be ordered.
 */
export const enum XGitHubCommitContributionOrderField {
  /**
   * Order commit contributions by how many commits they represent.
   */
  COMMIT_COUNT = 'COMMIT_COUNT',

  /**
   * Order commit contributions by when they were made.
   */
  OCCURRED_AT = 'OCCURRED_AT'
}

/**
 * This aggregates commits made by a user within one repository.
 */
export interface IXGitHubCommitContributionsByRepository {
  __typename: '_xGitHubCommitContributionsByRepository';

  /**
   * The commit contributions, each representing a day.
   */
  contributions: IXGitHubCreatedCommitContributionConnection;

  /**
   * The repository in which the commits were made.
   */
  repository: IXGitHubRepository;

  /**
   * The HTTP path for the user's commits to the repository in this time range.
   */
  resourcePath: any;

  /**
   * The HTTP URL for the user's commits to the repository in this time range.
   */
  url: any;
}

export interface IContributionsOnXGitHubCommitContributionsByRepositoryArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Ordering options for commit contributions returned from the connection.
   * @default {"direction":"DESC","field":"OCCURRED_AT"}
   */
  orderBy?: IXGitHubCommitContributionOrder | null;
}

/**
 * An edge in a connection.
 */
export interface IXGitHubCommitEdge {
  __typename: '_xGitHubCommitEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitHubCommit | null;
}

/**
 * The connection type for Commit.
 */
export interface IXGitHubCommitHistoryConnection {
  __typename: '_xGitHubCommitHistoryConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubCommitEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitHubCommit | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * Represents a 'connected' event on a given issue or pull request.
 */
export interface IXGitHubConnectedEvent {
  __typename: '_xGitHubConnectedEvent';

  /**
   * Identifies the actor who performed the event.
   */
  actor: _xGitHubActor | null;

  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: any;
  id: string;

  /**
   * Reference originated in a different repository.
   */
  isCrossRepository: boolean;

  /**
   * Issue or pull request that made the reference.
   */
  source: _xGitHubReferencedSubject;

  /**
   * Issue or pull request which was connected.
   */
  subject: _xGitHubReferencedSubject;
}

/**
 * Represents a contribution a user made on GitHub, such as opening an issue.
 */
export type _xGitHubContribution =
  | IXGitHubCreatedCommitContribution
  | IXGitHubCreatedIssueContribution
  | IXGitHubCreatedPullRequestContribution
  | IXGitHubCreatedPullRequestReviewContribution
  | IXGitHubCreatedRepositoryContribution
  | IXGitHubJoinedGitHubContribution
  | IXGitHubRestrictedContribution;

/**
 * Represents a contribution a user made on GitHub, such as opening an issue.
 */
export interface IXGitHubContribution {
  __typename: '_xGitHubContribution';

  /**
   * Whether this contribution is associated with a record you do not have access to. For
   * example, your own 'first issue' contribution may have been made on a repository you can no
   * longer access.
   */
  isRestricted: boolean;

  /**
   * When this contribution was made.
   */
  occurredAt: any;

  /**
   * The HTTP path for this contribution.
   */
  resourcePath: any;

  /**
   * The HTTP URL for this contribution.
   */
  url: any;

  /**
   * The user who made this contribution.
   */
  user: IXGitHubUser;
}

/**
 * A calendar of contributions made on GitHub by a user.
 */
export interface IXGitHubContributionCalendar {
  __typename: '_xGitHubContributionCalendar';

  /**
   * A list of hex color codes used in this calendar. The darker the color, the more contributions it represents.
   */
  colors: Array<string>;

  /**
   * Determine if the color set was chosen because it's currently Halloween.
   */
  isHalloween: boolean;

  /**
   * A list of the months of contributions in this calendar.
   */
  months: Array<IXGitHubContributionCalendarMonth>;

  /**
   * The count of total contributions in the calendar.
   */
  totalContributions: number;

  /**
   * A list of the weeks of contributions in this calendar.
   */
  weeks: Array<IXGitHubContributionCalendarWeek>;
}

/**
 * Represents a single day of contributions on GitHub by a user.
 */
export interface IXGitHubContributionCalendarDay {
  __typename: '_xGitHubContributionCalendarDay';

  /**
   * The hex color code that represents how many contributions were made on this day compared to others in the calendar.
   */
  color: string;

  /**
   * How many contributions were made by the user on this day.
   */
  contributionCount: number;

  /**
   * Indication of contributions, relative to other days. Can be used to indicate
   * which color to represent this day on a calendar.
   */
  contributionLevel: XGitHubContributionLevel;

  /**
   * The day this square represents.
   */
  date: any;

  /**
   * A number representing which day of the week this square represents, e.g., 1 is Monday.
   */
  weekday: number;
}

/**
 * A month of contributions in a user's contribution graph.
 */
export interface IXGitHubContributionCalendarMonth {
  __typename: '_xGitHubContributionCalendarMonth';

  /**
   * The date of the first day of this month.
   */
  firstDay: any;

  /**
   * The name of the month.
   */
  name: string;

  /**
   * How many weeks started in this month.
   */
  totalWeeks: number;

  /**
   * The year the month occurred in.
   */
  year: number;
}

/**
 * A week of contributions in a user's contribution graph.
 */
export interface IXGitHubContributionCalendarWeek {
  __typename: '_xGitHubContributionCalendarWeek';

  /**
   * The days of contributions in this week.
   */
  contributionDays: Array<IXGitHubContributionCalendarDay>;

  /**
   * The date of the earliest square in this week.
   */
  firstDay: any;
}

/**
 * Varying levels of contributions from none to many.
 */
export const enum XGitHubContributionLevel {
  /**
   * Lowest 25% of days of contributions.
   */
  FIRST_QUARTILE = 'FIRST_QUARTILE',

  /**
   * Highest 25% of days of contributions. More contributions than the third quartile.
   */
  FOURTH_QUARTILE = 'FOURTH_QUARTILE',

  /**
   * No contributions occurred.
   */
  NONE = 'NONE',

  /**
   * Second lowest 25% of days of contributions. More contributions than the first quartile.
   */
  SECOND_QUARTILE = 'SECOND_QUARTILE',

  /**
   * Second highest 25% of days of contributions. More contributions than second quartile, less than the fourth quartile.
   */
  THIRD_QUARTILE = 'THIRD_QUARTILE'
}

/**
 * Ordering options for contribution connections.
 */
export interface IXGitHubContributionOrder {
  /**
   * The ordering direction.
   */
  direction: XGitHubOrderDirection;
}

/**
 * A contributions collection aggregates contributions such as opened issues and commits created by a user.
 */
export interface IXGitHubContributionsCollection {
  __typename: '_xGitHubContributionsCollection';

  /**
   * Commit contributions made by the user, grouped by repository.
   */
  commitContributionsByRepository: Array<
    IXGitHubCommitContributionsByRepository
  >;

  /**
   * A calendar of this user's contributions on GitHub.
   */
  contributionCalendar: IXGitHubContributionCalendar;

  /**
   * The years the user has been making contributions with the most recent year first.
   */
  contributionYears: Array<number>;

  /**
   * Determine if this collection's time span ends in the current month.
   */
  doesEndInCurrentMonth: boolean;

  /**
   * The date of the first restricted contribution the user made in this time
   * period. Can only be non-null when the user has enabled private contribution counts.
   */
  earliestRestrictedContributionDate: any | null;

  /**
   * The ending date and time of this collection.
   */
  endedAt: any;

  /**
   * The first issue the user opened on GitHub. This will be null if that issue was
   * opened outside the collection's time range and ignoreTimeRange is false. If
   * the issue is not visible but the user has opted to show private contributions,
   * a RestrictedContribution will be returned.
   */
  firstIssueContribution: _xGitHubCreatedIssueOrRestrictedContribution | null;

  /**
   * The first pull request the user opened on GitHub. This will be null if that
   * pull request was opened outside the collection's time range and
   * ignoreTimeRange is not true. If the pull request is not visible but the user
   * has opted to show private contributions, a RestrictedContribution will be returned.
   */
  firstPullRequestContribution: _xGitHubCreatedPullRequestOrRestrictedContribution | null;

  /**
   * The first repository the user created on GitHub. This will be null if that
   * first repository was created outside the collection's time range and
   * ignoreTimeRange is false. If the repository is not visible, then a
   * RestrictedContribution is returned.
   */
  firstRepositoryContribution: _xGitHubCreatedRepositoryOrRestrictedContribution | null;

  /**
   * Does the user have any more activity in the timeline that occurred prior to the collection's time range?
   */
  hasActivityInThePast: boolean;

  /**
   * Determine if there are any contributions in this collection.
   */
  hasAnyContributions: boolean;

  /**
   * Determine if the user made any contributions in this time frame whose details
   * are not visible because they were made in a private repository. Can only be
   * true if the user enabled private contribution counts.
   */
  hasAnyRestrictedContributions: boolean;

  /**
   * Whether or not the collector's time span is all within the same day.
   */
  isSingleDay: boolean;

  /**
   * A list of issues the user opened.
   */
  issueContributions: IXGitHubCreatedIssueContributionConnection;

  /**
   * Issue contributions made by the user, grouped by repository.
   */
  issueContributionsByRepository: Array<IXGitHubIssueContributionsByRepository>;

  /**
   * When the user signed up for GitHub. This will be null if that sign up date
   * falls outside the collection's time range and ignoreTimeRange is false.
   */
  joinedGitHubContribution: IXGitHubJoinedGitHubContribution | null;

  /**
   * The date of the most recent restricted contribution the user made in this time
   * period. Can only be non-null when the user has enabled private contribution counts.
   */
  latestRestrictedContributionDate: any | null;

  /**
   * When this collection's time range does not include any activity from the user, use this
   * to get a different collection from an earlier time range that does have activity.
   */
  mostRecentCollectionWithActivity: IXGitHubContributionsCollection | null;

  /**
   * Returns a different contributions collection from an earlier time range than this one
   * that does not have any contributions.
   */
  mostRecentCollectionWithoutActivity: IXGitHubContributionsCollection | null;

  /**
   * The issue the user opened on GitHub that received the most comments in the specified
   * time frame.
   */
  popularIssueContribution: IXGitHubCreatedIssueContribution | null;

  /**
   * The pull request the user opened on GitHub that received the most comments in the
   * specified time frame.
   */
  popularPullRequestContribution: IXGitHubCreatedPullRequestContribution | null;

  /**
   * Pull request contributions made by the user.
   */
  pullRequestContributions: IXGitHubCreatedPullRequestContributionConnection;

  /**
   * Pull request contributions made by the user, grouped by repository.
   */
  pullRequestContributionsByRepository: Array<
    IXGitHubPullRequestContributionsByRepository
  >;

  /**
   * Pull request review contributions made by the user.
   */
  pullRequestReviewContributions: IXGitHubCreatedPullRequestReviewContributionConnection;

  /**
   * Pull request review contributions made by the user, grouped by repository.
   */
  pullRequestReviewContributionsByRepository: Array<
    IXGitHubPullRequestReviewContributionsByRepository
  >;

  /**
   * A list of repositories owned by the user that the user created in this time range.
   */
  repositoryContributions: IXGitHubCreatedRepositoryContributionConnection;

  /**
   * A count of contributions made by the user that the viewer cannot access. Only
   * non-zero when the user has chosen to share their private contribution counts.
   */
  restrictedContributionsCount: number;

  /**
   * The beginning date and time of this collection.
   */
  startedAt: any;

  /**
   * How many commits were made by the user in this time span.
   */
  totalCommitContributions: number;

  /**
   * How many issues the user opened.
   */
  totalIssueContributions: number;

  /**
   * How many pull requests the user opened.
   */
  totalPullRequestContributions: number;

  /**
   * How many pull request reviews the user left.
   */
  totalPullRequestReviewContributions: number;

  /**
   * How many different repositories the user committed to.
   */
  totalRepositoriesWithContributedCommits: number;

  /**
   * How many different repositories the user opened issues in.
   */
  totalRepositoriesWithContributedIssues: number;

  /**
   * How many different repositories the user left pull request reviews in.
   */
  totalRepositoriesWithContributedPullRequestReviews: number;

  /**
   * How many different repositories the user opened pull requests in.
   */
  totalRepositoriesWithContributedPullRequests: number;

  /**
   * How many repositories the user created.
   */
  totalRepositoryContributions: number;

  /**
   * The user who made the contributions in this collection.
   */
  user: IXGitHubUser;
}

export interface ICommitContributionsByRepositoryOnXGitHubContributionsCollectionArguments {
  /**
   * How many repositories should be included.
   * @default 25
   */
  maxRepositories?: number | null;
}

export interface IIssueContributionsOnXGitHubContributionsCollectionArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Should the user's first issue ever be excluded from the result.
   * @default false
   */
  excludeFirst?: boolean | null;

  /**
   * Should the user's most commented issue be excluded from the result.
   * @default false
   */
  excludePopular?: boolean | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Ordering options for contributions returned from the connection.
   * @default {"direction":"DESC"}
   */
  orderBy?: IXGitHubContributionOrder | null;
}

export interface IIssueContributionsByRepositoryOnXGitHubContributionsCollectionArguments {
  /**
   * Should the user's first issue ever be excluded from the result.
   * @default false
   */
  excludeFirst?: boolean | null;

  /**
   * Should the user's most commented issue be excluded from the result.
   * @default false
   */
  excludePopular?: boolean | null;

  /**
   * How many repositories should be included.
   * @default 25
   */
  maxRepositories?: number | null;
}

export interface IPullRequestContributionsOnXGitHubContributionsCollectionArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Should the user's first pull request ever be excluded from the result.
   * @default false
   */
  excludeFirst?: boolean | null;

  /**
   * Should the user's most commented pull request be excluded from the result.
   * @default false
   */
  excludePopular?: boolean | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Ordering options for contributions returned from the connection.
   * @default {"direction":"DESC"}
   */
  orderBy?: IXGitHubContributionOrder | null;
}

export interface IPullRequestContributionsByRepositoryOnXGitHubContributionsCollectionArguments {
  /**
   * Should the user's first pull request ever be excluded from the result.
   * @default false
   */
  excludeFirst?: boolean | null;

  /**
   * Should the user's most commented pull request be excluded from the result.
   * @default false
   */
  excludePopular?: boolean | null;

  /**
   * How many repositories should be included.
   * @default 25
   */
  maxRepositories?: number | null;
}

export interface IPullRequestReviewContributionsOnXGitHubContributionsCollectionArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Ordering options for contributions returned from the connection.
   * @default {"direction":"DESC"}
   */
  orderBy?: IXGitHubContributionOrder | null;
}

export interface IPullRequestReviewContributionsByRepositoryOnXGitHubContributionsCollectionArguments {
  /**
   * How many repositories should be included.
   * @default 25
   */
  maxRepositories?: number | null;
}

export interface IRepositoryContributionsOnXGitHubContributionsCollectionArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Should the user's first repository ever be excluded from the result.
   * @default false
   */
  excludeFirst?: boolean | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Ordering options for contributions returned from the connection.
   * @default {"direction":"DESC"}
   */
  orderBy?: IXGitHubContributionOrder | null;
}

export interface ITotalIssueContributionsOnXGitHubContributionsCollectionArguments {
  /**
   * Should the user's first issue ever be excluded from this count.
   * @default false
   */
  excludeFirst?: boolean | null;

  /**
   * Should the user's most commented issue be excluded from this count.
   * @default false
   */
  excludePopular?: boolean | null;
}

export interface ITotalPullRequestContributionsOnXGitHubContributionsCollectionArguments {
  /**
   * Should the user's first pull request ever be excluded from this count.
   * @default false
   */
  excludeFirst?: boolean | null;

  /**
   * Should the user's most commented pull request be excluded from this count.
   * @default false
   */
  excludePopular?: boolean | null;
}

export interface ITotalRepositoriesWithContributedIssuesOnXGitHubContributionsCollectionArguments {
  /**
   * Should the user's first issue ever be excluded from this count.
   * @default false
   */
  excludeFirst?: boolean | null;

  /**
   * Should the user's most commented issue be excluded from this count.
   * @default false
   */
  excludePopular?: boolean | null;
}

export interface ITotalRepositoriesWithContributedPullRequestsOnXGitHubContributionsCollectionArguments {
  /**
   * Should the user's first pull request ever be excluded from this count.
   * @default false
   */
  excludeFirst?: boolean | null;

  /**
   * Should the user's most commented pull request be excluded from this count.
   * @default false
   */
  excludePopular?: boolean | null;
}

export interface ITotalRepositoryContributionsOnXGitHubContributionsCollectionArguments {
  /**
   * Should the user's first repository ever be excluded from this count.
   * @default false
   */
  excludeFirst?: boolean | null;
}

/**
 * Autogenerated input type of ConvertProjectCardNoteToIssue
 */
export interface IXGitHubConvertProjectCardNoteToIssueInput {
  /**
   * The body of the newly created issue.
   */
  body?: string | null;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;

  /**
   * The ProjectCard ID to convert.
   */
  projectCardId: string;

  /**
   * The ID of the repository to create the issue in.
   */
  repositoryId: string;

  /**
   * The title of the newly created issue. Defaults to the card's note text.
   */
  title?: string | null;
}

/**
 * Autogenerated return type of ConvertProjectCardNoteToIssue
 */
export interface IXGitHubConvertProjectCardNoteToIssuePayload {
  __typename: '_xGitHubConvertProjectCardNoteToIssuePayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The updated ProjectCard.
   */
  projectCard: IXGitHubProjectCard | null;
}

/**
 * Autogenerated input type of ConvertPullRequestToDraft
 */
export interface IXGitHubConvertPullRequestToDraftInput {
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;

  /**
   * ID of the pull request to convert to draft
   */
  pullRequestId: string;
}

/**
 * Autogenerated return type of ConvertPullRequestToDraft
 */
export interface IXGitHubConvertPullRequestToDraftPayload {
  __typename: '_xGitHubConvertPullRequestToDraftPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The pull request that is now a draft.
   */
  pullRequest: IXGitHubPullRequest | null;
}

/**
 * Represents a 'convert_to_draft' event on a given pull request.
 */
export interface IXGitHubConvertToDraftEvent {
  __typename: '_xGitHubConvertToDraftEvent';

  /**
   * Identifies the actor who performed the event.
   */
  actor: _xGitHubActor | null;

  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: any;
  id: string;

  /**
   * PullRequest referenced by event.
   */
  pullRequest: IXGitHubPullRequest;

  /**
   * The HTTP path for this convert to draft event.
   */
  resourcePath: any;

  /**
   * The HTTP URL for this convert to draft event.
   */
  url: any;
}

/**
 * Represents a 'converted_note_to_issue' event on a given issue or pull request.
 */
export interface IXGitHubConvertedNoteToIssueEvent {
  __typename: '_xGitHubConvertedNoteToIssueEvent';

  /**
   * Identifies the actor who performed the event.
   */
  actor: _xGitHubActor | null;

  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: any;

  /**
   * Identifies the primary key from the database.
   */
  databaseId: number | null;
  id: string;
}

/**
 * Autogenerated input type of CreateBranchProtectionRule
 */
export interface IXGitHubCreateBranchProtectionRuleInput {
  /**
   * Can this branch be deleted.
   */
  allowsDeletions?: boolean | null;

  /**
   * Are force pushes allowed on this branch.
   */
  allowsForcePushes?: boolean | null;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;

  /**
   * Will new commits pushed to matching branches dismiss pull request review approvals.
   */
  dismissesStaleReviews?: boolean | null;

  /**
   * Can admins overwrite branch protection.
   */
  isAdminEnforced?: boolean | null;

  /**
   * The glob-like pattern used to determine matching branches.
   */
  pattern: string;

  /**
   * A list of User, Team or App IDs allowed to push to matching branches.
   */
  pushActorIds?: Array<string> | null;

  /**
   * The global relay id of the repository in which a new branch protection rule should be created in.
   */
  repositoryId: string;

  /**
   * Number of approving reviews required to update matching branches.
   */
  requiredApprovingReviewCount?: number | null;

  /**
   * List of required status check contexts that must pass for commits to be accepted to matching branches.
   */
  requiredStatusCheckContexts?: Array<string> | null;

  /**
   * Are approving reviews required to update matching branches.
   */
  requiresApprovingReviews?: boolean | null;

  /**
   * Are reviews from code owners required to update matching branches.
   */
  requiresCodeOwnerReviews?: boolean | null;

  /**
   * Are commits required to be signed.
   */
  requiresCommitSignatures?: boolean | null;

  /**
   * Are conversations required to be resolved before merging.
   */
  requiresConversationResolution?: boolean | null;

  /**
   * Are merge commits prohibited from being pushed to this branch.
   */
  requiresLinearHistory?: boolean | null;

  /**
   * Are status checks required to update matching branches.
   */
  requiresStatusChecks?: boolean | null;

  /**
   * Are branches required to be up to date before merging.
   */
  requiresStrictStatusChecks?: boolean | null;

  /**
   * Is pushing to matching branches restricted.
   */
  restrictsPushes?: boolean | null;

  /**
   * Is dismissal of pull request reviews restricted.
   */
  restrictsReviewDismissals?: boolean | null;

  /**
   * A list of User or Team IDs allowed to dismiss reviews on pull requests targeting matching branches.
   */
  reviewDismissalActorIds?: Array<string> | null;
}

/**
 * Autogenerated return type of CreateBranchProtectionRule
 */
export interface IXGitHubCreateBranchProtectionRulePayload {
  __typename: '_xGitHubCreateBranchProtectionRulePayload';

  /**
   * The newly created BranchProtectionRule.
   */
  branchProtectionRule: IXGitHubBranchProtectionRule | null;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;
}

/**
 * Autogenerated input type of CreateCheckRun
 */
export interface IXGitHubCreateCheckRunInput {
  /**
   * Possible further actions the integrator can perform, which a user may trigger.
   */
  actions?: Array<IXGitHubCheckRunAction> | null;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;

  /**
   * The time that the check run finished.
   */
  completedAt?: any | null;

  /**
   * The final conclusion of the check.
   */
  conclusion?: XGitHubCheckConclusionState | null;

  /**
   * The URL of the integrator's site that has the full details of the check.
   */
  detailsUrl?: any | null;

  /**
   * A reference for the run on the integrator's system.
   */
  externalId?: string | null;

  /**
   * The SHA of the head commit.
   */
  headSha: any;

  /**
   * The name of the check.
   */
  name: string;

  /**
   * Descriptive details about the run.
   */
  output?: IXGitHubCheckRunOutput | null;

  /**
   * The node ID of the repository.
   */
  repositoryId: string;

  /**
   * The time that the check run began.
   */
  startedAt?: any | null;

  /**
   * The current status.
   */
  status?: XGitHubRequestableCheckStatusState | null;
}

/**
 * Autogenerated return type of CreateCheckRun
 */
export interface IXGitHubCreateCheckRunPayload {
  __typename: '_xGitHubCreateCheckRunPayload';

  /**
   * The newly created check run.
   */
  checkRun: IXGitHubCheckRun | null;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;
}

/**
 * Autogenerated input type of CreateCheckSuite
 */
export interface IXGitHubCreateCheckSuiteInput {
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;

  /**
   * The SHA of the head commit.
   */
  headSha: any;

  /**
   * The Node ID of the repository.
   */
  repositoryId: string;
}

/**
 * Autogenerated return type of CreateCheckSuite
 */
export interface IXGitHubCreateCheckSuitePayload {
  __typename: '_xGitHubCreateCheckSuitePayload';

  /**
   * The newly created check suite.
   */
  checkSuite: IXGitHubCheckSuite | null;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;
}

/**
 * Autogenerated input type of CreateDiscussion
 */
export interface IXGitHubCreateDiscussionInput {
  /**
   * The body of the discussion.
   */
  body: string;

  /**
   * The id of the discussion category to associate with this discussion.
   */
  categoryId: string;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;

  /**
   * The id of the repository on which to create the discussion.
   */
  repositoryId: string;

  /**
   * The title of the discussion.
   */
  title: string;
}

/**
 * Autogenerated return type of CreateDiscussion
 */
export interface IXGitHubCreateDiscussionPayload {
  __typename: '_xGitHubCreateDiscussionPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The discussion that was just created.
   */
  discussion: IXGitHubDiscussion | null;
}

/**
 * Autogenerated input type of CreateEnterpriseOrganization
 */
export interface IXGitHubCreateEnterpriseOrganizationInput {
  /**
   * The logins for the administrators of the new organization.
   */
  adminLogins: Array<string>;

  /**
   * The email used for sending billing receipts.
   */
  billingEmail: string;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;

  /**
   * The ID of the enterprise owning the new organization.
   */
  enterpriseId: string;

  /**
   * The login of the new organization.
   */
  login: string;

  /**
   * The profile name of the new organization.
   */
  profileName: string;
}

/**
 * Autogenerated return type of CreateEnterpriseOrganization
 */
export interface IXGitHubCreateEnterpriseOrganizationPayload {
  __typename: '_xGitHubCreateEnterpriseOrganizationPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The enterprise that owns the created organization.
   */
  enterprise: IXGitHubEnterprise | null;

  /**
   * The organization that was created.
   */
  organization: IXGitHubOrganization | null;
}

/**
 * Autogenerated input type of CreateEnvironment
 */
export interface IXGitHubCreateEnvironmentInput {
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;

  /**
   * The name of the environment.
   */
  name: string;

  /**
   * The node ID of the repository.
   */
  repositoryId: string;
}

/**
 * Autogenerated return type of CreateEnvironment
 */
export interface IXGitHubCreateEnvironmentPayload {
  __typename: '_xGitHubCreateEnvironmentPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The new or existing environment.
   */
  environment: IXGitHubEnvironment | null;
}

/**
 * Autogenerated input type of CreateIpAllowListEntry
 */
export interface IXGitHubCreateIpAllowListEntryInput {
  /**
   * An IP address or range of addresses in CIDR notation.
   */
  allowListValue: string;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;

  /**
   * Whether the IP allow list entry is active when an IP allow list is enabled.
   */
  isActive: boolean;

  /**
   * An optional name for the IP allow list entry.
   */
  name?: string | null;

  /**
   * The ID of the owner for which to create the new IP allow list entry.
   */
  ownerId: string;
}

/**
 * Autogenerated return type of CreateIpAllowListEntry
 */
export interface IXGitHubCreateIpAllowListEntryPayload {
  __typename: '_xGitHubCreateIpAllowListEntryPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The IP allow list entry that was created.
   */
  ipAllowListEntry: IXGitHubIpAllowListEntry | null;
}

/**
 * Autogenerated input type of CreateIssue
 */
export interface IXGitHubCreateIssueInput {
  /**
   * The Node ID for the user assignee for this issue.
   */
  assigneeIds?: Array<string> | null;

  /**
   * The body for the issue description.
   */
  body?: string | null;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;

  /**
   * The name of an issue template in the repository, assigns labels and assignees from the template to the issue
   */
  issueTemplate?: string | null;

  /**
   * An array of Node IDs of labels for this issue.
   */
  labelIds?: Array<string> | null;

  /**
   * The Node ID of the milestone for this issue.
   */
  milestoneId?: string | null;

  /**
   * An array of Node IDs for projects associated with this issue.
   */
  projectIds?: Array<string> | null;

  /**
   * The Node ID of the repository.
   */
  repositoryId: string;

  /**
   * The title for the issue.
   */
  title: string;
}

/**
 * Autogenerated return type of CreateIssue
 */
export interface IXGitHubCreateIssuePayload {
  __typename: '_xGitHubCreateIssuePayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The new issue.
   */
  issue: IXGitHubIssue | null;
}

/**
 * Autogenerated input type of CreateProject
 */
export interface IXGitHubCreateProjectInput {
  /**
   * The description of project.
   */
  body?: string | null;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;

  /**
   * The name of project.
   */
  name: string;

  /**
   * The owner ID to create the project under.
   */
  ownerId: string;

  /**
   * A list of repository IDs to create as linked repositories for the project
   */
  repositoryIds?: Array<string> | null;

  /**
   * The name of the GitHub-provided template.
   */
  template?: XGitHubProjectTemplate | null;
}

/**
 * Autogenerated return type of CreateProject
 */
export interface IXGitHubCreateProjectPayload {
  __typename: '_xGitHubCreateProjectPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The new project.
   */
  project: IXGitHubProject | null;
}

/**
 * Autogenerated input type of CreatePullRequest
 */
export interface IXGitHubCreatePullRequestInput {
  /**
   * The name of the branch you want your changes pulled into. This should be an existing branch
   * on the current repository. You cannot update the base branch on a pull request to point
   * to another repository.
   */
  baseRefName: string;

  /**
   * The contents of the pull request.
   */
  body?: string | null;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;

  /**
   * Indicates whether this pull request should be a draft.
   * @default false
   */
  draft?: boolean | null;

  /**
   * The name of the branch where your changes are implemented. For cross-repository pull requests
   * in the same network, namespace `head_ref_name` with a user like this: `username:branch`.
   */
  headRefName: string;

  /**
   * Indicates whether maintainers can modify the pull request.
   * @default true
   */
  maintainerCanModify?: boolean | null;

  /**
   * The Node ID of the repository.
   */
  repositoryId: string;

  /**
   * The title of the pull request.
   */
  title: string;
}

/**
 * Autogenerated return type of CreatePullRequest
 */
export interface IXGitHubCreatePullRequestPayload {
  __typename: '_xGitHubCreatePullRequestPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The new pull request.
   */
  pullRequest: IXGitHubPullRequest | null;
}

/**
 * Autogenerated input type of CreateRef
 */
export interface IXGitHubCreateRefInput {
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;

  /**
   * The fully qualified name of the new Ref (ie: `refs/heads/my_new_branch`).
   */
  name: string;

  /**
   * The GitObjectID that the new Ref shall target. Must point to a commit.
   */
  oid: any;

  /**
   * The Node ID of the Repository to create the Ref in.
   */
  repositoryId: string;
}

/**
 * Autogenerated return type of CreateRef
 */
export interface IXGitHubCreateRefPayload {
  __typename: '_xGitHubCreateRefPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The newly created ref.
   */
  ref: IXGitHubRef | null;
}

/**
 * Autogenerated input type of CreateRepository
 */
export interface IXGitHubCreateRepositoryInput {
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;

  /**
   * A short description of the new repository.
   */
  description?: string | null;

  /**
   * Indicates if the repository should have the issues feature enabled.
   * @default true
   */
  hasIssuesEnabled?: boolean | null;

  /**
   * Indicates if the repository should have the wiki feature enabled.
   * @default false
   */
  hasWikiEnabled?: boolean | null;

  /**
   * The URL for a web page about this repository.
   */
  homepageUrl?: any | null;

  /**
   * The name of the new repository.
   */
  name: string;

  /**
   * The ID of the owner for the new repository.
   */
  ownerId?: string | null;

  /**
   * When an organization is specified as the owner, this ID identifies the team
   * that should be granted access to the new repository.
   */
  teamId?: string | null;

  /**
   * Whether this repository should be marked as a template such that anyone who
   * can access it can create new repositories with the same files and directory structure.
   * @default false
   */
  template?: boolean | null;

  /**
   * Indicates the repository's visibility level.
   */
  visibility: XGitHubRepositoryVisibility;
}

/**
 * Autogenerated return type of CreateRepository
 */
export interface IXGitHubCreateRepositoryPayload {
  __typename: '_xGitHubCreateRepositoryPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The new repository.
   */
  repository: IXGitHubRepository | null;
}

/**
 * Autogenerated input type of CreateSponsorship
 */
export interface IXGitHubCreateSponsorshipInput {
  /**
   * The amount to pay to the sponsorable in US dollars. Required if a tierId is not specified. Valid values: 1-12000.
   */
  amount?: number | null;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;

  /**
   * Whether the sponsorship should happen monthly/yearly or just this one time. Required if a tierId is not specified.
   */
  isRecurring?: boolean | null;

  /**
   * Specify whether others should be able to see that the sponsor is sponsoring
   * the sponsorable. Public visibility still does not reveal which tier is used.
   * @default "PUBLIC"
   */
  privacyLevel?: XGitHubSponsorshipPrivacy | null;

  /**
   * Whether the sponsor should receive email updates from the sponsorable.
   * @default true
   */
  receiveEmails?: boolean | null;

  /**
   * The ID of the user or organization who is acting as the sponsor, paying for
   * the sponsorship. Required if sponsorLogin is not given.
   */
  sponsorId?: string | null;

  /**
   * The username of the user or organization who is acting as the sponsor, paying
   * for the sponsorship. Required if sponsorId is not given.
   */
  sponsorLogin?: string | null;

  /**
   * The ID of the user or organization who is receiving the sponsorship. Required if sponsorableLogin is not given.
   */
  sponsorableId?: string | null;

  /**
   * The username of the user or organization who is receiving the sponsorship. Required if sponsorableId is not given.
   */
  sponsorableLogin?: string | null;

  /**
   * The ID of one of sponsorable's existing tiers to sponsor at. Required if amount is not specified.
   */
  tierId?: string | null;
}

/**
 * Autogenerated return type of CreateSponsorship
 */
export interface IXGitHubCreateSponsorshipPayload {
  __typename: '_xGitHubCreateSponsorshipPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The sponsorship that was started.
   */
  sponsorship: IXGitHubSponsorship | null;
}

/**
 * Autogenerated input type of CreateTeamDiscussionComment
 */
export interface IXGitHubCreateTeamDiscussionCommentInput {
  /**
   * The content of the comment.
   */
  body: string;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;

  /**
   * The ID of the discussion to which the comment belongs.
   */
  discussionId: string;
}

/**
 * Autogenerated return type of CreateTeamDiscussionComment
 */
export interface IXGitHubCreateTeamDiscussionCommentPayload {
  __typename: '_xGitHubCreateTeamDiscussionCommentPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The new comment.
   */
  teamDiscussionComment: IXGitHubTeamDiscussionComment | null;
}

/**
 * Autogenerated input type of CreateTeamDiscussion
 */
export interface IXGitHubCreateTeamDiscussionInput {
  /**
   * The content of the discussion.
   */
  body: string;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;

  /**
   * If true, restricts the visibility of this discussion to team members and
   * organization admins. If false or not specified, allows any organization member
   * to view this discussion.
   */
  private?: boolean | null;

  /**
   * The ID of the team to which the discussion belongs.
   */
  teamId: string;

  /**
   * The title of the discussion.
   */
  title: string;
}

/**
 * Autogenerated return type of CreateTeamDiscussion
 */
export interface IXGitHubCreateTeamDiscussionPayload {
  __typename: '_xGitHubCreateTeamDiscussionPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The new discussion.
   */
  teamDiscussion: IXGitHubTeamDiscussion | null;
}

/**
 * Represents the contribution a user made by committing to a repository.
 */
export interface IXGitHubCreatedCommitContribution {
  __typename: '_xGitHubCreatedCommitContribution';

  /**
   * How many commits were made on this day to this repository by the user.
   */
  commitCount: number;

  /**
   * Whether this contribution is associated with a record you do not have access to. For
   * example, your own 'first issue' contribution may have been made on a repository you can no
   * longer access.
   */
  isRestricted: boolean;

  /**
   * When this contribution was made.
   */
  occurredAt: any;

  /**
   * The repository the user made a commit in.
   */
  repository: IXGitHubRepository;

  /**
   * The HTTP path for this contribution.
   */
  resourcePath: any;

  /**
   * The HTTP URL for this contribution.
   */
  url: any;

  /**
   * The user who made this contribution.
   */
  user: IXGitHubUser;
}

/**
 * The connection type for CreatedCommitContribution.
 */
export interface IXGitHubCreatedCommitContributionConnection {
  __typename: '_xGitHubCreatedCommitContributionConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubCreatedCommitContributionEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitHubCreatedCommitContribution | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * Identifies the total count of commits across days and repositories in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface IXGitHubCreatedCommitContributionEdge {
  __typename: '_xGitHubCreatedCommitContributionEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitHubCreatedCommitContribution | null;
}

/**
 * Represents the contribution a user made on GitHub by opening an issue.
 */
export interface IXGitHubCreatedIssueContribution {
  __typename: '_xGitHubCreatedIssueContribution';

  /**
   * Whether this contribution is associated with a record you do not have access to. For
   * example, your own 'first issue' contribution may have been made on a repository you can no
   * longer access.
   */
  isRestricted: boolean;

  /**
   * The issue that was opened.
   */
  issue: IXGitHubIssue;

  /**
   * When this contribution was made.
   */
  occurredAt: any;

  /**
   * The HTTP path for this contribution.
   */
  resourcePath: any;

  /**
   * The HTTP URL for this contribution.
   */
  url: any;

  /**
   * The user who made this contribution.
   */
  user: IXGitHubUser;
}

/**
 * The connection type for CreatedIssueContribution.
 */
export interface IXGitHubCreatedIssueContributionConnection {
  __typename: '_xGitHubCreatedIssueContributionConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubCreatedIssueContributionEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitHubCreatedIssueContribution | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface IXGitHubCreatedIssueContributionEdge {
  __typename: '_xGitHubCreatedIssueContributionEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitHubCreatedIssueContribution | null;
}

/**
 * Represents either a issue the viewer can access or a restricted contribution.
 */
export type _xGitHubCreatedIssueOrRestrictedContribution =
  | IXGitHubCreatedIssueContribution
  | IXGitHubRestrictedContribution;

/**
 * Represents the contribution a user made on GitHub by opening a pull request.
 */
export interface IXGitHubCreatedPullRequestContribution {
  __typename: '_xGitHubCreatedPullRequestContribution';

  /**
   * Whether this contribution is associated with a record you do not have access to. For
   * example, your own 'first issue' contribution may have been made on a repository you can no
   * longer access.
   */
  isRestricted: boolean;

  /**
   * When this contribution was made.
   */
  occurredAt: any;

  /**
   * The pull request that was opened.
   */
  pullRequest: IXGitHubPullRequest;

  /**
   * The HTTP path for this contribution.
   */
  resourcePath: any;

  /**
   * The HTTP URL for this contribution.
   */
  url: any;

  /**
   * The user who made this contribution.
   */
  user: IXGitHubUser;
}

/**
 * The connection type for CreatedPullRequestContribution.
 */
export interface IXGitHubCreatedPullRequestContributionConnection {
  __typename: '_xGitHubCreatedPullRequestContributionConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubCreatedPullRequestContributionEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitHubCreatedPullRequestContribution | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface IXGitHubCreatedPullRequestContributionEdge {
  __typename: '_xGitHubCreatedPullRequestContributionEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitHubCreatedPullRequestContribution | null;
}

/**
 * Represents either a pull request the viewer can access or a restricted contribution.
 */
export type _xGitHubCreatedPullRequestOrRestrictedContribution =
  | IXGitHubCreatedPullRequestContribution
  | IXGitHubRestrictedContribution;

/**
 * Represents the contribution a user made by leaving a review on a pull request.
 */
export interface IXGitHubCreatedPullRequestReviewContribution {
  __typename: '_xGitHubCreatedPullRequestReviewContribution';

  /**
   * Whether this contribution is associated with a record you do not have access to. For
   * example, your own 'first issue' contribution may have been made on a repository you can no
   * longer access.
   */
  isRestricted: boolean;

  /**
   * When this contribution was made.
   */
  occurredAt: any;

  /**
   * The pull request the user reviewed.
   */
  pullRequest: IXGitHubPullRequest;

  /**
   * The review the user left on the pull request.
   */
  pullRequestReview: IXGitHubPullRequestReview;

  /**
   * The repository containing the pull request that the user reviewed.
   */
  repository: IXGitHubRepository;

  /**
   * The HTTP path for this contribution.
   */
  resourcePath: any;

  /**
   * The HTTP URL for this contribution.
   */
  url: any;

  /**
   * The user who made this contribution.
   */
  user: IXGitHubUser;
}

/**
 * The connection type for CreatedPullRequestReviewContribution.
 */
export interface IXGitHubCreatedPullRequestReviewContributionConnection {
  __typename: '_xGitHubCreatedPullRequestReviewContributionConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubCreatedPullRequestReviewContributionEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitHubCreatedPullRequestReviewContribution | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface IXGitHubCreatedPullRequestReviewContributionEdge {
  __typename: '_xGitHubCreatedPullRequestReviewContributionEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitHubCreatedPullRequestReviewContribution | null;
}

/**
 * Represents the contribution a user made on GitHub by creating a repository.
 */
export interface IXGitHubCreatedRepositoryContribution {
  __typename: '_xGitHubCreatedRepositoryContribution';

  /**
   * Whether this contribution is associated with a record you do not have access to. For
   * example, your own 'first issue' contribution may have been made on a repository you can no
   * longer access.
   */
  isRestricted: boolean;

  /**
   * When this contribution was made.
   */
  occurredAt: any;

  /**
   * The repository that was created.
   */
  repository: IXGitHubRepository;

  /**
   * The HTTP path for this contribution.
   */
  resourcePath: any;

  /**
   * The HTTP URL for this contribution.
   */
  url: any;

  /**
   * The user who made this contribution.
   */
  user: IXGitHubUser;
}

/**
 * The connection type for CreatedRepositoryContribution.
 */
export interface IXGitHubCreatedRepositoryContributionConnection {
  __typename: '_xGitHubCreatedRepositoryContributionConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubCreatedRepositoryContributionEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitHubCreatedRepositoryContribution | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface IXGitHubCreatedRepositoryContributionEdge {
  __typename: '_xGitHubCreatedRepositoryContributionEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitHubCreatedRepositoryContribution | null;
}

/**
 * Represents either a repository the viewer can access or a restricted contribution.
 */
export type _xGitHubCreatedRepositoryOrRestrictedContribution =
  | IXGitHubCreatedRepositoryContribution
  | IXGitHubRestrictedContribution;

/**
 * Represents a mention made by one issue or pull request to another.
 */
export interface IXGitHubCrossReferencedEvent {
  __typename: '_xGitHubCrossReferencedEvent';

  /**
   * Identifies the actor who performed the event.
   */
  actor: _xGitHubActor | null;

  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: any;
  id: string;

  /**
   * Reference originated in a different repository.
   */
  isCrossRepository: boolean;

  /**
   * Identifies when the reference was made.
   */
  referencedAt: any;

  /**
   * The HTTP path for this pull request.
   */
  resourcePath: any;

  /**
   * Issue or pull request that made the reference.
   */
  source: _xGitHubReferencedSubject;

  /**
   * Issue or pull request to which the reference was made.
   */
  target: _xGitHubReferencedSubject;

  /**
   * The HTTP URL for this pull request.
   */
  url: any;

  /**
   * Checks if the target will be closed when the source is merged.
   */
  willCloseTarget: boolean;
}

/**
 * Autogenerated input type of DeclineTopicSuggestion
 */
export interface IXGitHubDeclineTopicSuggestionInput {
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;

  /**
   * The name of the suggested topic.
   */
  name: string;

  /**
   * The reason why the suggested topic is declined.
   */
  reason: XGitHubTopicSuggestionDeclineReason;

  /**
   * The Node ID of the repository.
   */
  repositoryId: string;
}

/**
 * Autogenerated return type of DeclineTopicSuggestion
 */
export interface IXGitHubDeclineTopicSuggestionPayload {
  __typename: '_xGitHubDeclineTopicSuggestionPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The declined topic.
   */
  topic: IXGitHubTopic | null;
}

/**
 * The possible base permissions for repositories.
 */
export const enum XGitHubDefaultRepositoryPermissionField {
  /**
   * Can read, write, and administrate repos by default
   */
  ADMIN = 'ADMIN',

  /**
   * No access
   */
  NONE = 'NONE',

  /**
   * Can read repos by default
   */
  READ = 'READ',

  /**
   * Can read and write repos by default
   */
  WRITE = 'WRITE'
}

/**
 * Entities that can be deleted.
 */
export type _xGitHubDeletable =
  | IXGitHubCommitComment
  | IXGitHubDiscussion
  | IXGitHubDiscussionComment
  | IXGitHubGistComment
  | IXGitHubIssueComment
  | IXGitHubPullRequestReview
  | IXGitHubPullRequestReviewComment
  | IXGitHubTeamDiscussion
  | IXGitHubTeamDiscussionComment;

/**
 * Entities that can be deleted.
 */
export interface IXGitHubDeletable {
  __typename: '_xGitHubDeletable';

  /**
   * Check if the current viewer can delete this object.
   */
  viewerCanDelete: boolean;
}

/**
 * Autogenerated input type of DeleteBranchProtectionRule
 */
export interface IXGitHubDeleteBranchProtectionRuleInput {
  /**
   * The global relay id of the branch protection rule to be deleted.
   */
  branchProtectionRuleId: string;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of DeleteBranchProtectionRule
 */
export interface IXGitHubDeleteBranchProtectionRulePayload {
  __typename: '_xGitHubDeleteBranchProtectionRulePayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;
}

/**
 * Autogenerated input type of DeleteDeployment
 */
export interface IXGitHubDeleteDeploymentInput {
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;

  /**
   * The Node ID of the deployment to be deleted.
   */
  id: string;
}

/**
 * Autogenerated return type of DeleteDeployment
 */
export interface IXGitHubDeleteDeploymentPayload {
  __typename: '_xGitHubDeleteDeploymentPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;
}

/**
 * Autogenerated input type of DeleteDiscussionComment
 */
export interface IXGitHubDeleteDiscussionCommentInput {
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;

  /**
   * The Node id of the discussion comment to delete.
   */
  id: string;
}

/**
 * Autogenerated return type of DeleteDiscussionComment
 */
export interface IXGitHubDeleteDiscussionCommentPayload {
  __typename: '_xGitHubDeleteDiscussionCommentPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The discussion comment that was just deleted.
   */
  comment: IXGitHubDiscussionComment | null;
}

/**
 * Autogenerated input type of DeleteDiscussion
 */
export interface IXGitHubDeleteDiscussionInput {
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;

  /**
   * The id of the discussion to delete.
   */
  id: string;
}

/**
 * Autogenerated return type of DeleteDiscussion
 */
export interface IXGitHubDeleteDiscussionPayload {
  __typename: '_xGitHubDeleteDiscussionPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The discussion that was just deleted.
   */
  discussion: IXGitHubDiscussion | null;
}

/**
 * Autogenerated input type of DeleteEnvironment
 */
export interface IXGitHubDeleteEnvironmentInput {
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;

  /**
   * The Node ID of the environment to be deleted.
   */
  id: string;
}

/**
 * Autogenerated return type of DeleteEnvironment
 */
export interface IXGitHubDeleteEnvironmentPayload {
  __typename: '_xGitHubDeleteEnvironmentPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;
}

/**
 * Autogenerated input type of DeleteIpAllowListEntry
 */
export interface IXGitHubDeleteIpAllowListEntryInput {
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;

  /**
   * The ID of the IP allow list entry to delete.
   */
  ipAllowListEntryId: string;
}

/**
 * Autogenerated return type of DeleteIpAllowListEntry
 */
export interface IXGitHubDeleteIpAllowListEntryPayload {
  __typename: '_xGitHubDeleteIpAllowListEntryPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The IP allow list entry that was deleted.
   */
  ipAllowListEntry: IXGitHubIpAllowListEntry | null;
}

/**
 * Autogenerated input type of DeleteIssueComment
 */
export interface IXGitHubDeleteIssueCommentInput {
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;

  /**
   * The ID of the comment to delete.
   */
  id: string;
}

/**
 * Autogenerated return type of DeleteIssueComment
 */
export interface IXGitHubDeleteIssueCommentPayload {
  __typename: '_xGitHubDeleteIssueCommentPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;
}

/**
 * Autogenerated input type of DeleteIssue
 */
export interface IXGitHubDeleteIssueInput {
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;

  /**
   * The ID of the issue to delete.
   */
  issueId: string;
}

/**
 * Autogenerated return type of DeleteIssue
 */
export interface IXGitHubDeleteIssuePayload {
  __typename: '_xGitHubDeleteIssuePayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The repository the issue belonged to
   */
  repository: IXGitHubRepository | null;
}

/**
 * Autogenerated input type of DeleteProjectCard
 */
export interface IXGitHubDeleteProjectCardInput {
  /**
   * The id of the card to delete.
   */
  cardId: string;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of DeleteProjectCard
 */
export interface IXGitHubDeleteProjectCardPayload {
  __typename: '_xGitHubDeleteProjectCardPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The column the deleted card was in.
   */
  column: IXGitHubProjectColumn | null;

  /**
   * The deleted card ID.
   */
  deletedCardId: string | null;
}

/**
 * Autogenerated input type of DeleteProjectColumn
 */
export interface IXGitHubDeleteProjectColumnInput {
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;

  /**
   * The id of the column to delete.
   */
  columnId: string;
}

/**
 * Autogenerated return type of DeleteProjectColumn
 */
export interface IXGitHubDeleteProjectColumnPayload {
  __typename: '_xGitHubDeleteProjectColumnPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The deleted column ID.
   */
  deletedColumnId: string | null;

  /**
   * The project the deleted column was in.
   */
  project: IXGitHubProject | null;
}

/**
 * Autogenerated input type of DeleteProject
 */
export interface IXGitHubDeleteProjectInput {
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;

  /**
   * The Project ID to update.
   */
  projectId: string;
}

/**
 * Autogenerated return type of DeleteProject
 */
export interface IXGitHubDeleteProjectPayload {
  __typename: '_xGitHubDeleteProjectPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The repository or organization the project was removed from.
   */
  owner: _xGitHubProjectOwner | null;
}

/**
 * Autogenerated input type of DeletePullRequestReviewComment
 */
export interface IXGitHubDeletePullRequestReviewCommentInput {
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;

  /**
   * The ID of the comment to delete.
   */
  id: string;
}

/**
 * Autogenerated return type of DeletePullRequestReviewComment
 */
export interface IXGitHubDeletePullRequestReviewCommentPayload {
  __typename: '_xGitHubDeletePullRequestReviewCommentPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The pull request review the deleted comment belonged to.
   */
  pullRequestReview: IXGitHubPullRequestReview | null;
}

/**
 * Autogenerated input type of DeletePullRequestReview
 */
export interface IXGitHubDeletePullRequestReviewInput {
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;

  /**
   * The Node ID of the pull request review to delete.
   */
  pullRequestReviewId: string;
}

/**
 * Autogenerated return type of DeletePullRequestReview
 */
export interface IXGitHubDeletePullRequestReviewPayload {
  __typename: '_xGitHubDeletePullRequestReviewPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The deleted pull request review.
   */
  pullRequestReview: IXGitHubPullRequestReview | null;
}

/**
 * Autogenerated input type of DeleteRef
 */
export interface IXGitHubDeleteRefInput {
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;

  /**
   * The Node ID of the Ref to be deleted.
   */
  refId: string;
}

/**
 * Autogenerated return type of DeleteRef
 */
export interface IXGitHubDeleteRefPayload {
  __typename: '_xGitHubDeleteRefPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;
}

/**
 * Autogenerated input type of DeleteTeamDiscussionComment
 */
export interface IXGitHubDeleteTeamDiscussionCommentInput {
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;

  /**
   * The ID of the comment to delete.
   */
  id: string;
}

/**
 * Autogenerated return type of DeleteTeamDiscussionComment
 */
export interface IXGitHubDeleteTeamDiscussionCommentPayload {
  __typename: '_xGitHubDeleteTeamDiscussionCommentPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;
}

/**
 * Autogenerated input type of DeleteTeamDiscussion
 */
export interface IXGitHubDeleteTeamDiscussionInput {
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;

  /**
   * The discussion ID to delete.
   */
  id: string;
}

/**
 * Autogenerated return type of DeleteTeamDiscussion
 */
export interface IXGitHubDeleteTeamDiscussionPayload {
  __typename: '_xGitHubDeleteTeamDiscussionPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;
}

/**
 * Autogenerated input type of DeleteVerifiableDomain
 */
export interface IXGitHubDeleteVerifiableDomainInput {
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;

  /**
   * The ID of the verifiable domain to delete.
   */
  id: string;
}

/**
 * Autogenerated return type of DeleteVerifiableDomain
 */
export interface IXGitHubDeleteVerifiableDomainPayload {
  __typename: '_xGitHubDeleteVerifiableDomainPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The owning account from which the domain was deleted.
   */
  owner: _xGitHubVerifiableDomainOwner | null;
}

/**
 * Represents a 'demilestoned' event on a given issue or pull request.
 */
export interface IXGitHubDemilestonedEvent {
  __typename: '_xGitHubDemilestonedEvent';

  /**
   * Identifies the actor who performed the event.
   */
  actor: _xGitHubActor | null;

  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: any;
  id: string;

  /**
   * Identifies the milestone title associated with the 'demilestoned' event.
   */
  milestoneTitle: string;

  /**
   * Object referenced by event.
   */
  subject: _xGitHubMilestoneItem;
}

/**
 * A repository deploy key.
 */
export interface IXGitHubDeployKey {
  __typename: '_xGitHubDeployKey';

  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: any;
  id: string;

  /**
   * The deploy key.
   */
  key: string;

  /**
   * Whether or not the deploy key is read only.
   */
  readOnly: boolean;

  /**
   * The deploy key title.
   */
  title: string;

  /**
   * Whether or not the deploy key has been verified.
   */
  verified: boolean;
}

/**
 * The connection type for DeployKey.
 */
export interface IXGitHubDeployKeyConnection {
  __typename: '_xGitHubDeployKeyConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubDeployKeyEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitHubDeployKey | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface IXGitHubDeployKeyEdge {
  __typename: '_xGitHubDeployKeyEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitHubDeployKey | null;
}

/**
 * Represents a 'deployed' event on a given pull request.
 */
export interface IXGitHubDeployedEvent {
  __typename: '_xGitHubDeployedEvent';

  /**
   * Identifies the actor who performed the event.
   */
  actor: _xGitHubActor | null;

  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: any;

  /**
   * Identifies the primary key from the database.
   */
  databaseId: number | null;

  /**
   * The deployment associated with the 'deployed' event.
   */
  deployment: IXGitHubDeployment;
  id: string;

  /**
   * PullRequest referenced by event.
   */
  pullRequest: IXGitHubPullRequest;

  /**
   * The ref associated with the 'deployed' event.
   */
  ref: IXGitHubRef | null;
}

/**
 * Represents triggered deployment instance.
 */
export interface IXGitHubDeployment {
  __typename: '_xGitHubDeployment';

  /**
   * Identifies the commit sha of the deployment.
   */
  commit: IXGitHubCommit | null;

  /**
   * Identifies the oid of the deployment commit, even if the commit has been deleted.
   */
  commitOid: string;

  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: any;

  /**
   * Identifies the actor who triggered the deployment.
   */
  creator: _xGitHubActor;

  /**
   * Identifies the primary key from the database.
   */
  databaseId: number | null;

  /**
   * The deployment description.
   */
  description: string | null;

  /**
   * The latest environment to which this deployment was made.
   */
  environment: string | null;
  id: string;

  /**
   * The latest environment to which this deployment was made.
   */
  latestEnvironment: string | null;

  /**
   * The latest status of this deployment.
   */
  latestStatus: IXGitHubDeploymentStatus | null;

  /**
   * The original environment to which this deployment was made.
   */
  originalEnvironment: string | null;

  /**
   * Extra information that a deployment system might need.
   */
  payload: string | null;

  /**
   * Identifies the Ref of the deployment, if the deployment was created by ref.
   */
  ref: IXGitHubRef | null;

  /**
   * Identifies the repository associated with the deployment.
   */
  repository: IXGitHubRepository;

  /**
   * The current state of the deployment.
   */
  state: XGitHubDeploymentState | null;

  /**
   * A list of statuses associated with the deployment.
   */
  statuses: IXGitHubDeploymentStatusConnection | null;

  /**
   * The deployment task.
   */
  task: string | null;

  /**
   * Identifies the date and time when the object was last updated.
   */
  updatedAt: any;
}

export interface IStatusesOnXGitHubDeploymentArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

/**
 * The connection type for Deployment.
 */
export interface IXGitHubDeploymentConnection {
  __typename: '_xGitHubDeploymentConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubDeploymentEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitHubDeployment | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface IXGitHubDeploymentEdge {
  __typename: '_xGitHubDeploymentEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitHubDeployment | null;
}

/**
 * Represents a 'deployment_environment_changed' event on a given pull request.
 */
export interface IXGitHubDeploymentEnvironmentChangedEvent {
  __typename: '_xGitHubDeploymentEnvironmentChangedEvent';

  /**
   * Identifies the actor who performed the event.
   */
  actor: _xGitHubActor | null;

  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: any;

  /**
   * The deployment status that updated the deployment environment.
   */
  deploymentStatus: IXGitHubDeploymentStatus;
  id: string;

  /**
   * PullRequest referenced by event.
   */
  pullRequest: IXGitHubPullRequest;
}

/**
 * Ordering options for deployment connections
 */
export interface IXGitHubDeploymentOrder {
  /**
   * The ordering direction.
   */
  direction: XGitHubOrderDirection;

  /**
   * The field to order deployments by.
   */
  field: XGitHubDeploymentOrderField;
}

/**
 * Properties by which deployment connections can be ordered.
 */
export const enum XGitHubDeploymentOrderField {
  /**
   * Order collection by creation time
   */
  CREATED_AT = 'CREATED_AT'
}

/**
 * A protection rule.
 */
export interface IXGitHubDeploymentProtectionRule {
  __typename: '_xGitHubDeploymentProtectionRule';

  /**
   * Identifies the primary key from the database.
   */
  databaseId: number | null;

  /**
   * The teams or users that can review the deployment
   */
  reviewers: IXGitHubDeploymentReviewerConnection;

  /**
   * The timeout in minutes for this protection rule.
   */
  timeout: number;

  /**
   * The type of protection rule.
   */
  type: XGitHubDeploymentProtectionRuleType;
}

export interface IReviewersOnXGitHubDeploymentProtectionRuleArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

/**
 * The connection type for DeploymentProtectionRule.
 */
export interface IXGitHubDeploymentProtectionRuleConnection {
  __typename: '_xGitHubDeploymentProtectionRuleConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubDeploymentProtectionRuleEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitHubDeploymentProtectionRule | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface IXGitHubDeploymentProtectionRuleEdge {
  __typename: '_xGitHubDeploymentProtectionRuleEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitHubDeploymentProtectionRule | null;
}

/**
 * The possible protection rule types.
 */
export const enum XGitHubDeploymentProtectionRuleType {
  /**
   * Required reviewers
   */
  REQUIRED_REVIEWERS = 'REQUIRED_REVIEWERS',

  /**
   * Wait timer
   */
  WAIT_TIMER = 'WAIT_TIMER'
}

/**
 * A request to deploy a workflow run to an environment.
 */
export interface IXGitHubDeploymentRequest {
  __typename: '_xGitHubDeploymentRequest';

  /**
   * Whether or not the current user can approve the deployment
   */
  currentUserCanApprove: boolean;

  /**
   * The target environment of the deployment
   */
  environment: IXGitHubEnvironment;

  /**
   * The teams or users that can review the deployment
   */
  reviewers: IXGitHubDeploymentReviewerConnection;

  /**
   * The wait timer in minutes configured in the environment
   */
  waitTimer: number;

  /**
   * The wait timer in minutes configured in the environment
   */
  waitTimerStartedAt: any | null;
}

export interface IReviewersOnXGitHubDeploymentRequestArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

/**
 * The connection type for DeploymentRequest.
 */
export interface IXGitHubDeploymentRequestConnection {
  __typename: '_xGitHubDeploymentRequestConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubDeploymentRequestEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitHubDeploymentRequest | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface IXGitHubDeploymentRequestEdge {
  __typename: '_xGitHubDeploymentRequestEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitHubDeploymentRequest | null;
}

/**
 * A deployment review.
 */
export interface IXGitHubDeploymentReview {
  __typename: '_xGitHubDeploymentReview';

  /**
   * The comment the user left.
   */
  comment: string;

  /**
   * Identifies the primary key from the database.
   */
  databaseId: number | null;

  /**
   * The environments approved or rejected
   */
  environments: IXGitHubEnvironmentConnection;
  id: string;

  /**
   * The decision of the user.
   */
  state: XGitHubDeploymentReviewState;

  /**
   * The user that reviewed the deployment.
   */
  user: IXGitHubUser;
}

export interface IEnvironmentsOnXGitHubDeploymentReviewArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

/**
 * The connection type for DeploymentReview.
 */
export interface IXGitHubDeploymentReviewConnection {
  __typename: '_xGitHubDeploymentReviewConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubDeploymentReviewEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitHubDeploymentReview | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface IXGitHubDeploymentReviewEdge {
  __typename: '_xGitHubDeploymentReviewEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitHubDeploymentReview | null;
}

/**
 * The possible states for a deployment review.
 */
export const enum XGitHubDeploymentReviewState {
  /**
   * The deployment was approved.
   */
  APPROVED = 'APPROVED',

  /**
   * The deployment was rejected.
   */
  REJECTED = 'REJECTED'
}

/**
 * Users and teams.
 */
export type _xGitHubDeploymentReviewer = IXGitHubTeam | IXGitHubUser;

/**
 * The connection type for DeploymentReviewer.
 */
export interface IXGitHubDeploymentReviewerConnection {
  __typename: '_xGitHubDeploymentReviewerConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubDeploymentReviewerEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<_xGitHubDeploymentReviewer | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface IXGitHubDeploymentReviewerEdge {
  __typename: '_xGitHubDeploymentReviewerEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: _xGitHubDeploymentReviewer | null;
}

/**
 * The possible states in which a deployment can be.
 */
export const enum XGitHubDeploymentState {
  /**
   * The pending deployment was not updated after 30 minutes.
   */
  ABANDONED = 'ABANDONED',

  /**
   * The deployment is currently active.
   */
  ACTIVE = 'ACTIVE',

  /**
   * An inactive transient deployment.
   */
  DESTROYED = 'DESTROYED',

  /**
   * The deployment experienced an error.
   */
  ERROR = 'ERROR',

  /**
   * The deployment has failed.
   */
  FAILURE = 'FAILURE',

  /**
   * The deployment is inactive.
   */
  INACTIVE = 'INACTIVE',

  /**
   * The deployment is in progress.
   */
  IN_PROGRESS = 'IN_PROGRESS',

  /**
   * The deployment is pending.
   */
  PENDING = 'PENDING',

  /**
   * The deployment has queued
   */
  QUEUED = 'QUEUED',

  /**
   * The deployment is waiting.
   */
  WAITING = 'WAITING'
}

/**
 * Describes the status of a given deployment attempt.
 */
export interface IXGitHubDeploymentStatus {
  __typename: '_xGitHubDeploymentStatus';

  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: any;

  /**
   * Identifies the actor who triggered the deployment.
   */
  creator: _xGitHubActor;

  /**
   * Identifies the deployment associated with status.
   */
  deployment: IXGitHubDeployment;

  /**
   * Identifies the description of the deployment.
   */
  description: string | null;

  /**
   * Identifies the environment URL of the deployment.
   */
  environmentUrl: any | null;
  id: string;

  /**
   * Identifies the log URL of the deployment.
   */
  logUrl: any | null;

  /**
   * Identifies the current state of the deployment.
   */
  state: XGitHubDeploymentStatusState;

  /**
   * Identifies the date and time when the object was last updated.
   */
  updatedAt: any;
}

/**
 * The connection type for DeploymentStatus.
 */
export interface IXGitHubDeploymentStatusConnection {
  __typename: '_xGitHubDeploymentStatusConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubDeploymentStatusEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitHubDeploymentStatus | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface IXGitHubDeploymentStatusEdge {
  __typename: '_xGitHubDeploymentStatusEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitHubDeploymentStatus | null;
}

/**
 * The possible states for a deployment status.
 */
export const enum XGitHubDeploymentStatusState {
  /**
   * The deployment experienced an error.
   */
  ERROR = 'ERROR',

  /**
   * The deployment has failed.
   */
  FAILURE = 'FAILURE',

  /**
   * The deployment is inactive.
   */
  INACTIVE = 'INACTIVE',

  /**
   * The deployment is in progress.
   */
  IN_PROGRESS = 'IN_PROGRESS',

  /**
   * The deployment is pending.
   */
  PENDING = 'PENDING',

  /**
   * The deployment is queued
   */
  QUEUED = 'QUEUED',

  /**
   * The deployment was successful.
   */
  SUCCESS = 'SUCCESS',

  /**
   * The deployment is waiting.
   */
  WAITING = 'WAITING'
}

/**
 * The possible sides of a diff.
 */
export const enum XGitHubDiffSide {
  /**
   * The left side of the diff.
   */
  LEFT = 'LEFT',

  /**
   * The right side of the diff.
   */
  RIGHT = 'RIGHT'
}

/**
 * Autogenerated input type of DisablePullRequestAutoMerge
 */
export interface IXGitHubDisablePullRequestAutoMergeInput {
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;

  /**
   * ID of the pull request to disable auto merge on.
   */
  pullRequestId: string;
}

/**
 * Autogenerated return type of DisablePullRequestAutoMerge
 */
export interface IXGitHubDisablePullRequestAutoMergePayload {
  __typename: '_xGitHubDisablePullRequestAutoMergePayload';

  /**
   * Identifies the actor who performed the event.
   */
  actor: _xGitHubActor | null;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The pull request auto merge was disabled on.
   */
  pullRequest: IXGitHubPullRequest | null;
}

/**
 * Represents a 'disconnected' event on a given issue or pull request.
 */
export interface IXGitHubDisconnectedEvent {
  __typename: '_xGitHubDisconnectedEvent';

  /**
   * Identifies the actor who performed the event.
   */
  actor: _xGitHubActor | null;

  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: any;
  id: string;

  /**
   * Reference originated in a different repository.
   */
  isCrossRepository: boolean;

  /**
   * Issue or pull request from which the issue was disconnected.
   */
  source: _xGitHubReferencedSubject;

  /**
   * Issue or pull request which was disconnected.
   */
  subject: _xGitHubReferencedSubject;
}

/**
 * A discussion in a repository.
 */
export interface IXGitHubDiscussion {
  __typename: '_xGitHubDiscussion';

  /**
   * Reason that the conversation was locked.
   */
  activeLockReason: XGitHubLockReason | null;

  /**
   * The comment chosen as this discussion's answer, if any.
   */
  answer: IXGitHubDiscussionComment | null;

  /**
   * The time when a user chose this discussion's answer, if answered.
   */
  answerChosenAt: any | null;

  /**
   * The user who chose this discussion's answer, if answered.
   */
  answerChosenBy: _xGitHubActor | null;

  /**
   * The actor who authored the comment.
   */
  author: _xGitHubActor | null;

  /**
   * Author's association with the subject of the comment.
   */
  authorAssociation: XGitHubCommentAuthorAssociation;

  /**
   * The main text of the discussion post.
   */
  body: string;

  /**
   * The body rendered to HTML.
   */
  bodyHTML: any;

  /**
   * The body rendered to text.
   */
  bodyText: string;

  /**
   * The category for this discussion.
   */
  category: IXGitHubDiscussionCategory;

  /**
   * The replies to the discussion.
   */
  comments: IXGitHubDiscussionCommentConnection;

  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: any;

  /**
   * Check if this comment was created via an email reply.
   */
  createdViaEmail: boolean;

  /**
   * Identifies the primary key from the database.
   */
  databaseId: number | null;

  /**
   * The actor who edited the comment.
   */
  editor: _xGitHubActor | null;
  id: string;

  /**
   * Check if this comment was edited and includes an edit with the creation data
   */
  includesCreatedEdit: boolean;

  /**
   * A list of labels associated with the object.
   */
  labels: IXGitHubLabelConnection | null;

  /**
   * The moment the editor made the last edit
   */
  lastEditedAt: any | null;

  /**
   * `true` if the object is locked
   */
  locked: boolean;

  /**
   * The number identifying this discussion within the repository.
   */
  number: number;

  /**
   * Identifies when the comment was published at.
   */
  publishedAt: any | null;

  /**
   * A list of reactions grouped by content left on the subject.
   */
  reactionGroups: Array<IXGitHubReactionGroup> | null;

  /**
   * A list of Reactions left on the Issue.
   */
  reactions: IXGitHubReactionConnection;

  /**
   * The repository associated with this node.
   */
  repository: IXGitHubRepository;

  /**
   * The path for this discussion.
   */
  resourcePath: any;

  /**
   * The title of this discussion.
   */
  title: string;

  /**
   * Identifies the date and time when the object was last updated.
   */
  updatedAt: any;

  /**
   * Number of upvotes that this subject has received.
   */
  upvoteCount: number;

  /**
   * The URL for this discussion.
   */
  url: any;

  /**
   * A list of edits to this content.
   */
  userContentEdits: IXGitHubUserContentEditConnection | null;

  /**
   * Check if the current viewer can delete this object.
   */
  viewerCanDelete: boolean;

  /**
   * Can user react to this subject
   */
  viewerCanReact: boolean;

  /**
   * Check if the viewer is able to change their subscription status for the repository.
   */
  viewerCanSubscribe: boolean;

  /**
   * Check if the current viewer can update this object.
   */
  viewerCanUpdate: boolean;

  /**
   * Whether or not the current user can add or remove an upvote on this subject.
   */
  viewerCanUpvote: boolean;

  /**
   * Did the viewer author this comment.
   */
  viewerDidAuthor: boolean;

  /**
   * Whether or not the current user has already upvoted this subject.
   */
  viewerHasUpvoted: boolean;

  /**
   * Identifies if the viewer is watching, not watching, or ignoring the subscribable entity.
   */
  viewerSubscription: XGitHubSubscriptionState | null;
}

export interface ICommentsOnXGitHubDiscussionArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface ILabelsOnXGitHubDiscussionArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Ordering options for labels returned from the connection.
   * @default {"direction":"ASC","field":"CREATED_AT"}
   */
  orderBy?: IXGitHubLabelOrder | null;
}

export interface IReactionsOnXGitHubDiscussionArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Allows filtering Reactions by emoji.
   */
  content?: XGitHubReactionContent | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Allows specifying the order in which reactions are returned.
   */
  orderBy?: IXGitHubReactionOrder | null;
}

export interface IUserContentEditsOnXGitHubDiscussionArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

/**
 * A category for discussions in a repository.
 */
export interface IXGitHubDiscussionCategory {
  __typename: '_xGitHubDiscussionCategory';

  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: any;

  /**
   * A description of this category.
   */
  description: string | null;

  /**
   * An emoji representing this category.
   */
  emoji: string;

  /**
   * This category's emoji rendered as HTML.
   */
  emojiHTML: any;
  id: string;

  /**
   * Whether or not discussions in this category support choosing an answer with the markDiscussionCommentAsAnswer mutation.
   */
  isAnswerable: boolean;

  /**
   * The name of this category.
   */
  name: string;

  /**
   * The repository associated with this node.
   */
  repository: IXGitHubRepository;

  /**
   * Identifies the date and time when the object was last updated.
   */
  updatedAt: any;
}

/**
 * The connection type for DiscussionCategory.
 */
export interface IXGitHubDiscussionCategoryConnection {
  __typename: '_xGitHubDiscussionCategoryConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubDiscussionCategoryEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitHubDiscussionCategory | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface IXGitHubDiscussionCategoryEdge {
  __typename: '_xGitHubDiscussionCategoryEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitHubDiscussionCategory | null;
}

/**
 * A comment on a discussion.
 */
export interface IXGitHubDiscussionComment {
  __typename: '_xGitHubDiscussionComment';

  /**
   * The actor who authored the comment.
   */
  author: _xGitHubActor | null;

  /**
   * Author's association with the subject of the comment.
   */
  authorAssociation: XGitHubCommentAuthorAssociation;

  /**
   * The body as Markdown.
   */
  body: string;

  /**
   * The body rendered to HTML.
   */
  bodyHTML: any;

  /**
   * The body rendered to text.
   */
  bodyText: string;

  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: any;

  /**
   * Check if this comment was created via an email reply.
   */
  createdViaEmail: boolean;

  /**
   * Identifies the primary key from the database.
   */
  databaseId: number | null;

  /**
   * The time when this replied-to comment was deleted
   */
  deletedAt: any | null;

  /**
   * The discussion this comment was created in
   */
  discussion: IXGitHubDiscussion | null;

  /**
   * The actor who edited the comment.
   */
  editor: _xGitHubActor | null;
  id: string;

  /**
   * Check if this comment was edited and includes an edit with the creation data
   */
  includesCreatedEdit: boolean;

  /**
   * Has this comment been chosen as the answer of its discussion?
   */
  isAnswer: boolean;

  /**
   * Returns whether or not a comment has been minimized.
   */
  isMinimized: boolean;

  /**
   * The moment the editor made the last edit
   */
  lastEditedAt: any | null;

  /**
   * Returns why the comment was minimized.
   */
  minimizedReason: string | null;

  /**
   * Identifies when the comment was published at.
   */
  publishedAt: any | null;

  /**
   * A list of reactions grouped by content left on the subject.
   */
  reactionGroups: Array<IXGitHubReactionGroup> | null;

  /**
   * A list of Reactions left on the Issue.
   */
  reactions: IXGitHubReactionConnection;

  /**
   * The threaded replies to this comment.
   */
  replies: IXGitHubDiscussionCommentConnection;

  /**
   * The discussion comment this comment is a reply to
   */
  replyTo: IXGitHubDiscussionComment | null;

  /**
   * The path for this discussion comment.
   */
  resourcePath: any;

  /**
   * Identifies the date and time when the object was last updated.
   */
  updatedAt: any;

  /**
   * Number of upvotes that this subject has received.
   */
  upvoteCount: number;

  /**
   * The URL for this discussion comment.
   */
  url: any;

  /**
   * A list of edits to this content.
   */
  userContentEdits: IXGitHubUserContentEditConnection | null;

  /**
   * Check if the current viewer can delete this object.
   */
  viewerCanDelete: boolean;

  /**
   * Can the current user mark this comment as an answer?
   */
  viewerCanMarkAsAnswer: boolean;

  /**
   * Check if the current viewer can minimize this object.
   */
  viewerCanMinimize: boolean;

  /**
   * Can user react to this subject
   */
  viewerCanReact: boolean;

  /**
   * Can the current user unmark this comment as an answer?
   */
  viewerCanUnmarkAsAnswer: boolean;

  /**
   * Check if the current viewer can update this object.
   */
  viewerCanUpdate: boolean;

  /**
   * Whether or not the current user can add or remove an upvote on this subject.
   */
  viewerCanUpvote: boolean;

  /**
   * Reasons why the current viewer can not update this comment.
   */
  viewerCannotUpdateReasons: Array<XGitHubCommentCannotUpdateReason>;

  /**
   * Did the viewer author this comment.
   */
  viewerDidAuthor: boolean;

  /**
   * Whether or not the current user has already upvoted this subject.
   */
  viewerHasUpvoted: boolean;
}

export interface IReactionsOnXGitHubDiscussionCommentArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Allows filtering Reactions by emoji.
   */
  content?: XGitHubReactionContent | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Allows specifying the order in which reactions are returned.
   */
  orderBy?: IXGitHubReactionOrder | null;
}

export interface IRepliesOnXGitHubDiscussionCommentArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IUserContentEditsOnXGitHubDiscussionCommentArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

/**
 * The connection type for DiscussionComment.
 */
export interface IXGitHubDiscussionCommentConnection {
  __typename: '_xGitHubDiscussionCommentConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubDiscussionCommentEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitHubDiscussionComment | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface IXGitHubDiscussionCommentEdge {
  __typename: '_xGitHubDiscussionCommentEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitHubDiscussionComment | null;
}

/**
 * The connection type for Discussion.
 */
export interface IXGitHubDiscussionConnection {
  __typename: '_xGitHubDiscussionConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubDiscussionEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitHubDiscussion | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface IXGitHubDiscussionEdge {
  __typename: '_xGitHubDiscussionEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitHubDiscussion | null;
}

/**
 * Ways in which lists of discussions can be ordered upon return.
 */
export interface IXGitHubDiscussionOrder {
  /**
   * The direction in which to order discussions by the specified field.
   */
  direction: XGitHubOrderDirection;

  /**
   * The field by which to order discussions.
   */
  field: XGitHubDiscussionOrderField;
}

/**
 * Properties by which discussion connections can be ordered.
 */
export const enum XGitHubDiscussionOrderField {
  /**
   * Order discussions by creation time.
   */
  CREATED_AT = 'CREATED_AT',

  /**
   * Order discussions by most recent modification time.
   */
  UPDATED_AT = 'UPDATED_AT'
}

/**
 * Autogenerated input type of DismissPullRequestReview
 */
export interface IXGitHubDismissPullRequestReviewInput {
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;

  /**
   * The contents of the pull request review dismissal message.
   */
  message: string;

  /**
   * The Node ID of the pull request review to modify.
   */
  pullRequestReviewId: string;
}

/**
 * Autogenerated return type of DismissPullRequestReview
 */
export interface IXGitHubDismissPullRequestReviewPayload {
  __typename: '_xGitHubDismissPullRequestReviewPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The dismissed pull request review.
   */
  pullRequestReview: IXGitHubPullRequestReview | null;
}

/**
 * Specifies a review comment to be left with a Pull Request Review.
 */
export interface IXGitHubDraftPullRequestReviewComment {
  /**
   * Body of the comment to leave.
   */
  body: string;

  /**
   * Path to the file being commented on.
   */
  path: string;

  /**
   * Position in the file to leave a comment on.
   */
  position: number;
}

/**
 * Specifies a review comment thread to be left with a Pull Request Review.
 */
export interface IXGitHubDraftPullRequestReviewThread {
  /**
   * Body of the comment to leave.
   */
  body: string;

  /**
   * The line of the blob to which the thread refers. The end of the line range for multi-line comments.
   */
  line: number;

  /**
   * Path to the file being commented on.
   */
  path: string;

  /**
   * The side of the diff on which the line resides. For multi-line comments, this is the side for the end of the line range.
   * @default "RIGHT"
   */
  side?: XGitHubDiffSide | null;

  /**
   * The first line of the range to which the comment refers.
   */
  startLine?: number | null;

  /**
   * The side of the diff on which the start line resides.
   * @default "RIGHT"
   */
  startSide?: XGitHubDiffSide | null;
}

/**
 * Autogenerated input type of EnablePullRequestAutoMerge
 */
export interface IXGitHubEnablePullRequestAutoMergeInput {
  /**
   * The email address to associate with this merge.
   */
  authorEmail?: string | null;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;

  /**
   * Commit body to use for the commit when the PR is mergable; if omitted, a default message will be used.
   */
  commitBody?: string | null;

  /**
   * Commit headline to use for the commit when the PR is mergable; if omitted, a default message will be used.
   */
  commitHeadline?: string | null;

  /**
   * The merge method to use. If omitted, defaults to 'MERGE'
   * @default "MERGE"
   */
  mergeMethod?: XGitHubPullRequestMergeMethod | null;

  /**
   * ID of the pull request to enable auto-merge on.
   */
  pullRequestId: string;
}

/**
 * Autogenerated return type of EnablePullRequestAutoMerge
 */
export interface IXGitHubEnablePullRequestAutoMergePayload {
  __typename: '_xGitHubEnablePullRequestAutoMergePayload';

  /**
   * Identifies the actor who performed the event.
   */
  actor: _xGitHubActor | null;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The pull request auto-merge was enabled on.
   */
  pullRequest: IXGitHubPullRequest | null;
}

/**
 * An account to manage multiple organizations with consolidated policy and billing.
 */
export interface IXGitHubEnterprise {
  __typename: '_xGitHubEnterprise';

  /**
   * A URL pointing to the enterprise's public avatar.
   */
  avatarUrl: any;

  /**
   * Enterprise billing information visible to enterprise billing managers.
   */
  billingInfo: IXGitHubEnterpriseBillingInfo | null;

  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: any;

  /**
   * Identifies the primary key from the database.
   */
  databaseId: number | null;

  /**
   * The description of the enterprise.
   */
  description: string | null;

  /**
   * The description of the enterprise as HTML.
   */
  descriptionHTML: any;
  id: string;

  /**
   * The location of the enterprise.
   */
  location: string | null;

  /**
   * A list of users who are members of this enterprise.
   */
  members: IXGitHubEnterpriseMemberConnection;

  /**
   * The name of the enterprise.
   */
  name: string;

  /**
   * A list of organizations that belong to this enterprise.
   */
  organizations: IXGitHubOrganizationConnection;

  /**
   * Enterprise information only visible to enterprise owners.
   */
  ownerInfo: IXGitHubEnterpriseOwnerInfo | null;

  /**
   * The HTTP path for this enterprise.
   */
  resourcePath: any;

  /**
   * The URL-friendly identifier for the enterprise.
   */
  slug: string;

  /**
   * The HTTP URL for this enterprise.
   */
  url: any;

  /**
   * A list of user accounts on this enterprise.
   */
  userAccounts: IXGitHubEnterpriseUserAccountConnection;

  /**
   * Is the current viewer an admin of this enterprise?
   */
  viewerIsAdmin: boolean;

  /**
   * The URL of the enterprise website.
   */
  websiteUrl: any | null;
}

export interface IAvatarUrlOnXGitHubEnterpriseArguments {
  /**
   * The size of the resulting square image.
   */
  size?: number | null;
}

export interface IMembersOnXGitHubEnterpriseArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Only return members within the selected GitHub Enterprise deployment
   */
  deployment?: XGitHubEnterpriseUserDeployment | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Ordering options for members returned from the connection.
   * @default {"direction":"ASC","field":"LOGIN"}
   */
  orderBy?: IXGitHubEnterpriseMemberOrder | null;

  /**
   * Only return members within the organizations with these logins
   */
  organizationLogins?: Array<string> | null;

  /**
   * The search string to look for.
   */
  query?: string | null;

  /**
   * The role of the user in the enterprise organization or server.
   */
  role?: XGitHubEnterpriseUserAccountMembershipRole | null;
}

export interface IOrganizationsOnXGitHubEnterpriseArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Ordering options for organizations returned from the connection.
   * @default {"direction":"ASC","field":"LOGIN"}
   */
  orderBy?: IXGitHubOrganizationOrder | null;

  /**
   * The search string to look for.
   */
  query?: string | null;
}

export interface IUserAccountsOnXGitHubEnterpriseArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

/**
 * The connection type for User.
 */
export interface IXGitHubEnterpriseAdministratorConnection {
  __typename: '_xGitHubEnterpriseAdministratorConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubEnterpriseAdministratorEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitHubUser | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * A User who is an administrator of an enterprise.
 */
export interface IXGitHubEnterpriseAdministratorEdge {
  __typename: '_xGitHubEnterpriseAdministratorEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitHubUser | null;

  /**
   * The role of the administrator.
   */
  role: XGitHubEnterpriseAdministratorRole;
}

/**
 * An invitation for a user to become an owner or billing manager of an enterprise.
 */
export interface IXGitHubEnterpriseAdministratorInvitation {
  __typename: '_xGitHubEnterpriseAdministratorInvitation';

  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: any;

  /**
   * The email of the person who was invited to the enterprise.
   */
  email: string | null;

  /**
   * The enterprise the invitation is for.
   */
  enterprise: IXGitHubEnterprise;
  id: string;

  /**
   * The user who was invited to the enterprise.
   */
  invitee: IXGitHubUser | null;

  /**
   * The user who created the invitation.
   */
  inviter: IXGitHubUser | null;

  /**
   * The invitee's pending role in the enterprise (owner or billing_manager).
   */
  role: XGitHubEnterpriseAdministratorRole;
}

/**
 * The connection type for EnterpriseAdministratorInvitation.
 */
export interface IXGitHubEnterpriseAdministratorInvitationConnection {
  __typename: '_xGitHubEnterpriseAdministratorInvitationConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubEnterpriseAdministratorInvitationEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitHubEnterpriseAdministratorInvitation | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface IXGitHubEnterpriseAdministratorInvitationEdge {
  __typename: '_xGitHubEnterpriseAdministratorInvitationEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitHubEnterpriseAdministratorInvitation | null;
}

/**
 * Ordering options for enterprise administrator invitation connections
 */
export interface IXGitHubEnterpriseAdministratorInvitationOrder {
  /**
   * The ordering direction.
   */
  direction: XGitHubOrderDirection;

  /**
   * The field to order enterprise administrator invitations by.
   */
  field: XGitHubEnterpriseAdministratorInvitationOrderField;
}

/**
 * Properties by which enterprise administrator invitation connections can be ordered.
 */
export const enum XGitHubEnterpriseAdministratorInvitationOrderField {
  /**
   * Order enterprise administrator member invitations by creation time
   */
  CREATED_AT = 'CREATED_AT'
}

/**
 * The possible administrator roles in an enterprise account.
 */
export const enum XGitHubEnterpriseAdministratorRole {
  /**
   * Represents a billing manager of the enterprise account.
   */
  BILLING_MANAGER = 'BILLING_MANAGER',

  /**
   * Represents an owner of the enterprise account.
   */
  OWNER = 'OWNER'
}

/**
 * Metadata for an audit entry containing enterprise account information.
 */
export type _xGitHubEnterpriseAuditEntryData =
  | IXGitHubMembersCanDeleteReposClearAuditEntry
  | IXGitHubMembersCanDeleteReposDisableAuditEntry
  | IXGitHubMembersCanDeleteReposEnableAuditEntry
  | IXGitHubOrgInviteToBusinessAuditEntry
  | IXGitHubPrivateRepositoryForkingDisableAuditEntry
  | IXGitHubPrivateRepositoryForkingEnableAuditEntry
  | IXGitHubRepositoryVisibilityChangeDisableAuditEntry
  | IXGitHubRepositoryVisibilityChangeEnableAuditEntry;

/**
 * Metadata for an audit entry containing enterprise account information.
 */
export interface IXGitHubEnterpriseAuditEntryData {
  __typename: '_xGitHubEnterpriseAuditEntryData';

  /**
   * The HTTP path for this enterprise.
   */
  enterpriseResourcePath: any | null;

  /**
   * The slug of the enterprise.
   */
  enterpriseSlug: string | null;

  /**
   * The HTTP URL for this enterprise.
   */
  enterpriseUrl: any | null;
}

/**
 * Enterprise billing information visible to enterprise billing managers and owners.
 */
export interface IXGitHubEnterpriseBillingInfo {
  __typename: '_xGitHubEnterpriseBillingInfo';

  /**
   * The number of licenseable users/emails across the enterprise.
   */
  allLicensableUsersCount: number;

  /**
   * The number of data packs used by all organizations owned by the enterprise.
   */
  assetPacks: number;

  /**
   * The number of available seats across all owned organizations based on the unique number of billable users.
   * @deprecated "`availableSeats` will be replaced with `totalAvailableLicenses` to provide more clarity on the value being returned Use EnterpriseBillingInfo.totalAvailableLicenses instead. Removal on 2020-01-01 UTC."
   */
  availableSeats: number;

  /**
   * The bandwidth quota in GB for all organizations owned by the enterprise.
   */
  bandwidthQuota: number;

  /**
   * The bandwidth usage in GB for all organizations owned by the enterprise.
   */
  bandwidthUsage: number;

  /**
   * The bandwidth usage as a percentage of the bandwidth quota.
   */
  bandwidthUsagePercentage: number;

  /**
   * The total seats across all organizations owned by the enterprise.
   * @deprecated "`seats` will be replaced with `totalLicenses` to provide more clarity on the value being returned Use EnterpriseBillingInfo.totalLicenses instead. Removal on 2020-01-01 UTC."
   */
  seats: number;

  /**
   * The storage quota in GB for all organizations owned by the enterprise.
   */
  storageQuota: number;

  /**
   * The storage usage in GB for all organizations owned by the enterprise.
   */
  storageUsage: number;

  /**
   * The storage usage as a percentage of the storage quota.
   */
  storageUsagePercentage: number;

  /**
   * The number of available licenses across all owned organizations based on the unique number of billable users.
   */
  totalAvailableLicenses: number;

  /**
   * The total number of licenses allocated.
   */
  totalLicenses: number;
}

/**
 * The possible values for the enterprise base repository permission setting.
 */
export const enum XGitHubEnterpriseDefaultRepositoryPermissionSettingValue {
  /**
   * Organization members will be able to clone, pull, push, and add new collaborators to all organization repositories.
   */
  ADMIN = 'ADMIN',

  /**
   * Organization members will only be able to clone and pull public repositories.
   */
  NONE = 'NONE',

  /**
   * Organizations in the enterprise choose base repository permissions for their members.
   */
  NO_POLICY = 'NO_POLICY',

  /**
   * Organization members will be able to clone and pull all organization repositories.
   */
  READ = 'READ',

  /**
   * Organization members will be able to clone, pull, and push all organization repositories.
   */
  WRITE = 'WRITE'
}

/**
 * The possible values for an enabled/disabled enterprise setting.
 */
export const enum XGitHubEnterpriseEnabledDisabledSettingValue {
  /**
   * The setting is disabled for organizations in the enterprise.
   */
  DISABLED = 'DISABLED',

  /**
   * The setting is enabled for organizations in the enterprise.
   */
  ENABLED = 'ENABLED',

  /**
   * There is no policy set for organizations in the enterprise.
   */
  NO_POLICY = 'NO_POLICY'
}

/**
 * The possible values for an enabled/no policy enterprise setting.
 */
export const enum XGitHubEnterpriseEnabledSettingValue {
  /**
   * The setting is enabled for organizations in the enterprise.
   */
  ENABLED = 'ENABLED',

  /**
   * There is no policy set for organizations in the enterprise.
   */
  NO_POLICY = 'NO_POLICY'
}

/**
 * An identity provider configured to provision identities for an enterprise.
 */
export interface IXGitHubEnterpriseIdentityProvider {
  __typename: '_xGitHubEnterpriseIdentityProvider';

  /**
   * The digest algorithm used to sign SAML requests for the identity provider.
   */
  digestMethod: XGitHubSamlDigestAlgorithm | null;

  /**
   * The enterprise this identity provider belongs to.
   */
  enterprise: IXGitHubEnterprise | null;

  /**
   * ExternalIdentities provisioned by this identity provider.
   */
  externalIdentities: IXGitHubExternalIdentityConnection;
  id: string;

  /**
   * The x509 certificate used by the identity provider to sign assertions and responses.
   */
  idpCertificate: any | null;

  /**
   * The Issuer Entity ID for the SAML identity provider.
   */
  issuer: string | null;

  /**
   * Recovery codes that can be used by admins to access the enterprise if the identity provider is unavailable.
   */
  recoveryCodes: Array<string> | null;

  /**
   * The signature algorithm used to sign SAML requests for the identity provider.
   */
  signatureMethod: XGitHubSamlSignatureAlgorithm | null;

  /**
   * The URL endpoint for the identity provider's SAML SSO.
   */
  ssoUrl: any | null;
}

export interface IExternalIdentitiesOnXGitHubEnterpriseIdentityProviderArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Filter to external identities with valid org membership only
   */
  membersOnly?: boolean | null;
}

/**
 * An object that is a member of an enterprise.
 */
export type _xGitHubEnterpriseMember =
  | IXGitHubEnterpriseUserAccount
  | IXGitHubUser;

/**
 * The connection type for EnterpriseMember.
 */
export interface IXGitHubEnterpriseMemberConnection {
  __typename: '_xGitHubEnterpriseMemberConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubEnterpriseMemberEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<_xGitHubEnterpriseMember | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * A User who is a member of an enterprise through one or more organizations.
 */
export interface IXGitHubEnterpriseMemberEdge {
  __typename: '_xGitHubEnterpriseMemberEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * Whether the user does not have a license for the enterprise.
   * @deprecated "All members consume a license Removal on 2021-01-01 UTC."
   */
  isUnlicensed: boolean;

  /**
   * The item at the end of the edge.
   */
  node: _xGitHubEnterpriseMember | null;
}

/**
 * Ordering options for enterprise member connections.
 */
export interface IXGitHubEnterpriseMemberOrder {
  /**
   * The ordering direction.
   */
  direction: XGitHubOrderDirection;

  /**
   * The field to order enterprise members by.
   */
  field: XGitHubEnterpriseMemberOrderField;
}

/**
 * Properties by which enterprise member connections can be ordered.
 */
export const enum XGitHubEnterpriseMemberOrderField {
  /**
   * Order enterprise members by creation time
   */
  CREATED_AT = 'CREATED_AT',

  /**
   * Order enterprise members by login
   */
  LOGIN = 'LOGIN'
}

/**
 * The possible values for the enterprise members can create repositories setting.
 */
export const enum XGitHubEnterpriseMembersCanCreateRepositoriesSettingValue {
  /**
   * Members will be able to create public and private repositories.
   */
  ALL = 'ALL',

  /**
   * Members will not be able to create public or private repositories.
   */
  DISABLED = 'DISABLED',

  /**
   * Organization administrators choose whether to allow members to create repositories.
   */
  NO_POLICY = 'NO_POLICY',

  /**
   * Members will be able to create only private repositories.
   */
  PRIVATE = 'PRIVATE',

  /**
   * Members will be able to create only public repositories.
   */
  PUBLIC = 'PUBLIC'
}

/**
 * The possible values for the members can make purchases setting.
 */
export const enum XGitHubEnterpriseMembersCanMakePurchasesSettingValue {
  /**
   * The setting is disabled for organizations in the enterprise.
   */
  DISABLED = 'DISABLED',

  /**
   * The setting is enabled for organizations in the enterprise.
   */
  ENABLED = 'ENABLED'
}

/**
 * The connection type for Organization.
 */
export interface IXGitHubEnterpriseOrganizationMembershipConnection {
  __typename: '_xGitHubEnterpriseOrganizationMembershipConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubEnterpriseOrganizationMembershipEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitHubOrganization | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An enterprise organization that a user is a member of.
 */
export interface IXGitHubEnterpriseOrganizationMembershipEdge {
  __typename: '_xGitHubEnterpriseOrganizationMembershipEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitHubOrganization | null;

  /**
   * The role of the user in the enterprise membership.
   */
  role: XGitHubEnterpriseUserAccountMembershipRole;
}

/**
 * The connection type for User.
 */
export interface IXGitHubEnterpriseOutsideCollaboratorConnection {
  __typename: '_xGitHubEnterpriseOutsideCollaboratorConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubEnterpriseOutsideCollaboratorEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitHubUser | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * A User who is an outside collaborator of an enterprise through one or more organizations.
 */
export interface IXGitHubEnterpriseOutsideCollaboratorEdge {
  __typename: '_xGitHubEnterpriseOutsideCollaboratorEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * Whether the outside collaborator does not have a license for the enterprise.
   * @deprecated "All outside collaborators consume a license Removal on 2021-01-01 UTC."
   */
  isUnlicensed: boolean;

  /**
   * The item at the end of the edge.
   */
  node: IXGitHubUser | null;

  /**
   * The enterprise organization repositories this user is a member of.
   */
  repositories: IXGitHubEnterpriseRepositoryInfoConnection;
}

export interface IRepositoriesOnXGitHubEnterpriseOutsideCollaboratorEdgeArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Ordering options for repositories.
   * @default {"direction":"ASC","field":"NAME"}
   */
  orderBy?: IXGitHubRepositoryOrder | null;
}

/**
 * Enterprise information only visible to enterprise owners.
 */
export interface IXGitHubEnterpriseOwnerInfo {
  __typename: '_xGitHubEnterpriseOwnerInfo';

  /**
   * A list of all of the administrators for this enterprise.
   */
  admins: IXGitHubEnterpriseAdministratorConnection;

  /**
   * A list of users in the enterprise who currently have two-factor authentication disabled.
   */
  affiliatedUsersWithTwoFactorDisabled: IXGitHubUserConnection;

  /**
   * Whether or not affiliated users with two-factor authentication disabled exist in the enterprise.
   */
  affiliatedUsersWithTwoFactorDisabledExist: boolean;

  /**
   * The setting value for whether private repository forking is enabled for repositories in organizations in this enterprise.
   */
  allowPrivateRepositoryForkingSetting: XGitHubEnterpriseEnabledDisabledSettingValue;

  /**
   * A list of enterprise organizations configured with the provided private repository forking setting value.
   */
  allowPrivateRepositoryForkingSettingOrganizations: IXGitHubOrganizationConnection;

  /**
   * The setting value for base repository permissions for organizations in this enterprise.
   */
  defaultRepositoryPermissionSetting: XGitHubEnterpriseDefaultRepositoryPermissionSettingValue;

  /**
   * A list of enterprise organizations configured with the provided base repository permission.
   */
  defaultRepositoryPermissionSettingOrganizations: IXGitHubOrganizationConnection;

  /**
   * A list of domains owned by the enterprise.
   */
  domains: IXGitHubVerifiableDomainConnection;

  /**
   * Enterprise Server installations owned by the enterprise.
   */
  enterpriseServerInstallations: IXGitHubEnterpriseServerInstallationConnection;

  /**
   * The setting value for whether the enterprise has an IP allow list enabled.
   */
  ipAllowListEnabledSetting: XGitHubIpAllowListEnabledSettingValue;

  /**
   * The IP addresses that are allowed to access resources owned by the enterprise.
   */
  ipAllowListEntries: IXGitHubIpAllowListEntryConnection;

  /**
   * The setting value for whether the enterprise has IP allow list configuration for installed GitHub Apps enabled.
   */
  ipAllowListForInstalledAppsEnabledSetting: XGitHubIpAllowListForInstalledAppsEnabledSettingValue;

  /**
   * Whether or not the base repository permission is currently being updated.
   */
  isUpdatingDefaultRepositoryPermission: boolean;

  /**
   * Whether the two-factor authentication requirement is currently being enforced.
   */
  isUpdatingTwoFactorRequirement: boolean;

  /**
   * The setting value for whether organization members with admin permissions on a
   * repository can change repository visibility.
   */
  membersCanChangeRepositoryVisibilitySetting: XGitHubEnterpriseEnabledDisabledSettingValue;

  /**
   * A list of enterprise organizations configured with the provided can change repository visibility setting value.
   */
  membersCanChangeRepositoryVisibilitySettingOrganizations: IXGitHubOrganizationConnection;

  /**
   * The setting value for whether members of organizations in the enterprise can create internal repositories.
   */
  membersCanCreateInternalRepositoriesSetting: boolean | null;

  /**
   * The setting value for whether members of organizations in the enterprise can create private repositories.
   */
  membersCanCreatePrivateRepositoriesSetting: boolean | null;

  /**
   * The setting value for whether members of organizations in the enterprise can create public repositories.
   */
  membersCanCreatePublicRepositoriesSetting: boolean | null;

  /**
   * The setting value for whether members of organizations in the enterprise can create repositories.
   */
  membersCanCreateRepositoriesSetting: XGitHubEnterpriseMembersCanCreateRepositoriesSettingValue | null;

  /**
   * A list of enterprise organizations configured with the provided repository creation setting value.
   */
  membersCanCreateRepositoriesSettingOrganizations: IXGitHubOrganizationConnection;

  /**
   * The setting value for whether members with admin permissions for repositories can delete issues.
   */
  membersCanDeleteIssuesSetting: XGitHubEnterpriseEnabledDisabledSettingValue;

  /**
   * A list of enterprise organizations configured with the provided members can delete issues setting value.
   */
  membersCanDeleteIssuesSettingOrganizations: IXGitHubOrganizationConnection;

  /**
   * The setting value for whether members with admin permissions for repositories can delete or transfer repositories.
   */
  membersCanDeleteRepositoriesSetting: XGitHubEnterpriseEnabledDisabledSettingValue;

  /**
   * A list of enterprise organizations configured with the provided members can delete repositories setting value.
   */
  membersCanDeleteRepositoriesSettingOrganizations: IXGitHubOrganizationConnection;

  /**
   * The setting value for whether members of organizations in the enterprise can invite outside collaborators.
   */
  membersCanInviteCollaboratorsSetting: XGitHubEnterpriseEnabledDisabledSettingValue;

  /**
   * A list of enterprise organizations configured with the provided members can invite collaborators setting value.
   */
  membersCanInviteCollaboratorsSettingOrganizations: IXGitHubOrganizationConnection;

  /**
   * Indicates whether members of this enterprise's organizations can purchase additional services for those organizations.
   */
  membersCanMakePurchasesSetting: XGitHubEnterpriseMembersCanMakePurchasesSettingValue;

  /**
   * The setting value for whether members with admin permissions for repositories can update protected branches.
   */
  membersCanUpdateProtectedBranchesSetting: XGitHubEnterpriseEnabledDisabledSettingValue;

  /**
   * A list of enterprise organizations configured with the provided members can update protected branches setting value.
   */
  membersCanUpdateProtectedBranchesSettingOrganizations: IXGitHubOrganizationConnection;

  /**
   * The setting value for whether members can view dependency insights.
   */
  membersCanViewDependencyInsightsSetting: XGitHubEnterpriseEnabledDisabledSettingValue;

  /**
   * A list of enterprise organizations configured with the provided members can view dependency insights setting value.
   */
  membersCanViewDependencyInsightsSettingOrganizations: IXGitHubOrganizationConnection;

  /**
   * Indicates if email notification delivery for this enterprise is restricted to verified or approved domains.
   */
  notificationDeliveryRestrictionEnabledSetting: XGitHubNotificationRestrictionSettingValue;

  /**
   * The setting value for whether organization projects are enabled for organizations in this enterprise.
   */
  organizationProjectsSetting: XGitHubEnterpriseEnabledDisabledSettingValue;

  /**
   * A list of enterprise organizations configured with the provided organization projects setting value.
   */
  organizationProjectsSettingOrganizations: IXGitHubOrganizationConnection;

  /**
   * A list of outside collaborators across the repositories in the enterprise.
   */
  outsideCollaborators: IXGitHubEnterpriseOutsideCollaboratorConnection;

  /**
   * A list of pending administrator invitations for the enterprise.
   */
  pendingAdminInvitations: IXGitHubEnterpriseAdministratorInvitationConnection;

  /**
   * A list of pending collaborator invitations across the repositories in the enterprise.
   */
  pendingCollaboratorInvitations: IXGitHubRepositoryInvitationConnection;

  /**
   * A list of pending collaborators across the repositories in the enterprise.
   * @deprecated "Repository invitations can now be associated with an email, not only an invitee. Use the `pendingCollaboratorInvitations` field instead. Removal on 2020-10-01 UTC."
   */
  pendingCollaborators: IXGitHubEnterprisePendingCollaboratorConnection;

  /**
   * A list of pending member invitations for organizations in the enterprise.
   */
  pendingMemberInvitations: IXGitHubEnterprisePendingMemberInvitationConnection;

  /**
   * The setting value for whether repository projects are enabled in this enterprise.
   */
  repositoryProjectsSetting: XGitHubEnterpriseEnabledDisabledSettingValue;

  /**
   * A list of enterprise organizations configured with the provided repository projects setting value.
   */
  repositoryProjectsSettingOrganizations: IXGitHubOrganizationConnection;

  /**
   * The SAML Identity Provider for the enterprise.
   */
  samlIdentityProvider: IXGitHubEnterpriseIdentityProvider | null;

  /**
   * A list of enterprise organizations configured with the SAML single sign-on setting value.
   */
  samlIdentityProviderSettingOrganizations: IXGitHubOrganizationConnection;

  /**
   * A list of members with a support entitlement.
   */
  supportEntitlements: IXGitHubEnterpriseMemberConnection;

  /**
   * The setting value for whether team discussions are enabled for organizations in this enterprise.
   */
  teamDiscussionsSetting: XGitHubEnterpriseEnabledDisabledSettingValue;

  /**
   * A list of enterprise organizations configured with the provided team discussions setting value.
   */
  teamDiscussionsSettingOrganizations: IXGitHubOrganizationConnection;

  /**
   * The setting value for whether the enterprise requires two-factor authentication for its organizations and users.
   */
  twoFactorRequiredSetting: XGitHubEnterpriseEnabledSettingValue;

  /**
   * A list of enterprise organizations configured with the two-factor authentication setting value.
   */
  twoFactorRequiredSettingOrganizations: IXGitHubOrganizationConnection;
}

export interface IAdminsOnXGitHubEnterpriseOwnerInfoArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Ordering options for administrators returned from the connection.
   * @default {"direction":"ASC","field":"LOGIN"}
   */
  orderBy?: IXGitHubEnterpriseMemberOrder | null;

  /**
   * The search string to look for.
   */
  query?: string | null;

  /**
   * The role to filter by.
   */
  role?: XGitHubEnterpriseAdministratorRole | null;
}

export interface IAffiliatedUsersWithTwoFactorDisabledOnXGitHubEnterpriseOwnerInfoArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IAllowPrivateRepositoryForkingSettingOrganizationsOnXGitHubEnterpriseOwnerInfoArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Ordering options for organizations with this setting.
   * @default {"direction":"ASC","field":"LOGIN"}
   */
  orderBy?: IXGitHubOrganizationOrder | null;

  /**
   * The setting value to find organizations for.
   */
  value: boolean;
}

export interface IDefaultRepositoryPermissionSettingOrganizationsOnXGitHubEnterpriseOwnerInfoArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Ordering options for organizations with this setting.
   * @default {"direction":"ASC","field":"LOGIN"}
   */
  orderBy?: IXGitHubOrganizationOrder | null;

  /**
   * The permission to find organizations for.
   */
  value: XGitHubDefaultRepositoryPermissionField;
}

export interface IDomainsOnXGitHubEnterpriseOwnerInfoArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Filter whether or not the domain is approved.
   * @default null
   */
  isApproved?: boolean | null;

  /**
   * Filter whether or not the domain is verified.
   * @default null
   */
  isVerified?: boolean | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Ordering options for verifiable domains returned.
   * @default {"direction":"ASC","field":"DOMAIN"}
   */
  orderBy?: IXGitHubVerifiableDomainOrder | null;
}

export interface IEnterpriseServerInstallationsOnXGitHubEnterpriseOwnerInfoArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Whether or not to only return installations discovered via GitHub Connect.
   * @default false
   */
  connectedOnly?: boolean | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Ordering options for Enterprise Server installations returned.
   * @default {"direction":"ASC","field":"HOST_NAME"}
   */
  orderBy?: IXGitHubEnterpriseServerInstallationOrder | null;
}

export interface IIpAllowListEntriesOnXGitHubEnterpriseOwnerInfoArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Ordering options for IP allow list entries returned.
   * @default {"direction":"ASC","field":"ALLOW_LIST_VALUE"}
   */
  orderBy?: IXGitHubIpAllowListEntryOrder | null;
}

export interface IMembersCanChangeRepositoryVisibilitySettingOrganizationsOnXGitHubEnterpriseOwnerInfoArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Ordering options for organizations with this setting.
   * @default {"direction":"ASC","field":"LOGIN"}
   */
  orderBy?: IXGitHubOrganizationOrder | null;

  /**
   * The setting value to find organizations for.
   */
  value: boolean;
}

export interface IMembersCanCreateRepositoriesSettingOrganizationsOnXGitHubEnterpriseOwnerInfoArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Ordering options for organizations with this setting.
   * @default {"direction":"ASC","field":"LOGIN"}
   */
  orderBy?: IXGitHubOrganizationOrder | null;

  /**
   * The setting to find organizations for.
   */
  value: XGitHubOrganizationMembersCanCreateRepositoriesSettingValue;
}

export interface IMembersCanDeleteIssuesSettingOrganizationsOnXGitHubEnterpriseOwnerInfoArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Ordering options for organizations with this setting.
   * @default {"direction":"ASC","field":"LOGIN"}
   */
  orderBy?: IXGitHubOrganizationOrder | null;

  /**
   * The setting value to find organizations for.
   */
  value: boolean;
}

export interface IMembersCanDeleteRepositoriesSettingOrganizationsOnXGitHubEnterpriseOwnerInfoArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Ordering options for organizations with this setting.
   * @default {"direction":"ASC","field":"LOGIN"}
   */
  orderBy?: IXGitHubOrganizationOrder | null;

  /**
   * The setting value to find organizations for.
   */
  value: boolean;
}

export interface IMembersCanInviteCollaboratorsSettingOrganizationsOnXGitHubEnterpriseOwnerInfoArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Ordering options for organizations with this setting.
   * @default {"direction":"ASC","field":"LOGIN"}
   */
  orderBy?: IXGitHubOrganizationOrder | null;

  /**
   * The setting value to find organizations for.
   */
  value: boolean;
}

export interface IMembersCanUpdateProtectedBranchesSettingOrganizationsOnXGitHubEnterpriseOwnerInfoArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Ordering options for organizations with this setting.
   * @default {"direction":"ASC","field":"LOGIN"}
   */
  orderBy?: IXGitHubOrganizationOrder | null;

  /**
   * The setting value to find organizations for.
   */
  value: boolean;
}

export interface IMembersCanViewDependencyInsightsSettingOrganizationsOnXGitHubEnterpriseOwnerInfoArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Ordering options for organizations with this setting.
   * @default {"direction":"ASC","field":"LOGIN"}
   */
  orderBy?: IXGitHubOrganizationOrder | null;

  /**
   * The setting value to find organizations for.
   */
  value: boolean;
}

export interface IOrganizationProjectsSettingOrganizationsOnXGitHubEnterpriseOwnerInfoArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Ordering options for organizations with this setting.
   * @default {"direction":"ASC","field":"LOGIN"}
   */
  orderBy?: IXGitHubOrganizationOrder | null;

  /**
   * The setting value to find organizations for.
   */
  value: boolean;
}

export interface IOutsideCollaboratorsOnXGitHubEnterpriseOwnerInfoArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * The login of one specific outside collaborator.
   */
  login?: string | null;

  /**
   * Ordering options for outside collaborators returned from the connection.
   * @default {"direction":"ASC","field":"LOGIN"}
   */
  orderBy?: IXGitHubEnterpriseMemberOrder | null;

  /**
   * The search string to look for.
   */
  query?: string | null;

  /**
   * Only return outside collaborators on repositories with this visibility.
   */
  visibility?: XGitHubRepositoryVisibility | null;
}

export interface IPendingAdminInvitationsOnXGitHubEnterpriseOwnerInfoArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Ordering options for pending enterprise administrator invitations returned from the connection.
   * @default {"direction":"DESC","field":"CREATED_AT"}
   */
  orderBy?: IXGitHubEnterpriseAdministratorInvitationOrder | null;

  /**
   * The search string to look for.
   */
  query?: string | null;

  /**
   * The role to filter by.
   */
  role?: XGitHubEnterpriseAdministratorRole | null;
}

export interface IPendingCollaboratorInvitationsOnXGitHubEnterpriseOwnerInfoArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Ordering options for pending repository collaborator invitations returned from the connection.
   * @default {"direction":"DESC","field":"CREATED_AT"}
   */
  orderBy?: IXGitHubRepositoryInvitationOrder | null;

  /**
   * The search string to look for.
   */
  query?: string | null;
}

export interface IPendingCollaboratorsOnXGitHubEnterpriseOwnerInfoArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Ordering options for pending repository collaborator invitations returned from the connection.
   * @default {"direction":"DESC","field":"CREATED_AT"}
   */
  orderBy?: IXGitHubRepositoryInvitationOrder | null;

  /**
   * The search string to look for.
   */
  query?: string | null;
}

export interface IPendingMemberInvitationsOnXGitHubEnterpriseOwnerInfoArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * The search string to look for.
   */
  query?: string | null;
}

export interface IRepositoryProjectsSettingOrganizationsOnXGitHubEnterpriseOwnerInfoArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Ordering options for organizations with this setting.
   * @default {"direction":"ASC","field":"LOGIN"}
   */
  orderBy?: IXGitHubOrganizationOrder | null;

  /**
   * The setting value to find organizations for.
   */
  value: boolean;
}

export interface ISamlIdentityProviderSettingOrganizationsOnXGitHubEnterpriseOwnerInfoArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Ordering options for organizations with this setting.
   * @default {"direction":"ASC","field":"LOGIN"}
   */
  orderBy?: IXGitHubOrganizationOrder | null;

  /**
   * The setting value to find organizations for.
   */
  value: XGitHubIdentityProviderConfigurationState;
}

export interface ISupportEntitlementsOnXGitHubEnterpriseOwnerInfoArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Ordering options for support entitlement users returned from the connection.
   * @default {"direction":"ASC","field":"LOGIN"}
   */
  orderBy?: IXGitHubEnterpriseMemberOrder | null;
}

export interface ITeamDiscussionsSettingOrganizationsOnXGitHubEnterpriseOwnerInfoArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Ordering options for organizations with this setting.
   * @default {"direction":"ASC","field":"LOGIN"}
   */
  orderBy?: IXGitHubOrganizationOrder | null;

  /**
   * The setting value to find organizations for.
   */
  value: boolean;
}

export interface ITwoFactorRequiredSettingOrganizationsOnXGitHubEnterpriseOwnerInfoArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Ordering options for organizations with this setting.
   * @default {"direction":"ASC","field":"LOGIN"}
   */
  orderBy?: IXGitHubOrganizationOrder | null;

  /**
   * The setting value to find organizations for.
   */
  value: boolean;
}

/**
 * The connection type for User.
 */
export interface IXGitHubEnterprisePendingCollaboratorConnection {
  __typename: '_xGitHubEnterprisePendingCollaboratorConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubEnterprisePendingCollaboratorEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitHubUser | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * A user with an invitation to be a collaborator on a repository owned by an organization in an enterprise.
 */
export interface IXGitHubEnterprisePendingCollaboratorEdge {
  __typename: '_xGitHubEnterprisePendingCollaboratorEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * Whether the invited collaborator does not have a license for the enterprise.
   * @deprecated "All pending collaborators consume a license Removal on 2021-01-01 UTC."
   */
  isUnlicensed: boolean;

  /**
   * The item at the end of the edge.
   */
  node: IXGitHubUser | null;

  /**
   * The enterprise organization repositories this user is a member of.
   */
  repositories: IXGitHubEnterpriseRepositoryInfoConnection;
}

export interface IRepositoriesOnXGitHubEnterprisePendingCollaboratorEdgeArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Ordering options for repositories.
   * @default {"direction":"ASC","field":"NAME"}
   */
  orderBy?: IXGitHubRepositoryOrder | null;
}

/**
 * The connection type for OrganizationInvitation.
 */
export interface IXGitHubEnterprisePendingMemberInvitationConnection {
  __typename: '_xGitHubEnterprisePendingMemberInvitationConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubEnterprisePendingMemberInvitationEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitHubOrganizationInvitation | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;

  /**
   * Identifies the total count of unique users in the connection.
   */
  totalUniqueUserCount: number;
}

/**
 * An invitation to be a member in an enterprise organization.
 */
export interface IXGitHubEnterprisePendingMemberInvitationEdge {
  __typename: '_xGitHubEnterprisePendingMemberInvitationEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * Whether the invitation has a license for the enterprise.
   * @deprecated "All pending members consume a license Removal on 2020-07-01 UTC."
   */
  isUnlicensed: boolean;

  /**
   * The item at the end of the edge.
   */
  node: IXGitHubOrganizationInvitation | null;
}

/**
 * A subset of repository information queryable from an enterprise.
 */
export interface IXGitHubEnterpriseRepositoryInfo {
  __typename: '_xGitHubEnterpriseRepositoryInfo';
  id: string;

  /**
   * Identifies if the repository is private or internal.
   */
  isPrivate: boolean;

  /**
   * The repository's name.
   */
  name: string;

  /**
   * The repository's name with owner.
   */
  nameWithOwner: string;
}

/**
 * The connection type for EnterpriseRepositoryInfo.
 */
export interface IXGitHubEnterpriseRepositoryInfoConnection {
  __typename: '_xGitHubEnterpriseRepositoryInfoConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubEnterpriseRepositoryInfoEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitHubEnterpriseRepositoryInfo | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface IXGitHubEnterpriseRepositoryInfoEdge {
  __typename: '_xGitHubEnterpriseRepositoryInfoEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitHubEnterpriseRepositoryInfo | null;
}

/**
 * An Enterprise Server installation.
 */
export interface IXGitHubEnterpriseServerInstallation {
  __typename: '_xGitHubEnterpriseServerInstallation';

  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: any;

  /**
   * The customer name to which the Enterprise Server installation belongs.
   */
  customerName: string;

  /**
   * The host name of the Enterprise Server installation.
   */
  hostName: string;
  id: string;

  /**
   * Whether or not the installation is connected to an Enterprise Server installation via GitHub Connect.
   */
  isConnected: boolean;

  /**
   * Identifies the date and time when the object was last updated.
   */
  updatedAt: any;

  /**
   * User accounts on this Enterprise Server installation.
   */
  userAccounts: IXGitHubEnterpriseServerUserAccountConnection;

  /**
   * User accounts uploads for the Enterprise Server installation.
   */
  userAccountsUploads: IXGitHubEnterpriseServerUserAccountsUploadConnection;
}

export interface IUserAccountsOnXGitHubEnterpriseServerInstallationArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Ordering options for Enterprise Server user accounts returned from the connection.
   * @default {"direction":"ASC","field":"LOGIN"}
   */
  orderBy?: IXGitHubEnterpriseServerUserAccountOrder | null;
}

export interface IUserAccountsUploadsOnXGitHubEnterpriseServerInstallationArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Ordering options for Enterprise Server user accounts uploads returned from the connection.
   * @default {"direction":"DESC","field":"CREATED_AT"}
   */
  orderBy?: IXGitHubEnterpriseServerUserAccountsUploadOrder | null;
}

/**
 * The connection type for EnterpriseServerInstallation.
 */
export interface IXGitHubEnterpriseServerInstallationConnection {
  __typename: '_xGitHubEnterpriseServerInstallationConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubEnterpriseServerInstallationEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitHubEnterpriseServerInstallation | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface IXGitHubEnterpriseServerInstallationEdge {
  __typename: '_xGitHubEnterpriseServerInstallationEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitHubEnterpriseServerInstallation | null;
}

/**
 * Ordering options for Enterprise Server installation connections.
 */
export interface IXGitHubEnterpriseServerInstallationOrder {
  /**
   * The ordering direction.
   */
  direction: XGitHubOrderDirection;

  /**
   * The field to order Enterprise Server installations by.
   */
  field: XGitHubEnterpriseServerInstallationOrderField;
}

/**
 * Properties by which Enterprise Server installation connections can be ordered.
 */
export const enum XGitHubEnterpriseServerInstallationOrderField {
  /**
   * Order Enterprise Server installations by creation time
   */
  CREATED_AT = 'CREATED_AT',

  /**
   * Order Enterprise Server installations by customer name
   */
  CUSTOMER_NAME = 'CUSTOMER_NAME',

  /**
   * Order Enterprise Server installations by host name
   */
  HOST_NAME = 'HOST_NAME'
}

/**
 * A user account on an Enterprise Server installation.
 */
export interface IXGitHubEnterpriseServerUserAccount {
  __typename: '_xGitHubEnterpriseServerUserAccount';

  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: any;

  /**
   * User emails belonging to this user account.
   */
  emails: IXGitHubEnterpriseServerUserAccountEmailConnection;

  /**
   * The Enterprise Server installation on which this user account exists.
   */
  enterpriseServerInstallation: IXGitHubEnterpriseServerInstallation;
  id: string;

  /**
   * Whether the user account is a site administrator on the Enterprise Server installation.
   */
  isSiteAdmin: boolean;

  /**
   * The login of the user account on the Enterprise Server installation.
   */
  login: string;

  /**
   * The profile name of the user account on the Enterprise Server installation.
   */
  profileName: string | null;

  /**
   * The date and time when the user account was created on the Enterprise Server installation.
   */
  remoteCreatedAt: any;

  /**
   * The ID of the user account on the Enterprise Server installation.
   */
  remoteUserId: number;

  /**
   * Identifies the date and time when the object was last updated.
   */
  updatedAt: any;
}

export interface IEmailsOnXGitHubEnterpriseServerUserAccountArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Ordering options for Enterprise Server user account emails returned from the connection.
   * @default {"direction":"ASC","field":"EMAIL"}
   */
  orderBy?: IXGitHubEnterpriseServerUserAccountEmailOrder | null;
}

/**
 * The connection type for EnterpriseServerUserAccount.
 */
export interface IXGitHubEnterpriseServerUserAccountConnection {
  __typename: '_xGitHubEnterpriseServerUserAccountConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubEnterpriseServerUserAccountEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitHubEnterpriseServerUserAccount | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface IXGitHubEnterpriseServerUserAccountEdge {
  __typename: '_xGitHubEnterpriseServerUserAccountEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitHubEnterpriseServerUserAccount | null;
}

/**
 * An email belonging to a user account on an Enterprise Server installation.
 */
export interface IXGitHubEnterpriseServerUserAccountEmail {
  __typename: '_xGitHubEnterpriseServerUserAccountEmail';

  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: any;

  /**
   * The email address.
   */
  email: string;
  id: string;

  /**
   * Indicates whether this is the primary email of the associated user account.
   */
  isPrimary: boolean;

  /**
   * Identifies the date and time when the object was last updated.
   */
  updatedAt: any;

  /**
   * The user account to which the email belongs.
   */
  userAccount: IXGitHubEnterpriseServerUserAccount;
}

/**
 * The connection type for EnterpriseServerUserAccountEmail.
 */
export interface IXGitHubEnterpriseServerUserAccountEmailConnection {
  __typename: '_xGitHubEnterpriseServerUserAccountEmailConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubEnterpriseServerUserAccountEmailEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitHubEnterpriseServerUserAccountEmail | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface IXGitHubEnterpriseServerUserAccountEmailEdge {
  __typename: '_xGitHubEnterpriseServerUserAccountEmailEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitHubEnterpriseServerUserAccountEmail | null;
}

/**
 * Ordering options for Enterprise Server user account email connections.
 */
export interface IXGitHubEnterpriseServerUserAccountEmailOrder {
  /**
   * The ordering direction.
   */
  direction: XGitHubOrderDirection;

  /**
   * The field to order emails by.
   */
  field: XGitHubEnterpriseServerUserAccountEmailOrderField;
}

/**
 * Properties by which Enterprise Server user account email connections can be ordered.
 */
export const enum XGitHubEnterpriseServerUserAccountEmailOrderField {
  /**
   * Order emails by email
   */
  EMAIL = 'EMAIL'
}

/**
 * Ordering options for Enterprise Server user account connections.
 */
export interface IXGitHubEnterpriseServerUserAccountOrder {
  /**
   * The ordering direction.
   */
  direction: XGitHubOrderDirection;

  /**
   * The field to order user accounts by.
   */
  field: XGitHubEnterpriseServerUserAccountOrderField;
}

/**
 * Properties by which Enterprise Server user account connections can be ordered.
 */
export const enum XGitHubEnterpriseServerUserAccountOrderField {
  /**
   * Order user accounts by login
   */
  LOGIN = 'LOGIN',

  /**
   * Order user accounts by creation time on the Enterprise Server installation
   */
  REMOTE_CREATED_AT = 'REMOTE_CREATED_AT'
}

/**
 * A user accounts upload from an Enterprise Server installation.
 */
export interface IXGitHubEnterpriseServerUserAccountsUpload {
  __typename: '_xGitHubEnterpriseServerUserAccountsUpload';

  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: any;

  /**
   * The enterprise to which this upload belongs.
   */
  enterprise: IXGitHubEnterprise;

  /**
   * The Enterprise Server installation for which this upload was generated.
   */
  enterpriseServerInstallation: IXGitHubEnterpriseServerInstallation;
  id: string;

  /**
   * The name of the file uploaded.
   */
  name: string;

  /**
   * The synchronization state of the upload
   */
  syncState: XGitHubEnterpriseServerUserAccountsUploadSyncState;

  /**
   * Identifies the date and time when the object was last updated.
   */
  updatedAt: any;
}

/**
 * The connection type for EnterpriseServerUserAccountsUpload.
 */
export interface IXGitHubEnterpriseServerUserAccountsUploadConnection {
  __typename: '_xGitHubEnterpriseServerUserAccountsUploadConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubEnterpriseServerUserAccountsUploadEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitHubEnterpriseServerUserAccountsUpload | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface IXGitHubEnterpriseServerUserAccountsUploadEdge {
  __typename: '_xGitHubEnterpriseServerUserAccountsUploadEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitHubEnterpriseServerUserAccountsUpload | null;
}

/**
 * Ordering options for Enterprise Server user accounts upload connections.
 */
export interface IXGitHubEnterpriseServerUserAccountsUploadOrder {
  /**
   * The ordering direction.
   */
  direction: XGitHubOrderDirection;

  /**
   * The field to order user accounts uploads by.
   */
  field: XGitHubEnterpriseServerUserAccountsUploadOrderField;
}

/**
 * Properties by which Enterprise Server user accounts upload connections can be ordered.
 */
export const enum XGitHubEnterpriseServerUserAccountsUploadOrderField {
  /**
   * Order user accounts uploads by creation time
   */
  CREATED_AT = 'CREATED_AT'
}

/**
 * Synchronization state of the Enterprise Server user accounts upload
 */
export const enum XGitHubEnterpriseServerUserAccountsUploadSyncState {
  /**
   * The synchronization of the upload failed.
   */
  FAILURE = 'FAILURE',

  /**
   * The synchronization of the upload is pending.
   */
  PENDING = 'PENDING',

  /**
   * The synchronization of the upload succeeded.
   */
  SUCCESS = 'SUCCESS'
}

/**
 * An account for a user who is an admin of an enterprise or a member of an enterprise through one or more organizations.
 */
export interface IXGitHubEnterpriseUserAccount {
  __typename: '_xGitHubEnterpriseUserAccount';

  /**
   * A URL pointing to the enterprise user account's public avatar.
   */
  avatarUrl: any;

  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: any;

  /**
   * The enterprise in which this user account exists.
   */
  enterprise: IXGitHubEnterprise;
  id: string;

  /**
   * An identifier for the enterprise user account, a login or email address
   */
  login: string;

  /**
   * The name of the enterprise user account
   */
  name: string | null;

  /**
   * A list of enterprise organizations this user is a member of.
   */
  organizations: IXGitHubEnterpriseOrganizationMembershipConnection;

  /**
   * The HTTP path for this user.
   */
  resourcePath: any;

  /**
   * Identifies the date and time when the object was last updated.
   */
  updatedAt: any;

  /**
   * The HTTP URL for this user.
   */
  url: any;

  /**
   * The user within the enterprise.
   */
  user: IXGitHubUser | null;
}

export interface IAvatarUrlOnXGitHubEnterpriseUserAccountArguments {
  /**
   * The size of the resulting square image.
   */
  size?: number | null;
}

export interface IOrganizationsOnXGitHubEnterpriseUserAccountArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Ordering options for organizations returned from the connection.
   * @default {"direction":"ASC","field":"LOGIN"}
   */
  orderBy?: IXGitHubOrganizationOrder | null;

  /**
   * The search string to look for.
   */
  query?: string | null;

  /**
   * The role of the user in the enterprise organization.
   */
  role?: XGitHubEnterpriseUserAccountMembershipRole | null;
}

/**
 * The connection type for EnterpriseUserAccount.
 */
export interface IXGitHubEnterpriseUserAccountConnection {
  __typename: '_xGitHubEnterpriseUserAccountConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubEnterpriseUserAccountEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitHubEnterpriseUserAccount | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface IXGitHubEnterpriseUserAccountEdge {
  __typename: '_xGitHubEnterpriseUserAccountEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitHubEnterpriseUserAccount | null;
}

/**
 * The possible roles for enterprise membership.
 */
export const enum XGitHubEnterpriseUserAccountMembershipRole {
  /**
   * The user is a member of the enterprise membership.
   */
  MEMBER = 'MEMBER',

  /**
   * The user is an owner of the enterprise membership.
   */
  OWNER = 'OWNER'
}

/**
 * The possible GitHub Enterprise deployments where this user can exist.
 */
export const enum XGitHubEnterpriseUserDeployment {
  /**
   * The user is part of a GitHub Enterprise Cloud deployment.
   */
  CLOUD = 'CLOUD',

  /**
   * The user is part of a GitHub Enterprise Server deployment.
   */
  SERVER = 'SERVER'
}

/**
 * An environment.
 */
export interface IXGitHubEnvironment {
  __typename: '_xGitHubEnvironment';

  /**
   * Identifies the primary key from the database.
   */
  databaseId: number | null;
  id: string;

  /**
   * The name of the environment
   */
  name: string;

  /**
   * The protection rules defined for this environment
   */
  protectionRules: IXGitHubDeploymentProtectionRuleConnection;
}

export interface IProtectionRulesOnXGitHubEnvironmentArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

/**
 * The connection type for Environment.
 */
export interface IXGitHubEnvironmentConnection {
  __typename: '_xGitHubEnvironmentConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubEnvironmentEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitHubEnvironment | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface IXGitHubEnvironmentEdge {
  __typename: '_xGitHubEnvironmentEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitHubEnvironment | null;
}

/**
 * An external identity provisioned by SAML SSO or SCIM.
 */
export interface IXGitHubExternalIdentity {
  __typename: '_xGitHubExternalIdentity';

  /**
   * The GUID for this identity
   */
  guid: string;
  id: string;

  /**
   * Organization invitation for this SCIM-provisioned external identity
   */
  organizationInvitation: IXGitHubOrganizationInvitation | null;

  /**
   * SAML Identity attributes
   */
  samlIdentity: IXGitHubExternalIdentitySamlAttributes | null;

  /**
   * SCIM Identity attributes
   */
  scimIdentity: IXGitHubExternalIdentityScimAttributes | null;

  /**
   * User linked to this external identity. Will be NULL if this identity has not been claimed by an organization member.
   */
  user: IXGitHubUser | null;
}

/**
 * The connection type for ExternalIdentity.
 */
export interface IXGitHubExternalIdentityConnection {
  __typename: '_xGitHubExternalIdentityConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubExternalIdentityEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitHubExternalIdentity | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface IXGitHubExternalIdentityEdge {
  __typename: '_xGitHubExternalIdentityEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitHubExternalIdentity | null;
}

/**
 * SAML attributes for the External Identity
 */
export interface IXGitHubExternalIdentitySamlAttributes {
  __typename: '_xGitHubExternalIdentitySamlAttributes';

  /**
   * The emails associated with the SAML identity
   */
  emails: Array<IXGitHubUserEmailMetadata> | null;

  /**
   * Family name of the SAML identity
   */
  familyName: string | null;

  /**
   * Given name of the SAML identity
   */
  givenName: string | null;

  /**
   * The groups linked to this identity in IDP
   */
  groups: Array<string> | null;

  /**
   * The NameID of the SAML identity
   */
  nameId: string | null;

  /**
   * The userName of the SAML identity
   */
  username: string | null;
}

/**
 * SCIM attributes for the External Identity
 */
export interface IXGitHubExternalIdentityScimAttributes {
  __typename: '_xGitHubExternalIdentityScimAttributes';

  /**
   * The emails associated with the SCIM identity
   */
  emails: Array<IXGitHubUserEmailMetadata> | null;

  /**
   * Family name of the SCIM identity
   */
  familyName: string | null;

  /**
   * Given name of the SCIM identity
   */
  givenName: string | null;

  /**
   * The groups linked to this identity in IDP
   */
  groups: Array<string> | null;

  /**
   * The userName of the SCIM identity
   */
  username: string | null;
}

/**
 * The possible viewed states of a file .
 */
export const enum XGitHubFileViewedState {
  /**
   * The file has new changes since last viewed.
   */
  DISMISSED = 'DISMISSED',

  /**
   * The file has not been marked as viewed.
   */
  UNVIEWED = 'UNVIEWED',

  /**
   * The file has been marked as viewed.
   */
  VIEWED = 'VIEWED'
}

/**
 * Autogenerated input type of FollowUser
 */
export interface IXGitHubFollowUserInput {
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;

  /**
   * ID of the user to follow.
   */
  userId: string;
}

/**
 * Autogenerated return type of FollowUser
 */
export interface IXGitHubFollowUserPayload {
  __typename: '_xGitHubFollowUserPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The user that was followed.
   */
  user: IXGitHubUser | null;
}

/**
 * The connection type for User.
 */
export interface IXGitHubFollowerConnection {
  __typename: '_xGitHubFollowerConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubUserEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitHubUser | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * The connection type for User.
 */
export interface IXGitHubFollowingConnection {
  __typename: '_xGitHubFollowingConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubUserEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitHubUser | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * A funding platform link for a repository.
 */
export interface IXGitHubFundingLink {
  __typename: '_xGitHubFundingLink';

  /**
   * The funding platform this link is for.
   */
  platform: XGitHubFundingPlatform;

  /**
   * The configured URL for this funding link.
   */
  url: any;
}

/**
 * The possible funding platforms for repository funding links.
 */
export const enum XGitHubFundingPlatform {
  /**
   * Community Bridge funding platform.
   */
  COMMUNITY_BRIDGE = 'COMMUNITY_BRIDGE',

  /**
   * Custom funding platform.
   */
  CUSTOM = 'CUSTOM',

  /**
   * GitHub funding platform.
   */
  GITHUB = 'GITHUB',

  /**
   * IssueHunt funding platform.
   */
  ISSUEHUNT = 'ISSUEHUNT',

  /**
   * Ko-fi funding platform.
   */
  KO_FI = 'KO_FI',

  /**
   * Liberapay funding platform.
   */
  LIBERAPAY = 'LIBERAPAY',

  /**
   * Open Collective funding platform.
   */
  OPEN_COLLECTIVE = 'OPEN_COLLECTIVE',

  /**
   * Otechie funding platform.
   */
  OTECHIE = 'OTECHIE',

  /**
   * Patreon funding platform.
   */
  PATREON = 'PATREON',

  /**
   * Tidelift funding platform.
   */
  TIDELIFT = 'TIDELIFT'
}

/**
 * A generic hovercard context with a message and icon
 */
export interface IXGitHubGenericHovercardContext {
  __typename: '_xGitHubGenericHovercardContext';

  /**
   * A string describing this context
   */
  message: string;

  /**
   * An octicon to accompany this context
   */
  octicon: string;
}

/**
 * A Gist.
 */
export interface IXGitHubGist {
  __typename: '_xGitHubGist';

  /**
   * A list of comments associated with the gist
   */
  comments: IXGitHubGistCommentConnection;

  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: any;

  /**
   * The gist description.
   */
  description: string | null;

  /**
   * The files in this gist.
   */
  files: Array<IXGitHubGistFile | null> | null;

  /**
   * A list of forks associated with the gist
   */
  forks: IXGitHubGistConnection;
  id: string;

  /**
   * Identifies if the gist is a fork.
   */
  isFork: boolean;

  /**
   * Whether the gist is public or not.
   */
  isPublic: boolean;

  /**
   * The gist name.
   */
  name: string;

  /**
   * The gist owner.
   */
  owner: _xGitHubRepositoryOwner | null;

  /**
   * Identifies when the gist was last pushed to.
   */
  pushedAt: any | null;

  /**
   * The HTML path to this resource.
   */
  resourcePath: any;

  /**
   * Returns a count of how many stargazers there are on this object
   */
  stargazerCount: number;

  /**
   * A list of users who have starred this starrable.
   */
  stargazers: IXGitHubStargazerConnection;

  /**
   * Identifies the date and time when the object was last updated.
   */
  updatedAt: any;

  /**
   * The HTTP URL for this Gist.
   */
  url: any;

  /**
   * Returns a boolean indicating whether the viewing user has starred this starrable.
   */
  viewerHasStarred: boolean;
}

export interface ICommentsOnXGitHubGistArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IFilesOnXGitHubGistArguments {
  /**
   * The maximum number of files to return.
   * @default 10
   */
  limit?: number | null;

  /**
   * The oid of the files to return
   */
  oid?: any | null;
}

export interface IForksOnXGitHubGistArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Ordering options for gists returned from the connection
   */
  orderBy?: IXGitHubGistOrder | null;
}

export interface IStargazersOnXGitHubGistArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Order for connection
   */
  orderBy?: IXGitHubStarOrder | null;
}

/**
 * Represents a comment on an Gist.
 */
export interface IXGitHubGistComment {
  __typename: '_xGitHubGistComment';

  /**
   * The actor who authored the comment.
   */
  author: _xGitHubActor | null;

  /**
   * Author's association with the gist.
   */
  authorAssociation: XGitHubCommentAuthorAssociation;

  /**
   * Identifies the comment body.
   */
  body: string;

  /**
   * The body rendered to HTML.
   */
  bodyHTML: any;

  /**
   * The body rendered to text.
   */
  bodyText: string;

  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: any;

  /**
   * Check if this comment was created via an email reply.
   */
  createdViaEmail: boolean;

  /**
   * Identifies the primary key from the database.
   */
  databaseId: number | null;

  /**
   * The actor who edited the comment.
   */
  editor: _xGitHubActor | null;

  /**
   * The associated gist.
   */
  gist: IXGitHubGist;
  id: string;

  /**
   * Check if this comment was edited and includes an edit with the creation data
   */
  includesCreatedEdit: boolean;

  /**
   * Returns whether or not a comment has been minimized.
   */
  isMinimized: boolean;

  /**
   * The moment the editor made the last edit
   */
  lastEditedAt: any | null;

  /**
   * Returns why the comment was minimized.
   */
  minimizedReason: string | null;

  /**
   * Identifies when the comment was published at.
   */
  publishedAt: any | null;

  /**
   * Identifies the date and time when the object was last updated.
   */
  updatedAt: any;

  /**
   * A list of edits to this content.
   */
  userContentEdits: IXGitHubUserContentEditConnection | null;

  /**
   * Check if the current viewer can delete this object.
   */
  viewerCanDelete: boolean;

  /**
   * Check if the current viewer can minimize this object.
   */
  viewerCanMinimize: boolean;

  /**
   * Check if the current viewer can update this object.
   */
  viewerCanUpdate: boolean;

  /**
   * Reasons why the current viewer can not update this comment.
   */
  viewerCannotUpdateReasons: Array<XGitHubCommentCannotUpdateReason>;

  /**
   * Did the viewer author this comment.
   */
  viewerDidAuthor: boolean;
}

export interface IUserContentEditsOnXGitHubGistCommentArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

/**
 * The connection type for GistComment.
 */
export interface IXGitHubGistCommentConnection {
  __typename: '_xGitHubGistCommentConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubGistCommentEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitHubGistComment | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface IXGitHubGistCommentEdge {
  __typename: '_xGitHubGistCommentEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitHubGistComment | null;
}

/**
 * The connection type for Gist.
 */
export interface IXGitHubGistConnection {
  __typename: '_xGitHubGistConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubGistEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitHubGist | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface IXGitHubGistEdge {
  __typename: '_xGitHubGistEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitHubGist | null;
}

/**
 * A file in a gist.
 */
export interface IXGitHubGistFile {
  __typename: '_xGitHubGistFile';

  /**
   * The file name encoded to remove characters that are invalid in URL paths.
   */
  encodedName: string | null;

  /**
   * The gist file encoding.
   */
  encoding: string | null;

  /**
   * The file extension from the file name.
   */
  extension: string | null;

  /**
   * Indicates if this file is an image.
   */
  isImage: boolean;

  /**
   * Whether the file's contents were truncated.
   */
  isTruncated: boolean;

  /**
   * The programming language this file is written in.
   */
  language: IXGitHubLanguage | null;

  /**
   * The gist file name.
   */
  name: string | null;

  /**
   * The gist file size in bytes.
   */
  size: number | null;

  /**
   * UTF8 text data or null if the file is binary
   */
  text: string | null;
}

export interface ITextOnXGitHubGistFileArguments {
  /**
   * Optionally truncate the returned file to this length.
   */
  truncate?: number | null;
}

/**
 * Ordering options for gist connections
 */
export interface IXGitHubGistOrder {
  /**
   * The ordering direction.
   */
  direction: XGitHubOrderDirection;

  /**
   * The field to order repositories by.
   */
  field: XGitHubGistOrderField;
}

/**
 * Properties by which gist connections can be ordered.
 */
export const enum XGitHubGistOrderField {
  /**
   * Order gists by creation time
   */
  CREATED_AT = 'CREATED_AT',

  /**
   * Order gists by push time
   */
  PUSHED_AT = 'PUSHED_AT',

  /**
   * Order gists by update time
   */
  UPDATED_AT = 'UPDATED_AT'
}

/**
 * The privacy of a Gist
 */
export const enum XGitHubGistPrivacy {
  /**
   * Gists that are public and secret
   */
  ALL = 'ALL',

  /**
   * Public
   */
  PUBLIC = 'PUBLIC',

  /**
   * Secret
   */
  SECRET = 'SECRET'
}

/**
 * Represents an actor in a Git commit (ie. an author or committer).
 */
export interface IXGitHubGitActor {
  __typename: '_xGitHubGitActor';

  /**
   * A URL pointing to the author's public avatar.
   */
  avatarUrl: any;

  /**
   * The timestamp of the Git action (authoring or committing).
   */
  date: any | null;

  /**
   * The email in the Git commit.
   */
  email: string | null;

  /**
   * The name in the Git commit.
   */
  name: string | null;

  /**
   * The GitHub user corresponding to the email field. Null if no such user exists.
   */
  user: IXGitHubUser | null;
}

export interface IAvatarUrlOnXGitHubGitActorArguments {
  /**
   * The size of the resulting square image.
   */
  size?: number | null;
}

/**
 * The connection type for GitActor.
 */
export interface IXGitHubGitActorConnection {
  __typename: '_xGitHubGitActorConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubGitActorEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitHubGitActor | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface IXGitHubGitActorEdge {
  __typename: '_xGitHubGitActorEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitHubGitActor | null;
}

/**
 * Represents information about the GitHub instance.
 */
export interface IXGitHubGitHubMetadata {
  __typename: '_xGitHubGitHubMetadata';

  /**
   * Returns a String that's a SHA of `github-services`
   */
  gitHubServicesSha: any;

  /**
   * IP addresses that users connect to for git operations
   */
  gitIpAddresses: Array<string> | null;

  /**
   * IP addresses that service hooks are sent from
   */
  hookIpAddresses: Array<string> | null;

  /**
   * IP addresses that the importer connects from
   */
  importerIpAddresses: Array<string> | null;

  /**
   * Whether or not users are verified
   */
  isPasswordAuthenticationVerifiable: boolean;

  /**
   * IP addresses for GitHub Pages' A records
   */
  pagesIpAddresses: Array<string> | null;
}

/**
 * Represents a Git object.
 */
export type _xGitHubGitObject =
  | IXGitHubBlob
  | IXGitHubCommit
  | IXGitHubTag
  | IXGitHubTree;

/**
 * Represents a Git object.
 */
export interface IXGitHubGitObject {
  __typename: '_xGitHubGitObject';

  /**
   * An abbreviated version of the Git object ID
   */
  abbreviatedOid: string;

  /**
   * The HTTP path for this Git object
   */
  commitResourcePath: any;

  /**
   * The HTTP URL for this Git object
   */
  commitUrl: any;
  id: string;

  /**
   * The Git object ID
   */
  oid: any;

  /**
   * The Repository the Git object belongs to
   */
  repository: IXGitHubRepository;
}

/**
 * Information about a signature (GPG or S/MIME) on a Commit or Tag.
 */
export type _xGitHubGitSignature =
  | IXGitHubGpgSignature
  | IXGitHubSmimeSignature
  | IXGitHubUnknownSignature;

/**
 * Information about a signature (GPG or S/MIME) on a Commit or Tag.
 */
export interface IXGitHubGitSignature {
  __typename: '_xGitHubGitSignature';

  /**
   * Email used to sign this object.
   */
  email: string;

  /**
   * True if the signature is valid and verified by GitHub.
   */
  isValid: boolean;

  /**
   * Payload for GPG signing object. Raw ODB object without the signature header.
   */
  payload: string;

  /**
   * ASCII-armored signature header from object.
   */
  signature: string;

  /**
   * GitHub user corresponding to the email signing this commit.
   */
  signer: IXGitHubUser | null;

  /**
   * The state of this signature. `VALID` if signature is valid and verified by
   * GitHub, otherwise represents reason why signature is considered invalid.
   */
  state: XGitHubGitSignatureState;

  /**
   * True if the signature was made with GitHub's signing key.
   */
  wasSignedByGitHub: boolean;
}

/**
 * The state of a Git signature.
 */
export const enum XGitHubGitSignatureState {
  /**
   * The signing certificate or its chain could not be verified
   */
  BAD_CERT = 'BAD_CERT',

  /**
   * Invalid email used for signing
   */
  BAD_EMAIL = 'BAD_EMAIL',

  /**
   * Signing key expired
   */
  EXPIRED_KEY = 'EXPIRED_KEY',

  /**
   * Internal error - the GPG verification service misbehaved
   */
  GPGVERIFY_ERROR = 'GPGVERIFY_ERROR',

  /**
   * Internal error - the GPG verification service is unavailable at the moment
   */
  GPGVERIFY_UNAVAILABLE = 'GPGVERIFY_UNAVAILABLE',

  /**
   * Invalid signature
   */
  INVALID = 'INVALID',

  /**
   * Malformed signature
   */
  MALFORMED_SIG = 'MALFORMED_SIG',

  /**
   * The usage flags for the key that signed this don't allow signing
   */
  NOT_SIGNING_KEY = 'NOT_SIGNING_KEY',

  /**
   * Email used for signing not known to GitHub
   */
  NO_USER = 'NO_USER',

  /**
   * Valid signature, though certificate revocation check failed
   */
  OCSP_ERROR = 'OCSP_ERROR',

  /**
   * Valid signature, pending certificate revocation checking
   */
  OCSP_PENDING = 'OCSP_PENDING',

  /**
   * One or more certificates in chain has been revoked
   */
  OCSP_REVOKED = 'OCSP_REVOKED',

  /**
   * Key used for signing not known to GitHub
   */
  UNKNOWN_KEY = 'UNKNOWN_KEY',

  /**
   * Unknown signature type
   */
  UNKNOWN_SIG_TYPE = 'UNKNOWN_SIG_TYPE',

  /**
   * Unsigned
   */
  UNSIGNED = 'UNSIGNED',

  /**
   * Email used for signing unverified on GitHub
   */
  UNVERIFIED_EMAIL = 'UNVERIFIED_EMAIL',

  /**
   * Valid signature and verified by GitHub
   */
  VALID = 'VALID'
}

/**
 * Represents a GPG signature on a Commit or Tag.
 */
export interface IXGitHubGpgSignature {
  __typename: '_xGitHubGpgSignature';

  /**
   * Email used to sign this object.
   */
  email: string;

  /**
   * True if the signature is valid and verified by GitHub.
   */
  isValid: boolean;

  /**
   * Hex-encoded ID of the key that signed this object.
   */
  keyId: string | null;

  /**
   * Payload for GPG signing object. Raw ODB object without the signature header.
   */
  payload: string;

  /**
   * ASCII-armored signature header from object.
   */
  signature: string;

  /**
   * GitHub user corresponding to the email signing this commit.
   */
  signer: IXGitHubUser | null;

  /**
   * The state of this signature. `VALID` if signature is valid and verified by
   * GitHub, otherwise represents reason why signature is considered invalid.
   */
  state: XGitHubGitSignatureState;

  /**
   * True if the signature was made with GitHub's signing key.
   */
  wasSignedByGitHub: boolean;
}

/**
 * Represents a 'head_ref_deleted' event on a given pull request.
 */
export interface IXGitHubHeadRefDeletedEvent {
  __typename: '_xGitHubHeadRefDeletedEvent';

  /**
   * Identifies the actor who performed the event.
   */
  actor: _xGitHubActor | null;

  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: any;

  /**
   * Identifies the Ref associated with the `head_ref_deleted` event.
   */
  headRef: IXGitHubRef | null;

  /**
   * Identifies the name of the Ref associated with the `head_ref_deleted` event.
   */
  headRefName: string;
  id: string;

  /**
   * PullRequest referenced by event.
   */
  pullRequest: IXGitHubPullRequest;
}

/**
 * Represents a 'head_ref_force_pushed' event on a given pull request.
 */
export interface IXGitHubHeadRefForcePushedEvent {
  __typename: '_xGitHubHeadRefForcePushedEvent';

  /**
   * Identifies the actor who performed the event.
   */
  actor: _xGitHubActor | null;

  /**
   * Identifies the after commit SHA for the 'head_ref_force_pushed' event.
   */
  afterCommit: IXGitHubCommit | null;

  /**
   * Identifies the before commit SHA for the 'head_ref_force_pushed' event.
   */
  beforeCommit: IXGitHubCommit | null;

  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: any;
  id: string;

  /**
   * PullRequest referenced by event.
   */
  pullRequest: IXGitHubPullRequest;

  /**
   * Identifies the fully qualified ref name for the 'head_ref_force_pushed' event.
   */
  ref: IXGitHubRef | null;
}

/**
 * Represents a 'head_ref_restored' event on a given pull request.
 */
export interface IXGitHubHeadRefRestoredEvent {
  __typename: '_xGitHubHeadRefRestoredEvent';

  /**
   * Identifies the actor who performed the event.
   */
  actor: _xGitHubActor | null;

  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: any;
  id: string;

  /**
   * PullRequest referenced by event.
   */
  pullRequest: IXGitHubPullRequest;
}

/**
 * Detail needed to display a hovercard for a user
 */
export interface IXGitHubHovercard {
  __typename: '_xGitHubHovercard';

  /**
   * Each of the contexts for this hovercard
   */
  contexts: Array<_xGitHubHovercardContext>;
}

/**
 * An individual line of a hovercard
 */
export type _xGitHubHovercardContext =
  | IXGitHubGenericHovercardContext
  | IXGitHubOrganizationTeamsHovercardContext
  | IXGitHubOrganizationsHovercardContext
  | IXGitHubReviewStatusHovercardContext
  | IXGitHubViewerHovercardContext;

/**
 * An individual line of a hovercard
 */
export interface IXGitHubHovercardContext {
  __typename: '_xGitHubHovercardContext';

  /**
   * A string describing this context
   */
  message: string;

  /**
   * An octicon to accompany this context
   */
  octicon: string;
}

/**
 * The possible states in which authentication can be configured with an identity provider.
 */
export const enum XGitHubIdentityProviderConfigurationState {
  /**
   * Authentication with an identity provider is configured but not enforced.
   */
  CONFIGURED = 'CONFIGURED',

  /**
   * Authentication with an identity provider is configured and enforced.
   */
  ENFORCED = 'ENFORCED',

  /**
   * Authentication with an identity provider is not configured.
   */
  UNCONFIGURED = 'UNCONFIGURED'
}

/**
 * Autogenerated input type of InviteEnterpriseAdmin
 */
export interface IXGitHubInviteEnterpriseAdminInput {
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;

  /**
   * The email of the person to invite as an administrator.
   */
  email?: string | null;

  /**
   * The ID of the enterprise to which you want to invite an administrator.
   */
  enterpriseId: string;

  /**
   * The login of a user to invite as an administrator.
   */
  invitee?: string | null;

  /**
   * The role of the administrator.
   */
  role?: XGitHubEnterpriseAdministratorRole | null;
}

/**
 * Autogenerated return type of InviteEnterpriseAdmin
 */
export interface IXGitHubInviteEnterpriseAdminPayload {
  __typename: '_xGitHubInviteEnterpriseAdminPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The created enterprise administrator invitation.
   */
  invitation: IXGitHubEnterpriseAdministratorInvitation | null;
}

/**
 * The possible values for the IP allow list enabled setting.
 */
export const enum XGitHubIpAllowListEnabledSettingValue {
  /**
   * The setting is disabled for the owner.
   */
  DISABLED = 'DISABLED',

  /**
   * The setting is enabled for the owner.
   */
  ENABLED = 'ENABLED'
}

/**
 * An IP address or range of addresses that is allowed to access an owner's resources.
 */
export interface IXGitHubIpAllowListEntry {
  __typename: '_xGitHubIpAllowListEntry';

  /**
   * A single IP address or range of IP addresses in CIDR notation.
   */
  allowListValue: string;

  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: any;
  id: string;

  /**
   * Whether the entry is currently active.
   */
  isActive: boolean;

  /**
   * The name of the IP allow list entry.
   */
  name: string | null;

  /**
   * The owner of the IP allow list entry.
   */
  owner: _xGitHubIpAllowListOwner;

  /**
   * Identifies the date and time when the object was last updated.
   */
  updatedAt: any;
}

/**
 * The connection type for IpAllowListEntry.
 */
export interface IXGitHubIpAllowListEntryConnection {
  __typename: '_xGitHubIpAllowListEntryConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubIpAllowListEntryEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitHubIpAllowListEntry | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface IXGitHubIpAllowListEntryEdge {
  __typename: '_xGitHubIpAllowListEntryEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitHubIpAllowListEntry | null;
}

/**
 * Ordering options for IP allow list entry connections.
 */
export interface IXGitHubIpAllowListEntryOrder {
  /**
   * The ordering direction.
   */
  direction: XGitHubOrderDirection;

  /**
   * The field to order IP allow list entries by.
   */
  field: XGitHubIpAllowListEntryOrderField;
}

/**
 * Properties by which IP allow list entry connections can be ordered.
 */
export const enum XGitHubIpAllowListEntryOrderField {
  /**
   * Order IP allow list entries by the allow list value.
   */
  ALLOW_LIST_VALUE = 'ALLOW_LIST_VALUE',

  /**
   * Order IP allow list entries by creation time.
   */
  CREATED_AT = 'CREATED_AT'
}

/**
 * The possible values for the IP allow list configuration for installed GitHub Apps setting.
 */
export const enum XGitHubIpAllowListForInstalledAppsEnabledSettingValue {
  /**
   * The setting is disabled for the owner.
   */
  DISABLED = 'DISABLED',

  /**
   * The setting is enabled for the owner.
   */
  ENABLED = 'ENABLED'
}

/**
 * Types that can own an IP allow list.
 */
export type _xGitHubIpAllowListOwner =
  | IXGitHubApp
  | IXGitHubEnterprise
  | IXGitHubOrganization;

/**
 * An Issue is a place to discuss ideas, enhancements, tasks, and bugs for a project.
 */
export interface IXGitHubIssue {
  __typename: '_xGitHubIssue';

  /**
   * Reason that the conversation was locked.
   */
  activeLockReason: XGitHubLockReason | null;

  /**
   * A list of Users assigned to this object.
   */
  assignees: IXGitHubUserConnection;

  /**
   * The actor who authored the comment.
   */
  author: _xGitHubActor | null;

  /**
   * Author's association with the subject of the comment.
   */
  authorAssociation: XGitHubCommentAuthorAssociation;

  /**
   * Identifies the body of the issue.
   */
  body: string;

  /**
   * The body rendered to HTML.
   */
  bodyHTML: any;

  /**
   * The http path for this issue body
   */
  bodyResourcePath: any;

  /**
   * Identifies the body of the issue rendered to text.
   */
  bodyText: string;

  /**
   * The http URL for this issue body
   */
  bodyUrl: any;

  /**
   * `true` if the object is closed (definition of closed may depend on type)
   */
  closed: boolean;

  /**
   * Identifies the date and time when the object was closed.
   */
  closedAt: any | null;

  /**
   * A list of comments associated with the Issue.
   */
  comments: IXGitHubIssueCommentConnection;

  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: any;

  /**
   * Check if this comment was created via an email reply.
   */
  createdViaEmail: boolean;

  /**
   * Identifies the primary key from the database.
   */
  databaseId: number | null;

  /**
   * The actor who edited the comment.
   */
  editor: _xGitHubActor | null;

  /**
   * The hovercard information for this issue
   */
  hovercard: IXGitHubHovercard;
  id: string;

  /**
   * Check if this comment was edited and includes an edit with the creation data
   */
  includesCreatedEdit: boolean;

  /**
   * Indicates whether or not this issue is currently pinned to the repository issues list
   */
  isPinned: boolean | null;

  /**
   * Is this issue read by the viewer
   */
  isReadByViewer: boolean | null;

  /**
   * A list of labels associated with the object.
   */
  labels: IXGitHubLabelConnection | null;

  /**
   * The moment the editor made the last edit
   */
  lastEditedAt: any | null;

  /**
   * `true` if the object is locked
   */
  locked: boolean;

  /**
   * Identifies the milestone associated with the issue.
   */
  milestone: IXGitHubMilestone | null;

  /**
   * Identifies the issue number.
   */
  number: number;

  /**
   * A list of Users that are participating in the Issue conversation.
   */
  participants: IXGitHubUserConnection;

  /**
   * List of project cards associated with this issue.
   */
  projectCards: IXGitHubProjectCardConnection;

  /**
   * Identifies when the comment was published at.
   */
  publishedAt: any | null;

  /**
   * A list of reactions grouped by content left on the subject.
   */
  reactionGroups: Array<IXGitHubReactionGroup> | null;

  /**
   * A list of Reactions left on the Issue.
   */
  reactions: IXGitHubReactionConnection;

  /**
   * The repository associated with this node.
   */
  repository: IXGitHubRepository;

  /**
   * The HTTP path for this issue
   */
  resourcePath: any;

  /**
   * Identifies the state of the issue.
   */
  state: XGitHubIssueState;

  /**
   * A list of events, comments, commits, etc. associated with the issue.
   * @deprecated "`timeline` will be removed Use Issue.timelineItems instead. Removal on 2020-10-01 UTC."
   */
  timeline: IXGitHubIssueTimelineConnection;

  /**
   * A list of events, comments, commits, etc. associated with the issue.
   */
  timelineItems: IXGitHubIssueTimelineItemsConnection;

  /**
   * Identifies the issue title.
   */
  title: string;

  /**
   * Identifies the issue title rendered to HTML.
   */
  titleHTML: string;

  /**
   * Identifies the date and time when the object was last updated.
   */
  updatedAt: any;

  /**
   * The HTTP URL for this issue
   */
  url: any;

  /**
   * A list of edits to this content.
   */
  userContentEdits: IXGitHubUserContentEditConnection | null;

  /**
   * Can user react to this subject
   */
  viewerCanReact: boolean;

  /**
   * Check if the viewer is able to change their subscription status for the repository.
   */
  viewerCanSubscribe: boolean;

  /**
   * Check if the current viewer can update this object.
   */
  viewerCanUpdate: boolean;

  /**
   * Reasons why the current viewer can not update this comment.
   */
  viewerCannotUpdateReasons: Array<XGitHubCommentCannotUpdateReason>;

  /**
   * Did the viewer author this comment.
   */
  viewerDidAuthor: boolean;

  /**
   * Identifies if the viewer is watching, not watching, or ignoring the subscribable entity.
   */
  viewerSubscription: XGitHubSubscriptionState | null;
}

export interface IAssigneesOnXGitHubIssueArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface ICommentsOnXGitHubIssueArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Ordering options for issue comments returned from the connection.
   */
  orderBy?: IXGitHubIssueCommentOrder | null;
}

export interface IHovercardOnXGitHubIssueArguments {
  /**
   * Whether or not to include notification contexts
   * @default true
   */
  includeNotificationContexts?: boolean | null;
}

export interface ILabelsOnXGitHubIssueArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Ordering options for labels returned from the connection.
   * @default {"direction":"ASC","field":"CREATED_AT"}
   */
  orderBy?: IXGitHubLabelOrder | null;
}

export interface IParticipantsOnXGitHubIssueArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IProjectCardsOnXGitHubIssueArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * A list of archived states to filter the cards by
   * @default ["ARCHIVED","NOT_ARCHIVED"]
   */
  archivedStates?: Array<XGitHubProjectCardArchivedState | null> | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IReactionsOnXGitHubIssueArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Allows filtering Reactions by emoji.
   */
  content?: XGitHubReactionContent | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Allows specifying the order in which reactions are returned.
   */
  orderBy?: IXGitHubReactionOrder | null;
}

export interface ITimelineOnXGitHubIssueArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Allows filtering timeline events by a `since` timestamp.
   */
  since?: any | null;
}

export interface ITimelineItemsOnXGitHubIssueArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Filter timeline items by type.
   */
  itemTypes?: Array<XGitHubIssueTimelineItemsItemType> | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Filter timeline items by a `since` timestamp.
   */
  since?: any | null;

  /**
   * Skips the first _n_ elements in the list.
   */
  skip?: number | null;
}

export interface IUserContentEditsOnXGitHubIssueArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

/**
 * Represents a comment on an Issue.
 */
export interface IXGitHubIssueComment {
  __typename: '_xGitHubIssueComment';

  /**
   * The actor who authored the comment.
   */
  author: _xGitHubActor | null;

  /**
   * Author's association with the subject of the comment.
   */
  authorAssociation: XGitHubCommentAuthorAssociation;

  /**
   * The body as Markdown.
   */
  body: string;

  /**
   * The body rendered to HTML.
   */
  bodyHTML: any;

  /**
   * The body rendered to text.
   */
  bodyText: string;

  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: any;

  /**
   * Check if this comment was created via an email reply.
   */
  createdViaEmail: boolean;

  /**
   * Identifies the primary key from the database.
   */
  databaseId: number | null;

  /**
   * The actor who edited the comment.
   */
  editor: _xGitHubActor | null;
  id: string;

  /**
   * Check if this comment was edited and includes an edit with the creation data
   */
  includesCreatedEdit: boolean;

  /**
   * Returns whether or not a comment has been minimized.
   */
  isMinimized: boolean;

  /**
   * Identifies the issue associated with the comment.
   */
  issue: IXGitHubIssue;

  /**
   * The moment the editor made the last edit
   */
  lastEditedAt: any | null;

  /**
   * Returns why the comment was minimized.
   */
  minimizedReason: string | null;

  /**
   * Identifies when the comment was published at.
   */
  publishedAt: any | null;

  /**
   * Returns the pull request associated with the comment, if this comment was made on a
   * pull request.
   */
  pullRequest: IXGitHubPullRequest | null;

  /**
   * A list of reactions grouped by content left on the subject.
   */
  reactionGroups: Array<IXGitHubReactionGroup> | null;

  /**
   * A list of Reactions left on the Issue.
   */
  reactions: IXGitHubReactionConnection;

  /**
   * The repository associated with this node.
   */
  repository: IXGitHubRepository;

  /**
   * The HTTP path for this issue comment
   */
  resourcePath: any;

  /**
   * Identifies the date and time when the object was last updated.
   */
  updatedAt: any;

  /**
   * The HTTP URL for this issue comment
   */
  url: any;

  /**
   * A list of edits to this content.
   */
  userContentEdits: IXGitHubUserContentEditConnection | null;

  /**
   * Check if the current viewer can delete this object.
   */
  viewerCanDelete: boolean;

  /**
   * Check if the current viewer can minimize this object.
   */
  viewerCanMinimize: boolean;

  /**
   * Can user react to this subject
   */
  viewerCanReact: boolean;

  /**
   * Check if the current viewer can update this object.
   */
  viewerCanUpdate: boolean;

  /**
   * Reasons why the current viewer can not update this comment.
   */
  viewerCannotUpdateReasons: Array<XGitHubCommentCannotUpdateReason>;

  /**
   * Did the viewer author this comment.
   */
  viewerDidAuthor: boolean;
}

export interface IReactionsOnXGitHubIssueCommentArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Allows filtering Reactions by emoji.
   */
  content?: XGitHubReactionContent | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Allows specifying the order in which reactions are returned.
   */
  orderBy?: IXGitHubReactionOrder | null;
}

export interface IUserContentEditsOnXGitHubIssueCommentArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

/**
 * The connection type for IssueComment.
 */
export interface IXGitHubIssueCommentConnection {
  __typename: '_xGitHubIssueCommentConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubIssueCommentEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitHubIssueComment | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface IXGitHubIssueCommentEdge {
  __typename: '_xGitHubIssueCommentEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitHubIssueComment | null;
}

/**
 * Ways in which lists of issue comments can be ordered upon return.
 */
export interface IXGitHubIssueCommentOrder {
  /**
   * The direction in which to order issue comments by the specified field.
   */
  direction: XGitHubOrderDirection;

  /**
   * The field in which to order issue comments by.
   */
  field: XGitHubIssueCommentOrderField;
}

/**
 * Properties by which issue comment connections can be ordered.
 */
export const enum XGitHubIssueCommentOrderField {
  /**
   * Order issue comments by update time
   */
  UPDATED_AT = 'UPDATED_AT'
}

/**
 * The connection type for Issue.
 */
export interface IXGitHubIssueConnection {
  __typename: '_xGitHubIssueConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubIssueEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitHubIssue | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * This aggregates issues opened by a user within one repository.
 */
export interface IXGitHubIssueContributionsByRepository {
  __typename: '_xGitHubIssueContributionsByRepository';

  /**
   * The issue contributions.
   */
  contributions: IXGitHubCreatedIssueContributionConnection;

  /**
   * The repository in which the issues were opened.
   */
  repository: IXGitHubRepository;
}

export interface IContributionsOnXGitHubIssueContributionsByRepositoryArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Ordering options for contributions returned from the connection.
   * @default {"direction":"DESC"}
   */
  orderBy?: IXGitHubContributionOrder | null;
}

/**
 * An edge in a connection.
 */
export interface IXGitHubIssueEdge {
  __typename: '_xGitHubIssueEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitHubIssue | null;
}

/**
 * Ways in which to filter lists of issues.
 */
export interface IXGitHubIssueFilters {
  /**
   * List issues assigned to given name. Pass in `null` for issues with no assigned
   * user, and `*` for issues assigned to any user.
   */
  assignee?: string | null;

  /**
   * List issues created by given name.
   */
  createdBy?: string | null;

  /**
   * List issues where the list of label names exist on the issue.
   */
  labels?: Array<string> | null;

  /**
   * List issues where the given name is mentioned in the issue.
   */
  mentioned?: string | null;

  /**
   * List issues by given milestone argument. If an string representation of an
   * integer is passed, it should refer to a milestone by its number field. Pass in
   * `null` for issues with no milestone, and `*` for issues that are assigned to any milestone.
   */
  milestone?: string | null;

  /**
   * List issues that have been updated at or after the given date.
   */
  since?: any | null;

  /**
   * List issues filtered by the list of states given.
   */
  states?: Array<XGitHubIssueState> | null;

  /**
   * List issues subscribed to by viewer.
   * @default false
   */
  viewerSubscribed?: boolean | null;
}

/**
 * Used for return value of Repository.issueOrPullRequest.
 */
export type _xGitHubIssueOrPullRequest = IXGitHubIssue | IXGitHubPullRequest;

/**
 * Ways in which lists of issues can be ordered upon return.
 */
export interface IXGitHubIssueOrder {
  /**
   * The direction in which to order issues by the specified field.
   */
  direction: XGitHubOrderDirection;

  /**
   * The field in which to order issues by.
   */
  field: XGitHubIssueOrderField;
}

/**
 * Properties by which issue connections can be ordered.
 */
export const enum XGitHubIssueOrderField {
  /**
   * Order issues by comment count
   */
  COMMENTS = 'COMMENTS',

  /**
   * Order issues by creation time
   */
  CREATED_AT = 'CREATED_AT',

  /**
   * Order issues by update time
   */
  UPDATED_AT = 'UPDATED_AT'
}

/**
 * The possible states of an issue.
 */
export const enum XGitHubIssueState {
  /**
   * An issue that has been closed
   */
  CLOSED = 'CLOSED',

  /**
   * An issue that is still open
   */
  OPEN = 'OPEN'
}

/**
 * A repository issue template.
 */
export interface IXGitHubIssueTemplate {
  __typename: '_xGitHubIssueTemplate';

  /**
   * The template purpose.
   */
  about: string | null;

  /**
   * The suggested issue body.
   */
  body: string | null;

  /**
   * The template name.
   */
  name: string;

  /**
   * The suggested issue title.
   */
  title: string | null;
}

/**
 * The connection type for IssueTimelineItem.
 */
export interface IXGitHubIssueTimelineConnection {
  __typename: '_xGitHubIssueTimelineConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubIssueTimelineItemEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<_xGitHubIssueTimelineItem | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An item in an issue timeline
 */
export type _xGitHubIssueTimelineItem =
  | IXGitHubAssignedEvent
  | IXGitHubClosedEvent
  | IXGitHubCommit
  | IXGitHubCrossReferencedEvent
  | IXGitHubDemilestonedEvent
  | IXGitHubIssueComment
  | IXGitHubLabeledEvent
  | IXGitHubLockedEvent
  | IXGitHubMilestonedEvent
  | IXGitHubReferencedEvent
  | IXGitHubRenamedTitleEvent
  | IXGitHubReopenedEvent
  | IXGitHubSubscribedEvent
  | IXGitHubTransferredEvent
  | IXGitHubUnassignedEvent
  | IXGitHubUnlabeledEvent
  | IXGitHubUnlockedEvent
  | IXGitHubUnsubscribedEvent
  | IXGitHubUserBlockedEvent;

/**
 * An edge in a connection.
 */
export interface IXGitHubIssueTimelineItemEdge {
  __typename: '_xGitHubIssueTimelineItemEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: _xGitHubIssueTimelineItem | null;
}

/**
 * An item in an issue timeline
 */
export type _xGitHubIssueTimelineItems =
  | IXGitHubAddedToProjectEvent
  | IXGitHubAssignedEvent
  | IXGitHubClosedEvent
  | IXGitHubCommentDeletedEvent
  | IXGitHubConnectedEvent
  | IXGitHubConvertedNoteToIssueEvent
  | IXGitHubCrossReferencedEvent
  | IXGitHubDemilestonedEvent
  | IXGitHubDisconnectedEvent
  | IXGitHubIssueComment
  | IXGitHubLabeledEvent
  | IXGitHubLockedEvent
  | IXGitHubMarkedAsDuplicateEvent
  | IXGitHubMentionedEvent
  | IXGitHubMilestonedEvent
  | IXGitHubMovedColumnsInProjectEvent
  | IXGitHubPinnedEvent
  | IXGitHubReferencedEvent
  | IXGitHubRemovedFromProjectEvent
  | IXGitHubRenamedTitleEvent
  | IXGitHubReopenedEvent
  | IXGitHubSubscribedEvent
  | IXGitHubTransferredEvent
  | IXGitHubUnassignedEvent
  | IXGitHubUnlabeledEvent
  | IXGitHubUnlockedEvent
  | IXGitHubUnmarkedAsDuplicateEvent
  | IXGitHubUnpinnedEvent
  | IXGitHubUnsubscribedEvent
  | IXGitHubUserBlockedEvent;

/**
 * The connection type for IssueTimelineItems.
 */
export interface IXGitHubIssueTimelineItemsConnection {
  __typename: '_xGitHubIssueTimelineItemsConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubIssueTimelineItemsEdge | null> | null;

  /**
   * Identifies the count of items after applying `before` and `after` filters.
   */
  filteredCount: number;

  /**
   * A list of nodes.
   */
  nodes: Array<_xGitHubIssueTimelineItems | null> | null;

  /**
   * Identifies the count of items after applying `before`/`after` filters and `first`/`last`/`skip` slicing.
   */
  pageCount: number;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;

  /**
   * Identifies the date and time when the timeline was last updated.
   */
  updatedAt: any;
}

/**
 * An edge in a connection.
 */
export interface IXGitHubIssueTimelineItemsEdge {
  __typename: '_xGitHubIssueTimelineItemsEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: _xGitHubIssueTimelineItems | null;
}

/**
 * The possible item types found in a timeline.
 */
export const enum XGitHubIssueTimelineItemsItemType {
  /**
   * Represents a 'added_to_project' event on a given issue or pull request.
   */
  ADDED_TO_PROJECT_EVENT = 'ADDED_TO_PROJECT_EVENT',

  /**
   * Represents an 'assigned' event on any assignable object.
   */
  ASSIGNED_EVENT = 'ASSIGNED_EVENT',

  /**
   * Represents a 'closed' event on any `Closable`.
   */
  CLOSED_EVENT = 'CLOSED_EVENT',

  /**
   * Represents a 'comment_deleted' event on a given issue or pull request.
   */
  COMMENT_DELETED_EVENT = 'COMMENT_DELETED_EVENT',

  /**
   * Represents a 'connected' event on a given issue or pull request.
   */
  CONNECTED_EVENT = 'CONNECTED_EVENT',

  /**
   * Represents a 'converted_note_to_issue' event on a given issue or pull request.
   */
  CONVERTED_NOTE_TO_ISSUE_EVENT = 'CONVERTED_NOTE_TO_ISSUE_EVENT',

  /**
   * Represents a mention made by one issue or pull request to another.
   */
  CROSS_REFERENCED_EVENT = 'CROSS_REFERENCED_EVENT',

  /**
   * Represents a 'demilestoned' event on a given issue or pull request.
   */
  DEMILESTONED_EVENT = 'DEMILESTONED_EVENT',

  /**
   * Represents a 'disconnected' event on a given issue or pull request.
   */
  DISCONNECTED_EVENT = 'DISCONNECTED_EVENT',

  /**
   * Represents a comment on an Issue.
   */
  ISSUE_COMMENT = 'ISSUE_COMMENT',

  /**
   * Represents a 'labeled' event on a given issue or pull request.
   */
  LABELED_EVENT = 'LABELED_EVENT',

  /**
   * Represents a 'locked' event on a given issue or pull request.
   */
  LOCKED_EVENT = 'LOCKED_EVENT',

  /**
   * Represents a 'marked_as_duplicate' event on a given issue or pull request.
   */
  MARKED_AS_DUPLICATE_EVENT = 'MARKED_AS_DUPLICATE_EVENT',

  /**
   * Represents a 'mentioned' event on a given issue or pull request.
   */
  MENTIONED_EVENT = 'MENTIONED_EVENT',

  /**
   * Represents a 'milestoned' event on a given issue or pull request.
   */
  MILESTONED_EVENT = 'MILESTONED_EVENT',

  /**
   * Represents a 'moved_columns_in_project' event on a given issue or pull request.
   */
  MOVED_COLUMNS_IN_PROJECT_EVENT = 'MOVED_COLUMNS_IN_PROJECT_EVENT',

  /**
   * Represents a 'pinned' event on a given issue or pull request.
   */
  PINNED_EVENT = 'PINNED_EVENT',

  /**
   * Represents a 'referenced' event on a given `ReferencedSubject`.
   */
  REFERENCED_EVENT = 'REFERENCED_EVENT',

  /**
   * Represents a 'removed_from_project' event on a given issue or pull request.
   */
  REMOVED_FROM_PROJECT_EVENT = 'REMOVED_FROM_PROJECT_EVENT',

  /**
   * Represents a 'renamed' event on a given issue or pull request
   */
  RENAMED_TITLE_EVENT = 'RENAMED_TITLE_EVENT',

  /**
   * Represents a 'reopened' event on any `Closable`.
   */
  REOPENED_EVENT = 'REOPENED_EVENT',

  /**
   * Represents a 'subscribed' event on a given `Subscribable`.
   */
  SUBSCRIBED_EVENT = 'SUBSCRIBED_EVENT',

  /**
   * Represents a 'transferred' event on a given issue or pull request.
   */
  TRANSFERRED_EVENT = 'TRANSFERRED_EVENT',

  /**
   * Represents an 'unassigned' event on any assignable object.
   */
  UNASSIGNED_EVENT = 'UNASSIGNED_EVENT',

  /**
   * Represents an 'unlabeled' event on a given issue or pull request.
   */
  UNLABELED_EVENT = 'UNLABELED_EVENT',

  /**
   * Represents an 'unlocked' event on a given issue or pull request.
   */
  UNLOCKED_EVENT = 'UNLOCKED_EVENT',

  /**
   * Represents an 'unmarked_as_duplicate' event on a given issue or pull request.
   */
  UNMARKED_AS_DUPLICATE_EVENT = 'UNMARKED_AS_DUPLICATE_EVENT',

  /**
   * Represents an 'unpinned' event on a given issue or pull request.
   */
  UNPINNED_EVENT = 'UNPINNED_EVENT',

  /**
   * Represents an 'unsubscribed' event on a given `Subscribable`.
   */
  UNSUBSCRIBED_EVENT = 'UNSUBSCRIBED_EVENT',

  /**
   * Represents a 'user_blocked' event on a given user.
   */
  USER_BLOCKED_EVENT = 'USER_BLOCKED_EVENT'
}

/**
 * Represents a user signing up for a GitHub account.
 */
export interface IXGitHubJoinedGitHubContribution {
  __typename: '_xGitHubJoinedGitHubContribution';

  /**
   * Whether this contribution is associated with a record you do not have access to. For
   * example, your own 'first issue' contribution may have been made on a repository you can no
   * longer access.
   */
  isRestricted: boolean;

  /**
   * When this contribution was made.
   */
  occurredAt: any;

  /**
   * The HTTP path for this contribution.
   */
  resourcePath: any;

  /**
   * The HTTP URL for this contribution.
   */
  url: any;

  /**
   * The user who made this contribution.
   */
  user: IXGitHubUser;
}

/**
 * A label for categorizing Issues, Pull Requests, Milestones, or Discussions with a given Repository.
 */
export interface IXGitHubLabel {
  __typename: '_xGitHubLabel';

  /**
   * Identifies the label color.
   */
  color: string;

  /**
   * Identifies the date and time when the label was created.
   */
  createdAt: any | null;

  /**
   * A brief description of this label.
   */
  description: string | null;
  id: string;

  /**
   * Indicates whether or not this is a default label.
   */
  isDefault: boolean;

  /**
   * A list of issues associated with this label.
   */
  issues: IXGitHubIssueConnection;

  /**
   * Identifies the label name.
   */
  name: string;

  /**
   * A list of pull requests associated with this label.
   */
  pullRequests: IXGitHubPullRequestConnection;

  /**
   * The repository associated with this label.
   */
  repository: IXGitHubRepository;

  /**
   * The HTTP path for this label.
   */
  resourcePath: any;

  /**
   * Identifies the date and time when the label was last updated.
   */
  updatedAt: any | null;

  /**
   * The HTTP URL for this label.
   */
  url: any;
}

export interface IIssuesOnXGitHubLabelArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Filtering options for issues returned from the connection.
   */
  filterBy?: IXGitHubIssueFilters | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * A list of label names to filter the pull requests by.
   */
  labels?: Array<string> | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Ordering options for issues returned from the connection.
   */
  orderBy?: IXGitHubIssueOrder | null;

  /**
   * A list of states to filter the issues by.
   */
  states?: Array<XGitHubIssueState> | null;
}

export interface IPullRequestsOnXGitHubLabelArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * The base ref name to filter the pull requests by.
   */
  baseRefName?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * The head ref name to filter the pull requests by.
   */
  headRefName?: string | null;

  /**
   * A list of label names to filter the pull requests by.
   */
  labels?: Array<string> | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Ordering options for pull requests returned from the connection.
   */
  orderBy?: IXGitHubIssueOrder | null;

  /**
   * A list of states to filter the pull requests by.
   */
  states?: Array<XGitHubPullRequestState> | null;
}

/**
 * The connection type for Label.
 */
export interface IXGitHubLabelConnection {
  __typename: '_xGitHubLabelConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubLabelEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitHubLabel | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface IXGitHubLabelEdge {
  __typename: '_xGitHubLabelEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitHubLabel | null;
}

/**
 * Ways in which lists of labels can be ordered upon return.
 */
export interface IXGitHubLabelOrder {
  /**
   * The direction in which to order labels by the specified field.
   */
  direction: XGitHubOrderDirection;

  /**
   * The field in which to order labels by.
   */
  field: XGitHubLabelOrderField;
}

/**
 * Properties by which label connections can be ordered.
 */
export const enum XGitHubLabelOrderField {
  /**
   * Order labels by creation time
   */
  CREATED_AT = 'CREATED_AT',

  /**
   * Order labels by name
   */
  NAME = 'NAME'
}

/**
 * An object that can have labels assigned to it.
 */
export type _xGitHubLabelable =
  | IXGitHubDiscussion
  | IXGitHubIssue
  | IXGitHubPullRequest;

/**
 * An object that can have labels assigned to it.
 */
export interface IXGitHubLabelable {
  __typename: '_xGitHubLabelable';

  /**
   * A list of labels associated with the object.
   */
  labels: IXGitHubLabelConnection | null;
}

export interface ILabelsOnXGitHubLabelableArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Ordering options for labels returned from the connection.
   * @default {"direction":"ASC","field":"CREATED_AT"}
   */
  orderBy?: IXGitHubLabelOrder | null;
}

/**
 * Represents a 'labeled' event on a given issue or pull request.
 */
export interface IXGitHubLabeledEvent {
  __typename: '_xGitHubLabeledEvent';

  /**
   * Identifies the actor who performed the event.
   */
  actor: _xGitHubActor | null;

  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: any;
  id: string;

  /**
   * Identifies the label associated with the 'labeled' event.
   */
  label: IXGitHubLabel;

  /**
   * Identifies the `Labelable` associated with the event.
   */
  labelable: _xGitHubLabelable;
}

/**
 * Represents a given language found in repositories.
 */
export interface IXGitHubLanguage {
  __typename: '_xGitHubLanguage';

  /**
   * The color defined for the current language.
   */
  color: string | null;
  id: string;

  /**
   * The name of the current language.
   */
  name: string;
}

/**
 * A list of languages associated with the parent.
 */
export interface IXGitHubLanguageConnection {
  __typename: '_xGitHubLanguageConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubLanguageEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitHubLanguage | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;

  /**
   * The total size in bytes of files written in that language.
   */
  totalSize: number;
}

/**
 * Represents the language of a repository.
 */
export interface IXGitHubLanguageEdge {
  __typename: '_xGitHubLanguageEdge';
  cursor: string;
  node: IXGitHubLanguage;

  /**
   * The number of bytes of code written in the language.
   */
  size: number;
}

/**
 * Ordering options for language connections.
 */
export interface IXGitHubLanguageOrder {
  /**
   * The ordering direction.
   */
  direction: XGitHubOrderDirection;

  /**
   * The field to order languages by.
   */
  field: XGitHubLanguageOrderField;
}

/**
 * Properties by which language connections can be ordered.
 */
export const enum XGitHubLanguageOrderField {
  /**
   * Order languages by the size of all files containing the language
   */
  SIZE = 'SIZE'
}

/**
 * A repository's open source license
 */
export interface IXGitHubLicense {
  __typename: '_xGitHubLicense';

  /**
   * The full text of the license
   */
  body: string;

  /**
   * The conditions set by the license
   */
  conditions: Array<IXGitHubLicenseRule | null>;

  /**
   * A human-readable description of the license
   */
  description: string | null;

  /**
   * Whether the license should be featured
   */
  featured: boolean;

  /**
   * Whether the license should be displayed in license pickers
   */
  hidden: boolean;
  id: string;

  /**
   * Instructions on how to implement the license
   */
  implementation: string | null;

  /**
   * The lowercased SPDX ID of the license
   */
  key: string;

  /**
   * The limitations set by the license
   */
  limitations: Array<IXGitHubLicenseRule | null>;

  /**
   * The license full name specified by <https://spdx.org/licenses>
   */
  name: string;

  /**
   * Customary short name if applicable (e.g, GPLv3)
   */
  nickname: string | null;

  /**
   * The permissions set by the license
   */
  permissions: Array<IXGitHubLicenseRule | null>;

  /**
   * Whether the license is a pseudo-license placeholder (e.g., other, no-license)
   */
  pseudoLicense: boolean;

  /**
   * Short identifier specified by <https://spdx.org/licenses>
   */
  spdxId: string | null;

  /**
   * URL to the license on <https://choosealicense.com>
   */
  url: any | null;
}

/**
 * Describes a License's conditions, permissions, and limitations
 */
export interface IXGitHubLicenseRule {
  __typename: '_xGitHubLicenseRule';

  /**
   * A description of the rule
   */
  description: string;

  /**
   * The machine-readable rule key
   */
  key: string;

  /**
   * The human-readable rule label
   */
  label: string;
}

/**
 * Autogenerated input type of LinkRepositoryToProject
 */
export interface IXGitHubLinkRepositoryToProjectInput {
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;

  /**
   * The ID of the Project to link to a Repository
   */
  projectId: string;

  /**
   * The ID of the Repository to link to a Project.
   */
  repositoryId: string;
}

/**
 * Autogenerated return type of LinkRepositoryToProject
 */
export interface IXGitHubLinkRepositoryToProjectPayload {
  __typename: '_xGitHubLinkRepositoryToProjectPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The linked Project.
   */
  project: IXGitHubProject | null;

  /**
   * The linked Repository.
   */
  repository: IXGitHubRepository | null;
}

/**
 * Autogenerated input type of LockLockable
 */
export interface IXGitHubLockLockableInput {
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;

  /**
   * A reason for why the item will be locked.
   */
  lockReason?: XGitHubLockReason | null;

  /**
   * ID of the item to be locked.
   */
  lockableId: string;
}

/**
 * Autogenerated return type of LockLockable
 */
export interface IXGitHubLockLockablePayload {
  __typename: '_xGitHubLockLockablePayload';

  /**
   * Identifies the actor who performed the event.
   */
  actor: _xGitHubActor | null;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The item that was locked.
   */
  lockedRecord: _xGitHubLockable | null;
}

/**
 * The possible reasons that an issue or pull request was locked.
 */
export const enum XGitHubLockReason {
  /**
   * The issue or pull request was locked because the conversation was off-topic.
   */
  OFF_TOPIC = 'OFF_TOPIC',

  /**
   * The issue or pull request was locked because the conversation was resolved.
   */
  RESOLVED = 'RESOLVED',

  /**
   * The issue or pull request was locked because the conversation was spam.
   */
  SPAM = 'SPAM',

  /**
   * The issue or pull request was locked because the conversation was too heated.
   */
  TOO_HEATED = 'TOO_HEATED'
}

/**
 * An object that can be locked.
 */
export type _xGitHubLockable =
  | IXGitHubDiscussion
  | IXGitHubIssue
  | IXGitHubPullRequest;

/**
 * An object that can be locked.
 */
export interface IXGitHubLockable {
  __typename: '_xGitHubLockable';

  /**
   * Reason that the conversation was locked.
   */
  activeLockReason: XGitHubLockReason | null;

  /**
   * `true` if the object is locked
   */
  locked: boolean;
}

/**
 * Represents a 'locked' event on a given issue or pull request.
 */
export interface IXGitHubLockedEvent {
  __typename: '_xGitHubLockedEvent';

  /**
   * Identifies the actor who performed the event.
   */
  actor: _xGitHubActor | null;

  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: any;
  id: string;

  /**
   * Reason that the conversation was locked (optional).
   */
  lockReason: XGitHubLockReason | null;

  /**
   * Object that was locked.
   */
  lockable: _xGitHubLockable;
}

/**
 * A placeholder user for attribution of imported data on GitHub.
 */
export interface IXGitHubMannequin {
  __typename: '_xGitHubMannequin';

  /**
   * A URL pointing to the GitHub App's public avatar.
   */
  avatarUrl: any;

  /**
   * The user that has claimed the data attributed to this mannequin.
   */
  claimant: IXGitHubUser | null;

  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: any;

  /**
   * Identifies the primary key from the database.
   */
  databaseId: number | null;

  /**
   * The mannequin's email on the source instance.
   */
  email: string | null;
  id: string;

  /**
   * The username of the actor.
   */
  login: string;

  /**
   * The HTML path to this resource.
   */
  resourcePath: any;

  /**
   * Identifies the date and time when the object was last updated.
   */
  updatedAt: any;

  /**
   * The URL to this resource.
   */
  url: any;
}

export interface IAvatarUrlOnXGitHubMannequinArguments {
  /**
   * The size of the resulting square image.
   */
  size?: number | null;
}

/**
 * Autogenerated input type of MarkDiscussionCommentAsAnswer
 */
export interface IXGitHubMarkDiscussionCommentAsAnswerInput {
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;

  /**
   * The Node ID of the discussion comment to mark as an answer.
   */
  id: string;
}

/**
 * Autogenerated return type of MarkDiscussionCommentAsAnswer
 */
export interface IXGitHubMarkDiscussionCommentAsAnswerPayload {
  __typename: '_xGitHubMarkDiscussionCommentAsAnswerPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The discussion that includes the chosen comment.
   */
  discussion: IXGitHubDiscussion | null;
}

/**
 * Autogenerated input type of MarkFileAsViewed
 */
export interface IXGitHubMarkFileAsViewedInput {
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;

  /**
   * The path of the file to mark as viewed
   */
  path: string;

  /**
   * The Node ID of the pull request.
   */
  pullRequestId: string;
}

/**
 * Autogenerated return type of MarkFileAsViewed
 */
export interface IXGitHubMarkFileAsViewedPayload {
  __typename: '_xGitHubMarkFileAsViewedPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The updated pull request.
   */
  pullRequest: IXGitHubPullRequest | null;
}

/**
 * Autogenerated input type of MarkPullRequestReadyForReview
 */
export interface IXGitHubMarkPullRequestReadyForReviewInput {
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;

  /**
   * ID of the pull request to be marked as ready for review.
   */
  pullRequestId: string;
}

/**
 * Autogenerated return type of MarkPullRequestReadyForReview
 */
export interface IXGitHubMarkPullRequestReadyForReviewPayload {
  __typename: '_xGitHubMarkPullRequestReadyForReviewPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The pull request that is ready for review.
   */
  pullRequest: IXGitHubPullRequest | null;
}

/**
 * Represents a 'marked_as_duplicate' event on a given issue or pull request.
 */
export interface IXGitHubMarkedAsDuplicateEvent {
  __typename: '_xGitHubMarkedAsDuplicateEvent';

  /**
   * Identifies the actor who performed the event.
   */
  actor: _xGitHubActor | null;

  /**
   * The authoritative issue or pull request which has been duplicated by another.
   */
  canonical: _xGitHubIssueOrPullRequest | null;

  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: any;

  /**
   * The issue or pull request which has been marked as a duplicate of another.
   */
  duplicate: _xGitHubIssueOrPullRequest | null;
  id: string;

  /**
   * Canonical and duplicate belong to different repositories.
   */
  isCrossRepository: boolean;
}

/**
 * A public description of a Marketplace category.
 */
export interface IXGitHubMarketplaceCategory {
  __typename: '_xGitHubMarketplaceCategory';

  /**
   * The category's description.
   */
  description: string | null;

  /**
   * The technical description of how apps listed in this category work with GitHub.
   */
  howItWorks: string | null;
  id: string;

  /**
   * The category's name.
   */
  name: string;

  /**
   * How many Marketplace listings have this as their primary category.
   */
  primaryListingCount: number;

  /**
   * The HTTP path for this Marketplace category.
   */
  resourcePath: any;

  /**
   * How many Marketplace listings have this as their secondary category.
   */
  secondaryListingCount: number;

  /**
   * The short name of the category used in its URL.
   */
  slug: string;

  /**
   * The HTTP URL for this Marketplace category.
   */
  url: any;
}

/**
 * A listing in the GitHub integration marketplace.
 */
export interface IXGitHubMarketplaceListing {
  __typename: '_xGitHubMarketplaceListing';

  /**
   * The GitHub App this listing represents.
   */
  app: IXGitHubApp | null;

  /**
   * URL to the listing owner's company site.
   */
  companyUrl: any | null;

  /**
   * The HTTP path for configuring access to the listing's integration or OAuth app
   */
  configurationResourcePath: any;

  /**
   * The HTTP URL for configuring access to the listing's integration or OAuth app
   */
  configurationUrl: any;

  /**
   * URL to the listing's documentation.
   */
  documentationUrl: any | null;

  /**
   * The listing's detailed description.
   */
  extendedDescription: string | null;

  /**
   * The listing's detailed description rendered to HTML.
   */
  extendedDescriptionHTML: any;

  /**
   * The listing's introductory description.
   */
  fullDescription: string;

  /**
   * The listing's introductory description rendered to HTML.
   */
  fullDescriptionHTML: any;

  /**
   * Does this listing have any plans with a free trial?
   */
  hasPublishedFreeTrialPlans: boolean;

  /**
   * Does this listing have a terms of service link?
   */
  hasTermsOfService: boolean;

  /**
   * Whether the creator of the app is a verified org
   */
  hasVerifiedOwner: boolean;

  /**
   * A technical description of how this app works with GitHub.
   */
  howItWorks: string | null;

  /**
   * The listing's technical description rendered to HTML.
   */
  howItWorksHTML: any;
  id: string;

  /**
   * URL to install the product to the viewer's account or organization.
   */
  installationUrl: any | null;

  /**
   * Whether this listing's app has been installed for the current viewer
   */
  installedForViewer: boolean;

  /**
   * Whether this listing has been removed from the Marketplace.
   */
  isArchived: boolean;

  /**
   * Whether this listing is still an editable draft that has not been submitted
   * for review and is not publicly visible in the Marketplace.
   */
  isDraft: boolean;

  /**
   * Whether the product this listing represents is available as part of a paid plan.
   */
  isPaid: boolean;

  /**
   * Whether this listing has been approved for display in the Marketplace.
   */
  isPublic: boolean;

  /**
   * Whether this listing has been rejected by GitHub for display in the Marketplace.
   */
  isRejected: boolean;

  /**
   * Whether this listing has been approved for unverified display in the Marketplace.
   */
  isUnverified: boolean;

  /**
   * Whether this draft listing has been submitted for review for approval to be unverified in the Marketplace.
   */
  isUnverifiedPending: boolean;

  /**
   * Whether this draft listing has been submitted for review from GitHub for approval to be verified in the Marketplace.
   */
  isVerificationPendingFromDraft: boolean;

  /**
   * Whether this unverified listing has been submitted for review from GitHub for approval to be verified in the Marketplace.
   */
  isVerificationPendingFromUnverified: boolean;

  /**
   * Whether this listing has been approved for verified display in the Marketplace.
   */
  isVerified: boolean;

  /**
   * The hex color code, without the leading '#', for the logo background.
   */
  logoBackgroundColor: string;

  /**
   * URL for the listing's logo image.
   */
  logoUrl: any | null;

  /**
   * The listing's full name.
   */
  name: string;

  /**
   * The listing's very short description without a trailing period or ampersands.
   */
  normalizedShortDescription: string;

  /**
   * URL to the listing's detailed pricing.
   */
  pricingUrl: any | null;

  /**
   * The category that best describes the listing.
   */
  primaryCategory: IXGitHubMarketplaceCategory;

  /**
   * URL to the listing's privacy policy, may return an empty string for listings that do not require a privacy policy URL.
   */
  privacyPolicyUrl: any;

  /**
   * The HTTP path for the Marketplace listing.
   */
  resourcePath: any;

  /**
   * The URLs for the listing's screenshots.
   */
  screenshotUrls: Array<string | null>;

  /**
   * An alternate category that describes the listing.
   */
  secondaryCategory: IXGitHubMarketplaceCategory | null;

  /**
   * The listing's very short description.
   */
  shortDescription: string;

  /**
   * The short name of the listing used in its URL.
   */
  slug: string;

  /**
   * URL to the listing's status page.
   */
  statusUrl: any | null;

  /**
   * An email address for support for this listing's app.
   */
  supportEmail: string | null;

  /**
   * Either a URL or an email address for support for this listing's app, may
   * return an empty string for listings that do not require a support URL.
   */
  supportUrl: any;

  /**
   * URL to the listing's terms of service.
   */
  termsOfServiceUrl: any | null;

  /**
   * The HTTP URL for the Marketplace listing.
   */
  url: any;

  /**
   * Can the current viewer add plans for this Marketplace listing.
   */
  viewerCanAddPlans: boolean;

  /**
   * Can the current viewer approve this Marketplace listing.
   */
  viewerCanApprove: boolean;

  /**
   * Can the current viewer delist this Marketplace listing.
   */
  viewerCanDelist: boolean;

  /**
   * Can the current viewer edit this Marketplace listing.
   */
  viewerCanEdit: boolean;

  /**
   * Can the current viewer edit the primary and secondary category of this
   * Marketplace listing.
   */
  viewerCanEditCategories: boolean;

  /**
   * Can the current viewer edit the plans for this Marketplace listing.
   */
  viewerCanEditPlans: boolean;

  /**
   * Can the current viewer return this Marketplace listing to draft state
   * so it becomes editable again.
   */
  viewerCanRedraft: boolean;

  /**
   * Can the current viewer reject this Marketplace listing by returning it to
   * an editable draft state or rejecting it entirely.
   */
  viewerCanReject: boolean;

  /**
   * Can the current viewer request this listing be reviewed for display in
   * the Marketplace as verified.
   */
  viewerCanRequestApproval: boolean;

  /**
   * Indicates whether the current user has an active subscription to this Marketplace listing.
   */
  viewerHasPurchased: boolean;

  /**
   * Indicates if the current user has purchased a subscription to this Marketplace listing
   * for all of the organizations the user owns.
   */
  viewerHasPurchasedForAllOrganizations: boolean;

  /**
   * Does the current viewer role allow them to administer this Marketplace listing.
   */
  viewerIsListingAdmin: boolean;
}

export interface ILogoUrlOnXGitHubMarketplaceListingArguments {
  /**
   * The size in pixels of the resulting square image.
   * @default 400
   */
  size?: number | null;
}

/**
 * Look up Marketplace Listings
 */
export interface IXGitHubMarketplaceListingConnection {
  __typename: '_xGitHubMarketplaceListingConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubMarketplaceListingEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitHubMarketplaceListing | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface IXGitHubMarketplaceListingEdge {
  __typename: '_xGitHubMarketplaceListingEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitHubMarketplaceListing | null;
}

/**
 * Entities that have members who can set status messages.
 */
export type _xGitHubMemberStatusable = IXGitHubOrganization | IXGitHubTeam;

/**
 * Entities that have members who can set status messages.
 */
export interface IXGitHubMemberStatusable {
  __typename: '_xGitHubMemberStatusable';

  /**
   * Get the status messages members of this entity have set that are either public or visible only to the organization.
   */
  memberStatuses: IXGitHubUserStatusConnection;
}

export interface IMemberStatusesOnXGitHubMemberStatusableArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Ordering options for user statuses returned from the connection.
   * @default {"direction":"DESC","field":"UPDATED_AT"}
   */
  orderBy?: IXGitHubUserStatusOrder | null;
}

/**
 * Audit log entry for a members_can_delete_repos.clear event.
 */
export interface IXGitHubMembersCanDeleteReposClearAuditEntry {
  __typename: '_xGitHubMembersCanDeleteReposClearAuditEntry';

  /**
   * The action name
   */
  action: string;

  /**
   * The user who initiated the action
   */
  actor: _xGitHubAuditEntryActor | null;

  /**
   * The IP address of the actor
   */
  actorIp: string | null;

  /**
   * A readable representation of the actor's location
   */
  actorLocation: IXGitHubActorLocation | null;

  /**
   * The username of the user who initiated the action
   */
  actorLogin: string | null;

  /**
   * The HTTP path for the actor.
   */
  actorResourcePath: any | null;

  /**
   * The HTTP URL for the actor.
   */
  actorUrl: any | null;

  /**
   * The time the action was initiated
   */
  createdAt: any;

  /**
   * The HTTP path for this enterprise.
   */
  enterpriseResourcePath: any | null;

  /**
   * The slug of the enterprise.
   */
  enterpriseSlug: string | null;

  /**
   * The HTTP URL for this enterprise.
   */
  enterpriseUrl: any | null;
  id: string;

  /**
   * The corresponding operation type for the action
   */
  operationType: XGitHubOperationType | null;

  /**
   * The Organization associated with the Audit Entry.
   */
  organization: IXGitHubOrganization | null;

  /**
   * The name of the Organization.
   */
  organizationName: string | null;

  /**
   * The HTTP path for the organization
   */
  organizationResourcePath: any | null;

  /**
   * The HTTP URL for the organization
   */
  organizationUrl: any | null;

  /**
   * The user affected by the action
   */
  user: IXGitHubUser | null;

  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin: string | null;

  /**
   * The HTTP path for the user.
   */
  userResourcePath: any | null;

  /**
   * The HTTP URL for the user.
   */
  userUrl: any | null;
}

/**
 * Audit log entry for a members_can_delete_repos.disable event.
 */
export interface IXGitHubMembersCanDeleteReposDisableAuditEntry {
  __typename: '_xGitHubMembersCanDeleteReposDisableAuditEntry';

  /**
   * The action name
   */
  action: string;

  /**
   * The user who initiated the action
   */
  actor: _xGitHubAuditEntryActor | null;

  /**
   * The IP address of the actor
   */
  actorIp: string | null;

  /**
   * A readable representation of the actor's location
   */
  actorLocation: IXGitHubActorLocation | null;

  /**
   * The username of the user who initiated the action
   */
  actorLogin: string | null;

  /**
   * The HTTP path for the actor.
   */
  actorResourcePath: any | null;

  /**
   * The HTTP URL for the actor.
   */
  actorUrl: any | null;

  /**
   * The time the action was initiated
   */
  createdAt: any;

  /**
   * The HTTP path for this enterprise.
   */
  enterpriseResourcePath: any | null;

  /**
   * The slug of the enterprise.
   */
  enterpriseSlug: string | null;

  /**
   * The HTTP URL for this enterprise.
   */
  enterpriseUrl: any | null;
  id: string;

  /**
   * The corresponding operation type for the action
   */
  operationType: XGitHubOperationType | null;

  /**
   * The Organization associated with the Audit Entry.
   */
  organization: IXGitHubOrganization | null;

  /**
   * The name of the Organization.
   */
  organizationName: string | null;

  /**
   * The HTTP path for the organization
   */
  organizationResourcePath: any | null;

  /**
   * The HTTP URL for the organization
   */
  organizationUrl: any | null;

  /**
   * The user affected by the action
   */
  user: IXGitHubUser | null;

  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin: string | null;

  /**
   * The HTTP path for the user.
   */
  userResourcePath: any | null;

  /**
   * The HTTP URL for the user.
   */
  userUrl: any | null;
}

/**
 * Audit log entry for a members_can_delete_repos.enable event.
 */
export interface IXGitHubMembersCanDeleteReposEnableAuditEntry {
  __typename: '_xGitHubMembersCanDeleteReposEnableAuditEntry';

  /**
   * The action name
   */
  action: string;

  /**
   * The user who initiated the action
   */
  actor: _xGitHubAuditEntryActor | null;

  /**
   * The IP address of the actor
   */
  actorIp: string | null;

  /**
   * A readable representation of the actor's location
   */
  actorLocation: IXGitHubActorLocation | null;

  /**
   * The username of the user who initiated the action
   */
  actorLogin: string | null;

  /**
   * The HTTP path for the actor.
   */
  actorResourcePath: any | null;

  /**
   * The HTTP URL for the actor.
   */
  actorUrl: any | null;

  /**
   * The time the action was initiated
   */
  createdAt: any;

  /**
   * The HTTP path for this enterprise.
   */
  enterpriseResourcePath: any | null;

  /**
   * The slug of the enterprise.
   */
  enterpriseSlug: string | null;

  /**
   * The HTTP URL for this enterprise.
   */
  enterpriseUrl: any | null;
  id: string;

  /**
   * The corresponding operation type for the action
   */
  operationType: XGitHubOperationType | null;

  /**
   * The Organization associated with the Audit Entry.
   */
  organization: IXGitHubOrganization | null;

  /**
   * The name of the Organization.
   */
  organizationName: string | null;

  /**
   * The HTTP path for the organization
   */
  organizationResourcePath: any | null;

  /**
   * The HTTP URL for the organization
   */
  organizationUrl: any | null;

  /**
   * The user affected by the action
   */
  user: IXGitHubUser | null;

  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin: string | null;

  /**
   * The HTTP path for the user.
   */
  userResourcePath: any | null;

  /**
   * The HTTP URL for the user.
   */
  userUrl: any | null;
}

/**
 * Represents a 'mentioned' event on a given issue or pull request.
 */
export interface IXGitHubMentionedEvent {
  __typename: '_xGitHubMentionedEvent';

  /**
   * Identifies the actor who performed the event.
   */
  actor: _xGitHubActor | null;

  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: any;

  /**
   * Identifies the primary key from the database.
   */
  databaseId: number | null;
  id: string;
}

/**
 * Autogenerated input type of MergeBranch
 */
export interface IXGitHubMergeBranchInput {
  /**
   * The email address to associate with this commit.
   */
  authorEmail?: string | null;

  /**
   * The name of the base branch that the provided head will be merged into.
   */
  base: string;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;

  /**
   * Message to use for the merge commit. If omitted, a default will be used.
   */
  commitMessage?: string | null;

  /**
   * The head to merge into the base branch. This can be a branch name or a commit GitObjectID.
   */
  head: string;

  /**
   * The Node ID of the Repository containing the base branch that will be modified.
   */
  repositoryId: string;
}

/**
 * Autogenerated return type of MergeBranch
 */
export interface IXGitHubMergeBranchPayload {
  __typename: '_xGitHubMergeBranchPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The resulting merge Commit.
   */
  mergeCommit: IXGitHubCommit | null;
}

/**
 * Autogenerated input type of MergePullRequest
 */
export interface IXGitHubMergePullRequestInput {
  /**
   * The email address to associate with this merge.
   */
  authorEmail?: string | null;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;

  /**
   * Commit body to use for the merge commit; if omitted, a default message will be used
   */
  commitBody?: string | null;

  /**
   * Commit headline to use for the merge commit; if omitted, a default message will be used.
   */
  commitHeadline?: string | null;

  /**
   * OID that the pull request head ref must match to allow merge; if omitted, no check is performed.
   */
  expectedHeadOid?: any | null;

  /**
   * The merge method to use. If omitted, defaults to 'MERGE'
   * @default "MERGE"
   */
  mergeMethod?: XGitHubPullRequestMergeMethod | null;

  /**
   * ID of the pull request to be merged.
   */
  pullRequestId: string;
}

/**
 * Autogenerated return type of MergePullRequest
 */
export interface IXGitHubMergePullRequestPayload {
  __typename: '_xGitHubMergePullRequestPayload';

  /**
   * Identifies the actor who performed the event.
   */
  actor: _xGitHubActor | null;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The pull request that was merged.
   */
  pullRequest: IXGitHubPullRequest | null;
}

/**
 * Whether or not a PullRequest can be merged.
 */
export const enum XGitHubMergeableState {
  /**
   * The pull request cannot be merged due to merge conflicts.
   */
  CONFLICTING = 'CONFLICTING',

  /**
   * The pull request can be merged.
   */
  MERGEABLE = 'MERGEABLE',

  /**
   * The mergeability of the pull request is still being calculated.
   */
  UNKNOWN = 'UNKNOWN'
}

/**
 * Represents a 'merged' event on a given pull request.
 */
export interface IXGitHubMergedEvent {
  __typename: '_xGitHubMergedEvent';

  /**
   * Identifies the actor who performed the event.
   */
  actor: _xGitHubActor | null;

  /**
   * Identifies the commit associated with the `merge` event.
   */
  commit: IXGitHubCommit | null;

  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: any;
  id: string;

  /**
   * Identifies the Ref associated with the `merge` event.
   */
  mergeRef: IXGitHubRef | null;

  /**
   * Identifies the name of the Ref associated with the `merge` event.
   */
  mergeRefName: string;

  /**
   * PullRequest referenced by event.
   */
  pullRequest: IXGitHubPullRequest;

  /**
   * The HTTP path for this merged event.
   */
  resourcePath: any;

  /**
   * The HTTP URL for this merged event.
   */
  url: any;
}

/**
 * Represents a Milestone object on a given repository.
 */
export interface IXGitHubMilestone {
  __typename: '_xGitHubMilestone';

  /**
   * `true` if the object is closed (definition of closed may depend on type)
   */
  closed: boolean;

  /**
   * Identifies the date and time when the object was closed.
   */
  closedAt: any | null;

  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: any;

  /**
   * Identifies the actor who created the milestone.
   */
  creator: _xGitHubActor | null;

  /**
   * Identifies the description of the milestone.
   */
  description: string | null;

  /**
   * Identifies the due date of the milestone.
   */
  dueOn: any | null;
  id: string;

  /**
   * A list of issues associated with the milestone.
   */
  issues: IXGitHubIssueConnection;

  /**
   * Identifies the number of the milestone.
   */
  number: number;

  /**
   * Identifies the percentage complete for the milestone
   */
  progressPercentage: number;

  /**
   * A list of pull requests associated with the milestone.
   */
  pullRequests: IXGitHubPullRequestConnection;

  /**
   * The repository associated with this milestone.
   */
  repository: IXGitHubRepository;

  /**
   * The HTTP path for this milestone
   */
  resourcePath: any;

  /**
   * Identifies the state of the milestone.
   */
  state: XGitHubMilestoneState;

  /**
   * Identifies the title of the milestone.
   */
  title: string;

  /**
   * Identifies the date and time when the object was last updated.
   */
  updatedAt: any;

  /**
   * The HTTP URL for this milestone
   */
  url: any;
}

export interface IIssuesOnXGitHubMilestoneArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Filtering options for issues returned from the connection.
   */
  filterBy?: IXGitHubIssueFilters | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * A list of label names to filter the pull requests by.
   */
  labels?: Array<string> | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Ordering options for issues returned from the connection.
   */
  orderBy?: IXGitHubIssueOrder | null;

  /**
   * A list of states to filter the issues by.
   */
  states?: Array<XGitHubIssueState> | null;
}

export interface IPullRequestsOnXGitHubMilestoneArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * The base ref name to filter the pull requests by.
   */
  baseRefName?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * The head ref name to filter the pull requests by.
   */
  headRefName?: string | null;

  /**
   * A list of label names to filter the pull requests by.
   */
  labels?: Array<string> | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Ordering options for pull requests returned from the connection.
   */
  orderBy?: IXGitHubIssueOrder | null;

  /**
   * A list of states to filter the pull requests by.
   */
  states?: Array<XGitHubPullRequestState> | null;
}

/**
 * The connection type for Milestone.
 */
export interface IXGitHubMilestoneConnection {
  __typename: '_xGitHubMilestoneConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubMilestoneEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitHubMilestone | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface IXGitHubMilestoneEdge {
  __typename: '_xGitHubMilestoneEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitHubMilestone | null;
}

/**
 * Types that can be inside a Milestone.
 */
export type _xGitHubMilestoneItem = IXGitHubIssue | IXGitHubPullRequest;

/**
 * Ordering options for milestone connections.
 */
export interface IXGitHubMilestoneOrder {
  /**
   * The ordering direction.
   */
  direction: XGitHubOrderDirection;

  /**
   * The field to order milestones by.
   */
  field: XGitHubMilestoneOrderField;
}

/**
 * Properties by which milestone connections can be ordered.
 */
export const enum XGitHubMilestoneOrderField {
  /**
   * Order milestones by when they were created.
   */
  CREATED_AT = 'CREATED_AT',

  /**
   * Order milestones by when they are due.
   */
  DUE_DATE = 'DUE_DATE',

  /**
   * Order milestones by their number.
   */
  NUMBER = 'NUMBER',

  /**
   * Order milestones by when they were last updated.
   */
  UPDATED_AT = 'UPDATED_AT'
}

/**
 * The possible states of a milestone.
 */
export const enum XGitHubMilestoneState {
  /**
   * A milestone that has been closed.
   */
  CLOSED = 'CLOSED',

  /**
   * A milestone that is still open.
   */
  OPEN = 'OPEN'
}

/**
 * Represents a 'milestoned' event on a given issue or pull request.
 */
export interface IXGitHubMilestonedEvent {
  __typename: '_xGitHubMilestonedEvent';

  /**
   * Identifies the actor who performed the event.
   */
  actor: _xGitHubActor | null;

  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: any;
  id: string;

  /**
   * Identifies the milestone title associated with the 'milestoned' event.
   */
  milestoneTitle: string;

  /**
   * Object referenced by event.
   */
  subject: _xGitHubMilestoneItem;
}

/**
 * Entities that can be minimized.
 */
export type _xGitHubMinimizable =
  | IXGitHubCommitComment
  | IXGitHubDiscussionComment
  | IXGitHubGistComment
  | IXGitHubIssueComment
  | IXGitHubPullRequestReviewComment;

/**
 * Entities that can be minimized.
 */
export interface IXGitHubMinimizable {
  __typename: '_xGitHubMinimizable';

  /**
   * Returns whether or not a comment has been minimized.
   */
  isMinimized: boolean;

  /**
   * Returns why the comment was minimized.
   */
  minimizedReason: string | null;

  /**
   * Check if the current viewer can minimize this object.
   */
  viewerCanMinimize: boolean;
}

/**
 * Autogenerated input type of MinimizeComment
 */
export interface IXGitHubMinimizeCommentInput {
  /**
   * The classification of comment
   */
  classifier: XGitHubReportedContentClassifiers;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;

  /**
   * The Node ID of the subject to modify.
   */
  subjectId: string;
}

/**
 * Autogenerated return type of MinimizeComment
 */
export interface IXGitHubMinimizeCommentPayload {
  __typename: '_xGitHubMinimizeCommentPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The comment that was minimized.
   */
  minimizedComment: _xGitHubMinimizable | null;
}

/**
 * Autogenerated input type of MoveProjectCard
 */
export interface IXGitHubMoveProjectCardInput {
  /**
   * Place the new card after the card with this id. Pass null to place it at the top.
   */
  afterCardId?: string | null;

  /**
   * The id of the card to move.
   */
  cardId: string;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;

  /**
   * The id of the column to move it into.
   */
  columnId: string;
}

/**
 * Autogenerated return type of MoveProjectCard
 */
export interface IXGitHubMoveProjectCardPayload {
  __typename: '_xGitHubMoveProjectCardPayload';

  /**
   * The new edge of the moved card.
   */
  cardEdge: IXGitHubProjectCardEdge | null;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;
}

/**
 * Autogenerated input type of MoveProjectColumn
 */
export interface IXGitHubMoveProjectColumnInput {
  /**
   * Place the new column after the column with this id. Pass null to place it at the front.
   */
  afterColumnId?: string | null;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;

  /**
   * The id of the column to move.
   */
  columnId: string;
}

/**
 * Autogenerated return type of MoveProjectColumn
 */
export interface IXGitHubMoveProjectColumnPayload {
  __typename: '_xGitHubMoveProjectColumnPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The new edge of the moved column.
   */
  columnEdge: IXGitHubProjectColumnEdge | null;
}

/**
 * Represents a 'moved_columns_in_project' event on a given issue or pull request.
 */
export interface IXGitHubMovedColumnsInProjectEvent {
  __typename: '_xGitHubMovedColumnsInProjectEvent';

  /**
   * Identifies the actor who performed the event.
   */
  actor: _xGitHubActor | null;

  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: any;

  /**
   * Identifies the primary key from the database.
   */
  databaseId: number | null;
  id: string;
}

/**
 * The root query for implementing GraphQL mutations.
 */
export interface IXGitHubMutation {
  __typename: '_xGitHubMutation';

  /**
   * Accepts a pending invitation for a user to become an administrator of an enterprise.
   */
  acceptEnterpriseAdministratorInvitation: IXGitHubAcceptEnterpriseAdministratorInvitationPayload | null;

  /**
   * Applies a suggested topic to the repository.
   */
  acceptTopicSuggestion: IXGitHubAcceptTopicSuggestionPayload | null;

  /**
   * Adds assignees to an assignable object.
   */
  addAssigneesToAssignable: IXGitHubAddAssigneesToAssignablePayload | null;

  /**
   * Adds a comment to an Issue or Pull Request.
   */
  addComment: IXGitHubAddCommentPayload | null;

  /**
   * Adds a comment to a Discussion, possibly as a reply to another comment.
   */
  addDiscussionComment: IXGitHubAddDiscussionCommentPayload | null;

  /**
   * Adds a support entitlement to an enterprise member.
   */
  addEnterpriseSupportEntitlement: IXGitHubAddEnterpriseSupportEntitlementPayload | null;

  /**
   * Adds labels to a labelable object.
   */
  addLabelsToLabelable: IXGitHubAddLabelsToLabelablePayload | null;

  /**
   * Adds a card to a ProjectColumn. Either `contentId` or `note` must be provided but **not** both.
   */
  addProjectCard: IXGitHubAddProjectCardPayload | null;

  /**
   * Adds a column to a Project.
   */
  addProjectColumn: IXGitHubAddProjectColumnPayload | null;

  /**
   * Adds a review to a Pull Request.
   */
  addPullRequestReview: IXGitHubAddPullRequestReviewPayload | null;

  /**
   * Adds a comment to a review.
   */
  addPullRequestReviewComment: IXGitHubAddPullRequestReviewCommentPayload | null;

  /**
   * Adds a new thread to a pending Pull Request Review.
   */
  addPullRequestReviewThread: IXGitHubAddPullRequestReviewThreadPayload | null;

  /**
   * Adds a reaction to a subject.
   */
  addReaction: IXGitHubAddReactionPayload | null;

  /**
   * Adds a star to a Starrable.
   */
  addStar: IXGitHubAddStarPayload | null;

  /**
   * Add an upvote to a discussion or discussion comment.
   */
  addUpvote: IXGitHubAddUpvotePayload | null;

  /**
   * Adds a verifiable domain to an owning account.
   */
  addVerifiableDomain: IXGitHubAddVerifiableDomainPayload | null;

  /**
   * Approve all pending deployments under one or more environments
   */
  approveDeployments: IXGitHubApproveDeploymentsPayload | null;

  /**
   * Approve a verifiable domain for notification delivery.
   */
  approveVerifiableDomain: IXGitHubApproveVerifiableDomainPayload | null;

  /**
   * Marks a repository as archived.
   */
  archiveRepository: IXGitHubArchiveRepositoryPayload | null;

  /**
   * Cancels a pending invitation for an administrator to join an enterprise.
   */
  cancelEnterpriseAdminInvitation: IXGitHubCancelEnterpriseAdminInvitationPayload | null;

  /**
   * Update your status on GitHub.
   */
  changeUserStatus: IXGitHubChangeUserStatusPayload | null;

  /**
   * Clears all labels from a labelable object.
   */
  clearLabelsFromLabelable: IXGitHubClearLabelsFromLabelablePayload | null;

  /**
   * Creates a new project by cloning configuration from an existing project.
   */
  cloneProject: IXGitHubCloneProjectPayload | null;

  /**
   * Create a new repository with the same files and directory structure as a template repository.
   */
  cloneTemplateRepository: IXGitHubCloneTemplateRepositoryPayload | null;

  /**
   * Close an issue.
   */
  closeIssue: IXGitHubCloseIssuePayload | null;

  /**
   * Close a pull request.
   */
  closePullRequest: IXGitHubClosePullRequestPayload | null;

  /**
   * Convert a project note card to one associated with a newly created issue.
   */
  convertProjectCardNoteToIssue: IXGitHubConvertProjectCardNoteToIssuePayload | null;

  /**
   * Converts a pull request to draft
   */
  convertPullRequestToDraft: IXGitHubConvertPullRequestToDraftPayload | null;

  /**
   * Create a new branch protection rule
   */
  createBranchProtectionRule: IXGitHubCreateBranchProtectionRulePayload | null;

  /**
   * Create a check run.
   */
  createCheckRun: IXGitHubCreateCheckRunPayload | null;

  /**
   * Create a check suite
   */
  createCheckSuite: IXGitHubCreateCheckSuitePayload | null;

  /**
   * Create a discussion.
   */
  createDiscussion: IXGitHubCreateDiscussionPayload | null;

  /**
   * Creates an organization as part of an enterprise account.
   */
  createEnterpriseOrganization: IXGitHubCreateEnterpriseOrganizationPayload | null;

  /**
   * Creates an environment or simply returns it if already exists.
   */
  createEnvironment: IXGitHubCreateEnvironmentPayload | null;

  /**
   * Creates a new IP allow list entry.
   */
  createIpAllowListEntry: IXGitHubCreateIpAllowListEntryPayload | null;

  /**
   * Creates a new issue.
   */
  createIssue: IXGitHubCreateIssuePayload | null;

  /**
   * Creates a new project.
   */
  createProject: IXGitHubCreateProjectPayload | null;

  /**
   * Create a new pull request
   */
  createPullRequest: IXGitHubCreatePullRequestPayload | null;

  /**
   * Create a new Git Ref.
   */
  createRef: IXGitHubCreateRefPayload | null;

  /**
   * Create a new repository.
   */
  createRepository: IXGitHubCreateRepositoryPayload | null;

  /**
   * Start a new sponsorship of a maintainer in GitHub Sponsors, or reactivate a past sponsorship.
   */
  createSponsorship: IXGitHubCreateSponsorshipPayload | null;

  /**
   * Creates a new team discussion.
   */
  createTeamDiscussion: IXGitHubCreateTeamDiscussionPayload | null;

  /**
   * Creates a new team discussion comment.
   */
  createTeamDiscussionComment: IXGitHubCreateTeamDiscussionCommentPayload | null;

  /**
   * Rejects a suggested topic for the repository.
   */
  declineTopicSuggestion: IXGitHubDeclineTopicSuggestionPayload | null;

  /**
   * Delete a branch protection rule
   */
  deleteBranchProtectionRule: IXGitHubDeleteBranchProtectionRulePayload | null;

  /**
   * Deletes a deployment.
   */
  deleteDeployment: IXGitHubDeleteDeploymentPayload | null;

  /**
   * Delete a discussion and all of its replies.
   */
  deleteDiscussion: IXGitHubDeleteDiscussionPayload | null;

  /**
   * Delete a discussion comment. If it has replies, wipe it instead.
   */
  deleteDiscussionComment: IXGitHubDeleteDiscussionCommentPayload | null;

  /**
   * Deletes an environment
   */
  deleteEnvironment: IXGitHubDeleteEnvironmentPayload | null;

  /**
   * Deletes an IP allow list entry.
   */
  deleteIpAllowListEntry: IXGitHubDeleteIpAllowListEntryPayload | null;

  /**
   * Deletes an Issue object.
   */
  deleteIssue: IXGitHubDeleteIssuePayload | null;

  /**
   * Deletes an IssueComment object.
   */
  deleteIssueComment: IXGitHubDeleteIssueCommentPayload | null;

  /**
   * Deletes a project.
   */
  deleteProject: IXGitHubDeleteProjectPayload | null;

  /**
   * Deletes a project card.
   */
  deleteProjectCard: IXGitHubDeleteProjectCardPayload | null;

  /**
   * Deletes a project column.
   */
  deleteProjectColumn: IXGitHubDeleteProjectColumnPayload | null;

  /**
   * Deletes a pull request review.
   */
  deletePullRequestReview: IXGitHubDeletePullRequestReviewPayload | null;

  /**
   * Deletes a pull request review comment.
   */
  deletePullRequestReviewComment: IXGitHubDeletePullRequestReviewCommentPayload | null;

  /**
   * Delete a Git Ref.
   */
  deleteRef: IXGitHubDeleteRefPayload | null;

  /**
   * Deletes a team discussion.
   */
  deleteTeamDiscussion: IXGitHubDeleteTeamDiscussionPayload | null;

  /**
   * Deletes a team discussion comment.
   */
  deleteTeamDiscussionComment: IXGitHubDeleteTeamDiscussionCommentPayload | null;

  /**
   * Deletes a verifiable domain.
   */
  deleteVerifiableDomain: IXGitHubDeleteVerifiableDomainPayload | null;

  /**
   * Disable auto merge on the given pull request
   */
  disablePullRequestAutoMerge: IXGitHubDisablePullRequestAutoMergePayload | null;

  /**
   * Dismisses an approved or rejected pull request review.
   */
  dismissPullRequestReview: IXGitHubDismissPullRequestReviewPayload | null;

  /**
   * Enable the default auto-merge on a pull request.
   */
  enablePullRequestAutoMerge: IXGitHubEnablePullRequestAutoMergePayload | null;

  /**
   * Follow a user.
   */
  followUser: IXGitHubFollowUserPayload | null;

  /**
   * Invite someone to become an administrator of the enterprise.
   */
  inviteEnterpriseAdmin: IXGitHubInviteEnterpriseAdminPayload | null;

  /**
   * Creates a repository link for a project.
   */
  linkRepositoryToProject: IXGitHubLinkRepositoryToProjectPayload | null;

  /**
   * Lock a lockable object
   */
  lockLockable: IXGitHubLockLockablePayload | null;

  /**
   * Mark a discussion comment as the chosen answer for discussions in an answerable category.
   */
  markDiscussionCommentAsAnswer: IXGitHubMarkDiscussionCommentAsAnswerPayload | null;

  /**
   * Mark a pull request file as viewed
   */
  markFileAsViewed: IXGitHubMarkFileAsViewedPayload | null;

  /**
   * Marks a pull request ready for review.
   */
  markPullRequestReadyForReview: IXGitHubMarkPullRequestReadyForReviewPayload | null;

  /**
   * Merge a head into a branch.
   */
  mergeBranch: IXGitHubMergeBranchPayload | null;

  /**
   * Merge a pull request.
   */
  mergePullRequest: IXGitHubMergePullRequestPayload | null;

  /**
   * Minimizes a comment on an Issue, Commit, Pull Request, or Gist
   */
  minimizeComment: IXGitHubMinimizeCommentPayload | null;

  /**
   * Moves a project card to another place.
   */
  moveProjectCard: IXGitHubMoveProjectCardPayload | null;

  /**
   * Moves a project column to another place.
   */
  moveProjectColumn: IXGitHubMoveProjectColumnPayload | null;

  /**
   * Pin an issue to a repository
   */
  pinIssue: IXGitHubPinIssuePayload | null;

  /**
   * Regenerates the identity provider recovery codes for an enterprise
   */
  regenerateEnterpriseIdentityProviderRecoveryCodes: IXGitHubRegenerateEnterpriseIdentityProviderRecoveryCodesPayload | null;

  /**
   * Regenerates a verifiable domain's verification token.
   */
  regenerateVerifiableDomainToken: IXGitHubRegenerateVerifiableDomainTokenPayload | null;

  /**
   * Reject all pending deployments under one or more environments
   */
  rejectDeployments: IXGitHubRejectDeploymentsPayload | null;

  /**
   * Removes assignees from an assignable object.
   */
  removeAssigneesFromAssignable: IXGitHubRemoveAssigneesFromAssignablePayload | null;

  /**
   * Removes an administrator from the enterprise.
   */
  removeEnterpriseAdmin: IXGitHubRemoveEnterpriseAdminPayload | null;

  /**
   * Removes the identity provider from an enterprise
   */
  removeEnterpriseIdentityProvider: IXGitHubRemoveEnterpriseIdentityProviderPayload | null;

  /**
   * Removes an organization from the enterprise
   */
  removeEnterpriseOrganization: IXGitHubRemoveEnterpriseOrganizationPayload | null;

  /**
   * Removes a support entitlement from an enterprise member.
   */
  removeEnterpriseSupportEntitlement: IXGitHubRemoveEnterpriseSupportEntitlementPayload | null;

  /**
   * Removes labels from a Labelable object.
   */
  removeLabelsFromLabelable: IXGitHubRemoveLabelsFromLabelablePayload | null;

  /**
   * Removes outside collaborator from all repositories in an organization.
   */
  removeOutsideCollaborator: IXGitHubRemoveOutsideCollaboratorPayload | null;

  /**
   * Removes a reaction from a subject.
   */
  removeReaction: IXGitHubRemoveReactionPayload | null;

  /**
   * Removes a star from a Starrable.
   */
  removeStar: IXGitHubRemoveStarPayload | null;

  /**
   * Remove an upvote to a discussion or discussion comment.
   */
  removeUpvote: IXGitHubRemoveUpvotePayload | null;

  /**
   * Reopen a issue.
   */
  reopenIssue: IXGitHubReopenIssuePayload | null;

  /**
   * Reopen a pull request.
   */
  reopenPullRequest: IXGitHubReopenPullRequestPayload | null;

  /**
   * Set review requests on a pull request.
   */
  requestReviews: IXGitHubRequestReviewsPayload | null;

  /**
   * Rerequests an existing check suite.
   */
  rerequestCheckSuite: IXGitHubRerequestCheckSuitePayload | null;

  /**
   * Marks a review thread as resolved.
   */
  resolveReviewThread: IXGitHubResolveReviewThreadPayload | null;

  /**
   * Creates or updates the identity provider for an enterprise.
   */
  setEnterpriseIdentityProvider: IXGitHubSetEnterpriseIdentityProviderPayload | null;

  /**
   * Set an organization level interaction limit for an organization's public repositories.
   */
  setOrganizationInteractionLimit: IXGitHubSetOrganizationInteractionLimitPayload | null;

  /**
   * Sets an interaction limit setting for a repository.
   */
  setRepositoryInteractionLimit: IXGitHubSetRepositoryInteractionLimitPayload | null;

  /**
   * Set a user level interaction limit for an user's public repositories.
   */
  setUserInteractionLimit: IXGitHubSetUserInteractionLimitPayload | null;

  /**
   * Submits a pending pull request review.
   */
  submitPullRequestReview: IXGitHubSubmitPullRequestReviewPayload | null;

  /**
   * Transfer an issue to a different repository
   */
  transferIssue: IXGitHubTransferIssuePayload | null;

  /**
   * Unarchives a repository.
   */
  unarchiveRepository: IXGitHubUnarchiveRepositoryPayload | null;

  /**
   * Unfollow a user.
   */
  unfollowUser: IXGitHubUnfollowUserPayload | null;

  /**
   * Deletes a repository link from a project.
   */
  unlinkRepositoryFromProject: IXGitHubUnlinkRepositoryFromProjectPayload | null;

  /**
   * Unlock a lockable object
   */
  unlockLockable: IXGitHubUnlockLockablePayload | null;

  /**
   * Unmark a discussion comment as the chosen answer for discussions in an answerable category.
   */
  unmarkDiscussionCommentAsAnswer: IXGitHubUnmarkDiscussionCommentAsAnswerPayload | null;

  /**
   * Unmark a pull request file as viewed
   */
  unmarkFileAsViewed: IXGitHubUnmarkFileAsViewedPayload | null;

  /**
   * Unmark an issue as a duplicate of another issue.
   */
  unmarkIssueAsDuplicate: IXGitHubUnmarkIssueAsDuplicatePayload | null;

  /**
   * Unminimizes a comment on an Issue, Commit, Pull Request, or Gist
   */
  unminimizeComment: IXGitHubUnminimizeCommentPayload | null;

  /**
   * Unpin a pinned issue from a repository
   */
  unpinIssue: IXGitHubUnpinIssuePayload | null;

  /**
   * Marks a review thread as unresolved.
   */
  unresolveReviewThread: IXGitHubUnresolveReviewThreadPayload | null;

  /**
   * Create a new branch protection rule
   */
  updateBranchProtectionRule: IXGitHubUpdateBranchProtectionRulePayload | null;

  /**
   * Update a check run
   */
  updateCheckRun: IXGitHubUpdateCheckRunPayload | null;

  /**
   * Modifies the settings of an existing check suite
   */
  updateCheckSuitePreferences: IXGitHubUpdateCheckSuitePreferencesPayload | null;

  /**
   * Update a discussion
   */
  updateDiscussion: IXGitHubUpdateDiscussionPayload | null;

  /**
   * Update the contents of a comment on a Discussion
   */
  updateDiscussionComment: IXGitHubUpdateDiscussionCommentPayload | null;

  /**
   * Updates the role of an enterprise administrator.
   */
  updateEnterpriseAdministratorRole: IXGitHubUpdateEnterpriseAdministratorRolePayload | null;

  /**
   * Sets whether private repository forks are enabled for an enterprise.
   */
  updateEnterpriseAllowPrivateRepositoryForkingSetting: IXGitHubUpdateEnterpriseAllowPrivateRepositoryForkingSettingPayload | null;

  /**
   * Sets the base repository permission for organizations in an enterprise.
   */
  updateEnterpriseDefaultRepositoryPermissionSetting: IXGitHubUpdateEnterpriseDefaultRepositoryPermissionSettingPayload | null;

  /**
   * Sets whether organization members with admin permissions on a repository can change repository visibility.
   */
  updateEnterpriseMembersCanChangeRepositoryVisibilitySetting: IXGitHubUpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingPayload | null;

  /**
   * Sets the members can create repositories setting for an enterprise.
   */
  updateEnterpriseMembersCanCreateRepositoriesSetting: IXGitHubUpdateEnterpriseMembersCanCreateRepositoriesSettingPayload | null;

  /**
   * Sets the members can delete issues setting for an enterprise.
   */
  updateEnterpriseMembersCanDeleteIssuesSetting: IXGitHubUpdateEnterpriseMembersCanDeleteIssuesSettingPayload | null;

  /**
   * Sets the members can delete repositories setting for an enterprise.
   */
  updateEnterpriseMembersCanDeleteRepositoriesSetting: IXGitHubUpdateEnterpriseMembersCanDeleteRepositoriesSettingPayload | null;

  /**
   * Sets whether members can invite collaborators are enabled for an enterprise.
   */
  updateEnterpriseMembersCanInviteCollaboratorsSetting: IXGitHubUpdateEnterpriseMembersCanInviteCollaboratorsSettingPayload | null;

  /**
   * Sets whether or not an organization admin can make purchases.
   */
  updateEnterpriseMembersCanMakePurchasesSetting: IXGitHubUpdateEnterpriseMembersCanMakePurchasesSettingPayload | null;

  /**
   * Sets the members can update protected branches setting for an enterprise.
   */
  updateEnterpriseMembersCanUpdateProtectedBranchesSetting: IXGitHubUpdateEnterpriseMembersCanUpdateProtectedBranchesSettingPayload | null;

  /**
   * Sets the members can view dependency insights for an enterprise.
   */
  updateEnterpriseMembersCanViewDependencyInsightsSetting: IXGitHubUpdateEnterpriseMembersCanViewDependencyInsightsSettingPayload | null;

  /**
   * Sets whether organization projects are enabled for an enterprise.
   */
  updateEnterpriseOrganizationProjectsSetting: IXGitHubUpdateEnterpriseOrganizationProjectsSettingPayload | null;

  /**
   * Updates an enterprise's profile.
   */
  updateEnterpriseProfile: IXGitHubUpdateEnterpriseProfilePayload | null;

  /**
   * Sets whether repository projects are enabled for a enterprise.
   */
  updateEnterpriseRepositoryProjectsSetting: IXGitHubUpdateEnterpriseRepositoryProjectsSettingPayload | null;

  /**
   * Sets whether team discussions are enabled for an enterprise.
   */
  updateEnterpriseTeamDiscussionsSetting: IXGitHubUpdateEnterpriseTeamDiscussionsSettingPayload | null;

  /**
   * Sets whether two factor authentication is required for all users in an enterprise.
   */
  updateEnterpriseTwoFactorAuthenticationRequiredSetting: IXGitHubUpdateEnterpriseTwoFactorAuthenticationRequiredSettingPayload | null;

  /**
   * Updates an environment.
   */
  updateEnvironment: IXGitHubUpdateEnvironmentPayload | null;

  /**
   * Sets whether an IP allow list is enabled on an owner.
   */
  updateIpAllowListEnabledSetting: IXGitHubUpdateIpAllowListEnabledSettingPayload | null;

  /**
   * Updates an IP allow list entry.
   */
  updateIpAllowListEntry: IXGitHubUpdateIpAllowListEntryPayload | null;

  /**
   * Sets whether IP allow list configuration for installed GitHub Apps is enabled on an owner.
   */
  updateIpAllowListForInstalledAppsEnabledSetting: IXGitHubUpdateIpAllowListForInstalledAppsEnabledSettingPayload | null;

  /**
   * Updates an Issue.
   */
  updateIssue: IXGitHubUpdateIssuePayload | null;

  /**
   * Updates an IssueComment object.
   */
  updateIssueComment: IXGitHubUpdateIssueCommentPayload | null;

  /**
   * Update the setting to restrict notifications to only verified or approved domains available to an owner.
   */
  updateNotificationRestrictionSetting: IXGitHubUpdateNotificationRestrictionSettingPayload | null;

  /**
   * Updates an existing project.
   */
  updateProject: IXGitHubUpdateProjectPayload | null;

  /**
   * Updates an existing project card.
   */
  updateProjectCard: IXGitHubUpdateProjectCardPayload | null;

  /**
   * Updates an existing project column.
   */
  updateProjectColumn: IXGitHubUpdateProjectColumnPayload | null;

  /**
   * Update a pull request
   */
  updatePullRequest: IXGitHubUpdatePullRequestPayload | null;

  /**
   * Updates the body of a pull request review.
   */
  updatePullRequestReview: IXGitHubUpdatePullRequestReviewPayload | null;

  /**
   * Updates a pull request review comment.
   */
  updatePullRequestReviewComment: IXGitHubUpdatePullRequestReviewCommentPayload | null;

  /**
   * Update a Git Ref.
   */
  updateRef: IXGitHubUpdateRefPayload | null;

  /**
   * Update information about a repository.
   */
  updateRepository: IXGitHubUpdateRepositoryPayload | null;

  /**
   * Updates the state for subscribable subjects.
   */
  updateSubscription: IXGitHubUpdateSubscriptionPayload | null;

  /**
   * Updates a team discussion.
   */
  updateTeamDiscussion: IXGitHubUpdateTeamDiscussionPayload | null;

  /**
   * Updates a discussion comment.
   */
  updateTeamDiscussionComment: IXGitHubUpdateTeamDiscussionCommentPayload | null;

  /**
   * Replaces the repository's topics with the given topics.
   */
  updateTopics: IXGitHubUpdateTopicsPayload | null;

  /**
   * Verify that a verifiable domain has the expected DNS record.
   */
  verifyVerifiableDomain: IXGitHubVerifyVerifiableDomainPayload | null;
}

export interface IAcceptEnterpriseAdministratorInvitationOnXGitHubMutationArguments {
  /**
   * Parameters for AcceptEnterpriseAdministratorInvitation
   */
  input: IXGitHubAcceptEnterpriseAdministratorInvitationInput;
}

export interface IAcceptTopicSuggestionOnXGitHubMutationArguments {
  /**
   * Parameters for AcceptTopicSuggestion
   */
  input: IXGitHubAcceptTopicSuggestionInput;
}

export interface IAddAssigneesToAssignableOnXGitHubMutationArguments {
  /**
   * Parameters for AddAssigneesToAssignable
   */
  input: IXGitHubAddAssigneesToAssignableInput;
}

export interface IAddCommentOnXGitHubMutationArguments {
  /**
   * Parameters for AddComment
   */
  input: IXGitHubAddCommentInput;
}

export interface IAddDiscussionCommentOnXGitHubMutationArguments {
  /**
   * Parameters for AddDiscussionComment
   */
  input: IXGitHubAddDiscussionCommentInput;
}

export interface IAddEnterpriseSupportEntitlementOnXGitHubMutationArguments {
  /**
   * Parameters for AddEnterpriseSupportEntitlement
   */
  input: IXGitHubAddEnterpriseSupportEntitlementInput;
}

export interface IAddLabelsToLabelableOnXGitHubMutationArguments {
  /**
   * Parameters for AddLabelsToLabelable
   */
  input: IXGitHubAddLabelsToLabelableInput;
}

export interface IAddProjectCardOnXGitHubMutationArguments {
  /**
   * Parameters for AddProjectCard
   */
  input: IXGitHubAddProjectCardInput;
}

export interface IAddProjectColumnOnXGitHubMutationArguments {
  /**
   * Parameters for AddProjectColumn
   */
  input: IXGitHubAddProjectColumnInput;
}

export interface IAddPullRequestReviewOnXGitHubMutationArguments {
  /**
   * Parameters for AddPullRequestReview
   */
  input: IXGitHubAddPullRequestReviewInput;
}

export interface IAddPullRequestReviewCommentOnXGitHubMutationArguments {
  /**
   * Parameters for AddPullRequestReviewComment
   */
  input: IXGitHubAddPullRequestReviewCommentInput;
}

export interface IAddPullRequestReviewThreadOnXGitHubMutationArguments {
  /**
   * Parameters for AddPullRequestReviewThread
   */
  input: IXGitHubAddPullRequestReviewThreadInput;
}

export interface IAddReactionOnXGitHubMutationArguments {
  /**
   * Parameters for AddReaction
   */
  input: IXGitHubAddReactionInput;
}

export interface IAddStarOnXGitHubMutationArguments {
  /**
   * Parameters for AddStar
   */
  input: IXGitHubAddStarInput;
}

export interface IAddUpvoteOnXGitHubMutationArguments {
  /**
   * Parameters for AddUpvote
   */
  input: IXGitHubAddUpvoteInput;
}

export interface IAddVerifiableDomainOnXGitHubMutationArguments {
  /**
   * Parameters for AddVerifiableDomain
   */
  input: IXGitHubAddVerifiableDomainInput;
}

export interface IApproveDeploymentsOnXGitHubMutationArguments {
  /**
   * Parameters for ApproveDeployments
   */
  input: IXGitHubApproveDeploymentsInput;
}

export interface IApproveVerifiableDomainOnXGitHubMutationArguments {
  /**
   * Parameters for ApproveVerifiableDomain
   */
  input: IXGitHubApproveVerifiableDomainInput;
}

export interface IArchiveRepositoryOnXGitHubMutationArguments {
  /**
   * Parameters for ArchiveRepository
   */
  input: IXGitHubArchiveRepositoryInput;
}

export interface ICancelEnterpriseAdminInvitationOnXGitHubMutationArguments {
  /**
   * Parameters for CancelEnterpriseAdminInvitation
   */
  input: IXGitHubCancelEnterpriseAdminInvitationInput;
}

export interface IChangeUserStatusOnXGitHubMutationArguments {
  /**
   * Parameters for ChangeUserStatus
   */
  input: IXGitHubChangeUserStatusInput;
}

export interface IClearLabelsFromLabelableOnXGitHubMutationArguments {
  /**
   * Parameters for ClearLabelsFromLabelable
   */
  input: IXGitHubClearLabelsFromLabelableInput;
}

export interface ICloneProjectOnXGitHubMutationArguments {
  /**
   * Parameters for CloneProject
   */
  input: IXGitHubCloneProjectInput;
}

export interface ICloneTemplateRepositoryOnXGitHubMutationArguments {
  /**
   * Parameters for CloneTemplateRepository
   */
  input: IXGitHubCloneTemplateRepositoryInput;
}

export interface ICloseIssueOnXGitHubMutationArguments {
  /**
   * Parameters for CloseIssue
   */
  input: IXGitHubCloseIssueInput;
}

export interface IClosePullRequestOnXGitHubMutationArguments {
  /**
   * Parameters for ClosePullRequest
   */
  input: IXGitHubClosePullRequestInput;
}

export interface IConvertProjectCardNoteToIssueOnXGitHubMutationArguments {
  /**
   * Parameters for ConvertProjectCardNoteToIssue
   */
  input: IXGitHubConvertProjectCardNoteToIssueInput;
}

export interface IConvertPullRequestToDraftOnXGitHubMutationArguments {
  /**
   * Parameters for ConvertPullRequestToDraft
   */
  input: IXGitHubConvertPullRequestToDraftInput;
}

export interface ICreateBranchProtectionRuleOnXGitHubMutationArguments {
  /**
   * Parameters for CreateBranchProtectionRule
   */
  input: IXGitHubCreateBranchProtectionRuleInput;
}

export interface ICreateCheckRunOnXGitHubMutationArguments {
  /**
   * Parameters for CreateCheckRun
   */
  input: IXGitHubCreateCheckRunInput;
}

export interface ICreateCheckSuiteOnXGitHubMutationArguments {
  /**
   * Parameters for CreateCheckSuite
   */
  input: IXGitHubCreateCheckSuiteInput;
}

export interface ICreateDiscussionOnXGitHubMutationArguments {
  /**
   * Parameters for CreateDiscussion
   */
  input: IXGitHubCreateDiscussionInput;
}

export interface ICreateEnterpriseOrganizationOnXGitHubMutationArguments {
  /**
   * Parameters for CreateEnterpriseOrganization
   */
  input: IXGitHubCreateEnterpriseOrganizationInput;
}

export interface ICreateEnvironmentOnXGitHubMutationArguments {
  /**
   * Parameters for CreateEnvironment
   */
  input: IXGitHubCreateEnvironmentInput;
}

export interface ICreateIpAllowListEntryOnXGitHubMutationArguments {
  /**
   * Parameters for CreateIpAllowListEntry
   */
  input: IXGitHubCreateIpAllowListEntryInput;
}

export interface ICreateIssueOnXGitHubMutationArguments {
  /**
   * Parameters for CreateIssue
   */
  input: IXGitHubCreateIssueInput;
}

export interface ICreateProjectOnXGitHubMutationArguments {
  /**
   * Parameters for CreateProject
   */
  input: IXGitHubCreateProjectInput;
}

export interface ICreatePullRequestOnXGitHubMutationArguments {
  /**
   * Parameters for CreatePullRequest
   */
  input: IXGitHubCreatePullRequestInput;
}

export interface ICreateRefOnXGitHubMutationArguments {
  /**
   * Parameters for CreateRef
   */
  input: IXGitHubCreateRefInput;
}

export interface ICreateRepositoryOnXGitHubMutationArguments {
  /**
   * Parameters for CreateRepository
   */
  input: IXGitHubCreateRepositoryInput;
}

export interface ICreateSponsorshipOnXGitHubMutationArguments {
  /**
   * Parameters for CreateSponsorship
   */
  input: IXGitHubCreateSponsorshipInput;
}

export interface ICreateTeamDiscussionOnXGitHubMutationArguments {
  /**
   * Parameters for CreateTeamDiscussion
   */
  input: IXGitHubCreateTeamDiscussionInput;
}

export interface ICreateTeamDiscussionCommentOnXGitHubMutationArguments {
  /**
   * Parameters for CreateTeamDiscussionComment
   */
  input: IXGitHubCreateTeamDiscussionCommentInput;
}

export interface IDeclineTopicSuggestionOnXGitHubMutationArguments {
  /**
   * Parameters for DeclineTopicSuggestion
   */
  input: IXGitHubDeclineTopicSuggestionInput;
}

export interface IDeleteBranchProtectionRuleOnXGitHubMutationArguments {
  /**
   * Parameters for DeleteBranchProtectionRule
   */
  input: IXGitHubDeleteBranchProtectionRuleInput;
}

export interface IDeleteDeploymentOnXGitHubMutationArguments {
  /**
   * Parameters for DeleteDeployment
   */
  input: IXGitHubDeleteDeploymentInput;
}

export interface IDeleteDiscussionOnXGitHubMutationArguments {
  /**
   * Parameters for DeleteDiscussion
   */
  input: IXGitHubDeleteDiscussionInput;
}

export interface IDeleteDiscussionCommentOnXGitHubMutationArguments {
  /**
   * Parameters for DeleteDiscussionComment
   */
  input: IXGitHubDeleteDiscussionCommentInput;
}

export interface IDeleteEnvironmentOnXGitHubMutationArguments {
  /**
   * Parameters for DeleteEnvironment
   */
  input: IXGitHubDeleteEnvironmentInput;
}

export interface IDeleteIpAllowListEntryOnXGitHubMutationArguments {
  /**
   * Parameters for DeleteIpAllowListEntry
   */
  input: IXGitHubDeleteIpAllowListEntryInput;
}

export interface IDeleteIssueOnXGitHubMutationArguments {
  /**
   * Parameters for DeleteIssue
   */
  input: IXGitHubDeleteIssueInput;
}

export interface IDeleteIssueCommentOnXGitHubMutationArguments {
  /**
   * Parameters for DeleteIssueComment
   */
  input: IXGitHubDeleteIssueCommentInput;
}

export interface IDeleteProjectOnXGitHubMutationArguments {
  /**
   * Parameters for DeleteProject
   */
  input: IXGitHubDeleteProjectInput;
}

export interface IDeleteProjectCardOnXGitHubMutationArguments {
  /**
   * Parameters for DeleteProjectCard
   */
  input: IXGitHubDeleteProjectCardInput;
}

export interface IDeleteProjectColumnOnXGitHubMutationArguments {
  /**
   * Parameters for DeleteProjectColumn
   */
  input: IXGitHubDeleteProjectColumnInput;
}

export interface IDeletePullRequestReviewOnXGitHubMutationArguments {
  /**
   * Parameters for DeletePullRequestReview
   */
  input: IXGitHubDeletePullRequestReviewInput;
}

export interface IDeletePullRequestReviewCommentOnXGitHubMutationArguments {
  /**
   * Parameters for DeletePullRequestReviewComment
   */
  input: IXGitHubDeletePullRequestReviewCommentInput;
}

export interface IDeleteRefOnXGitHubMutationArguments {
  /**
   * Parameters for DeleteRef
   */
  input: IXGitHubDeleteRefInput;
}

export interface IDeleteTeamDiscussionOnXGitHubMutationArguments {
  /**
   * Parameters for DeleteTeamDiscussion
   */
  input: IXGitHubDeleteTeamDiscussionInput;
}

export interface IDeleteTeamDiscussionCommentOnXGitHubMutationArguments {
  /**
   * Parameters for DeleteTeamDiscussionComment
   */
  input: IXGitHubDeleteTeamDiscussionCommentInput;
}

export interface IDeleteVerifiableDomainOnXGitHubMutationArguments {
  /**
   * Parameters for DeleteVerifiableDomain
   */
  input: IXGitHubDeleteVerifiableDomainInput;
}

export interface IDisablePullRequestAutoMergeOnXGitHubMutationArguments {
  /**
   * Parameters for DisablePullRequestAutoMerge
   */
  input: IXGitHubDisablePullRequestAutoMergeInput;
}

export interface IDismissPullRequestReviewOnXGitHubMutationArguments {
  /**
   * Parameters for DismissPullRequestReview
   */
  input: IXGitHubDismissPullRequestReviewInput;
}

export interface IEnablePullRequestAutoMergeOnXGitHubMutationArguments {
  /**
   * Parameters for EnablePullRequestAutoMerge
   */
  input: IXGitHubEnablePullRequestAutoMergeInput;
}

export interface IFollowUserOnXGitHubMutationArguments {
  /**
   * Parameters for FollowUser
   */
  input: IXGitHubFollowUserInput;
}

export interface IInviteEnterpriseAdminOnXGitHubMutationArguments {
  /**
   * Parameters for InviteEnterpriseAdmin
   */
  input: IXGitHubInviteEnterpriseAdminInput;
}

export interface ILinkRepositoryToProjectOnXGitHubMutationArguments {
  /**
   * Parameters for LinkRepositoryToProject
   */
  input: IXGitHubLinkRepositoryToProjectInput;
}

export interface ILockLockableOnXGitHubMutationArguments {
  /**
   * Parameters for LockLockable
   */
  input: IXGitHubLockLockableInput;
}

export interface IMarkDiscussionCommentAsAnswerOnXGitHubMutationArguments {
  /**
   * Parameters for MarkDiscussionCommentAsAnswer
   */
  input: IXGitHubMarkDiscussionCommentAsAnswerInput;
}

export interface IMarkFileAsViewedOnXGitHubMutationArguments {
  /**
   * Parameters for MarkFileAsViewed
   */
  input: IXGitHubMarkFileAsViewedInput;
}

export interface IMarkPullRequestReadyForReviewOnXGitHubMutationArguments {
  /**
   * Parameters for MarkPullRequestReadyForReview
   */
  input: IXGitHubMarkPullRequestReadyForReviewInput;
}

export interface IMergeBranchOnXGitHubMutationArguments {
  /**
   * Parameters for MergeBranch
   */
  input: IXGitHubMergeBranchInput;
}

export interface IMergePullRequestOnXGitHubMutationArguments {
  /**
   * Parameters for MergePullRequest
   */
  input: IXGitHubMergePullRequestInput;
}

export interface IMinimizeCommentOnXGitHubMutationArguments {
  /**
   * Parameters for MinimizeComment
   */
  input: IXGitHubMinimizeCommentInput;
}

export interface IMoveProjectCardOnXGitHubMutationArguments {
  /**
   * Parameters for MoveProjectCard
   */
  input: IXGitHubMoveProjectCardInput;
}

export interface IMoveProjectColumnOnXGitHubMutationArguments {
  /**
   * Parameters for MoveProjectColumn
   */
  input: IXGitHubMoveProjectColumnInput;
}

export interface IPinIssueOnXGitHubMutationArguments {
  /**
   * Parameters for PinIssue
   */
  input: IXGitHubPinIssueInput;
}

export interface IRegenerateEnterpriseIdentityProviderRecoveryCodesOnXGitHubMutationArguments {
  /**
   * Parameters for RegenerateEnterpriseIdentityProviderRecoveryCodes
   */
  input: IXGitHubRegenerateEnterpriseIdentityProviderRecoveryCodesInput;
}

export interface IRegenerateVerifiableDomainTokenOnXGitHubMutationArguments {
  /**
   * Parameters for RegenerateVerifiableDomainToken
   */
  input: IXGitHubRegenerateVerifiableDomainTokenInput;
}

export interface IRejectDeploymentsOnXGitHubMutationArguments {
  /**
   * Parameters for RejectDeployments
   */
  input: IXGitHubRejectDeploymentsInput;
}

export interface IRemoveAssigneesFromAssignableOnXGitHubMutationArguments {
  /**
   * Parameters for RemoveAssigneesFromAssignable
   */
  input: IXGitHubRemoveAssigneesFromAssignableInput;
}

export interface IRemoveEnterpriseAdminOnXGitHubMutationArguments {
  /**
   * Parameters for RemoveEnterpriseAdmin
   */
  input: IXGitHubRemoveEnterpriseAdminInput;
}

export interface IRemoveEnterpriseIdentityProviderOnXGitHubMutationArguments {
  /**
   * Parameters for RemoveEnterpriseIdentityProvider
   */
  input: IXGitHubRemoveEnterpriseIdentityProviderInput;
}

export interface IRemoveEnterpriseOrganizationOnXGitHubMutationArguments {
  /**
   * Parameters for RemoveEnterpriseOrganization
   */
  input: IXGitHubRemoveEnterpriseOrganizationInput;
}

export interface IRemoveEnterpriseSupportEntitlementOnXGitHubMutationArguments {
  /**
   * Parameters for RemoveEnterpriseSupportEntitlement
   */
  input: IXGitHubRemoveEnterpriseSupportEntitlementInput;
}

export interface IRemoveLabelsFromLabelableOnXGitHubMutationArguments {
  /**
   * Parameters for RemoveLabelsFromLabelable
   */
  input: IXGitHubRemoveLabelsFromLabelableInput;
}

export interface IRemoveOutsideCollaboratorOnXGitHubMutationArguments {
  /**
   * Parameters for RemoveOutsideCollaborator
   */
  input: IXGitHubRemoveOutsideCollaboratorInput;
}

export interface IRemoveReactionOnXGitHubMutationArguments {
  /**
   * Parameters for RemoveReaction
   */
  input: IXGitHubRemoveReactionInput;
}

export interface IRemoveStarOnXGitHubMutationArguments {
  /**
   * Parameters for RemoveStar
   */
  input: IXGitHubRemoveStarInput;
}

export interface IRemoveUpvoteOnXGitHubMutationArguments {
  /**
   * Parameters for RemoveUpvote
   */
  input: IXGitHubRemoveUpvoteInput;
}

export interface IReopenIssueOnXGitHubMutationArguments {
  /**
   * Parameters for ReopenIssue
   */
  input: IXGitHubReopenIssueInput;
}

export interface IReopenPullRequestOnXGitHubMutationArguments {
  /**
   * Parameters for ReopenPullRequest
   */
  input: IXGitHubReopenPullRequestInput;
}

export interface IRequestReviewsOnXGitHubMutationArguments {
  /**
   * Parameters for RequestReviews
   */
  input: IXGitHubRequestReviewsInput;
}

export interface IRerequestCheckSuiteOnXGitHubMutationArguments {
  /**
   * Parameters for RerequestCheckSuite
   */
  input: IXGitHubRerequestCheckSuiteInput;
}

export interface IResolveReviewThreadOnXGitHubMutationArguments {
  /**
   * Parameters for ResolveReviewThread
   */
  input: IXGitHubResolveReviewThreadInput;
}

export interface ISetEnterpriseIdentityProviderOnXGitHubMutationArguments {
  /**
   * Parameters for SetEnterpriseIdentityProvider
   */
  input: IXGitHubSetEnterpriseIdentityProviderInput;
}

export interface ISetOrganizationInteractionLimitOnXGitHubMutationArguments {
  /**
   * Parameters for SetOrganizationInteractionLimit
   */
  input: IXGitHubSetOrganizationInteractionLimitInput;
}

export interface ISetRepositoryInteractionLimitOnXGitHubMutationArguments {
  /**
   * Parameters for SetRepositoryInteractionLimit
   */
  input: IXGitHubSetRepositoryInteractionLimitInput;
}

export interface ISetUserInteractionLimitOnXGitHubMutationArguments {
  /**
   * Parameters for SetUserInteractionLimit
   */
  input: IXGitHubSetUserInteractionLimitInput;
}

export interface ISubmitPullRequestReviewOnXGitHubMutationArguments {
  /**
   * Parameters for SubmitPullRequestReview
   */
  input: IXGitHubSubmitPullRequestReviewInput;
}

export interface ITransferIssueOnXGitHubMutationArguments {
  /**
   * Parameters for TransferIssue
   */
  input: IXGitHubTransferIssueInput;
}

export interface IUnarchiveRepositoryOnXGitHubMutationArguments {
  /**
   * Parameters for UnarchiveRepository
   */
  input: IXGitHubUnarchiveRepositoryInput;
}

export interface IUnfollowUserOnXGitHubMutationArguments {
  /**
   * Parameters for UnfollowUser
   */
  input: IXGitHubUnfollowUserInput;
}

export interface IUnlinkRepositoryFromProjectOnXGitHubMutationArguments {
  /**
   * Parameters for UnlinkRepositoryFromProject
   */
  input: IXGitHubUnlinkRepositoryFromProjectInput;
}

export interface IUnlockLockableOnXGitHubMutationArguments {
  /**
   * Parameters for UnlockLockable
   */
  input: IXGitHubUnlockLockableInput;
}

export interface IUnmarkDiscussionCommentAsAnswerOnXGitHubMutationArguments {
  /**
   * Parameters for UnmarkDiscussionCommentAsAnswer
   */
  input: IXGitHubUnmarkDiscussionCommentAsAnswerInput;
}

export interface IUnmarkFileAsViewedOnXGitHubMutationArguments {
  /**
   * Parameters for UnmarkFileAsViewed
   */
  input: IXGitHubUnmarkFileAsViewedInput;
}

export interface IUnmarkIssueAsDuplicateOnXGitHubMutationArguments {
  /**
   * Parameters for UnmarkIssueAsDuplicate
   */
  input: IXGitHubUnmarkIssueAsDuplicateInput;
}

export interface IUnminimizeCommentOnXGitHubMutationArguments {
  /**
   * Parameters for UnminimizeComment
   */
  input: IXGitHubUnminimizeCommentInput;
}

export interface IUnpinIssueOnXGitHubMutationArguments {
  /**
   * Parameters for UnpinIssue
   */
  input: IXGitHubUnpinIssueInput;
}

export interface IUnresolveReviewThreadOnXGitHubMutationArguments {
  /**
   * Parameters for UnresolveReviewThread
   */
  input: IXGitHubUnresolveReviewThreadInput;
}

export interface IUpdateBranchProtectionRuleOnXGitHubMutationArguments {
  /**
   * Parameters for UpdateBranchProtectionRule
   */
  input: IXGitHubUpdateBranchProtectionRuleInput;
}

export interface IUpdateCheckRunOnXGitHubMutationArguments {
  /**
   * Parameters for UpdateCheckRun
   */
  input: IXGitHubUpdateCheckRunInput;
}

export interface IUpdateCheckSuitePreferencesOnXGitHubMutationArguments {
  /**
   * Parameters for UpdateCheckSuitePreferences
   */
  input: IXGitHubUpdateCheckSuitePreferencesInput;
}

export interface IUpdateDiscussionOnXGitHubMutationArguments {
  /**
   * Parameters for UpdateDiscussion
   */
  input: IXGitHubUpdateDiscussionInput;
}

export interface IUpdateDiscussionCommentOnXGitHubMutationArguments {
  /**
   * Parameters for UpdateDiscussionComment
   */
  input: IXGitHubUpdateDiscussionCommentInput;
}

export interface IUpdateEnterpriseAdministratorRoleOnXGitHubMutationArguments {
  /**
   * Parameters for UpdateEnterpriseAdministratorRole
   */
  input: IXGitHubUpdateEnterpriseAdministratorRoleInput;
}

export interface IUpdateEnterpriseAllowPrivateRepositoryForkingSettingOnXGitHubMutationArguments {
  /**
   * Parameters for UpdateEnterpriseAllowPrivateRepositoryForkingSetting
   */
  input: IXGitHubUpdateEnterpriseAllowPrivateRepositoryForkingSettingInput;
}

export interface IUpdateEnterpriseDefaultRepositoryPermissionSettingOnXGitHubMutationArguments {
  /**
   * Parameters for UpdateEnterpriseDefaultRepositoryPermissionSetting
   */
  input: IXGitHubUpdateEnterpriseDefaultRepositoryPermissionSettingInput;
}

export interface IUpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingOnXGitHubMutationArguments {
  /**
   * Parameters for UpdateEnterpriseMembersCanChangeRepositoryVisibilitySetting
   */
  input: IXGitHubUpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingInput;
}

export interface IUpdateEnterpriseMembersCanCreateRepositoriesSettingOnXGitHubMutationArguments {
  /**
   * Parameters for UpdateEnterpriseMembersCanCreateRepositoriesSetting
   */
  input: IXGitHubUpdateEnterpriseMembersCanCreateRepositoriesSettingInput;
}

export interface IUpdateEnterpriseMembersCanDeleteIssuesSettingOnXGitHubMutationArguments {
  /**
   * Parameters for UpdateEnterpriseMembersCanDeleteIssuesSetting
   */
  input: IXGitHubUpdateEnterpriseMembersCanDeleteIssuesSettingInput;
}

export interface IUpdateEnterpriseMembersCanDeleteRepositoriesSettingOnXGitHubMutationArguments {
  /**
   * Parameters for UpdateEnterpriseMembersCanDeleteRepositoriesSetting
   */
  input: IXGitHubUpdateEnterpriseMembersCanDeleteRepositoriesSettingInput;
}

export interface IUpdateEnterpriseMembersCanInviteCollaboratorsSettingOnXGitHubMutationArguments {
  /**
   * Parameters for UpdateEnterpriseMembersCanInviteCollaboratorsSetting
   */
  input: IXGitHubUpdateEnterpriseMembersCanInviteCollaboratorsSettingInput;
}

export interface IUpdateEnterpriseMembersCanMakePurchasesSettingOnXGitHubMutationArguments {
  /**
   * Parameters for UpdateEnterpriseMembersCanMakePurchasesSetting
   */
  input: IXGitHubUpdateEnterpriseMembersCanMakePurchasesSettingInput;
}

export interface IUpdateEnterpriseMembersCanUpdateProtectedBranchesSettingOnXGitHubMutationArguments {
  /**
   * Parameters for UpdateEnterpriseMembersCanUpdateProtectedBranchesSetting
   */
  input: IXGitHubUpdateEnterpriseMembersCanUpdateProtectedBranchesSettingInput;
}

export interface IUpdateEnterpriseMembersCanViewDependencyInsightsSettingOnXGitHubMutationArguments {
  /**
   * Parameters for UpdateEnterpriseMembersCanViewDependencyInsightsSetting
   */
  input: IXGitHubUpdateEnterpriseMembersCanViewDependencyInsightsSettingInput;
}

export interface IUpdateEnterpriseOrganizationProjectsSettingOnXGitHubMutationArguments {
  /**
   * Parameters for UpdateEnterpriseOrganizationProjectsSetting
   */
  input: IXGitHubUpdateEnterpriseOrganizationProjectsSettingInput;
}

export interface IUpdateEnterpriseProfileOnXGitHubMutationArguments {
  /**
   * Parameters for UpdateEnterpriseProfile
   */
  input: IXGitHubUpdateEnterpriseProfileInput;
}

export interface IUpdateEnterpriseRepositoryProjectsSettingOnXGitHubMutationArguments {
  /**
   * Parameters for UpdateEnterpriseRepositoryProjectsSetting
   */
  input: IXGitHubUpdateEnterpriseRepositoryProjectsSettingInput;
}

export interface IUpdateEnterpriseTeamDiscussionsSettingOnXGitHubMutationArguments {
  /**
   * Parameters for UpdateEnterpriseTeamDiscussionsSetting
   */
  input: IXGitHubUpdateEnterpriseTeamDiscussionsSettingInput;
}

export interface IUpdateEnterpriseTwoFactorAuthenticationRequiredSettingOnXGitHubMutationArguments {
  /**
   * Parameters for UpdateEnterpriseTwoFactorAuthenticationRequiredSetting
   */
  input: IXGitHubUpdateEnterpriseTwoFactorAuthenticationRequiredSettingInput;
}

export interface IUpdateEnvironmentOnXGitHubMutationArguments {
  /**
   * Parameters for UpdateEnvironment
   */
  input: IXGitHubUpdateEnvironmentInput;
}

export interface IUpdateIpAllowListEnabledSettingOnXGitHubMutationArguments {
  /**
   * Parameters for UpdateIpAllowListEnabledSetting
   */
  input: IXGitHubUpdateIpAllowListEnabledSettingInput;
}

export interface IUpdateIpAllowListEntryOnXGitHubMutationArguments {
  /**
   * Parameters for UpdateIpAllowListEntry
   */
  input: IXGitHubUpdateIpAllowListEntryInput;
}

export interface IUpdateIpAllowListForInstalledAppsEnabledSettingOnXGitHubMutationArguments {
  /**
   * Parameters for UpdateIpAllowListForInstalledAppsEnabledSetting
   */
  input: IXGitHubUpdateIpAllowListForInstalledAppsEnabledSettingInput;
}

export interface IUpdateIssueOnXGitHubMutationArguments {
  /**
   * Parameters for UpdateIssue
   */
  input: IXGitHubUpdateIssueInput;
}

export interface IUpdateIssueCommentOnXGitHubMutationArguments {
  /**
   * Parameters for UpdateIssueComment
   */
  input: IXGitHubUpdateIssueCommentInput;
}

export interface IUpdateNotificationRestrictionSettingOnXGitHubMutationArguments {
  /**
   * Parameters for UpdateNotificationRestrictionSetting
   */
  input: IXGitHubUpdateNotificationRestrictionSettingInput;
}

export interface IUpdateProjectOnXGitHubMutationArguments {
  /**
   * Parameters for UpdateProject
   */
  input: IXGitHubUpdateProjectInput;
}

export interface IUpdateProjectCardOnXGitHubMutationArguments {
  /**
   * Parameters for UpdateProjectCard
   */
  input: IXGitHubUpdateProjectCardInput;
}

export interface IUpdateProjectColumnOnXGitHubMutationArguments {
  /**
   * Parameters for UpdateProjectColumn
   */
  input: IXGitHubUpdateProjectColumnInput;
}

export interface IUpdatePullRequestOnXGitHubMutationArguments {
  /**
   * Parameters for UpdatePullRequest
   */
  input: IXGitHubUpdatePullRequestInput;
}

export interface IUpdatePullRequestReviewOnXGitHubMutationArguments {
  /**
   * Parameters for UpdatePullRequestReview
   */
  input: IXGitHubUpdatePullRequestReviewInput;
}

export interface IUpdatePullRequestReviewCommentOnXGitHubMutationArguments {
  /**
   * Parameters for UpdatePullRequestReviewComment
   */
  input: IXGitHubUpdatePullRequestReviewCommentInput;
}

export interface IUpdateRefOnXGitHubMutationArguments {
  /**
   * Parameters for UpdateRef
   */
  input: IXGitHubUpdateRefInput;
}

export interface IUpdateRepositoryOnXGitHubMutationArguments {
  /**
   * Parameters for UpdateRepository
   */
  input: IXGitHubUpdateRepositoryInput;
}

export interface IUpdateSubscriptionOnXGitHubMutationArguments {
  /**
   * Parameters for UpdateSubscription
   */
  input: IXGitHubUpdateSubscriptionInput;
}

export interface IUpdateTeamDiscussionOnXGitHubMutationArguments {
  /**
   * Parameters for UpdateTeamDiscussion
   */
  input: IXGitHubUpdateTeamDiscussionInput;
}

export interface IUpdateTeamDiscussionCommentOnXGitHubMutationArguments {
  /**
   * Parameters for UpdateTeamDiscussionComment
   */
  input: IXGitHubUpdateTeamDiscussionCommentInput;
}

export interface IUpdateTopicsOnXGitHubMutationArguments {
  /**
   * Parameters for UpdateTopics
   */
  input: IXGitHubUpdateTopicsInput;
}

export interface IVerifyVerifiableDomainOnXGitHubMutationArguments {
  /**
   * Parameters for VerifyVerifiableDomain
   */
  input: IXGitHubVerifyVerifiableDomainInput;
}

/**
 * An object with an ID.
 */
export type _xGitHubNode =
  | IXGitHubAddedToProjectEvent
  | IXGitHubApp
  | IXGitHubAssignedEvent
  | IXGitHubAutoMergeDisabledEvent
  | IXGitHubAutoMergeEnabledEvent
  | IXGitHubAutoRebaseEnabledEvent
  | IXGitHubAutoSquashEnabledEvent
  | IXGitHubAutomaticBaseChangeFailedEvent
  | IXGitHubAutomaticBaseChangeSucceededEvent
  | IXGitHubBaseRefChangedEvent
  | IXGitHubBaseRefDeletedEvent
  | IXGitHubBaseRefForcePushedEvent
  | IXGitHubBlob
  | IXGitHubBot
  | IXGitHubBranchProtectionRule
  | IXGitHubCWE
  | IXGitHubCheckRun
  | IXGitHubCheckSuite
  | IXGitHubClosedEvent
  | IXGitHubCodeOfConduct
  | IXGitHubCommentDeletedEvent
  | IXGitHubCommit
  | IXGitHubCommitComment
  | IXGitHubCommitCommentThread
  | IXGitHubConnectedEvent
  | IXGitHubConvertToDraftEvent
  | IXGitHubConvertedNoteToIssueEvent
  | IXGitHubCrossReferencedEvent
  | IXGitHubDemilestonedEvent
  | IXGitHubDeployKey
  | IXGitHubDeployedEvent
  | IXGitHubDeployment
  | IXGitHubDeploymentEnvironmentChangedEvent
  | IXGitHubDeploymentReview
  | IXGitHubDeploymentStatus
  | IXGitHubDisconnectedEvent
  | IXGitHubDiscussion
  | IXGitHubDiscussionCategory
  | IXGitHubDiscussionComment
  | IXGitHubEnterprise
  | IXGitHubEnterpriseAdministratorInvitation
  | IXGitHubEnterpriseIdentityProvider
  | IXGitHubEnterpriseRepositoryInfo
  | IXGitHubEnterpriseServerInstallation
  | IXGitHubEnterpriseServerUserAccount
  | IXGitHubEnterpriseServerUserAccountEmail
  | IXGitHubEnterpriseServerUserAccountsUpload
  | IXGitHubEnterpriseUserAccount
  | IXGitHubEnvironment
  | IXGitHubExternalIdentity
  | IXGitHubGist
  | IXGitHubGistComment
  | IXGitHubHeadRefDeletedEvent
  | IXGitHubHeadRefForcePushedEvent
  | IXGitHubHeadRefRestoredEvent
  | IXGitHubIpAllowListEntry
  | IXGitHubIssue
  | IXGitHubIssueComment
  | IXGitHubLabel
  | IXGitHubLabeledEvent
  | IXGitHubLanguage
  | IXGitHubLicense
  | IXGitHubLockedEvent
  | IXGitHubMannequin
  | IXGitHubMarkedAsDuplicateEvent
  | IXGitHubMarketplaceCategory
  | IXGitHubMarketplaceListing
  | IXGitHubMembersCanDeleteReposClearAuditEntry
  | IXGitHubMembersCanDeleteReposDisableAuditEntry
  | IXGitHubMembersCanDeleteReposEnableAuditEntry
  | IXGitHubMentionedEvent
  | IXGitHubMergedEvent
  | IXGitHubMilestone
  | IXGitHubMilestonedEvent
  | IXGitHubMovedColumnsInProjectEvent
  | IXGitHubOauthApplicationCreateAuditEntry
  | IXGitHubOrgAddBillingManagerAuditEntry
  | IXGitHubOrgAddMemberAuditEntry
  | IXGitHubOrgBlockUserAuditEntry
  | IXGitHubOrgConfigDisableCollaboratorsOnlyAuditEntry
  | IXGitHubOrgConfigEnableCollaboratorsOnlyAuditEntry
  | IXGitHubOrgCreateAuditEntry
  | IXGitHubOrgDisableOauthAppRestrictionsAuditEntry
  | IXGitHubOrgDisableSamlAuditEntry
  | IXGitHubOrgDisableTwoFactorRequirementAuditEntry
  | IXGitHubOrgEnableOauthAppRestrictionsAuditEntry
  | IXGitHubOrgEnableSamlAuditEntry
  | IXGitHubOrgEnableTwoFactorRequirementAuditEntry
  | IXGitHubOrgInviteMemberAuditEntry
  | IXGitHubOrgInviteToBusinessAuditEntry
  | IXGitHubOrgOauthAppAccessApprovedAuditEntry
  | IXGitHubOrgOauthAppAccessDeniedAuditEntry
  | IXGitHubOrgOauthAppAccessRequestedAuditEntry
  | IXGitHubOrgRemoveBillingManagerAuditEntry
  | IXGitHubOrgRemoveMemberAuditEntry
  | IXGitHubOrgRemoveOutsideCollaboratorAuditEntry
  | IXGitHubOrgRestoreMemberAuditEntry
  | IXGitHubOrgUnblockUserAuditEntry
  | IXGitHubOrgUpdateDefaultRepositoryPermissionAuditEntry
  | IXGitHubOrgUpdateMemberAuditEntry
  | IXGitHubOrgUpdateMemberRepositoryCreationPermissionAuditEntry
  | IXGitHubOrgUpdateMemberRepositoryInvitationPermissionAuditEntry
  | IXGitHubOrganization
  | IXGitHubOrganizationIdentityProvider
  | IXGitHubOrganizationInvitation
  | IXGitHubPackage
  | IXGitHubPackageFile
  | IXGitHubPackageTag
  | IXGitHubPackageVersion
  | IXGitHubPinnedDiscussion
  | IXGitHubPinnedEvent
  | IXGitHubPinnedIssue
  | IXGitHubPrivateRepositoryForkingDisableAuditEntry
  | IXGitHubPrivateRepositoryForkingEnableAuditEntry
  | IXGitHubProject
  | IXGitHubProjectCard
  | IXGitHubProjectColumn
  | IXGitHubPublicKey
  | IXGitHubPullRequest
  | IXGitHubPullRequestCommit
  | IXGitHubPullRequestCommitCommentThread
  | IXGitHubPullRequestReview
  | IXGitHubPullRequestReviewComment
  | IXGitHubPullRequestReviewThread
  | IXGitHubPush
  | IXGitHubPushAllowance
  | IXGitHubReaction
  | IXGitHubReadyForReviewEvent
  | IXGitHubRef
  | IXGitHubReferencedEvent
  | IXGitHubRelease
  | IXGitHubReleaseAsset
  | IXGitHubRemovedFromProjectEvent
  | IXGitHubRenamedTitleEvent
  | IXGitHubReopenedEvent
  | IXGitHubRepoAccessAuditEntry
  | IXGitHubRepoAddMemberAuditEntry
  | IXGitHubRepoAddTopicAuditEntry
  | IXGitHubRepoArchivedAuditEntry
  | IXGitHubRepoChangeMergeSettingAuditEntry
  | IXGitHubRepoConfigDisableAnonymousGitAccessAuditEntry
  | IXGitHubRepoConfigDisableCollaboratorsOnlyAuditEntry
  | IXGitHubRepoConfigDisableContributorsOnlyAuditEntry
  | IXGitHubRepoConfigDisableSockpuppetDisallowedAuditEntry
  | IXGitHubRepoConfigEnableAnonymousGitAccessAuditEntry
  | IXGitHubRepoConfigEnableCollaboratorsOnlyAuditEntry
  | IXGitHubRepoConfigEnableContributorsOnlyAuditEntry
  | IXGitHubRepoConfigEnableSockpuppetDisallowedAuditEntry
  | IXGitHubRepoConfigLockAnonymousGitAccessAuditEntry
  | IXGitHubRepoConfigUnlockAnonymousGitAccessAuditEntry
  | IXGitHubRepoCreateAuditEntry
  | IXGitHubRepoDestroyAuditEntry
  | IXGitHubRepoRemoveMemberAuditEntry
  | IXGitHubRepoRemoveTopicAuditEntry
  | IXGitHubRepository
  | IXGitHubRepositoryInvitation
  | IXGitHubRepositoryTopic
  | IXGitHubRepositoryVisibilityChangeDisableAuditEntry
  | IXGitHubRepositoryVisibilityChangeEnableAuditEntry
  | IXGitHubRepositoryVulnerabilityAlert
  | IXGitHubReviewDismissalAllowance
  | IXGitHubReviewDismissedEvent
  | IXGitHubReviewRequest
  | IXGitHubReviewRequestRemovedEvent
  | IXGitHubReviewRequestedEvent
  | IXGitHubSavedReply
  | IXGitHubSecurityAdvisory
  | IXGitHubSponsorsActivity
  | IXGitHubSponsorsListing
  | IXGitHubSponsorsTier
  | IXGitHubSponsorship
  | IXGitHubSponsorshipNewsletter
  | IXGitHubStatus
  | IXGitHubStatusCheckRollup
  | IXGitHubStatusContext
  | IXGitHubSubscribedEvent
  | IXGitHubTag
  | IXGitHubTeam
  | IXGitHubTeamAddMemberAuditEntry
  | IXGitHubTeamAddRepositoryAuditEntry
  | IXGitHubTeamChangeParentTeamAuditEntry
  | IXGitHubTeamDiscussion
  | IXGitHubTeamDiscussionComment
  | IXGitHubTeamRemoveMemberAuditEntry
  | IXGitHubTeamRemoveRepositoryAuditEntry
  | IXGitHubTopic
  | IXGitHubTransferredEvent
  | IXGitHubTree
  | IXGitHubUnassignedEvent
  | IXGitHubUnlabeledEvent
  | IXGitHubUnlockedEvent
  | IXGitHubUnmarkedAsDuplicateEvent
  | IXGitHubUnpinnedEvent
  | IXGitHubUnsubscribedEvent
  | IXGitHubUser
  | IXGitHubUserBlockedEvent
  | IXGitHubUserContentEdit
  | IXGitHubUserStatus
  | IXGitHubVerifiableDomain
  | IXGitHubWorkflow
  | IXGitHubWorkflowRun;

/**
 * An object with an ID.
 */
export interface IXGitHubNode {
  __typename: '_xGitHubNode';

  /**
   * ID of the object.
   */
  id: string;
}

/**
 * The possible values for the notification restriction setting.
 */
export const enum XGitHubNotificationRestrictionSettingValue {
  /**
   * The setting is disabled for the owner.
   */
  DISABLED = 'DISABLED',

  /**
   * The setting is enabled for the owner.
   */
  ENABLED = 'ENABLED'
}

/**
 * Metadata for an audit entry with action oauth_application.*
 */
export type _xGitHubOauthApplicationAuditEntryData =
  | IXGitHubOauthApplicationCreateAuditEntry
  | IXGitHubOrgOauthAppAccessApprovedAuditEntry
  | IXGitHubOrgOauthAppAccessDeniedAuditEntry
  | IXGitHubOrgOauthAppAccessRequestedAuditEntry;

/**
 * Metadata for an audit entry with action oauth_application.*
 */
export interface IXGitHubOauthApplicationAuditEntryData {
  __typename: '_xGitHubOauthApplicationAuditEntryData';

  /**
   * The name of the OAuth Application.
   */
  oauthApplicationName: string | null;

  /**
   * The HTTP path for the OAuth Application
   */
  oauthApplicationResourcePath: any | null;

  /**
   * The HTTP URL for the OAuth Application
   */
  oauthApplicationUrl: any | null;
}

/**
 * Audit log entry for a oauth_application.create event.
 */
export interface IXGitHubOauthApplicationCreateAuditEntry {
  __typename: '_xGitHubOauthApplicationCreateAuditEntry';

  /**
   * The action name
   */
  action: string;

  /**
   * The user who initiated the action
   */
  actor: _xGitHubAuditEntryActor | null;

  /**
   * The IP address of the actor
   */
  actorIp: string | null;

  /**
   * A readable representation of the actor's location
   */
  actorLocation: IXGitHubActorLocation | null;

  /**
   * The username of the user who initiated the action
   */
  actorLogin: string | null;

  /**
   * The HTTP path for the actor.
   */
  actorResourcePath: any | null;

  /**
   * The HTTP URL for the actor.
   */
  actorUrl: any | null;

  /**
   * The application URL of the OAuth Application.
   */
  applicationUrl: any | null;

  /**
   * The callback URL of the OAuth Application.
   */
  callbackUrl: any | null;

  /**
   * The time the action was initiated
   */
  createdAt: any;
  id: string;

  /**
   * The name of the OAuth Application.
   */
  oauthApplicationName: string | null;

  /**
   * The HTTP path for the OAuth Application
   */
  oauthApplicationResourcePath: any | null;

  /**
   * The HTTP URL for the OAuth Application
   */
  oauthApplicationUrl: any | null;

  /**
   * The corresponding operation type for the action
   */
  operationType: XGitHubOperationType | null;

  /**
   * The Organization associated with the Audit Entry.
   */
  organization: IXGitHubOrganization | null;

  /**
   * The name of the Organization.
   */
  organizationName: string | null;

  /**
   * The HTTP path for the organization
   */
  organizationResourcePath: any | null;

  /**
   * The HTTP URL for the organization
   */
  organizationUrl: any | null;

  /**
   * The rate limit of the OAuth Application.
   */
  rateLimit: number | null;

  /**
   * The state of the OAuth Application.
   */
  state: XGitHubOauthApplicationCreateAuditEntryState | null;

  /**
   * The user affected by the action
   */
  user: IXGitHubUser | null;

  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin: string | null;

  /**
   * The HTTP path for the user.
   */
  userResourcePath: any | null;

  /**
   * The HTTP URL for the user.
   */
  userUrl: any | null;
}

/**
 * The state of an OAuth Application when it was created.
 */
export const enum XGitHubOauthApplicationCreateAuditEntryState {
  /**
   * The OAuth Application was active and allowed to have OAuth Accesses.
   */
  ACTIVE = 'ACTIVE',

  /**
   * The OAuth Application was in the process of being deleted.
   */
  PENDING_DELETION = 'PENDING_DELETION',

  /**
   * The OAuth Application was suspended from generating OAuth Accesses due to abuse or security concerns.
   */
  SUSPENDED = 'SUSPENDED'
}

/**
 * The corresponding operation type for the action
 */
export const enum XGitHubOperationType {
  /**
   * An existing resource was accessed
   */
  ACCESS = 'ACCESS',

  /**
   * A resource performed an authentication event
   */
  AUTHENTICATION = 'AUTHENTICATION',

  /**
   * A new resource was created
   */
  CREATE = 'CREATE',

  /**
   * An existing resource was modified
   */
  MODIFY = 'MODIFY',

  /**
   * An existing resource was removed
   */
  REMOVE = 'REMOVE',

  /**
   * An existing resource was restored
   */
  RESTORE = 'RESTORE',

  /**
   * An existing resource was transferred between multiple resources
   */
  TRANSFER = 'TRANSFER'
}

/**
 * Possible directions in which to order a list of items when provided an `orderBy` argument.
 */
export const enum XGitHubOrderDirection {
  /**
   * Specifies an ascending order for a given `orderBy` argument.
   */
  ASC = 'ASC',

  /**
   * Specifies a descending order for a given `orderBy` argument.
   */
  DESC = 'DESC'
}

/**
 * Audit log entry for a org.add_billing_manager
 */
export interface IXGitHubOrgAddBillingManagerAuditEntry {
  __typename: '_xGitHubOrgAddBillingManagerAuditEntry';

  /**
   * The action name
   */
  action: string;

  /**
   * The user who initiated the action
   */
  actor: _xGitHubAuditEntryActor | null;

  /**
   * The IP address of the actor
   */
  actorIp: string | null;

  /**
   * A readable representation of the actor's location
   */
  actorLocation: IXGitHubActorLocation | null;

  /**
   * The username of the user who initiated the action
   */
  actorLogin: string | null;

  /**
   * The HTTP path for the actor.
   */
  actorResourcePath: any | null;

  /**
   * The HTTP URL for the actor.
   */
  actorUrl: any | null;

  /**
   * The time the action was initiated
   */
  createdAt: any;
  id: string;

  /**
   * The email address used to invite a billing manager for the organization.
   */
  invitationEmail: string | null;

  /**
   * The corresponding operation type for the action
   */
  operationType: XGitHubOperationType | null;

  /**
   * The Organization associated with the Audit Entry.
   */
  organization: IXGitHubOrganization | null;

  /**
   * The name of the Organization.
   */
  organizationName: string | null;

  /**
   * The HTTP path for the organization
   */
  organizationResourcePath: any | null;

  /**
   * The HTTP URL for the organization
   */
  organizationUrl: any | null;

  /**
   * The user affected by the action
   */
  user: IXGitHubUser | null;

  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin: string | null;

  /**
   * The HTTP path for the user.
   */
  userResourcePath: any | null;

  /**
   * The HTTP URL for the user.
   */
  userUrl: any | null;
}

/**
 * Audit log entry for a org.add_member
 */
export interface IXGitHubOrgAddMemberAuditEntry {
  __typename: '_xGitHubOrgAddMemberAuditEntry';

  /**
   * The action name
   */
  action: string;

  /**
   * The user who initiated the action
   */
  actor: _xGitHubAuditEntryActor | null;

  /**
   * The IP address of the actor
   */
  actorIp: string | null;

  /**
   * A readable representation of the actor's location
   */
  actorLocation: IXGitHubActorLocation | null;

  /**
   * The username of the user who initiated the action
   */
  actorLogin: string | null;

  /**
   * The HTTP path for the actor.
   */
  actorResourcePath: any | null;

  /**
   * The HTTP URL for the actor.
   */
  actorUrl: any | null;

  /**
   * The time the action was initiated
   */
  createdAt: any;
  id: string;

  /**
   * The corresponding operation type for the action
   */
  operationType: XGitHubOperationType | null;

  /**
   * The Organization associated with the Audit Entry.
   */
  organization: IXGitHubOrganization | null;

  /**
   * The name of the Organization.
   */
  organizationName: string | null;

  /**
   * The HTTP path for the organization
   */
  organizationResourcePath: any | null;

  /**
   * The HTTP URL for the organization
   */
  organizationUrl: any | null;

  /**
   * The permission level of the member added to the organization.
   */
  permission: XGitHubOrgAddMemberAuditEntryPermission | null;

  /**
   * The user affected by the action
   */
  user: IXGitHubUser | null;

  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin: string | null;

  /**
   * The HTTP path for the user.
   */
  userResourcePath: any | null;

  /**
   * The HTTP URL for the user.
   */
  userUrl: any | null;
}

/**
 * The permissions available to members on an Organization.
 */
export const enum XGitHubOrgAddMemberAuditEntryPermission {
  /**
   * Can read, clone, push, and add collaborators to repositories.
   */
  ADMIN = 'ADMIN',

  /**
   * Can read and clone repositories.
   */
  READ = 'READ'
}

/**
 * Audit log entry for a org.block_user
 */
export interface IXGitHubOrgBlockUserAuditEntry {
  __typename: '_xGitHubOrgBlockUserAuditEntry';

  /**
   * The action name
   */
  action: string;

  /**
   * The user who initiated the action
   */
  actor: _xGitHubAuditEntryActor | null;

  /**
   * The IP address of the actor
   */
  actorIp: string | null;

  /**
   * A readable representation of the actor's location
   */
  actorLocation: IXGitHubActorLocation | null;

  /**
   * The username of the user who initiated the action
   */
  actorLogin: string | null;

  /**
   * The HTTP path for the actor.
   */
  actorResourcePath: any | null;

  /**
   * The HTTP URL for the actor.
   */
  actorUrl: any | null;

  /**
   * The blocked user.
   */
  blockedUser: IXGitHubUser | null;

  /**
   * The username of the blocked user.
   */
  blockedUserName: string | null;

  /**
   * The HTTP path for the blocked user.
   */
  blockedUserResourcePath: any | null;

  /**
   * The HTTP URL for the blocked user.
   */
  blockedUserUrl: any | null;

  /**
   * The time the action was initiated
   */
  createdAt: any;
  id: string;

  /**
   * The corresponding operation type for the action
   */
  operationType: XGitHubOperationType | null;

  /**
   * The Organization associated with the Audit Entry.
   */
  organization: IXGitHubOrganization | null;

  /**
   * The name of the Organization.
   */
  organizationName: string | null;

  /**
   * The HTTP path for the organization
   */
  organizationResourcePath: any | null;

  /**
   * The HTTP URL for the organization
   */
  organizationUrl: any | null;

  /**
   * The user affected by the action
   */
  user: IXGitHubUser | null;

  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin: string | null;

  /**
   * The HTTP path for the user.
   */
  userResourcePath: any | null;

  /**
   * The HTTP URL for the user.
   */
  userUrl: any | null;
}

/**
 * Audit log entry for a org.config.disable_collaborators_only event.
 */
export interface IXGitHubOrgConfigDisableCollaboratorsOnlyAuditEntry {
  __typename: '_xGitHubOrgConfigDisableCollaboratorsOnlyAuditEntry';

  /**
   * The action name
   */
  action: string;

  /**
   * The user who initiated the action
   */
  actor: _xGitHubAuditEntryActor | null;

  /**
   * The IP address of the actor
   */
  actorIp: string | null;

  /**
   * A readable representation of the actor's location
   */
  actorLocation: IXGitHubActorLocation | null;

  /**
   * The username of the user who initiated the action
   */
  actorLogin: string | null;

  /**
   * The HTTP path for the actor.
   */
  actorResourcePath: any | null;

  /**
   * The HTTP URL for the actor.
   */
  actorUrl: any | null;

  /**
   * The time the action was initiated
   */
  createdAt: any;
  id: string;

  /**
   * The corresponding operation type for the action
   */
  operationType: XGitHubOperationType | null;

  /**
   * The Organization associated with the Audit Entry.
   */
  organization: IXGitHubOrganization | null;

  /**
   * The name of the Organization.
   */
  organizationName: string | null;

  /**
   * The HTTP path for the organization
   */
  organizationResourcePath: any | null;

  /**
   * The HTTP URL for the organization
   */
  organizationUrl: any | null;

  /**
   * The user affected by the action
   */
  user: IXGitHubUser | null;

  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin: string | null;

  /**
   * The HTTP path for the user.
   */
  userResourcePath: any | null;

  /**
   * The HTTP URL for the user.
   */
  userUrl: any | null;
}

/**
 * Audit log entry for a org.config.enable_collaborators_only event.
 */
export interface IXGitHubOrgConfigEnableCollaboratorsOnlyAuditEntry {
  __typename: '_xGitHubOrgConfigEnableCollaboratorsOnlyAuditEntry';

  /**
   * The action name
   */
  action: string;

  /**
   * The user who initiated the action
   */
  actor: _xGitHubAuditEntryActor | null;

  /**
   * The IP address of the actor
   */
  actorIp: string | null;

  /**
   * A readable representation of the actor's location
   */
  actorLocation: IXGitHubActorLocation | null;

  /**
   * The username of the user who initiated the action
   */
  actorLogin: string | null;

  /**
   * The HTTP path for the actor.
   */
  actorResourcePath: any | null;

  /**
   * The HTTP URL for the actor.
   */
  actorUrl: any | null;

  /**
   * The time the action was initiated
   */
  createdAt: any;
  id: string;

  /**
   * The corresponding operation type for the action
   */
  operationType: XGitHubOperationType | null;

  /**
   * The Organization associated with the Audit Entry.
   */
  organization: IXGitHubOrganization | null;

  /**
   * The name of the Organization.
   */
  organizationName: string | null;

  /**
   * The HTTP path for the organization
   */
  organizationResourcePath: any | null;

  /**
   * The HTTP URL for the organization
   */
  organizationUrl: any | null;

  /**
   * The user affected by the action
   */
  user: IXGitHubUser | null;

  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin: string | null;

  /**
   * The HTTP path for the user.
   */
  userResourcePath: any | null;

  /**
   * The HTTP URL for the user.
   */
  userUrl: any | null;
}

/**
 * Audit log entry for a org.create event.
 */
export interface IXGitHubOrgCreateAuditEntry {
  __typename: '_xGitHubOrgCreateAuditEntry';

  /**
   * The action name
   */
  action: string;

  /**
   * The user who initiated the action
   */
  actor: _xGitHubAuditEntryActor | null;

  /**
   * The IP address of the actor
   */
  actorIp: string | null;

  /**
   * A readable representation of the actor's location
   */
  actorLocation: IXGitHubActorLocation | null;

  /**
   * The username of the user who initiated the action
   */
  actorLogin: string | null;

  /**
   * The HTTP path for the actor.
   */
  actorResourcePath: any | null;

  /**
   * The HTTP URL for the actor.
   */
  actorUrl: any | null;

  /**
   * The billing plan for the Organization.
   */
  billingPlan: XGitHubOrgCreateAuditEntryBillingPlan | null;

  /**
   * The time the action was initiated
   */
  createdAt: any;
  id: string;

  /**
   * The corresponding operation type for the action
   */
  operationType: XGitHubOperationType | null;

  /**
   * The Organization associated with the Audit Entry.
   */
  organization: IXGitHubOrganization | null;

  /**
   * The name of the Organization.
   */
  organizationName: string | null;

  /**
   * The HTTP path for the organization
   */
  organizationResourcePath: any | null;

  /**
   * The HTTP URL for the organization
   */
  organizationUrl: any | null;

  /**
   * The user affected by the action
   */
  user: IXGitHubUser | null;

  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin: string | null;

  /**
   * The HTTP path for the user.
   */
  userResourcePath: any | null;

  /**
   * The HTTP URL for the user.
   */
  userUrl: any | null;
}

/**
 * The billing plans available for organizations.
 */
export const enum XGitHubOrgCreateAuditEntryBillingPlan {
  /**
   * Team Plan
   */
  BUSINESS = 'BUSINESS',

  /**
   * Enterprise Cloud Plan
   */
  BUSINESS_PLUS = 'BUSINESS_PLUS',

  /**
   * Free Plan
   */
  FREE = 'FREE',

  /**
   * Tiered Per Seat Plan
   */
  TIERED_PER_SEAT = 'TIERED_PER_SEAT',

  /**
   * Legacy Unlimited Plan
   */
  UNLIMITED = 'UNLIMITED'
}

/**
 * Audit log entry for a org.disable_oauth_app_restrictions event.
 */
export interface IXGitHubOrgDisableOauthAppRestrictionsAuditEntry {
  __typename: '_xGitHubOrgDisableOauthAppRestrictionsAuditEntry';

  /**
   * The action name
   */
  action: string;

  /**
   * The user who initiated the action
   */
  actor: _xGitHubAuditEntryActor | null;

  /**
   * The IP address of the actor
   */
  actorIp: string | null;

  /**
   * A readable representation of the actor's location
   */
  actorLocation: IXGitHubActorLocation | null;

  /**
   * The username of the user who initiated the action
   */
  actorLogin: string | null;

  /**
   * The HTTP path for the actor.
   */
  actorResourcePath: any | null;

  /**
   * The HTTP URL for the actor.
   */
  actorUrl: any | null;

  /**
   * The time the action was initiated
   */
  createdAt: any;
  id: string;

  /**
   * The corresponding operation type for the action
   */
  operationType: XGitHubOperationType | null;

  /**
   * The Organization associated with the Audit Entry.
   */
  organization: IXGitHubOrganization | null;

  /**
   * The name of the Organization.
   */
  organizationName: string | null;

  /**
   * The HTTP path for the organization
   */
  organizationResourcePath: any | null;

  /**
   * The HTTP URL for the organization
   */
  organizationUrl: any | null;

  /**
   * The user affected by the action
   */
  user: IXGitHubUser | null;

  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin: string | null;

  /**
   * The HTTP path for the user.
   */
  userResourcePath: any | null;

  /**
   * The HTTP URL for the user.
   */
  userUrl: any | null;
}

/**
 * Audit log entry for a org.disable_saml event.
 */
export interface IXGitHubOrgDisableSamlAuditEntry {
  __typename: '_xGitHubOrgDisableSamlAuditEntry';

  /**
   * The action name
   */
  action: string;

  /**
   * The user who initiated the action
   */
  actor: _xGitHubAuditEntryActor | null;

  /**
   * The IP address of the actor
   */
  actorIp: string | null;

  /**
   * A readable representation of the actor's location
   */
  actorLocation: IXGitHubActorLocation | null;

  /**
   * The username of the user who initiated the action
   */
  actorLogin: string | null;

  /**
   * The HTTP path for the actor.
   */
  actorResourcePath: any | null;

  /**
   * The HTTP URL for the actor.
   */
  actorUrl: any | null;

  /**
   * The time the action was initiated
   */
  createdAt: any;

  /**
   * The SAML provider's digest algorithm URL.
   */
  digestMethodUrl: any | null;
  id: string;

  /**
   * The SAML provider's issuer URL.
   */
  issuerUrl: any | null;

  /**
   * The corresponding operation type for the action
   */
  operationType: XGitHubOperationType | null;

  /**
   * The Organization associated with the Audit Entry.
   */
  organization: IXGitHubOrganization | null;

  /**
   * The name of the Organization.
   */
  organizationName: string | null;

  /**
   * The HTTP path for the organization
   */
  organizationResourcePath: any | null;

  /**
   * The HTTP URL for the organization
   */
  organizationUrl: any | null;

  /**
   * The SAML provider's signature algorithm URL.
   */
  signatureMethodUrl: any | null;

  /**
   * The SAML provider's single sign-on URL.
   */
  singleSignOnUrl: any | null;

  /**
   * The user affected by the action
   */
  user: IXGitHubUser | null;

  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin: string | null;

  /**
   * The HTTP path for the user.
   */
  userResourcePath: any | null;

  /**
   * The HTTP URL for the user.
   */
  userUrl: any | null;
}

/**
 * Audit log entry for a org.disable_two_factor_requirement event.
 */
export interface IXGitHubOrgDisableTwoFactorRequirementAuditEntry {
  __typename: '_xGitHubOrgDisableTwoFactorRequirementAuditEntry';

  /**
   * The action name
   */
  action: string;

  /**
   * The user who initiated the action
   */
  actor: _xGitHubAuditEntryActor | null;

  /**
   * The IP address of the actor
   */
  actorIp: string | null;

  /**
   * A readable representation of the actor's location
   */
  actorLocation: IXGitHubActorLocation | null;

  /**
   * The username of the user who initiated the action
   */
  actorLogin: string | null;

  /**
   * The HTTP path for the actor.
   */
  actorResourcePath: any | null;

  /**
   * The HTTP URL for the actor.
   */
  actorUrl: any | null;

  /**
   * The time the action was initiated
   */
  createdAt: any;
  id: string;

  /**
   * The corresponding operation type for the action
   */
  operationType: XGitHubOperationType | null;

  /**
   * The Organization associated with the Audit Entry.
   */
  organization: IXGitHubOrganization | null;

  /**
   * The name of the Organization.
   */
  organizationName: string | null;

  /**
   * The HTTP path for the organization
   */
  organizationResourcePath: any | null;

  /**
   * The HTTP URL for the organization
   */
  organizationUrl: any | null;

  /**
   * The user affected by the action
   */
  user: IXGitHubUser | null;

  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin: string | null;

  /**
   * The HTTP path for the user.
   */
  userResourcePath: any | null;

  /**
   * The HTTP URL for the user.
   */
  userUrl: any | null;
}

/**
 * Audit log entry for a org.enable_oauth_app_restrictions event.
 */
export interface IXGitHubOrgEnableOauthAppRestrictionsAuditEntry {
  __typename: '_xGitHubOrgEnableOauthAppRestrictionsAuditEntry';

  /**
   * The action name
   */
  action: string;

  /**
   * The user who initiated the action
   */
  actor: _xGitHubAuditEntryActor | null;

  /**
   * The IP address of the actor
   */
  actorIp: string | null;

  /**
   * A readable representation of the actor's location
   */
  actorLocation: IXGitHubActorLocation | null;

  /**
   * The username of the user who initiated the action
   */
  actorLogin: string | null;

  /**
   * The HTTP path for the actor.
   */
  actorResourcePath: any | null;

  /**
   * The HTTP URL for the actor.
   */
  actorUrl: any | null;

  /**
   * The time the action was initiated
   */
  createdAt: any;
  id: string;

  /**
   * The corresponding operation type for the action
   */
  operationType: XGitHubOperationType | null;

  /**
   * The Organization associated with the Audit Entry.
   */
  organization: IXGitHubOrganization | null;

  /**
   * The name of the Organization.
   */
  organizationName: string | null;

  /**
   * The HTTP path for the organization
   */
  organizationResourcePath: any | null;

  /**
   * The HTTP URL for the organization
   */
  organizationUrl: any | null;

  /**
   * The user affected by the action
   */
  user: IXGitHubUser | null;

  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin: string | null;

  /**
   * The HTTP path for the user.
   */
  userResourcePath: any | null;

  /**
   * The HTTP URL for the user.
   */
  userUrl: any | null;
}

/**
 * Audit log entry for a org.enable_saml event.
 */
export interface IXGitHubOrgEnableSamlAuditEntry {
  __typename: '_xGitHubOrgEnableSamlAuditEntry';

  /**
   * The action name
   */
  action: string;

  /**
   * The user who initiated the action
   */
  actor: _xGitHubAuditEntryActor | null;

  /**
   * The IP address of the actor
   */
  actorIp: string | null;

  /**
   * A readable representation of the actor's location
   */
  actorLocation: IXGitHubActorLocation | null;

  /**
   * The username of the user who initiated the action
   */
  actorLogin: string | null;

  /**
   * The HTTP path for the actor.
   */
  actorResourcePath: any | null;

  /**
   * The HTTP URL for the actor.
   */
  actorUrl: any | null;

  /**
   * The time the action was initiated
   */
  createdAt: any;

  /**
   * The SAML provider's digest algorithm URL.
   */
  digestMethodUrl: any | null;
  id: string;

  /**
   * The SAML provider's issuer URL.
   */
  issuerUrl: any | null;

  /**
   * The corresponding operation type for the action
   */
  operationType: XGitHubOperationType | null;

  /**
   * The Organization associated with the Audit Entry.
   */
  organization: IXGitHubOrganization | null;

  /**
   * The name of the Organization.
   */
  organizationName: string | null;

  /**
   * The HTTP path for the organization
   */
  organizationResourcePath: any | null;

  /**
   * The HTTP URL for the organization
   */
  organizationUrl: any | null;

  /**
   * The SAML provider's signature algorithm URL.
   */
  signatureMethodUrl: any | null;

  /**
   * The SAML provider's single sign-on URL.
   */
  singleSignOnUrl: any | null;

  /**
   * The user affected by the action
   */
  user: IXGitHubUser | null;

  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin: string | null;

  /**
   * The HTTP path for the user.
   */
  userResourcePath: any | null;

  /**
   * The HTTP URL for the user.
   */
  userUrl: any | null;
}

/**
 * Audit log entry for a org.enable_two_factor_requirement event.
 */
export interface IXGitHubOrgEnableTwoFactorRequirementAuditEntry {
  __typename: '_xGitHubOrgEnableTwoFactorRequirementAuditEntry';

  /**
   * The action name
   */
  action: string;

  /**
   * The user who initiated the action
   */
  actor: _xGitHubAuditEntryActor | null;

  /**
   * The IP address of the actor
   */
  actorIp: string | null;

  /**
   * A readable representation of the actor's location
   */
  actorLocation: IXGitHubActorLocation | null;

  /**
   * The username of the user who initiated the action
   */
  actorLogin: string | null;

  /**
   * The HTTP path for the actor.
   */
  actorResourcePath: any | null;

  /**
   * The HTTP URL for the actor.
   */
  actorUrl: any | null;

  /**
   * The time the action was initiated
   */
  createdAt: any;
  id: string;

  /**
   * The corresponding operation type for the action
   */
  operationType: XGitHubOperationType | null;

  /**
   * The Organization associated with the Audit Entry.
   */
  organization: IXGitHubOrganization | null;

  /**
   * The name of the Organization.
   */
  organizationName: string | null;

  /**
   * The HTTP path for the organization
   */
  organizationResourcePath: any | null;

  /**
   * The HTTP URL for the organization
   */
  organizationUrl: any | null;

  /**
   * The user affected by the action
   */
  user: IXGitHubUser | null;

  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin: string | null;

  /**
   * The HTTP path for the user.
   */
  userResourcePath: any | null;

  /**
   * The HTTP URL for the user.
   */
  userUrl: any | null;
}

/**
 * Audit log entry for a org.invite_member event.
 */
export interface IXGitHubOrgInviteMemberAuditEntry {
  __typename: '_xGitHubOrgInviteMemberAuditEntry';

  /**
   * The action name
   */
  action: string;

  /**
   * The user who initiated the action
   */
  actor: _xGitHubAuditEntryActor | null;

  /**
   * The IP address of the actor
   */
  actorIp: string | null;

  /**
   * A readable representation of the actor's location
   */
  actorLocation: IXGitHubActorLocation | null;

  /**
   * The username of the user who initiated the action
   */
  actorLogin: string | null;

  /**
   * The HTTP path for the actor.
   */
  actorResourcePath: any | null;

  /**
   * The HTTP URL for the actor.
   */
  actorUrl: any | null;

  /**
   * The time the action was initiated
   */
  createdAt: any;

  /**
   * The email address of the organization invitation.
   */
  email: string | null;
  id: string;

  /**
   * The corresponding operation type for the action
   */
  operationType: XGitHubOperationType | null;

  /**
   * The Organization associated with the Audit Entry.
   */
  organization: IXGitHubOrganization | null;

  /**
   * The organization invitation.
   */
  organizationInvitation: IXGitHubOrganizationInvitation | null;

  /**
   * The name of the Organization.
   */
  organizationName: string | null;

  /**
   * The HTTP path for the organization
   */
  organizationResourcePath: any | null;

  /**
   * The HTTP URL for the organization
   */
  organizationUrl: any | null;

  /**
   * The user affected by the action
   */
  user: IXGitHubUser | null;

  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin: string | null;

  /**
   * The HTTP path for the user.
   */
  userResourcePath: any | null;

  /**
   * The HTTP URL for the user.
   */
  userUrl: any | null;
}

/**
 * Audit log entry for a org.invite_to_business event.
 */
export interface IXGitHubOrgInviteToBusinessAuditEntry {
  __typename: '_xGitHubOrgInviteToBusinessAuditEntry';

  /**
   * The action name
   */
  action: string;

  /**
   * The user who initiated the action
   */
  actor: _xGitHubAuditEntryActor | null;

  /**
   * The IP address of the actor
   */
  actorIp: string | null;

  /**
   * A readable representation of the actor's location
   */
  actorLocation: IXGitHubActorLocation | null;

  /**
   * The username of the user who initiated the action
   */
  actorLogin: string | null;

  /**
   * The HTTP path for the actor.
   */
  actorResourcePath: any | null;

  /**
   * The HTTP URL for the actor.
   */
  actorUrl: any | null;

  /**
   * The time the action was initiated
   */
  createdAt: any;

  /**
   * The HTTP path for this enterprise.
   */
  enterpriseResourcePath: any | null;

  /**
   * The slug of the enterprise.
   */
  enterpriseSlug: string | null;

  /**
   * The HTTP URL for this enterprise.
   */
  enterpriseUrl: any | null;
  id: string;

  /**
   * The corresponding operation type for the action
   */
  operationType: XGitHubOperationType | null;

  /**
   * The Organization associated with the Audit Entry.
   */
  organization: IXGitHubOrganization | null;

  /**
   * The name of the Organization.
   */
  organizationName: string | null;

  /**
   * The HTTP path for the organization
   */
  organizationResourcePath: any | null;

  /**
   * The HTTP URL for the organization
   */
  organizationUrl: any | null;

  /**
   * The user affected by the action
   */
  user: IXGitHubUser | null;

  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin: string | null;

  /**
   * The HTTP path for the user.
   */
  userResourcePath: any | null;

  /**
   * The HTTP URL for the user.
   */
  userUrl: any | null;
}

/**
 * Audit log entry for a org.oauth_app_access_approved event.
 */
export interface IXGitHubOrgOauthAppAccessApprovedAuditEntry {
  __typename: '_xGitHubOrgOauthAppAccessApprovedAuditEntry';

  /**
   * The action name
   */
  action: string;

  /**
   * The user who initiated the action
   */
  actor: _xGitHubAuditEntryActor | null;

  /**
   * The IP address of the actor
   */
  actorIp: string | null;

  /**
   * A readable representation of the actor's location
   */
  actorLocation: IXGitHubActorLocation | null;

  /**
   * The username of the user who initiated the action
   */
  actorLogin: string | null;

  /**
   * The HTTP path for the actor.
   */
  actorResourcePath: any | null;

  /**
   * The HTTP URL for the actor.
   */
  actorUrl: any | null;

  /**
   * The time the action was initiated
   */
  createdAt: any;
  id: string;

  /**
   * The name of the OAuth Application.
   */
  oauthApplicationName: string | null;

  /**
   * The HTTP path for the OAuth Application
   */
  oauthApplicationResourcePath: any | null;

  /**
   * The HTTP URL for the OAuth Application
   */
  oauthApplicationUrl: any | null;

  /**
   * The corresponding operation type for the action
   */
  operationType: XGitHubOperationType | null;

  /**
   * The Organization associated with the Audit Entry.
   */
  organization: IXGitHubOrganization | null;

  /**
   * The name of the Organization.
   */
  organizationName: string | null;

  /**
   * The HTTP path for the organization
   */
  organizationResourcePath: any | null;

  /**
   * The HTTP URL for the organization
   */
  organizationUrl: any | null;

  /**
   * The user affected by the action
   */
  user: IXGitHubUser | null;

  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin: string | null;

  /**
   * The HTTP path for the user.
   */
  userResourcePath: any | null;

  /**
   * The HTTP URL for the user.
   */
  userUrl: any | null;
}

/**
 * Audit log entry for a org.oauth_app_access_denied event.
 */
export interface IXGitHubOrgOauthAppAccessDeniedAuditEntry {
  __typename: '_xGitHubOrgOauthAppAccessDeniedAuditEntry';

  /**
   * The action name
   */
  action: string;

  /**
   * The user who initiated the action
   */
  actor: _xGitHubAuditEntryActor | null;

  /**
   * The IP address of the actor
   */
  actorIp: string | null;

  /**
   * A readable representation of the actor's location
   */
  actorLocation: IXGitHubActorLocation | null;

  /**
   * The username of the user who initiated the action
   */
  actorLogin: string | null;

  /**
   * The HTTP path for the actor.
   */
  actorResourcePath: any | null;

  /**
   * The HTTP URL for the actor.
   */
  actorUrl: any | null;

  /**
   * The time the action was initiated
   */
  createdAt: any;
  id: string;

  /**
   * The name of the OAuth Application.
   */
  oauthApplicationName: string | null;

  /**
   * The HTTP path for the OAuth Application
   */
  oauthApplicationResourcePath: any | null;

  /**
   * The HTTP URL for the OAuth Application
   */
  oauthApplicationUrl: any | null;

  /**
   * The corresponding operation type for the action
   */
  operationType: XGitHubOperationType | null;

  /**
   * The Organization associated with the Audit Entry.
   */
  organization: IXGitHubOrganization | null;

  /**
   * The name of the Organization.
   */
  organizationName: string | null;

  /**
   * The HTTP path for the organization
   */
  organizationResourcePath: any | null;

  /**
   * The HTTP URL for the organization
   */
  organizationUrl: any | null;

  /**
   * The user affected by the action
   */
  user: IXGitHubUser | null;

  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin: string | null;

  /**
   * The HTTP path for the user.
   */
  userResourcePath: any | null;

  /**
   * The HTTP URL for the user.
   */
  userUrl: any | null;
}

/**
 * Audit log entry for a org.oauth_app_access_requested event.
 */
export interface IXGitHubOrgOauthAppAccessRequestedAuditEntry {
  __typename: '_xGitHubOrgOauthAppAccessRequestedAuditEntry';

  /**
   * The action name
   */
  action: string;

  /**
   * The user who initiated the action
   */
  actor: _xGitHubAuditEntryActor | null;

  /**
   * The IP address of the actor
   */
  actorIp: string | null;

  /**
   * A readable representation of the actor's location
   */
  actorLocation: IXGitHubActorLocation | null;

  /**
   * The username of the user who initiated the action
   */
  actorLogin: string | null;

  /**
   * The HTTP path for the actor.
   */
  actorResourcePath: any | null;

  /**
   * The HTTP URL for the actor.
   */
  actorUrl: any | null;

  /**
   * The time the action was initiated
   */
  createdAt: any;
  id: string;

  /**
   * The name of the OAuth Application.
   */
  oauthApplicationName: string | null;

  /**
   * The HTTP path for the OAuth Application
   */
  oauthApplicationResourcePath: any | null;

  /**
   * The HTTP URL for the OAuth Application
   */
  oauthApplicationUrl: any | null;

  /**
   * The corresponding operation type for the action
   */
  operationType: XGitHubOperationType | null;

  /**
   * The Organization associated with the Audit Entry.
   */
  organization: IXGitHubOrganization | null;

  /**
   * The name of the Organization.
   */
  organizationName: string | null;

  /**
   * The HTTP path for the organization
   */
  organizationResourcePath: any | null;

  /**
   * The HTTP URL for the organization
   */
  organizationUrl: any | null;

  /**
   * The user affected by the action
   */
  user: IXGitHubUser | null;

  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin: string | null;

  /**
   * The HTTP path for the user.
   */
  userResourcePath: any | null;

  /**
   * The HTTP URL for the user.
   */
  userUrl: any | null;
}

/**
 * Audit log entry for a org.remove_billing_manager event.
 */
export interface IXGitHubOrgRemoveBillingManagerAuditEntry {
  __typename: '_xGitHubOrgRemoveBillingManagerAuditEntry';

  /**
   * The action name
   */
  action: string;

  /**
   * The user who initiated the action
   */
  actor: _xGitHubAuditEntryActor | null;

  /**
   * The IP address of the actor
   */
  actorIp: string | null;

  /**
   * A readable representation of the actor's location
   */
  actorLocation: IXGitHubActorLocation | null;

  /**
   * The username of the user who initiated the action
   */
  actorLogin: string | null;

  /**
   * The HTTP path for the actor.
   */
  actorResourcePath: any | null;

  /**
   * The HTTP URL for the actor.
   */
  actorUrl: any | null;

  /**
   * The time the action was initiated
   */
  createdAt: any;
  id: string;

  /**
   * The corresponding operation type for the action
   */
  operationType: XGitHubOperationType | null;

  /**
   * The Organization associated with the Audit Entry.
   */
  organization: IXGitHubOrganization | null;

  /**
   * The name of the Organization.
   */
  organizationName: string | null;

  /**
   * The HTTP path for the organization
   */
  organizationResourcePath: any | null;

  /**
   * The HTTP URL for the organization
   */
  organizationUrl: any | null;

  /**
   * The reason for the billing manager being removed.
   */
  reason: XGitHubOrgRemoveBillingManagerAuditEntryReason | null;

  /**
   * The user affected by the action
   */
  user: IXGitHubUser | null;

  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin: string | null;

  /**
   * The HTTP path for the user.
   */
  userResourcePath: any | null;

  /**
   * The HTTP URL for the user.
   */
  userUrl: any | null;
}

/**
 * The reason a billing manager was removed from an Organization.
 */
export const enum XGitHubOrgRemoveBillingManagerAuditEntryReason {
  /**
   * SAML external identity missing
   */
  SAML_EXTERNAL_IDENTITY_MISSING = 'SAML_EXTERNAL_IDENTITY_MISSING',

  /**
   * SAML SSO enforcement requires an external identity
   */
  SAML_SSO_ENFORCEMENT_REQUIRES_EXTERNAL_IDENTITY = 'SAML_SSO_ENFORCEMENT_REQUIRES_EXTERNAL_IDENTITY',

  /**
   * The organization required 2FA of its billing managers and this user did not have 2FA enabled.
   */
  TWO_FACTOR_REQUIREMENT_NON_COMPLIANCE = 'TWO_FACTOR_REQUIREMENT_NON_COMPLIANCE'
}

/**
 * Audit log entry for a org.remove_member event.
 */
export interface IXGitHubOrgRemoveMemberAuditEntry {
  __typename: '_xGitHubOrgRemoveMemberAuditEntry';

  /**
   * The action name
   */
  action: string;

  /**
   * The user who initiated the action
   */
  actor: _xGitHubAuditEntryActor | null;

  /**
   * The IP address of the actor
   */
  actorIp: string | null;

  /**
   * A readable representation of the actor's location
   */
  actorLocation: IXGitHubActorLocation | null;

  /**
   * The username of the user who initiated the action
   */
  actorLogin: string | null;

  /**
   * The HTTP path for the actor.
   */
  actorResourcePath: any | null;

  /**
   * The HTTP URL for the actor.
   */
  actorUrl: any | null;

  /**
   * The time the action was initiated
   */
  createdAt: any;
  id: string;

  /**
   * The types of membership the member has with the organization.
   */
  membershipTypes: Array<XGitHubOrgRemoveMemberAuditEntryMembershipType> | null;

  /**
   * The corresponding operation type for the action
   */
  operationType: XGitHubOperationType | null;

  /**
   * The Organization associated with the Audit Entry.
   */
  organization: IXGitHubOrganization | null;

  /**
   * The name of the Organization.
   */
  organizationName: string | null;

  /**
   * The HTTP path for the organization
   */
  organizationResourcePath: any | null;

  /**
   * The HTTP URL for the organization
   */
  organizationUrl: any | null;

  /**
   * The reason for the member being removed.
   */
  reason: XGitHubOrgRemoveMemberAuditEntryReason | null;

  /**
   * The user affected by the action
   */
  user: IXGitHubUser | null;

  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin: string | null;

  /**
   * The HTTP path for the user.
   */
  userResourcePath: any | null;

  /**
   * The HTTP URL for the user.
   */
  userUrl: any | null;
}

/**
 * The type of membership a user has with an Organization.
 */
export const enum XGitHubOrgRemoveMemberAuditEntryMembershipType {
  /**
   * Organization administrators have full access and can change several settings,
   * including the names of repositories that belong to the Organization and Owners
   * team membership. In addition, organization admins can delete the organization
   * and all of its repositories.
   */
  ADMIN = 'ADMIN',

  /**
   * A billing manager is a user who manages the billing settings for the Organization, such as updating payment information.
   */
  BILLING_MANAGER = 'BILLING_MANAGER',

  /**
   * A direct member is a user that is a member of the Organization.
   */
  DIRECT_MEMBER = 'DIRECT_MEMBER',

  /**
   * An outside collaborator is a person who isn't explicitly a member of the
   * Organization, but who has Read, Write, or Admin permissions to one or more
   * repositories in the organization.
   */
  OUTSIDE_COLLABORATOR = 'OUTSIDE_COLLABORATOR',

  /**
   * An unaffiliated collaborator is a person who is not a member of the
   * Organization and does not have access to any repositories in the Organization.
   */
  UNAFFILIATED = 'UNAFFILIATED'
}

/**
 * The reason a member was removed from an Organization.
 */
export const enum XGitHubOrgRemoveMemberAuditEntryReason {
  /**
   * SAML external identity missing
   */
  SAML_EXTERNAL_IDENTITY_MISSING = 'SAML_EXTERNAL_IDENTITY_MISSING',

  /**
   * SAML SSO enforcement requires an external identity
   */
  SAML_SSO_ENFORCEMENT_REQUIRES_EXTERNAL_IDENTITY = 'SAML_SSO_ENFORCEMENT_REQUIRES_EXTERNAL_IDENTITY',

  /**
   * User was removed from organization during account recovery
   */
  TWO_FACTOR_ACCOUNT_RECOVERY = 'TWO_FACTOR_ACCOUNT_RECOVERY',

  /**
   * The organization required 2FA of its billing managers and this user did not have 2FA enabled.
   */
  TWO_FACTOR_REQUIREMENT_NON_COMPLIANCE = 'TWO_FACTOR_REQUIREMENT_NON_COMPLIANCE',

  /**
   * User account has been deleted
   */
  USER_ACCOUNT_DELETED = 'USER_ACCOUNT_DELETED'
}

/**
 * Audit log entry for a org.remove_outside_collaborator event.
 */
export interface IXGitHubOrgRemoveOutsideCollaboratorAuditEntry {
  __typename: '_xGitHubOrgRemoveOutsideCollaboratorAuditEntry';

  /**
   * The action name
   */
  action: string;

  /**
   * The user who initiated the action
   */
  actor: _xGitHubAuditEntryActor | null;

  /**
   * The IP address of the actor
   */
  actorIp: string | null;

  /**
   * A readable representation of the actor's location
   */
  actorLocation: IXGitHubActorLocation | null;

  /**
   * The username of the user who initiated the action
   */
  actorLogin: string | null;

  /**
   * The HTTP path for the actor.
   */
  actorResourcePath: any | null;

  /**
   * The HTTP URL for the actor.
   */
  actorUrl: any | null;

  /**
   * The time the action was initiated
   */
  createdAt: any;
  id: string;

  /**
   * The types of membership the outside collaborator has with the organization.
   */
  membershipTypes: Array<
    XGitHubOrgRemoveOutsideCollaboratorAuditEntryMembershipType
  > | null;

  /**
   * The corresponding operation type for the action
   */
  operationType: XGitHubOperationType | null;

  /**
   * The Organization associated with the Audit Entry.
   */
  organization: IXGitHubOrganization | null;

  /**
   * The name of the Organization.
   */
  organizationName: string | null;

  /**
   * The HTTP path for the organization
   */
  organizationResourcePath: any | null;

  /**
   * The HTTP URL for the organization
   */
  organizationUrl: any | null;

  /**
   * The reason for the outside collaborator being removed from the Organization.
   */
  reason: XGitHubOrgRemoveOutsideCollaboratorAuditEntryReason | null;

  /**
   * The user affected by the action
   */
  user: IXGitHubUser | null;

  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin: string | null;

  /**
   * The HTTP path for the user.
   */
  userResourcePath: any | null;

  /**
   * The HTTP URL for the user.
   */
  userUrl: any | null;
}

/**
 * The type of membership a user has with an Organization.
 */
export const enum XGitHubOrgRemoveOutsideCollaboratorAuditEntryMembershipType {
  /**
   * A billing manager is a user who manages the billing settings for the Organization, such as updating payment information.
   */
  BILLING_MANAGER = 'BILLING_MANAGER',

  /**
   * An outside collaborator is a person who isn't explicitly a member of the
   * Organization, but who has Read, Write, or Admin permissions to one or more
   * repositories in the organization.
   */
  OUTSIDE_COLLABORATOR = 'OUTSIDE_COLLABORATOR',

  /**
   * An unaffiliated collaborator is a person who is not a member of the
   * Organization and does not have access to any repositories in the organization.
   */
  UNAFFILIATED = 'UNAFFILIATED'
}

/**
 * The reason an outside collaborator was removed from an Organization.
 */
export const enum XGitHubOrgRemoveOutsideCollaboratorAuditEntryReason {
  /**
   * SAML external identity missing
   */
  SAML_EXTERNAL_IDENTITY_MISSING = 'SAML_EXTERNAL_IDENTITY_MISSING',

  /**
   * The organization required 2FA of its billing managers and this user did not have 2FA enabled.
   */
  TWO_FACTOR_REQUIREMENT_NON_COMPLIANCE = 'TWO_FACTOR_REQUIREMENT_NON_COMPLIANCE'
}

/**
 * Audit log entry for a org.restore_member event.
 */
export interface IXGitHubOrgRestoreMemberAuditEntry {
  __typename: '_xGitHubOrgRestoreMemberAuditEntry';

  /**
   * The action name
   */
  action: string;

  /**
   * The user who initiated the action
   */
  actor: _xGitHubAuditEntryActor | null;

  /**
   * The IP address of the actor
   */
  actorIp: string | null;

  /**
   * A readable representation of the actor's location
   */
  actorLocation: IXGitHubActorLocation | null;

  /**
   * The username of the user who initiated the action
   */
  actorLogin: string | null;

  /**
   * The HTTP path for the actor.
   */
  actorResourcePath: any | null;

  /**
   * The HTTP URL for the actor.
   */
  actorUrl: any | null;

  /**
   * The time the action was initiated
   */
  createdAt: any;
  id: string;

  /**
   * The corresponding operation type for the action
   */
  operationType: XGitHubOperationType | null;

  /**
   * The Organization associated with the Audit Entry.
   */
  organization: IXGitHubOrganization | null;

  /**
   * The name of the Organization.
   */
  organizationName: string | null;

  /**
   * The HTTP path for the organization
   */
  organizationResourcePath: any | null;

  /**
   * The HTTP URL for the organization
   */
  organizationUrl: any | null;

  /**
   * The number of custom email routings for the restored member.
   */
  restoredCustomEmailRoutingsCount: number | null;

  /**
   * The number of issue assignments for the restored member.
   */
  restoredIssueAssignmentsCount: number | null;

  /**
   * Restored organization membership objects.
   */
  restoredMemberships: Array<
    _xGitHubOrgRestoreMemberAuditEntryMembership
  > | null;

  /**
   * The number of restored memberships.
   */
  restoredMembershipsCount: number | null;

  /**
   * The number of repositories of the restored member.
   */
  restoredRepositoriesCount: number | null;

  /**
   * The number of starred repositories for the restored member.
   */
  restoredRepositoryStarsCount: number | null;

  /**
   * The number of watched repositories for the restored member.
   */
  restoredRepositoryWatchesCount: number | null;

  /**
   * The user affected by the action
   */
  user: IXGitHubUser | null;

  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin: string | null;

  /**
   * The HTTP path for the user.
   */
  userResourcePath: any | null;

  /**
   * The HTTP URL for the user.
   */
  userUrl: any | null;
}

/**
 * Types of memberships that can be restored for an Organization member.
 */
export type _xGitHubOrgRestoreMemberAuditEntryMembership =
  | IXGitHubOrgRestoreMemberMembershipOrganizationAuditEntryData
  | IXGitHubOrgRestoreMemberMembershipRepositoryAuditEntryData
  | IXGitHubOrgRestoreMemberMembershipTeamAuditEntryData;

/**
 * Metadata for an organization membership for org.restore_member actions
 */
export interface IXGitHubOrgRestoreMemberMembershipOrganizationAuditEntryData {
  __typename: '_xGitHubOrgRestoreMemberMembershipOrganizationAuditEntryData';

  /**
   * The Organization associated with the Audit Entry.
   */
  organization: IXGitHubOrganization | null;

  /**
   * The name of the Organization.
   */
  organizationName: string | null;

  /**
   * The HTTP path for the organization
   */
  organizationResourcePath: any | null;

  /**
   * The HTTP URL for the organization
   */
  organizationUrl: any | null;
}

/**
 * Metadata for a repository membership for org.restore_member actions
 */
export interface IXGitHubOrgRestoreMemberMembershipRepositoryAuditEntryData {
  __typename: '_xGitHubOrgRestoreMemberMembershipRepositoryAuditEntryData';

  /**
   * The repository associated with the action
   */
  repository: IXGitHubRepository | null;

  /**
   * The name of the repository
   */
  repositoryName: string | null;

  /**
   * The HTTP path for the repository
   */
  repositoryResourcePath: any | null;

  /**
   * The HTTP URL for the repository
   */
  repositoryUrl: any | null;
}

/**
 * Metadata for a team membership for org.restore_member actions
 */
export interface IXGitHubOrgRestoreMemberMembershipTeamAuditEntryData {
  __typename: '_xGitHubOrgRestoreMemberMembershipTeamAuditEntryData';

  /**
   * The team associated with the action
   */
  team: IXGitHubTeam | null;

  /**
   * The name of the team
   */
  teamName: string | null;

  /**
   * The HTTP path for this team
   */
  teamResourcePath: any | null;

  /**
   * The HTTP URL for this team
   */
  teamUrl: any | null;
}

/**
 * Audit log entry for a org.unblock_user
 */
export interface IXGitHubOrgUnblockUserAuditEntry {
  __typename: '_xGitHubOrgUnblockUserAuditEntry';

  /**
   * The action name
   */
  action: string;

  /**
   * The user who initiated the action
   */
  actor: _xGitHubAuditEntryActor | null;

  /**
   * The IP address of the actor
   */
  actorIp: string | null;

  /**
   * A readable representation of the actor's location
   */
  actorLocation: IXGitHubActorLocation | null;

  /**
   * The username of the user who initiated the action
   */
  actorLogin: string | null;

  /**
   * The HTTP path for the actor.
   */
  actorResourcePath: any | null;

  /**
   * The HTTP URL for the actor.
   */
  actorUrl: any | null;

  /**
   * The user being unblocked by the organization.
   */
  blockedUser: IXGitHubUser | null;

  /**
   * The username of the blocked user.
   */
  blockedUserName: string | null;

  /**
   * The HTTP path for the blocked user.
   */
  blockedUserResourcePath: any | null;

  /**
   * The HTTP URL for the blocked user.
   */
  blockedUserUrl: any | null;

  /**
   * The time the action was initiated
   */
  createdAt: any;
  id: string;

  /**
   * The corresponding operation type for the action
   */
  operationType: XGitHubOperationType | null;

  /**
   * The Organization associated with the Audit Entry.
   */
  organization: IXGitHubOrganization | null;

  /**
   * The name of the Organization.
   */
  organizationName: string | null;

  /**
   * The HTTP path for the organization
   */
  organizationResourcePath: any | null;

  /**
   * The HTTP URL for the organization
   */
  organizationUrl: any | null;

  /**
   * The user affected by the action
   */
  user: IXGitHubUser | null;

  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin: string | null;

  /**
   * The HTTP path for the user.
   */
  userResourcePath: any | null;

  /**
   * The HTTP URL for the user.
   */
  userUrl: any | null;
}

/**
 * Audit log entry for a org.update_default_repository_permission
 */
export interface IXGitHubOrgUpdateDefaultRepositoryPermissionAuditEntry {
  __typename: '_xGitHubOrgUpdateDefaultRepositoryPermissionAuditEntry';

  /**
   * The action name
   */
  action: string;

  /**
   * The user who initiated the action
   */
  actor: _xGitHubAuditEntryActor | null;

  /**
   * The IP address of the actor
   */
  actorIp: string | null;

  /**
   * A readable representation of the actor's location
   */
  actorLocation: IXGitHubActorLocation | null;

  /**
   * The username of the user who initiated the action
   */
  actorLogin: string | null;

  /**
   * The HTTP path for the actor.
   */
  actorResourcePath: any | null;

  /**
   * The HTTP URL for the actor.
   */
  actorUrl: any | null;

  /**
   * The time the action was initiated
   */
  createdAt: any;
  id: string;

  /**
   * The corresponding operation type for the action
   */
  operationType: XGitHubOperationType | null;

  /**
   * The Organization associated with the Audit Entry.
   */
  organization: IXGitHubOrganization | null;

  /**
   * The name of the Organization.
   */
  organizationName: string | null;

  /**
   * The HTTP path for the organization
   */
  organizationResourcePath: any | null;

  /**
   * The HTTP URL for the organization
   */
  organizationUrl: any | null;

  /**
   * The new base repository permission level for the organization.
   */
  permission: XGitHubOrgUpdateDefaultRepositoryPermissionAuditEntryPermission | null;

  /**
   * The former base repository permission level for the organization.
   */
  permissionWas: XGitHubOrgUpdateDefaultRepositoryPermissionAuditEntryPermission | null;

  /**
   * The user affected by the action
   */
  user: IXGitHubUser | null;

  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin: string | null;

  /**
   * The HTTP path for the user.
   */
  userResourcePath: any | null;

  /**
   * The HTTP URL for the user.
   */
  userUrl: any | null;
}

/**
 * The default permission a repository can have in an Organization.
 */
export const enum XGitHubOrgUpdateDefaultRepositoryPermissionAuditEntryPermission {
  /**
   * Can read, clone, push, and add collaborators to repositories.
   */
  ADMIN = 'ADMIN',

  /**
   * No default permission value.
   */
  NONE = 'NONE',

  /**
   * Can read and clone repositories.
   */
  READ = 'READ',

  /**
   * Can read, clone and push to repositories.
   */
  WRITE = 'WRITE'
}

/**
 * Audit log entry for a org.update_member event.
 */
export interface IXGitHubOrgUpdateMemberAuditEntry {
  __typename: '_xGitHubOrgUpdateMemberAuditEntry';

  /**
   * The action name
   */
  action: string;

  /**
   * The user who initiated the action
   */
  actor: _xGitHubAuditEntryActor | null;

  /**
   * The IP address of the actor
   */
  actorIp: string | null;

  /**
   * A readable representation of the actor's location
   */
  actorLocation: IXGitHubActorLocation | null;

  /**
   * The username of the user who initiated the action
   */
  actorLogin: string | null;

  /**
   * The HTTP path for the actor.
   */
  actorResourcePath: any | null;

  /**
   * The HTTP URL for the actor.
   */
  actorUrl: any | null;

  /**
   * The time the action was initiated
   */
  createdAt: any;
  id: string;

  /**
   * The corresponding operation type for the action
   */
  operationType: XGitHubOperationType | null;

  /**
   * The Organization associated with the Audit Entry.
   */
  organization: IXGitHubOrganization | null;

  /**
   * The name of the Organization.
   */
  organizationName: string | null;

  /**
   * The HTTP path for the organization
   */
  organizationResourcePath: any | null;

  /**
   * The HTTP URL for the organization
   */
  organizationUrl: any | null;

  /**
   * The new member permission level for the organization.
   */
  permission: XGitHubOrgUpdateMemberAuditEntryPermission | null;

  /**
   * The former member permission level for the organization.
   */
  permissionWas: XGitHubOrgUpdateMemberAuditEntryPermission | null;

  /**
   * The user affected by the action
   */
  user: IXGitHubUser | null;

  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin: string | null;

  /**
   * The HTTP path for the user.
   */
  userResourcePath: any | null;

  /**
   * The HTTP URL for the user.
   */
  userUrl: any | null;
}

/**
 * The permissions available to members on an Organization.
 */
export const enum XGitHubOrgUpdateMemberAuditEntryPermission {
  /**
   * Can read, clone, push, and add collaborators to repositories.
   */
  ADMIN = 'ADMIN',

  /**
   * Can read and clone repositories.
   */
  READ = 'READ'
}

/**
 * Audit log entry for a org.update_member_repository_creation_permission event.
 */
export interface IXGitHubOrgUpdateMemberRepositoryCreationPermissionAuditEntry {
  __typename: '_xGitHubOrgUpdateMemberRepositoryCreationPermissionAuditEntry';

  /**
   * The action name
   */
  action: string;

  /**
   * The user who initiated the action
   */
  actor: _xGitHubAuditEntryActor | null;

  /**
   * The IP address of the actor
   */
  actorIp: string | null;

  /**
   * A readable representation of the actor's location
   */
  actorLocation: IXGitHubActorLocation | null;

  /**
   * The username of the user who initiated the action
   */
  actorLogin: string | null;

  /**
   * The HTTP path for the actor.
   */
  actorResourcePath: any | null;

  /**
   * The HTTP URL for the actor.
   */
  actorUrl: any | null;

  /**
   * Can members create repositories in the organization.
   */
  canCreateRepositories: boolean | null;

  /**
   * The time the action was initiated
   */
  createdAt: any;
  id: string;

  /**
   * The corresponding operation type for the action
   */
  operationType: XGitHubOperationType | null;

  /**
   * The Organization associated with the Audit Entry.
   */
  organization: IXGitHubOrganization | null;

  /**
   * The name of the Organization.
   */
  organizationName: string | null;

  /**
   * The HTTP path for the organization
   */
  organizationResourcePath: any | null;

  /**
   * The HTTP URL for the organization
   */
  organizationUrl: any | null;

  /**
   * The user affected by the action
   */
  user: IXGitHubUser | null;

  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin: string | null;

  /**
   * The HTTP path for the user.
   */
  userResourcePath: any | null;

  /**
   * The HTTP URL for the user.
   */
  userUrl: any | null;

  /**
   * The permission for visibility level of repositories for this organization.
   */
  visibility: XGitHubOrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility | null;
}

/**
 * The permissions available for repository creation on an Organization.
 */
export const enum XGitHubOrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility {
  /**
   * All organization members are restricted from creating any repositories.
   */
  ALL = 'ALL',

  /**
   * All organization members are restricted from creating internal repositories.
   */
  INTERNAL = 'INTERNAL',

  /**
   * All organization members are allowed to create any repositories.
   */
  NONE = 'NONE',

  /**
   * All organization members are restricted from creating private repositories.
   */
  PRIVATE = 'PRIVATE',

  /**
   * All organization members are restricted from creating private or internal repositories.
   */
  PRIVATE_INTERNAL = 'PRIVATE_INTERNAL',

  /**
   * All organization members are restricted from creating public repositories.
   */
  PUBLIC = 'PUBLIC',

  /**
   * All organization members are restricted from creating public or internal repositories.
   */
  PUBLIC_INTERNAL = 'PUBLIC_INTERNAL',

  /**
   * All organization members are restricted from creating public or private repositories.
   */
  PUBLIC_PRIVATE = 'PUBLIC_PRIVATE'
}

/**
 * Audit log entry for a org.update_member_repository_invitation_permission event.
 */
export interface IXGitHubOrgUpdateMemberRepositoryInvitationPermissionAuditEntry {
  __typename: '_xGitHubOrgUpdateMemberRepositoryInvitationPermissionAuditEntry';

  /**
   * The action name
   */
  action: string;

  /**
   * The user who initiated the action
   */
  actor: _xGitHubAuditEntryActor | null;

  /**
   * The IP address of the actor
   */
  actorIp: string | null;

  /**
   * A readable representation of the actor's location
   */
  actorLocation: IXGitHubActorLocation | null;

  /**
   * The username of the user who initiated the action
   */
  actorLogin: string | null;

  /**
   * The HTTP path for the actor.
   */
  actorResourcePath: any | null;

  /**
   * The HTTP URL for the actor.
   */
  actorUrl: any | null;

  /**
   * Can outside collaborators be invited to repositories in the organization.
   */
  canInviteOutsideCollaboratorsToRepositories: boolean | null;

  /**
   * The time the action was initiated
   */
  createdAt: any;
  id: string;

  /**
   * The corresponding operation type for the action
   */
  operationType: XGitHubOperationType | null;

  /**
   * The Organization associated with the Audit Entry.
   */
  organization: IXGitHubOrganization | null;

  /**
   * The name of the Organization.
   */
  organizationName: string | null;

  /**
   * The HTTP path for the organization
   */
  organizationResourcePath: any | null;

  /**
   * The HTTP URL for the organization
   */
  organizationUrl: any | null;

  /**
   * The user affected by the action
   */
  user: IXGitHubUser | null;

  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin: string | null;

  /**
   * The HTTP path for the user.
   */
  userResourcePath: any | null;

  /**
   * The HTTP URL for the user.
   */
  userUrl: any | null;
}

/**
 * An account on GitHub, with one or more owners, that has repositories, members and teams.
 */
export interface IXGitHubOrganization {
  __typename: '_xGitHubOrganization';

  /**
   * Determine if this repository owner has any items that can be pinned to their profile.
   */
  anyPinnableItems: boolean;

  /**
   * Audit log entries of the organization
   */
  auditLog: IXGitHubOrganizationAuditEntryConnection;

  /**
   * A URL pointing to the organization's public avatar.
   */
  avatarUrl: any;

  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: any;

  /**
   * Identifies the primary key from the database.
   */
  databaseId: number | null;

  /**
   * The organization's public profile description.
   */
  description: string | null;

  /**
   * The organization's public profile description rendered to HTML.
   */
  descriptionHTML: string | null;

  /**
   * A list of domains owned by the organization.
   */
  domains: IXGitHubVerifiableDomainConnection | null;

  /**
   * The organization's public email.
   */
  email: string | null;

  /**
   * The estimated next GitHub Sponsors payout for this user/organization in cents (USD).
   */
  estimatedNextSponsorsPayoutInCents: number;

  /**
   * True if this user/organization has a GitHub Sponsors listing.
   */
  hasSponsorsListing: boolean;
  id: string;

  /**
   * The interaction ability settings for this organization.
   */
  interactionAbility: IXGitHubRepositoryInteractionAbility | null;

  /**
   * The setting value for whether the organization has an IP allow list enabled.
   */
  ipAllowListEnabledSetting: XGitHubIpAllowListEnabledSettingValue;

  /**
   * The IP addresses that are allowed to access resources owned by the organization.
   */
  ipAllowListEntries: IXGitHubIpAllowListEntryConnection;

  /**
   * The setting value for whether the organization has IP allow list configuration for installed GitHub Apps enabled.
   */
  ipAllowListForInstalledAppsEnabledSetting: XGitHubIpAllowListForInstalledAppsEnabledSettingValue;

  /**
   * Check if the given account is sponsoring this user/organization.
   */
  isSponsoredBy: boolean;

  /**
   * True if the viewer is sponsored by this user/organization.
   */
  isSponsoringViewer: boolean;

  /**
   * Whether the organization has verified its profile email and website.
   */
  isVerified: boolean;

  /**
   * Showcases a selection of repositories and gists that the profile owner has
   * either curated or that have been selected automatically based on popularity.
   */
  itemShowcase: IXGitHubProfileItemShowcase;

  /**
   * The organization's public profile location.
   */
  location: string | null;

  /**
   * The organization's login name.
   */
  login: string;

  /**
   * Get the status messages members of this entity have set that are either public or visible only to the organization.
   */
  memberStatuses: IXGitHubUserStatusConnection;

  /**
   * A list of users who are members of this organization.
   */
  membersWithRole: IXGitHubOrganizationMemberConnection;

  /**
   * The estimated monthly GitHub Sponsors income for this user/organization in cents (USD).
   */
  monthlyEstimatedSponsorsIncomeInCents: number;

  /**
   * The organization's public profile name.
   */
  name: string | null;

  /**
   * The HTTP path creating a new team
   */
  newTeamResourcePath: any;

  /**
   * The HTTP URL creating a new team
   */
  newTeamUrl: any;

  /**
   * Indicates if email notification delivery for this organization is restricted to verified or approved domains.
   */
  notificationDeliveryRestrictionEnabledSetting: XGitHubNotificationRestrictionSettingValue;

  /**
   * The billing email for the organization.
   */
  organizationBillingEmail: string | null;

  /**
   * A list of packages under the owner.
   */
  packages: IXGitHubPackageConnection;

  /**
   * A list of users who have been invited to join this organization.
   */
  pendingMembers: IXGitHubUserConnection;

  /**
   * A list of repositories and gists this profile owner can pin to their profile.
   */
  pinnableItems: IXGitHubPinnableItemConnection;

  /**
   * A list of repositories and gists this profile owner has pinned to their profile
   */
  pinnedItems: IXGitHubPinnableItemConnection;

  /**
   * Returns how many more items this profile owner can pin to their profile.
   */
  pinnedItemsRemaining: number;

  /**
   * Find project by number.
   */
  project: IXGitHubProject | null;

  /**
   * A list of projects under the owner.
   */
  projects: IXGitHubProjectConnection;

  /**
   * The HTTP path listing organization's projects
   */
  projectsResourcePath: any;

  /**
   * The HTTP URL listing organization's projects
   */
  projectsUrl: any;

  /**
   * A list of repositories that the user owns.
   */
  repositories: IXGitHubRepositoryConnection;

  /**
   * Find Repository.
   */
  repository: IXGitHubRepository | null;

  /**
   * Discussion comments this user has authored.
   */
  repositoryDiscussionComments: IXGitHubDiscussionCommentConnection;

  /**
   * Discussions this user has started.
   */
  repositoryDiscussions: IXGitHubDiscussionConnection;

  /**
   * When true the organization requires all members, billing managers, and outside
   * collaborators to enable two-factor authentication.
   */
  requiresTwoFactorAuthentication: boolean | null;

  /**
   * The HTTP path for this organization.
   */
  resourcePath: any;

  /**
   * The Organization's SAML identity providers
   */
  samlIdentityProvider: IXGitHubOrganizationIdentityProvider | null;

  /**
   * List of users and organizations this entity is sponsoring.
   */
  sponsoring: IXGitHubSponsorConnection;

  /**
   * List of sponsors for this user or organization.
   */
  sponsors: IXGitHubSponsorConnection;

  /**
   * Events involving this sponsorable, such as new sponsorships.
   */
  sponsorsActivities: IXGitHubSponsorsActivityConnection;

  /**
   * The GitHub Sponsors listing for this user or organization.
   */
  sponsorsListing: IXGitHubSponsorsListing | null;

  /**
   * The viewer's sponsorship of this entity.
   */
  sponsorshipForViewerAsSponsor: IXGitHubSponsorship | null;

  /**
   * List of sponsorship updates sent from this sponsorable to sponsors.
   */
  sponsorshipNewsletters: IXGitHubSponsorshipNewsletterConnection;

  /**
   * This object's sponsorships as the maintainer.
   */
  sponsorshipsAsMaintainer: IXGitHubSponsorshipConnection;

  /**
   * This object's sponsorships as the sponsor.
   */
  sponsorshipsAsSponsor: IXGitHubSponsorshipConnection;

  /**
   * Find an organization's team by its slug.
   */
  team: IXGitHubTeam | null;

  /**
   * A list of teams in this organization.
   */
  teams: IXGitHubTeamConnection;

  /**
   * The HTTP path listing organization's teams
   */
  teamsResourcePath: any;

  /**
   * The HTTP URL listing organization's teams
   */
  teamsUrl: any;

  /**
   * The organization's Twitter username.
   */
  twitterUsername: string | null;

  /**
   * Identifies the date and time when the object was last updated.
   */
  updatedAt: any;

  /**
   * The HTTP URL for this organization.
   */
  url: any;

  /**
   * Organization is adminable by the viewer.
   */
  viewerCanAdminister: boolean;

  /**
   * Can the viewer pin repositories and gists to the profile?
   */
  viewerCanChangePinnedItems: boolean;

  /**
   * Can the current viewer create new projects on this owner.
   */
  viewerCanCreateProjects: boolean;

  /**
   * Viewer can create repositories on this organization
   */
  viewerCanCreateRepositories: boolean;

  /**
   * Viewer can create teams on this organization.
   */
  viewerCanCreateTeams: boolean;

  /**
   * Whether or not the viewer is able to sponsor this user/organization.
   */
  viewerCanSponsor: boolean;

  /**
   * Viewer is an active member of this organization.
   */
  viewerIsAMember: boolean;

  /**
   * True if the viewer is sponsoring this user/organization.
   */
  viewerIsSponsoring: boolean;

  /**
   * The organization's public profile URL.
   */
  websiteUrl: any | null;
}

export interface IAnyPinnableItemsOnXGitHubOrganizationArguments {
  /**
   * Filter to only a particular kind of pinnable item.
   */
  type?: XGitHubPinnableItemType | null;
}

export interface IAuditLogOnXGitHubOrganizationArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Ordering options for the returned audit log entries.
   * @default {"direction":"DESC","field":"CREATED_AT"}
   */
  orderBy?: IXGitHubAuditLogOrder | null;

  /**
   * The query string to filter audit entries
   */
  query?: string | null;
}

export interface IAvatarUrlOnXGitHubOrganizationArguments {
  /**
   * The size of the resulting square image.
   */
  size?: number | null;
}

export interface IDomainsOnXGitHubOrganizationArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Filter by if the domain is approved.
   * @default null
   */
  isApproved?: boolean | null;

  /**
   * Filter by if the domain is verified.
   * @default null
   */
  isVerified?: boolean | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Ordering options for verifiable domains returned.
   * @default {"direction":"ASC","field":"DOMAIN"}
   */
  orderBy?: IXGitHubVerifiableDomainOrder | null;
}

export interface IIpAllowListEntriesOnXGitHubOrganizationArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Ordering options for IP allow list entries returned.
   * @default {"direction":"ASC","field":"ALLOW_LIST_VALUE"}
   */
  orderBy?: IXGitHubIpAllowListEntryOrder | null;
}

export interface IIsSponsoredByOnXGitHubOrganizationArguments {
  /**
   * The target account's login.
   */
  accountLogin: string;
}

export interface IMemberStatusesOnXGitHubOrganizationArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Ordering options for user statuses returned from the connection.
   * @default {"direction":"DESC","field":"UPDATED_AT"}
   */
  orderBy?: IXGitHubUserStatusOrder | null;
}

export interface IMembersWithRoleOnXGitHubOrganizationArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IPackagesOnXGitHubOrganizationArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Find packages by their names.
   */
  names?: Array<string | null> | null;

  /**
   * Ordering of the returned packages.
   * @default {"direction":"DESC","field":"CREATED_AT"}
   */
  orderBy?: IXGitHubPackageOrder | null;

  /**
   * Filter registry package by type.
   */
  packageType?: XGitHubPackageType | null;

  /**
   * Find packages in a repository by ID.
   */
  repositoryId?: string | null;
}

export interface IPendingMembersOnXGitHubOrganizationArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IPinnableItemsOnXGitHubOrganizationArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Filter the types of pinnable items that are returned.
   */
  types?: Array<XGitHubPinnableItemType> | null;
}

export interface IPinnedItemsOnXGitHubOrganizationArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Filter the types of pinned items that are returned.
   */
  types?: Array<XGitHubPinnableItemType> | null;
}

export interface IProjectOnXGitHubOrganizationArguments {
  /**
   * The project number to find.
   */
  number: number;
}

export interface IProjectsOnXGitHubOrganizationArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Ordering options for projects returned from the connection
   */
  orderBy?: IXGitHubProjectOrder | null;

  /**
   * Query to search projects by, currently only searching by name.
   */
  search?: string | null;

  /**
   * A list of states to filter the projects by.
   */
  states?: Array<XGitHubProjectState> | null;
}

export interface IRepositoriesOnXGitHubOrganizationArguments {
  /**
   * Array of viewer's affiliation options for repositories returned from the
   * connection. For example, OWNER will include only repositories that the
   * current viewer owns.
   */
  affiliations?: Array<XGitHubRepositoryAffiliation | null> | null;

  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * If non-null, filters repositories according to whether they are forks of another repository
   */
  isFork?: boolean | null;

  /**
   * If non-null, filters repositories according to whether they have been locked
   */
  isLocked?: boolean | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Ordering options for repositories returned from the connection
   */
  orderBy?: IXGitHubRepositoryOrder | null;

  /**
   * Array of owner's affiliation options for repositories returned from the
   * connection. For example, OWNER will include only repositories that the
   * organization or user being viewed owns.
   * @default ["OWNER","COLLABORATOR"]
   */
  ownerAffiliations?: Array<XGitHubRepositoryAffiliation | null> | null;

  /**
   * If non-null, filters repositories according to privacy
   */
  privacy?: XGitHubRepositoryPrivacy | null;
}

export interface IRepositoryOnXGitHubOrganizationArguments {
  /**
   * Name of Repository to find.
   */
  name: string;
}

export interface IRepositoryDiscussionCommentsOnXGitHubOrganizationArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Filter discussion comments to only those that were marked as the answer
   * @default false
   */
  onlyAnswers?: boolean | null;

  /**
   * Filter discussion comments to only those in a specific repository.
   */
  repositoryId?: string | null;
}

export interface IRepositoryDiscussionsOnXGitHubOrganizationArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Filter discussions to only those that have been answered or not. Defaults to
   * including both answered and unanswered discussions.
   * @default null
   */
  answered?: boolean | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Ordering options for discussions returned from the connection.
   * @default {"direction":"DESC","field":"CREATED_AT"}
   */
  orderBy?: IXGitHubDiscussionOrder | null;

  /**
   * Filter discussions to only those in a specific repository.
   */
  repositoryId?: string | null;
}

export interface ISponsoringOnXGitHubOrganizationArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Ordering options for the users and organizations returned from the connection.
   * @default {"direction":"DESC","field":"RELEVANCE"}
   */
  orderBy?: IXGitHubSponsorOrder | null;
}

export interface ISponsorsOnXGitHubOrganizationArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Ordering options for sponsors returned from the connection.
   * @default {"direction":"DESC","field":"RELEVANCE"}
   */
  orderBy?: IXGitHubSponsorOrder | null;

  /**
   * If given, will filter for sponsors at the given tier. Will only return
   * sponsors whose tier the viewer is permitted to see.
   */
  tierId?: string | null;
}

export interface ISponsorsActivitiesOnXGitHubOrganizationArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Ordering options for activity returned from the connection.
   * @default {"direction":"DESC","field":"TIMESTAMP"}
   */
  orderBy?: IXGitHubSponsorsActivityOrder | null;

  /**
   * Filter activities returned to only those that occurred in a given time range.
   * @default "MONTH"
   */
  period?: XGitHubSponsorsActivityPeriod | null;
}

export interface ISponsorshipNewslettersOnXGitHubOrganizationArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Ordering options for sponsorship updates returned from the connection.
   * @default {"direction":"DESC","field":"CREATED_AT"}
   */
  orderBy?: IXGitHubSponsorshipNewsletterOrder | null;
}

export interface ISponsorshipsAsMaintainerOnXGitHubOrganizationArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Whether or not to include private sponsorships in the result set
   * @default false
   */
  includePrivate?: boolean | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Ordering options for sponsorships returned from this connection. If left
   * blank, the sponsorships will be ordered based on relevancy to the viewer.
   */
  orderBy?: IXGitHubSponsorshipOrder | null;
}

export interface ISponsorshipsAsSponsorOnXGitHubOrganizationArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Ordering options for sponsorships returned from this connection. If left
   * blank, the sponsorships will be ordered based on relevancy to the viewer.
   */
  orderBy?: IXGitHubSponsorshipOrder | null;
}

export interface ITeamOnXGitHubOrganizationArguments {
  /**
   * The name or slug of the team to find.
   */
  slug: string;
}

export interface ITeamsOnXGitHubOrganizationArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * If true, filters teams that are mapped to an LDAP Group (Enterprise only)
   */
  ldapMapped?: boolean | null;

  /**
   * Ordering options for teams returned from the connection
   */
  orderBy?: IXGitHubTeamOrder | null;

  /**
   * If non-null, filters teams according to privacy
   */
  privacy?: XGitHubTeamPrivacy | null;

  /**
   * If non-null, filters teams with query on team name and team slug
   */
  query?: string | null;

  /**
   * If non-null, filters teams according to whether the viewer is an admin or member on team
   */
  role?: XGitHubTeamRole | null;

  /**
   * If true, restrict to only root teams
   * @default false
   */
  rootTeamsOnly?: boolean | null;

  /**
   * User logins to filter by
   */
  userLogins?: Array<string> | null;
}

/**
 * An audit entry in an organization audit log.
 */
export type _xGitHubOrganizationAuditEntry =
  | IXGitHubMembersCanDeleteReposClearAuditEntry
  | IXGitHubMembersCanDeleteReposDisableAuditEntry
  | IXGitHubMembersCanDeleteReposEnableAuditEntry
  | IXGitHubOauthApplicationCreateAuditEntry
  | IXGitHubOrgAddBillingManagerAuditEntry
  | IXGitHubOrgAddMemberAuditEntry
  | IXGitHubOrgBlockUserAuditEntry
  | IXGitHubOrgConfigDisableCollaboratorsOnlyAuditEntry
  | IXGitHubOrgConfigEnableCollaboratorsOnlyAuditEntry
  | IXGitHubOrgCreateAuditEntry
  | IXGitHubOrgDisableOauthAppRestrictionsAuditEntry
  | IXGitHubOrgDisableSamlAuditEntry
  | IXGitHubOrgDisableTwoFactorRequirementAuditEntry
  | IXGitHubOrgEnableOauthAppRestrictionsAuditEntry
  | IXGitHubOrgEnableSamlAuditEntry
  | IXGitHubOrgEnableTwoFactorRequirementAuditEntry
  | IXGitHubOrgInviteMemberAuditEntry
  | IXGitHubOrgInviteToBusinessAuditEntry
  | IXGitHubOrgOauthAppAccessApprovedAuditEntry
  | IXGitHubOrgOauthAppAccessDeniedAuditEntry
  | IXGitHubOrgOauthAppAccessRequestedAuditEntry
  | IXGitHubOrgRemoveBillingManagerAuditEntry
  | IXGitHubOrgRemoveMemberAuditEntry
  | IXGitHubOrgRemoveOutsideCollaboratorAuditEntry
  | IXGitHubOrgRestoreMemberAuditEntry
  | IXGitHubOrgUnblockUserAuditEntry
  | IXGitHubOrgUpdateDefaultRepositoryPermissionAuditEntry
  | IXGitHubOrgUpdateMemberAuditEntry
  | IXGitHubOrgUpdateMemberRepositoryCreationPermissionAuditEntry
  | IXGitHubOrgUpdateMemberRepositoryInvitationPermissionAuditEntry
  | IXGitHubPrivateRepositoryForkingDisableAuditEntry
  | IXGitHubPrivateRepositoryForkingEnableAuditEntry
  | IXGitHubRepoAccessAuditEntry
  | IXGitHubRepoAddMemberAuditEntry
  | IXGitHubRepoAddTopicAuditEntry
  | IXGitHubRepoArchivedAuditEntry
  | IXGitHubRepoChangeMergeSettingAuditEntry
  | IXGitHubRepoConfigDisableAnonymousGitAccessAuditEntry
  | IXGitHubRepoConfigDisableCollaboratorsOnlyAuditEntry
  | IXGitHubRepoConfigDisableContributorsOnlyAuditEntry
  | IXGitHubRepoConfigDisableSockpuppetDisallowedAuditEntry
  | IXGitHubRepoConfigEnableAnonymousGitAccessAuditEntry
  | IXGitHubRepoConfigEnableCollaboratorsOnlyAuditEntry
  | IXGitHubRepoConfigEnableContributorsOnlyAuditEntry
  | IXGitHubRepoConfigEnableSockpuppetDisallowedAuditEntry
  | IXGitHubRepoConfigLockAnonymousGitAccessAuditEntry
  | IXGitHubRepoConfigUnlockAnonymousGitAccessAuditEntry
  | IXGitHubRepoCreateAuditEntry
  | IXGitHubRepoDestroyAuditEntry
  | IXGitHubRepoRemoveMemberAuditEntry
  | IXGitHubRepoRemoveTopicAuditEntry
  | IXGitHubRepositoryVisibilityChangeDisableAuditEntry
  | IXGitHubRepositoryVisibilityChangeEnableAuditEntry
  | IXGitHubTeamAddMemberAuditEntry
  | IXGitHubTeamAddRepositoryAuditEntry
  | IXGitHubTeamChangeParentTeamAuditEntry
  | IXGitHubTeamRemoveMemberAuditEntry
  | IXGitHubTeamRemoveRepositoryAuditEntry;

/**
 * The connection type for OrganizationAuditEntry.
 */
export interface IXGitHubOrganizationAuditEntryConnection {
  __typename: '_xGitHubOrganizationAuditEntryConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubOrganizationAuditEntryEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<_xGitHubOrganizationAuditEntry | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * Metadata for an audit entry with action org.*
 */
export type _xGitHubOrganizationAuditEntryData =
  | IXGitHubMembersCanDeleteReposClearAuditEntry
  | IXGitHubMembersCanDeleteReposDisableAuditEntry
  | IXGitHubMembersCanDeleteReposEnableAuditEntry
  | IXGitHubOauthApplicationCreateAuditEntry
  | IXGitHubOrgAddBillingManagerAuditEntry
  | IXGitHubOrgAddMemberAuditEntry
  | IXGitHubOrgBlockUserAuditEntry
  | IXGitHubOrgConfigDisableCollaboratorsOnlyAuditEntry
  | IXGitHubOrgConfigEnableCollaboratorsOnlyAuditEntry
  | IXGitHubOrgCreateAuditEntry
  | IXGitHubOrgDisableOauthAppRestrictionsAuditEntry
  | IXGitHubOrgDisableSamlAuditEntry
  | IXGitHubOrgDisableTwoFactorRequirementAuditEntry
  | IXGitHubOrgEnableOauthAppRestrictionsAuditEntry
  | IXGitHubOrgEnableSamlAuditEntry
  | IXGitHubOrgEnableTwoFactorRequirementAuditEntry
  | IXGitHubOrgInviteMemberAuditEntry
  | IXGitHubOrgInviteToBusinessAuditEntry
  | IXGitHubOrgOauthAppAccessApprovedAuditEntry
  | IXGitHubOrgOauthAppAccessDeniedAuditEntry
  | IXGitHubOrgOauthAppAccessRequestedAuditEntry
  | IXGitHubOrgRemoveBillingManagerAuditEntry
  | IXGitHubOrgRemoveMemberAuditEntry
  | IXGitHubOrgRemoveOutsideCollaboratorAuditEntry
  | IXGitHubOrgRestoreMemberAuditEntry
  | IXGitHubOrgRestoreMemberMembershipOrganizationAuditEntryData
  | IXGitHubOrgUnblockUserAuditEntry
  | IXGitHubOrgUpdateDefaultRepositoryPermissionAuditEntry
  | IXGitHubOrgUpdateMemberAuditEntry
  | IXGitHubOrgUpdateMemberRepositoryCreationPermissionAuditEntry
  | IXGitHubOrgUpdateMemberRepositoryInvitationPermissionAuditEntry
  | IXGitHubPrivateRepositoryForkingDisableAuditEntry
  | IXGitHubPrivateRepositoryForkingEnableAuditEntry
  | IXGitHubRepoAccessAuditEntry
  | IXGitHubRepoAddMemberAuditEntry
  | IXGitHubRepoAddTopicAuditEntry
  | IXGitHubRepoArchivedAuditEntry
  | IXGitHubRepoChangeMergeSettingAuditEntry
  | IXGitHubRepoConfigDisableAnonymousGitAccessAuditEntry
  | IXGitHubRepoConfigDisableCollaboratorsOnlyAuditEntry
  | IXGitHubRepoConfigDisableContributorsOnlyAuditEntry
  | IXGitHubRepoConfigDisableSockpuppetDisallowedAuditEntry
  | IXGitHubRepoConfigEnableAnonymousGitAccessAuditEntry
  | IXGitHubRepoConfigEnableCollaboratorsOnlyAuditEntry
  | IXGitHubRepoConfigEnableContributorsOnlyAuditEntry
  | IXGitHubRepoConfigEnableSockpuppetDisallowedAuditEntry
  | IXGitHubRepoConfigLockAnonymousGitAccessAuditEntry
  | IXGitHubRepoConfigUnlockAnonymousGitAccessAuditEntry
  | IXGitHubRepoCreateAuditEntry
  | IXGitHubRepoDestroyAuditEntry
  | IXGitHubRepoRemoveMemberAuditEntry
  | IXGitHubRepoRemoveTopicAuditEntry
  | IXGitHubRepositoryVisibilityChangeDisableAuditEntry
  | IXGitHubRepositoryVisibilityChangeEnableAuditEntry
  | IXGitHubTeamAddMemberAuditEntry
  | IXGitHubTeamAddRepositoryAuditEntry
  | IXGitHubTeamChangeParentTeamAuditEntry
  | IXGitHubTeamRemoveMemberAuditEntry
  | IXGitHubTeamRemoveRepositoryAuditEntry;

/**
 * Metadata for an audit entry with action org.*
 */
export interface IXGitHubOrganizationAuditEntryData {
  __typename: '_xGitHubOrganizationAuditEntryData';

  /**
   * The Organization associated with the Audit Entry.
   */
  organization: IXGitHubOrganization | null;

  /**
   * The name of the Organization.
   */
  organizationName: string | null;

  /**
   * The HTTP path for the organization
   */
  organizationResourcePath: any | null;

  /**
   * The HTTP URL for the organization
   */
  organizationUrl: any | null;
}

/**
 * An edge in a connection.
 */
export interface IXGitHubOrganizationAuditEntryEdge {
  __typename: '_xGitHubOrganizationAuditEntryEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: _xGitHubOrganizationAuditEntry | null;
}

/**
 * The connection type for Organization.
 */
export interface IXGitHubOrganizationConnection {
  __typename: '_xGitHubOrganizationConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubOrganizationEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitHubOrganization | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface IXGitHubOrganizationEdge {
  __typename: '_xGitHubOrganizationEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitHubOrganization | null;
}

/**
 * An Identity Provider configured to provision SAML and SCIM identities for Organizations
 */
export interface IXGitHubOrganizationIdentityProvider {
  __typename: '_xGitHubOrganizationIdentityProvider';

  /**
   * The digest algorithm used to sign SAML requests for the Identity Provider.
   */
  digestMethod: any | null;

  /**
   * External Identities provisioned by this Identity Provider
   */
  externalIdentities: IXGitHubExternalIdentityConnection;
  id: string;

  /**
   * The x509 certificate used by the Identity Provider to sign assertions and responses.
   */
  idpCertificate: any | null;

  /**
   * The Issuer Entity ID for the SAML Identity Provider
   */
  issuer: string | null;

  /**
   * Organization this Identity Provider belongs to
   */
  organization: IXGitHubOrganization | null;

  /**
   * The signature algorithm used to sign SAML requests for the Identity Provider.
   */
  signatureMethod: any | null;

  /**
   * The URL endpoint for the Identity Provider's SAML SSO.
   */
  ssoUrl: any | null;
}

export interface IExternalIdentitiesOnXGitHubOrganizationIdentityProviderArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Filter to external identities with valid org membership only
   */
  membersOnly?: boolean | null;
}

/**
 * An Invitation for a user to an organization.
 */
export interface IXGitHubOrganizationInvitation {
  __typename: '_xGitHubOrganizationInvitation';

  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: any;

  /**
   * The email address of the user invited to the organization.
   */
  email: string | null;
  id: string;

  /**
   * The type of invitation that was sent (e.g. email, user).
   */
  invitationType: XGitHubOrganizationInvitationType;

  /**
   * The user who was invited to the organization.
   */
  invitee: IXGitHubUser | null;

  /**
   * The user who created the invitation.
   */
  inviter: IXGitHubUser;

  /**
   * The organization the invite is for
   */
  organization: IXGitHubOrganization;

  /**
   * The user's pending role in the organization (e.g. member, owner).
   */
  role: XGitHubOrganizationInvitationRole;
}

/**
 * The connection type for OrganizationInvitation.
 */
export interface IXGitHubOrganizationInvitationConnection {
  __typename: '_xGitHubOrganizationInvitationConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubOrganizationInvitationEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitHubOrganizationInvitation | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface IXGitHubOrganizationInvitationEdge {
  __typename: '_xGitHubOrganizationInvitationEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitHubOrganizationInvitation | null;
}

/**
 * The possible organization invitation roles.
 */
export const enum XGitHubOrganizationInvitationRole {
  /**
   * The user is invited to be an admin of the organization.
   */
  ADMIN = 'ADMIN',

  /**
   * The user is invited to be a billing manager of the organization.
   */
  BILLING_MANAGER = 'BILLING_MANAGER',

  /**
   * The user is invited to be a direct member of the organization.
   */
  DIRECT_MEMBER = 'DIRECT_MEMBER',

  /**
   * The user's previous role will be reinstated.
   */
  REINSTATE = 'REINSTATE'
}

/**
 * The possible organization invitation types.
 */
export const enum XGitHubOrganizationInvitationType {
  /**
   * The invitation was to an email address.
   */
  EMAIL = 'EMAIL',

  /**
   * The invitation was to an existing user.
   */
  USER = 'USER'
}

/**
 * The connection type for User.
 */
export interface IXGitHubOrganizationMemberConnection {
  __typename: '_xGitHubOrganizationMemberConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubOrganizationMemberEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitHubUser | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * Represents a user within an organization.
 */
export interface IXGitHubOrganizationMemberEdge {
  __typename: '_xGitHubOrganizationMemberEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * Whether the organization member has two factor enabled or not. Returns null if information is not available to viewer.
   */
  hasTwoFactorEnabled: boolean | null;

  /**
   * The item at the end of the edge.
   */
  node: IXGitHubUser | null;

  /**
   * The role this user has in the organization.
   */
  role: XGitHubOrganizationMemberRole | null;
}

/**
 * The possible roles within an organization for its members.
 */
export const enum XGitHubOrganizationMemberRole {
  /**
   * The user is an administrator of the organization.
   */
  ADMIN = 'ADMIN',

  /**
   * The user is a member of the organization.
   */
  MEMBER = 'MEMBER'
}

/**
 * The possible values for the members can create repositories setting on an organization.
 */
export const enum XGitHubOrganizationMembersCanCreateRepositoriesSettingValue {
  /**
   * Members will be able to create public and private repositories.
   */
  ALL = 'ALL',

  /**
   * Members will not be able to create public or private repositories.
   */
  DISABLED = 'DISABLED',

  /**
   * Members will be able to create only internal repositories.
   */
  INTERNAL = 'INTERNAL',

  /**
   * Members will be able to create only private repositories.
   */
  PRIVATE = 'PRIVATE'
}

/**
 * Ordering options for organization connections.
 */
export interface IXGitHubOrganizationOrder {
  /**
   * The ordering direction.
   */
  direction: XGitHubOrderDirection;

  /**
   * The field to order organizations by.
   */
  field: XGitHubOrganizationOrderField;
}

/**
 * Properties by which organization connections can be ordered.
 */
export const enum XGitHubOrganizationOrderField {
  /**
   * Order organizations by creation time
   */
  CREATED_AT = 'CREATED_AT',

  /**
   * Order organizations by login
   */
  LOGIN = 'LOGIN'
}

/**
 * An organization teams hovercard context
 */
export interface IXGitHubOrganizationTeamsHovercardContext {
  __typename: '_xGitHubOrganizationTeamsHovercardContext';

  /**
   * A string describing this context
   */
  message: string;

  /**
   * An octicon to accompany this context
   */
  octicon: string;

  /**
   * Teams in this organization the user is a member of that are relevant
   */
  relevantTeams: IXGitHubTeamConnection;

  /**
   * The path for the full team list for this user
   */
  teamsResourcePath: any;

  /**
   * The URL for the full team list for this user
   */
  teamsUrl: any;

  /**
   * The total number of teams the user is on in the organization
   */
  totalTeamCount: number;
}

export interface IRelevantTeamsOnXGitHubOrganizationTeamsHovercardContextArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

/**
 * An organization list hovercard context
 */
export interface IXGitHubOrganizationsHovercardContext {
  __typename: '_xGitHubOrganizationsHovercardContext';

  /**
   * A string describing this context
   */
  message: string;

  /**
   * An octicon to accompany this context
   */
  octicon: string;

  /**
   * Organizations this user is a member of that are relevant
   */
  relevantOrganizations: IXGitHubOrganizationConnection;

  /**
   * The total number of organizations this user is in
   */
  totalOrganizationCount: number;
}

export interface IRelevantOrganizationsOnXGitHubOrganizationsHovercardContextArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

/**
 * Information for an uploaded package.
 */
export interface IXGitHubPackage {
  __typename: '_xGitHubPackage';
  id: string;

  /**
   * Find the latest version for the package.
   */
  latestVersion: IXGitHubPackageVersion | null;

  /**
   * Identifies the name of the package.
   */
  name: string;

  /**
   * Identifies the type of the package.
   */
  packageType: XGitHubPackageType;

  /**
   * The repository this package belongs to.
   */
  repository: IXGitHubRepository | null;

  /**
   * Statistics about package activity.
   */
  statistics: IXGitHubPackageStatistics | null;

  /**
   * Find package version by version string.
   */
  version: IXGitHubPackageVersion | null;

  /**
   * list of versions for this package
   */
  versions: IXGitHubPackageVersionConnection;
}

export interface IVersionOnXGitHubPackageArguments {
  /**
   * The package version.
   */
  version: string;
}

export interface IVersionsOnXGitHubPackageArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Ordering of the returned packages.
   * @default {"direction":"DESC","field":"CREATED_AT"}
   */
  orderBy?: IXGitHubPackageVersionOrder | null;
}

/**
 * The connection type for Package.
 */
export interface IXGitHubPackageConnection {
  __typename: '_xGitHubPackageConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubPackageEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitHubPackage | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface IXGitHubPackageEdge {
  __typename: '_xGitHubPackageEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitHubPackage | null;
}

/**
 * A file in a package version.
 */
export interface IXGitHubPackageFile {
  __typename: '_xGitHubPackageFile';
  id: string;

  /**
   * MD5 hash of the file.
   */
  md5: string | null;

  /**
   * Name of the file.
   */
  name: string;

  /**
   * The package version this file belongs to.
   */
  packageVersion: IXGitHubPackageVersion | null;

  /**
   * SHA1 hash of the file.
   */
  sha1: string | null;

  /**
   * SHA256 hash of the file.
   */
  sha256: string | null;

  /**
   * Size of the file in bytes.
   */
  size: number | null;

  /**
   * Identifies the date and time when the object was last updated.
   */
  updatedAt: any;

  /**
   * URL to download the asset.
   */
  url: any | null;
}

/**
 * The connection type for PackageFile.
 */
export interface IXGitHubPackageFileConnection {
  __typename: '_xGitHubPackageFileConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubPackageFileEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitHubPackageFile | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface IXGitHubPackageFileEdge {
  __typename: '_xGitHubPackageFileEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitHubPackageFile | null;
}

/**
 * Ways in which lists of package files can be ordered upon return.
 */
export interface IXGitHubPackageFileOrder {
  /**
   * The direction in which to order package files by the specified field.
   */
  direction?: XGitHubOrderDirection | null;

  /**
   * The field in which to order package files by.
   */
  field?: XGitHubPackageFileOrderField | null;
}

/**
 * Properties by which package file connections can be ordered.
 */
export const enum XGitHubPackageFileOrderField {
  /**
   * Order package files by creation time
   */
  CREATED_AT = 'CREATED_AT'
}

/**
 * Ways in which lists of packages can be ordered upon return.
 */
export interface IXGitHubPackageOrder {
  /**
   * The direction in which to order packages by the specified field.
   */
  direction?: XGitHubOrderDirection | null;

  /**
   * The field in which to order packages by.
   */
  field?: XGitHubPackageOrderField | null;
}

/**
 * Properties by which package connections can be ordered.
 */
export const enum XGitHubPackageOrderField {
  /**
   * Order packages by creation time
   */
  CREATED_AT = 'CREATED_AT'
}

/**
 * Represents an owner of a package.
 */
export type _xGitHubPackageOwner =
  | IXGitHubOrganization
  | IXGitHubRepository
  | IXGitHubUser;

/**
 * Represents an owner of a package.
 */
export interface IXGitHubPackageOwner {
  __typename: '_xGitHubPackageOwner';
  id: string;

  /**
   * A list of packages under the owner.
   */
  packages: IXGitHubPackageConnection;
}

export interface IPackagesOnXGitHubPackageOwnerArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Find packages by their names.
   */
  names?: Array<string | null> | null;

  /**
   * Ordering of the returned packages.
   * @default {"direction":"DESC","field":"CREATED_AT"}
   */
  orderBy?: IXGitHubPackageOrder | null;

  /**
   * Filter registry package by type.
   */
  packageType?: XGitHubPackageType | null;

  /**
   * Find packages in a repository by ID.
   */
  repositoryId?: string | null;
}

/**
 * Represents a object that contains package activity statistics such as downloads.
 */
export interface IXGitHubPackageStatistics {
  __typename: '_xGitHubPackageStatistics';

  /**
   * Number of times the package was downloaded since it was created.
   */
  downloadsTotalCount: number;
}

/**
 * A version tag contains the mapping between a tag name and a version.
 */
export interface IXGitHubPackageTag {
  __typename: '_xGitHubPackageTag';
  id: string;

  /**
   * Identifies the tag name of the version.
   */
  name: string;

  /**
   * Version that the tag is associated with.
   */
  version: IXGitHubPackageVersion | null;
}

/**
 * The possible types of a package.
 */
export const enum XGitHubPackageType {
  /**
   * A debian package.
   */
  DEBIAN = 'DEBIAN',

  /**
   * A docker image.
   * @deprecated "DOCKER will be removed from this enum as this type will be migrated to only be used by the Packages REST API. Removal on 2021-06-21 UTC."
   */
  DOCKER = 'DOCKER',

  /**
   * A maven package.
   */
  MAVEN = 'MAVEN',

  /**
   * An npm package.
   */
  NPM = 'NPM',

  /**
   * A nuget package.
   */
  NUGET = 'NUGET',

  /**
   * A python package.
   */
  PYPI = 'PYPI',

  /**
   * A rubygems package.
   */
  RUBYGEMS = 'RUBYGEMS'
}

/**
 * Information about a specific package version.
 */
export interface IXGitHubPackageVersion {
  __typename: '_xGitHubPackageVersion';

  /**
   * List of files associated with this package version
   */
  files: IXGitHubPackageFileConnection;
  id: string;

  /**
   * The package associated with this version.
   */
  package: IXGitHubPackage | null;

  /**
   * The platform this version was built for.
   */
  platform: string | null;

  /**
   * Whether or not this version is a pre-release.
   */
  preRelease: boolean;

  /**
   * The README of this package version.
   */
  readme: string | null;

  /**
   * The release associated with this package version.
   */
  release: IXGitHubRelease | null;

  /**
   * Statistics about package activity.
   */
  statistics: IXGitHubPackageVersionStatistics | null;

  /**
   * The package version summary.
   */
  summary: string | null;

  /**
   * The version string.
   */
  version: string;
}

export interface IFilesOnXGitHubPackageVersionArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Ordering of the returned package files.
   * @default {"direction":"ASC","field":"CREATED_AT"}
   */
  orderBy?: IXGitHubPackageFileOrder | null;
}

/**
 * The connection type for PackageVersion.
 */
export interface IXGitHubPackageVersionConnection {
  __typename: '_xGitHubPackageVersionConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubPackageVersionEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitHubPackageVersion | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface IXGitHubPackageVersionEdge {
  __typename: '_xGitHubPackageVersionEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitHubPackageVersion | null;
}

/**
 * Ways in which lists of package versions can be ordered upon return.
 */
export interface IXGitHubPackageVersionOrder {
  /**
   * The direction in which to order package versions by the specified field.
   */
  direction?: XGitHubOrderDirection | null;

  /**
   * The field in which to order package versions by.
   */
  field?: XGitHubPackageVersionOrderField | null;
}

/**
 * Properties by which package version connections can be ordered.
 */
export const enum XGitHubPackageVersionOrderField {
  /**
   * Order package versions by creation time
   */
  CREATED_AT = 'CREATED_AT'
}

/**
 * Represents a object that contains package version activity statistics such as downloads.
 */
export interface IXGitHubPackageVersionStatistics {
  __typename: '_xGitHubPackageVersionStatistics';

  /**
   * Number of times the package was downloaded since it was created.
   */
  downloadsTotalCount: number;
}

/**
 * Information about pagination in a connection.
 */
export interface IXGitHubPageInfo {
  __typename: '_xGitHubPageInfo';

  /**
   * When paginating forwards, the cursor to continue.
   */
  endCursor: string | null;

  /**
   * When paginating forwards, are there more items?
   */
  hasNextPage: boolean;

  /**
   * When paginating backwards, are there more items?
   */
  hasPreviousPage: boolean;

  /**
   * When paginating backwards, the cursor to continue.
   */
  startCursor: string | null;
}

/**
 * Types that can grant permissions on a repository to a user
 */
export type _xGitHubPermissionGranter =
  | IXGitHubOrganization
  | IXGitHubRepository
  | IXGitHubTeam;

/**
 * A level of permission and source for a user's access to a repository.
 */
export interface IXGitHubPermissionSource {
  __typename: '_xGitHubPermissionSource';

  /**
   * The organization the repository belongs to.
   */
  organization: IXGitHubOrganization;

  /**
   * The level of access this source has granted to the user.
   */
  permission: XGitHubDefaultRepositoryPermissionField;

  /**
   * The source of this permission.
   */
  source: _xGitHubPermissionGranter;
}

/**
 * Autogenerated input type of PinIssue
 */
export interface IXGitHubPinIssueInput {
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;

  /**
   * The ID of the issue to be pinned
   */
  issueId: string;
}

/**
 * Autogenerated return type of PinIssue
 */
export interface IXGitHubPinIssuePayload {
  __typename: '_xGitHubPinIssuePayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The issue that was pinned
   */
  issue: IXGitHubIssue | null;
}

/**
 * Types that can be pinned to a profile page.
 */
export type _xGitHubPinnableItem = IXGitHubGist | IXGitHubRepository;

/**
 * The connection type for PinnableItem.
 */
export interface IXGitHubPinnableItemConnection {
  __typename: '_xGitHubPinnableItemConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubPinnableItemEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<_xGitHubPinnableItem | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface IXGitHubPinnableItemEdge {
  __typename: '_xGitHubPinnableItemEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: _xGitHubPinnableItem | null;
}

/**
 * Represents items that can be pinned to a profile page or dashboard.
 */
export const enum XGitHubPinnableItemType {
  /**
   * A gist.
   */
  GIST = 'GIST',

  /**
   * An issue.
   */
  ISSUE = 'ISSUE',

  /**
   * An organization.
   */
  ORGANIZATION = 'ORGANIZATION',

  /**
   * A project.
   */
  PROJECT = 'PROJECT',

  /**
   * A pull request.
   */
  PULL_REQUEST = 'PULL_REQUEST',

  /**
   * A repository.
   */
  REPOSITORY = 'REPOSITORY',

  /**
   * A team.
   */
  TEAM = 'TEAM',

  /**
   * A user.
   */
  USER = 'USER'
}

/**
 * A Pinned Discussion is a discussion pinned to a repository's index page.
 */
export interface IXGitHubPinnedDiscussion {
  __typename: '_xGitHubPinnedDiscussion';

  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: any;

  /**
   * Identifies the primary key from the database.
   */
  databaseId: number | null;

  /**
   * The discussion that was pinned.
   */
  discussion: IXGitHubDiscussion;

  /**
   * Color stops of the chosen gradient
   */
  gradientStopColors: Array<string>;
  id: string;

  /**
   * Background texture pattern
   */
  pattern: XGitHubPinnedDiscussionPattern;

  /**
   * The actor that pinned this discussion.
   */
  pinnedBy: _xGitHubActor;

  /**
   * Preconfigured background gradient option
   */
  preconfiguredGradient: XGitHubPinnedDiscussionGradient | null;

  /**
   * The repository associated with this node.
   */
  repository: IXGitHubRepository;

  /**
   * Identifies the date and time when the object was last updated.
   */
  updatedAt: any;
}

/**
 * The connection type for PinnedDiscussion.
 */
export interface IXGitHubPinnedDiscussionConnection {
  __typename: '_xGitHubPinnedDiscussionConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubPinnedDiscussionEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitHubPinnedDiscussion | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface IXGitHubPinnedDiscussionEdge {
  __typename: '_xGitHubPinnedDiscussionEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitHubPinnedDiscussion | null;
}

/**
 * Preconfigured gradients that may be used to style discussions pinned within a repository.
 */
export const enum XGitHubPinnedDiscussionGradient {
  /**
   * A gradient of blue to mint
   */
  BLUE_MINT = 'BLUE_MINT',

  /**
   * A gradient of blue to purple
   */
  BLUE_PURPLE = 'BLUE_PURPLE',

  /**
   * A gradient of pink to blue
   */
  PINK_BLUE = 'PINK_BLUE',

  /**
   * A gradient of purple to coral
   */
  PURPLE_CORAL = 'PURPLE_CORAL',

  /**
   * A gradient of red to orange
   */
  RED_ORANGE = 'RED_ORANGE'
}

/**
 * Preconfigured background patterns that may be used to style discussions pinned within a repository.
 */
export const enum XGitHubPinnedDiscussionPattern {
  /**
   * An upward-facing chevron pattern
   */
  CHEVRON_UP = 'CHEVRON_UP',

  /**
   * A hollow dot pattern
   */
  DOT = 'DOT',

  /**
   * A solid dot pattern
   */
  DOT_FILL = 'DOT_FILL',

  /**
   * A heart pattern
   */
  HEART_FILL = 'HEART_FILL',

  /**
   * A plus sign pattern
   */
  PLUS = 'PLUS',

  /**
   * A lightning bolt pattern
   */
  ZAP = 'ZAP'
}

/**
 * Represents a 'pinned' event on a given issue or pull request.
 */
export interface IXGitHubPinnedEvent {
  __typename: '_xGitHubPinnedEvent';

  /**
   * Identifies the actor who performed the event.
   */
  actor: _xGitHubActor | null;

  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: any;
  id: string;

  /**
   * Identifies the issue associated with the event.
   */
  issue: IXGitHubIssue;
}

/**
 * A Pinned Issue is a issue pinned to a repository's index page.
 */
export interface IXGitHubPinnedIssue {
  __typename: '_xGitHubPinnedIssue';

  /**
   * Identifies the primary key from the database.
   */
  databaseId: number | null;
  id: string;

  /**
   * The issue that was pinned.
   */
  issue: IXGitHubIssue;

  /**
   * The actor that pinned this issue.
   */
  pinnedBy: _xGitHubActor;

  /**
   * The repository that this issue was pinned to.
   */
  repository: IXGitHubRepository;
}

/**
 * The connection type for PinnedIssue.
 */
export interface IXGitHubPinnedIssueConnection {
  __typename: '_xGitHubPinnedIssueConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubPinnedIssueEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitHubPinnedIssue | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface IXGitHubPinnedIssueEdge {
  __typename: '_xGitHubPinnedIssueEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitHubPinnedIssue | null;
}

/**
 * Audit log entry for a private_repository_forking.disable event.
 */
export interface IXGitHubPrivateRepositoryForkingDisableAuditEntry {
  __typename: '_xGitHubPrivateRepositoryForkingDisableAuditEntry';

  /**
   * The action name
   */
  action: string;

  /**
   * The user who initiated the action
   */
  actor: _xGitHubAuditEntryActor | null;

  /**
   * The IP address of the actor
   */
  actorIp: string | null;

  /**
   * A readable representation of the actor's location
   */
  actorLocation: IXGitHubActorLocation | null;

  /**
   * The username of the user who initiated the action
   */
  actorLogin: string | null;

  /**
   * The HTTP path for the actor.
   */
  actorResourcePath: any | null;

  /**
   * The HTTP URL for the actor.
   */
  actorUrl: any | null;

  /**
   * The time the action was initiated
   */
  createdAt: any;

  /**
   * The HTTP path for this enterprise.
   */
  enterpriseResourcePath: any | null;

  /**
   * The slug of the enterprise.
   */
  enterpriseSlug: string | null;

  /**
   * The HTTP URL for this enterprise.
   */
  enterpriseUrl: any | null;
  id: string;

  /**
   * The corresponding operation type for the action
   */
  operationType: XGitHubOperationType | null;

  /**
   * The Organization associated with the Audit Entry.
   */
  organization: IXGitHubOrganization | null;

  /**
   * The name of the Organization.
   */
  organizationName: string | null;

  /**
   * The HTTP path for the organization
   */
  organizationResourcePath: any | null;

  /**
   * The HTTP URL for the organization
   */
  organizationUrl: any | null;

  /**
   * The repository associated with the action
   */
  repository: IXGitHubRepository | null;

  /**
   * The name of the repository
   */
  repositoryName: string | null;

  /**
   * The HTTP path for the repository
   */
  repositoryResourcePath: any | null;

  /**
   * The HTTP URL for the repository
   */
  repositoryUrl: any | null;

  /**
   * The user affected by the action
   */
  user: IXGitHubUser | null;

  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin: string | null;

  /**
   * The HTTP path for the user.
   */
  userResourcePath: any | null;

  /**
   * The HTTP URL for the user.
   */
  userUrl: any | null;
}

/**
 * Audit log entry for a private_repository_forking.enable event.
 */
export interface IXGitHubPrivateRepositoryForkingEnableAuditEntry {
  __typename: '_xGitHubPrivateRepositoryForkingEnableAuditEntry';

  /**
   * The action name
   */
  action: string;

  /**
   * The user who initiated the action
   */
  actor: _xGitHubAuditEntryActor | null;

  /**
   * The IP address of the actor
   */
  actorIp: string | null;

  /**
   * A readable representation of the actor's location
   */
  actorLocation: IXGitHubActorLocation | null;

  /**
   * The username of the user who initiated the action
   */
  actorLogin: string | null;

  /**
   * The HTTP path for the actor.
   */
  actorResourcePath: any | null;

  /**
   * The HTTP URL for the actor.
   */
  actorUrl: any | null;

  /**
   * The time the action was initiated
   */
  createdAt: any;

  /**
   * The HTTP path for this enterprise.
   */
  enterpriseResourcePath: any | null;

  /**
   * The slug of the enterprise.
   */
  enterpriseSlug: string | null;

  /**
   * The HTTP URL for this enterprise.
   */
  enterpriseUrl: any | null;
  id: string;

  /**
   * The corresponding operation type for the action
   */
  operationType: XGitHubOperationType | null;

  /**
   * The Organization associated with the Audit Entry.
   */
  organization: IXGitHubOrganization | null;

  /**
   * The name of the Organization.
   */
  organizationName: string | null;

  /**
   * The HTTP path for the organization
   */
  organizationResourcePath: any | null;

  /**
   * The HTTP URL for the organization
   */
  organizationUrl: any | null;

  /**
   * The repository associated with the action
   */
  repository: IXGitHubRepository | null;

  /**
   * The name of the repository
   */
  repositoryName: string | null;

  /**
   * The HTTP path for the repository
   */
  repositoryResourcePath: any | null;

  /**
   * The HTTP URL for the repository
   */
  repositoryUrl: any | null;

  /**
   * The user affected by the action
   */
  user: IXGitHubUser | null;

  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin: string | null;

  /**
   * The HTTP path for the user.
   */
  userResourcePath: any | null;

  /**
   * The HTTP URL for the user.
   */
  userUrl: any | null;
}

/**
 * A curatable list of repositories relating to a repository owner, which defaults
 * to showing the most popular repositories they own.
 */
export interface IXGitHubProfileItemShowcase {
  __typename: '_xGitHubProfileItemShowcase';

  /**
   * Whether or not the owner has pinned any repositories or gists.
   */
  hasPinnedItems: boolean;

  /**
   * The repositories and gists in the showcase. If the profile owner has any
   * pinned items, those will be returned. Otherwise, the profile owner's popular
   * repositories will be returned.
   */
  items: IXGitHubPinnableItemConnection;
}

export interface IItemsOnXGitHubProfileItemShowcaseArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

/**
 * Represents any entity on GitHub that has a profile page.
 */
export type _xGitHubProfileOwner = IXGitHubOrganization | IXGitHubUser;

/**
 * Represents any entity on GitHub that has a profile page.
 */
export interface IXGitHubProfileOwner {
  __typename: '_xGitHubProfileOwner';

  /**
   * Determine if this repository owner has any items that can be pinned to their profile.
   */
  anyPinnableItems: boolean;

  /**
   * The public profile email.
   */
  email: string | null;
  id: string;

  /**
   * Showcases a selection of repositories and gists that the profile owner has
   * either curated or that have been selected automatically based on popularity.
   */
  itemShowcase: IXGitHubProfileItemShowcase;

  /**
   * The public profile location.
   */
  location: string | null;

  /**
   * The username used to login.
   */
  login: string;

  /**
   * The public profile name.
   */
  name: string | null;

  /**
   * A list of repositories and gists this profile owner can pin to their profile.
   */
  pinnableItems: IXGitHubPinnableItemConnection;

  /**
   * A list of repositories and gists this profile owner has pinned to their profile
   */
  pinnedItems: IXGitHubPinnableItemConnection;

  /**
   * Returns how many more items this profile owner can pin to their profile.
   */
  pinnedItemsRemaining: number;

  /**
   * Can the viewer pin repositories and gists to the profile?
   */
  viewerCanChangePinnedItems: boolean;

  /**
   * The public profile website URL.
   */
  websiteUrl: any | null;
}

export interface IAnyPinnableItemsOnXGitHubProfileOwnerArguments {
  /**
   * Filter to only a particular kind of pinnable item.
   */
  type?: XGitHubPinnableItemType | null;
}

export interface IPinnableItemsOnXGitHubProfileOwnerArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Filter the types of pinnable items that are returned.
   */
  types?: Array<XGitHubPinnableItemType> | null;
}

export interface IPinnedItemsOnXGitHubProfileOwnerArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Filter the types of pinned items that are returned.
   */
  types?: Array<XGitHubPinnableItemType> | null;
}

/**
 * Projects manage issues, pull requests and notes within a project owner.
 */
export interface IXGitHubProject {
  __typename: '_xGitHubProject';

  /**
   * The project's description body.
   */
  body: string | null;

  /**
   * The projects description body rendered to HTML.
   */
  bodyHTML: any;

  /**
   * `true` if the object is closed (definition of closed may depend on type)
   */
  closed: boolean;

  /**
   * Identifies the date and time when the object was closed.
   */
  closedAt: any | null;

  /**
   * List of columns in the project
   */
  columns: IXGitHubProjectColumnConnection;

  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: any;

  /**
   * The actor who originally created the project.
   */
  creator: _xGitHubActor | null;

  /**
   * Identifies the primary key from the database.
   */
  databaseId: number | null;
  id: string;

  /**
   * The project's name.
   */
  name: string;

  /**
   * The project's number.
   */
  number: number;

  /**
   * The project's owner. Currently limited to repositories, organizations, and users.
   */
  owner: _xGitHubProjectOwner;

  /**
   * List of pending cards in this project
   */
  pendingCards: IXGitHubProjectCardConnection;

  /**
   * Project progress details.
   */
  progress: IXGitHubProjectProgress;

  /**
   * The HTTP path for this project
   */
  resourcePath: any;

  /**
   * Whether the project is open or closed.
   */
  state: XGitHubProjectState;

  /**
   * Identifies the date and time when the object was last updated.
   */
  updatedAt: any;

  /**
   * The HTTP URL for this project
   */
  url: any;

  /**
   * Check if the current viewer can update this object.
   */
  viewerCanUpdate: boolean;
}

export interface IColumnsOnXGitHubProjectArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IPendingCardsOnXGitHubProjectArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * A list of archived states to filter the cards by
   * @default ["ARCHIVED","NOT_ARCHIVED"]
   */
  archivedStates?: Array<XGitHubProjectCardArchivedState | null> | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

/**
 * A card in a project.
 */
export interface IXGitHubProjectCard {
  __typename: '_xGitHubProjectCard';

  /**
   * The project column this card is associated under. A card may only belong to one
   * project column at a time. The column field will be null if the card is created
   * in a pending state and has yet to be associated with a column. Once cards are
   * associated with a column, they will not become pending in the future.
   */
  column: IXGitHubProjectColumn | null;

  /**
   * The card content item
   */
  content: _xGitHubProjectCardItem | null;

  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: any;

  /**
   * The actor who created this card
   */
  creator: _xGitHubActor | null;

  /**
   * Identifies the primary key from the database.
   */
  databaseId: number | null;
  id: string;

  /**
   * Whether the card is archived
   */
  isArchived: boolean;

  /**
   * The card note
   */
  note: string | null;

  /**
   * The project that contains this card.
   */
  project: IXGitHubProject;

  /**
   * The HTTP path for this card
   */
  resourcePath: any;

  /**
   * The state of ProjectCard
   */
  state: XGitHubProjectCardState | null;

  /**
   * Identifies the date and time when the object was last updated.
   */
  updatedAt: any;

  /**
   * The HTTP URL for this card
   */
  url: any;
}

/**
 * The possible archived states of a project card.
 */
export const enum XGitHubProjectCardArchivedState {
  /**
   * A project card that is archived
   */
  ARCHIVED = 'ARCHIVED',

  /**
   * A project card that is not archived
   */
  NOT_ARCHIVED = 'NOT_ARCHIVED'
}

/**
 * The connection type for ProjectCard.
 */
export interface IXGitHubProjectCardConnection {
  __typename: '_xGitHubProjectCardConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubProjectCardEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitHubProjectCard | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface IXGitHubProjectCardEdge {
  __typename: '_xGitHubProjectCardEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitHubProjectCard | null;
}

/**
 * Types that can be inside Project Cards.
 */
export type _xGitHubProjectCardItem = IXGitHubIssue | IXGitHubPullRequest;

/**
 * Various content states of a ProjectCard
 */
export const enum XGitHubProjectCardState {
  /**
   * The card has content only.
   */
  CONTENT_ONLY = 'CONTENT_ONLY',

  /**
   * The card has a note only.
   */
  NOTE_ONLY = 'NOTE_ONLY',

  /**
   * The card is redacted.
   */
  REDACTED = 'REDACTED'
}

/**
 * A column inside a project.
 */
export interface IXGitHubProjectColumn {
  __typename: '_xGitHubProjectColumn';

  /**
   * List of cards in the column
   */
  cards: IXGitHubProjectCardConnection;

  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: any;

  /**
   * Identifies the primary key from the database.
   */
  databaseId: number | null;
  id: string;

  /**
   * The project column's name.
   */
  name: string;

  /**
   * The project that contains this column.
   */
  project: IXGitHubProject;

  /**
   * The semantic purpose of the column
   */
  purpose: XGitHubProjectColumnPurpose | null;

  /**
   * The HTTP path for this project column
   */
  resourcePath: any;

  /**
   * Identifies the date and time when the object was last updated.
   */
  updatedAt: any;

  /**
   * The HTTP URL for this project column
   */
  url: any;
}

export interface ICardsOnXGitHubProjectColumnArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * A list of archived states to filter the cards by
   * @default ["ARCHIVED","NOT_ARCHIVED"]
   */
  archivedStates?: Array<XGitHubProjectCardArchivedState | null> | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

/**
 * The connection type for ProjectColumn.
 */
export interface IXGitHubProjectColumnConnection {
  __typename: '_xGitHubProjectColumnConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubProjectColumnEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitHubProjectColumn | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface IXGitHubProjectColumnEdge {
  __typename: '_xGitHubProjectColumnEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitHubProjectColumn | null;
}

/**
 * The semantic purpose of the column - todo, in progress, or done.
 */
export const enum XGitHubProjectColumnPurpose {
  /**
   * The column contains cards which are complete
   */
  DONE = 'DONE',

  /**
   * The column contains cards which are currently being worked on
   */
  IN_PROGRESS = 'IN_PROGRESS',

  /**
   * The column contains cards still to be worked on
   */
  TODO = 'TODO'
}

/**
 * A list of projects associated with the owner.
 */
export interface IXGitHubProjectConnection {
  __typename: '_xGitHubProjectConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubProjectEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitHubProject | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface IXGitHubProjectEdge {
  __typename: '_xGitHubProjectEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitHubProject | null;
}

/**
 * Ways in which lists of projects can be ordered upon return.
 */
export interface IXGitHubProjectOrder {
  /**
   * The direction in which to order projects by the specified field.
   */
  direction: XGitHubOrderDirection;

  /**
   * The field in which to order projects by.
   */
  field: XGitHubProjectOrderField;
}

/**
 * Properties by which project connections can be ordered.
 */
export const enum XGitHubProjectOrderField {
  /**
   * Order projects by creation time
   */
  CREATED_AT = 'CREATED_AT',

  /**
   * Order projects by name
   */
  NAME = 'NAME',

  /**
   * Order projects by update time
   */
  UPDATED_AT = 'UPDATED_AT'
}

/**
 * Represents an owner of a Project.
 */
export type _xGitHubProjectOwner =
  | IXGitHubOrganization
  | IXGitHubRepository
  | IXGitHubUser;

/**
 * Represents an owner of a Project.
 */
export interface IXGitHubProjectOwner {
  __typename: '_xGitHubProjectOwner';
  id: string;

  /**
   * Find project by number.
   */
  project: IXGitHubProject | null;

  /**
   * A list of projects under the owner.
   */
  projects: IXGitHubProjectConnection;

  /**
   * The HTTP path listing owners projects
   */
  projectsResourcePath: any;

  /**
   * The HTTP URL listing owners projects
   */
  projectsUrl: any;

  /**
   * Can the current viewer create new projects on this owner.
   */
  viewerCanCreateProjects: boolean;
}

export interface IProjectOnXGitHubProjectOwnerArguments {
  /**
   * The project number to find.
   */
  number: number;
}

export interface IProjectsOnXGitHubProjectOwnerArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Ordering options for projects returned from the connection
   */
  orderBy?: IXGitHubProjectOrder | null;

  /**
   * Query to search projects by, currently only searching by name.
   */
  search?: string | null;

  /**
   * A list of states to filter the projects by.
   */
  states?: Array<XGitHubProjectState> | null;
}

/**
 * Project progress stats.
 */
export interface IXGitHubProjectProgress {
  __typename: '_xGitHubProjectProgress';

  /**
   * The number of done cards.
   */
  doneCount: number;

  /**
   * The percentage of done cards.
   */
  donePercentage: number;

  /**
   * Whether progress tracking is enabled and cards with purpose exist for this project
   */
  enabled: boolean;

  /**
   * The number of in-progress cards.
   */
  inProgressCount: number;

  /**
   * The percentage of in-progress cards.
   */
  inProgressPercentage: number;

  /**
   * The number of to do cards.
   */
  todoCount: number;

  /**
   * The percentage of to do cards.
   */
  todoPercentage: number;
}

/**
 * State of the project; either 'open' or 'closed'
 */
export const enum XGitHubProjectState {
  /**
   * The project is closed.
   */
  CLOSED = 'CLOSED',

  /**
   * The project is open.
   */
  OPEN = 'OPEN'
}

/**
 * GitHub-provided templates for Projects
 */
export const enum XGitHubProjectTemplate {
  /**
   * Create a board with v2 triggers to automatically move cards across To do, In progress and Done columns.
   */
  AUTOMATED_KANBAN_V2 = 'AUTOMATED_KANBAN_V2',

  /**
   * Create a board with triggers to automatically move cards across columns with review automation.
   */
  AUTOMATED_REVIEWS_KANBAN = 'AUTOMATED_REVIEWS_KANBAN',

  /**
   * Create a board with columns for To do, In progress and Done.
   */
  BASIC_KANBAN = 'BASIC_KANBAN',

  /**
   * Create a board to triage and prioritize bugs with To do, priority, and Done columns.
   */
  BUG_TRIAGE = 'BUG_TRIAGE'
}

/**
 * A user's public key.
 */
export interface IXGitHubPublicKey {
  __typename: '_xGitHubPublicKey';

  /**
   * The last time this authorization was used to perform an action. Values will be null for keys not owned by the user.
   */
  accessedAt: any | null;

  /**
   * Identifies the date and time when the key was created. Keys created before
   * March 5th, 2014 have inaccurate values. Values will be null for keys not owned by the user.
   */
  createdAt: any | null;

  /**
   * The fingerprint for this PublicKey.
   */
  fingerprint: string;
  id: string;

  /**
   * Whether this PublicKey is read-only or not. Values will be null for keys not owned by the user.
   */
  isReadOnly: boolean | null;

  /**
   * The public key string.
   */
  key: string;

  /**
   * Identifies the date and time when the key was updated. Keys created before
   * March 5th, 2014 may have inaccurate values. Values will be null for keys not
   * owned by the user.
   */
  updatedAt: any | null;
}

/**
 * The connection type for PublicKey.
 */
export interface IXGitHubPublicKeyConnection {
  __typename: '_xGitHubPublicKeyConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubPublicKeyEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitHubPublicKey | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface IXGitHubPublicKeyEdge {
  __typename: '_xGitHubPublicKeyEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitHubPublicKey | null;
}

/**
 * A repository pull request.
 */
export interface IXGitHubPullRequest {
  __typename: '_xGitHubPullRequest';

  /**
   * Reason that the conversation was locked.
   */
  activeLockReason: XGitHubLockReason | null;

  /**
   * The number of additions in this pull request.
   */
  additions: number;

  /**
   * A list of Users assigned to this object.
   */
  assignees: IXGitHubUserConnection;

  /**
   * The actor who authored the comment.
   */
  author: _xGitHubActor | null;

  /**
   * Author's association with the subject of the comment.
   */
  authorAssociation: XGitHubCommentAuthorAssociation;

  /**
   * Returns the auto-merge request object if one exists for this pull request.
   */
  autoMergeRequest: IXGitHubAutoMergeRequest | null;

  /**
   * Identifies the base Ref associated with the pull request.
   */
  baseRef: IXGitHubRef | null;

  /**
   * Identifies the name of the base Ref associated with the pull request, even if the ref has been deleted.
   */
  baseRefName: string;

  /**
   * Identifies the oid of the base ref associated with the pull request, even if the ref has been deleted.
   */
  baseRefOid: any;

  /**
   * The repository associated with this pull request's base Ref.
   */
  baseRepository: IXGitHubRepository | null;

  /**
   * The body as Markdown.
   */
  body: string;

  /**
   * The body rendered to HTML.
   */
  bodyHTML: any;

  /**
   * The body rendered to text.
   */
  bodyText: string;

  /**
   * The number of changed files in this pull request.
   */
  changedFiles: number;

  /**
   * The HTTP path for the checks of this pull request.
   */
  checksResourcePath: any;

  /**
   * The HTTP URL for the checks of this pull request.
   */
  checksUrl: any;

  /**
   * `true` if the pull request is closed
   */
  closed: boolean;

  /**
   * Identifies the date and time when the object was closed.
   */
  closedAt: any | null;

  /**
   * List of issues that were may be closed by this pull request
   */
  closingIssuesReferences: IXGitHubIssueConnection | null;

  /**
   * A list of comments associated with the pull request.
   */
  comments: IXGitHubIssueCommentConnection;

  /**
   * A list of commits present in this pull request's head branch not present in the base branch.
   */
  commits: IXGitHubPullRequestCommitConnection;

  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: any;

  /**
   * Check if this comment was created via an email reply.
   */
  createdViaEmail: boolean;

  /**
   * Identifies the primary key from the database.
   */
  databaseId: number | null;

  /**
   * The number of deletions in this pull request.
   */
  deletions: number;

  /**
   * The actor who edited this pull request's body.
   */
  editor: _xGitHubActor | null;

  /**
   * Lists the files changed within this pull request.
   */
  files: IXGitHubPullRequestChangedFileConnection | null;

  /**
   * Identifies the head Ref associated with the pull request.
   */
  headRef: IXGitHubRef | null;

  /**
   * Identifies the name of the head Ref associated with the pull request, even if the ref has been deleted.
   */
  headRefName: string;

  /**
   * Identifies the oid of the head ref associated with the pull request, even if the ref has been deleted.
   */
  headRefOid: any;

  /**
   * The repository associated with this pull request's head Ref.
   */
  headRepository: IXGitHubRepository | null;

  /**
   * The owner of the repository associated with this pull request's head Ref.
   */
  headRepositoryOwner: _xGitHubRepositoryOwner | null;

  /**
   * The hovercard information for this issue
   */
  hovercard: IXGitHubHovercard;
  id: string;

  /**
   * Check if this comment was edited and includes an edit with the creation data
   */
  includesCreatedEdit: boolean;

  /**
   * The head and base repositories are different.
   */
  isCrossRepository: boolean;

  /**
   * Identifies if the pull request is a draft.
   */
  isDraft: boolean;

  /**
   * Is this pull request read by the viewer
   */
  isReadByViewer: boolean | null;

  /**
   * A list of labels associated with the object.
   */
  labels: IXGitHubLabelConnection | null;

  /**
   * The moment the editor made the last edit
   */
  lastEditedAt: any | null;

  /**
   * A list of latest reviews per user associated with the pull request.
   */
  latestOpinionatedReviews: IXGitHubPullRequestReviewConnection | null;

  /**
   * A list of latest reviews per user associated with the pull request that are not also pending review.
   */
  latestReviews: IXGitHubPullRequestReviewConnection | null;

  /**
   * `true` if the pull request is locked
   */
  locked: boolean;

  /**
   * Indicates whether maintainers can modify the pull request.
   */
  maintainerCanModify: boolean;

  /**
   * The commit that was created when this pull request was merged.
   */
  mergeCommit: IXGitHubCommit | null;

  /**
   * Whether or not the pull request can be merged based on the existence of merge conflicts.
   */
  mergeable: XGitHubMergeableState;

  /**
   * Whether or not the pull request was merged.
   */
  merged: boolean;

  /**
   * The date and time that the pull request was merged.
   */
  mergedAt: any | null;

  /**
   * The actor who merged the pull request.
   */
  mergedBy: _xGitHubActor | null;

  /**
   * Identifies the milestone associated with the pull request.
   */
  milestone: IXGitHubMilestone | null;

  /**
   * Identifies the pull request number.
   */
  number: number;

  /**
   * A list of Users that are participating in the Pull Request conversation.
   */
  participants: IXGitHubUserConnection;

  /**
   * The permalink to the pull request.
   */
  permalink: any;

  /**
   * The commit that GitHub automatically generated to test if this pull request
   * could be merged. This field will not return a value if the pull request is
   * merged, or if the test merge commit is still being generated. See the
   * `mergeable` field for more details on the mergeability of the pull request.
   */
  potentialMergeCommit: IXGitHubCommit | null;

  /**
   * List of project cards associated with this pull request.
   */
  projectCards: IXGitHubProjectCardConnection;

  /**
   * Identifies when the comment was published at.
   */
  publishedAt: any | null;

  /**
   * A list of reactions grouped by content left on the subject.
   */
  reactionGroups: Array<IXGitHubReactionGroup> | null;

  /**
   * A list of Reactions left on the Issue.
   */
  reactions: IXGitHubReactionConnection;

  /**
   * The repository associated with this node.
   */
  repository: IXGitHubRepository;

  /**
   * The HTTP path for this pull request.
   */
  resourcePath: any;

  /**
   * The HTTP path for reverting this pull request.
   */
  revertResourcePath: any;

  /**
   * The HTTP URL for reverting this pull request.
   */
  revertUrl: any;

  /**
   * The current status of this pull request with respect to code review.
   */
  reviewDecision: XGitHubPullRequestReviewDecision | null;

  /**
   * A list of review requests associated with the pull request.
   */
  reviewRequests: IXGitHubReviewRequestConnection | null;

  /**
   * The list of all review threads for this pull request.
   */
  reviewThreads: IXGitHubPullRequestReviewThreadConnection;

  /**
   * A list of reviews associated with the pull request.
   */
  reviews: IXGitHubPullRequestReviewConnection | null;

  /**
   * Identifies the state of the pull request.
   */
  state: XGitHubPullRequestState;

  /**
   * A list of reviewer suggestions based on commit history and past review comments.
   */
  suggestedReviewers: Array<IXGitHubSuggestedReviewer | null>;

  /**
   * A list of events, comments, commits, etc. associated with the pull request.
   * @deprecated "`timeline` will be removed Use PullRequest.timelineItems instead. Removal on 2020-10-01 UTC."
   */
  timeline: IXGitHubPullRequestTimelineConnection;

  /**
   * A list of events, comments, commits, etc. associated with the pull request.
   */
  timelineItems: IXGitHubPullRequestTimelineItemsConnection;

  /**
   * Identifies the pull request title.
   */
  title: string;

  /**
   * Identifies the pull request title rendered to HTML.
   */
  titleHTML: any;

  /**
   * Identifies the date and time when the object was last updated.
   */
  updatedAt: any;

  /**
   * The HTTP URL for this pull request.
   */
  url: any;

  /**
   * A list of edits to this content.
   */
  userContentEdits: IXGitHubUserContentEditConnection | null;

  /**
   * Whether or not the viewer can apply suggestion.
   */
  viewerCanApplySuggestion: boolean;

  /**
   * Check if the viewer can restore the deleted head ref.
   */
  viewerCanDeleteHeadRef: boolean;

  /**
   * Whether or not the viewer can disable auto-merge
   */
  viewerCanDisableAutoMerge: boolean;

  /**
   * Whether or not the viewer can enable auto-merge
   */
  viewerCanEnableAutoMerge: boolean;

  /**
   * Can user react to this subject
   */
  viewerCanReact: boolean;

  /**
   * Check if the viewer is able to change their subscription status for the repository.
   */
  viewerCanSubscribe: boolean;

  /**
   * Check if the current viewer can update this object.
   */
  viewerCanUpdate: boolean;

  /**
   * Reasons why the current viewer can not update this comment.
   */
  viewerCannotUpdateReasons: Array<XGitHubCommentCannotUpdateReason>;

  /**
   * Did the viewer author this comment.
   */
  viewerDidAuthor: boolean;

  /**
   * The latest review given from the viewer.
   */
  viewerLatestReview: IXGitHubPullRequestReview | null;

  /**
   * The person who has requested the viewer for review on this pull request.
   */
  viewerLatestReviewRequest: IXGitHubReviewRequest | null;

  /**
   * The merge body text for the viewer and method.
   */
  viewerMergeBodyText: string;

  /**
   * The merge headline text for the viewer and method.
   */
  viewerMergeHeadlineText: string;

  /**
   * Identifies if the viewer is watching, not watching, or ignoring the subscribable entity.
   */
  viewerSubscription: XGitHubSubscriptionState | null;
}

export interface IAssigneesOnXGitHubPullRequestArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IClosingIssuesReferencesOnXGitHubPullRequestArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Ordering options for issues returned from the connection
   */
  orderBy?: IXGitHubIssueOrder | null;
}

export interface ICommentsOnXGitHubPullRequestArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Ordering options for issue comments returned from the connection.
   */
  orderBy?: IXGitHubIssueCommentOrder | null;
}

export interface ICommitsOnXGitHubPullRequestArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IFilesOnXGitHubPullRequestArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IHovercardOnXGitHubPullRequestArguments {
  /**
   * Whether or not to include notification contexts
   * @default true
   */
  includeNotificationContexts?: boolean | null;
}

export interface ILabelsOnXGitHubPullRequestArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Ordering options for labels returned from the connection.
   * @default {"direction":"ASC","field":"CREATED_AT"}
   */
  orderBy?: IXGitHubLabelOrder | null;
}

export interface ILatestOpinionatedReviewsOnXGitHubPullRequestArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Only return reviews from user who have write access to the repository
   * @default false
   */
  writersOnly?: boolean | null;
}

export interface ILatestReviewsOnXGitHubPullRequestArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IParticipantsOnXGitHubPullRequestArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IProjectCardsOnXGitHubPullRequestArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * A list of archived states to filter the cards by
   * @default ["ARCHIVED","NOT_ARCHIVED"]
   */
  archivedStates?: Array<XGitHubProjectCardArchivedState | null> | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IReactionsOnXGitHubPullRequestArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Allows filtering Reactions by emoji.
   */
  content?: XGitHubReactionContent | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Allows specifying the order in which reactions are returned.
   */
  orderBy?: IXGitHubReactionOrder | null;
}

export interface IReviewRequestsOnXGitHubPullRequestArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IReviewThreadsOnXGitHubPullRequestArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IReviewsOnXGitHubPullRequestArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Filter by author of the review.
   */
  author?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * A list of states to filter the reviews.
   */
  states?: Array<XGitHubPullRequestReviewState> | null;
}

export interface ITimelineOnXGitHubPullRequestArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Allows filtering timeline events by a `since` timestamp.
   */
  since?: any | null;
}

export interface ITimelineItemsOnXGitHubPullRequestArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Filter timeline items by type.
   */
  itemTypes?: Array<XGitHubPullRequestTimelineItemsItemType> | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Filter timeline items by a `since` timestamp.
   */
  since?: any | null;

  /**
   * Skips the first _n_ elements in the list.
   */
  skip?: number | null;
}

export interface IUserContentEditsOnXGitHubPullRequestArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IViewerMergeBodyTextOnXGitHubPullRequestArguments {
  /**
   * The merge method for the message.
   */
  mergeType?: XGitHubPullRequestMergeMethod | null;
}

export interface IViewerMergeHeadlineTextOnXGitHubPullRequestArguments {
  /**
   * The merge method for the message.
   */
  mergeType?: XGitHubPullRequestMergeMethod | null;
}

/**
 * A file changed in a pull request.
 */
export interface IXGitHubPullRequestChangedFile {
  __typename: '_xGitHubPullRequestChangedFile';

  /**
   * The number of additions to the file.
   */
  additions: number;

  /**
   * The number of deletions to the file.
   */
  deletions: number;

  /**
   * The path of the file.
   */
  path: string;

  /**
   * The state of the file for the viewer.
   */
  viewerViewedState: XGitHubFileViewedState;
}

/**
 * The connection type for PullRequestChangedFile.
 */
export interface IXGitHubPullRequestChangedFileConnection {
  __typename: '_xGitHubPullRequestChangedFileConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubPullRequestChangedFileEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitHubPullRequestChangedFile | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface IXGitHubPullRequestChangedFileEdge {
  __typename: '_xGitHubPullRequestChangedFileEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitHubPullRequestChangedFile | null;
}

/**
 * Represents a Git commit part of a pull request.
 */
export interface IXGitHubPullRequestCommit {
  __typename: '_xGitHubPullRequestCommit';

  /**
   * The Git commit object
   */
  commit: IXGitHubCommit;
  id: string;

  /**
   * The pull request this commit belongs to
   */
  pullRequest: IXGitHubPullRequest;

  /**
   * The HTTP path for this pull request commit
   */
  resourcePath: any;

  /**
   * The HTTP URL for this pull request commit
   */
  url: any;
}

/**
 * Represents a commit comment thread part of a pull request.
 */
export interface IXGitHubPullRequestCommitCommentThread {
  __typename: '_xGitHubPullRequestCommitCommentThread';

  /**
   * The comments that exist in this thread.
   */
  comments: IXGitHubCommitCommentConnection;

  /**
   * The commit the comments were made on.
   */
  commit: IXGitHubCommit;
  id: string;

  /**
   * The file the comments were made on.
   */
  path: string | null;

  /**
   * The position in the diff for the commit that the comment was made on.
   */
  position: number | null;

  /**
   * The pull request this commit comment thread belongs to
   */
  pullRequest: IXGitHubPullRequest;

  /**
   * The repository associated with this node.
   */
  repository: IXGitHubRepository;
}

export interface ICommentsOnXGitHubPullRequestCommitCommentThreadArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

/**
 * The connection type for PullRequestCommit.
 */
export interface IXGitHubPullRequestCommitConnection {
  __typename: '_xGitHubPullRequestCommitConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubPullRequestCommitEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitHubPullRequestCommit | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface IXGitHubPullRequestCommitEdge {
  __typename: '_xGitHubPullRequestCommitEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitHubPullRequestCommit | null;
}

/**
 * The connection type for PullRequest.
 */
export interface IXGitHubPullRequestConnection {
  __typename: '_xGitHubPullRequestConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubPullRequestEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitHubPullRequest | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * This aggregates pull requests opened by a user within one repository.
 */
export interface IXGitHubPullRequestContributionsByRepository {
  __typename: '_xGitHubPullRequestContributionsByRepository';

  /**
   * The pull request contributions.
   */
  contributions: IXGitHubCreatedPullRequestContributionConnection;

  /**
   * The repository in which the pull requests were opened.
   */
  repository: IXGitHubRepository;
}

export interface IContributionsOnXGitHubPullRequestContributionsByRepositoryArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Ordering options for contributions returned from the connection.
   * @default {"direction":"DESC"}
   */
  orderBy?: IXGitHubContributionOrder | null;
}

/**
 * An edge in a connection.
 */
export interface IXGitHubPullRequestEdge {
  __typename: '_xGitHubPullRequestEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitHubPullRequest | null;
}

/**
 * Represents available types of methods to use when merging a pull request.
 */
export const enum XGitHubPullRequestMergeMethod {
  /**
   * Add all commits from the head branch to the base branch with a merge commit.
   */
  MERGE = 'MERGE',

  /**
   * Add all commits from the head branch onto the base branch individually.
   */
  REBASE = 'REBASE',

  /**
   * Combine all commits from the head branch into a single commit in the base branch.
   */
  SQUASH = 'SQUASH'
}

/**
 * Ways in which lists of issues can be ordered upon return.
 */
export interface IXGitHubPullRequestOrder {
  /**
   * The direction in which to order pull requests by the specified field.
   */
  direction: XGitHubOrderDirection;

  /**
   * The field in which to order pull requests by.
   */
  field: XGitHubPullRequestOrderField;
}

/**
 * Properties by which pull_requests connections can be ordered.
 */
export const enum XGitHubPullRequestOrderField {
  /**
   * Order pull_requests by creation time
   */
  CREATED_AT = 'CREATED_AT',

  /**
   * Order pull_requests by update time
   */
  UPDATED_AT = 'UPDATED_AT'
}

/**
 * A review object for a given pull request.
 */
export interface IXGitHubPullRequestReview {
  __typename: '_xGitHubPullRequestReview';

  /**
   * The actor who authored the comment.
   */
  author: _xGitHubActor | null;

  /**
   * Author's association with the subject of the comment.
   */
  authorAssociation: XGitHubCommentAuthorAssociation;

  /**
   * Indicates whether the author of this review has push access to the repository.
   */
  authorCanPushToRepository: boolean;

  /**
   * Identifies the pull request review body.
   */
  body: string;

  /**
   * The body rendered to HTML.
   */
  bodyHTML: any;

  /**
   * The body of this review rendered as plain text.
   */
  bodyText: string;

  /**
   * A list of review comments for the current pull request review.
   */
  comments: IXGitHubPullRequestReviewCommentConnection;

  /**
   * Identifies the commit associated with this pull request review.
   */
  commit: IXGitHubCommit | null;

  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: any;

  /**
   * Check if this comment was created via an email reply.
   */
  createdViaEmail: boolean;

  /**
   * Identifies the primary key from the database.
   */
  databaseId: number | null;

  /**
   * The actor who edited the comment.
   */
  editor: _xGitHubActor | null;
  id: string;

  /**
   * Check if this comment was edited and includes an edit with the creation data
   */
  includesCreatedEdit: boolean;

  /**
   * The moment the editor made the last edit
   */
  lastEditedAt: any | null;

  /**
   * A list of teams that this review was made on behalf of.
   */
  onBehalfOf: IXGitHubTeamConnection;

  /**
   * Identifies when the comment was published at.
   */
  publishedAt: any | null;

  /**
   * Identifies the pull request associated with this pull request review.
   */
  pullRequest: IXGitHubPullRequest;

  /**
   * A list of reactions grouped by content left on the subject.
   */
  reactionGroups: Array<IXGitHubReactionGroup> | null;

  /**
   * A list of Reactions left on the Issue.
   */
  reactions: IXGitHubReactionConnection;

  /**
   * The repository associated with this node.
   */
  repository: IXGitHubRepository;

  /**
   * The HTTP path permalink for this PullRequestReview.
   */
  resourcePath: any;

  /**
   * Identifies the current state of the pull request review.
   */
  state: XGitHubPullRequestReviewState;

  /**
   * Identifies when the Pull Request Review was submitted
   */
  submittedAt: any | null;

  /**
   * Identifies the date and time when the object was last updated.
   */
  updatedAt: any;

  /**
   * The HTTP URL permalink for this PullRequestReview.
   */
  url: any;

  /**
   * A list of edits to this content.
   */
  userContentEdits: IXGitHubUserContentEditConnection | null;

  /**
   * Check if the current viewer can delete this object.
   */
  viewerCanDelete: boolean;

  /**
   * Can user react to this subject
   */
  viewerCanReact: boolean;

  /**
   * Check if the current viewer can update this object.
   */
  viewerCanUpdate: boolean;

  /**
   * Reasons why the current viewer can not update this comment.
   */
  viewerCannotUpdateReasons: Array<XGitHubCommentCannotUpdateReason>;

  /**
   * Did the viewer author this comment.
   */
  viewerDidAuthor: boolean;
}

export interface ICommentsOnXGitHubPullRequestReviewArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IOnBehalfOfOnXGitHubPullRequestReviewArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IReactionsOnXGitHubPullRequestReviewArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Allows filtering Reactions by emoji.
   */
  content?: XGitHubReactionContent | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Allows specifying the order in which reactions are returned.
   */
  orderBy?: IXGitHubReactionOrder | null;
}

export interface IUserContentEditsOnXGitHubPullRequestReviewArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

/**
 * A review comment associated with a given repository pull request.
 */
export interface IXGitHubPullRequestReviewComment {
  __typename: '_xGitHubPullRequestReviewComment';

  /**
   * The actor who authored the comment.
   */
  author: _xGitHubActor | null;

  /**
   * Author's association with the subject of the comment.
   */
  authorAssociation: XGitHubCommentAuthorAssociation;

  /**
   * The comment body of this review comment.
   */
  body: string;

  /**
   * The body rendered to HTML.
   */
  bodyHTML: any;

  /**
   * The comment body of this review comment rendered as plain text.
   */
  bodyText: string;

  /**
   * Identifies the commit associated with the comment.
   */
  commit: IXGitHubCommit | null;

  /**
   * Identifies when the comment was created.
   */
  createdAt: any;

  /**
   * Check if this comment was created via an email reply.
   */
  createdViaEmail: boolean;

  /**
   * Identifies the primary key from the database.
   */
  databaseId: number | null;

  /**
   * The diff hunk to which the comment applies.
   */
  diffHunk: string;

  /**
   * Identifies when the comment was created in a draft state.
   */
  draftedAt: any;

  /**
   * The actor who edited the comment.
   */
  editor: _xGitHubActor | null;
  id: string;

  /**
   * Check if this comment was edited and includes an edit with the creation data
   */
  includesCreatedEdit: boolean;

  /**
   * Returns whether or not a comment has been minimized.
   */
  isMinimized: boolean;

  /**
   * The moment the editor made the last edit
   */
  lastEditedAt: any | null;

  /**
   * Returns why the comment was minimized.
   */
  minimizedReason: string | null;

  /**
   * Identifies the original commit associated with the comment.
   */
  originalCommit: IXGitHubCommit | null;

  /**
   * The original line index in the diff to which the comment applies.
   */
  originalPosition: number;

  /**
   * Identifies when the comment body is outdated
   */
  outdated: boolean;

  /**
   * The path to which the comment applies.
   */
  path: string;

  /**
   * The line index in the diff to which the comment applies.
   */
  position: number | null;

  /**
   * Identifies when the comment was published at.
   */
  publishedAt: any | null;

  /**
   * The pull request associated with this review comment.
   */
  pullRequest: IXGitHubPullRequest;

  /**
   * The pull request review associated with this review comment.
   */
  pullRequestReview: IXGitHubPullRequestReview | null;

  /**
   * A list of reactions grouped by content left on the subject.
   */
  reactionGroups: Array<IXGitHubReactionGroup> | null;

  /**
   * A list of Reactions left on the Issue.
   */
  reactions: IXGitHubReactionConnection;

  /**
   * The comment this is a reply to.
   */
  replyTo: IXGitHubPullRequestReviewComment | null;

  /**
   * The repository associated with this node.
   */
  repository: IXGitHubRepository;

  /**
   * The HTTP path permalink for this review comment.
   */
  resourcePath: any;

  /**
   * Identifies the state of the comment.
   */
  state: XGitHubPullRequestReviewCommentState;

  /**
   * Identifies when the comment was last updated.
   */
  updatedAt: any;

  /**
   * The HTTP URL permalink for this review comment.
   */
  url: any;

  /**
   * A list of edits to this content.
   */
  userContentEdits: IXGitHubUserContentEditConnection | null;

  /**
   * Check if the current viewer can delete this object.
   */
  viewerCanDelete: boolean;

  /**
   * Check if the current viewer can minimize this object.
   */
  viewerCanMinimize: boolean;

  /**
   * Can user react to this subject
   */
  viewerCanReact: boolean;

  /**
   * Check if the current viewer can update this object.
   */
  viewerCanUpdate: boolean;

  /**
   * Reasons why the current viewer can not update this comment.
   */
  viewerCannotUpdateReasons: Array<XGitHubCommentCannotUpdateReason>;

  /**
   * Did the viewer author this comment.
   */
  viewerDidAuthor: boolean;
}

export interface IReactionsOnXGitHubPullRequestReviewCommentArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Allows filtering Reactions by emoji.
   */
  content?: XGitHubReactionContent | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Allows specifying the order in which reactions are returned.
   */
  orderBy?: IXGitHubReactionOrder | null;
}

export interface IUserContentEditsOnXGitHubPullRequestReviewCommentArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

/**
 * The connection type for PullRequestReviewComment.
 */
export interface IXGitHubPullRequestReviewCommentConnection {
  __typename: '_xGitHubPullRequestReviewCommentConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubPullRequestReviewCommentEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitHubPullRequestReviewComment | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface IXGitHubPullRequestReviewCommentEdge {
  __typename: '_xGitHubPullRequestReviewCommentEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitHubPullRequestReviewComment | null;
}

/**
 * The possible states of a pull request review comment.
 */
export const enum XGitHubPullRequestReviewCommentState {
  /**
   * A comment that is part of a pending review
   */
  PENDING = 'PENDING',

  /**
   * A comment that is part of a submitted review
   */
  SUBMITTED = 'SUBMITTED'
}

/**
 * The connection type for PullRequestReview.
 */
export interface IXGitHubPullRequestReviewConnection {
  __typename: '_xGitHubPullRequestReviewConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubPullRequestReviewEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitHubPullRequestReview | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * This aggregates pull request reviews made by a user within one repository.
 */
export interface IXGitHubPullRequestReviewContributionsByRepository {
  __typename: '_xGitHubPullRequestReviewContributionsByRepository';

  /**
   * The pull request review contributions.
   */
  contributions: IXGitHubCreatedPullRequestReviewContributionConnection;

  /**
   * The repository in which the pull request reviews were made.
   */
  repository: IXGitHubRepository;
}

export interface IContributionsOnXGitHubPullRequestReviewContributionsByRepositoryArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Ordering options for contributions returned from the connection.
   * @default {"direction":"DESC"}
   */
  orderBy?: IXGitHubContributionOrder | null;
}

/**
 * The review status of a pull request.
 */
export const enum XGitHubPullRequestReviewDecision {
  /**
   * The pull request has received an approving review.
   */
  APPROVED = 'APPROVED',

  /**
   * Changes have been requested on the pull request.
   */
  CHANGES_REQUESTED = 'CHANGES_REQUESTED',

  /**
   * A review is required before the pull request can be merged.
   */
  REVIEW_REQUIRED = 'REVIEW_REQUIRED'
}

/**
 * An edge in a connection.
 */
export interface IXGitHubPullRequestReviewEdge {
  __typename: '_xGitHubPullRequestReviewEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitHubPullRequestReview | null;
}

/**
 * The possible events to perform on a pull request review.
 */
export const enum XGitHubPullRequestReviewEvent {
  /**
   * Submit feedback and approve merging these changes.
   */
  APPROVE = 'APPROVE',

  /**
   * Submit general feedback without explicit approval.
   */
  COMMENT = 'COMMENT',

  /**
   * Dismiss review so it now longer effects merging.
   */
  DISMISS = 'DISMISS',

  /**
   * Submit feedback that must be addressed before merging.
   */
  REQUEST_CHANGES = 'REQUEST_CHANGES'
}

/**
 * The possible states of a pull request review.
 */
export const enum XGitHubPullRequestReviewState {
  /**
   * A review allowing the pull request to merge.
   */
  APPROVED = 'APPROVED',

  /**
   * A review blocking the pull request from merging.
   */
  CHANGES_REQUESTED = 'CHANGES_REQUESTED',

  /**
   * An informational review.
   */
  COMMENTED = 'COMMENTED',

  /**
   * A review that has been dismissed.
   */
  DISMISSED = 'DISMISSED',

  /**
   * A review that has not yet been submitted.
   */
  PENDING = 'PENDING'
}

/**
 * A threaded list of comments for a given pull request.
 */
export interface IXGitHubPullRequestReviewThread {
  __typename: '_xGitHubPullRequestReviewThread';

  /**
   * A list of pull request comments associated with the thread.
   */
  comments: IXGitHubPullRequestReviewCommentConnection;

  /**
   * The side of the diff on which this thread was placed.
   */
  diffSide: XGitHubDiffSide;
  id: string;

  /**
   * Whether or not the thread has been collapsed (resolved)
   */
  isCollapsed: boolean;

  /**
   * Indicates whether this thread was outdated by newer changes.
   */
  isOutdated: boolean;

  /**
   * Whether this thread has been resolved
   */
  isResolved: boolean;

  /**
   * The line in the file to which this thread refers
   */
  line: number | null;

  /**
   * The original line in the file to which this thread refers.
   */
  originalLine: number | null;

  /**
   * The original start line in the file to which this thread refers (multi-line only).
   */
  originalStartLine: number | null;

  /**
   * Identifies the file path of this thread.
   */
  path: string;

  /**
   * Identifies the pull request associated with this thread.
   */
  pullRequest: IXGitHubPullRequest;

  /**
   * Identifies the repository associated with this thread.
   */
  repository: IXGitHubRepository;

  /**
   * The user who resolved this thread
   */
  resolvedBy: IXGitHubUser | null;

  /**
   * The side of the diff that the first line of the thread starts on (multi-line only)
   */
  startDiffSide: XGitHubDiffSide | null;

  /**
   * The start line in the file to which this thread refers (multi-line only)
   */
  startLine: number | null;

  /**
   * Indicates whether the current viewer can reply to this thread.
   */
  viewerCanReply: boolean;

  /**
   * Whether or not the viewer can resolve this thread
   */
  viewerCanResolve: boolean;

  /**
   * Whether or not the viewer can unresolve this thread
   */
  viewerCanUnresolve: boolean;
}

export interface ICommentsOnXGitHubPullRequestReviewThreadArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Skips the first _n_ elements in the list.
   */
  skip?: number | null;
}

/**
 * Review comment threads for a pull request review.
 */
export interface IXGitHubPullRequestReviewThreadConnection {
  __typename: '_xGitHubPullRequestReviewThreadConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubPullRequestReviewThreadEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitHubPullRequestReviewThread | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface IXGitHubPullRequestReviewThreadEdge {
  __typename: '_xGitHubPullRequestReviewThreadEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitHubPullRequestReviewThread | null;
}

/**
 * Represents the latest point in the pull request timeline for which the viewer has seen the pull request's commits.
 */
export interface IXGitHubPullRequestRevisionMarker {
  __typename: '_xGitHubPullRequestRevisionMarker';

  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: any;

  /**
   * The last commit the viewer has seen.
   */
  lastSeenCommit: IXGitHubCommit;

  /**
   * The pull request to which the marker belongs.
   */
  pullRequest: IXGitHubPullRequest;
}

/**
 * The possible states of a pull request.
 */
export const enum XGitHubPullRequestState {
  /**
   * A pull request that has been closed without being merged.
   */
  CLOSED = 'CLOSED',

  /**
   * A pull request that has been closed by being merged.
   */
  MERGED = 'MERGED',

  /**
   * A pull request that is still open.
   */
  OPEN = 'OPEN'
}

/**
 * A repository pull request template.
 */
export interface IXGitHubPullRequestTemplate {
  __typename: '_xGitHubPullRequestTemplate';

  /**
   * The body of the template
   */
  body: string | null;

  /**
   * The filename of the template
   */
  filename: string | null;

  /**
   * The repository the template belongs to
   */
  repository: IXGitHubRepository;
}

/**
 * The connection type for PullRequestTimelineItem.
 */
export interface IXGitHubPullRequestTimelineConnection {
  __typename: '_xGitHubPullRequestTimelineConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubPullRequestTimelineItemEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<_xGitHubPullRequestTimelineItem | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An item in a pull request timeline
 */
export type _xGitHubPullRequestTimelineItem =
  | IXGitHubAssignedEvent
  | IXGitHubBaseRefDeletedEvent
  | IXGitHubBaseRefForcePushedEvent
  | IXGitHubClosedEvent
  | IXGitHubCommit
  | IXGitHubCommitCommentThread
  | IXGitHubCrossReferencedEvent
  | IXGitHubDemilestonedEvent
  | IXGitHubDeployedEvent
  | IXGitHubDeploymentEnvironmentChangedEvent
  | IXGitHubHeadRefDeletedEvent
  | IXGitHubHeadRefForcePushedEvent
  | IXGitHubHeadRefRestoredEvent
  | IXGitHubIssueComment
  | IXGitHubLabeledEvent
  | IXGitHubLockedEvent
  | IXGitHubMergedEvent
  | IXGitHubMilestonedEvent
  | IXGitHubPullRequestReview
  | IXGitHubPullRequestReviewComment
  | IXGitHubPullRequestReviewThread
  | IXGitHubReferencedEvent
  | IXGitHubRenamedTitleEvent
  | IXGitHubReopenedEvent
  | IXGitHubReviewDismissedEvent
  | IXGitHubReviewRequestRemovedEvent
  | IXGitHubReviewRequestedEvent
  | IXGitHubSubscribedEvent
  | IXGitHubUnassignedEvent
  | IXGitHubUnlabeledEvent
  | IXGitHubUnlockedEvent
  | IXGitHubUnsubscribedEvent
  | IXGitHubUserBlockedEvent;

/**
 * An edge in a connection.
 */
export interface IXGitHubPullRequestTimelineItemEdge {
  __typename: '_xGitHubPullRequestTimelineItemEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: _xGitHubPullRequestTimelineItem | null;
}

/**
 * An item in a pull request timeline
 */
export type _xGitHubPullRequestTimelineItems =
  | IXGitHubAddedToProjectEvent
  | IXGitHubAssignedEvent
  | IXGitHubAutoMergeDisabledEvent
  | IXGitHubAutoMergeEnabledEvent
  | IXGitHubAutoRebaseEnabledEvent
  | IXGitHubAutoSquashEnabledEvent
  | IXGitHubAutomaticBaseChangeFailedEvent
  | IXGitHubAutomaticBaseChangeSucceededEvent
  | IXGitHubBaseRefChangedEvent
  | IXGitHubBaseRefDeletedEvent
  | IXGitHubBaseRefForcePushedEvent
  | IXGitHubClosedEvent
  | IXGitHubCommentDeletedEvent
  | IXGitHubConnectedEvent
  | IXGitHubConvertToDraftEvent
  | IXGitHubConvertedNoteToIssueEvent
  | IXGitHubCrossReferencedEvent
  | IXGitHubDemilestonedEvent
  | IXGitHubDeployedEvent
  | IXGitHubDeploymentEnvironmentChangedEvent
  | IXGitHubDisconnectedEvent
  | IXGitHubHeadRefDeletedEvent
  | IXGitHubHeadRefForcePushedEvent
  | IXGitHubHeadRefRestoredEvent
  | IXGitHubIssueComment
  | IXGitHubLabeledEvent
  | IXGitHubLockedEvent
  | IXGitHubMarkedAsDuplicateEvent
  | IXGitHubMentionedEvent
  | IXGitHubMergedEvent
  | IXGitHubMilestonedEvent
  | IXGitHubMovedColumnsInProjectEvent
  | IXGitHubPinnedEvent
  | IXGitHubPullRequestCommit
  | IXGitHubPullRequestCommitCommentThread
  | IXGitHubPullRequestReview
  | IXGitHubPullRequestReviewThread
  | IXGitHubPullRequestRevisionMarker
  | IXGitHubReadyForReviewEvent
  | IXGitHubReferencedEvent
  | IXGitHubRemovedFromProjectEvent
  | IXGitHubRenamedTitleEvent
  | IXGitHubReopenedEvent
  | IXGitHubReviewDismissedEvent
  | IXGitHubReviewRequestRemovedEvent
  | IXGitHubReviewRequestedEvent
  | IXGitHubSubscribedEvent
  | IXGitHubTransferredEvent
  | IXGitHubUnassignedEvent
  | IXGitHubUnlabeledEvent
  | IXGitHubUnlockedEvent
  | IXGitHubUnmarkedAsDuplicateEvent
  | IXGitHubUnpinnedEvent
  | IXGitHubUnsubscribedEvent
  | IXGitHubUserBlockedEvent;

/**
 * The connection type for PullRequestTimelineItems.
 */
export interface IXGitHubPullRequestTimelineItemsConnection {
  __typename: '_xGitHubPullRequestTimelineItemsConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubPullRequestTimelineItemsEdge | null> | null;

  /**
   * Identifies the count of items after applying `before` and `after` filters.
   */
  filteredCount: number;

  /**
   * A list of nodes.
   */
  nodes: Array<_xGitHubPullRequestTimelineItems | null> | null;

  /**
   * Identifies the count of items after applying `before`/`after` filters and `first`/`last`/`skip` slicing.
   */
  pageCount: number;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;

  /**
   * Identifies the date and time when the timeline was last updated.
   */
  updatedAt: any;
}

/**
 * An edge in a connection.
 */
export interface IXGitHubPullRequestTimelineItemsEdge {
  __typename: '_xGitHubPullRequestTimelineItemsEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: _xGitHubPullRequestTimelineItems | null;
}

/**
 * The possible item types found in a timeline.
 */
export const enum XGitHubPullRequestTimelineItemsItemType {
  /**
   * Represents a 'added_to_project' event on a given issue or pull request.
   */
  ADDED_TO_PROJECT_EVENT = 'ADDED_TO_PROJECT_EVENT',

  /**
   * Represents an 'assigned' event on any assignable object.
   */
  ASSIGNED_EVENT = 'ASSIGNED_EVENT',

  /**
   * Represents a 'automatic_base_change_failed' event on a given pull request.
   */
  AUTOMATIC_BASE_CHANGE_FAILED_EVENT = 'AUTOMATIC_BASE_CHANGE_FAILED_EVENT',

  /**
   * Represents a 'automatic_base_change_succeeded' event on a given pull request.
   */
  AUTOMATIC_BASE_CHANGE_SUCCEEDED_EVENT = 'AUTOMATIC_BASE_CHANGE_SUCCEEDED_EVENT',

  /**
   * Represents a 'auto_merge_disabled' event on a given pull request.
   */
  AUTO_MERGE_DISABLED_EVENT = 'AUTO_MERGE_DISABLED_EVENT',

  /**
   * Represents a 'auto_merge_enabled' event on a given pull request.
   */
  AUTO_MERGE_ENABLED_EVENT = 'AUTO_MERGE_ENABLED_EVENT',

  /**
   * Represents a 'auto_rebase_enabled' event on a given pull request.
   */
  AUTO_REBASE_ENABLED_EVENT = 'AUTO_REBASE_ENABLED_EVENT',

  /**
   * Represents a 'auto_squash_enabled' event on a given pull request.
   */
  AUTO_SQUASH_ENABLED_EVENT = 'AUTO_SQUASH_ENABLED_EVENT',

  /**
   * Represents a 'base_ref_changed' event on a given issue or pull request.
   */
  BASE_REF_CHANGED_EVENT = 'BASE_REF_CHANGED_EVENT',

  /**
   * Represents a 'base_ref_deleted' event on a given pull request.
   */
  BASE_REF_DELETED_EVENT = 'BASE_REF_DELETED_EVENT',

  /**
   * Represents a 'base_ref_force_pushed' event on a given pull request.
   */
  BASE_REF_FORCE_PUSHED_EVENT = 'BASE_REF_FORCE_PUSHED_EVENT',

  /**
   * Represents a 'closed' event on any `Closable`.
   */
  CLOSED_EVENT = 'CLOSED_EVENT',

  /**
   * Represents a 'comment_deleted' event on a given issue or pull request.
   */
  COMMENT_DELETED_EVENT = 'COMMENT_DELETED_EVENT',

  /**
   * Represents a 'connected' event on a given issue or pull request.
   */
  CONNECTED_EVENT = 'CONNECTED_EVENT',

  /**
   * Represents a 'converted_note_to_issue' event on a given issue or pull request.
   */
  CONVERTED_NOTE_TO_ISSUE_EVENT = 'CONVERTED_NOTE_TO_ISSUE_EVENT',

  /**
   * Represents a 'convert_to_draft' event on a given pull request.
   */
  CONVERT_TO_DRAFT_EVENT = 'CONVERT_TO_DRAFT_EVENT',

  /**
   * Represents a mention made by one issue or pull request to another.
   */
  CROSS_REFERENCED_EVENT = 'CROSS_REFERENCED_EVENT',

  /**
   * Represents a 'demilestoned' event on a given issue or pull request.
   */
  DEMILESTONED_EVENT = 'DEMILESTONED_EVENT',

  /**
   * Represents a 'deployed' event on a given pull request.
   */
  DEPLOYED_EVENT = 'DEPLOYED_EVENT',

  /**
   * Represents a 'deployment_environment_changed' event on a given pull request.
   */
  DEPLOYMENT_ENVIRONMENT_CHANGED_EVENT = 'DEPLOYMENT_ENVIRONMENT_CHANGED_EVENT',

  /**
   * Represents a 'disconnected' event on a given issue or pull request.
   */
  DISCONNECTED_EVENT = 'DISCONNECTED_EVENT',

  /**
   * Represents a 'head_ref_deleted' event on a given pull request.
   */
  HEAD_REF_DELETED_EVENT = 'HEAD_REF_DELETED_EVENT',

  /**
   * Represents a 'head_ref_force_pushed' event on a given pull request.
   */
  HEAD_REF_FORCE_PUSHED_EVENT = 'HEAD_REF_FORCE_PUSHED_EVENT',

  /**
   * Represents a 'head_ref_restored' event on a given pull request.
   */
  HEAD_REF_RESTORED_EVENT = 'HEAD_REF_RESTORED_EVENT',

  /**
   * Represents a comment on an Issue.
   */
  ISSUE_COMMENT = 'ISSUE_COMMENT',

  /**
   * Represents a 'labeled' event on a given issue or pull request.
   */
  LABELED_EVENT = 'LABELED_EVENT',

  /**
   * Represents a 'locked' event on a given issue or pull request.
   */
  LOCKED_EVENT = 'LOCKED_EVENT',

  /**
   * Represents a 'marked_as_duplicate' event on a given issue or pull request.
   */
  MARKED_AS_DUPLICATE_EVENT = 'MARKED_AS_DUPLICATE_EVENT',

  /**
   * Represents a 'mentioned' event on a given issue or pull request.
   */
  MENTIONED_EVENT = 'MENTIONED_EVENT',

  /**
   * Represents a 'merged' event on a given pull request.
   */
  MERGED_EVENT = 'MERGED_EVENT',

  /**
   * Represents a 'milestoned' event on a given issue or pull request.
   */
  MILESTONED_EVENT = 'MILESTONED_EVENT',

  /**
   * Represents a 'moved_columns_in_project' event on a given issue or pull request.
   */
  MOVED_COLUMNS_IN_PROJECT_EVENT = 'MOVED_COLUMNS_IN_PROJECT_EVENT',

  /**
   * Represents a 'pinned' event on a given issue or pull request.
   */
  PINNED_EVENT = 'PINNED_EVENT',

  /**
   * Represents a Git commit part of a pull request.
   */
  PULL_REQUEST_COMMIT = 'PULL_REQUEST_COMMIT',

  /**
   * Represents a commit comment thread part of a pull request.
   */
  PULL_REQUEST_COMMIT_COMMENT_THREAD = 'PULL_REQUEST_COMMIT_COMMENT_THREAD',

  /**
   * A review object for a given pull request.
   */
  PULL_REQUEST_REVIEW = 'PULL_REQUEST_REVIEW',

  /**
   * A threaded list of comments for a given pull request.
   */
  PULL_REQUEST_REVIEW_THREAD = 'PULL_REQUEST_REVIEW_THREAD',

  /**
   * Represents the latest point in the pull request timeline for which the viewer has seen the pull request's commits.
   */
  PULL_REQUEST_REVISION_MARKER = 'PULL_REQUEST_REVISION_MARKER',

  /**
   * Represents a 'ready_for_review' event on a given pull request.
   */
  READY_FOR_REVIEW_EVENT = 'READY_FOR_REVIEW_EVENT',

  /**
   * Represents a 'referenced' event on a given `ReferencedSubject`.
   */
  REFERENCED_EVENT = 'REFERENCED_EVENT',

  /**
   * Represents a 'removed_from_project' event on a given issue or pull request.
   */
  REMOVED_FROM_PROJECT_EVENT = 'REMOVED_FROM_PROJECT_EVENT',

  /**
   * Represents a 'renamed' event on a given issue or pull request
   */
  RENAMED_TITLE_EVENT = 'RENAMED_TITLE_EVENT',

  /**
   * Represents a 'reopened' event on any `Closable`.
   */
  REOPENED_EVENT = 'REOPENED_EVENT',

  /**
   * Represents a 'review_dismissed' event on a given issue or pull request.
   */
  REVIEW_DISMISSED_EVENT = 'REVIEW_DISMISSED_EVENT',

  /**
   * Represents an 'review_requested' event on a given pull request.
   */
  REVIEW_REQUESTED_EVENT = 'REVIEW_REQUESTED_EVENT',

  /**
   * Represents an 'review_request_removed' event on a given pull request.
   */
  REVIEW_REQUEST_REMOVED_EVENT = 'REVIEW_REQUEST_REMOVED_EVENT',

  /**
   * Represents a 'subscribed' event on a given `Subscribable`.
   */
  SUBSCRIBED_EVENT = 'SUBSCRIBED_EVENT',

  /**
   * Represents a 'transferred' event on a given issue or pull request.
   */
  TRANSFERRED_EVENT = 'TRANSFERRED_EVENT',

  /**
   * Represents an 'unassigned' event on any assignable object.
   */
  UNASSIGNED_EVENT = 'UNASSIGNED_EVENT',

  /**
   * Represents an 'unlabeled' event on a given issue or pull request.
   */
  UNLABELED_EVENT = 'UNLABELED_EVENT',

  /**
   * Represents an 'unlocked' event on a given issue or pull request.
   */
  UNLOCKED_EVENT = 'UNLOCKED_EVENT',

  /**
   * Represents an 'unmarked_as_duplicate' event on a given issue or pull request.
   */
  UNMARKED_AS_DUPLICATE_EVENT = 'UNMARKED_AS_DUPLICATE_EVENT',

  /**
   * Represents an 'unpinned' event on a given issue or pull request.
   */
  UNPINNED_EVENT = 'UNPINNED_EVENT',

  /**
   * Represents an 'unsubscribed' event on a given `Subscribable`.
   */
  UNSUBSCRIBED_EVENT = 'UNSUBSCRIBED_EVENT',

  /**
   * Represents a 'user_blocked' event on a given user.
   */
  USER_BLOCKED_EVENT = 'USER_BLOCKED_EVENT'
}

/**
 * The possible target states when updating a pull request.
 */
export const enum XGitHubPullRequestUpdateState {
  /**
   * A pull request that has been closed without being merged.
   */
  CLOSED = 'CLOSED',

  /**
   * A pull request that is still open.
   */
  OPEN = 'OPEN'
}

/**
 * A Git push.
 */
export interface IXGitHubPush {
  __typename: '_xGitHubPush';
  id: string;

  /**
   * The SHA after the push
   */
  nextSha: any | null;

  /**
   * The permalink for this push.
   */
  permalink: any;

  /**
   * The SHA before the push
   */
  previousSha: any | null;

  /**
   * The user who pushed
   */
  pusher: IXGitHubUser;

  /**
   * The repository that was pushed to
   */
  repository: IXGitHubRepository;
}

/**
 * A team, user or app who has the ability to push to a protected branch.
 */
export interface IXGitHubPushAllowance {
  __typename: '_xGitHubPushAllowance';

  /**
   * The actor that can push.
   */
  actor: _xGitHubPushAllowanceActor | null;

  /**
   * Identifies the branch protection rule associated with the allowed user or team.
   */
  branchProtectionRule: IXGitHubBranchProtectionRule | null;
  id: string;
}

/**
 * Types that can be an actor.
 */
export type _xGitHubPushAllowanceActor =
  | IXGitHubApp
  | IXGitHubTeam
  | IXGitHubUser;

/**
 * The connection type for PushAllowance.
 */
export interface IXGitHubPushAllowanceConnection {
  __typename: '_xGitHubPushAllowanceConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubPushAllowanceEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitHubPushAllowance | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface IXGitHubPushAllowanceEdge {
  __typename: '_xGitHubPushAllowanceEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitHubPushAllowance | null;
}

/**
 * The query root of GitHub's GraphQL interface.
 */
export interface IXGitHubQuery {
  __typename: '_xGitHubQuery';

  /**
   * Look up a code of conduct by its key
   */
  codeOfConduct: IXGitHubCodeOfConduct | null;

  /**
   * Look up a code of conduct by its key
   */
  codesOfConduct: Array<IXGitHubCodeOfConduct | null> | null;

  /**
   * Look up an enterprise by URL slug.
   */
  enterprise: IXGitHubEnterprise | null;

  /**
   * Look up a pending enterprise administrator invitation by invitee, enterprise and role.
   */
  enterpriseAdministratorInvitation: IXGitHubEnterpriseAdministratorInvitation | null;

  /**
   * Look up a pending enterprise administrator invitation by invitation token.
   */
  enterpriseAdministratorInvitationByToken: IXGitHubEnterpriseAdministratorInvitation | null;

  /**
   * Look up an open source license by its key
   */
  license: IXGitHubLicense | null;

  /**
   * Return a list of known open source licenses
   */
  licenses: Array<IXGitHubLicense | null>;

  /**
   * Get alphabetically sorted list of Marketplace categories
   */
  marketplaceCategories: Array<IXGitHubMarketplaceCategory>;

  /**
   * Look up a Marketplace category by its slug.
   */
  marketplaceCategory: IXGitHubMarketplaceCategory | null;

  /**
   * Look up a single Marketplace listing
   */
  marketplaceListing: IXGitHubMarketplaceListing | null;

  /**
   * Look up Marketplace listings
   */
  marketplaceListings: IXGitHubMarketplaceListingConnection;

  /**
   * Return information about the GitHub instance
   */
  meta: IXGitHubGitHubMetadata;

  /**
   * Fetches an object given its ID.
   */
  node: _xGitHubNode | null;

  /**
   * Lookup nodes by a list of IDs.
   */
  nodes: Array<_xGitHubNode | null>;

  /**
   * Lookup a organization by login.
   */
  organization: IXGitHubOrganization | null;

  /**
   * The client's rate limit information.
   */
  rateLimit: IXGitHubRateLimit | null;

  /**
   * Hack to workaround https://github.com/facebook/relay/issues/112 re-exposing the root query object
   */
  relay: IXGitHubQuery;

  /**
   * Lookup a given repository by the owner and repository name.
   */
  repository: IXGitHubRepository | null;

  /**
   * Lookup a repository owner (ie. either a User or an Organization) by login.
   */
  repositoryOwner: _xGitHubRepositoryOwner | null;

  /**
   * Lookup resource by a URL.
   */
  resource: _xGitHubUniformResourceLocatable | null;

  /**
   * Perform a search across resources.
   */
  search: IXGitHubSearchResultItemConnection;

  /**
   * GitHub Security Advisories
   */
  securityAdvisories: IXGitHubSecurityAdvisoryConnection;

  /**
   * Fetch a Security Advisory by its GHSA ID
   */
  securityAdvisory: IXGitHubSecurityAdvisory | null;

  /**
   * Software Vulnerabilities documented by GitHub Security Advisories
   */
  securityVulnerabilities: IXGitHubSecurityVulnerabilityConnection;

  /**
   * Users and organizations who can be sponsored via GitHub Sponsors.
   */
  sponsorables: IXGitHubSponsorableItemConnection;

  /**
   * Look up a single Sponsors Listing
   * @deprecated "`Query.sponsorsListing` will be removed. Use `Sponsorable.sponsorsListing` instead. Removal on 2020-04-01 UTC."
   */
  sponsorsListing: IXGitHubSponsorsListing | null;

  /**
   * Look up a topic by name.
   */
  topic: IXGitHubTopic | null;

  /**
   * Lookup a user by login.
   */
  user: IXGitHubUser | null;

  /**
   * The currently authenticated user.
   */
  viewer: IXGitHubUser;
}

export interface ICodeOfConductOnXGitHubQueryArguments {
  /**
   * The code of conduct's key
   */
  key: string;
}

export interface IEnterpriseOnXGitHubQueryArguments {
  /**
   * The enterprise invitation token.
   */
  invitationToken?: string | null;

  /**
   * The enterprise URL slug.
   */
  slug: string;
}

export interface IEnterpriseAdministratorInvitationOnXGitHubQueryArguments {
  /**
   * The slug of the enterprise the user was invited to join.
   */
  enterpriseSlug: string;

  /**
   * The role for the business member invitation.
   */
  role: XGitHubEnterpriseAdministratorRole;

  /**
   * The login of the user invited to join the business.
   */
  userLogin: string;
}

export interface IEnterpriseAdministratorInvitationByTokenOnXGitHubQueryArguments {
  /**
   * The invitation token sent with the invitation email.
   */
  invitationToken: string;
}

export interface ILicenseOnXGitHubQueryArguments {
  /**
   * The license's downcased SPDX ID
   */
  key: string;
}

export interface IMarketplaceCategoriesOnXGitHubQueryArguments {
  /**
   * Exclude categories with no listings.
   */
  excludeEmpty?: boolean | null;

  /**
   * Returns top level categories only, excluding any subcategories.
   */
  excludeSubcategories?: boolean | null;

  /**
   * Return only the specified categories.
   */
  includeCategories?: Array<string> | null;
}

export interface IMarketplaceCategoryOnXGitHubQueryArguments {
  /**
   * The URL slug of the category.
   */
  slug: string;

  /**
   * Also check topic aliases for the category slug
   */
  useTopicAliases?: boolean | null;
}

export interface IMarketplaceListingOnXGitHubQueryArguments {
  /**
   * Select the listing that matches this slug. It's the short name of the listing used in its URL.
   */
  slug: string;
}

export interface IMarketplaceListingsOnXGitHubQueryArguments {
  /**
   * Select listings that can be administered by the specified user.
   */
  adminId?: string | null;

  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Select listings visible to the viewer even if they are not approved. If omitted or
   * false, only approved listings will be returned.
   */
  allStates?: boolean | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Select only listings with the given category.
   */
  categorySlug?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Select listings for products owned by the specified organization.
   */
  organizationId?: string | null;

  /**
   * Select only listings where the primary category matches the given category slug.
   * @default false
   */
  primaryCategoryOnly?: boolean | null;

  /**
   * Select the listings with these slugs, if they are visible to the viewer.
   */
  slugs?: Array<string | null> | null;

  /**
   * Also check topic aliases for the category slug
   */
  useTopicAliases?: boolean | null;

  /**
   * Select listings to which user has admin access. If omitted, listings visible to the
   * viewer are returned.
   */
  viewerCanAdmin?: boolean | null;

  /**
   * Select only listings that offer a free trial.
   * @default false
   */
  withFreeTrialsOnly?: boolean | null;
}

export interface INodeOnXGitHubQueryArguments {
  /**
   * ID of the object.
   */
  id: string;
}

export interface INodesOnXGitHubQueryArguments {
  /**
   * The list of node IDs.
   */
  ids: Array<string>;
}

export interface IOrganizationOnXGitHubQueryArguments {
  /**
   * The organization's login.
   */
  login: string;
}

export interface IRateLimitOnXGitHubQueryArguments {
  /**
   * If true, calculate the cost for the query without evaluating it
   * @default false
   */
  dryRun?: boolean | null;
}

export interface IRepositoryOnXGitHubQueryArguments {
  /**
   * The name of the repository
   */
  name: string;

  /**
   * The login field of a user or organization
   */
  owner: string;
}

export interface IRepositoryOwnerOnXGitHubQueryArguments {
  /**
   * The username to lookup the owner by.
   */
  login: string;
}

export interface IResourceOnXGitHubQueryArguments {
  /**
   * The URL.
   */
  url: any;
}

export interface ISearchOnXGitHubQueryArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * The search string to look for.
   */
  query: string;

  /**
   * The types of search items to search within.
   */
  type: XGitHubSearchType;
}

export interface ISecurityAdvisoriesOnXGitHubQueryArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Filter advisories by identifier, e.g. GHSA or CVE.
   */
  identifier?: IXGitHubSecurityAdvisoryIdentifierFilter | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Ordering options for the returned topics.
   * @default {"direction":"DESC","field":"UPDATED_AT"}
   */
  orderBy?: IXGitHubSecurityAdvisoryOrder | null;

  /**
   * Filter advisories to those published since a time in the past.
   */
  publishedSince?: any | null;

  /**
   * Filter advisories to those updated since a time in the past.
   */
  updatedSince?: any | null;
}

export interface ISecurityAdvisoryOnXGitHubQueryArguments {
  /**
   * GitHub Security Advisory ID.
   */
  ghsaId: string;
}

export interface ISecurityVulnerabilitiesOnXGitHubQueryArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * An ecosystem to filter vulnerabilities by.
   */
  ecosystem?: XGitHubSecurityAdvisoryEcosystem | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Ordering options for the returned topics.
   * @default {"direction":"DESC","field":"UPDATED_AT"}
   */
  orderBy?: IXGitHubSecurityVulnerabilityOrder | null;

  /**
   * A package name to filter vulnerabilities by.
   */
  package?: string | null;

  /**
   * A list of severities to filter vulnerabilities by.
   */
  severities?: Array<XGitHubSecurityAdvisorySeverity> | null;
}

export interface ISponsorablesOnXGitHubQueryArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Optional filter for which dependencies should be checked for sponsorable
   * owners. Only sponsorable owners of dependencies in this ecosystem will be
   * included. Used when onlyDependencies = true.
   */
  dependencyEcosystem?: XGitHubSecurityAdvisoryEcosystem | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Whether only sponsorables who own the viewer's dependencies will be
   * returned. Must be authenticated to use. Can check an organization instead
   * for their dependencies owned by sponsorables by passing
   * orgLoginForDependencies.
   * @default false
   */
  onlyDependencies?: boolean | null;

  /**
   * Ordering options for users and organizations returned from the connection.
   * @default {"direction":"ASC","field":"LOGIN"}
   */
  orderBy?: IXGitHubSponsorableOrder | null;

  /**
   * Optional organization username for whose dependencies should be checked.
   * Used when onlyDependencies = true. Omit to check your own dependencies. If
   * you are not an administrator of the organization, only dependencies from its
   * public repositories will be considered.
   */
  orgLoginForDependencies?: string | null;
}

export interface ISponsorsListingOnXGitHubQueryArguments {
  /**
   * Select the Sponsors listing which matches this slug
   */
  slug: string;
}

export interface ITopicOnXGitHubQueryArguments {
  /**
   * The topic's name.
   */
  name: string;
}

export interface IUserOnXGitHubQueryArguments {
  /**
   * The user's login.
   */
  login: string;
}

/**
 * Represents the client's rate limit.
 */
export interface IXGitHubRateLimit {
  __typename: '_xGitHubRateLimit';

  /**
   * The point cost for the current query counting against the rate limit.
   */
  cost: number;

  /**
   * The maximum number of points the client is permitted to consume in a 60 minute window.
   */
  limit: number;

  /**
   * The maximum number of nodes this query may return
   */
  nodeCount: number;

  /**
   * The number of points remaining in the current rate limit window.
   */
  remaining: number;

  /**
   * The time at which the current rate limit window resets in UTC epoch seconds.
   */
  resetAt: any;

  /**
   * The number of points used in the current rate limit window.
   */
  used: number;
}

/**
 * Represents a subject that can be reacted on.
 */
export type _xGitHubReactable =
  | IXGitHubCommitComment
  | IXGitHubDiscussion
  | IXGitHubDiscussionComment
  | IXGitHubIssue
  | IXGitHubIssueComment
  | IXGitHubPullRequest
  | IXGitHubPullRequestReview
  | IXGitHubPullRequestReviewComment
  | IXGitHubRelease
  | IXGitHubTeamDiscussion
  | IXGitHubTeamDiscussionComment;

/**
 * Represents a subject that can be reacted on.
 */
export interface IXGitHubReactable {
  __typename: '_xGitHubReactable';

  /**
   * Identifies the primary key from the database.
   */
  databaseId: number | null;
  id: string;

  /**
   * A list of reactions grouped by content left on the subject.
   */
  reactionGroups: Array<IXGitHubReactionGroup> | null;

  /**
   * A list of Reactions left on the Issue.
   */
  reactions: IXGitHubReactionConnection;

  /**
   * Can user react to this subject
   */
  viewerCanReact: boolean;
}

export interface IReactionsOnXGitHubReactableArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Allows filtering Reactions by emoji.
   */
  content?: XGitHubReactionContent | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Allows specifying the order in which reactions are returned.
   */
  orderBy?: IXGitHubReactionOrder | null;
}

/**
 * The connection type for User.
 */
export interface IXGitHubReactingUserConnection {
  __typename: '_xGitHubReactingUserConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubReactingUserEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitHubUser | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * Represents a user that's made a reaction.
 */
export interface IXGitHubReactingUserEdge {
  __typename: '_xGitHubReactingUserEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  node: IXGitHubUser;

  /**
   * The moment when the user made the reaction.
   */
  reactedAt: any;
}

/**
 * An emoji reaction to a particular piece of content.
 */
export interface IXGitHubReaction {
  __typename: '_xGitHubReaction';

  /**
   * Identifies the emoji reaction.
   */
  content: XGitHubReactionContent;

  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: any;

  /**
   * Identifies the primary key from the database.
   */
  databaseId: number | null;
  id: string;

  /**
   * The reactable piece of content
   */
  reactable: _xGitHubReactable;

  /**
   * Identifies the user who created this reaction.
   */
  user: IXGitHubUser | null;
}

/**
 * A list of reactions that have been left on the subject.
 */
export interface IXGitHubReactionConnection {
  __typename: '_xGitHubReactionConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubReactionEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitHubReaction | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;

  /**
   * Whether or not the authenticated user has left a reaction on the subject.
   */
  viewerHasReacted: boolean;
}

/**
 * Emojis that can be attached to Issues, Pull Requests and Comments.
 */
export const enum XGitHubReactionContent {
  /**
   * Represents the `:confused:` emoji.
   */
  CONFUSED = 'CONFUSED',

  /**
   * Represents the `:eyes:` emoji.
   */
  EYES = 'EYES',

  /**
   * Represents the `:heart:` emoji.
   */
  HEART = 'HEART',

  /**
   * Represents the `:hooray:` emoji.
   */
  HOORAY = 'HOORAY',

  /**
   * Represents the `:laugh:` emoji.
   */
  LAUGH = 'LAUGH',

  /**
   * Represents the `:rocket:` emoji.
   */
  ROCKET = 'ROCKET',

  /**
   * Represents the `:-1:` emoji.
   */
  THUMBS_DOWN = 'THUMBS_DOWN',

  /**
   * Represents the `:+1:` emoji.
   */
  THUMBS_UP = 'THUMBS_UP'
}

/**
 * An edge in a connection.
 */
export interface IXGitHubReactionEdge {
  __typename: '_xGitHubReactionEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitHubReaction | null;
}

/**
 * A group of emoji reactions to a particular piece of content.
 */
export interface IXGitHubReactionGroup {
  __typename: '_xGitHubReactionGroup';

  /**
   * Identifies the emoji reaction.
   */
  content: XGitHubReactionContent;

  /**
   * Identifies when the reaction was created.
   */
  createdAt: any | null;

  /**
   * Reactors to the reaction subject with the emotion represented by this reaction group.
   */
  reactors: IXGitHubReactorConnection;

  /**
   * The subject that was reacted to.
   */
  subject: _xGitHubReactable;

  /**
   * Users who have reacted to the reaction subject with the emotion represented by this reaction group
   * @deprecated "Reactors can now be mannequins, bots, and organizations. Use the `reactors` field instead. Removal on 2021-10-01 UTC."
   */
  users: IXGitHubReactingUserConnection;

  /**
   * Whether or not the authenticated user has left a reaction on the subject.
   */
  viewerHasReacted: boolean;
}

export interface IReactorsOnXGitHubReactionGroupArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IUsersOnXGitHubReactionGroupArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

/**
 * Ways in which lists of reactions can be ordered upon return.
 */
export interface IXGitHubReactionOrder {
  /**
   * The direction in which to order reactions by the specified field.
   */
  direction: XGitHubOrderDirection;

  /**
   * The field in which to order reactions by.
   */
  field: XGitHubReactionOrderField;
}

/**
 * A list of fields that reactions can be ordered by.
 */
export const enum XGitHubReactionOrderField {
  /**
   * Allows ordering a list of reactions by when they were created.
   */
  CREATED_AT = 'CREATED_AT'
}

/**
 * Types that can be assigned to reactions.
 */
export type _xGitHubReactor =
  | IXGitHubBot
  | IXGitHubMannequin
  | IXGitHubOrganization
  | IXGitHubUser;

/**
 * The connection type for Reactor.
 */
export interface IXGitHubReactorConnection {
  __typename: '_xGitHubReactorConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubReactorEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<_xGitHubReactor | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * Represents an author of a reaction.
 */
export interface IXGitHubReactorEdge {
  __typename: '_xGitHubReactorEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The author of the reaction.
   */
  node: _xGitHubReactor;

  /**
   * The moment when the user made the reaction.
   */
  reactedAt: any;
}

/**
 * Represents a 'ready_for_review' event on a given pull request.
 */
export interface IXGitHubReadyForReviewEvent {
  __typename: '_xGitHubReadyForReviewEvent';

  /**
   * Identifies the actor who performed the event.
   */
  actor: _xGitHubActor | null;

  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: any;
  id: string;

  /**
   * PullRequest referenced by event.
   */
  pullRequest: IXGitHubPullRequest;

  /**
   * The HTTP path for this ready for review event.
   */
  resourcePath: any;

  /**
   * The HTTP URL for this ready for review event.
   */
  url: any;
}

/**
 * Represents a Git reference.
 */
export interface IXGitHubRef {
  __typename: '_xGitHubRef';

  /**
   * A list of pull requests with this ref as the head ref.
   */
  associatedPullRequests: IXGitHubPullRequestConnection;

  /**
   * Branch protection rules for this ref
   */
  branchProtectionRule: IXGitHubBranchProtectionRule | null;
  id: string;

  /**
   * The ref name.
   */
  name: string;

  /**
   * The ref's prefix, such as `refs/heads/` or `refs/tags/`.
   */
  prefix: string;

  /**
   * Branch protection rules that are viewable by non-admins
   */
  refUpdateRule: IXGitHubRefUpdateRule | null;

  /**
   * The repository the ref belongs to.
   */
  repository: IXGitHubRepository;

  /**
   * The object the ref points to. Returns null when object does not exist.
   */
  target: _xGitHubGitObject | null;
}

export interface IAssociatedPullRequestsOnXGitHubRefArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * The base ref name to filter the pull requests by.
   */
  baseRefName?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * The head ref name to filter the pull requests by.
   */
  headRefName?: string | null;

  /**
   * A list of label names to filter the pull requests by.
   */
  labels?: Array<string> | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Ordering options for pull requests returned from the connection.
   */
  orderBy?: IXGitHubIssueOrder | null;

  /**
   * A list of states to filter the pull requests by.
   */
  states?: Array<XGitHubPullRequestState> | null;
}

/**
 * The connection type for Ref.
 */
export interface IXGitHubRefConnection {
  __typename: '_xGitHubRefConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubRefEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitHubRef | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface IXGitHubRefEdge {
  __typename: '_xGitHubRefEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitHubRef | null;
}

/**
 * Ways in which lists of git refs can be ordered upon return.
 */
export interface IXGitHubRefOrder {
  /**
   * The direction in which to order refs by the specified field.
   */
  direction: XGitHubOrderDirection;

  /**
   * The field in which to order refs by.
   */
  field: XGitHubRefOrderField;
}

/**
 * Properties by which ref connections can be ordered.
 */
export const enum XGitHubRefOrderField {
  /**
   * Order refs by their alphanumeric name
   */
  ALPHABETICAL = 'ALPHABETICAL',

  /**
   * Order refs by underlying commit date if the ref prefix is refs/tags/
   */
  TAG_COMMIT_DATE = 'TAG_COMMIT_DATE'
}

/**
 * A ref update rules for a viewer.
 */
export interface IXGitHubRefUpdateRule {
  __typename: '_xGitHubRefUpdateRule';

  /**
   * Can this branch be deleted.
   */
  allowsDeletions: boolean;

  /**
   * Are force pushes allowed on this branch.
   */
  allowsForcePushes: boolean;

  /**
   * Identifies the protection rule pattern.
   */
  pattern: string;

  /**
   * Number of approving reviews required to update matching branches.
   */
  requiredApprovingReviewCount: number | null;

  /**
   * List of required status check contexts that must pass for commits to be accepted to matching branches.
   */
  requiredStatusCheckContexts: Array<string | null> | null;

  /**
   * Are reviews from code owners required to update matching branches.
   */
  requiresCodeOwnerReviews: boolean;

  /**
   * Are conversations required to be resolved before merging.
   */
  requiresConversationResolution: boolean;

  /**
   * Are merge commits prohibited from being pushed to this branch.
   */
  requiresLinearHistory: boolean;

  /**
   * Are commits required to be signed.
   */
  requiresSignatures: boolean;

  /**
   * Is the viewer allowed to dismiss reviews.
   */
  viewerAllowedToDismissReviews: boolean;

  /**
   * Can the viewer push to the branch
   */
  viewerCanPush: boolean;
}

/**
 * Represents a 'referenced' event on a given `ReferencedSubject`.
 */
export interface IXGitHubReferencedEvent {
  __typename: '_xGitHubReferencedEvent';

  /**
   * Identifies the actor who performed the event.
   */
  actor: _xGitHubActor | null;

  /**
   * Identifies the commit associated with the 'referenced' event.
   */
  commit: IXGitHubCommit | null;

  /**
   * Identifies the repository associated with the 'referenced' event.
   */
  commitRepository: IXGitHubRepository;

  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: any;
  id: string;

  /**
   * Reference originated in a different repository.
   */
  isCrossRepository: boolean;

  /**
   * Checks if the commit message itself references the subject. Can be false in the case of a commit comment reference.
   */
  isDirectReference: boolean;

  /**
   * Object referenced by event.
   */
  subject: _xGitHubReferencedSubject;
}

/**
 * Any referencable object
 */
export type _xGitHubReferencedSubject = IXGitHubIssue | IXGitHubPullRequest;

/**
 * Autogenerated input type of RegenerateEnterpriseIdentityProviderRecoveryCodes
 */
export interface IXGitHubRegenerateEnterpriseIdentityProviderRecoveryCodesInput {
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;

  /**
   * The ID of the enterprise on which to set an identity provider.
   */
  enterpriseId: string;
}

/**
 * Autogenerated return type of RegenerateEnterpriseIdentityProviderRecoveryCodes
 */
export interface IXGitHubRegenerateEnterpriseIdentityProviderRecoveryCodesPayload {
  __typename: '_xGitHubRegenerateEnterpriseIdentityProviderRecoveryCodesPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The identity provider for the enterprise.
   */
  identityProvider: IXGitHubEnterpriseIdentityProvider | null;
}

/**
 * Autogenerated input type of RegenerateVerifiableDomainToken
 */
export interface IXGitHubRegenerateVerifiableDomainTokenInput {
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;

  /**
   * The ID of the verifiable domain to regenerate the verification token of.
   */
  id: string;
}

/**
 * Autogenerated return type of RegenerateVerifiableDomainToken
 */
export interface IXGitHubRegenerateVerifiableDomainTokenPayload {
  __typename: '_xGitHubRegenerateVerifiableDomainTokenPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The verification token that was generated.
   */
  verificationToken: string | null;
}

/**
 * Autogenerated input type of RejectDeployments
 */
export interface IXGitHubRejectDeploymentsInput {
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;

  /**
   * Optional comment for rejecting deployments
   * @default ""
   */
  comment?: string | null;

  /**
   * The ids of environments to reject deployments
   */
  environmentIds: Array<string>;

  /**
   * The node ID of the workflow run containing the pending deployments.
   */
  workflowRunId: string;
}

/**
 * Autogenerated return type of RejectDeployments
 */
export interface IXGitHubRejectDeploymentsPayload {
  __typename: '_xGitHubRejectDeploymentsPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The affected deployments.
   */
  deployments: Array<IXGitHubDeployment> | null;
}

/**
 * A release contains the content for a release.
 */
export interface IXGitHubRelease {
  __typename: '_xGitHubRelease';

  /**
   * The author of the release
   */
  author: IXGitHubUser | null;

  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: any;

  /**
   * Identifies the primary key from the database.
   */
  databaseId: number | null;

  /**
   * The description of the release.
   */
  description: string | null;

  /**
   * The description of this release rendered to HTML.
   */
  descriptionHTML: any | null;
  id: string;

  /**
   * Whether or not the release is a draft
   */
  isDraft: boolean;

  /**
   * Whether or not the release is the latest releast
   */
  isLatest: boolean;

  /**
   * Whether or not the release is a prerelease
   */
  isPrerelease: boolean;

  /**
   * A list of users mentioned in the release description
   */
  mentions: IXGitHubUserConnection | null;

  /**
   * The title of the release.
   */
  name: string | null;

  /**
   * Identifies the date and time when the release was created.
   */
  publishedAt: any | null;

  /**
   * A list of reactions grouped by content left on the subject.
   */
  reactionGroups: Array<IXGitHubReactionGroup> | null;

  /**
   * A list of Reactions left on the Issue.
   */
  reactions: IXGitHubReactionConnection;

  /**
   * List of releases assets which are dependent on this release.
   */
  releaseAssets: IXGitHubReleaseAssetConnection;

  /**
   * The repository that the release belongs to.
   */
  repository: IXGitHubRepository;

  /**
   * The HTTP path for this issue
   */
  resourcePath: any;

  /**
   * A description of the release, rendered to HTML without any links in it.
   */
  shortDescriptionHTML: any | null;

  /**
   * The Git tag the release points to
   */
  tag: IXGitHubRef | null;

  /**
   * The tag commit for this release.
   */
  tagCommit: IXGitHubCommit | null;

  /**
   * The name of the release's Git tag
   */
  tagName: string;

  /**
   * Identifies the date and time when the object was last updated.
   */
  updatedAt: any;

  /**
   * The HTTP URL for this issue
   */
  url: any;

  /**
   * Can user react to this subject
   */
  viewerCanReact: boolean;
}

export interface IMentionsOnXGitHubReleaseArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IReactionsOnXGitHubReleaseArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Allows filtering Reactions by emoji.
   */
  content?: XGitHubReactionContent | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Allows specifying the order in which reactions are returned.
   */
  orderBy?: IXGitHubReactionOrder | null;
}

export interface IReleaseAssetsOnXGitHubReleaseArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * A list of names to filter the assets by.
   */
  name?: string | null;
}

export interface IShortDescriptionHTMLOnXGitHubReleaseArguments {
  /**
   * How many characters to return.
   * @default 200
   */
  limit?: number | null;
}

/**
 * A release asset contains the content for a release asset.
 */
export interface IXGitHubReleaseAsset {
  __typename: '_xGitHubReleaseAsset';

  /**
   * The asset's content-type
   */
  contentType: string;

  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: any;

  /**
   * The number of times this asset was downloaded
   */
  downloadCount: number;

  /**
   * Identifies the URL where you can download the release asset via the browser.
   */
  downloadUrl: any;
  id: string;

  /**
   * Identifies the title of the release asset.
   */
  name: string;

  /**
   * Release that the asset is associated with
   */
  release: IXGitHubRelease | null;

  /**
   * The size (in bytes) of the asset
   */
  size: number;

  /**
   * Identifies the date and time when the object was last updated.
   */
  updatedAt: any;

  /**
   * The user that performed the upload
   */
  uploadedBy: IXGitHubUser;

  /**
   * Identifies the URL of the release asset.
   */
  url: any;
}

/**
 * The connection type for ReleaseAsset.
 */
export interface IXGitHubReleaseAssetConnection {
  __typename: '_xGitHubReleaseAssetConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubReleaseAssetEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitHubReleaseAsset | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface IXGitHubReleaseAssetEdge {
  __typename: '_xGitHubReleaseAssetEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitHubReleaseAsset | null;
}

/**
 * The connection type for Release.
 */
export interface IXGitHubReleaseConnection {
  __typename: '_xGitHubReleaseConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubReleaseEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitHubRelease | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface IXGitHubReleaseEdge {
  __typename: '_xGitHubReleaseEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitHubRelease | null;
}

/**
 * Ways in which lists of releases can be ordered upon return.
 */
export interface IXGitHubReleaseOrder {
  /**
   * The direction in which to order releases by the specified field.
   */
  direction: XGitHubOrderDirection;

  /**
   * The field in which to order releases by.
   */
  field: XGitHubReleaseOrderField;
}

/**
 * Properties by which release connections can be ordered.
 */
export const enum XGitHubReleaseOrderField {
  /**
   * Order releases by creation time
   */
  CREATED_AT = 'CREATED_AT',

  /**
   * Order releases alphabetically by name
   */
  NAME = 'NAME'
}

/**
 * Autogenerated input type of RemoveAssigneesFromAssignable
 */
export interface IXGitHubRemoveAssigneesFromAssignableInput {
  /**
   * The id of the assignable object to remove assignees from.
   */
  assignableId: string;

  /**
   * The id of users to remove as assignees.
   */
  assigneeIds: Array<string>;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of RemoveAssigneesFromAssignable
 */
export interface IXGitHubRemoveAssigneesFromAssignablePayload {
  __typename: '_xGitHubRemoveAssigneesFromAssignablePayload';

  /**
   * The item that was unassigned.
   */
  assignable: _xGitHubAssignable | null;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;
}

/**
 * Autogenerated input type of RemoveEnterpriseAdmin
 */
export interface IXGitHubRemoveEnterpriseAdminInput {
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;

  /**
   * The Enterprise ID from which to remove the administrator.
   */
  enterpriseId: string;

  /**
   * The login of the user to remove as an administrator.
   */
  login: string;
}

/**
 * Autogenerated return type of RemoveEnterpriseAdmin
 */
export interface IXGitHubRemoveEnterpriseAdminPayload {
  __typename: '_xGitHubRemoveEnterpriseAdminPayload';

  /**
   * The user who was removed as an administrator.
   */
  admin: IXGitHubUser | null;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The updated enterprise.
   */
  enterprise: IXGitHubEnterprise | null;

  /**
   * A message confirming the result of removing an administrator.
   */
  message: string | null;

  /**
   * The viewer performing the mutation.
   */
  viewer: IXGitHubUser | null;
}

/**
 * Autogenerated input type of RemoveEnterpriseIdentityProvider
 */
export interface IXGitHubRemoveEnterpriseIdentityProviderInput {
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;

  /**
   * The ID of the enterprise from which to remove the identity provider.
   */
  enterpriseId: string;
}

/**
 * Autogenerated return type of RemoveEnterpriseIdentityProvider
 */
export interface IXGitHubRemoveEnterpriseIdentityProviderPayload {
  __typename: '_xGitHubRemoveEnterpriseIdentityProviderPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The identity provider that was removed from the enterprise.
   */
  identityProvider: IXGitHubEnterpriseIdentityProvider | null;
}

/**
 * Autogenerated input type of RemoveEnterpriseOrganization
 */
export interface IXGitHubRemoveEnterpriseOrganizationInput {
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;

  /**
   * The ID of the enterprise from which the organization should be removed.
   */
  enterpriseId: string;

  /**
   * The ID of the organization to remove from the enterprise.
   */
  organizationId: string;
}

/**
 * Autogenerated return type of RemoveEnterpriseOrganization
 */
export interface IXGitHubRemoveEnterpriseOrganizationPayload {
  __typename: '_xGitHubRemoveEnterpriseOrganizationPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The updated enterprise.
   */
  enterprise: IXGitHubEnterprise | null;

  /**
   * The organization that was removed from the enterprise.
   */
  organization: IXGitHubOrganization | null;

  /**
   * The viewer performing the mutation.
   */
  viewer: IXGitHubUser | null;
}

/**
 * Autogenerated input type of RemoveEnterpriseSupportEntitlement
 */
export interface IXGitHubRemoveEnterpriseSupportEntitlementInput {
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;

  /**
   * The ID of the Enterprise which the admin belongs to.
   */
  enterpriseId: string;

  /**
   * The login of a member who will lose the support entitlement.
   */
  login: string;
}

/**
 * Autogenerated return type of RemoveEnterpriseSupportEntitlement
 */
export interface IXGitHubRemoveEnterpriseSupportEntitlementPayload {
  __typename: '_xGitHubRemoveEnterpriseSupportEntitlementPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * A message confirming the result of removing the support entitlement.
   */
  message: string | null;
}

/**
 * Autogenerated input type of RemoveLabelsFromLabelable
 */
export interface IXGitHubRemoveLabelsFromLabelableInput {
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;

  /**
   * The ids of labels to remove.
   */
  labelIds: Array<string>;

  /**
   * The id of the Labelable to remove labels from.
   */
  labelableId: string;
}

/**
 * Autogenerated return type of RemoveLabelsFromLabelable
 */
export interface IXGitHubRemoveLabelsFromLabelablePayload {
  __typename: '_xGitHubRemoveLabelsFromLabelablePayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The Labelable the labels were removed from.
   */
  labelable: _xGitHubLabelable | null;
}

/**
 * Autogenerated input type of RemoveOutsideCollaborator
 */
export interface IXGitHubRemoveOutsideCollaboratorInput {
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;

  /**
   * The ID of the organization to remove the outside collaborator from.
   */
  organizationId: string;

  /**
   * The ID of the outside collaborator to remove.
   */
  userId: string;
}

/**
 * Autogenerated return type of RemoveOutsideCollaborator
 */
export interface IXGitHubRemoveOutsideCollaboratorPayload {
  __typename: '_xGitHubRemoveOutsideCollaboratorPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The user that was removed as an outside collaborator.
   */
  removedUser: IXGitHubUser | null;
}

/**
 * Autogenerated input type of RemoveReaction
 */
export interface IXGitHubRemoveReactionInput {
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;

  /**
   * The name of the emoji reaction to remove.
   */
  content: XGitHubReactionContent;

  /**
   * The Node ID of the subject to modify.
   */
  subjectId: string;
}

/**
 * Autogenerated return type of RemoveReaction
 */
export interface IXGitHubRemoveReactionPayload {
  __typename: '_xGitHubRemoveReactionPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The reaction object.
   */
  reaction: IXGitHubReaction | null;

  /**
   * The reactable subject.
   */
  subject: _xGitHubReactable | null;
}

/**
 * Autogenerated input type of RemoveStar
 */
export interface IXGitHubRemoveStarInput {
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;

  /**
   * The Starrable ID to unstar.
   */
  starrableId: string;
}

/**
 * Autogenerated return type of RemoveStar
 */
export interface IXGitHubRemoveStarPayload {
  __typename: '_xGitHubRemoveStarPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The starrable.
   */
  starrable: _xGitHubStarrable | null;
}

/**
 * Autogenerated input type of RemoveUpvote
 */
export interface IXGitHubRemoveUpvoteInput {
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;

  /**
   * The Node ID of the discussion or comment to remove upvote.
   */
  subjectId: string;
}

/**
 * Autogenerated return type of RemoveUpvote
 */
export interface IXGitHubRemoveUpvotePayload {
  __typename: '_xGitHubRemoveUpvotePayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The votable subject.
   */
  subject: _xGitHubVotable | null;
}

/**
 * Represents a 'removed_from_project' event on a given issue or pull request.
 */
export interface IXGitHubRemovedFromProjectEvent {
  __typename: '_xGitHubRemovedFromProjectEvent';

  /**
   * Identifies the actor who performed the event.
   */
  actor: _xGitHubActor | null;

  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: any;

  /**
   * Identifies the primary key from the database.
   */
  databaseId: number | null;
  id: string;
}

/**
 * Represents a 'renamed' event on a given issue or pull request
 */
export interface IXGitHubRenamedTitleEvent {
  __typename: '_xGitHubRenamedTitleEvent';

  /**
   * Identifies the actor who performed the event.
   */
  actor: _xGitHubActor | null;

  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: any;

  /**
   * Identifies the current title of the issue or pull request.
   */
  currentTitle: string;
  id: string;

  /**
   * Identifies the previous title of the issue or pull request.
   */
  previousTitle: string;

  /**
   * Subject that was renamed.
   */
  subject: _xGitHubRenamedTitleSubject;
}

/**
 * An object which has a renamable title
 */
export type _xGitHubRenamedTitleSubject = IXGitHubIssue | IXGitHubPullRequest;

/**
 * Autogenerated input type of ReopenIssue
 */
export interface IXGitHubReopenIssueInput {
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;

  /**
   * ID of the issue to be opened.
   */
  issueId: string;
}

/**
 * Autogenerated return type of ReopenIssue
 */
export interface IXGitHubReopenIssuePayload {
  __typename: '_xGitHubReopenIssuePayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The issue that was opened.
   */
  issue: IXGitHubIssue | null;
}

/**
 * Autogenerated input type of ReopenPullRequest
 */
export interface IXGitHubReopenPullRequestInput {
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;

  /**
   * ID of the pull request to be reopened.
   */
  pullRequestId: string;
}

/**
 * Autogenerated return type of ReopenPullRequest
 */
export interface IXGitHubReopenPullRequestPayload {
  __typename: '_xGitHubReopenPullRequestPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The pull request that was reopened.
   */
  pullRequest: IXGitHubPullRequest | null;
}

/**
 * Represents a 'reopened' event on any `Closable`.
 */
export interface IXGitHubReopenedEvent {
  __typename: '_xGitHubReopenedEvent';

  /**
   * Identifies the actor who performed the event.
   */
  actor: _xGitHubActor | null;

  /**
   * Object that was reopened.
   */
  closable: _xGitHubClosable;

  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: any;
  id: string;
}

/**
 * Audit log entry for a repo.access event.
 */
export interface IXGitHubRepoAccessAuditEntry {
  __typename: '_xGitHubRepoAccessAuditEntry';

  /**
   * The action name
   */
  action: string;

  /**
   * The user who initiated the action
   */
  actor: _xGitHubAuditEntryActor | null;

  /**
   * The IP address of the actor
   */
  actorIp: string | null;

  /**
   * A readable representation of the actor's location
   */
  actorLocation: IXGitHubActorLocation | null;

  /**
   * The username of the user who initiated the action
   */
  actorLogin: string | null;

  /**
   * The HTTP path for the actor.
   */
  actorResourcePath: any | null;

  /**
   * The HTTP URL for the actor.
   */
  actorUrl: any | null;

  /**
   * The time the action was initiated
   */
  createdAt: any;
  id: string;

  /**
   * The corresponding operation type for the action
   */
  operationType: XGitHubOperationType | null;

  /**
   * The Organization associated with the Audit Entry.
   */
  organization: IXGitHubOrganization | null;

  /**
   * The name of the Organization.
   */
  organizationName: string | null;

  /**
   * The HTTP path for the organization
   */
  organizationResourcePath: any | null;

  /**
   * The HTTP URL for the organization
   */
  organizationUrl: any | null;

  /**
   * The repository associated with the action
   */
  repository: IXGitHubRepository | null;

  /**
   * The name of the repository
   */
  repositoryName: string | null;

  /**
   * The HTTP path for the repository
   */
  repositoryResourcePath: any | null;

  /**
   * The HTTP URL for the repository
   */
  repositoryUrl: any | null;

  /**
   * The user affected by the action
   */
  user: IXGitHubUser | null;

  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin: string | null;

  /**
   * The HTTP path for the user.
   */
  userResourcePath: any | null;

  /**
   * The HTTP URL for the user.
   */
  userUrl: any | null;

  /**
   * The visibility of the repository
   */
  visibility: XGitHubRepoAccessAuditEntryVisibility | null;
}

/**
 * The privacy of a repository
 */
export const enum XGitHubRepoAccessAuditEntryVisibility {
  /**
   * The repository is visible only to users in the same business.
   */
  INTERNAL = 'INTERNAL',

  /**
   * The repository is visible only to those with explicit access.
   */
  PRIVATE = 'PRIVATE',

  /**
   * The repository is visible to everyone.
   */
  PUBLIC = 'PUBLIC'
}

/**
 * Audit log entry for a repo.add_member event.
 */
export interface IXGitHubRepoAddMemberAuditEntry {
  __typename: '_xGitHubRepoAddMemberAuditEntry';

  /**
   * The action name
   */
  action: string;

  /**
   * The user who initiated the action
   */
  actor: _xGitHubAuditEntryActor | null;

  /**
   * The IP address of the actor
   */
  actorIp: string | null;

  /**
   * A readable representation of the actor's location
   */
  actorLocation: IXGitHubActorLocation | null;

  /**
   * The username of the user who initiated the action
   */
  actorLogin: string | null;

  /**
   * The HTTP path for the actor.
   */
  actorResourcePath: any | null;

  /**
   * The HTTP URL for the actor.
   */
  actorUrl: any | null;

  /**
   * The time the action was initiated
   */
  createdAt: any;
  id: string;

  /**
   * The corresponding operation type for the action
   */
  operationType: XGitHubOperationType | null;

  /**
   * The Organization associated with the Audit Entry.
   */
  organization: IXGitHubOrganization | null;

  /**
   * The name of the Organization.
   */
  organizationName: string | null;

  /**
   * The HTTP path for the organization
   */
  organizationResourcePath: any | null;

  /**
   * The HTTP URL for the organization
   */
  organizationUrl: any | null;

  /**
   * The repository associated with the action
   */
  repository: IXGitHubRepository | null;

  /**
   * The name of the repository
   */
  repositoryName: string | null;

  /**
   * The HTTP path for the repository
   */
  repositoryResourcePath: any | null;

  /**
   * The HTTP URL for the repository
   */
  repositoryUrl: any | null;

  /**
   * The user affected by the action
   */
  user: IXGitHubUser | null;

  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin: string | null;

  /**
   * The HTTP path for the user.
   */
  userResourcePath: any | null;

  /**
   * The HTTP URL for the user.
   */
  userUrl: any | null;

  /**
   * The visibility of the repository
   */
  visibility: XGitHubRepoAddMemberAuditEntryVisibility | null;
}

/**
 * The privacy of a repository
 */
export const enum XGitHubRepoAddMemberAuditEntryVisibility {
  /**
   * The repository is visible only to users in the same business.
   */
  INTERNAL = 'INTERNAL',

  /**
   * The repository is visible only to those with explicit access.
   */
  PRIVATE = 'PRIVATE',

  /**
   * The repository is visible to everyone.
   */
  PUBLIC = 'PUBLIC'
}

/**
 * Audit log entry for a repo.add_topic event.
 */
export interface IXGitHubRepoAddTopicAuditEntry {
  __typename: '_xGitHubRepoAddTopicAuditEntry';

  /**
   * The action name
   */
  action: string;

  /**
   * The user who initiated the action
   */
  actor: _xGitHubAuditEntryActor | null;

  /**
   * The IP address of the actor
   */
  actorIp: string | null;

  /**
   * A readable representation of the actor's location
   */
  actorLocation: IXGitHubActorLocation | null;

  /**
   * The username of the user who initiated the action
   */
  actorLogin: string | null;

  /**
   * The HTTP path for the actor.
   */
  actorResourcePath: any | null;

  /**
   * The HTTP URL for the actor.
   */
  actorUrl: any | null;

  /**
   * The time the action was initiated
   */
  createdAt: any;
  id: string;

  /**
   * The corresponding operation type for the action
   */
  operationType: XGitHubOperationType | null;

  /**
   * The Organization associated with the Audit Entry.
   */
  organization: IXGitHubOrganization | null;

  /**
   * The name of the Organization.
   */
  organizationName: string | null;

  /**
   * The HTTP path for the organization
   */
  organizationResourcePath: any | null;

  /**
   * The HTTP URL for the organization
   */
  organizationUrl: any | null;

  /**
   * The repository associated with the action
   */
  repository: IXGitHubRepository | null;

  /**
   * The name of the repository
   */
  repositoryName: string | null;

  /**
   * The HTTP path for the repository
   */
  repositoryResourcePath: any | null;

  /**
   * The HTTP URL for the repository
   */
  repositoryUrl: any | null;

  /**
   * The name of the topic added to the repository
   */
  topic: IXGitHubTopic | null;

  /**
   * The name of the topic added to the repository
   */
  topicName: string | null;

  /**
   * The user affected by the action
   */
  user: IXGitHubUser | null;

  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin: string | null;

  /**
   * The HTTP path for the user.
   */
  userResourcePath: any | null;

  /**
   * The HTTP URL for the user.
   */
  userUrl: any | null;
}

/**
 * Audit log entry for a repo.archived event.
 */
export interface IXGitHubRepoArchivedAuditEntry {
  __typename: '_xGitHubRepoArchivedAuditEntry';

  /**
   * The action name
   */
  action: string;

  /**
   * The user who initiated the action
   */
  actor: _xGitHubAuditEntryActor | null;

  /**
   * The IP address of the actor
   */
  actorIp: string | null;

  /**
   * A readable representation of the actor's location
   */
  actorLocation: IXGitHubActorLocation | null;

  /**
   * The username of the user who initiated the action
   */
  actorLogin: string | null;

  /**
   * The HTTP path for the actor.
   */
  actorResourcePath: any | null;

  /**
   * The HTTP URL for the actor.
   */
  actorUrl: any | null;

  /**
   * The time the action was initiated
   */
  createdAt: any;
  id: string;

  /**
   * The corresponding operation type for the action
   */
  operationType: XGitHubOperationType | null;

  /**
   * The Organization associated with the Audit Entry.
   */
  organization: IXGitHubOrganization | null;

  /**
   * The name of the Organization.
   */
  organizationName: string | null;

  /**
   * The HTTP path for the organization
   */
  organizationResourcePath: any | null;

  /**
   * The HTTP URL for the organization
   */
  organizationUrl: any | null;

  /**
   * The repository associated with the action
   */
  repository: IXGitHubRepository | null;

  /**
   * The name of the repository
   */
  repositoryName: string | null;

  /**
   * The HTTP path for the repository
   */
  repositoryResourcePath: any | null;

  /**
   * The HTTP URL for the repository
   */
  repositoryUrl: any | null;

  /**
   * The user affected by the action
   */
  user: IXGitHubUser | null;

  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin: string | null;

  /**
   * The HTTP path for the user.
   */
  userResourcePath: any | null;

  /**
   * The HTTP URL for the user.
   */
  userUrl: any | null;

  /**
   * The visibility of the repository
   */
  visibility: XGitHubRepoArchivedAuditEntryVisibility | null;
}

/**
 * The privacy of a repository
 */
export const enum XGitHubRepoArchivedAuditEntryVisibility {
  /**
   * The repository is visible only to users in the same business.
   */
  INTERNAL = 'INTERNAL',

  /**
   * The repository is visible only to those with explicit access.
   */
  PRIVATE = 'PRIVATE',

  /**
   * The repository is visible to everyone.
   */
  PUBLIC = 'PUBLIC'
}

/**
 * Audit log entry for a repo.change_merge_setting event.
 */
export interface IXGitHubRepoChangeMergeSettingAuditEntry {
  __typename: '_xGitHubRepoChangeMergeSettingAuditEntry';

  /**
   * The action name
   */
  action: string;

  /**
   * The user who initiated the action
   */
  actor: _xGitHubAuditEntryActor | null;

  /**
   * The IP address of the actor
   */
  actorIp: string | null;

  /**
   * A readable representation of the actor's location
   */
  actorLocation: IXGitHubActorLocation | null;

  /**
   * The username of the user who initiated the action
   */
  actorLogin: string | null;

  /**
   * The HTTP path for the actor.
   */
  actorResourcePath: any | null;

  /**
   * The HTTP URL for the actor.
   */
  actorUrl: any | null;

  /**
   * The time the action was initiated
   */
  createdAt: any;
  id: string;

  /**
   * Whether the change was to enable (true) or disable (false) the merge type
   */
  isEnabled: boolean | null;

  /**
   * The merge method affected by the change
   */
  mergeType: XGitHubRepoChangeMergeSettingAuditEntryMergeType | null;

  /**
   * The corresponding operation type for the action
   */
  operationType: XGitHubOperationType | null;

  /**
   * The Organization associated with the Audit Entry.
   */
  organization: IXGitHubOrganization | null;

  /**
   * The name of the Organization.
   */
  organizationName: string | null;

  /**
   * The HTTP path for the organization
   */
  organizationResourcePath: any | null;

  /**
   * The HTTP URL for the organization
   */
  organizationUrl: any | null;

  /**
   * The repository associated with the action
   */
  repository: IXGitHubRepository | null;

  /**
   * The name of the repository
   */
  repositoryName: string | null;

  /**
   * The HTTP path for the repository
   */
  repositoryResourcePath: any | null;

  /**
   * The HTTP URL for the repository
   */
  repositoryUrl: any | null;

  /**
   * The user affected by the action
   */
  user: IXGitHubUser | null;

  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin: string | null;

  /**
   * The HTTP path for the user.
   */
  userResourcePath: any | null;

  /**
   * The HTTP URL for the user.
   */
  userUrl: any | null;
}

/**
 * The merge options available for pull requests to this repository.
 */
export const enum XGitHubRepoChangeMergeSettingAuditEntryMergeType {
  /**
   * The pull request is added to the base branch in a merge commit.
   */
  MERGE = 'MERGE',

  /**
   * Commits from the pull request are added onto the base branch individually without a merge commit.
   */
  REBASE = 'REBASE',

  /**
   * The pull request's commits are squashed into a single commit before they are merged to the base branch.
   */
  SQUASH = 'SQUASH'
}

/**
 * Audit log entry for a repo.config.disable_anonymous_git_access event.
 */
export interface IXGitHubRepoConfigDisableAnonymousGitAccessAuditEntry {
  __typename: '_xGitHubRepoConfigDisableAnonymousGitAccessAuditEntry';

  /**
   * The action name
   */
  action: string;

  /**
   * The user who initiated the action
   */
  actor: _xGitHubAuditEntryActor | null;

  /**
   * The IP address of the actor
   */
  actorIp: string | null;

  /**
   * A readable representation of the actor's location
   */
  actorLocation: IXGitHubActorLocation | null;

  /**
   * The username of the user who initiated the action
   */
  actorLogin: string | null;

  /**
   * The HTTP path for the actor.
   */
  actorResourcePath: any | null;

  /**
   * The HTTP URL for the actor.
   */
  actorUrl: any | null;

  /**
   * The time the action was initiated
   */
  createdAt: any;
  id: string;

  /**
   * The corresponding operation type for the action
   */
  operationType: XGitHubOperationType | null;

  /**
   * The Organization associated with the Audit Entry.
   */
  organization: IXGitHubOrganization | null;

  /**
   * The name of the Organization.
   */
  organizationName: string | null;

  /**
   * The HTTP path for the organization
   */
  organizationResourcePath: any | null;

  /**
   * The HTTP URL for the organization
   */
  organizationUrl: any | null;

  /**
   * The repository associated with the action
   */
  repository: IXGitHubRepository | null;

  /**
   * The name of the repository
   */
  repositoryName: string | null;

  /**
   * The HTTP path for the repository
   */
  repositoryResourcePath: any | null;

  /**
   * The HTTP URL for the repository
   */
  repositoryUrl: any | null;

  /**
   * The user affected by the action
   */
  user: IXGitHubUser | null;

  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin: string | null;

  /**
   * The HTTP path for the user.
   */
  userResourcePath: any | null;

  /**
   * The HTTP URL for the user.
   */
  userUrl: any | null;
}

/**
 * Audit log entry for a repo.config.disable_collaborators_only event.
 */
export interface IXGitHubRepoConfigDisableCollaboratorsOnlyAuditEntry {
  __typename: '_xGitHubRepoConfigDisableCollaboratorsOnlyAuditEntry';

  /**
   * The action name
   */
  action: string;

  /**
   * The user who initiated the action
   */
  actor: _xGitHubAuditEntryActor | null;

  /**
   * The IP address of the actor
   */
  actorIp: string | null;

  /**
   * A readable representation of the actor's location
   */
  actorLocation: IXGitHubActorLocation | null;

  /**
   * The username of the user who initiated the action
   */
  actorLogin: string | null;

  /**
   * The HTTP path for the actor.
   */
  actorResourcePath: any | null;

  /**
   * The HTTP URL for the actor.
   */
  actorUrl: any | null;

  /**
   * The time the action was initiated
   */
  createdAt: any;
  id: string;

  /**
   * The corresponding operation type for the action
   */
  operationType: XGitHubOperationType | null;

  /**
   * The Organization associated with the Audit Entry.
   */
  organization: IXGitHubOrganization | null;

  /**
   * The name of the Organization.
   */
  organizationName: string | null;

  /**
   * The HTTP path for the organization
   */
  organizationResourcePath: any | null;

  /**
   * The HTTP URL for the organization
   */
  organizationUrl: any | null;

  /**
   * The repository associated with the action
   */
  repository: IXGitHubRepository | null;

  /**
   * The name of the repository
   */
  repositoryName: string | null;

  /**
   * The HTTP path for the repository
   */
  repositoryResourcePath: any | null;

  /**
   * The HTTP URL for the repository
   */
  repositoryUrl: any | null;

  /**
   * The user affected by the action
   */
  user: IXGitHubUser | null;

  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin: string | null;

  /**
   * The HTTP path for the user.
   */
  userResourcePath: any | null;

  /**
   * The HTTP URL for the user.
   */
  userUrl: any | null;
}

/**
 * Audit log entry for a repo.config.disable_contributors_only event.
 */
export interface IXGitHubRepoConfigDisableContributorsOnlyAuditEntry {
  __typename: '_xGitHubRepoConfigDisableContributorsOnlyAuditEntry';

  /**
   * The action name
   */
  action: string;

  /**
   * The user who initiated the action
   */
  actor: _xGitHubAuditEntryActor | null;

  /**
   * The IP address of the actor
   */
  actorIp: string | null;

  /**
   * A readable representation of the actor's location
   */
  actorLocation: IXGitHubActorLocation | null;

  /**
   * The username of the user who initiated the action
   */
  actorLogin: string | null;

  /**
   * The HTTP path for the actor.
   */
  actorResourcePath: any | null;

  /**
   * The HTTP URL for the actor.
   */
  actorUrl: any | null;

  /**
   * The time the action was initiated
   */
  createdAt: any;
  id: string;

  /**
   * The corresponding operation type for the action
   */
  operationType: XGitHubOperationType | null;

  /**
   * The Organization associated with the Audit Entry.
   */
  organization: IXGitHubOrganization | null;

  /**
   * The name of the Organization.
   */
  organizationName: string | null;

  /**
   * The HTTP path for the organization
   */
  organizationResourcePath: any | null;

  /**
   * The HTTP URL for the organization
   */
  organizationUrl: any | null;

  /**
   * The repository associated with the action
   */
  repository: IXGitHubRepository | null;

  /**
   * The name of the repository
   */
  repositoryName: string | null;

  /**
   * The HTTP path for the repository
   */
  repositoryResourcePath: any | null;

  /**
   * The HTTP URL for the repository
   */
  repositoryUrl: any | null;

  /**
   * The user affected by the action
   */
  user: IXGitHubUser | null;

  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin: string | null;

  /**
   * The HTTP path for the user.
   */
  userResourcePath: any | null;

  /**
   * The HTTP URL for the user.
   */
  userUrl: any | null;
}

/**
 * Audit log entry for a repo.config.disable_sockpuppet_disallowed event.
 */
export interface IXGitHubRepoConfigDisableSockpuppetDisallowedAuditEntry {
  __typename: '_xGitHubRepoConfigDisableSockpuppetDisallowedAuditEntry';

  /**
   * The action name
   */
  action: string;

  /**
   * The user who initiated the action
   */
  actor: _xGitHubAuditEntryActor | null;

  /**
   * The IP address of the actor
   */
  actorIp: string | null;

  /**
   * A readable representation of the actor's location
   */
  actorLocation: IXGitHubActorLocation | null;

  /**
   * The username of the user who initiated the action
   */
  actorLogin: string | null;

  /**
   * The HTTP path for the actor.
   */
  actorResourcePath: any | null;

  /**
   * The HTTP URL for the actor.
   */
  actorUrl: any | null;

  /**
   * The time the action was initiated
   */
  createdAt: any;
  id: string;

  /**
   * The corresponding operation type for the action
   */
  operationType: XGitHubOperationType | null;

  /**
   * The Organization associated with the Audit Entry.
   */
  organization: IXGitHubOrganization | null;

  /**
   * The name of the Organization.
   */
  organizationName: string | null;

  /**
   * The HTTP path for the organization
   */
  organizationResourcePath: any | null;

  /**
   * The HTTP URL for the organization
   */
  organizationUrl: any | null;

  /**
   * The repository associated with the action
   */
  repository: IXGitHubRepository | null;

  /**
   * The name of the repository
   */
  repositoryName: string | null;

  /**
   * The HTTP path for the repository
   */
  repositoryResourcePath: any | null;

  /**
   * The HTTP URL for the repository
   */
  repositoryUrl: any | null;

  /**
   * The user affected by the action
   */
  user: IXGitHubUser | null;

  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin: string | null;

  /**
   * The HTTP path for the user.
   */
  userResourcePath: any | null;

  /**
   * The HTTP URL for the user.
   */
  userUrl: any | null;
}

/**
 * Audit log entry for a repo.config.enable_anonymous_git_access event.
 */
export interface IXGitHubRepoConfigEnableAnonymousGitAccessAuditEntry {
  __typename: '_xGitHubRepoConfigEnableAnonymousGitAccessAuditEntry';

  /**
   * The action name
   */
  action: string;

  /**
   * The user who initiated the action
   */
  actor: _xGitHubAuditEntryActor | null;

  /**
   * The IP address of the actor
   */
  actorIp: string | null;

  /**
   * A readable representation of the actor's location
   */
  actorLocation: IXGitHubActorLocation | null;

  /**
   * The username of the user who initiated the action
   */
  actorLogin: string | null;

  /**
   * The HTTP path for the actor.
   */
  actorResourcePath: any | null;

  /**
   * The HTTP URL for the actor.
   */
  actorUrl: any | null;

  /**
   * The time the action was initiated
   */
  createdAt: any;
  id: string;

  /**
   * The corresponding operation type for the action
   */
  operationType: XGitHubOperationType | null;

  /**
   * The Organization associated with the Audit Entry.
   */
  organization: IXGitHubOrganization | null;

  /**
   * The name of the Organization.
   */
  organizationName: string | null;

  /**
   * The HTTP path for the organization
   */
  organizationResourcePath: any | null;

  /**
   * The HTTP URL for the organization
   */
  organizationUrl: any | null;

  /**
   * The repository associated with the action
   */
  repository: IXGitHubRepository | null;

  /**
   * The name of the repository
   */
  repositoryName: string | null;

  /**
   * The HTTP path for the repository
   */
  repositoryResourcePath: any | null;

  /**
   * The HTTP URL for the repository
   */
  repositoryUrl: any | null;

  /**
   * The user affected by the action
   */
  user: IXGitHubUser | null;

  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin: string | null;

  /**
   * The HTTP path for the user.
   */
  userResourcePath: any | null;

  /**
   * The HTTP URL for the user.
   */
  userUrl: any | null;
}

/**
 * Audit log entry for a repo.config.enable_collaborators_only event.
 */
export interface IXGitHubRepoConfigEnableCollaboratorsOnlyAuditEntry {
  __typename: '_xGitHubRepoConfigEnableCollaboratorsOnlyAuditEntry';

  /**
   * The action name
   */
  action: string;

  /**
   * The user who initiated the action
   */
  actor: _xGitHubAuditEntryActor | null;

  /**
   * The IP address of the actor
   */
  actorIp: string | null;

  /**
   * A readable representation of the actor's location
   */
  actorLocation: IXGitHubActorLocation | null;

  /**
   * The username of the user who initiated the action
   */
  actorLogin: string | null;

  /**
   * The HTTP path for the actor.
   */
  actorResourcePath: any | null;

  /**
   * The HTTP URL for the actor.
   */
  actorUrl: any | null;

  /**
   * The time the action was initiated
   */
  createdAt: any;
  id: string;

  /**
   * The corresponding operation type for the action
   */
  operationType: XGitHubOperationType | null;

  /**
   * The Organization associated with the Audit Entry.
   */
  organization: IXGitHubOrganization | null;

  /**
   * The name of the Organization.
   */
  organizationName: string | null;

  /**
   * The HTTP path for the organization
   */
  organizationResourcePath: any | null;

  /**
   * The HTTP URL for the organization
   */
  organizationUrl: any | null;

  /**
   * The repository associated with the action
   */
  repository: IXGitHubRepository | null;

  /**
   * The name of the repository
   */
  repositoryName: string | null;

  /**
   * The HTTP path for the repository
   */
  repositoryResourcePath: any | null;

  /**
   * The HTTP URL for the repository
   */
  repositoryUrl: any | null;

  /**
   * The user affected by the action
   */
  user: IXGitHubUser | null;

  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin: string | null;

  /**
   * The HTTP path for the user.
   */
  userResourcePath: any | null;

  /**
   * The HTTP URL for the user.
   */
  userUrl: any | null;
}

/**
 * Audit log entry for a repo.config.enable_contributors_only event.
 */
export interface IXGitHubRepoConfigEnableContributorsOnlyAuditEntry {
  __typename: '_xGitHubRepoConfigEnableContributorsOnlyAuditEntry';

  /**
   * The action name
   */
  action: string;

  /**
   * The user who initiated the action
   */
  actor: _xGitHubAuditEntryActor | null;

  /**
   * The IP address of the actor
   */
  actorIp: string | null;

  /**
   * A readable representation of the actor's location
   */
  actorLocation: IXGitHubActorLocation | null;

  /**
   * The username of the user who initiated the action
   */
  actorLogin: string | null;

  /**
   * The HTTP path for the actor.
   */
  actorResourcePath: any | null;

  /**
   * The HTTP URL for the actor.
   */
  actorUrl: any | null;

  /**
   * The time the action was initiated
   */
  createdAt: any;
  id: string;

  /**
   * The corresponding operation type for the action
   */
  operationType: XGitHubOperationType | null;

  /**
   * The Organization associated with the Audit Entry.
   */
  organization: IXGitHubOrganization | null;

  /**
   * The name of the Organization.
   */
  organizationName: string | null;

  /**
   * The HTTP path for the organization
   */
  organizationResourcePath: any | null;

  /**
   * The HTTP URL for the organization
   */
  organizationUrl: any | null;

  /**
   * The repository associated with the action
   */
  repository: IXGitHubRepository | null;

  /**
   * The name of the repository
   */
  repositoryName: string | null;

  /**
   * The HTTP path for the repository
   */
  repositoryResourcePath: any | null;

  /**
   * The HTTP URL for the repository
   */
  repositoryUrl: any | null;

  /**
   * The user affected by the action
   */
  user: IXGitHubUser | null;

  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin: string | null;

  /**
   * The HTTP path for the user.
   */
  userResourcePath: any | null;

  /**
   * The HTTP URL for the user.
   */
  userUrl: any | null;
}

/**
 * Audit log entry for a repo.config.enable_sockpuppet_disallowed event.
 */
export interface IXGitHubRepoConfigEnableSockpuppetDisallowedAuditEntry {
  __typename: '_xGitHubRepoConfigEnableSockpuppetDisallowedAuditEntry';

  /**
   * The action name
   */
  action: string;

  /**
   * The user who initiated the action
   */
  actor: _xGitHubAuditEntryActor | null;

  /**
   * The IP address of the actor
   */
  actorIp: string | null;

  /**
   * A readable representation of the actor's location
   */
  actorLocation: IXGitHubActorLocation | null;

  /**
   * The username of the user who initiated the action
   */
  actorLogin: string | null;

  /**
   * The HTTP path for the actor.
   */
  actorResourcePath: any | null;

  /**
   * The HTTP URL for the actor.
   */
  actorUrl: any | null;

  /**
   * The time the action was initiated
   */
  createdAt: any;
  id: string;

  /**
   * The corresponding operation type for the action
   */
  operationType: XGitHubOperationType | null;

  /**
   * The Organization associated with the Audit Entry.
   */
  organization: IXGitHubOrganization | null;

  /**
   * The name of the Organization.
   */
  organizationName: string | null;

  /**
   * The HTTP path for the organization
   */
  organizationResourcePath: any | null;

  /**
   * The HTTP URL for the organization
   */
  organizationUrl: any | null;

  /**
   * The repository associated with the action
   */
  repository: IXGitHubRepository | null;

  /**
   * The name of the repository
   */
  repositoryName: string | null;

  /**
   * The HTTP path for the repository
   */
  repositoryResourcePath: any | null;

  /**
   * The HTTP URL for the repository
   */
  repositoryUrl: any | null;

  /**
   * The user affected by the action
   */
  user: IXGitHubUser | null;

  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin: string | null;

  /**
   * The HTTP path for the user.
   */
  userResourcePath: any | null;

  /**
   * The HTTP URL for the user.
   */
  userUrl: any | null;
}

/**
 * Audit log entry for a repo.config.lock_anonymous_git_access event.
 */
export interface IXGitHubRepoConfigLockAnonymousGitAccessAuditEntry {
  __typename: '_xGitHubRepoConfigLockAnonymousGitAccessAuditEntry';

  /**
   * The action name
   */
  action: string;

  /**
   * The user who initiated the action
   */
  actor: _xGitHubAuditEntryActor | null;

  /**
   * The IP address of the actor
   */
  actorIp: string | null;

  /**
   * A readable representation of the actor's location
   */
  actorLocation: IXGitHubActorLocation | null;

  /**
   * The username of the user who initiated the action
   */
  actorLogin: string | null;

  /**
   * The HTTP path for the actor.
   */
  actorResourcePath: any | null;

  /**
   * The HTTP URL for the actor.
   */
  actorUrl: any | null;

  /**
   * The time the action was initiated
   */
  createdAt: any;
  id: string;

  /**
   * The corresponding operation type for the action
   */
  operationType: XGitHubOperationType | null;

  /**
   * The Organization associated with the Audit Entry.
   */
  organization: IXGitHubOrganization | null;

  /**
   * The name of the Organization.
   */
  organizationName: string | null;

  /**
   * The HTTP path for the organization
   */
  organizationResourcePath: any | null;

  /**
   * The HTTP URL for the organization
   */
  organizationUrl: any | null;

  /**
   * The repository associated with the action
   */
  repository: IXGitHubRepository | null;

  /**
   * The name of the repository
   */
  repositoryName: string | null;

  /**
   * The HTTP path for the repository
   */
  repositoryResourcePath: any | null;

  /**
   * The HTTP URL for the repository
   */
  repositoryUrl: any | null;

  /**
   * The user affected by the action
   */
  user: IXGitHubUser | null;

  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin: string | null;

  /**
   * The HTTP path for the user.
   */
  userResourcePath: any | null;

  /**
   * The HTTP URL for the user.
   */
  userUrl: any | null;
}

/**
 * Audit log entry for a repo.config.unlock_anonymous_git_access event.
 */
export interface IXGitHubRepoConfigUnlockAnonymousGitAccessAuditEntry {
  __typename: '_xGitHubRepoConfigUnlockAnonymousGitAccessAuditEntry';

  /**
   * The action name
   */
  action: string;

  /**
   * The user who initiated the action
   */
  actor: _xGitHubAuditEntryActor | null;

  /**
   * The IP address of the actor
   */
  actorIp: string | null;

  /**
   * A readable representation of the actor's location
   */
  actorLocation: IXGitHubActorLocation | null;

  /**
   * The username of the user who initiated the action
   */
  actorLogin: string | null;

  /**
   * The HTTP path for the actor.
   */
  actorResourcePath: any | null;

  /**
   * The HTTP URL for the actor.
   */
  actorUrl: any | null;

  /**
   * The time the action was initiated
   */
  createdAt: any;
  id: string;

  /**
   * The corresponding operation type for the action
   */
  operationType: XGitHubOperationType | null;

  /**
   * The Organization associated with the Audit Entry.
   */
  organization: IXGitHubOrganization | null;

  /**
   * The name of the Organization.
   */
  organizationName: string | null;

  /**
   * The HTTP path for the organization
   */
  organizationResourcePath: any | null;

  /**
   * The HTTP URL for the organization
   */
  organizationUrl: any | null;

  /**
   * The repository associated with the action
   */
  repository: IXGitHubRepository | null;

  /**
   * The name of the repository
   */
  repositoryName: string | null;

  /**
   * The HTTP path for the repository
   */
  repositoryResourcePath: any | null;

  /**
   * The HTTP URL for the repository
   */
  repositoryUrl: any | null;

  /**
   * The user affected by the action
   */
  user: IXGitHubUser | null;

  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin: string | null;

  /**
   * The HTTP path for the user.
   */
  userResourcePath: any | null;

  /**
   * The HTTP URL for the user.
   */
  userUrl: any | null;
}

/**
 * Audit log entry for a repo.create event.
 */
export interface IXGitHubRepoCreateAuditEntry {
  __typename: '_xGitHubRepoCreateAuditEntry';

  /**
   * The action name
   */
  action: string;

  /**
   * The user who initiated the action
   */
  actor: _xGitHubAuditEntryActor | null;

  /**
   * The IP address of the actor
   */
  actorIp: string | null;

  /**
   * A readable representation of the actor's location
   */
  actorLocation: IXGitHubActorLocation | null;

  /**
   * The username of the user who initiated the action
   */
  actorLogin: string | null;

  /**
   * The HTTP path for the actor.
   */
  actorResourcePath: any | null;

  /**
   * The HTTP URL for the actor.
   */
  actorUrl: any | null;

  /**
   * The time the action was initiated
   */
  createdAt: any;

  /**
   * The name of the parent repository for this forked repository.
   */
  forkParentName: string | null;

  /**
   * The name of the root repository for this network.
   */
  forkSourceName: string | null;
  id: string;

  /**
   * The corresponding operation type for the action
   */
  operationType: XGitHubOperationType | null;

  /**
   * The Organization associated with the Audit Entry.
   */
  organization: IXGitHubOrganization | null;

  /**
   * The name of the Organization.
   */
  organizationName: string | null;

  /**
   * The HTTP path for the organization
   */
  organizationResourcePath: any | null;

  /**
   * The HTTP URL for the organization
   */
  organizationUrl: any | null;

  /**
   * The repository associated with the action
   */
  repository: IXGitHubRepository | null;

  /**
   * The name of the repository
   */
  repositoryName: string | null;

  /**
   * The HTTP path for the repository
   */
  repositoryResourcePath: any | null;

  /**
   * The HTTP URL for the repository
   */
  repositoryUrl: any | null;

  /**
   * The user affected by the action
   */
  user: IXGitHubUser | null;

  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin: string | null;

  /**
   * The HTTP path for the user.
   */
  userResourcePath: any | null;

  /**
   * The HTTP URL for the user.
   */
  userUrl: any | null;

  /**
   * The visibility of the repository
   */
  visibility: XGitHubRepoCreateAuditEntryVisibility | null;
}

/**
 * The privacy of a repository
 */
export const enum XGitHubRepoCreateAuditEntryVisibility {
  /**
   * The repository is visible only to users in the same business.
   */
  INTERNAL = 'INTERNAL',

  /**
   * The repository is visible only to those with explicit access.
   */
  PRIVATE = 'PRIVATE',

  /**
   * The repository is visible to everyone.
   */
  PUBLIC = 'PUBLIC'
}

/**
 * Audit log entry for a repo.destroy event.
 */
export interface IXGitHubRepoDestroyAuditEntry {
  __typename: '_xGitHubRepoDestroyAuditEntry';

  /**
   * The action name
   */
  action: string;

  /**
   * The user who initiated the action
   */
  actor: _xGitHubAuditEntryActor | null;

  /**
   * The IP address of the actor
   */
  actorIp: string | null;

  /**
   * A readable representation of the actor's location
   */
  actorLocation: IXGitHubActorLocation | null;

  /**
   * The username of the user who initiated the action
   */
  actorLogin: string | null;

  /**
   * The HTTP path for the actor.
   */
  actorResourcePath: any | null;

  /**
   * The HTTP URL for the actor.
   */
  actorUrl: any | null;

  /**
   * The time the action was initiated
   */
  createdAt: any;
  id: string;

  /**
   * The corresponding operation type for the action
   */
  operationType: XGitHubOperationType | null;

  /**
   * The Organization associated with the Audit Entry.
   */
  organization: IXGitHubOrganization | null;

  /**
   * The name of the Organization.
   */
  organizationName: string | null;

  /**
   * The HTTP path for the organization
   */
  organizationResourcePath: any | null;

  /**
   * The HTTP URL for the organization
   */
  organizationUrl: any | null;

  /**
   * The repository associated with the action
   */
  repository: IXGitHubRepository | null;

  /**
   * The name of the repository
   */
  repositoryName: string | null;

  /**
   * The HTTP path for the repository
   */
  repositoryResourcePath: any | null;

  /**
   * The HTTP URL for the repository
   */
  repositoryUrl: any | null;

  /**
   * The user affected by the action
   */
  user: IXGitHubUser | null;

  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin: string | null;

  /**
   * The HTTP path for the user.
   */
  userResourcePath: any | null;

  /**
   * The HTTP URL for the user.
   */
  userUrl: any | null;

  /**
   * The visibility of the repository
   */
  visibility: XGitHubRepoDestroyAuditEntryVisibility | null;
}

/**
 * The privacy of a repository
 */
export const enum XGitHubRepoDestroyAuditEntryVisibility {
  /**
   * The repository is visible only to users in the same business.
   */
  INTERNAL = 'INTERNAL',

  /**
   * The repository is visible only to those with explicit access.
   */
  PRIVATE = 'PRIVATE',

  /**
   * The repository is visible to everyone.
   */
  PUBLIC = 'PUBLIC'
}

/**
 * Audit log entry for a repo.remove_member event.
 */
export interface IXGitHubRepoRemoveMemberAuditEntry {
  __typename: '_xGitHubRepoRemoveMemberAuditEntry';

  /**
   * The action name
   */
  action: string;

  /**
   * The user who initiated the action
   */
  actor: _xGitHubAuditEntryActor | null;

  /**
   * The IP address of the actor
   */
  actorIp: string | null;

  /**
   * A readable representation of the actor's location
   */
  actorLocation: IXGitHubActorLocation | null;

  /**
   * The username of the user who initiated the action
   */
  actorLogin: string | null;

  /**
   * The HTTP path for the actor.
   */
  actorResourcePath: any | null;

  /**
   * The HTTP URL for the actor.
   */
  actorUrl: any | null;

  /**
   * The time the action was initiated
   */
  createdAt: any;
  id: string;

  /**
   * The corresponding operation type for the action
   */
  operationType: XGitHubOperationType | null;

  /**
   * The Organization associated with the Audit Entry.
   */
  organization: IXGitHubOrganization | null;

  /**
   * The name of the Organization.
   */
  organizationName: string | null;

  /**
   * The HTTP path for the organization
   */
  organizationResourcePath: any | null;

  /**
   * The HTTP URL for the organization
   */
  organizationUrl: any | null;

  /**
   * The repository associated with the action
   */
  repository: IXGitHubRepository | null;

  /**
   * The name of the repository
   */
  repositoryName: string | null;

  /**
   * The HTTP path for the repository
   */
  repositoryResourcePath: any | null;

  /**
   * The HTTP URL for the repository
   */
  repositoryUrl: any | null;

  /**
   * The user affected by the action
   */
  user: IXGitHubUser | null;

  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin: string | null;

  /**
   * The HTTP path for the user.
   */
  userResourcePath: any | null;

  /**
   * The HTTP URL for the user.
   */
  userUrl: any | null;

  /**
   * The visibility of the repository
   */
  visibility: XGitHubRepoRemoveMemberAuditEntryVisibility | null;
}

/**
 * The privacy of a repository
 */
export const enum XGitHubRepoRemoveMemberAuditEntryVisibility {
  /**
   * The repository is visible only to users in the same business.
   */
  INTERNAL = 'INTERNAL',

  /**
   * The repository is visible only to those with explicit access.
   */
  PRIVATE = 'PRIVATE',

  /**
   * The repository is visible to everyone.
   */
  PUBLIC = 'PUBLIC'
}

/**
 * Audit log entry for a repo.remove_topic event.
 */
export interface IXGitHubRepoRemoveTopicAuditEntry {
  __typename: '_xGitHubRepoRemoveTopicAuditEntry';

  /**
   * The action name
   */
  action: string;

  /**
   * The user who initiated the action
   */
  actor: _xGitHubAuditEntryActor | null;

  /**
   * The IP address of the actor
   */
  actorIp: string | null;

  /**
   * A readable representation of the actor's location
   */
  actorLocation: IXGitHubActorLocation | null;

  /**
   * The username of the user who initiated the action
   */
  actorLogin: string | null;

  /**
   * The HTTP path for the actor.
   */
  actorResourcePath: any | null;

  /**
   * The HTTP URL for the actor.
   */
  actorUrl: any | null;

  /**
   * The time the action was initiated
   */
  createdAt: any;
  id: string;

  /**
   * The corresponding operation type for the action
   */
  operationType: XGitHubOperationType | null;

  /**
   * The Organization associated with the Audit Entry.
   */
  organization: IXGitHubOrganization | null;

  /**
   * The name of the Organization.
   */
  organizationName: string | null;

  /**
   * The HTTP path for the organization
   */
  organizationResourcePath: any | null;

  /**
   * The HTTP URL for the organization
   */
  organizationUrl: any | null;

  /**
   * The repository associated with the action
   */
  repository: IXGitHubRepository | null;

  /**
   * The name of the repository
   */
  repositoryName: string | null;

  /**
   * The HTTP path for the repository
   */
  repositoryResourcePath: any | null;

  /**
   * The HTTP URL for the repository
   */
  repositoryUrl: any | null;

  /**
   * The name of the topic added to the repository
   */
  topic: IXGitHubTopic | null;

  /**
   * The name of the topic added to the repository
   */
  topicName: string | null;

  /**
   * The user affected by the action
   */
  user: IXGitHubUser | null;

  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin: string | null;

  /**
   * The HTTP path for the user.
   */
  userResourcePath: any | null;

  /**
   * The HTTP URL for the user.
   */
  userUrl: any | null;
}

/**
 * The reasons a piece of content can be reported or minimized.
 */
export const enum XGitHubReportedContentClassifiers {
  /**
   * An abusive or harassing piece of content
   */
  ABUSE = 'ABUSE',

  /**
   * A duplicated piece of content
   */
  DUPLICATE = 'DUPLICATE',

  /**
   * An irrelevant piece of content
   */
  OFF_TOPIC = 'OFF_TOPIC',

  /**
   * An outdated piece of content
   */
  OUTDATED = 'OUTDATED',

  /**
   * The content has been resolved
   */
  RESOLVED = 'RESOLVED',

  /**
   * A spammy piece of content
   */
  SPAM = 'SPAM'
}

/**
 * A repository contains the content for a project.
 */
export interface IXGitHubRepository {
  __typename: '_xGitHubRepository';

  /**
   * A list of users that can be assigned to issues in this repository.
   */
  assignableUsers: IXGitHubUserConnection;

  /**
   * Whether or not Auto-merge can be enabled on pull requests in this repository.
   */
  autoMergeAllowed: boolean;

  /**
   * A list of branch protection rules for this repository.
   */
  branchProtectionRules: IXGitHubBranchProtectionRuleConnection;

  /**
   * Returns the code of conduct for this repository
   */
  codeOfConduct: IXGitHubCodeOfConduct | null;

  /**
   * A list of collaborators associated with the repository.
   */
  collaborators: IXGitHubRepositoryCollaboratorConnection | null;

  /**
   * A list of commit comments associated with the repository.
   */
  commitComments: IXGitHubCommitCommentConnection;

  /**
   * Returns a list of contact links associated to the repository
   */
  contactLinks: Array<IXGitHubRepositoryContactLink> | null;

  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: any;

  /**
   * Identifies the primary key from the database.
   */
  databaseId: number | null;

  /**
   * The Ref associated with the repository's default branch.
   */
  defaultBranchRef: IXGitHubRef | null;

  /**
   * Whether or not branches are automatically deleted when merged in this repository.
   */
  deleteBranchOnMerge: boolean;

  /**
   * A list of deploy keys that are on this repository.
   */
  deployKeys: IXGitHubDeployKeyConnection;

  /**
   * Deployments associated with the repository
   */
  deployments: IXGitHubDeploymentConnection;

  /**
   * The description of the repository.
   */
  description: string | null;

  /**
   * The description of the repository rendered to HTML.
   */
  descriptionHTML: any;

  /**
   * Returns a single discussion from the current repository by number.
   */
  discussion: IXGitHubDiscussion | null;

  /**
   * A list of discussion categories that are available in the repository.
   */
  discussionCategories: IXGitHubDiscussionCategoryConnection;

  /**
   * A list of discussions that have been opened in the repository.
   */
  discussions: IXGitHubDiscussionConnection;

  /**
   * The number of kilobytes this repository occupies on disk.
   */
  diskUsage: number | null;

  /**
   * Returns a single active environment from the current repository by name.
   */
  environment: IXGitHubEnvironment | null;

  /**
   * A list of environments that are in this repository.
   */
  environments: IXGitHubEnvironmentConnection;

  /**
   * Returns how many forks there are of this repository in the whole network.
   */
  forkCount: number;

  /**
   * A list of direct forked repositories.
   */
  forks: IXGitHubRepositoryConnection;

  /**
   * The funding links for this repository
   */
  fundingLinks: Array<IXGitHubFundingLink>;

  /**
   * Indicates if the repository has issues feature enabled.
   */
  hasIssuesEnabled: boolean;

  /**
   * Indicates if the repository has the Projects feature enabled.
   */
  hasProjectsEnabled: boolean;

  /**
   * Indicates if the repository has wiki feature enabled.
   */
  hasWikiEnabled: boolean;

  /**
   * The repository's URL.
   */
  homepageUrl: any | null;
  id: string;

  /**
   * The interaction ability settings for this repository.
   */
  interactionAbility: IXGitHubRepositoryInteractionAbility | null;

  /**
   * Indicates if the repository is unmaintained.
   */
  isArchived: boolean;

  /**
   * Returns true if blank issue creation is allowed
   */
  isBlankIssuesEnabled: boolean;

  /**
   * Returns whether or not this repository disabled.
   */
  isDisabled: boolean;

  /**
   * Returns whether or not this repository is empty.
   */
  isEmpty: boolean;

  /**
   * Identifies if the repository is a fork.
   */
  isFork: boolean;

  /**
   * Indicates if a repository is either owned by an organization, or is a private fork of an organization repository.
   */
  isInOrganization: boolean;

  /**
   * Indicates if the repository has been locked or not.
   */
  isLocked: boolean;

  /**
   * Identifies if the repository is a mirror.
   */
  isMirror: boolean;

  /**
   * Identifies if the repository is private or internal.
   */
  isPrivate: boolean;

  /**
   * Returns true if this repository has a security policy
   */
  isSecurityPolicyEnabled: boolean | null;

  /**
   * Identifies if the repository is a template that can be used to generate new repositories.
   */
  isTemplate: boolean;

  /**
   * Is this repository a user configuration repository?
   */
  isUserConfigurationRepository: boolean;

  /**
   * Returns a single issue from the current repository by number.
   */
  issue: IXGitHubIssue | null;

  /**
   * Returns a single issue-like object from the current repository by number.
   */
  issueOrPullRequest: _xGitHubIssueOrPullRequest | null;

  /**
   * Returns a list of issue templates associated to the repository
   */
  issueTemplates: Array<IXGitHubIssueTemplate> | null;

  /**
   * A list of issues that have been opened in the repository.
   */
  issues: IXGitHubIssueConnection;

  /**
   * Returns a single label by name
   */
  label: IXGitHubLabel | null;

  /**
   * A list of labels associated with the repository.
   */
  labels: IXGitHubLabelConnection | null;

  /**
   * A list containing a breakdown of the language composition of the repository.
   */
  languages: IXGitHubLanguageConnection | null;

  /**
   * Get the latest release for the repository if one exists.
   */
  latestRelease: IXGitHubRelease | null;

  /**
   * The license associated with the repository
   */
  licenseInfo: IXGitHubLicense | null;

  /**
   * The reason the repository has been locked.
   */
  lockReason: XGitHubRepositoryLockReason | null;

  /**
   * A list of Users that can be mentioned in the context of the repository.
   */
  mentionableUsers: IXGitHubUserConnection;

  /**
   * Whether or not PRs are merged with a merge commit on this repository.
   */
  mergeCommitAllowed: boolean;

  /**
   * Returns a single milestone from the current repository by number.
   */
  milestone: IXGitHubMilestone | null;

  /**
   * A list of milestones associated with the repository.
   */
  milestones: IXGitHubMilestoneConnection | null;

  /**
   * The repository's original mirror URL.
   */
  mirrorUrl: any | null;

  /**
   * The name of the repository.
   */
  name: string;

  /**
   * The repository's name with owner.
   */
  nameWithOwner: string;

  /**
   * A Git object in the repository
   */
  object: _xGitHubGitObject | null;

  /**
   * The image used to represent this repository in Open Graph data.
   */
  openGraphImageUrl: any;

  /**
   * The User owner of the repository.
   */
  owner: _xGitHubRepositoryOwner;

  /**
   * A list of packages under the owner.
   */
  packages: IXGitHubPackageConnection;

  /**
   * The repository parent, if this is a fork.
   */
  parent: IXGitHubRepository | null;

  /**
   * A list of discussions that have been pinned in this repository.
   */
  pinnedDiscussions: IXGitHubPinnedDiscussionConnection;

  /**
   * A list of pinned issues for this repository.
   */
  pinnedIssues: IXGitHubPinnedIssueConnection | null;

  /**
   * The primary language of the repository's code.
   */
  primaryLanguage: IXGitHubLanguage | null;

  /**
   * Find project by number.
   */
  project: IXGitHubProject | null;

  /**
   * A list of projects under the owner.
   */
  projects: IXGitHubProjectConnection;

  /**
   * The HTTP path listing the repository's projects
   */
  projectsResourcePath: any;

  /**
   * The HTTP URL listing the repository's projects
   */
  projectsUrl: any;

  /**
   * Returns a single pull request from the current repository by number.
   */
  pullRequest: IXGitHubPullRequest | null;

  /**
   * Returns a list of pull request templates associated to the repository
   */
  pullRequestTemplates: Array<IXGitHubPullRequestTemplate> | null;

  /**
   * A list of pull requests that have been opened in the repository.
   */
  pullRequests: IXGitHubPullRequestConnection;

  /**
   * Identifies when the repository was last pushed to.
   */
  pushedAt: any | null;

  /**
   * Whether or not rebase-merging is enabled on this repository.
   */
  rebaseMergeAllowed: boolean;

  /**
   * Fetch a given ref from the repository
   */
  ref: IXGitHubRef | null;

  /**
   * Fetch a list of refs from the repository
   */
  refs: IXGitHubRefConnection | null;

  /**
   * Lookup a single release given various criteria.
   */
  release: IXGitHubRelease | null;

  /**
   * List of releases which are dependent on this repository.
   */
  releases: IXGitHubReleaseConnection;

  /**
   * A list of applied repository-topic associations for this repository.
   */
  repositoryTopics: IXGitHubRepositoryTopicConnection;

  /**
   * The HTTP path for this repository
   */
  resourcePath: any;

  /**
   * The security policy URL.
   */
  securityPolicyUrl: any | null;

  /**
   * A description of the repository, rendered to HTML without any links in it.
   */
  shortDescriptionHTML: any;

  /**
   * Whether or not squash-merging is enabled on this repository.
   */
  squashMergeAllowed: boolean;

  /**
   * The SSH URL to clone this repository
   */
  sshUrl: any;

  /**
   * Returns a count of how many stargazers there are on this object
   */
  stargazerCount: number;

  /**
   * A list of users who have starred this starrable.
   */
  stargazers: IXGitHubStargazerConnection;

  /**
   * Returns a list of all submodules in this repository parsed from the
   * .gitmodules file as of the default branch's HEAD commit.
   */
  submodules: IXGitHubSubmoduleConnection;

  /**
   * Temporary authentication token for cloning this repository.
   */
  tempCloneToken: string | null;

  /**
   * The repository from which this repository was generated, if any.
   */
  templateRepository: IXGitHubRepository | null;

  /**
   * Identifies the date and time when the object was last updated.
   */
  updatedAt: any;

  /**
   * The HTTP URL for this repository
   */
  url: any;

  /**
   * Whether this repository has a custom image to use with Open Graph as opposed to being represented by the owner's avatar.
   */
  usesCustomOpenGraphImage: boolean;

  /**
   * Indicates whether the viewer has admin permissions on this repository.
   */
  viewerCanAdminister: boolean;

  /**
   * Can the current viewer create new projects on this owner.
   */
  viewerCanCreateProjects: boolean;

  /**
   * Check if the viewer is able to change their subscription status for the repository.
   */
  viewerCanSubscribe: boolean;

  /**
   * Indicates whether the viewer can update the topics of this repository.
   */
  viewerCanUpdateTopics: boolean;

  /**
   * The last commit email for the viewer.
   */
  viewerDefaultCommitEmail: string | null;

  /**
   * The last used merge method by the viewer or the default for the repository.
   */
  viewerDefaultMergeMethod: XGitHubPullRequestMergeMethod;

  /**
   * Returns a boolean indicating whether the viewing user has starred this starrable.
   */
  viewerHasStarred: boolean;

  /**
   * The users permission level on the repository. Will return null if authenticated as an GitHub App.
   */
  viewerPermission: XGitHubRepositoryPermission | null;

  /**
   * A list of emails this viewer can commit with.
   */
  viewerPossibleCommitEmails: Array<string> | null;

  /**
   * Identifies if the viewer is watching, not watching, or ignoring the subscribable entity.
   */
  viewerSubscription: XGitHubSubscriptionState | null;

  /**
   * Indicates the repository's visibility level.
   */
  visibility: XGitHubRepositoryVisibility;

  /**
   * A list of vulnerability alerts that are on this repository.
   */
  vulnerabilityAlerts: IXGitHubRepositoryVulnerabilityAlertConnection | null;

  /**
   * A list of users watching the repository.
   */
  watchers: IXGitHubUserConnection;
}

export interface IAssignableUsersOnXGitHubRepositoryArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Filters users with query on user name and login
   */
  query?: string | null;
}

export interface IBranchProtectionRulesOnXGitHubRepositoryArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface ICollaboratorsOnXGitHubRepositoryArguments {
  /**
   * Collaborators affiliation level with a repository.
   */
  affiliation?: XGitHubCollaboratorAffiliation | null;

  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Filters users with query on user name and login
   */
  query?: string | null;
}

export interface ICommitCommentsOnXGitHubRepositoryArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IDeployKeysOnXGitHubRepositoryArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IDeploymentsOnXGitHubRepositoryArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Environments to list deployments for
   */
  environments?: Array<string> | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Ordering options for deployments returned from the connection.
   * @default {"direction":"ASC","field":"CREATED_AT"}
   */
  orderBy?: IXGitHubDeploymentOrder | null;
}

export interface IDiscussionOnXGitHubRepositoryArguments {
  /**
   * The number for the discussion to be returned.
   */
  number: number;
}

export interface IDiscussionCategoriesOnXGitHubRepositoryArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IDiscussionsOnXGitHubRepositoryArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Only include discussions that belong to the category with this ID.
   * @default null
   */
  categoryId?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Ordering options for discussions returned from the connection.
   * @default {"direction":"DESC","field":"UPDATED_AT"}
   */
  orderBy?: IXGitHubDiscussionOrder | null;
}

export interface IEnvironmentOnXGitHubRepositoryArguments {
  /**
   * The name of the environment to be returned.
   */
  name: string;
}

export interface IEnvironmentsOnXGitHubRepositoryArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IForksOnXGitHubRepositoryArguments {
  /**
   * Array of viewer's affiliation options for repositories returned from the
   * connection. For example, OWNER will include only repositories that the
   * current viewer owns.
   */
  affiliations?: Array<XGitHubRepositoryAffiliation | null> | null;

  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * If non-null, filters repositories according to whether they have been locked
   */
  isLocked?: boolean | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Ordering options for repositories returned from the connection
   */
  orderBy?: IXGitHubRepositoryOrder | null;

  /**
   * Array of owner's affiliation options for repositories returned from the
   * connection. For example, OWNER will include only repositories that the
   * organization or user being viewed owns.
   * @default ["OWNER","COLLABORATOR"]
   */
  ownerAffiliations?: Array<XGitHubRepositoryAffiliation | null> | null;

  /**
   * If non-null, filters repositories according to privacy
   */
  privacy?: XGitHubRepositoryPrivacy | null;
}

export interface IIssueOnXGitHubRepositoryArguments {
  /**
   * The number for the issue to be returned.
   */
  number: number;
}

export interface IIssueOrPullRequestOnXGitHubRepositoryArguments {
  /**
   * The number for the issue to be returned.
   */
  number: number;
}

export interface IIssuesOnXGitHubRepositoryArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Filtering options for issues returned from the connection.
   */
  filterBy?: IXGitHubIssueFilters | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * A list of label names to filter the pull requests by.
   */
  labels?: Array<string> | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Ordering options for issues returned from the connection.
   */
  orderBy?: IXGitHubIssueOrder | null;

  /**
   * A list of states to filter the issues by.
   */
  states?: Array<XGitHubIssueState> | null;
}

export interface ILabelOnXGitHubRepositoryArguments {
  /**
   * Label name
   */
  name: string;
}

export interface ILabelsOnXGitHubRepositoryArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Ordering options for labels returned from the connection.
   * @default {"direction":"ASC","field":"CREATED_AT"}
   */
  orderBy?: IXGitHubLabelOrder | null;

  /**
   * If provided, searches labels by name and description.
   */
  query?: string | null;
}

export interface ILanguagesOnXGitHubRepositoryArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Order for connection
   */
  orderBy?: IXGitHubLanguageOrder | null;
}

export interface IMentionableUsersOnXGitHubRepositoryArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Filters users with query on user name and login
   */
  query?: string | null;
}

export interface IMilestoneOnXGitHubRepositoryArguments {
  /**
   * The number for the milestone to be returned.
   */
  number: number;
}

export interface IMilestonesOnXGitHubRepositoryArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Ordering options for milestones.
   */
  orderBy?: IXGitHubMilestoneOrder | null;

  /**
   * Filters milestones with a query on the title
   */
  query?: string | null;

  /**
   * Filter by the state of the milestones.
   */
  states?: Array<XGitHubMilestoneState> | null;
}

export interface IObjectOnXGitHubRepositoryArguments {
  /**
   * A Git revision expression suitable for rev-parse
   */
  expression?: string | null;

  /**
   * The Git object ID
   */
  oid?: any | null;
}

export interface IPackagesOnXGitHubRepositoryArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Find packages by their names.
   */
  names?: Array<string | null> | null;

  /**
   * Ordering of the returned packages.
   * @default {"direction":"DESC","field":"CREATED_AT"}
   */
  orderBy?: IXGitHubPackageOrder | null;

  /**
   * Filter registry package by type.
   */
  packageType?: XGitHubPackageType | null;

  /**
   * Find packages in a repository by ID.
   */
  repositoryId?: string | null;
}

export interface IPinnedDiscussionsOnXGitHubRepositoryArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IPinnedIssuesOnXGitHubRepositoryArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IProjectOnXGitHubRepositoryArguments {
  /**
   * The project number to find.
   */
  number: number;
}

export interface IProjectsOnXGitHubRepositoryArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Ordering options for projects returned from the connection
   */
  orderBy?: IXGitHubProjectOrder | null;

  /**
   * Query to search projects by, currently only searching by name.
   */
  search?: string | null;

  /**
   * A list of states to filter the projects by.
   */
  states?: Array<XGitHubProjectState> | null;
}

export interface IPullRequestOnXGitHubRepositoryArguments {
  /**
   * The number for the pull request to be returned.
   */
  number: number;
}

export interface IPullRequestsOnXGitHubRepositoryArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * The base ref name to filter the pull requests by.
   */
  baseRefName?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * The head ref name to filter the pull requests by.
   */
  headRefName?: string | null;

  /**
   * A list of label names to filter the pull requests by.
   */
  labels?: Array<string> | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Ordering options for pull requests returned from the connection.
   */
  orderBy?: IXGitHubIssueOrder | null;

  /**
   * A list of states to filter the pull requests by.
   */
  states?: Array<XGitHubPullRequestState> | null;
}

export interface IRefOnXGitHubRepositoryArguments {
  /**
   * The ref to retrieve. Fully qualified matches are checked in order
   * (`refs/heads/master`) before falling back onto checks for short name matches (`master`).
   */
  qualifiedName: string;
}

export interface IRefsOnXGitHubRepositoryArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * DEPRECATED: use orderBy. The ordering direction.
   */
  direction?: XGitHubOrderDirection | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Ordering options for refs returned from the connection.
   */
  orderBy?: IXGitHubRefOrder | null;

  /**
   * Filters refs with query on name
   */
  query?: string | null;

  /**
   * A ref name prefix like `refs/heads/`, `refs/tags/`, etc.
   */
  refPrefix: string;
}

export interface IReleaseOnXGitHubRepositoryArguments {
  /**
   * The name of the Tag the Release was created from
   */
  tagName: string;
}

export interface IReleasesOnXGitHubRepositoryArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Order for connection
   */
  orderBy?: IXGitHubReleaseOrder | null;
}

export interface IRepositoryTopicsOnXGitHubRepositoryArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IShortDescriptionHTMLOnXGitHubRepositoryArguments {
  /**
   * How many characters to return.
   * @default 200
   */
  limit?: number | null;
}

export interface IStargazersOnXGitHubRepositoryArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Order for connection
   */
  orderBy?: IXGitHubStarOrder | null;
}

export interface ISubmodulesOnXGitHubRepositoryArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IVulnerabilityAlertsOnXGitHubRepositoryArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IWatchersOnXGitHubRepositoryArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

/**
 * The affiliation of a user to a repository
 */
export const enum XGitHubRepositoryAffiliation {
  /**
   * Repositories that the user has been added to as a collaborator.
   */
  COLLABORATOR = 'COLLABORATOR',

  /**
   * Repositories that the user has access to through being a member of an
   * organization. This includes every repository on every team that the user is on.
   */
  ORGANIZATION_MEMBER = 'ORGANIZATION_MEMBER',

  /**
   * Repositories that are owned by the authenticated user.
   */
  OWNER = 'OWNER'
}

/**
 * Metadata for an audit entry with action repo.*
 */
export type _xGitHubRepositoryAuditEntryData =
  | IXGitHubOrgRestoreMemberMembershipRepositoryAuditEntryData
  | IXGitHubPrivateRepositoryForkingDisableAuditEntry
  | IXGitHubPrivateRepositoryForkingEnableAuditEntry
  | IXGitHubRepoAccessAuditEntry
  | IXGitHubRepoAddMemberAuditEntry
  | IXGitHubRepoAddTopicAuditEntry
  | IXGitHubRepoArchivedAuditEntry
  | IXGitHubRepoChangeMergeSettingAuditEntry
  | IXGitHubRepoConfigDisableAnonymousGitAccessAuditEntry
  | IXGitHubRepoConfigDisableCollaboratorsOnlyAuditEntry
  | IXGitHubRepoConfigDisableContributorsOnlyAuditEntry
  | IXGitHubRepoConfigDisableSockpuppetDisallowedAuditEntry
  | IXGitHubRepoConfigEnableAnonymousGitAccessAuditEntry
  | IXGitHubRepoConfigEnableCollaboratorsOnlyAuditEntry
  | IXGitHubRepoConfigEnableContributorsOnlyAuditEntry
  | IXGitHubRepoConfigEnableSockpuppetDisallowedAuditEntry
  | IXGitHubRepoConfigLockAnonymousGitAccessAuditEntry
  | IXGitHubRepoConfigUnlockAnonymousGitAccessAuditEntry
  | IXGitHubRepoCreateAuditEntry
  | IXGitHubRepoDestroyAuditEntry
  | IXGitHubRepoRemoveMemberAuditEntry
  | IXGitHubRepoRemoveTopicAuditEntry
  | IXGitHubTeamAddRepositoryAuditEntry
  | IXGitHubTeamRemoveRepositoryAuditEntry;

/**
 * Metadata for an audit entry with action repo.*
 */
export interface IXGitHubRepositoryAuditEntryData {
  __typename: '_xGitHubRepositoryAuditEntryData';

  /**
   * The repository associated with the action
   */
  repository: IXGitHubRepository | null;

  /**
   * The name of the repository
   */
  repositoryName: string | null;

  /**
   * The HTTP path for the repository
   */
  repositoryResourcePath: any | null;

  /**
   * The HTTP URL for the repository
   */
  repositoryUrl: any | null;
}

/**
 * The connection type for User.
 */
export interface IXGitHubRepositoryCollaboratorConnection {
  __typename: '_xGitHubRepositoryCollaboratorConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubRepositoryCollaboratorEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitHubUser | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * Represents a user who is a collaborator of a repository.
 */
export interface IXGitHubRepositoryCollaboratorEdge {
  __typename: '_xGitHubRepositoryCollaboratorEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  node: IXGitHubUser;

  /**
   * The permission the user has on the repository.
   */
  permission: XGitHubRepositoryPermission;

  /**
   * A list of sources for the user's access to the repository.
   */
  permissionSources: Array<IXGitHubPermissionSource> | null;
}

/**
 * A list of repositories owned by the subject.
 */
export interface IXGitHubRepositoryConnection {
  __typename: '_xGitHubRepositoryConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubRepositoryEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitHubRepository | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;

  /**
   * The total size in kilobytes of all repositories in the connection.
   */
  totalDiskUsage: number;
}

/**
 * A repository contact link.
 */
export interface IXGitHubRepositoryContactLink {
  __typename: '_xGitHubRepositoryContactLink';

  /**
   * The contact link purpose.
   */
  about: string;

  /**
   * The contact link name.
   */
  name: string;

  /**
   * The contact link URL.
   */
  url: any;
}

/**
 * The reason a repository is listed as 'contributed'.
 */
export const enum XGitHubRepositoryContributionType {
  /**
   * Created a commit
   */
  COMMIT = 'COMMIT',

  /**
   * Created an issue
   */
  ISSUE = 'ISSUE',

  /**
   * Created a pull request
   */
  PULL_REQUEST = 'PULL_REQUEST',

  /**
   * Reviewed a pull request
   */
  PULL_REQUEST_REVIEW = 'PULL_REQUEST_REVIEW',

  /**
   * Created the repository
   */
  REPOSITORY = 'REPOSITORY'
}

/**
 * Represents an author of discussions in repositories.
 */
export type _xGitHubRepositoryDiscussionAuthor =
  | IXGitHubOrganization
  | IXGitHubUser;

/**
 * Represents an author of discussions in repositories.
 */
export interface IXGitHubRepositoryDiscussionAuthor {
  __typename: '_xGitHubRepositoryDiscussionAuthor';

  /**
   * Discussions this user has started.
   */
  repositoryDiscussions: IXGitHubDiscussionConnection;
}

export interface IRepositoryDiscussionsOnXGitHubRepositoryDiscussionAuthorArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Filter discussions to only those that have been answered or not. Defaults to
   * including both answered and unanswered discussions.
   * @default null
   */
  answered?: boolean | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Ordering options for discussions returned from the connection.
   * @default {"direction":"DESC","field":"CREATED_AT"}
   */
  orderBy?: IXGitHubDiscussionOrder | null;

  /**
   * Filter discussions to only those in a specific repository.
   */
  repositoryId?: string | null;
}

/**
 * Represents an author of discussion comments in repositories.
 */
export type _xGitHubRepositoryDiscussionCommentAuthor =
  | IXGitHubOrganization
  | IXGitHubUser;

/**
 * Represents an author of discussion comments in repositories.
 */
export interface IXGitHubRepositoryDiscussionCommentAuthor {
  __typename: '_xGitHubRepositoryDiscussionCommentAuthor';

  /**
   * Discussion comments this user has authored.
   */
  repositoryDiscussionComments: IXGitHubDiscussionCommentConnection;
}

export interface IRepositoryDiscussionCommentsOnXGitHubRepositoryDiscussionCommentAuthorArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Filter discussion comments to only those that were marked as the answer
   * @default false
   */
  onlyAnswers?: boolean | null;

  /**
   * Filter discussion comments to only those in a specific repository.
   */
  repositoryId?: string | null;
}

/**
 * An edge in a connection.
 */
export interface IXGitHubRepositoryEdge {
  __typename: '_xGitHubRepositoryEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitHubRepository | null;
}

/**
 * A subset of repository info.
 */
export type _xGitHubRepositoryInfo = IXGitHubRepository;

/**
 * A subset of repository info.
 */
export interface IXGitHubRepositoryInfo {
  __typename: '_xGitHubRepositoryInfo';

  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: any;

  /**
   * The description of the repository.
   */
  description: string | null;

  /**
   * The description of the repository rendered to HTML.
   */
  descriptionHTML: any;

  /**
   * Returns how many forks there are of this repository in the whole network.
   */
  forkCount: number;

  /**
   * Indicates if the repository has issues feature enabled.
   */
  hasIssuesEnabled: boolean;

  /**
   * Indicates if the repository has the Projects feature enabled.
   */
  hasProjectsEnabled: boolean;

  /**
   * Indicates if the repository has wiki feature enabled.
   */
  hasWikiEnabled: boolean;

  /**
   * The repository's URL.
   */
  homepageUrl: any | null;

  /**
   * Indicates if the repository is unmaintained.
   */
  isArchived: boolean;

  /**
   * Identifies if the repository is a fork.
   */
  isFork: boolean;

  /**
   * Indicates if a repository is either owned by an organization, or is a private fork of an organization repository.
   */
  isInOrganization: boolean;

  /**
   * Indicates if the repository has been locked or not.
   */
  isLocked: boolean;

  /**
   * Identifies if the repository is a mirror.
   */
  isMirror: boolean;

  /**
   * Identifies if the repository is private or internal.
   */
  isPrivate: boolean;

  /**
   * Identifies if the repository is a template that can be used to generate new repositories.
   */
  isTemplate: boolean;

  /**
   * The license associated with the repository
   */
  licenseInfo: IXGitHubLicense | null;

  /**
   * The reason the repository has been locked.
   */
  lockReason: XGitHubRepositoryLockReason | null;

  /**
   * The repository's original mirror URL.
   */
  mirrorUrl: any | null;

  /**
   * The name of the repository.
   */
  name: string;

  /**
   * The repository's name with owner.
   */
  nameWithOwner: string;

  /**
   * The image used to represent this repository in Open Graph data.
   */
  openGraphImageUrl: any;

  /**
   * The User owner of the repository.
   */
  owner: _xGitHubRepositoryOwner;

  /**
   * Identifies when the repository was last pushed to.
   */
  pushedAt: any | null;

  /**
   * The HTTP path for this repository
   */
  resourcePath: any;

  /**
   * A description of the repository, rendered to HTML without any links in it.
   */
  shortDescriptionHTML: any;

  /**
   * Identifies the date and time when the object was last updated.
   */
  updatedAt: any;

  /**
   * The HTTP URL for this repository
   */
  url: any;

  /**
   * Whether this repository has a custom image to use with Open Graph as opposed to being represented by the owner's avatar.
   */
  usesCustomOpenGraphImage: boolean;

  /**
   * Indicates the repository's visibility level.
   */
  visibility: XGitHubRepositoryVisibility;
}

export interface IShortDescriptionHTMLOnXGitHubRepositoryInfoArguments {
  /**
   * How many characters to return.
   * @default 200
   */
  limit?: number | null;
}

/**
 * Repository interaction limit that applies to this object.
 */
export interface IXGitHubRepositoryInteractionAbility {
  __typename: '_xGitHubRepositoryInteractionAbility';

  /**
   * The time the currently active limit expires.
   */
  expiresAt: any | null;

  /**
   * The current limit that is enabled on this object.
   */
  limit: XGitHubRepositoryInteractionLimit;

  /**
   * The origin of the currently active interaction limit.
   */
  origin: XGitHubRepositoryInteractionLimitOrigin;
}

/**
 * A repository interaction limit.
 */
export const enum XGitHubRepositoryInteractionLimit {
  /**
   * Users that are not collaborators will not be able to interact with the repository.
   */
  COLLABORATORS_ONLY = 'COLLABORATORS_ONLY',

  /**
   * Users that have not previously committed to a repository’s default branch will be unable to interact with the repository.
   */
  CONTRIBUTORS_ONLY = 'CONTRIBUTORS_ONLY',

  /**
   * Users that have recently created their account will be unable to interact with the repository.
   */
  EXISTING_USERS = 'EXISTING_USERS',

  /**
   * No interaction limits are enabled.
   */
  NO_LIMIT = 'NO_LIMIT'
}

/**
 * The length for a repository interaction limit to be enabled for.
 */
export const enum XGitHubRepositoryInteractionLimitExpiry {
  /**
   * The interaction limit will expire after 1 day.
   */
  ONE_DAY = 'ONE_DAY',

  /**
   * The interaction limit will expire after 1 month.
   */
  ONE_MONTH = 'ONE_MONTH',

  /**
   * The interaction limit will expire after 1 week.
   */
  ONE_WEEK = 'ONE_WEEK',

  /**
   * The interaction limit will expire after 6 months.
   */
  SIX_MONTHS = 'SIX_MONTHS',

  /**
   * The interaction limit will expire after 3 days.
   */
  THREE_DAYS = 'THREE_DAYS'
}

/**
 * Indicates where an interaction limit is configured.
 */
export const enum XGitHubRepositoryInteractionLimitOrigin {
  /**
   * A limit that is configured at the organization level.
   */
  ORGANIZATION = 'ORGANIZATION',

  /**
   * A limit that is configured at the repository level.
   */
  REPOSITORY = 'REPOSITORY',

  /**
   * A limit that is configured at the user-wide level.
   */
  USER = 'USER'
}

/**
 * An invitation for a user to be added to a repository.
 */
export interface IXGitHubRepositoryInvitation {
  __typename: '_xGitHubRepositoryInvitation';

  /**
   * The email address that received the invitation.
   */
  email: string | null;
  id: string;

  /**
   * The user who received the invitation.
   */
  invitee: IXGitHubUser | null;

  /**
   * The user who created the invitation.
   */
  inviter: IXGitHubUser;

  /**
   * The permalink for this repository invitation.
   */
  permalink: any;

  /**
   * The permission granted on this repository by this invitation.
   */
  permission: XGitHubRepositoryPermission;

  /**
   * The Repository the user is invited to.
   */
  repository: _xGitHubRepositoryInfo | null;
}

/**
 * The connection type for RepositoryInvitation.
 */
export interface IXGitHubRepositoryInvitationConnection {
  __typename: '_xGitHubRepositoryInvitationConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubRepositoryInvitationEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitHubRepositoryInvitation | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface IXGitHubRepositoryInvitationEdge {
  __typename: '_xGitHubRepositoryInvitationEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitHubRepositoryInvitation | null;
}

/**
 * Ordering options for repository invitation connections.
 */
export interface IXGitHubRepositoryInvitationOrder {
  /**
   * The ordering direction.
   */
  direction: XGitHubOrderDirection;

  /**
   * The field to order repository invitations by.
   */
  field: XGitHubRepositoryInvitationOrderField;
}

/**
 * Properties by which repository invitation connections can be ordered.
 */
export const enum XGitHubRepositoryInvitationOrderField {
  /**
   * Order repository invitations by creation time
   */
  CREATED_AT = 'CREATED_AT',

  /**
   * Order repository invitations by invitee login
   * @deprecated "`INVITEE_LOGIN` is no longer a valid field value. Repository invitations can now be associated with an email, not only an invitee. Removal on 2020-10-01 UTC."
   */
  INVITEE_LOGIN = 'INVITEE_LOGIN'
}

/**
 * The possible reasons a given repository could be in a locked state.
 */
export const enum XGitHubRepositoryLockReason {
  /**
   * The repository is locked due to a billing related reason.
   */
  BILLING = 'BILLING',

  /**
   * The repository is locked due to a migration.
   */
  MIGRATING = 'MIGRATING',

  /**
   * The repository is locked due to a move.
   */
  MOVING = 'MOVING',

  /**
   * The repository is locked due to a rename.
   */
  RENAME = 'RENAME'
}

/**
 * Represents a object that belongs to a repository.
 */
export type _xGitHubRepositoryNode =
  | IXGitHubCommitComment
  | IXGitHubCommitCommentThread
  | IXGitHubDiscussion
  | IXGitHubDiscussionCategory
  | IXGitHubIssue
  | IXGitHubIssueComment
  | IXGitHubPinnedDiscussion
  | IXGitHubPullRequest
  | IXGitHubPullRequestCommitCommentThread
  | IXGitHubPullRequestReview
  | IXGitHubPullRequestReviewComment
  | IXGitHubRepositoryVulnerabilityAlert;

/**
 * Represents a object that belongs to a repository.
 */
export interface IXGitHubRepositoryNode {
  __typename: '_xGitHubRepositoryNode';

  /**
   * The repository associated with this node.
   */
  repository: IXGitHubRepository;
}

/**
 * Ordering options for repository connections
 */
export interface IXGitHubRepositoryOrder {
  /**
   * The ordering direction.
   */
  direction: XGitHubOrderDirection;

  /**
   * The field to order repositories by.
   */
  field: XGitHubRepositoryOrderField;
}

/**
 * Properties by which repository connections can be ordered.
 */
export const enum XGitHubRepositoryOrderField {
  /**
   * Order repositories by creation time
   */
  CREATED_AT = 'CREATED_AT',

  /**
   * Order repositories by name
   */
  NAME = 'NAME',

  /**
   * Order repositories by push time
   */
  PUSHED_AT = 'PUSHED_AT',

  /**
   * Order repositories by number of stargazers
   */
  STARGAZERS = 'STARGAZERS',

  /**
   * Order repositories by update time
   */
  UPDATED_AT = 'UPDATED_AT'
}

/**
 * Represents an owner of a Repository.
 */
export type _xGitHubRepositoryOwner = IXGitHubOrganization | IXGitHubUser;

/**
 * Represents an owner of a Repository.
 */
export interface IXGitHubRepositoryOwner {
  __typename: '_xGitHubRepositoryOwner';

  /**
   * A URL pointing to the owner's public avatar.
   */
  avatarUrl: any;
  id: string;

  /**
   * The username used to login.
   */
  login: string;

  /**
   * A list of repositories that the user owns.
   */
  repositories: IXGitHubRepositoryConnection;

  /**
   * Find Repository.
   */
  repository: IXGitHubRepository | null;

  /**
   * The HTTP URL for the owner.
   */
  resourcePath: any;

  /**
   * The HTTP URL for the owner.
   */
  url: any;
}

export interface IAvatarUrlOnXGitHubRepositoryOwnerArguments {
  /**
   * The size of the resulting square image.
   */
  size?: number | null;
}

export interface IRepositoriesOnXGitHubRepositoryOwnerArguments {
  /**
   * Array of viewer's affiliation options for repositories returned from the
   * connection. For example, OWNER will include only repositories that the
   * current viewer owns.
   */
  affiliations?: Array<XGitHubRepositoryAffiliation | null> | null;

  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * If non-null, filters repositories according to whether they are forks of another repository
   */
  isFork?: boolean | null;

  /**
   * If non-null, filters repositories according to whether they have been locked
   */
  isLocked?: boolean | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Ordering options for repositories returned from the connection
   */
  orderBy?: IXGitHubRepositoryOrder | null;

  /**
   * Array of owner's affiliation options for repositories returned from the
   * connection. For example, OWNER will include only repositories that the
   * organization or user being viewed owns.
   * @default ["OWNER","COLLABORATOR"]
   */
  ownerAffiliations?: Array<XGitHubRepositoryAffiliation | null> | null;

  /**
   * If non-null, filters repositories according to privacy
   */
  privacy?: XGitHubRepositoryPrivacy | null;
}

export interface IRepositoryOnXGitHubRepositoryOwnerArguments {
  /**
   * Name of Repository to find.
   */
  name: string;
}

/**
 * The access level to a repository
 */
export const enum XGitHubRepositoryPermission {
  /**
   * Can read, clone, and push to this repository. Can also manage issues, pull
   * requests, and repository settings, including adding collaborators
   */
  ADMIN = 'ADMIN',

  /**
   * Can read, clone, and push to this repository. They can also manage issues, pull requests, and some repository settings
   */
  MAINTAIN = 'MAINTAIN',

  /**
   * Can read and clone this repository. Can also open and comment on issues and pull requests
   */
  READ = 'READ',

  /**
   * Can read and clone this repository. Can also manage issues and pull requests
   */
  TRIAGE = 'TRIAGE',

  /**
   * Can read, clone, and push to this repository. Can also manage issues and pull requests
   */
  WRITE = 'WRITE'
}

/**
 * The privacy of a repository
 */
export const enum XGitHubRepositoryPrivacy {
  /**
   * Private
   */
  PRIVATE = 'PRIVATE',

  /**
   * Public
   */
  PUBLIC = 'PUBLIC'
}

/**
 * A repository-topic connects a repository to a topic.
 */
export interface IXGitHubRepositoryTopic {
  __typename: '_xGitHubRepositoryTopic';
  id: string;

  /**
   * The HTTP path for this repository-topic.
   */
  resourcePath: any;

  /**
   * The topic.
   */
  topic: IXGitHubTopic;

  /**
   * The HTTP URL for this repository-topic.
   */
  url: any;
}

/**
 * The connection type for RepositoryTopic.
 */
export interface IXGitHubRepositoryTopicConnection {
  __typename: '_xGitHubRepositoryTopicConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubRepositoryTopicEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitHubRepositoryTopic | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface IXGitHubRepositoryTopicEdge {
  __typename: '_xGitHubRepositoryTopicEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitHubRepositoryTopic | null;
}

/**
 * The repository's visibility level.
 */
export const enum XGitHubRepositoryVisibility {
  /**
   * The repository is visible only to users in the same business.
   */
  INTERNAL = 'INTERNAL',

  /**
   * The repository is visible only to those with explicit access.
   */
  PRIVATE = 'PRIVATE',

  /**
   * The repository is visible to everyone.
   */
  PUBLIC = 'PUBLIC'
}

/**
 * Audit log entry for a repository_visibility_change.disable event.
 */
export interface IXGitHubRepositoryVisibilityChangeDisableAuditEntry {
  __typename: '_xGitHubRepositoryVisibilityChangeDisableAuditEntry';

  /**
   * The action name
   */
  action: string;

  /**
   * The user who initiated the action
   */
  actor: _xGitHubAuditEntryActor | null;

  /**
   * The IP address of the actor
   */
  actorIp: string | null;

  /**
   * A readable representation of the actor's location
   */
  actorLocation: IXGitHubActorLocation | null;

  /**
   * The username of the user who initiated the action
   */
  actorLogin: string | null;

  /**
   * The HTTP path for the actor.
   */
  actorResourcePath: any | null;

  /**
   * The HTTP URL for the actor.
   */
  actorUrl: any | null;

  /**
   * The time the action was initiated
   */
  createdAt: any;

  /**
   * The HTTP path for this enterprise.
   */
  enterpriseResourcePath: any | null;

  /**
   * The slug of the enterprise.
   */
  enterpriseSlug: string | null;

  /**
   * The HTTP URL for this enterprise.
   */
  enterpriseUrl: any | null;
  id: string;

  /**
   * The corresponding operation type for the action
   */
  operationType: XGitHubOperationType | null;

  /**
   * The Organization associated with the Audit Entry.
   */
  organization: IXGitHubOrganization | null;

  /**
   * The name of the Organization.
   */
  organizationName: string | null;

  /**
   * The HTTP path for the organization
   */
  organizationResourcePath: any | null;

  /**
   * The HTTP URL for the organization
   */
  organizationUrl: any | null;

  /**
   * The user affected by the action
   */
  user: IXGitHubUser | null;

  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin: string | null;

  /**
   * The HTTP path for the user.
   */
  userResourcePath: any | null;

  /**
   * The HTTP URL for the user.
   */
  userUrl: any | null;
}

/**
 * Audit log entry for a repository_visibility_change.enable event.
 */
export interface IXGitHubRepositoryVisibilityChangeEnableAuditEntry {
  __typename: '_xGitHubRepositoryVisibilityChangeEnableAuditEntry';

  /**
   * The action name
   */
  action: string;

  /**
   * The user who initiated the action
   */
  actor: _xGitHubAuditEntryActor | null;

  /**
   * The IP address of the actor
   */
  actorIp: string | null;

  /**
   * A readable representation of the actor's location
   */
  actorLocation: IXGitHubActorLocation | null;

  /**
   * The username of the user who initiated the action
   */
  actorLogin: string | null;

  /**
   * The HTTP path for the actor.
   */
  actorResourcePath: any | null;

  /**
   * The HTTP URL for the actor.
   */
  actorUrl: any | null;

  /**
   * The time the action was initiated
   */
  createdAt: any;

  /**
   * The HTTP path for this enterprise.
   */
  enterpriseResourcePath: any | null;

  /**
   * The slug of the enterprise.
   */
  enterpriseSlug: string | null;

  /**
   * The HTTP URL for this enterprise.
   */
  enterpriseUrl: any | null;
  id: string;

  /**
   * The corresponding operation type for the action
   */
  operationType: XGitHubOperationType | null;

  /**
   * The Organization associated with the Audit Entry.
   */
  organization: IXGitHubOrganization | null;

  /**
   * The name of the Organization.
   */
  organizationName: string | null;

  /**
   * The HTTP path for the organization
   */
  organizationResourcePath: any | null;

  /**
   * The HTTP URL for the organization
   */
  organizationUrl: any | null;

  /**
   * The user affected by the action
   */
  user: IXGitHubUser | null;

  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin: string | null;

  /**
   * The HTTP path for the user.
   */
  userResourcePath: any | null;

  /**
   * The HTTP URL for the user.
   */
  userUrl: any | null;
}

/**
 * A Dependabot alert for a repository with a dependency affected by a security vulnerability.
 */
export interface IXGitHubRepositoryVulnerabilityAlert {
  __typename: '_xGitHubRepositoryVulnerabilityAlert';

  /**
   * When was the alert created?
   */
  createdAt: any;

  /**
   * The reason the alert was dismissed
   */
  dismissReason: string | null;

  /**
   * When was the alert dismissed?
   */
  dismissedAt: any | null;

  /**
   * The user who dismissed the alert
   */
  dismisser: IXGitHubUser | null;
  id: string;

  /**
   * The associated repository
   */
  repository: IXGitHubRepository;

  /**
   * The associated security advisory
   */
  securityAdvisory: IXGitHubSecurityAdvisory | null;

  /**
   * The associated security vulnerability
   */
  securityVulnerability: IXGitHubSecurityVulnerability | null;

  /**
   * The vulnerable manifest filename
   */
  vulnerableManifestFilename: string;

  /**
   * The vulnerable manifest path
   */
  vulnerableManifestPath: string;

  /**
   * The vulnerable requirements
   */
  vulnerableRequirements: string | null;
}

/**
 * The connection type for RepositoryVulnerabilityAlert.
 */
export interface IXGitHubRepositoryVulnerabilityAlertConnection {
  __typename: '_xGitHubRepositoryVulnerabilityAlertConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubRepositoryVulnerabilityAlertEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitHubRepositoryVulnerabilityAlert | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface IXGitHubRepositoryVulnerabilityAlertEdge {
  __typename: '_xGitHubRepositoryVulnerabilityAlertEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitHubRepositoryVulnerabilityAlert | null;
}

/**
 * Autogenerated input type of RequestReviews
 */
export interface IXGitHubRequestReviewsInput {
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;

  /**
   * The Node ID of the pull request to modify.
   */
  pullRequestId: string;

  /**
   * The Node IDs of the team to request.
   */
  teamIds?: Array<string> | null;

  /**
   * Add users to the set rather than replace.
   */
  union?: boolean | null;

  /**
   * The Node IDs of the user to request.
   */
  userIds?: Array<string> | null;
}

/**
 * Autogenerated return type of RequestReviews
 */
export interface IXGitHubRequestReviewsPayload {
  __typename: '_xGitHubRequestReviewsPayload';

  /**
   * Identifies the actor who performed the event.
   */
  actor: _xGitHubActor | null;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The pull request that is getting requests.
   */
  pullRequest: IXGitHubPullRequest | null;

  /**
   * The edge from the pull request to the requested reviewers.
   */
  requestedReviewersEdge: IXGitHubUserEdge | null;
}

/**
 * The possible states that can be requested when creating a check run.
 */
export const enum XGitHubRequestableCheckStatusState {
  /**
   * The check suite or run has been completed.
   */
  COMPLETED = 'COMPLETED',

  /**
   * The check suite or run is in progress.
   */
  IN_PROGRESS = 'IN_PROGRESS',

  /**
   * The check suite or run is in pending state.
   */
  PENDING = 'PENDING',

  /**
   * The check suite or run has been queued.
   */
  QUEUED = 'QUEUED',

  /**
   * The check suite or run is in waiting state.
   */
  WAITING = 'WAITING'
}

/**
 * Types that can be requested reviewers.
 */
export type _xGitHubRequestedReviewer =
  | IXGitHubMannequin
  | IXGitHubTeam
  | IXGitHubUser;

/**
 * Represents a type that can be required by a pull request for merging.
 */
export type _xGitHubRequirableByPullRequest =
  | IXGitHubCheckRun
  | IXGitHubStatusContext;

/**
 * Represents a type that can be required by a pull request for merging.
 */
export interface IXGitHubRequirableByPullRequest {
  __typename: '_xGitHubRequirableByPullRequest';

  /**
   * Whether this is required to pass before merging for a specific pull request.
   */
  isRequired: boolean;
}

export interface IIsRequiredOnXGitHubRequirableByPullRequestArguments {
  /**
   * The id of the pull request this is required for
   */
  pullRequestId?: string | null;

  /**
   * The number of the pull request this is required for
   */
  pullRequestNumber?: number | null;
}

/**
 * Autogenerated input type of RerequestCheckSuite
 */
export interface IXGitHubRerequestCheckSuiteInput {
  /**
   * The Node ID of the check suite.
   */
  checkSuiteId: string;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;

  /**
   * The Node ID of the repository.
   */
  repositoryId: string;
}

/**
 * Autogenerated return type of RerequestCheckSuite
 */
export interface IXGitHubRerequestCheckSuitePayload {
  __typename: '_xGitHubRerequestCheckSuitePayload';

  /**
   * The requested check suite.
   */
  checkSuite: IXGitHubCheckSuite | null;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;
}

/**
 * Autogenerated input type of ResolveReviewThread
 */
export interface IXGitHubResolveReviewThreadInput {
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;

  /**
   * The ID of the thread to resolve
   */
  threadId: string;
}

/**
 * Autogenerated return type of ResolveReviewThread
 */
export interface IXGitHubResolveReviewThreadPayload {
  __typename: '_xGitHubResolveReviewThreadPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The thread to resolve.
   */
  thread: IXGitHubPullRequestReviewThread | null;
}

/**
 * Represents a private contribution a user made on GitHub.
 */
export interface IXGitHubRestrictedContribution {
  __typename: '_xGitHubRestrictedContribution';

  /**
   * Whether this contribution is associated with a record you do not have access to. For
   * example, your own 'first issue' contribution may have been made on a repository you can no
   * longer access.
   */
  isRestricted: boolean;

  /**
   * When this contribution was made.
   */
  occurredAt: any;

  /**
   * The HTTP path for this contribution.
   */
  resourcePath: any;

  /**
   * The HTTP URL for this contribution.
   */
  url: any;

  /**
   * The user who made this contribution.
   */
  user: IXGitHubUser;
}

/**
 * A team or user who has the ability to dismiss a review on a protected branch.
 */
export interface IXGitHubReviewDismissalAllowance {
  __typename: '_xGitHubReviewDismissalAllowance';

  /**
   * The actor that can dismiss.
   */
  actor: _xGitHubReviewDismissalAllowanceActor | null;

  /**
   * Identifies the branch protection rule associated with the allowed user or team.
   */
  branchProtectionRule: IXGitHubBranchProtectionRule | null;
  id: string;
}

/**
 * Types that can be an actor.
 */
export type _xGitHubReviewDismissalAllowanceActor = IXGitHubTeam | IXGitHubUser;

/**
 * The connection type for ReviewDismissalAllowance.
 */
export interface IXGitHubReviewDismissalAllowanceConnection {
  __typename: '_xGitHubReviewDismissalAllowanceConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubReviewDismissalAllowanceEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitHubReviewDismissalAllowance | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface IXGitHubReviewDismissalAllowanceEdge {
  __typename: '_xGitHubReviewDismissalAllowanceEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitHubReviewDismissalAllowance | null;
}

/**
 * Represents a 'review_dismissed' event on a given issue or pull request.
 */
export interface IXGitHubReviewDismissedEvent {
  __typename: '_xGitHubReviewDismissedEvent';

  /**
   * Identifies the actor who performed the event.
   */
  actor: _xGitHubActor | null;

  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: any;

  /**
   * Identifies the primary key from the database.
   */
  databaseId: number | null;

  /**
   * Identifies the optional message associated with the 'review_dismissed' event.
   */
  dismissalMessage: string | null;

  /**
   * Identifies the optional message associated with the event, rendered to HTML.
   */
  dismissalMessageHTML: string | null;
  id: string;

  /**
   * Identifies the previous state of the review with the 'review_dismissed' event.
   */
  previousReviewState: XGitHubPullRequestReviewState;

  /**
   * PullRequest referenced by event.
   */
  pullRequest: IXGitHubPullRequest;

  /**
   * Identifies the commit which caused the review to become stale.
   */
  pullRequestCommit: IXGitHubPullRequestCommit | null;

  /**
   * The HTTP path for this review dismissed event.
   */
  resourcePath: any;

  /**
   * Identifies the review associated with the 'review_dismissed' event.
   */
  review: IXGitHubPullRequestReview | null;

  /**
   * The HTTP URL for this review dismissed event.
   */
  url: any;
}

/**
 * A request for a user to review a pull request.
 */
export interface IXGitHubReviewRequest {
  __typename: '_xGitHubReviewRequest';

  /**
   * Whether this request was created for a code owner
   */
  asCodeOwner: boolean;

  /**
   * Identifies the primary key from the database.
   */
  databaseId: number | null;
  id: string;

  /**
   * Identifies the pull request associated with this review request.
   */
  pullRequest: IXGitHubPullRequest;

  /**
   * The reviewer that is requested.
   */
  requestedReviewer: _xGitHubRequestedReviewer | null;
}

/**
 * The connection type for ReviewRequest.
 */
export interface IXGitHubReviewRequestConnection {
  __typename: '_xGitHubReviewRequestConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubReviewRequestEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitHubReviewRequest | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface IXGitHubReviewRequestEdge {
  __typename: '_xGitHubReviewRequestEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitHubReviewRequest | null;
}

/**
 * Represents an 'review_request_removed' event on a given pull request.
 */
export interface IXGitHubReviewRequestRemovedEvent {
  __typename: '_xGitHubReviewRequestRemovedEvent';

  /**
   * Identifies the actor who performed the event.
   */
  actor: _xGitHubActor | null;

  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: any;
  id: string;

  /**
   * PullRequest referenced by event.
   */
  pullRequest: IXGitHubPullRequest;

  /**
   * Identifies the reviewer whose review request was removed.
   */
  requestedReviewer: _xGitHubRequestedReviewer | null;
}

/**
 * Represents an 'review_requested' event on a given pull request.
 */
export interface IXGitHubReviewRequestedEvent {
  __typename: '_xGitHubReviewRequestedEvent';

  /**
   * Identifies the actor who performed the event.
   */
  actor: _xGitHubActor | null;

  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: any;
  id: string;

  /**
   * PullRequest referenced by event.
   */
  pullRequest: IXGitHubPullRequest;

  /**
   * Identifies the reviewer whose review was requested.
   */
  requestedReviewer: _xGitHubRequestedReviewer | null;
}

/**
 * A hovercard context with a message describing the current code review state of the pull
 * request.
 */
export interface IXGitHubReviewStatusHovercardContext {
  __typename: '_xGitHubReviewStatusHovercardContext';

  /**
   * A string describing this context
   */
  message: string;

  /**
   * An octicon to accompany this context
   */
  octicon: string;

  /**
   * The current status of the pull request with respect to code review.
   */
  reviewDecision: XGitHubPullRequestReviewDecision | null;
}

/**
 * The possible digest algorithms used to sign SAML requests for an identity provider.
 */
export const enum XGitHubSamlDigestAlgorithm {
  /**
   * SHA1
   */
  SHA1 = 'SHA1',

  /**
   * SHA256
   */
  SHA256 = 'SHA256',

  /**
   * SHA384
   */
  SHA384 = 'SHA384',

  /**
   * SHA512
   */
  SHA512 = 'SHA512'
}

/**
 * The possible signature algorithms used to sign SAML requests for a Identity Provider.
 */
export const enum XGitHubSamlSignatureAlgorithm {
  /**
   * RSA-SHA1
   */
  RSA_SHA1 = 'RSA_SHA1',

  /**
   * RSA-SHA256
   */
  RSA_SHA256 = 'RSA_SHA256',

  /**
   * RSA-SHA384
   */
  RSA_SHA384 = 'RSA_SHA384',

  /**
   * RSA-SHA512
   */
  RSA_SHA512 = 'RSA_SHA512'
}

/**
 * A Saved Reply is text a user can use to reply quickly.
 */
export interface IXGitHubSavedReply {
  __typename: '_xGitHubSavedReply';

  /**
   * The body of the saved reply.
   */
  body: string;

  /**
   * The saved reply body rendered to HTML.
   */
  bodyHTML: any;

  /**
   * Identifies the primary key from the database.
   */
  databaseId: number | null;
  id: string;

  /**
   * The title of the saved reply.
   */
  title: string;

  /**
   * The user that saved this reply.
   */
  user: _xGitHubActor | null;
}

/**
 * The connection type for SavedReply.
 */
export interface IXGitHubSavedReplyConnection {
  __typename: '_xGitHubSavedReplyConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubSavedReplyEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitHubSavedReply | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface IXGitHubSavedReplyEdge {
  __typename: '_xGitHubSavedReplyEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitHubSavedReply | null;
}

/**
 * Ordering options for saved reply connections.
 */
export interface IXGitHubSavedReplyOrder {
  /**
   * The ordering direction.
   */
  direction: XGitHubOrderDirection;

  /**
   * The field to order saved replies by.
   */
  field: XGitHubSavedReplyOrderField;
}

/**
 * Properties by which saved reply connections can be ordered.
 */
export const enum XGitHubSavedReplyOrderField {
  /**
   * Order saved reply by when they were updated.
   */
  UPDATED_AT = 'UPDATED_AT'
}

/**
 * The results of a search.
 */
export type _xGitHubSearchResultItem =
  | IXGitHubApp
  | IXGitHubDiscussion
  | IXGitHubIssue
  | IXGitHubMarketplaceListing
  | IXGitHubOrganization
  | IXGitHubPullRequest
  | IXGitHubRepository
  | IXGitHubUser;

/**
 * A list of results that matched against a search query.
 */
export interface IXGitHubSearchResultItemConnection {
  __typename: '_xGitHubSearchResultItemConnection';

  /**
   * The number of pieces of code that matched the search query.
   */
  codeCount: number;

  /**
   * The number of discussions that matched the search query.
   */
  discussionCount: number;

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubSearchResultItemEdge | null> | null;

  /**
   * The number of issues that matched the search query.
   */
  issueCount: number;

  /**
   * A list of nodes.
   */
  nodes: Array<_xGitHubSearchResultItem | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * The number of repositories that matched the search query.
   */
  repositoryCount: number;

  /**
   * The number of users that matched the search query.
   */
  userCount: number;

  /**
   * The number of wiki pages that matched the search query.
   */
  wikiCount: number;
}

/**
 * An edge in a connection.
 */
export interface IXGitHubSearchResultItemEdge {
  __typename: '_xGitHubSearchResultItemEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: _xGitHubSearchResultItem | null;

  /**
   * Text matches on the result found.
   */
  textMatches: Array<IXGitHubTextMatch | null> | null;
}

/**
 * Represents the individual results of a search.
 */
export const enum XGitHubSearchType {
  /**
   * Returns matching discussions in repositories.
   */
  DISCUSSION = 'DISCUSSION',

  /**
   * Returns results matching issues in repositories.
   */
  ISSUE = 'ISSUE',

  /**
   * Returns results matching repositories.
   */
  REPOSITORY = 'REPOSITORY',

  /**
   * Returns results matching users and organizations on GitHub.
   */
  USER = 'USER'
}

/**
 * A GitHub Security Advisory
 */
export interface IXGitHubSecurityAdvisory {
  __typename: '_xGitHubSecurityAdvisory';

  /**
   * The CVSS associated with this advisory
   */
  cvss: IXGitHubCVSS;

  /**
   * CWEs associated with this Advisory
   */
  cwes: IXGitHubCWEConnection;

  /**
   * Identifies the primary key from the database.
   */
  databaseId: number | null;

  /**
   * This is a long plaintext description of the advisory
   */
  description: string;

  /**
   * The GitHub Security Advisory ID
   */
  ghsaId: string;
  id: string;

  /**
   * A list of identifiers for this advisory
   */
  identifiers: Array<IXGitHubSecurityAdvisoryIdentifier>;

  /**
   * The permalink for the advisory's dependabot alerts page
   */
  notificationsPermalink: any | null;

  /**
   * The organization that originated the advisory
   */
  origin: string;

  /**
   * The permalink for the advisory
   */
  permalink: any | null;

  /**
   * When the advisory was published
   */
  publishedAt: any;

  /**
   * A list of references for this advisory
   */
  references: Array<IXGitHubSecurityAdvisoryReference>;

  /**
   * The severity of the advisory
   */
  severity: XGitHubSecurityAdvisorySeverity;

  /**
   * A short plaintext summary of the advisory
   */
  summary: string;

  /**
   * When the advisory was last updated
   */
  updatedAt: any;

  /**
   * Vulnerabilities associated with this Advisory
   */
  vulnerabilities: IXGitHubSecurityVulnerabilityConnection;

  /**
   * When the advisory was withdrawn, if it has been withdrawn
   */
  withdrawnAt: any | null;
}

export interface ICwesOnXGitHubSecurityAdvisoryArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IVulnerabilitiesOnXGitHubSecurityAdvisoryArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * An ecosystem to filter vulnerabilities by.
   */
  ecosystem?: XGitHubSecurityAdvisoryEcosystem | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Ordering options for the returned topics.
   * @default {"direction":"DESC","field":"UPDATED_AT"}
   */
  orderBy?: IXGitHubSecurityVulnerabilityOrder | null;

  /**
   * A package name to filter vulnerabilities by.
   */
  package?: string | null;

  /**
   * A list of severities to filter vulnerabilities by.
   */
  severities?: Array<XGitHubSecurityAdvisorySeverity> | null;
}

/**
 * The connection type for SecurityAdvisory.
 */
export interface IXGitHubSecurityAdvisoryConnection {
  __typename: '_xGitHubSecurityAdvisoryConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubSecurityAdvisoryEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitHubSecurityAdvisory | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * The possible ecosystems of a security vulnerability's package.
 */
export const enum XGitHubSecurityAdvisoryEcosystem {
  /**
   * PHP packages hosted at packagist.org
   */
  COMPOSER = 'COMPOSER',

  /**
   * Go modules
   */
  GO = 'GO',

  /**
   * Java artifacts hosted at the Maven central repository
   */
  MAVEN = 'MAVEN',

  /**
   * JavaScript packages hosted at npmjs.com
   */
  NPM = 'NPM',

  /**
   * .NET packages hosted at the NuGet Gallery
   */
  NUGET = 'NUGET',

  /**
   * Python packages hosted at PyPI.org
   */
  PIP = 'PIP',

  /**
   * Ruby gems hosted at RubyGems.org
   */
  RUBYGEMS = 'RUBYGEMS'
}

/**
 * An edge in a connection.
 */
export interface IXGitHubSecurityAdvisoryEdge {
  __typename: '_xGitHubSecurityAdvisoryEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitHubSecurityAdvisory | null;
}

/**
 * A GitHub Security Advisory Identifier
 */
export interface IXGitHubSecurityAdvisoryIdentifier {
  __typename: '_xGitHubSecurityAdvisoryIdentifier';

  /**
   * The identifier type, e.g. GHSA, CVE
   */
  type: string;

  /**
   * The identifier
   */
  value: string;
}

/**
 * An advisory identifier to filter results on.
 */
export interface IXGitHubSecurityAdvisoryIdentifierFilter {
  /**
   * The identifier type.
   */
  type: XGitHubSecurityAdvisoryIdentifierType;

  /**
   * The identifier string. Supports exact or partial matching.
   */
  value: string;
}

/**
 * Identifier formats available for advisories.
 */
export const enum XGitHubSecurityAdvisoryIdentifierType {
  /**
   * Common Vulnerabilities and Exposures Identifier.
   */
  CVE = 'CVE',

  /**
   * GitHub Security Advisory ID.
   */
  GHSA = 'GHSA'
}

/**
 * Ordering options for security advisory connections
 */
export interface IXGitHubSecurityAdvisoryOrder {
  /**
   * The ordering direction.
   */
  direction: XGitHubOrderDirection;

  /**
   * The field to order security advisories by.
   */
  field: XGitHubSecurityAdvisoryOrderField;
}

/**
 * Properties by which security advisory connections can be ordered.
 */
export const enum XGitHubSecurityAdvisoryOrderField {
  /**
   * Order advisories by publication time
   */
  PUBLISHED_AT = 'PUBLISHED_AT',

  /**
   * Order advisories by update time
   */
  UPDATED_AT = 'UPDATED_AT'
}

/**
 * An individual package
 */
export interface IXGitHubSecurityAdvisoryPackage {
  __typename: '_xGitHubSecurityAdvisoryPackage';

  /**
   * The ecosystem the package belongs to, e.g. RUBYGEMS, NPM
   */
  ecosystem: XGitHubSecurityAdvisoryEcosystem;

  /**
   * The package name
   */
  name: string;
}

/**
 * An individual package version
 */
export interface IXGitHubSecurityAdvisoryPackageVersion {
  __typename: '_xGitHubSecurityAdvisoryPackageVersion';

  /**
   * The package name or version
   */
  identifier: string;
}

/**
 * A GitHub Security Advisory Reference
 */
export interface IXGitHubSecurityAdvisoryReference {
  __typename: '_xGitHubSecurityAdvisoryReference';

  /**
   * A publicly accessible reference
   */
  url: any;
}

/**
 * Severity of the vulnerability.
 */
export const enum XGitHubSecurityAdvisorySeverity {
  /**
   * Critical.
   */
  CRITICAL = 'CRITICAL',

  /**
   * High.
   */
  HIGH = 'HIGH',

  /**
   * Low.
   */
  LOW = 'LOW',

  /**
   * Moderate.
   */
  MODERATE = 'MODERATE'
}

/**
 * An individual vulnerability within an Advisory
 */
export interface IXGitHubSecurityVulnerability {
  __typename: '_xGitHubSecurityVulnerability';

  /**
   * The Advisory associated with this Vulnerability
   */
  advisory: IXGitHubSecurityAdvisory;

  /**
   * The first version containing a fix for the vulnerability
   */
  firstPatchedVersion: IXGitHubSecurityAdvisoryPackageVersion | null;

  /**
   * A description of the vulnerable package
   */
  package: IXGitHubSecurityAdvisoryPackage;

  /**
   * The severity of the vulnerability within this package
   */
  severity: XGitHubSecurityAdvisorySeverity;

  /**
   * When the vulnerability was last updated
   */
  updatedAt: any;

  /**
   * A string that describes the vulnerable package versions.
   * This string follows a basic syntax with a few forms.
   * + `= 0.2.0` denotes a single vulnerable version.
   * + `<= 1.0.8` denotes a version range up to and including the specified version
   * + `< 0.1.11` denotes a version range up to, but excluding, the specified version
   * + `>= 4.3.0, < 4.3.5` denotes a version range with a known minimum and maximum version.
   * + `>= 0.0.1` denotes a version range with a known minimum, but no known maximum
   */
  vulnerableVersionRange: string;
}

/**
 * The connection type for SecurityVulnerability.
 */
export interface IXGitHubSecurityVulnerabilityConnection {
  __typename: '_xGitHubSecurityVulnerabilityConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubSecurityVulnerabilityEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitHubSecurityVulnerability | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface IXGitHubSecurityVulnerabilityEdge {
  __typename: '_xGitHubSecurityVulnerabilityEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitHubSecurityVulnerability | null;
}

/**
 * Ordering options for security vulnerability connections
 */
export interface IXGitHubSecurityVulnerabilityOrder {
  /**
   * The ordering direction.
   */
  direction: XGitHubOrderDirection;

  /**
   * The field to order security vulnerabilities by.
   */
  field: XGitHubSecurityVulnerabilityOrderField;
}

/**
 * Properties by which security vulnerability connections can be ordered.
 */
export const enum XGitHubSecurityVulnerabilityOrderField {
  /**
   * Order vulnerability by update time
   */
  UPDATED_AT = 'UPDATED_AT'
}

/**
 * Autogenerated input type of SetEnterpriseIdentityProvider
 */
export interface IXGitHubSetEnterpriseIdentityProviderInput {
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;

  /**
   * The digest algorithm used to sign SAML requests for the identity provider.
   */
  digestMethod: XGitHubSamlDigestAlgorithm;

  /**
   * The ID of the enterprise on which to set an identity provider.
   */
  enterpriseId: string;

  /**
   * The x509 certificate used by the identity provider to sign assertions and responses.
   */
  idpCertificate: string;

  /**
   * The Issuer Entity ID for the SAML identity provider
   */
  issuer?: string | null;

  /**
   * The signature algorithm used to sign SAML requests for the identity provider.
   */
  signatureMethod: XGitHubSamlSignatureAlgorithm;

  /**
   * The URL endpoint for the identity provider's SAML SSO.
   */
  ssoUrl: any;
}

/**
 * Autogenerated return type of SetEnterpriseIdentityProvider
 */
export interface IXGitHubSetEnterpriseIdentityProviderPayload {
  __typename: '_xGitHubSetEnterpriseIdentityProviderPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The identity provider for the enterprise.
   */
  identityProvider: IXGitHubEnterpriseIdentityProvider | null;
}

/**
 * Autogenerated input type of SetOrganizationInteractionLimit
 */
export interface IXGitHubSetOrganizationInteractionLimitInput {
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;

  /**
   * When this limit should expire.
   */
  expiry?: XGitHubRepositoryInteractionLimitExpiry | null;

  /**
   * The limit to set.
   */
  limit: XGitHubRepositoryInteractionLimit;

  /**
   * The ID of the organization to set a limit for.
   */
  organizationId: string;
}

/**
 * Autogenerated return type of SetOrganizationInteractionLimit
 */
export interface IXGitHubSetOrganizationInteractionLimitPayload {
  __typename: '_xGitHubSetOrganizationInteractionLimitPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The organization that the interaction limit was set for.
   */
  organization: IXGitHubOrganization | null;
}

/**
 * Autogenerated input type of SetRepositoryInteractionLimit
 */
export interface IXGitHubSetRepositoryInteractionLimitInput {
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;

  /**
   * When this limit should expire.
   */
  expiry?: XGitHubRepositoryInteractionLimitExpiry | null;

  /**
   * The limit to set.
   */
  limit: XGitHubRepositoryInteractionLimit;

  /**
   * The ID of the repository to set a limit for.
   */
  repositoryId: string;
}

/**
 * Autogenerated return type of SetRepositoryInteractionLimit
 */
export interface IXGitHubSetRepositoryInteractionLimitPayload {
  __typename: '_xGitHubSetRepositoryInteractionLimitPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The repository that the interaction limit was set for.
   */
  repository: IXGitHubRepository | null;
}

/**
 * Autogenerated input type of SetUserInteractionLimit
 */
export interface IXGitHubSetUserInteractionLimitInput {
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;

  /**
   * When this limit should expire.
   */
  expiry?: XGitHubRepositoryInteractionLimitExpiry | null;

  /**
   * The limit to set.
   */
  limit: XGitHubRepositoryInteractionLimit;

  /**
   * The ID of the user to set a limit for.
   */
  userId: string;
}

/**
 * Autogenerated return type of SetUserInteractionLimit
 */
export interface IXGitHubSetUserInteractionLimitPayload {
  __typename: '_xGitHubSetUserInteractionLimitPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The user that the interaction limit was set for.
   */
  user: IXGitHubUser | null;
}

/**
 * Represents an S/MIME signature on a Commit or Tag.
 */
export interface IXGitHubSmimeSignature {
  __typename: '_xGitHubSmimeSignature';

  /**
   * Email used to sign this object.
   */
  email: string;

  /**
   * True if the signature is valid and verified by GitHub.
   */
  isValid: boolean;

  /**
   * Payload for GPG signing object. Raw ODB object without the signature header.
   */
  payload: string;

  /**
   * ASCII-armored signature header from object.
   */
  signature: string;

  /**
   * GitHub user corresponding to the email signing this commit.
   */
  signer: IXGitHubUser | null;

  /**
   * The state of this signature. `VALID` if signature is valid and verified by
   * GitHub, otherwise represents reason why signature is considered invalid.
   */
  state: XGitHubGitSignatureState;

  /**
   * True if the signature was made with GitHub's signing key.
   */
  wasSignedByGitHub: boolean;
}

/**
 * Entities that can sponsor others via GitHub Sponsors
 */
export type _xGitHubSponsor = IXGitHubOrganization | IXGitHubUser;

/**
 * The connection type for Sponsor.
 */
export interface IXGitHubSponsorConnection {
  __typename: '_xGitHubSponsorConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubSponsorEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<_xGitHubSponsor | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * Represents a user or organization who is sponsoring someone in GitHub Sponsors.
 */
export interface IXGitHubSponsorEdge {
  __typename: '_xGitHubSponsorEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: _xGitHubSponsor | null;
}

/**
 * Ordering options for connections to get sponsor entities for GitHub Sponsors.
 */
export interface IXGitHubSponsorOrder {
  /**
   * The ordering direction.
   */
  direction: XGitHubOrderDirection;

  /**
   * The field to order sponsor entities by.
   */
  field: XGitHubSponsorOrderField;
}

/**
 * Properties by which sponsor connections can be ordered.
 */
export const enum XGitHubSponsorOrderField {
  /**
   * Order sponsorable entities by login (username).
   */
  LOGIN = 'LOGIN',

  /**
   * Order sponsors by their relevance to the viewer.
   */
  RELEVANCE = 'RELEVANCE'
}

/**
 * Entities that can be sponsored through GitHub Sponsors
 */
export type _xGitHubSponsorable = IXGitHubOrganization | IXGitHubUser;

/**
 * Entities that can be sponsored through GitHub Sponsors
 */
export interface IXGitHubSponsorable {
  __typename: '_xGitHubSponsorable';

  /**
   * The estimated next GitHub Sponsors payout for this user/organization in cents (USD).
   */
  estimatedNextSponsorsPayoutInCents: number;

  /**
   * True if this user/organization has a GitHub Sponsors listing.
   */
  hasSponsorsListing: boolean;

  /**
   * Check if the given account is sponsoring this user/organization.
   */
  isSponsoredBy: boolean;

  /**
   * True if the viewer is sponsored by this user/organization.
   */
  isSponsoringViewer: boolean;

  /**
   * The estimated monthly GitHub Sponsors income for this user/organization in cents (USD).
   */
  monthlyEstimatedSponsorsIncomeInCents: number;

  /**
   * List of users and organizations this entity is sponsoring.
   */
  sponsoring: IXGitHubSponsorConnection;

  /**
   * List of sponsors for this user or organization.
   */
  sponsors: IXGitHubSponsorConnection;

  /**
   * Events involving this sponsorable, such as new sponsorships.
   */
  sponsorsActivities: IXGitHubSponsorsActivityConnection;

  /**
   * The GitHub Sponsors listing for this user or organization.
   */
  sponsorsListing: IXGitHubSponsorsListing | null;

  /**
   * The viewer's sponsorship of this entity.
   */
  sponsorshipForViewerAsSponsor: IXGitHubSponsorship | null;

  /**
   * List of sponsorship updates sent from this sponsorable to sponsors.
   */
  sponsorshipNewsletters: IXGitHubSponsorshipNewsletterConnection;

  /**
   * This object's sponsorships as the maintainer.
   */
  sponsorshipsAsMaintainer: IXGitHubSponsorshipConnection;

  /**
   * This object's sponsorships as the sponsor.
   */
  sponsorshipsAsSponsor: IXGitHubSponsorshipConnection;

  /**
   * Whether or not the viewer is able to sponsor this user/organization.
   */
  viewerCanSponsor: boolean;

  /**
   * True if the viewer is sponsoring this user/organization.
   */
  viewerIsSponsoring: boolean;
}

export interface IIsSponsoredByOnXGitHubSponsorableArguments {
  /**
   * The target account's login.
   */
  accountLogin: string;
}

export interface ISponsoringOnXGitHubSponsorableArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Ordering options for the users and organizations returned from the connection.
   * @default {"direction":"DESC","field":"RELEVANCE"}
   */
  orderBy?: IXGitHubSponsorOrder | null;
}

export interface ISponsorsOnXGitHubSponsorableArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Ordering options for sponsors returned from the connection.
   * @default {"direction":"DESC","field":"RELEVANCE"}
   */
  orderBy?: IXGitHubSponsorOrder | null;

  /**
   * If given, will filter for sponsors at the given tier. Will only return
   * sponsors whose tier the viewer is permitted to see.
   */
  tierId?: string | null;
}

export interface ISponsorsActivitiesOnXGitHubSponsorableArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Ordering options for activity returned from the connection.
   * @default {"direction":"DESC","field":"TIMESTAMP"}
   */
  orderBy?: IXGitHubSponsorsActivityOrder | null;

  /**
   * Filter activities returned to only those that occurred in a given time range.
   * @default "MONTH"
   */
  period?: XGitHubSponsorsActivityPeriod | null;
}

export interface ISponsorshipNewslettersOnXGitHubSponsorableArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Ordering options for sponsorship updates returned from the connection.
   * @default {"direction":"DESC","field":"CREATED_AT"}
   */
  orderBy?: IXGitHubSponsorshipNewsletterOrder | null;
}

export interface ISponsorshipsAsMaintainerOnXGitHubSponsorableArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Whether or not to include private sponsorships in the result set
   * @default false
   */
  includePrivate?: boolean | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Ordering options for sponsorships returned from this connection. If left
   * blank, the sponsorships will be ordered based on relevancy to the viewer.
   */
  orderBy?: IXGitHubSponsorshipOrder | null;
}

export interface ISponsorshipsAsSponsorOnXGitHubSponsorableArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Ordering options for sponsorships returned from this connection. If left
   * blank, the sponsorships will be ordered based on relevancy to the viewer.
   */
  orderBy?: IXGitHubSponsorshipOrder | null;
}

/**
 * Entities that can be sponsored via GitHub Sponsors
 */
export type _xGitHubSponsorableItem = IXGitHubOrganization | IXGitHubUser;

/**
 * The connection type for SponsorableItem.
 */
export interface IXGitHubSponsorableItemConnection {
  __typename: '_xGitHubSponsorableItemConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubSponsorableItemEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<_xGitHubSponsorableItem | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface IXGitHubSponsorableItemEdge {
  __typename: '_xGitHubSponsorableItemEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: _xGitHubSponsorableItem | null;
}

/**
 * Ordering options for connections to get sponsorable entities for GitHub Sponsors.
 */
export interface IXGitHubSponsorableOrder {
  /**
   * The ordering direction.
   */
  direction: XGitHubOrderDirection;

  /**
   * The field to order sponsorable entities by.
   */
  field: XGitHubSponsorableOrderField;
}

/**
 * Properties by which sponsorable connections can be ordered.
 */
export const enum XGitHubSponsorableOrderField {
  /**
   * Order sponsorable entities by login (username).
   */
  LOGIN = 'LOGIN'
}

/**
 * An event related to sponsorship activity.
 */
export interface IXGitHubSponsorsActivity {
  __typename: '_xGitHubSponsorsActivity';

  /**
   * What action this activity indicates took place.
   */
  action: XGitHubSponsorsActivityAction;
  id: string;

  /**
   * The tier that the sponsorship used to use, for tier change events.
   */
  previousSponsorsTier: IXGitHubSponsorsTier | null;

  /**
   * The user or organization who triggered this activity and was/is sponsoring the sponsorable.
   */
  sponsor: _xGitHubSponsor | null;

  /**
   * The user or organization that is being sponsored, the maintainer.
   */
  sponsorable: _xGitHubSponsorable;

  /**
   * The associated sponsorship tier.
   */
  sponsorsTier: IXGitHubSponsorsTier | null;

  /**
   * The timestamp of this event.
   */
  timestamp: any | null;
}

/**
 * The possible actions that GitHub Sponsors activities can represent.
 */
export const enum XGitHubSponsorsActivityAction {
  /**
   * The activity was cancelling a sponsorship.
   */
  CANCELLED_SPONSORSHIP = 'CANCELLED_SPONSORSHIP',

  /**
   * The activity was starting a sponsorship.
   */
  NEW_SPONSORSHIP = 'NEW_SPONSORSHIP',

  /**
   * The activity was scheduling a downgrade or cancellation.
   */
  PENDING_CHANGE = 'PENDING_CHANGE',

  /**
   * The activity was funds being refunded to the sponsor or GitHub.
   */
  REFUND = 'REFUND',

  /**
   * The activity was disabling matching for a previously matched sponsorship.
   */
  SPONSOR_MATCH_DISABLED = 'SPONSOR_MATCH_DISABLED',

  /**
   * The activity was changing the sponsorship tier, either directly by the sponsor or by a scheduled/pending change.
   */
  TIER_CHANGE = 'TIER_CHANGE'
}

/**
 * The connection type for SponsorsActivity.
 */
export interface IXGitHubSponsorsActivityConnection {
  __typename: '_xGitHubSponsorsActivityConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubSponsorsActivityEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitHubSponsorsActivity | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface IXGitHubSponsorsActivityEdge {
  __typename: '_xGitHubSponsorsActivityEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitHubSponsorsActivity | null;
}

/**
 * Ordering options for GitHub Sponsors activity connections.
 */
export interface IXGitHubSponsorsActivityOrder {
  /**
   * The ordering direction.
   */
  direction: XGitHubOrderDirection;

  /**
   * The field to order activity by.
   */
  field: XGitHubSponsorsActivityOrderField;
}

/**
 * Properties by which GitHub Sponsors activity connections can be ordered.
 */
export const enum XGitHubSponsorsActivityOrderField {
  /**
   * Order activities by when they happened.
   */
  TIMESTAMP = 'TIMESTAMP'
}

/**
 * The possible time periods for which Sponsors activities can be requested.
 */
export const enum XGitHubSponsorsActivityPeriod {
  /**
   * Don't restrict the activity to any date range, include all activity.
   */
  ALL = 'ALL',

  /**
   * The previous calendar day.
   */
  DAY = 'DAY',

  /**
   * The previous thirty days.
   */
  MONTH = 'MONTH',

  /**
   * The previous seven days.
   */
  WEEK = 'WEEK'
}

/**
 * A goal associated with a GitHub Sponsors listing, representing a target the sponsored maintainer would like to attain.
 */
export interface IXGitHubSponsorsGoal {
  __typename: '_xGitHubSponsorsGoal';

  /**
   * A description of the goal from the maintainer.
   */
  description: string | null;

  /**
   * What the objective of this goal is.
   */
  kind: XGitHubSponsorsGoalKind;

  /**
   * The percentage representing how complete this goal is, between 0-100.
   */
  percentComplete: number;

  /**
   * What the goal amount is. Represents an amount in USD for monthly sponsorship
   * amount goals. Represents a count of unique sponsors for total sponsors count goals.
   */
  targetValue: number;

  /**
   * A brief summary of the kind and target value of this goal.
   */
  title: string;
}

/**
 * The different kinds of goals a GitHub Sponsors member can have.
 */
export const enum XGitHubSponsorsGoalKind {
  /**
   * The goal is about getting a certain amount in USD from sponsorships each month.
   */
  MONTHLY_SPONSORSHIP_AMOUNT = 'MONTHLY_SPONSORSHIP_AMOUNT',

  /**
   * The goal is about reaching a certain number of sponsors.
   */
  TOTAL_SPONSORS_COUNT = 'TOTAL_SPONSORS_COUNT'
}

/**
 * A GitHub Sponsors listing.
 */
export interface IXGitHubSponsorsListing {
  __typename: '_xGitHubSponsorsListing';

  /**
   * The current goal the maintainer is trying to reach with GitHub Sponsors, if any.
   */
  activeGoal: IXGitHubSponsorsGoal | null;

  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: any;

  /**
   * The full description of the listing.
   */
  fullDescription: string;

  /**
   * The full description of the listing rendered to HTML.
   */
  fullDescriptionHTML: any;
  id: string;

  /**
   * Whether this listing is publicly visible.
   */
  isPublic: boolean;

  /**
   * The listing's full name.
   */
  name: string;

  /**
   * A future date on which this listing is eligible to receive a payout.
   */
  nextPayoutDate: any | null;

  /**
   * The short description of the listing.
   */
  shortDescription: string;

  /**
   * The short name of the listing.
   */
  slug: string;

  /**
   * The entity this listing represents who can be sponsored on GitHub Sponsors.
   */
  sponsorable: _xGitHubSponsorable;

  /**
   * The published tiers for this GitHub Sponsors listing.
   */
  tiers: IXGitHubSponsorsTierConnection | null;
}

export interface ITiersOnXGitHubSponsorsListingArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Ordering options for Sponsors tiers returned from the connection.
   * @default {"direction":"ASC","field":"MONTHLY_PRICE_IN_CENTS"}
   */
  orderBy?: IXGitHubSponsorsTierOrder | null;
}

/**
 * A GitHub Sponsors tier associated with a GitHub Sponsors listing.
 */
export interface IXGitHubSponsorsTier {
  __typename: '_xGitHubSponsorsTier';

  /**
   * SponsorsTier information only visible to users that can administer the associated Sponsors listing.
   */
  adminInfo: IXGitHubSponsorsTierAdminInfo | null;

  /**
   * Get a different tier for this tier's maintainer that is at the same frequency
   * as this tier but with an equal or lesser cost. Returns the published tier with
   * the monthly price closest to this tier's without going over.
   */
  closestLesserValueTier: IXGitHubSponsorsTier | null;

  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: any;

  /**
   * The description of the tier.
   */
  description: string;

  /**
   * The tier description rendered to HTML
   */
  descriptionHTML: any;
  id: string;

  /**
   * Whether this tier was chosen at checkout time by the sponsor rather than
   * defined ahead of time by the maintainer who manages the Sponsors listing.
   */
  isCustomAmount: boolean;

  /**
   * Whether this tier is only for use with one-time sponsorships.
   */
  isOneTime: boolean;

  /**
   * How much this tier costs per month in cents.
   */
  monthlyPriceInCents: number;

  /**
   * How much this tier costs per month in USD.
   */
  monthlyPriceInDollars: number;

  /**
   * The name of the tier.
   */
  name: string;

  /**
   * The sponsors listing that this tier belongs to.
   */
  sponsorsListing: IXGitHubSponsorsListing;

  /**
   * Identifies the date and time when the object was last updated.
   */
  updatedAt: any;
}

/**
 * SponsorsTier information only visible to users that can administer the associated Sponsors listing.
 */
export interface IXGitHubSponsorsTierAdminInfo {
  __typename: '_xGitHubSponsorsTierAdminInfo';

  /**
   * The sponsorships associated with this tier.
   */
  sponsorships: IXGitHubSponsorshipConnection;
}

export interface ISponsorshipsOnXGitHubSponsorsTierAdminInfoArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Whether or not to include private sponsorships in the result set
   * @default false
   */
  includePrivate?: boolean | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Ordering options for sponsorships returned from this connection. If left
   * blank, the sponsorships will be ordered based on relevancy to the viewer.
   */
  orderBy?: IXGitHubSponsorshipOrder | null;
}

/**
 * The connection type for SponsorsTier.
 */
export interface IXGitHubSponsorsTierConnection {
  __typename: '_xGitHubSponsorsTierConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubSponsorsTierEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitHubSponsorsTier | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface IXGitHubSponsorsTierEdge {
  __typename: '_xGitHubSponsorsTierEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitHubSponsorsTier | null;
}

/**
 * Ordering options for Sponsors tiers connections.
 */
export interface IXGitHubSponsorsTierOrder {
  /**
   * The ordering direction.
   */
  direction: XGitHubOrderDirection;

  /**
   * The field to order tiers by.
   */
  field: XGitHubSponsorsTierOrderField;
}

/**
 * Properties by which Sponsors tiers connections can be ordered.
 */
export const enum XGitHubSponsorsTierOrderField {
  /**
   * Order tiers by creation time.
   */
  CREATED_AT = 'CREATED_AT',

  /**
   * Order tiers by their monthly price in cents
   */
  MONTHLY_PRICE_IN_CENTS = 'MONTHLY_PRICE_IN_CENTS'
}

/**
 * A sponsorship relationship between a sponsor and a maintainer
 */
export interface IXGitHubSponsorship {
  __typename: '_xGitHubSponsorship';

  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: any;
  id: string;

  /**
   * Whether this sponsorship represents a one-time payment versus a recurring sponsorship.
   */
  isOneTimePayment: boolean;

  /**
   * The entity that is being sponsored
   * @deprecated "`Sponsorship.maintainer` will be removed. Use `Sponsorship.sponsorable` instead. Removal on 2020-04-01 UTC."
   */
  maintainer: IXGitHubUser;

  /**
   * The privacy level for this sponsorship.
   */
  privacyLevel: XGitHubSponsorshipPrivacy;

  /**
   * The user that is sponsoring. Returns null if the sponsorship is private or if sponsor is not a user.
   * @deprecated "`Sponsorship.sponsor` will be removed. Use `Sponsorship.sponsorEntity` instead. Removal on 2020-10-01 UTC."
   */
  sponsor: IXGitHubUser | null;

  /**
   * The user or organization that is sponsoring, if you have permission to view them.
   */
  sponsorEntity: _xGitHubSponsor | null;

  /**
   * The entity that is being sponsored
   */
  sponsorable: _xGitHubSponsorable;

  /**
   * The associated sponsorship tier
   */
  tier: IXGitHubSponsorsTier | null;

  /**
   * Identifies the date and time when the current tier was chosen for this sponsorship.
   */
  tierSelectedAt: any | null;
}

/**
 * The connection type for Sponsorship.
 */
export interface IXGitHubSponsorshipConnection {
  __typename: '_xGitHubSponsorshipConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubSponsorshipEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitHubSponsorship | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;

  /**
   * The total amount in cents of all recurring sponsorships in the connection
   * whose amount you can view. Does not include one-time sponsorships.
   */
  totalRecurringMonthlyPriceInCents: number;

  /**
   * The total amount in USD of all recurring sponsorships in the connection whose
   * amount you can view. Does not include one-time sponsorships.
   */
  totalRecurringMonthlyPriceInDollars: number;
}

/**
 * An edge in a connection.
 */
export interface IXGitHubSponsorshipEdge {
  __typename: '_xGitHubSponsorshipEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitHubSponsorship | null;
}

/**
 * An update sent to sponsors of a user or organization on GitHub Sponsors.
 */
export interface IXGitHubSponsorshipNewsletter {
  __typename: '_xGitHubSponsorshipNewsletter';

  /**
   * The contents of the newsletter, the message the sponsorable wanted to give.
   */
  body: string;

  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: any;
  id: string;

  /**
   * Indicates if the newsletter has been made available to sponsors.
   */
  isPublished: boolean;

  /**
   * The user or organization this newsletter is from.
   */
  sponsorable: _xGitHubSponsorable;

  /**
   * The subject of the newsletter, what it's about.
   */
  subject: string;

  /**
   * Identifies the date and time when the object was last updated.
   */
  updatedAt: any;
}

/**
 * The connection type for SponsorshipNewsletter.
 */
export interface IXGitHubSponsorshipNewsletterConnection {
  __typename: '_xGitHubSponsorshipNewsletterConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubSponsorshipNewsletterEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitHubSponsorshipNewsletter | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface IXGitHubSponsorshipNewsletterEdge {
  __typename: '_xGitHubSponsorshipNewsletterEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitHubSponsorshipNewsletter | null;
}

/**
 * Ordering options for sponsorship newsletter connections.
 */
export interface IXGitHubSponsorshipNewsletterOrder {
  /**
   * The ordering direction.
   */
  direction: XGitHubOrderDirection;

  /**
   * The field to order sponsorship newsletters by.
   */
  field: XGitHubSponsorshipNewsletterOrderField;
}

/**
 * Properties by which sponsorship update connections can be ordered.
 */
export const enum XGitHubSponsorshipNewsletterOrderField {
  /**
   * Order sponsorship newsletters by when they were created.
   */
  CREATED_AT = 'CREATED_AT'
}

/**
 * Ordering options for sponsorship connections.
 */
export interface IXGitHubSponsorshipOrder {
  /**
   * The ordering direction.
   */
  direction: XGitHubOrderDirection;

  /**
   * The field to order sponsorship by.
   */
  field: XGitHubSponsorshipOrderField;
}

/**
 * Properties by which sponsorship connections can be ordered.
 */
export const enum XGitHubSponsorshipOrderField {
  /**
   * Order sponsorship by creation time.
   */
  CREATED_AT = 'CREATED_AT'
}

/**
 * The privacy of a sponsorship
 */
export const enum XGitHubSponsorshipPrivacy {
  /**
   * Private
   */
  PRIVATE = 'PRIVATE',

  /**
   * Public
   */
  PUBLIC = 'PUBLIC'
}

/**
 * Ways in which star connections can be ordered.
 */
export interface IXGitHubStarOrder {
  /**
   * The direction in which to order nodes.
   */
  direction: XGitHubOrderDirection;

  /**
   * The field in which to order nodes by.
   */
  field: XGitHubStarOrderField;
}

/**
 * Properties by which star connections can be ordered.
 */
export const enum XGitHubStarOrderField {
  /**
   * Allows ordering a list of stars by when they were created.
   */
  STARRED_AT = 'STARRED_AT'
}

/**
 * The connection type for User.
 */
export interface IXGitHubStargazerConnection {
  __typename: '_xGitHubStargazerConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubStargazerEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitHubUser | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * Represents a user that's starred a repository.
 */
export interface IXGitHubStargazerEdge {
  __typename: '_xGitHubStargazerEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  node: IXGitHubUser;

  /**
   * Identifies when the item was starred.
   */
  starredAt: any;
}

/**
 * Things that can be starred.
 */
export type _xGitHubStarrable =
  | IXGitHubGist
  | IXGitHubRepository
  | IXGitHubTopic;

/**
 * Things that can be starred.
 */
export interface IXGitHubStarrable {
  __typename: '_xGitHubStarrable';
  id: string;

  /**
   * Returns a count of how many stargazers there are on this object
   */
  stargazerCount: number;

  /**
   * A list of users who have starred this starrable.
   */
  stargazers: IXGitHubStargazerConnection;

  /**
   * Returns a boolean indicating whether the viewing user has starred this starrable.
   */
  viewerHasStarred: boolean;
}

export interface IStargazersOnXGitHubStarrableArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Order for connection
   */
  orderBy?: IXGitHubStarOrder | null;
}

/**
 * The connection type for Repository.
 */
export interface IXGitHubStarredRepositoryConnection {
  __typename: '_xGitHubStarredRepositoryConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubStarredRepositoryEdge | null> | null;

  /**
   * Is the list of stars for this user truncated? This is true for users that have many stars.
   */
  isOverLimit: boolean;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitHubRepository | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * Represents a starred repository.
 */
export interface IXGitHubStarredRepositoryEdge {
  __typename: '_xGitHubStarredRepositoryEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  node: IXGitHubRepository;

  /**
   * Identifies when the item was starred.
   */
  starredAt: any;
}

/**
 * Represents a commit status.
 */
export interface IXGitHubStatus {
  __typename: '_xGitHubStatus';

  /**
   * A list of status contexts and check runs for this commit.
   */
  combinedContexts: IXGitHubStatusCheckRollupContextConnection;

  /**
   * The commit this status is attached to.
   */
  commit: IXGitHubCommit | null;

  /**
   * Looks up an individual status context by context name.
   */
  context: IXGitHubStatusContext | null;

  /**
   * The individual status contexts for this commit.
   */
  contexts: Array<IXGitHubStatusContext>;
  id: string;

  /**
   * The combined commit status.
   */
  state: XGitHubStatusState;
}

export interface ICombinedContextsOnXGitHubStatusArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IContextOnXGitHubStatusArguments {
  /**
   * The context name.
   */
  name: string;
}

/**
 * Represents the rollup for both the check runs and status for a commit.
 */
export interface IXGitHubStatusCheckRollup {
  __typename: '_xGitHubStatusCheckRollup';

  /**
   * The commit the status and check runs are attached to.
   */
  commit: IXGitHubCommit | null;

  /**
   * A list of status contexts and check runs for this commit.
   */
  contexts: IXGitHubStatusCheckRollupContextConnection;
  id: string;

  /**
   * The combined status for the commit.
   */
  state: XGitHubStatusState;
}

export interface IContextsOnXGitHubStatusCheckRollupArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

/**
 * Types that can be inside a StatusCheckRollup context.
 */
export type _xGitHubStatusCheckRollupContext =
  | IXGitHubCheckRun
  | IXGitHubStatusContext;

/**
 * The connection type for StatusCheckRollupContext.
 */
export interface IXGitHubStatusCheckRollupContextConnection {
  __typename: '_xGitHubStatusCheckRollupContextConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubStatusCheckRollupContextEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<_xGitHubStatusCheckRollupContext | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface IXGitHubStatusCheckRollupContextEdge {
  __typename: '_xGitHubStatusCheckRollupContextEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: _xGitHubStatusCheckRollupContext | null;
}

/**
 * Represents an individual commit status context
 */
export interface IXGitHubStatusContext {
  __typename: '_xGitHubStatusContext';

  /**
   * The avatar of the OAuth application or the user that created the status
   */
  avatarUrl: any | null;

  /**
   * This commit this status context is attached to.
   */
  commit: IXGitHubCommit | null;

  /**
   * The name of this status context.
   */
  context: string;

  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: any;

  /**
   * The actor who created this status context.
   */
  creator: _xGitHubActor | null;

  /**
   * The description for this status context.
   */
  description: string | null;
  id: string;

  /**
   * Whether this is required to pass before merging for a specific pull request.
   */
  isRequired: boolean;

  /**
   * The state of this status context.
   */
  state: XGitHubStatusState;

  /**
   * The URL for this status context.
   */
  targetUrl: any | null;
}

export interface IAvatarUrlOnXGitHubStatusContextArguments {
  /**
   * The size of the resulting square image.
   * @default 40
   */
  size?: number | null;
}

export interface IIsRequiredOnXGitHubStatusContextArguments {
  /**
   * The id of the pull request this is required for
   */
  pullRequestId?: string | null;

  /**
   * The number of the pull request this is required for
   */
  pullRequestNumber?: number | null;
}

/**
 * The possible commit status states.
 */
export const enum XGitHubStatusState {
  /**
   * Status is errored.
   */
  ERROR = 'ERROR',

  /**
   * Status is expected.
   */
  EXPECTED = 'EXPECTED',

  /**
   * Status is failing.
   */
  FAILURE = 'FAILURE',

  /**
   * Status is pending.
   */
  PENDING = 'PENDING',

  /**
   * Status is successful.
   */
  SUCCESS = 'SUCCESS'
}

/**
 * Autogenerated input type of SubmitPullRequestReview
 */
export interface IXGitHubSubmitPullRequestReviewInput {
  /**
   * The text field to set on the Pull Request Review.
   */
  body?: string | null;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;

  /**
   * The event to send to the Pull Request Review.
   */
  event: XGitHubPullRequestReviewEvent;

  /**
   * The Pull Request ID to submit any pending reviews.
   */
  pullRequestId?: string | null;

  /**
   * The Pull Request Review ID to submit.
   */
  pullRequestReviewId?: string | null;
}

/**
 * Autogenerated return type of SubmitPullRequestReview
 */
export interface IXGitHubSubmitPullRequestReviewPayload {
  __typename: '_xGitHubSubmitPullRequestReviewPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The submitted pull request review.
   */
  pullRequestReview: IXGitHubPullRequestReview | null;
}

/**
 * A pointer to a repository at a specific revision embedded inside another repository.
 */
export interface IXGitHubSubmodule {
  __typename: '_xGitHubSubmodule';

  /**
   * The branch of the upstream submodule for tracking updates
   */
  branch: string | null;

  /**
   * The git URL of the submodule repository
   */
  gitUrl: any;

  /**
   * The name of the submodule in .gitmodules
   */
  name: string;

  /**
   * The path in the superproject that this submodule is located in
   */
  path: string;

  /**
   * The commit revision of the subproject repository being tracked by the submodule
   */
  subprojectCommitOid: any | null;
}

/**
 * The connection type for Submodule.
 */
export interface IXGitHubSubmoduleConnection {
  __typename: '_xGitHubSubmoduleConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubSubmoduleEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitHubSubmodule | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface IXGitHubSubmoduleEdge {
  __typename: '_xGitHubSubmoduleEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitHubSubmodule | null;
}

/**
 * Entities that can be subscribed to for web and email notifications.
 */
export type _xGitHubSubscribable =
  | IXGitHubCommit
  | IXGitHubDiscussion
  | IXGitHubIssue
  | IXGitHubPullRequest
  | IXGitHubRepository
  | IXGitHubTeam
  | IXGitHubTeamDiscussion;

/**
 * Entities that can be subscribed to for web and email notifications.
 */
export interface IXGitHubSubscribable {
  __typename: '_xGitHubSubscribable';
  id: string;

  /**
   * Check if the viewer is able to change their subscription status for the repository.
   */
  viewerCanSubscribe: boolean;

  /**
   * Identifies if the viewer is watching, not watching, or ignoring the subscribable entity.
   */
  viewerSubscription: XGitHubSubscriptionState | null;
}

/**
 * Represents a 'subscribed' event on a given `Subscribable`.
 */
export interface IXGitHubSubscribedEvent {
  __typename: '_xGitHubSubscribedEvent';

  /**
   * Identifies the actor who performed the event.
   */
  actor: _xGitHubActor | null;

  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: any;
  id: string;

  /**
   * Object referenced by event.
   */
  subscribable: _xGitHubSubscribable;
}

/**
 * The possible states of a subscription.
 */
export const enum XGitHubSubscriptionState {
  /**
   * The User is never notified.
   */
  IGNORED = 'IGNORED',

  /**
   * The User is notified of all conversations.
   */
  SUBSCRIBED = 'SUBSCRIBED',

  /**
   * The User is only notified when participating or @mentioned.
   */
  UNSUBSCRIBED = 'UNSUBSCRIBED'
}

/**
 * A suggestion to review a pull request based on a user's commit history and review comments.
 */
export interface IXGitHubSuggestedReviewer {
  __typename: '_xGitHubSuggestedReviewer';

  /**
   * Is this suggestion based on past commits?
   */
  isAuthor: boolean;

  /**
   * Is this suggestion based on past review comments?
   */
  isCommenter: boolean;

  /**
   * Identifies the user suggested to review the pull request.
   */
  reviewer: IXGitHubUser;
}

/**
 * Represents a Git tag.
 */
export interface IXGitHubTag {
  __typename: '_xGitHubTag';

  /**
   * An abbreviated version of the Git object ID
   */
  abbreviatedOid: string;

  /**
   * The HTTP path for this Git object
   */
  commitResourcePath: any;

  /**
   * The HTTP URL for this Git object
   */
  commitUrl: any;
  id: string;

  /**
   * The Git tag message.
   */
  message: string | null;

  /**
   * The Git tag name.
   */
  name: string;

  /**
   * The Git object ID
   */
  oid: any;

  /**
   * The Repository the Git object belongs to
   */
  repository: IXGitHubRepository;

  /**
   * Details about the tag author.
   */
  tagger: IXGitHubGitActor | null;

  /**
   * The Git object the tag points to.
   */
  target: _xGitHubGitObject;
}

/**
 * A team of users in an organization.
 */
export interface IXGitHubTeam {
  __typename: '_xGitHubTeam';

  /**
   * A list of teams that are ancestors of this team.
   */
  ancestors: IXGitHubTeamConnection;

  /**
   * A URL pointing to the team's avatar.
   */
  avatarUrl: any | null;

  /**
   * List of child teams belonging to this team
   */
  childTeams: IXGitHubTeamConnection;

  /**
   * The slug corresponding to the organization and team.
   */
  combinedSlug: string;

  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: any;

  /**
   * Identifies the primary key from the database.
   */
  databaseId: number | null;

  /**
   * The description of the team.
   */
  description: string | null;

  /**
   * Find a team discussion by its number.
   */
  discussion: IXGitHubTeamDiscussion | null;

  /**
   * A list of team discussions.
   */
  discussions: IXGitHubTeamDiscussionConnection;

  /**
   * The HTTP path for team discussions
   */
  discussionsResourcePath: any;

  /**
   * The HTTP URL for team discussions
   */
  discussionsUrl: any;

  /**
   * The HTTP path for editing this team
   */
  editTeamResourcePath: any;

  /**
   * The HTTP URL for editing this team
   */
  editTeamUrl: any;
  id: string;

  /**
   * A list of pending invitations for users to this team
   */
  invitations: IXGitHubOrganizationInvitationConnection | null;

  /**
   * Get the status messages members of this entity have set that are either public or visible only to the organization.
   */
  memberStatuses: IXGitHubUserStatusConnection;

  /**
   * A list of users who are members of this team.
   */
  members: IXGitHubTeamMemberConnection;

  /**
   * The HTTP path for the team' members
   */
  membersResourcePath: any;

  /**
   * The HTTP URL for the team' members
   */
  membersUrl: any;

  /**
   * The name of the team.
   */
  name: string;

  /**
   * The HTTP path creating a new team
   */
  newTeamResourcePath: any;

  /**
   * The HTTP URL creating a new team
   */
  newTeamUrl: any;

  /**
   * The organization that owns this team.
   */
  organization: IXGitHubOrganization;

  /**
   * The parent team of the team.
   */
  parentTeam: IXGitHubTeam | null;

  /**
   * The level of privacy the team has.
   */
  privacy: XGitHubTeamPrivacy;

  /**
   * A list of repositories this team has access to.
   */
  repositories: IXGitHubTeamRepositoryConnection;

  /**
   * The HTTP path for this team's repositories
   */
  repositoriesResourcePath: any;

  /**
   * The HTTP URL for this team's repositories
   */
  repositoriesUrl: any;

  /**
   * The HTTP path for this team
   */
  resourcePath: any;

  /**
   * The slug corresponding to the team.
   */
  slug: string;

  /**
   * The HTTP path for this team's teams
   */
  teamsResourcePath: any;

  /**
   * The HTTP URL for this team's teams
   */
  teamsUrl: any;

  /**
   * Identifies the date and time when the object was last updated.
   */
  updatedAt: any;

  /**
   * The HTTP URL for this team
   */
  url: any;

  /**
   * Team is adminable by the viewer.
   */
  viewerCanAdminister: boolean;

  /**
   * Check if the viewer is able to change their subscription status for the repository.
   */
  viewerCanSubscribe: boolean;

  /**
   * Identifies if the viewer is watching, not watching, or ignoring the subscribable entity.
   */
  viewerSubscription: XGitHubSubscriptionState | null;
}

export interface IAncestorsOnXGitHubTeamArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IAvatarUrlOnXGitHubTeamArguments {
  /**
   * The size in pixels of the resulting square image.
   * @default 400
   */
  size?: number | null;
}

export interface IChildTeamsOnXGitHubTeamArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Whether to list immediate child teams or all descendant child teams.
   * @default true
   */
  immediateOnly?: boolean | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Order for connection
   */
  orderBy?: IXGitHubTeamOrder | null;

  /**
   * User logins to filter by
   */
  userLogins?: Array<string> | null;
}

export interface IDiscussionOnXGitHubTeamArguments {
  /**
   * The sequence number of the discussion to find.
   */
  number: number;
}

export interface IDiscussionsOnXGitHubTeamArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * If provided, filters discussions according to whether or not they are pinned.
   */
  isPinned?: boolean | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Order for connection
   */
  orderBy?: IXGitHubTeamDiscussionOrder | null;
}

export interface IInvitationsOnXGitHubTeamArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IMemberStatusesOnXGitHubTeamArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Ordering options for user statuses returned from the connection.
   * @default {"direction":"DESC","field":"UPDATED_AT"}
   */
  orderBy?: IXGitHubUserStatusOrder | null;
}

export interface IMembersOnXGitHubTeamArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Filter by membership type
   * @default "ALL"
   */
  membership?: XGitHubTeamMembershipType | null;

  /**
   * Order for the connection.
   */
  orderBy?: IXGitHubTeamMemberOrder | null;

  /**
   * The search string to look for.
   */
  query?: string | null;

  /**
   * Filter by team member role
   */
  role?: XGitHubTeamMemberRole | null;
}

export interface IRepositoriesOnXGitHubTeamArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Order for the connection.
   */
  orderBy?: IXGitHubTeamRepositoryOrder | null;

  /**
   * The search string to look for.
   */
  query?: string | null;
}

/**
 * Audit log entry for a team.add_member event.
 */
export interface IXGitHubTeamAddMemberAuditEntry {
  __typename: '_xGitHubTeamAddMemberAuditEntry';

  /**
   * The action name
   */
  action: string;

  /**
   * The user who initiated the action
   */
  actor: _xGitHubAuditEntryActor | null;

  /**
   * The IP address of the actor
   */
  actorIp: string | null;

  /**
   * A readable representation of the actor's location
   */
  actorLocation: IXGitHubActorLocation | null;

  /**
   * The username of the user who initiated the action
   */
  actorLogin: string | null;

  /**
   * The HTTP path for the actor.
   */
  actorResourcePath: any | null;

  /**
   * The HTTP URL for the actor.
   */
  actorUrl: any | null;

  /**
   * The time the action was initiated
   */
  createdAt: any;
  id: string;

  /**
   * Whether the team was mapped to an LDAP Group.
   */
  isLdapMapped: boolean | null;

  /**
   * The corresponding operation type for the action
   */
  operationType: XGitHubOperationType | null;

  /**
   * The Organization associated with the Audit Entry.
   */
  organization: IXGitHubOrganization | null;

  /**
   * The name of the Organization.
   */
  organizationName: string | null;

  /**
   * The HTTP path for the organization
   */
  organizationResourcePath: any | null;

  /**
   * The HTTP URL for the organization
   */
  organizationUrl: any | null;

  /**
   * The team associated with the action
   */
  team: IXGitHubTeam | null;

  /**
   * The name of the team
   */
  teamName: string | null;

  /**
   * The HTTP path for this team
   */
  teamResourcePath: any | null;

  /**
   * The HTTP URL for this team
   */
  teamUrl: any | null;

  /**
   * The user affected by the action
   */
  user: IXGitHubUser | null;

  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin: string | null;

  /**
   * The HTTP path for the user.
   */
  userResourcePath: any | null;

  /**
   * The HTTP URL for the user.
   */
  userUrl: any | null;
}

/**
 * Audit log entry for a team.add_repository event.
 */
export interface IXGitHubTeamAddRepositoryAuditEntry {
  __typename: '_xGitHubTeamAddRepositoryAuditEntry';

  /**
   * The action name
   */
  action: string;

  /**
   * The user who initiated the action
   */
  actor: _xGitHubAuditEntryActor | null;

  /**
   * The IP address of the actor
   */
  actorIp: string | null;

  /**
   * A readable representation of the actor's location
   */
  actorLocation: IXGitHubActorLocation | null;

  /**
   * The username of the user who initiated the action
   */
  actorLogin: string | null;

  /**
   * The HTTP path for the actor.
   */
  actorResourcePath: any | null;

  /**
   * The HTTP URL for the actor.
   */
  actorUrl: any | null;

  /**
   * The time the action was initiated
   */
  createdAt: any;
  id: string;

  /**
   * Whether the team was mapped to an LDAP Group.
   */
  isLdapMapped: boolean | null;

  /**
   * The corresponding operation type for the action
   */
  operationType: XGitHubOperationType | null;

  /**
   * The Organization associated with the Audit Entry.
   */
  organization: IXGitHubOrganization | null;

  /**
   * The name of the Organization.
   */
  organizationName: string | null;

  /**
   * The HTTP path for the organization
   */
  organizationResourcePath: any | null;

  /**
   * The HTTP URL for the organization
   */
  organizationUrl: any | null;

  /**
   * The repository associated with the action
   */
  repository: IXGitHubRepository | null;

  /**
   * The name of the repository
   */
  repositoryName: string | null;

  /**
   * The HTTP path for the repository
   */
  repositoryResourcePath: any | null;

  /**
   * The HTTP URL for the repository
   */
  repositoryUrl: any | null;

  /**
   * The team associated with the action
   */
  team: IXGitHubTeam | null;

  /**
   * The name of the team
   */
  teamName: string | null;

  /**
   * The HTTP path for this team
   */
  teamResourcePath: any | null;

  /**
   * The HTTP URL for this team
   */
  teamUrl: any | null;

  /**
   * The user affected by the action
   */
  user: IXGitHubUser | null;

  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin: string | null;

  /**
   * The HTTP path for the user.
   */
  userResourcePath: any | null;

  /**
   * The HTTP URL for the user.
   */
  userUrl: any | null;
}

/**
 * Metadata for an audit entry with action team.*
 */
export type _xGitHubTeamAuditEntryData =
  | IXGitHubOrgRestoreMemberMembershipTeamAuditEntryData
  | IXGitHubTeamAddMemberAuditEntry
  | IXGitHubTeamAddRepositoryAuditEntry
  | IXGitHubTeamChangeParentTeamAuditEntry
  | IXGitHubTeamRemoveMemberAuditEntry
  | IXGitHubTeamRemoveRepositoryAuditEntry;

/**
 * Metadata for an audit entry with action team.*
 */
export interface IXGitHubTeamAuditEntryData {
  __typename: '_xGitHubTeamAuditEntryData';

  /**
   * The team associated with the action
   */
  team: IXGitHubTeam | null;

  /**
   * The name of the team
   */
  teamName: string | null;

  /**
   * The HTTP path for this team
   */
  teamResourcePath: any | null;

  /**
   * The HTTP URL for this team
   */
  teamUrl: any | null;
}

/**
 * Audit log entry for a team.change_parent_team event.
 */
export interface IXGitHubTeamChangeParentTeamAuditEntry {
  __typename: '_xGitHubTeamChangeParentTeamAuditEntry';

  /**
   * The action name
   */
  action: string;

  /**
   * The user who initiated the action
   */
  actor: _xGitHubAuditEntryActor | null;

  /**
   * The IP address of the actor
   */
  actorIp: string | null;

  /**
   * A readable representation of the actor's location
   */
  actorLocation: IXGitHubActorLocation | null;

  /**
   * The username of the user who initiated the action
   */
  actorLogin: string | null;

  /**
   * The HTTP path for the actor.
   */
  actorResourcePath: any | null;

  /**
   * The HTTP URL for the actor.
   */
  actorUrl: any | null;

  /**
   * The time the action was initiated
   */
  createdAt: any;
  id: string;

  /**
   * Whether the team was mapped to an LDAP Group.
   */
  isLdapMapped: boolean | null;

  /**
   * The corresponding operation type for the action
   */
  operationType: XGitHubOperationType | null;

  /**
   * The Organization associated with the Audit Entry.
   */
  organization: IXGitHubOrganization | null;

  /**
   * The name of the Organization.
   */
  organizationName: string | null;

  /**
   * The HTTP path for the organization
   */
  organizationResourcePath: any | null;

  /**
   * The HTTP URL for the organization
   */
  organizationUrl: any | null;

  /**
   * The new parent team.
   */
  parentTeam: IXGitHubTeam | null;

  /**
   * The name of the new parent team
   */
  parentTeamName: string | null;

  /**
   * The name of the former parent team
   */
  parentTeamNameWas: string | null;

  /**
   * The HTTP path for the parent team
   */
  parentTeamResourcePath: any | null;

  /**
   * The HTTP URL for the parent team
   */
  parentTeamUrl: any | null;

  /**
   * The former parent team.
   */
  parentTeamWas: IXGitHubTeam | null;

  /**
   * The HTTP path for the previous parent team
   */
  parentTeamWasResourcePath: any | null;

  /**
   * The HTTP URL for the previous parent team
   */
  parentTeamWasUrl: any | null;

  /**
   * The team associated with the action
   */
  team: IXGitHubTeam | null;

  /**
   * The name of the team
   */
  teamName: string | null;

  /**
   * The HTTP path for this team
   */
  teamResourcePath: any | null;

  /**
   * The HTTP URL for this team
   */
  teamUrl: any | null;

  /**
   * The user affected by the action
   */
  user: IXGitHubUser | null;

  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin: string | null;

  /**
   * The HTTP path for the user.
   */
  userResourcePath: any | null;

  /**
   * The HTTP URL for the user.
   */
  userUrl: any | null;
}

/**
 * The connection type for Team.
 */
export interface IXGitHubTeamConnection {
  __typename: '_xGitHubTeamConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubTeamEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitHubTeam | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * A team discussion.
 */
export interface IXGitHubTeamDiscussion {
  __typename: '_xGitHubTeamDiscussion';

  /**
   * The actor who authored the comment.
   */
  author: _xGitHubActor | null;

  /**
   * Author's association with the discussion's team.
   */
  authorAssociation: XGitHubCommentAuthorAssociation;

  /**
   * The body as Markdown.
   */
  body: string;

  /**
   * The body rendered to HTML.
   */
  bodyHTML: any;

  /**
   * The body rendered to text.
   */
  bodyText: string;

  /**
   * Identifies the discussion body hash.
   */
  bodyVersion: string;

  /**
   * A list of comments on this discussion.
   */
  comments: IXGitHubTeamDiscussionCommentConnection;

  /**
   * The HTTP path for discussion comments
   */
  commentsResourcePath: any;

  /**
   * The HTTP URL for discussion comments
   */
  commentsUrl: any;

  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: any;

  /**
   * Check if this comment was created via an email reply.
   */
  createdViaEmail: boolean;

  /**
   * Identifies the primary key from the database.
   */
  databaseId: number | null;

  /**
   * The actor who edited the comment.
   */
  editor: _xGitHubActor | null;
  id: string;

  /**
   * Check if this comment was edited and includes an edit with the creation data
   */
  includesCreatedEdit: boolean;

  /**
   * Whether or not the discussion is pinned.
   */
  isPinned: boolean;

  /**
   * Whether or not the discussion is only visible to team members and org admins.
   */
  isPrivate: boolean;

  /**
   * The moment the editor made the last edit
   */
  lastEditedAt: any | null;

  /**
   * Identifies the discussion within its team.
   */
  number: number;

  /**
   * Identifies when the comment was published at.
   */
  publishedAt: any | null;

  /**
   * A list of reactions grouped by content left on the subject.
   */
  reactionGroups: Array<IXGitHubReactionGroup> | null;

  /**
   * A list of Reactions left on the Issue.
   */
  reactions: IXGitHubReactionConnection;

  /**
   * The HTTP path for this discussion
   */
  resourcePath: any;

  /**
   * The team that defines the context of this discussion.
   */
  team: IXGitHubTeam;

  /**
   * The title of the discussion
   */
  title: string;

  /**
   * Identifies the date and time when the object was last updated.
   */
  updatedAt: any;

  /**
   * The HTTP URL for this discussion
   */
  url: any;

  /**
   * A list of edits to this content.
   */
  userContentEdits: IXGitHubUserContentEditConnection | null;

  /**
   * Check if the current viewer can delete this object.
   */
  viewerCanDelete: boolean;

  /**
   * Whether or not the current viewer can pin this discussion.
   */
  viewerCanPin: boolean;

  /**
   * Can user react to this subject
   */
  viewerCanReact: boolean;

  /**
   * Check if the viewer is able to change their subscription status for the repository.
   */
  viewerCanSubscribe: boolean;

  /**
   * Check if the current viewer can update this object.
   */
  viewerCanUpdate: boolean;

  /**
   * Reasons why the current viewer can not update this comment.
   */
  viewerCannotUpdateReasons: Array<XGitHubCommentCannotUpdateReason>;

  /**
   * Did the viewer author this comment.
   */
  viewerDidAuthor: boolean;

  /**
   * Identifies if the viewer is watching, not watching, or ignoring the subscribable entity.
   */
  viewerSubscription: XGitHubSubscriptionState | null;
}

export interface ICommentsOnXGitHubTeamDiscussionArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * When provided, filters the connection such that results begin with the comment with this number.
   */
  fromComment?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Order for connection
   */
  orderBy?: IXGitHubTeamDiscussionCommentOrder | null;
}

export interface IReactionsOnXGitHubTeamDiscussionArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Allows filtering Reactions by emoji.
   */
  content?: XGitHubReactionContent | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Allows specifying the order in which reactions are returned.
   */
  orderBy?: IXGitHubReactionOrder | null;
}

export interface IUserContentEditsOnXGitHubTeamDiscussionArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

/**
 * A comment on a team discussion.
 */
export interface IXGitHubTeamDiscussionComment {
  __typename: '_xGitHubTeamDiscussionComment';

  /**
   * The actor who authored the comment.
   */
  author: _xGitHubActor | null;

  /**
   * Author's association with the comment's team.
   */
  authorAssociation: XGitHubCommentAuthorAssociation;

  /**
   * The body as Markdown.
   */
  body: string;

  /**
   * The body rendered to HTML.
   */
  bodyHTML: any;

  /**
   * The body rendered to text.
   */
  bodyText: string;

  /**
   * The current version of the body content.
   */
  bodyVersion: string;

  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: any;

  /**
   * Check if this comment was created via an email reply.
   */
  createdViaEmail: boolean;

  /**
   * Identifies the primary key from the database.
   */
  databaseId: number | null;

  /**
   * The discussion this comment is about.
   */
  discussion: IXGitHubTeamDiscussion;

  /**
   * The actor who edited the comment.
   */
  editor: _xGitHubActor | null;
  id: string;

  /**
   * Check if this comment was edited and includes an edit with the creation data
   */
  includesCreatedEdit: boolean;

  /**
   * The moment the editor made the last edit
   */
  lastEditedAt: any | null;

  /**
   * Identifies the comment number.
   */
  number: number;

  /**
   * Identifies when the comment was published at.
   */
  publishedAt: any | null;

  /**
   * A list of reactions grouped by content left on the subject.
   */
  reactionGroups: Array<IXGitHubReactionGroup> | null;

  /**
   * A list of Reactions left on the Issue.
   */
  reactions: IXGitHubReactionConnection;

  /**
   * The HTTP path for this comment
   */
  resourcePath: any;

  /**
   * Identifies the date and time when the object was last updated.
   */
  updatedAt: any;

  /**
   * The HTTP URL for this comment
   */
  url: any;

  /**
   * A list of edits to this content.
   */
  userContentEdits: IXGitHubUserContentEditConnection | null;

  /**
   * Check if the current viewer can delete this object.
   */
  viewerCanDelete: boolean;

  /**
   * Can user react to this subject
   */
  viewerCanReact: boolean;

  /**
   * Check if the current viewer can update this object.
   */
  viewerCanUpdate: boolean;

  /**
   * Reasons why the current viewer can not update this comment.
   */
  viewerCannotUpdateReasons: Array<XGitHubCommentCannotUpdateReason>;

  /**
   * Did the viewer author this comment.
   */
  viewerDidAuthor: boolean;
}

export interface IReactionsOnXGitHubTeamDiscussionCommentArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Allows filtering Reactions by emoji.
   */
  content?: XGitHubReactionContent | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Allows specifying the order in which reactions are returned.
   */
  orderBy?: IXGitHubReactionOrder | null;
}

export interface IUserContentEditsOnXGitHubTeamDiscussionCommentArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

/**
 * The connection type for TeamDiscussionComment.
 */
export interface IXGitHubTeamDiscussionCommentConnection {
  __typename: '_xGitHubTeamDiscussionCommentConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubTeamDiscussionCommentEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitHubTeamDiscussionComment | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface IXGitHubTeamDiscussionCommentEdge {
  __typename: '_xGitHubTeamDiscussionCommentEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitHubTeamDiscussionComment | null;
}

/**
 * Ways in which team discussion comment connections can be ordered.
 */
export interface IXGitHubTeamDiscussionCommentOrder {
  /**
   * The direction in which to order nodes.
   */
  direction: XGitHubOrderDirection;

  /**
   * The field by which to order nodes.
   */
  field: XGitHubTeamDiscussionCommentOrderField;
}

/**
 * Properties by which team discussion comment connections can be ordered.
 */
export const enum XGitHubTeamDiscussionCommentOrderField {
  /**
   * Allows sequential ordering of team discussion comments (which is equivalent to chronological ordering).
   */
  NUMBER = 'NUMBER'
}

/**
 * The connection type for TeamDiscussion.
 */
export interface IXGitHubTeamDiscussionConnection {
  __typename: '_xGitHubTeamDiscussionConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubTeamDiscussionEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitHubTeamDiscussion | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface IXGitHubTeamDiscussionEdge {
  __typename: '_xGitHubTeamDiscussionEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitHubTeamDiscussion | null;
}

/**
 * Ways in which team discussion connections can be ordered.
 */
export interface IXGitHubTeamDiscussionOrder {
  /**
   * The direction in which to order nodes.
   */
  direction: XGitHubOrderDirection;

  /**
   * The field by which to order nodes.
   */
  field: XGitHubTeamDiscussionOrderField;
}

/**
 * Properties by which team discussion connections can be ordered.
 */
export const enum XGitHubTeamDiscussionOrderField {
  /**
   * Allows chronological ordering of team discussions.
   */
  CREATED_AT = 'CREATED_AT'
}

/**
 * An edge in a connection.
 */
export interface IXGitHubTeamEdge {
  __typename: '_xGitHubTeamEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitHubTeam | null;
}

/**
 * The connection type for User.
 */
export interface IXGitHubTeamMemberConnection {
  __typename: '_xGitHubTeamMemberConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubTeamMemberEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitHubUser | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * Represents a user who is a member of a team.
 */
export interface IXGitHubTeamMemberEdge {
  __typename: '_xGitHubTeamMemberEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The HTTP path to the organization's member access page.
   */
  memberAccessResourcePath: any;

  /**
   * The HTTP URL to the organization's member access page.
   */
  memberAccessUrl: any;
  node: IXGitHubUser;

  /**
   * The role the member has on the team.
   */
  role: XGitHubTeamMemberRole;
}

/**
 * Ordering options for team member connections
 */
export interface IXGitHubTeamMemberOrder {
  /**
   * The ordering direction.
   */
  direction: XGitHubOrderDirection;

  /**
   * The field to order team members by.
   */
  field: XGitHubTeamMemberOrderField;
}

/**
 * Properties by which team member connections can be ordered.
 */
export const enum XGitHubTeamMemberOrderField {
  /**
   * Order team members by creation time
   */
  CREATED_AT = 'CREATED_AT',

  /**
   * Order team members by login
   */
  LOGIN = 'LOGIN'
}

/**
 * The possible team member roles; either 'maintainer' or 'member'.
 */
export const enum XGitHubTeamMemberRole {
  /**
   * A team maintainer has permission to add and remove team members.
   */
  MAINTAINER = 'MAINTAINER',

  /**
   * A team member has no administrative permissions on the team.
   */
  MEMBER = 'MEMBER'
}

/**
 * Defines which types of team members are included in the returned list. Can be one of IMMEDIATE, CHILD_TEAM or ALL.
 */
export const enum XGitHubTeamMembershipType {
  /**
   * Includes immediate and child team members for the team.
   */
  ALL = 'ALL',

  /**
   * Includes only child team members for the team.
   */
  CHILD_TEAM = 'CHILD_TEAM',

  /**
   * Includes only immediate members of the team.
   */
  IMMEDIATE = 'IMMEDIATE'
}

/**
 * Ways in which team connections can be ordered.
 */
export interface IXGitHubTeamOrder {
  /**
   * The direction in which to order nodes.
   */
  direction: XGitHubOrderDirection;

  /**
   * The field in which to order nodes by.
   */
  field: XGitHubTeamOrderField;
}

/**
 * Properties by which team connections can be ordered.
 */
export const enum XGitHubTeamOrderField {
  /**
   * Allows ordering a list of teams by name.
   */
  NAME = 'NAME'
}

/**
 * The possible team privacy values.
 */
export const enum XGitHubTeamPrivacy {
  /**
   * A secret team can only be seen by its members.
   */
  SECRET = 'SECRET',

  /**
   * A visible team can be seen and @mentioned by every member of the organization.
   */
  VISIBLE = 'VISIBLE'
}

/**
 * Audit log entry for a team.remove_member event.
 */
export interface IXGitHubTeamRemoveMemberAuditEntry {
  __typename: '_xGitHubTeamRemoveMemberAuditEntry';

  /**
   * The action name
   */
  action: string;

  /**
   * The user who initiated the action
   */
  actor: _xGitHubAuditEntryActor | null;

  /**
   * The IP address of the actor
   */
  actorIp: string | null;

  /**
   * A readable representation of the actor's location
   */
  actorLocation: IXGitHubActorLocation | null;

  /**
   * The username of the user who initiated the action
   */
  actorLogin: string | null;

  /**
   * The HTTP path for the actor.
   */
  actorResourcePath: any | null;

  /**
   * The HTTP URL for the actor.
   */
  actorUrl: any | null;

  /**
   * The time the action was initiated
   */
  createdAt: any;
  id: string;

  /**
   * Whether the team was mapped to an LDAP Group.
   */
  isLdapMapped: boolean | null;

  /**
   * The corresponding operation type for the action
   */
  operationType: XGitHubOperationType | null;

  /**
   * The Organization associated with the Audit Entry.
   */
  organization: IXGitHubOrganization | null;

  /**
   * The name of the Organization.
   */
  organizationName: string | null;

  /**
   * The HTTP path for the organization
   */
  organizationResourcePath: any | null;

  /**
   * The HTTP URL for the organization
   */
  organizationUrl: any | null;

  /**
   * The team associated with the action
   */
  team: IXGitHubTeam | null;

  /**
   * The name of the team
   */
  teamName: string | null;

  /**
   * The HTTP path for this team
   */
  teamResourcePath: any | null;

  /**
   * The HTTP URL for this team
   */
  teamUrl: any | null;

  /**
   * The user affected by the action
   */
  user: IXGitHubUser | null;

  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin: string | null;

  /**
   * The HTTP path for the user.
   */
  userResourcePath: any | null;

  /**
   * The HTTP URL for the user.
   */
  userUrl: any | null;
}

/**
 * Audit log entry for a team.remove_repository event.
 */
export interface IXGitHubTeamRemoveRepositoryAuditEntry {
  __typename: '_xGitHubTeamRemoveRepositoryAuditEntry';

  /**
   * The action name
   */
  action: string;

  /**
   * The user who initiated the action
   */
  actor: _xGitHubAuditEntryActor | null;

  /**
   * The IP address of the actor
   */
  actorIp: string | null;

  /**
   * A readable representation of the actor's location
   */
  actorLocation: IXGitHubActorLocation | null;

  /**
   * The username of the user who initiated the action
   */
  actorLogin: string | null;

  /**
   * The HTTP path for the actor.
   */
  actorResourcePath: any | null;

  /**
   * The HTTP URL for the actor.
   */
  actorUrl: any | null;

  /**
   * The time the action was initiated
   */
  createdAt: any;
  id: string;

  /**
   * Whether the team was mapped to an LDAP Group.
   */
  isLdapMapped: boolean | null;

  /**
   * The corresponding operation type for the action
   */
  operationType: XGitHubOperationType | null;

  /**
   * The Organization associated with the Audit Entry.
   */
  organization: IXGitHubOrganization | null;

  /**
   * The name of the Organization.
   */
  organizationName: string | null;

  /**
   * The HTTP path for the organization
   */
  organizationResourcePath: any | null;

  /**
   * The HTTP URL for the organization
   */
  organizationUrl: any | null;

  /**
   * The repository associated with the action
   */
  repository: IXGitHubRepository | null;

  /**
   * The name of the repository
   */
  repositoryName: string | null;

  /**
   * The HTTP path for the repository
   */
  repositoryResourcePath: any | null;

  /**
   * The HTTP URL for the repository
   */
  repositoryUrl: any | null;

  /**
   * The team associated with the action
   */
  team: IXGitHubTeam | null;

  /**
   * The name of the team
   */
  teamName: string | null;

  /**
   * The HTTP path for this team
   */
  teamResourcePath: any | null;

  /**
   * The HTTP URL for this team
   */
  teamUrl: any | null;

  /**
   * The user affected by the action
   */
  user: IXGitHubUser | null;

  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin: string | null;

  /**
   * The HTTP path for the user.
   */
  userResourcePath: any | null;

  /**
   * The HTTP URL for the user.
   */
  userUrl: any | null;
}

/**
 * The connection type for Repository.
 */
export interface IXGitHubTeamRepositoryConnection {
  __typename: '_xGitHubTeamRepositoryConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubTeamRepositoryEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitHubRepository | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * Represents a team repository.
 */
export interface IXGitHubTeamRepositoryEdge {
  __typename: '_xGitHubTeamRepositoryEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  node: IXGitHubRepository;

  /**
   * The permission level the team has on the repository
   */
  permission: XGitHubRepositoryPermission;
}

/**
 * Ordering options for team repository connections
 */
export interface IXGitHubTeamRepositoryOrder {
  /**
   * The ordering direction.
   */
  direction: XGitHubOrderDirection;

  /**
   * The field to order repositories by.
   */
  field: XGitHubTeamRepositoryOrderField;
}

/**
 * Properties by which team repository connections can be ordered.
 */
export const enum XGitHubTeamRepositoryOrderField {
  /**
   * Order repositories by creation time
   */
  CREATED_AT = 'CREATED_AT',

  /**
   * Order repositories by name
   */
  NAME = 'NAME',

  /**
   * Order repositories by permission
   */
  PERMISSION = 'PERMISSION',

  /**
   * Order repositories by push time
   */
  PUSHED_AT = 'PUSHED_AT',

  /**
   * Order repositories by number of stargazers
   */
  STARGAZERS = 'STARGAZERS',

  /**
   * Order repositories by update time
   */
  UPDATED_AT = 'UPDATED_AT'
}

/**
 * The role of a user on a team.
 */
export const enum XGitHubTeamRole {
  /**
   * User has admin rights on the team.
   */
  ADMIN = 'ADMIN',

  /**
   * User is a member of the team.
   */
  MEMBER = 'MEMBER'
}

/**
 * A text match within a search result.
 */
export interface IXGitHubTextMatch {
  __typename: '_xGitHubTextMatch';

  /**
   * The specific text fragment within the property matched on.
   */
  fragment: string;

  /**
   * Highlights within the matched fragment.
   */
  highlights: Array<IXGitHubTextMatchHighlight>;

  /**
   * The property matched on.
   */
  property: string;
}

/**
 * Represents a single highlight in a search result match.
 */
export interface IXGitHubTextMatchHighlight {
  __typename: '_xGitHubTextMatchHighlight';

  /**
   * The indice in the fragment where the matched text begins.
   */
  beginIndice: number;

  /**
   * The indice in the fragment where the matched text ends.
   */
  endIndice: number;

  /**
   * The text matched.
   */
  text: string;
}

/**
 * A topic aggregates entities that are related to a subject.
 */
export interface IXGitHubTopic {
  __typename: '_xGitHubTopic';
  id: string;

  /**
   * The topic's name.
   */
  name: string;

  /**
   * A list of related topics, including aliases of this topic, sorted with the most relevant
   * first. Returns up to 10 Topics.
   */
  relatedTopics: Array<IXGitHubTopic>;

  /**
   * Returns a count of how many stargazers there are on this object
   */
  stargazerCount: number;

  /**
   * A list of users who have starred this starrable.
   */
  stargazers: IXGitHubStargazerConnection;

  /**
   * Returns a boolean indicating whether the viewing user has starred this starrable.
   */
  viewerHasStarred: boolean;
}

export interface IRelatedTopicsOnXGitHubTopicArguments {
  /**
   * How many topics to return.
   * @default 3
   */
  first?: number | null;
}

export interface IStargazersOnXGitHubTopicArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Order for connection
   */
  orderBy?: IXGitHubStarOrder | null;
}

/**
 * Metadata for an audit entry with a topic.
 */
export type _xGitHubTopicAuditEntryData =
  | IXGitHubRepoAddTopicAuditEntry
  | IXGitHubRepoRemoveTopicAuditEntry;

/**
 * Metadata for an audit entry with a topic.
 */
export interface IXGitHubTopicAuditEntryData {
  __typename: '_xGitHubTopicAuditEntryData';

  /**
   * The name of the topic added to the repository
   */
  topic: IXGitHubTopic | null;

  /**
   * The name of the topic added to the repository
   */
  topicName: string | null;
}

/**
 * Reason that the suggested topic is declined.
 */
export const enum XGitHubTopicSuggestionDeclineReason {
  /**
   * The suggested topic is not relevant to the repository.
   */
  NOT_RELEVANT = 'NOT_RELEVANT',

  /**
   * The viewer does not like the suggested topic.
   */
  PERSONAL_PREFERENCE = 'PERSONAL_PREFERENCE',

  /**
   * The suggested topic is too general for the repository.
   */
  TOO_GENERAL = 'TOO_GENERAL',

  /**
   * The suggested topic is too specific for the repository (e.g. #ruby-on-rails-version-4-2-1).
   */
  TOO_SPECIFIC = 'TOO_SPECIFIC'
}

/**
 * Autogenerated input type of TransferIssue
 */
export interface IXGitHubTransferIssueInput {
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;

  /**
   * The Node ID of the issue to be transferred
   */
  issueId: string;

  /**
   * The Node ID of the repository the issue should be transferred to
   */
  repositoryId: string;
}

/**
 * Autogenerated return type of TransferIssue
 */
export interface IXGitHubTransferIssuePayload {
  __typename: '_xGitHubTransferIssuePayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The issue that was transferred
   */
  issue: IXGitHubIssue | null;
}

/**
 * Represents a 'transferred' event on a given issue or pull request.
 */
export interface IXGitHubTransferredEvent {
  __typename: '_xGitHubTransferredEvent';

  /**
   * Identifies the actor who performed the event.
   */
  actor: _xGitHubActor | null;

  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: any;

  /**
   * The repository this came from
   */
  fromRepository: IXGitHubRepository | null;
  id: string;

  /**
   * Identifies the issue associated with the event.
   */
  issue: IXGitHubIssue;
}

/**
 * Represents a Git tree.
 */
export interface IXGitHubTree {
  __typename: '_xGitHubTree';

  /**
   * An abbreviated version of the Git object ID
   */
  abbreviatedOid: string;

  /**
   * The HTTP path for this Git object
   */
  commitResourcePath: any;

  /**
   * The HTTP URL for this Git object
   */
  commitUrl: any;

  /**
   * A list of tree entries.
   */
  entries: Array<IXGitHubTreeEntry> | null;
  id: string;

  /**
   * The Git object ID
   */
  oid: any;

  /**
   * The Repository the Git object belongs to
   */
  repository: IXGitHubRepository;
}

/**
 * Represents a Git tree entry.
 */
export interface IXGitHubTreeEntry {
  __typename: '_xGitHubTreeEntry';

  /**
   * The extension of the file
   */
  extension: string | null;

  /**
   * Whether or not this tree entry is generated
   */
  isGenerated: boolean;

  /**
   * Entry file mode.
   */
  mode: number;

  /**
   * Entry file name.
   */
  name: string;

  /**
   * Entry file object.
   */
  object: _xGitHubGitObject | null;

  /**
   * Entry file Git object ID.
   */
  oid: any;

  /**
   * The full path of the file.
   */
  path: string | null;

  /**
   * The Repository the tree entry belongs to
   */
  repository: IXGitHubRepository;

  /**
   * If the TreeEntry is for a directory occupied by a submodule project, this returns the corresponding submodule
   */
  submodule: IXGitHubSubmodule | null;

  /**
   * Entry file type.
   */
  type: string;
}

/**
 * Autogenerated input type of UnarchiveRepository
 */
export interface IXGitHubUnarchiveRepositoryInput {
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;

  /**
   * The ID of the repository to unarchive.
   */
  repositoryId: string;
}

/**
 * Autogenerated return type of UnarchiveRepository
 */
export interface IXGitHubUnarchiveRepositoryPayload {
  __typename: '_xGitHubUnarchiveRepositoryPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The repository that was unarchived.
   */
  repository: IXGitHubRepository | null;
}

/**
 * Represents an 'unassigned' event on any assignable object.
 */
export interface IXGitHubUnassignedEvent {
  __typename: '_xGitHubUnassignedEvent';

  /**
   * Identifies the actor who performed the event.
   */
  actor: _xGitHubActor | null;

  /**
   * Identifies the assignable associated with the event.
   */
  assignable: _xGitHubAssignable;

  /**
   * Identifies the user or mannequin that was unassigned.
   */
  assignee: _xGitHubAssignee | null;

  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: any;
  id: string;

  /**
   * Identifies the subject (user) who was unassigned.
   * @deprecated "Assignees can now be mannequins. Use the `assignee` field instead. Removal on 2020-01-01 UTC."
   */
  user: IXGitHubUser | null;
}

/**
 * Autogenerated input type of UnfollowUser
 */
export interface IXGitHubUnfollowUserInput {
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;

  /**
   * ID of the user to unfollow.
   */
  userId: string;
}

/**
 * Autogenerated return type of UnfollowUser
 */
export interface IXGitHubUnfollowUserPayload {
  __typename: '_xGitHubUnfollowUserPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The user that was unfollowed.
   */
  user: IXGitHubUser | null;
}

/**
 * Represents a type that can be retrieved by a URL.
 */
export type _xGitHubUniformResourceLocatable =
  | IXGitHubBot
  | IXGitHubCheckRun
  | IXGitHubClosedEvent
  | IXGitHubCommit
  | IXGitHubConvertToDraftEvent
  | IXGitHubCrossReferencedEvent
  | IXGitHubGist
  | IXGitHubIssue
  | IXGitHubMannequin
  | IXGitHubMergedEvent
  | IXGitHubMilestone
  | IXGitHubOrganization
  | IXGitHubPullRequest
  | IXGitHubPullRequestCommit
  | IXGitHubReadyForReviewEvent
  | IXGitHubRelease
  | IXGitHubRepository
  | IXGitHubRepositoryTopic
  | IXGitHubReviewDismissedEvent
  | IXGitHubTeamDiscussion
  | IXGitHubTeamDiscussionComment
  | IXGitHubUser;

/**
 * Represents a type that can be retrieved by a URL.
 */
export interface IXGitHubUniformResourceLocatable {
  __typename: '_xGitHubUniformResourceLocatable';

  /**
   * The HTML path to this resource.
   */
  resourcePath: any;

  /**
   * The URL to this resource.
   */
  url: any;
}

/**
 * Represents an unknown signature on a Commit or Tag.
 */
export interface IXGitHubUnknownSignature {
  __typename: '_xGitHubUnknownSignature';

  /**
   * Email used to sign this object.
   */
  email: string;

  /**
   * True if the signature is valid and verified by GitHub.
   */
  isValid: boolean;

  /**
   * Payload for GPG signing object. Raw ODB object without the signature header.
   */
  payload: string;

  /**
   * ASCII-armored signature header from object.
   */
  signature: string;

  /**
   * GitHub user corresponding to the email signing this commit.
   */
  signer: IXGitHubUser | null;

  /**
   * The state of this signature. `VALID` if signature is valid and verified by
   * GitHub, otherwise represents reason why signature is considered invalid.
   */
  state: XGitHubGitSignatureState;

  /**
   * True if the signature was made with GitHub's signing key.
   */
  wasSignedByGitHub: boolean;
}

/**
 * Represents an 'unlabeled' event on a given issue or pull request.
 */
export interface IXGitHubUnlabeledEvent {
  __typename: '_xGitHubUnlabeledEvent';

  /**
   * Identifies the actor who performed the event.
   */
  actor: _xGitHubActor | null;

  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: any;
  id: string;

  /**
   * Identifies the label associated with the 'unlabeled' event.
   */
  label: IXGitHubLabel;

  /**
   * Identifies the `Labelable` associated with the event.
   */
  labelable: _xGitHubLabelable;
}

/**
 * Autogenerated input type of UnlinkRepositoryFromProject
 */
export interface IXGitHubUnlinkRepositoryFromProjectInput {
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;

  /**
   * The ID of the Project linked to the Repository.
   */
  projectId: string;

  /**
   * The ID of the Repository linked to the Project.
   */
  repositoryId: string;
}

/**
 * Autogenerated return type of UnlinkRepositoryFromProject
 */
export interface IXGitHubUnlinkRepositoryFromProjectPayload {
  __typename: '_xGitHubUnlinkRepositoryFromProjectPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The linked Project.
   */
  project: IXGitHubProject | null;

  /**
   * The linked Repository.
   */
  repository: IXGitHubRepository | null;
}

/**
 * Autogenerated input type of UnlockLockable
 */
export interface IXGitHubUnlockLockableInput {
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;

  /**
   * ID of the item to be unlocked.
   */
  lockableId: string;
}

/**
 * Autogenerated return type of UnlockLockable
 */
export interface IXGitHubUnlockLockablePayload {
  __typename: '_xGitHubUnlockLockablePayload';

  /**
   * Identifies the actor who performed the event.
   */
  actor: _xGitHubActor | null;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The item that was unlocked.
   */
  unlockedRecord: _xGitHubLockable | null;
}

/**
 * Represents an 'unlocked' event on a given issue or pull request.
 */
export interface IXGitHubUnlockedEvent {
  __typename: '_xGitHubUnlockedEvent';

  /**
   * Identifies the actor who performed the event.
   */
  actor: _xGitHubActor | null;

  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: any;
  id: string;

  /**
   * Object that was unlocked.
   */
  lockable: _xGitHubLockable;
}

/**
 * Autogenerated input type of UnmarkDiscussionCommentAsAnswer
 */
export interface IXGitHubUnmarkDiscussionCommentAsAnswerInput {
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;

  /**
   * The Node ID of the discussion comment to unmark as an answer.
   */
  id: string;
}

/**
 * Autogenerated return type of UnmarkDiscussionCommentAsAnswer
 */
export interface IXGitHubUnmarkDiscussionCommentAsAnswerPayload {
  __typename: '_xGitHubUnmarkDiscussionCommentAsAnswerPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The discussion that includes the comment.
   */
  discussion: IXGitHubDiscussion | null;
}

/**
 * Autogenerated input type of UnmarkFileAsViewed
 */
export interface IXGitHubUnmarkFileAsViewedInput {
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;

  /**
   * The path of the file to mark as unviewed
   */
  path: string;

  /**
   * The Node ID of the pull request.
   */
  pullRequestId: string;
}

/**
 * Autogenerated return type of UnmarkFileAsViewed
 */
export interface IXGitHubUnmarkFileAsViewedPayload {
  __typename: '_xGitHubUnmarkFileAsViewedPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The updated pull request.
   */
  pullRequest: IXGitHubPullRequest | null;
}

/**
 * Autogenerated input type of UnmarkIssueAsDuplicate
 */
export interface IXGitHubUnmarkIssueAsDuplicateInput {
  /**
   * ID of the issue or pull request currently considered canonical/authoritative/original.
   */
  canonicalId: string;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;

  /**
   * ID of the issue or pull request currently marked as a duplicate.
   */
  duplicateId: string;
}

/**
 * Autogenerated return type of UnmarkIssueAsDuplicate
 */
export interface IXGitHubUnmarkIssueAsDuplicatePayload {
  __typename: '_xGitHubUnmarkIssueAsDuplicatePayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The issue or pull request that was marked as a duplicate.
   */
  duplicate: _xGitHubIssueOrPullRequest | null;
}

/**
 * Represents an 'unmarked_as_duplicate' event on a given issue or pull request.
 */
export interface IXGitHubUnmarkedAsDuplicateEvent {
  __typename: '_xGitHubUnmarkedAsDuplicateEvent';

  /**
   * Identifies the actor who performed the event.
   */
  actor: _xGitHubActor | null;

  /**
   * The authoritative issue or pull request which has been duplicated by another.
   */
  canonical: _xGitHubIssueOrPullRequest | null;

  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: any;

  /**
   * The issue or pull request which has been marked as a duplicate of another.
   */
  duplicate: _xGitHubIssueOrPullRequest | null;
  id: string;

  /**
   * Canonical and duplicate belong to different repositories.
   */
  isCrossRepository: boolean;
}

/**
 * Autogenerated input type of UnminimizeComment
 */
export interface IXGitHubUnminimizeCommentInput {
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;

  /**
   * The Node ID of the subject to modify.
   */
  subjectId: string;
}

/**
 * Autogenerated return type of UnminimizeComment
 */
export interface IXGitHubUnminimizeCommentPayload {
  __typename: '_xGitHubUnminimizeCommentPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The comment that was unminimized.
   */
  unminimizedComment: _xGitHubMinimizable | null;
}

/**
 * Autogenerated input type of UnpinIssue
 */
export interface IXGitHubUnpinIssueInput {
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;

  /**
   * The ID of the issue to be unpinned
   */
  issueId: string;
}

/**
 * Autogenerated return type of UnpinIssue
 */
export interface IXGitHubUnpinIssuePayload {
  __typename: '_xGitHubUnpinIssuePayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The issue that was unpinned
   */
  issue: IXGitHubIssue | null;
}

/**
 * Represents an 'unpinned' event on a given issue or pull request.
 */
export interface IXGitHubUnpinnedEvent {
  __typename: '_xGitHubUnpinnedEvent';

  /**
   * Identifies the actor who performed the event.
   */
  actor: _xGitHubActor | null;

  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: any;
  id: string;

  /**
   * Identifies the issue associated with the event.
   */
  issue: IXGitHubIssue;
}

/**
 * Autogenerated input type of UnresolveReviewThread
 */
export interface IXGitHubUnresolveReviewThreadInput {
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;

  /**
   * The ID of the thread to unresolve
   */
  threadId: string;
}

/**
 * Autogenerated return type of UnresolveReviewThread
 */
export interface IXGitHubUnresolveReviewThreadPayload {
  __typename: '_xGitHubUnresolveReviewThreadPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The thread to resolve.
   */
  thread: IXGitHubPullRequestReviewThread | null;
}

/**
 * Represents an 'unsubscribed' event on a given `Subscribable`.
 */
export interface IXGitHubUnsubscribedEvent {
  __typename: '_xGitHubUnsubscribedEvent';

  /**
   * Identifies the actor who performed the event.
   */
  actor: _xGitHubActor | null;

  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: any;
  id: string;

  /**
   * Object referenced by event.
   */
  subscribable: _xGitHubSubscribable;
}

/**
 * Entities that can be updated.
 */
export type _xGitHubUpdatable =
  | IXGitHubCommitComment
  | IXGitHubDiscussion
  | IXGitHubDiscussionComment
  | IXGitHubGistComment
  | IXGitHubIssue
  | IXGitHubIssueComment
  | IXGitHubProject
  | IXGitHubPullRequest
  | IXGitHubPullRequestReview
  | IXGitHubPullRequestReviewComment
  | IXGitHubTeamDiscussion
  | IXGitHubTeamDiscussionComment;

/**
 * Entities that can be updated.
 */
export interface IXGitHubUpdatable {
  __typename: '_xGitHubUpdatable';

  /**
   * Check if the current viewer can update this object.
   */
  viewerCanUpdate: boolean;
}

/**
 * Comments that can be updated.
 */
export type _xGitHubUpdatableComment =
  | IXGitHubCommitComment
  | IXGitHubDiscussionComment
  | IXGitHubGistComment
  | IXGitHubIssue
  | IXGitHubIssueComment
  | IXGitHubPullRequest
  | IXGitHubPullRequestReview
  | IXGitHubPullRequestReviewComment
  | IXGitHubTeamDiscussion
  | IXGitHubTeamDiscussionComment;

/**
 * Comments that can be updated.
 */
export interface IXGitHubUpdatableComment {
  __typename: '_xGitHubUpdatableComment';

  /**
   * Reasons why the current viewer can not update this comment.
   */
  viewerCannotUpdateReasons: Array<XGitHubCommentCannotUpdateReason>;
}

/**
 * Autogenerated input type of UpdateBranchProtectionRule
 */
export interface IXGitHubUpdateBranchProtectionRuleInput {
  /**
   * Can this branch be deleted.
   */
  allowsDeletions?: boolean | null;

  /**
   * Are force pushes allowed on this branch.
   */
  allowsForcePushes?: boolean | null;

  /**
   * The global relay id of the branch protection rule to be updated.
   */
  branchProtectionRuleId: string;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;

  /**
   * Will new commits pushed to matching branches dismiss pull request review approvals.
   */
  dismissesStaleReviews?: boolean | null;

  /**
   * Can admins overwrite branch protection.
   */
  isAdminEnforced?: boolean | null;

  /**
   * The glob-like pattern used to determine matching branches.
   */
  pattern?: string | null;

  /**
   * A list of User, Team or App IDs allowed to push to matching branches.
   */
  pushActorIds?: Array<string> | null;

  /**
   * Number of approving reviews required to update matching branches.
   */
  requiredApprovingReviewCount?: number | null;

  /**
   * List of required status check contexts that must pass for commits to be accepted to matching branches.
   */
  requiredStatusCheckContexts?: Array<string> | null;

  /**
   * Are approving reviews required to update matching branches.
   */
  requiresApprovingReviews?: boolean | null;

  /**
   * Are reviews from code owners required to update matching branches.
   */
  requiresCodeOwnerReviews?: boolean | null;

  /**
   * Are commits required to be signed.
   */
  requiresCommitSignatures?: boolean | null;

  /**
   * Are conversations required to be resolved before merging.
   */
  requiresConversationResolution?: boolean | null;

  /**
   * Are merge commits prohibited from being pushed to this branch.
   */
  requiresLinearHistory?: boolean | null;

  /**
   * Are status checks required to update matching branches.
   */
  requiresStatusChecks?: boolean | null;

  /**
   * Are branches required to be up to date before merging.
   */
  requiresStrictStatusChecks?: boolean | null;

  /**
   * Is pushing to matching branches restricted.
   */
  restrictsPushes?: boolean | null;

  /**
   * Is dismissal of pull request reviews restricted.
   */
  restrictsReviewDismissals?: boolean | null;

  /**
   * A list of User or Team IDs allowed to dismiss reviews on pull requests targeting matching branches.
   */
  reviewDismissalActorIds?: Array<string> | null;
}

/**
 * Autogenerated return type of UpdateBranchProtectionRule
 */
export interface IXGitHubUpdateBranchProtectionRulePayload {
  __typename: '_xGitHubUpdateBranchProtectionRulePayload';

  /**
   * The newly created BranchProtectionRule.
   */
  branchProtectionRule: IXGitHubBranchProtectionRule | null;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;
}

/**
 * Autogenerated input type of UpdateCheckRun
 */
export interface IXGitHubUpdateCheckRunInput {
  /**
   * Possible further actions the integrator can perform, which a user may trigger.
   */
  actions?: Array<IXGitHubCheckRunAction> | null;

  /**
   * The node of the check.
   */
  checkRunId: string;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;

  /**
   * The time that the check run finished.
   */
  completedAt?: any | null;

  /**
   * The final conclusion of the check.
   */
  conclusion?: XGitHubCheckConclusionState | null;

  /**
   * The URL of the integrator's site that has the full details of the check.
   */
  detailsUrl?: any | null;

  /**
   * A reference for the run on the integrator's system.
   */
  externalId?: string | null;

  /**
   * The name of the check.
   */
  name?: string | null;

  /**
   * Descriptive details about the run.
   */
  output?: IXGitHubCheckRunOutput | null;

  /**
   * The node ID of the repository.
   */
  repositoryId: string;

  /**
   * The time that the check run began.
   */
  startedAt?: any | null;

  /**
   * The current status.
   */
  status?: XGitHubRequestableCheckStatusState | null;
}

/**
 * Autogenerated return type of UpdateCheckRun
 */
export interface IXGitHubUpdateCheckRunPayload {
  __typename: '_xGitHubUpdateCheckRunPayload';

  /**
   * The updated check run.
   */
  checkRun: IXGitHubCheckRun | null;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;
}

/**
 * Autogenerated input type of UpdateCheckSuitePreferences
 */
export interface IXGitHubUpdateCheckSuitePreferencesInput {
  /**
   * The check suite preferences to modify.
   */
  autoTriggerPreferences: Array<IXGitHubCheckSuiteAutoTriggerPreference>;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;

  /**
   * The Node ID of the repository.
   */
  repositoryId: string;
}

/**
 * Autogenerated return type of UpdateCheckSuitePreferences
 */
export interface IXGitHubUpdateCheckSuitePreferencesPayload {
  __typename: '_xGitHubUpdateCheckSuitePreferencesPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The updated repository.
   */
  repository: IXGitHubRepository | null;
}

/**
 * Autogenerated input type of UpdateDiscussionComment
 */
export interface IXGitHubUpdateDiscussionCommentInput {
  /**
   * The new contents of the comment body.
   */
  body: string;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;

  /**
   * The Node ID of the discussion comment to update.
   */
  commentId: string;
}

/**
 * Autogenerated return type of UpdateDiscussionComment
 */
export interface IXGitHubUpdateDiscussionCommentPayload {
  __typename: '_xGitHubUpdateDiscussionCommentPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The modified discussion comment.
   */
  comment: IXGitHubDiscussionComment | null;
}

/**
 * Autogenerated input type of UpdateDiscussion
 */
export interface IXGitHubUpdateDiscussionInput {
  /**
   * The new contents of the discussion body.
   */
  body?: string | null;

  /**
   * The Node ID of a discussion category within the same repository to change this discussion to.
   */
  categoryId?: string | null;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;

  /**
   * The Node ID of the discussion to update.
   */
  discussionId: string;

  /**
   * The new discussion title.
   */
  title?: string | null;
}

/**
 * Autogenerated return type of UpdateDiscussion
 */
export interface IXGitHubUpdateDiscussionPayload {
  __typename: '_xGitHubUpdateDiscussionPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The modified discussion.
   */
  discussion: IXGitHubDiscussion | null;
}

/**
 * Autogenerated input type of UpdateEnterpriseAdministratorRole
 */
export interface IXGitHubUpdateEnterpriseAdministratorRoleInput {
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;

  /**
   * The ID of the Enterprise which the admin belongs to.
   */
  enterpriseId: string;

  /**
   * The login of a administrator whose role is being changed.
   */
  login: string;

  /**
   * The new role for the Enterprise administrator.
   */
  role: XGitHubEnterpriseAdministratorRole;
}

/**
 * Autogenerated return type of UpdateEnterpriseAdministratorRole
 */
export interface IXGitHubUpdateEnterpriseAdministratorRolePayload {
  __typename: '_xGitHubUpdateEnterpriseAdministratorRolePayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * A message confirming the result of changing the administrator's role.
   */
  message: string | null;
}

/**
 * Autogenerated input type of UpdateEnterpriseAllowPrivateRepositoryForkingSetting
 */
export interface IXGitHubUpdateEnterpriseAllowPrivateRepositoryForkingSettingInput {
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;

  /**
   * The ID of the enterprise on which to set the allow private repository forking setting.
   */
  enterpriseId: string;

  /**
   * The value for the allow private repository forking setting on the enterprise.
   */
  settingValue: XGitHubEnterpriseEnabledDisabledSettingValue;
}

/**
 * Autogenerated return type of UpdateEnterpriseAllowPrivateRepositoryForkingSetting
 */
export interface IXGitHubUpdateEnterpriseAllowPrivateRepositoryForkingSettingPayload {
  __typename: '_xGitHubUpdateEnterpriseAllowPrivateRepositoryForkingSettingPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The enterprise with the updated allow private repository forking setting.
   */
  enterprise: IXGitHubEnterprise | null;

  /**
   * A message confirming the result of updating the allow private repository forking setting.
   */
  message: string | null;
}

/**
 * Autogenerated input type of UpdateEnterpriseDefaultRepositoryPermissionSetting
 */
export interface IXGitHubUpdateEnterpriseDefaultRepositoryPermissionSettingInput {
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;

  /**
   * The ID of the enterprise on which to set the base repository permission setting.
   */
  enterpriseId: string;

  /**
   * The value for the base repository permission setting on the enterprise.
   */
  settingValue: XGitHubEnterpriseDefaultRepositoryPermissionSettingValue;
}

/**
 * Autogenerated return type of UpdateEnterpriseDefaultRepositoryPermissionSetting
 */
export interface IXGitHubUpdateEnterpriseDefaultRepositoryPermissionSettingPayload {
  __typename: '_xGitHubUpdateEnterpriseDefaultRepositoryPermissionSettingPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The enterprise with the updated base repository permission setting.
   */
  enterprise: IXGitHubEnterprise | null;

  /**
   * A message confirming the result of updating the base repository permission setting.
   */
  message: string | null;
}

/**
 * Autogenerated input type of UpdateEnterpriseMembersCanChangeRepositoryVisibilitySetting
 */
export interface IXGitHubUpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingInput {
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;

  /**
   * The ID of the enterprise on which to set the members can change repository visibility setting.
   */
  enterpriseId: string;

  /**
   * The value for the members can change repository visibility setting on the enterprise.
   */
  settingValue: XGitHubEnterpriseEnabledDisabledSettingValue;
}

/**
 * Autogenerated return type of UpdateEnterpriseMembersCanChangeRepositoryVisibilitySetting
 */
export interface IXGitHubUpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingPayload {
  __typename: '_xGitHubUpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The enterprise with the updated members can change repository visibility setting.
   */
  enterprise: IXGitHubEnterprise | null;

  /**
   * A message confirming the result of updating the members can change repository visibility setting.
   */
  message: string | null;
}

/**
 * Autogenerated input type of UpdateEnterpriseMembersCanCreateRepositoriesSetting
 */
export interface IXGitHubUpdateEnterpriseMembersCanCreateRepositoriesSettingInput {
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;

  /**
   * The ID of the enterprise on which to set the members can create repositories setting.
   */
  enterpriseId: string;

  /**
   * Allow members to create internal repositories. Defaults to current value.
   */
  membersCanCreateInternalRepositories?: boolean | null;

  /**
   * Allow members to create private repositories. Defaults to current value.
   */
  membersCanCreatePrivateRepositories?: boolean | null;

  /**
   * Allow members to create public repositories. Defaults to current value.
   */
  membersCanCreatePublicRepositories?: boolean | null;

  /**
   * When false, allow member organizations to set their own repository creation member privileges.
   */
  membersCanCreateRepositoriesPolicyEnabled?: boolean | null;

  /**
   * Value for the members can create repositories setting on the enterprise. This
   * or the granular public/private/internal allowed fields (but not both) must be provided.
   */
  settingValue?: XGitHubEnterpriseMembersCanCreateRepositoriesSettingValue | null;
}

/**
 * Autogenerated return type of UpdateEnterpriseMembersCanCreateRepositoriesSetting
 */
export interface IXGitHubUpdateEnterpriseMembersCanCreateRepositoriesSettingPayload {
  __typename: '_xGitHubUpdateEnterpriseMembersCanCreateRepositoriesSettingPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The enterprise with the updated members can create repositories setting.
   */
  enterprise: IXGitHubEnterprise | null;

  /**
   * A message confirming the result of updating the members can create repositories setting.
   */
  message: string | null;
}

/**
 * Autogenerated input type of UpdateEnterpriseMembersCanDeleteIssuesSetting
 */
export interface IXGitHubUpdateEnterpriseMembersCanDeleteIssuesSettingInput {
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;

  /**
   * The ID of the enterprise on which to set the members can delete issues setting.
   */
  enterpriseId: string;

  /**
   * The value for the members can delete issues setting on the enterprise.
   */
  settingValue: XGitHubEnterpriseEnabledDisabledSettingValue;
}

/**
 * Autogenerated return type of UpdateEnterpriseMembersCanDeleteIssuesSetting
 */
export interface IXGitHubUpdateEnterpriseMembersCanDeleteIssuesSettingPayload {
  __typename: '_xGitHubUpdateEnterpriseMembersCanDeleteIssuesSettingPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The enterprise with the updated members can delete issues setting.
   */
  enterprise: IXGitHubEnterprise | null;

  /**
   * A message confirming the result of updating the members can delete issues setting.
   */
  message: string | null;
}

/**
 * Autogenerated input type of UpdateEnterpriseMembersCanDeleteRepositoriesSetting
 */
export interface IXGitHubUpdateEnterpriseMembersCanDeleteRepositoriesSettingInput {
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;

  /**
   * The ID of the enterprise on which to set the members can delete repositories setting.
   */
  enterpriseId: string;

  /**
   * The value for the members can delete repositories setting on the enterprise.
   */
  settingValue: XGitHubEnterpriseEnabledDisabledSettingValue;
}

/**
 * Autogenerated return type of UpdateEnterpriseMembersCanDeleteRepositoriesSetting
 */
export interface IXGitHubUpdateEnterpriseMembersCanDeleteRepositoriesSettingPayload {
  __typename: '_xGitHubUpdateEnterpriseMembersCanDeleteRepositoriesSettingPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The enterprise with the updated members can delete repositories setting.
   */
  enterprise: IXGitHubEnterprise | null;

  /**
   * A message confirming the result of updating the members can delete repositories setting.
   */
  message: string | null;
}

/**
 * Autogenerated input type of UpdateEnterpriseMembersCanInviteCollaboratorsSetting
 */
export interface IXGitHubUpdateEnterpriseMembersCanInviteCollaboratorsSettingInput {
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;

  /**
   * The ID of the enterprise on which to set the members can invite collaborators setting.
   */
  enterpriseId: string;

  /**
   * The value for the members can invite collaborators setting on the enterprise.
   */
  settingValue: XGitHubEnterpriseEnabledDisabledSettingValue;
}

/**
 * Autogenerated return type of UpdateEnterpriseMembersCanInviteCollaboratorsSetting
 */
export interface IXGitHubUpdateEnterpriseMembersCanInviteCollaboratorsSettingPayload {
  __typename: '_xGitHubUpdateEnterpriseMembersCanInviteCollaboratorsSettingPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The enterprise with the updated members can invite collaborators setting.
   */
  enterprise: IXGitHubEnterprise | null;

  /**
   * A message confirming the result of updating the members can invite collaborators setting.
   */
  message: string | null;
}

/**
 * Autogenerated input type of UpdateEnterpriseMembersCanMakePurchasesSetting
 */
export interface IXGitHubUpdateEnterpriseMembersCanMakePurchasesSettingInput {
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;

  /**
   * The ID of the enterprise on which to set the members can make purchases setting.
   */
  enterpriseId: string;

  /**
   * The value for the members can make purchases setting on the enterprise.
   */
  settingValue: XGitHubEnterpriseMembersCanMakePurchasesSettingValue;
}

/**
 * Autogenerated return type of UpdateEnterpriseMembersCanMakePurchasesSetting
 */
export interface IXGitHubUpdateEnterpriseMembersCanMakePurchasesSettingPayload {
  __typename: '_xGitHubUpdateEnterpriseMembersCanMakePurchasesSettingPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The enterprise with the updated members can make purchases setting.
   */
  enterprise: IXGitHubEnterprise | null;

  /**
   * A message confirming the result of updating the members can make purchases setting.
   */
  message: string | null;
}

/**
 * Autogenerated input type of UpdateEnterpriseMembersCanUpdateProtectedBranchesSetting
 */
export interface IXGitHubUpdateEnterpriseMembersCanUpdateProtectedBranchesSettingInput {
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;

  /**
   * The ID of the enterprise on which to set the members can update protected branches setting.
   */
  enterpriseId: string;

  /**
   * The value for the members can update protected branches setting on the enterprise.
   */
  settingValue: XGitHubEnterpriseEnabledDisabledSettingValue;
}

/**
 * Autogenerated return type of UpdateEnterpriseMembersCanUpdateProtectedBranchesSetting
 */
export interface IXGitHubUpdateEnterpriseMembersCanUpdateProtectedBranchesSettingPayload {
  __typename: '_xGitHubUpdateEnterpriseMembersCanUpdateProtectedBranchesSettingPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The enterprise with the updated members can update protected branches setting.
   */
  enterprise: IXGitHubEnterprise | null;

  /**
   * A message confirming the result of updating the members can update protected branches setting.
   */
  message: string | null;
}

/**
 * Autogenerated input type of UpdateEnterpriseMembersCanViewDependencyInsightsSetting
 */
export interface IXGitHubUpdateEnterpriseMembersCanViewDependencyInsightsSettingInput {
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;

  /**
   * The ID of the enterprise on which to set the members can view dependency insights setting.
   */
  enterpriseId: string;

  /**
   * The value for the members can view dependency insights setting on the enterprise.
   */
  settingValue: XGitHubEnterpriseEnabledDisabledSettingValue;
}

/**
 * Autogenerated return type of UpdateEnterpriseMembersCanViewDependencyInsightsSetting
 */
export interface IXGitHubUpdateEnterpriseMembersCanViewDependencyInsightsSettingPayload {
  __typename: '_xGitHubUpdateEnterpriseMembersCanViewDependencyInsightsSettingPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The enterprise with the updated members can view dependency insights setting.
   */
  enterprise: IXGitHubEnterprise | null;

  /**
   * A message confirming the result of updating the members can view dependency insights setting.
   */
  message: string | null;
}

/**
 * Autogenerated input type of UpdateEnterpriseOrganizationProjectsSetting
 */
export interface IXGitHubUpdateEnterpriseOrganizationProjectsSettingInput {
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;

  /**
   * The ID of the enterprise on which to set the organization projects setting.
   */
  enterpriseId: string;

  /**
   * The value for the organization projects setting on the enterprise.
   */
  settingValue: XGitHubEnterpriseEnabledDisabledSettingValue;
}

/**
 * Autogenerated return type of UpdateEnterpriseOrganizationProjectsSetting
 */
export interface IXGitHubUpdateEnterpriseOrganizationProjectsSettingPayload {
  __typename: '_xGitHubUpdateEnterpriseOrganizationProjectsSettingPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The enterprise with the updated organization projects setting.
   */
  enterprise: IXGitHubEnterprise | null;

  /**
   * A message confirming the result of updating the organization projects setting.
   */
  message: string | null;
}

/**
 * Autogenerated input type of UpdateEnterpriseProfile
 */
export interface IXGitHubUpdateEnterpriseProfileInput {
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;

  /**
   * The description of the enterprise.
   */
  description?: string | null;

  /**
   * The Enterprise ID to update.
   */
  enterpriseId: string;

  /**
   * The location of the enterprise.
   */
  location?: string | null;

  /**
   * The name of the enterprise.
   */
  name?: string | null;

  /**
   * The URL of the enterprise's website.
   */
  websiteUrl?: string | null;
}

/**
 * Autogenerated return type of UpdateEnterpriseProfile
 */
export interface IXGitHubUpdateEnterpriseProfilePayload {
  __typename: '_xGitHubUpdateEnterpriseProfilePayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The updated enterprise.
   */
  enterprise: IXGitHubEnterprise | null;
}

/**
 * Autogenerated input type of UpdateEnterpriseRepositoryProjectsSetting
 */
export interface IXGitHubUpdateEnterpriseRepositoryProjectsSettingInput {
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;

  /**
   * The ID of the enterprise on which to set the repository projects setting.
   */
  enterpriseId: string;

  /**
   * The value for the repository projects setting on the enterprise.
   */
  settingValue: XGitHubEnterpriseEnabledDisabledSettingValue;
}

/**
 * Autogenerated return type of UpdateEnterpriseRepositoryProjectsSetting
 */
export interface IXGitHubUpdateEnterpriseRepositoryProjectsSettingPayload {
  __typename: '_xGitHubUpdateEnterpriseRepositoryProjectsSettingPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The enterprise with the updated repository projects setting.
   */
  enterprise: IXGitHubEnterprise | null;

  /**
   * A message confirming the result of updating the repository projects setting.
   */
  message: string | null;
}

/**
 * Autogenerated input type of UpdateEnterpriseTeamDiscussionsSetting
 */
export interface IXGitHubUpdateEnterpriseTeamDiscussionsSettingInput {
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;

  /**
   * The ID of the enterprise on which to set the team discussions setting.
   */
  enterpriseId: string;

  /**
   * The value for the team discussions setting on the enterprise.
   */
  settingValue: XGitHubEnterpriseEnabledDisabledSettingValue;
}

/**
 * Autogenerated return type of UpdateEnterpriseTeamDiscussionsSetting
 */
export interface IXGitHubUpdateEnterpriseTeamDiscussionsSettingPayload {
  __typename: '_xGitHubUpdateEnterpriseTeamDiscussionsSettingPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The enterprise with the updated team discussions setting.
   */
  enterprise: IXGitHubEnterprise | null;

  /**
   * A message confirming the result of updating the team discussions setting.
   */
  message: string | null;
}

/**
 * Autogenerated input type of UpdateEnterpriseTwoFactorAuthenticationRequiredSetting
 */
export interface IXGitHubUpdateEnterpriseTwoFactorAuthenticationRequiredSettingInput {
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;

  /**
   * The ID of the enterprise on which to set the two factor authentication required setting.
   */
  enterpriseId: string;

  /**
   * The value for the two factor authentication required setting on the enterprise.
   */
  settingValue: XGitHubEnterpriseEnabledSettingValue;
}

/**
 * Autogenerated return type of UpdateEnterpriseTwoFactorAuthenticationRequiredSetting
 */
export interface IXGitHubUpdateEnterpriseTwoFactorAuthenticationRequiredSettingPayload {
  __typename: '_xGitHubUpdateEnterpriseTwoFactorAuthenticationRequiredSettingPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The enterprise with the updated two factor authentication required setting.
   */
  enterprise: IXGitHubEnterprise | null;

  /**
   * A message confirming the result of updating the two factor authentication required setting.
   */
  message: string | null;
}

/**
 * Autogenerated input type of UpdateEnvironment
 */
export interface IXGitHubUpdateEnvironmentInput {
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;

  /**
   * The node ID of the environment.
   */
  environmentId: string;

  /**
   * The ids of users or teams that can approve deployments to this environment
   */
  reviewers?: Array<string> | null;

  /**
   * The wait timer in minutes.
   */
  waitTimer?: number | null;
}

/**
 * Autogenerated return type of UpdateEnvironment
 */
export interface IXGitHubUpdateEnvironmentPayload {
  __typename: '_xGitHubUpdateEnvironmentPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The updated environment.
   */
  environment: IXGitHubEnvironment | null;
}

/**
 * Autogenerated input type of UpdateIpAllowListEnabledSetting
 */
export interface IXGitHubUpdateIpAllowListEnabledSettingInput {
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;

  /**
   * The ID of the owner on which to set the IP allow list enabled setting.
   */
  ownerId: string;

  /**
   * The value for the IP allow list enabled setting.
   */
  settingValue: XGitHubIpAllowListEnabledSettingValue;
}

/**
 * Autogenerated return type of UpdateIpAllowListEnabledSetting
 */
export interface IXGitHubUpdateIpAllowListEnabledSettingPayload {
  __typename: '_xGitHubUpdateIpAllowListEnabledSettingPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The IP allow list owner on which the setting was updated.
   */
  owner: _xGitHubIpAllowListOwner | null;
}

/**
 * Autogenerated input type of UpdateIpAllowListEntry
 */
export interface IXGitHubUpdateIpAllowListEntryInput {
  /**
   * An IP address or range of addresses in CIDR notation.
   */
  allowListValue: string;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;

  /**
   * The ID of the IP allow list entry to update.
   */
  ipAllowListEntryId: string;

  /**
   * Whether the IP allow list entry is active when an IP allow list is enabled.
   */
  isActive: boolean;

  /**
   * An optional name for the IP allow list entry.
   */
  name?: string | null;
}

/**
 * Autogenerated return type of UpdateIpAllowListEntry
 */
export interface IXGitHubUpdateIpAllowListEntryPayload {
  __typename: '_xGitHubUpdateIpAllowListEntryPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The IP allow list entry that was updated.
   */
  ipAllowListEntry: IXGitHubIpAllowListEntry | null;
}

/**
 * Autogenerated input type of UpdateIpAllowListForInstalledAppsEnabledSetting
 */
export interface IXGitHubUpdateIpAllowListForInstalledAppsEnabledSettingInput {
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;

  /**
   * The ID of the owner.
   */
  ownerId: string;

  /**
   * The value for the IP allow list configuration for installed GitHub Apps setting.
   */
  settingValue: XGitHubIpAllowListForInstalledAppsEnabledSettingValue;
}

/**
 * Autogenerated return type of UpdateIpAllowListForInstalledAppsEnabledSetting
 */
export interface IXGitHubUpdateIpAllowListForInstalledAppsEnabledSettingPayload {
  __typename: '_xGitHubUpdateIpAllowListForInstalledAppsEnabledSettingPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The IP allow list owner on which the setting was updated.
   */
  owner: _xGitHubIpAllowListOwner | null;
}

/**
 * Autogenerated input type of UpdateIssueComment
 */
export interface IXGitHubUpdateIssueCommentInput {
  /**
   * The updated text of the comment.
   */
  body: string;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;

  /**
   * The ID of the IssueComment to modify.
   */
  id: string;
}

/**
 * Autogenerated return type of UpdateIssueComment
 */
export interface IXGitHubUpdateIssueCommentPayload {
  __typename: '_xGitHubUpdateIssueCommentPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The updated comment.
   */
  issueComment: IXGitHubIssueComment | null;
}

/**
 * Autogenerated input type of UpdateIssue
 */
export interface IXGitHubUpdateIssueInput {
  /**
   * An array of Node IDs of users for this issue.
   */
  assigneeIds?: Array<string> | null;

  /**
   * The body for the issue description.
   */
  body?: string | null;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;

  /**
   * The ID of the Issue to modify.
   */
  id: string;

  /**
   * An array of Node IDs of labels for this issue.
   */
  labelIds?: Array<string> | null;

  /**
   * The Node ID of the milestone for this issue.
   */
  milestoneId?: string | null;

  /**
   * An array of Node IDs for projects associated with this issue.
   */
  projectIds?: Array<string> | null;

  /**
   * The desired issue state.
   */
  state?: XGitHubIssueState | null;

  /**
   * The title for the issue.
   */
  title?: string | null;
}

/**
 * Autogenerated return type of UpdateIssue
 */
export interface IXGitHubUpdateIssuePayload {
  __typename: '_xGitHubUpdateIssuePayload';

  /**
   * Identifies the actor who performed the event.
   */
  actor: _xGitHubActor | null;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The issue.
   */
  issue: IXGitHubIssue | null;
}

/**
 * Autogenerated input type of UpdateNotificationRestrictionSetting
 */
export interface IXGitHubUpdateNotificationRestrictionSettingInput {
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;

  /**
   * The ID of the owner on which to set the restrict notifications setting.
   */
  ownerId: string;

  /**
   * The value for the restrict notifications setting.
   */
  settingValue: XGitHubNotificationRestrictionSettingValue;
}

/**
 * Autogenerated return type of UpdateNotificationRestrictionSetting
 */
export interface IXGitHubUpdateNotificationRestrictionSettingPayload {
  __typename: '_xGitHubUpdateNotificationRestrictionSettingPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The owner on which the setting was updated.
   */
  owner: _xGitHubVerifiableDomainOwner | null;
}

/**
 * Autogenerated input type of UpdateProjectCard
 */
export interface IXGitHubUpdateProjectCardInput {
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;

  /**
   * Whether or not the ProjectCard should be archived
   */
  isArchived?: boolean | null;

  /**
   * The note of ProjectCard.
   */
  note?: string | null;

  /**
   * The ProjectCard ID to update.
   */
  projectCardId: string;
}

/**
 * Autogenerated return type of UpdateProjectCard
 */
export interface IXGitHubUpdateProjectCardPayload {
  __typename: '_xGitHubUpdateProjectCardPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The updated ProjectCard.
   */
  projectCard: IXGitHubProjectCard | null;
}

/**
 * Autogenerated input type of UpdateProjectColumn
 */
export interface IXGitHubUpdateProjectColumnInput {
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;

  /**
   * The name of project column.
   */
  name: string;

  /**
   * The ProjectColumn ID to update.
   */
  projectColumnId: string;
}

/**
 * Autogenerated return type of UpdateProjectColumn
 */
export interface IXGitHubUpdateProjectColumnPayload {
  __typename: '_xGitHubUpdateProjectColumnPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The updated project column.
   */
  projectColumn: IXGitHubProjectColumn | null;
}

/**
 * Autogenerated input type of UpdateProject
 */
export interface IXGitHubUpdateProjectInput {
  /**
   * The description of project.
   */
  body?: string | null;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;

  /**
   * The name of project.
   */
  name?: string | null;

  /**
   * The Project ID to update.
   */
  projectId: string;

  /**
   * Whether the project is public or not.
   */
  public?: boolean | null;

  /**
   * Whether the project is open or closed.
   */
  state?: XGitHubProjectState | null;
}

/**
 * Autogenerated return type of UpdateProject
 */
export interface IXGitHubUpdateProjectPayload {
  __typename: '_xGitHubUpdateProjectPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The updated project.
   */
  project: IXGitHubProject | null;
}

/**
 * Autogenerated input type of UpdatePullRequest
 */
export interface IXGitHubUpdatePullRequestInput {
  /**
   * An array of Node IDs of users for this pull request.
   */
  assigneeIds?: Array<string> | null;

  /**
   * The name of the branch you want your changes pulled into. This should be an existing branch
   * on the current repository.
   */
  baseRefName?: string | null;

  /**
   * The contents of the pull request.
   */
  body?: string | null;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;

  /**
   * An array of Node IDs of labels for this pull request.
   */
  labelIds?: Array<string> | null;

  /**
   * Indicates whether maintainers can modify the pull request.
   */
  maintainerCanModify?: boolean | null;

  /**
   * The Node ID of the milestone for this pull request.
   */
  milestoneId?: string | null;

  /**
   * An array of Node IDs for projects associated with this pull request.
   */
  projectIds?: Array<string> | null;

  /**
   * The Node ID of the pull request.
   */
  pullRequestId: string;

  /**
   * The target state of the pull request.
   */
  state?: XGitHubPullRequestUpdateState | null;

  /**
   * The title of the pull request.
   */
  title?: string | null;
}

/**
 * Autogenerated return type of UpdatePullRequest
 */
export interface IXGitHubUpdatePullRequestPayload {
  __typename: '_xGitHubUpdatePullRequestPayload';

  /**
   * Identifies the actor who performed the event.
   */
  actor: _xGitHubActor | null;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The updated pull request.
   */
  pullRequest: IXGitHubPullRequest | null;
}

/**
 * Autogenerated input type of UpdatePullRequestReviewComment
 */
export interface IXGitHubUpdatePullRequestReviewCommentInput {
  /**
   * The text of the comment.
   */
  body: string;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;

  /**
   * The Node ID of the comment to modify.
   */
  pullRequestReviewCommentId: string;
}

/**
 * Autogenerated return type of UpdatePullRequestReviewComment
 */
export interface IXGitHubUpdatePullRequestReviewCommentPayload {
  __typename: '_xGitHubUpdatePullRequestReviewCommentPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The updated comment.
   */
  pullRequestReviewComment: IXGitHubPullRequestReviewComment | null;
}

/**
 * Autogenerated input type of UpdatePullRequestReview
 */
export interface IXGitHubUpdatePullRequestReviewInput {
  /**
   * The contents of the pull request review body.
   */
  body: string;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;

  /**
   * The Node ID of the pull request review to modify.
   */
  pullRequestReviewId: string;
}

/**
 * Autogenerated return type of UpdatePullRequestReview
 */
export interface IXGitHubUpdatePullRequestReviewPayload {
  __typename: '_xGitHubUpdatePullRequestReviewPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The updated pull request review.
   */
  pullRequestReview: IXGitHubPullRequestReview | null;
}

/**
 * Autogenerated input type of UpdateRef
 */
export interface IXGitHubUpdateRefInput {
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;

  /**
   * Permit updates of branch Refs that are not fast-forwards?
   * @default false
   */
  force?: boolean | null;

  /**
   * The GitObjectID that the Ref shall be updated to target.
   */
  oid: any;

  /**
   * The Node ID of the Ref to be updated.
   */
  refId: string;
}

/**
 * Autogenerated return type of UpdateRef
 */
export interface IXGitHubUpdateRefPayload {
  __typename: '_xGitHubUpdateRefPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The updated Ref.
   */
  ref: IXGitHubRef | null;
}

/**
 * Autogenerated input type of UpdateRepository
 */
export interface IXGitHubUpdateRepositoryInput {
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;

  /**
   * A new description for the repository. Pass an empty string to erase the existing description.
   */
  description?: string | null;

  /**
   * Indicates if the repository should have the issues feature enabled.
   */
  hasIssuesEnabled?: boolean | null;

  /**
   * Indicates if the repository should have the project boards feature enabled.
   */
  hasProjectsEnabled?: boolean | null;

  /**
   * Indicates if the repository should have the wiki feature enabled.
   */
  hasWikiEnabled?: boolean | null;

  /**
   * The URL for a web page about this repository. Pass an empty string to erase the existing URL.
   */
  homepageUrl?: any | null;

  /**
   * The new name of the repository.
   */
  name?: string | null;

  /**
   * The ID of the repository to update.
   */
  repositoryId: string;

  /**
   * Whether this repository should be marked as a template such that anyone who
   * can access it can create new repositories with the same files and directory structure.
   */
  template?: boolean | null;
}

/**
 * Autogenerated return type of UpdateRepository
 */
export interface IXGitHubUpdateRepositoryPayload {
  __typename: '_xGitHubUpdateRepositoryPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The updated repository.
   */
  repository: IXGitHubRepository | null;
}

/**
 * Autogenerated input type of UpdateSubscription
 */
export interface IXGitHubUpdateSubscriptionInput {
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;

  /**
   * The new state of the subscription.
   */
  state: XGitHubSubscriptionState;

  /**
   * The Node ID of the subscribable object to modify.
   */
  subscribableId: string;
}

/**
 * Autogenerated return type of UpdateSubscription
 */
export interface IXGitHubUpdateSubscriptionPayload {
  __typename: '_xGitHubUpdateSubscriptionPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The input subscribable entity.
   */
  subscribable: _xGitHubSubscribable | null;
}

/**
 * Autogenerated input type of UpdateTeamDiscussionComment
 */
export interface IXGitHubUpdateTeamDiscussionCommentInput {
  /**
   * The updated text of the comment.
   */
  body: string;

  /**
   * The current version of the body content.
   */
  bodyVersion?: string | null;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;

  /**
   * The ID of the comment to modify.
   */
  id: string;
}

/**
 * Autogenerated return type of UpdateTeamDiscussionComment
 */
export interface IXGitHubUpdateTeamDiscussionCommentPayload {
  __typename: '_xGitHubUpdateTeamDiscussionCommentPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The updated comment.
   */
  teamDiscussionComment: IXGitHubTeamDiscussionComment | null;
}

/**
 * Autogenerated input type of UpdateTeamDiscussion
 */
export interface IXGitHubUpdateTeamDiscussionInput {
  /**
   * The updated text of the discussion.
   */
  body?: string | null;

  /**
   * The current version of the body content. If provided, this update operation
   * will be rejected if the given version does not match the latest version on the server.
   */
  bodyVersion?: string | null;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;

  /**
   * The Node ID of the discussion to modify.
   */
  id: string;

  /**
   * If provided, sets the pinned state of the updated discussion.
   */
  pinned?: boolean | null;

  /**
   * The updated title of the discussion.
   */
  title?: string | null;
}

/**
 * Autogenerated return type of UpdateTeamDiscussion
 */
export interface IXGitHubUpdateTeamDiscussionPayload {
  __typename: '_xGitHubUpdateTeamDiscussionPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The updated discussion.
   */
  teamDiscussion: IXGitHubTeamDiscussion | null;
}

/**
 * Autogenerated input type of UpdateTopics
 */
export interface IXGitHubUpdateTopicsInput {
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;

  /**
   * The Node ID of the repository.
   */
  repositoryId: string;

  /**
   * An array of topic names.
   */
  topicNames: Array<string>;
}

/**
 * Autogenerated return type of UpdateTopics
 */
export interface IXGitHubUpdateTopicsPayload {
  __typename: '_xGitHubUpdateTopicsPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * Names of the provided topics that are not valid.
   */
  invalidTopicNames: Array<string> | null;

  /**
   * The updated repository.
   */
  repository: IXGitHubRepository | null;
}

/**
 * A user is an individual's account on GitHub that owns repositories and can make new content.
 */
export interface IXGitHubUser {
  __typename: '_xGitHubUser';

  /**
   * Determine if this repository owner has any items that can be pinned to their profile.
   */
  anyPinnableItems: boolean;

  /**
   * A URL pointing to the user's public avatar.
   */
  avatarUrl: any;

  /**
   * The user's public profile bio.
   */
  bio: string | null;

  /**
   * The user's public profile bio as HTML.
   */
  bioHTML: any;

  /**
   * Could this user receive email notifications, if the organization had notification restrictions enabled?
   */
  canReceiveOrganizationEmailsWhenNotificationsRestricted: boolean;

  /**
   * A list of commit comments made by this user.
   */
  commitComments: IXGitHubCommitCommentConnection;

  /**
   * The user's public profile company.
   */
  company: string | null;

  /**
   * The user's public profile company as HTML.
   */
  companyHTML: any;

  /**
   * The collection of contributions this user has made to different repositories.
   */
  contributionsCollection: IXGitHubContributionsCollection;

  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: any;

  /**
   * Identifies the primary key from the database.
   */
  databaseId: number | null;

  /**
   * The user's publicly visible profile email.
   */
  email: string;

  /**
   * The estimated next GitHub Sponsors payout for this user/organization in cents (USD).
   */
  estimatedNextSponsorsPayoutInCents: number;

  /**
   * A list of users the given user is followed by.
   */
  followers: IXGitHubFollowerConnection;

  /**
   * A list of users the given user is following.
   */
  following: IXGitHubFollowingConnection;

  /**
   * Find gist by repo name.
   */
  gist: IXGitHubGist | null;

  /**
   * A list of gist comments made by this user.
   */
  gistComments: IXGitHubGistCommentConnection;

  /**
   * A list of the Gists the user has created.
   */
  gists: IXGitHubGistConnection;

  /**
   * True if this user/organization has a GitHub Sponsors listing.
   */
  hasSponsorsListing: boolean;

  /**
   * The hovercard information for this user in a given context
   */
  hovercard: IXGitHubHovercard;
  id: string;

  /**
   * The interaction ability settings for this user.
   */
  interactionAbility: IXGitHubRepositoryInteractionAbility | null;

  /**
   * Whether or not this user is a participant in the GitHub Security Bug Bounty.
   */
  isBountyHunter: boolean;

  /**
   * Whether or not this user is a participant in the GitHub Campus Experts Program.
   */
  isCampusExpert: boolean;

  /**
   * Whether or not this user is a GitHub Developer Program member.
   */
  isDeveloperProgramMember: boolean;

  /**
   * Whether or not this user is a GitHub employee.
   */
  isEmployee: boolean;

  /**
   * Whether or not this user is following the viewer. Inverse of viewer_is_following
   */
  isFollowingViewer: boolean;

  /**
   * Whether or not this user is a member of the GitHub Stars Program.
   */
  isGitHubStar: boolean;

  /**
   * Whether or not the user has marked themselves as for hire.
   */
  isHireable: boolean;

  /**
   * Whether or not this user is a site administrator.
   */
  isSiteAdmin: boolean;

  /**
   * Check if the given account is sponsoring this user/organization.
   */
  isSponsoredBy: boolean;

  /**
   * True if the viewer is sponsored by this user/organization.
   */
  isSponsoringViewer: boolean;

  /**
   * Whether or not this user is the viewing user.
   */
  isViewer: boolean;

  /**
   * A list of issue comments made by this user.
   */
  issueComments: IXGitHubIssueCommentConnection;

  /**
   * A list of issues associated with this user.
   */
  issues: IXGitHubIssueConnection;

  /**
   * Showcases a selection of repositories and gists that the profile owner has
   * either curated or that have been selected automatically based on popularity.
   */
  itemShowcase: IXGitHubProfileItemShowcase;

  /**
   * The user's public profile location.
   */
  location: string | null;

  /**
   * The username used to login.
   */
  login: string;

  /**
   * The estimated monthly GitHub Sponsors income for this user/organization in cents (USD).
   */
  monthlyEstimatedSponsorsIncomeInCents: number;

  /**
   * The user's public profile name.
   */
  name: string | null;

  /**
   * Find an organization by its login that the user belongs to.
   */
  organization: IXGitHubOrganization | null;

  /**
   * Verified email addresses that match verified domains for a specified organization the user is a member of.
   */
  organizationVerifiedDomainEmails: Array<string>;

  /**
   * A list of organizations the user belongs to.
   */
  organizations: IXGitHubOrganizationConnection;

  /**
   * A list of packages under the owner.
   */
  packages: IXGitHubPackageConnection;

  /**
   * A list of repositories and gists this profile owner can pin to their profile.
   */
  pinnableItems: IXGitHubPinnableItemConnection;

  /**
   * A list of repositories and gists this profile owner has pinned to their profile
   */
  pinnedItems: IXGitHubPinnableItemConnection;

  /**
   * Returns how many more items this profile owner can pin to their profile.
   */
  pinnedItemsRemaining: number;

  /**
   * Find project by number.
   */
  project: IXGitHubProject | null;

  /**
   * A list of projects under the owner.
   */
  projects: IXGitHubProjectConnection;

  /**
   * The HTTP path listing user's projects
   */
  projectsResourcePath: any;

  /**
   * The HTTP URL listing user's projects
   */
  projectsUrl: any;

  /**
   * A list of public keys associated with this user.
   */
  publicKeys: IXGitHubPublicKeyConnection;

  /**
   * A list of pull requests associated with this user.
   */
  pullRequests: IXGitHubPullRequestConnection;

  /**
   * A list of repositories that the user owns.
   */
  repositories: IXGitHubRepositoryConnection;

  /**
   * A list of repositories that the user recently contributed to.
   */
  repositoriesContributedTo: IXGitHubRepositoryConnection;

  /**
   * Find Repository.
   */
  repository: IXGitHubRepository | null;

  /**
   * Discussion comments this user has authored.
   */
  repositoryDiscussionComments: IXGitHubDiscussionCommentConnection;

  /**
   * Discussions this user has started.
   */
  repositoryDiscussions: IXGitHubDiscussionConnection;

  /**
   * The HTTP path for this user
   */
  resourcePath: any;

  /**
   * Replies this user has saved
   */
  savedReplies: IXGitHubSavedReplyConnection | null;

  /**
   * List of users and organizations this entity is sponsoring.
   */
  sponsoring: IXGitHubSponsorConnection;

  /**
   * List of sponsors for this user or organization.
   */
  sponsors: IXGitHubSponsorConnection;

  /**
   * Events involving this sponsorable, such as new sponsorships.
   */
  sponsorsActivities: IXGitHubSponsorsActivityConnection;

  /**
   * The GitHub Sponsors listing for this user or organization.
   */
  sponsorsListing: IXGitHubSponsorsListing | null;

  /**
   * The viewer's sponsorship of this entity.
   */
  sponsorshipForViewerAsSponsor: IXGitHubSponsorship | null;

  /**
   * List of sponsorship updates sent from this sponsorable to sponsors.
   */
  sponsorshipNewsletters: IXGitHubSponsorshipNewsletterConnection;

  /**
   * This object's sponsorships as the maintainer.
   */
  sponsorshipsAsMaintainer: IXGitHubSponsorshipConnection;

  /**
   * This object's sponsorships as the sponsor.
   */
  sponsorshipsAsSponsor: IXGitHubSponsorshipConnection;

  /**
   * Repositories the user has starred.
   */
  starredRepositories: IXGitHubStarredRepositoryConnection;

  /**
   * The user's description of what they're currently doing.
   */
  status: IXGitHubUserStatus | null;

  /**
   * Repositories the user has contributed to, ordered by contribution rank, plus repositories the user has created
   */
  topRepositories: IXGitHubRepositoryConnection;

  /**
   * The user's Twitter username.
   */
  twitterUsername: string | null;

  /**
   * Identifies the date and time when the object was last updated.
   */
  updatedAt: any;

  /**
   * The HTTP URL for this user
   */
  url: any;

  /**
   * Can the viewer pin repositories and gists to the profile?
   */
  viewerCanChangePinnedItems: boolean;

  /**
   * Can the current viewer create new projects on this owner.
   */
  viewerCanCreateProjects: boolean;

  /**
   * Whether or not the viewer is able to follow the user.
   */
  viewerCanFollow: boolean;

  /**
   * Whether or not the viewer is able to sponsor this user/organization.
   */
  viewerCanSponsor: boolean;

  /**
   * Whether or not this user is followed by the viewer. Inverse of is_following_viewer.
   */
  viewerIsFollowing: boolean;

  /**
   * True if the viewer is sponsoring this user/organization.
   */
  viewerIsSponsoring: boolean;

  /**
   * A list of repositories the given user is watching.
   */
  watching: IXGitHubRepositoryConnection;

  /**
   * A URL pointing to the user's public website/blog.
   */
  websiteUrl: any | null;
}

export interface IAnyPinnableItemsOnXGitHubUserArguments {
  /**
   * Filter to only a particular kind of pinnable item.
   */
  type?: XGitHubPinnableItemType | null;
}

export interface IAvatarUrlOnXGitHubUserArguments {
  /**
   * The size of the resulting square image.
   */
  size?: number | null;
}

export interface ICanReceiveOrganizationEmailsWhenNotificationsRestrictedOnXGitHubUserArguments {
  /**
   * The login of the organization to check.
   */
  login: string;
}

export interface ICommitCommentsOnXGitHubUserArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IContributionsCollectionOnXGitHubUserArguments {
  /**
   * Only contributions made at this time or later will be counted. If omitted, defaults to a year ago.
   */
  from?: any | null;

  /**
   * The ID of the organization used to filter contributions.
   */
  organizationID?: string | null;

  /**
   * Only contributions made before and up to (including) this time will be
   * counted. If omitted, defaults to the current time or one year from the
   * provided from argument.
   */
  to?: any | null;
}

export interface IFollowersOnXGitHubUserArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IFollowingOnXGitHubUserArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IGistOnXGitHubUserArguments {
  /**
   * The gist name to find.
   */
  name: string;
}

export interface IGistCommentsOnXGitHubUserArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IGistsOnXGitHubUserArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Ordering options for gists returned from the connection
   */
  orderBy?: IXGitHubGistOrder | null;

  /**
   * Filters Gists according to privacy.
   */
  privacy?: XGitHubGistPrivacy | null;
}

export interface IHovercardOnXGitHubUserArguments {
  /**
   * The ID of the subject to get the hovercard in the context of
   */
  primarySubjectId?: string | null;
}

export interface IIsSponsoredByOnXGitHubUserArguments {
  /**
   * The target account's login.
   */
  accountLogin: string;
}

export interface IIssueCommentsOnXGitHubUserArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Ordering options for issue comments returned from the connection.
   */
  orderBy?: IXGitHubIssueCommentOrder | null;
}

export interface IIssuesOnXGitHubUserArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Filtering options for issues returned from the connection.
   */
  filterBy?: IXGitHubIssueFilters | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * A list of label names to filter the pull requests by.
   */
  labels?: Array<string> | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Ordering options for issues returned from the connection.
   */
  orderBy?: IXGitHubIssueOrder | null;

  /**
   * A list of states to filter the issues by.
   */
  states?: Array<XGitHubIssueState> | null;
}

export interface IOrganizationOnXGitHubUserArguments {
  /**
   * The login of the organization to find.
   */
  login: string;
}

export interface IOrganizationVerifiedDomainEmailsOnXGitHubUserArguments {
  /**
   * The login of the organization to match verified domains from.
   */
  login: string;
}

export interface IOrganizationsOnXGitHubUserArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IPackagesOnXGitHubUserArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Find packages by their names.
   */
  names?: Array<string | null> | null;

  /**
   * Ordering of the returned packages.
   * @default {"direction":"DESC","field":"CREATED_AT"}
   */
  orderBy?: IXGitHubPackageOrder | null;

  /**
   * Filter registry package by type.
   */
  packageType?: XGitHubPackageType | null;

  /**
   * Find packages in a repository by ID.
   */
  repositoryId?: string | null;
}

export interface IPinnableItemsOnXGitHubUserArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Filter the types of pinnable items that are returned.
   */
  types?: Array<XGitHubPinnableItemType> | null;
}

export interface IPinnedItemsOnXGitHubUserArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Filter the types of pinned items that are returned.
   */
  types?: Array<XGitHubPinnableItemType> | null;
}

export interface IProjectOnXGitHubUserArguments {
  /**
   * The project number to find.
   */
  number: number;
}

export interface IProjectsOnXGitHubUserArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Ordering options for projects returned from the connection
   */
  orderBy?: IXGitHubProjectOrder | null;

  /**
   * Query to search projects by, currently only searching by name.
   */
  search?: string | null;

  /**
   * A list of states to filter the projects by.
   */
  states?: Array<XGitHubProjectState> | null;
}

export interface IPublicKeysOnXGitHubUserArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IPullRequestsOnXGitHubUserArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * The base ref name to filter the pull requests by.
   */
  baseRefName?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * The head ref name to filter the pull requests by.
   */
  headRefName?: string | null;

  /**
   * A list of label names to filter the pull requests by.
   */
  labels?: Array<string> | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Ordering options for pull requests returned from the connection.
   */
  orderBy?: IXGitHubIssueOrder | null;

  /**
   * A list of states to filter the pull requests by.
   */
  states?: Array<XGitHubPullRequestState> | null;
}

export interface IRepositoriesOnXGitHubUserArguments {
  /**
   * Array of viewer's affiliation options for repositories returned from the
   * connection. For example, OWNER will include only repositories that the
   * current viewer owns.
   */
  affiliations?: Array<XGitHubRepositoryAffiliation | null> | null;

  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * If non-null, filters repositories according to whether they are forks of another repository
   */
  isFork?: boolean | null;

  /**
   * If non-null, filters repositories according to whether they have been locked
   */
  isLocked?: boolean | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Ordering options for repositories returned from the connection
   */
  orderBy?: IXGitHubRepositoryOrder | null;

  /**
   * Array of owner's affiliation options for repositories returned from the
   * connection. For example, OWNER will include only repositories that the
   * organization or user being viewed owns.
   * @default ["OWNER","COLLABORATOR"]
   */
  ownerAffiliations?: Array<XGitHubRepositoryAffiliation | null> | null;

  /**
   * If non-null, filters repositories according to privacy
   */
  privacy?: XGitHubRepositoryPrivacy | null;
}

export interface IRepositoriesContributedToOnXGitHubUserArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * If non-null, include only the specified types of contributions. The
   * GitHub.com UI uses [COMMIT, ISSUE, PULL_REQUEST, REPOSITORY]
   */
  contributionTypes?: Array<XGitHubRepositoryContributionType | null> | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * If true, include user repositories
   */
  includeUserRepositories?: boolean | null;

  /**
   * If non-null, filters repositories according to whether they have been locked
   */
  isLocked?: boolean | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Ordering options for repositories returned from the connection
   */
  orderBy?: IXGitHubRepositoryOrder | null;

  /**
   * If non-null, filters repositories according to privacy
   */
  privacy?: XGitHubRepositoryPrivacy | null;
}

export interface IRepositoryOnXGitHubUserArguments {
  /**
   * Name of Repository to find.
   */
  name: string;
}

export interface IRepositoryDiscussionCommentsOnXGitHubUserArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Filter discussion comments to only those that were marked as the answer
   * @default false
   */
  onlyAnswers?: boolean | null;

  /**
   * Filter discussion comments to only those in a specific repository.
   */
  repositoryId?: string | null;
}

export interface IRepositoryDiscussionsOnXGitHubUserArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Filter discussions to only those that have been answered or not. Defaults to
   * including both answered and unanswered discussions.
   * @default null
   */
  answered?: boolean | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Ordering options for discussions returned from the connection.
   * @default {"direction":"DESC","field":"CREATED_AT"}
   */
  orderBy?: IXGitHubDiscussionOrder | null;

  /**
   * Filter discussions to only those in a specific repository.
   */
  repositoryId?: string | null;
}

export interface ISavedRepliesOnXGitHubUserArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * The field to order saved replies by.
   * @default {"direction":"DESC","field":"UPDATED_AT"}
   */
  orderBy?: IXGitHubSavedReplyOrder | null;
}

export interface ISponsoringOnXGitHubUserArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Ordering options for the users and organizations returned from the connection.
   * @default {"direction":"DESC","field":"RELEVANCE"}
   */
  orderBy?: IXGitHubSponsorOrder | null;
}

export interface ISponsorsOnXGitHubUserArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Ordering options for sponsors returned from the connection.
   * @default {"direction":"DESC","field":"RELEVANCE"}
   */
  orderBy?: IXGitHubSponsorOrder | null;

  /**
   * If given, will filter for sponsors at the given tier. Will only return
   * sponsors whose tier the viewer is permitted to see.
   */
  tierId?: string | null;
}

export interface ISponsorsActivitiesOnXGitHubUserArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Ordering options for activity returned from the connection.
   * @default {"direction":"DESC","field":"TIMESTAMP"}
   */
  orderBy?: IXGitHubSponsorsActivityOrder | null;

  /**
   * Filter activities returned to only those that occurred in a given time range.
   * @default "MONTH"
   */
  period?: XGitHubSponsorsActivityPeriod | null;
}

export interface ISponsorshipNewslettersOnXGitHubUserArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Ordering options for sponsorship updates returned from the connection.
   * @default {"direction":"DESC","field":"CREATED_AT"}
   */
  orderBy?: IXGitHubSponsorshipNewsletterOrder | null;
}

export interface ISponsorshipsAsMaintainerOnXGitHubUserArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Whether or not to include private sponsorships in the result set
   * @default false
   */
  includePrivate?: boolean | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Ordering options for sponsorships returned from this connection. If left
   * blank, the sponsorships will be ordered based on relevancy to the viewer.
   */
  orderBy?: IXGitHubSponsorshipOrder | null;
}

export interface ISponsorshipsAsSponsorOnXGitHubUserArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Ordering options for sponsorships returned from this connection. If left
   * blank, the sponsorships will be ordered based on relevancy to the viewer.
   */
  orderBy?: IXGitHubSponsorshipOrder | null;
}

export interface IStarredRepositoriesOnXGitHubUserArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Order for connection
   */
  orderBy?: IXGitHubStarOrder | null;

  /**
   * Filters starred repositories to only return repositories owned by the viewer.
   */
  ownedByViewer?: boolean | null;
}

export interface ITopRepositoriesOnXGitHubUserArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Ordering options for repositories returned from the connection
   */
  orderBy: IXGitHubRepositoryOrder;

  /**
   * How far back in time to fetch contributed repositories
   */
  since?: any | null;
}

export interface IWatchingOnXGitHubUserArguments {
  /**
   * Affiliation options for repositories returned from the connection. If none
   * specified, the results will include repositories for which the current
   * viewer is an owner or collaborator, or member.
   */
  affiliations?: Array<XGitHubRepositoryAffiliation | null> | null;

  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * If non-null, filters repositories according to whether they have been locked
   */
  isLocked?: boolean | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Ordering options for repositories returned from the connection
   */
  orderBy?: IXGitHubRepositoryOrder | null;

  /**
   * Array of owner's affiliation options for repositories returned from the
   * connection. For example, OWNER will include only repositories that the
   * organization or user being viewed owns.
   * @default ["OWNER","COLLABORATOR"]
   */
  ownerAffiliations?: Array<XGitHubRepositoryAffiliation | null> | null;

  /**
   * If non-null, filters repositories according to privacy
   */
  privacy?: XGitHubRepositoryPrivacy | null;
}

/**
 * The possible durations that a user can be blocked for.
 */
export const enum XGitHubUserBlockDuration {
  /**
   * The user was blocked for 1 day
   */
  ONE_DAY = 'ONE_DAY',

  /**
   * The user was blocked for 30 days
   */
  ONE_MONTH = 'ONE_MONTH',

  /**
   * The user was blocked for 7 days
   */
  ONE_WEEK = 'ONE_WEEK',

  /**
   * The user was blocked permanently
   */
  PERMANENT = 'PERMANENT',

  /**
   * The user was blocked for 3 days
   */
  THREE_DAYS = 'THREE_DAYS'
}

/**
 * Represents a 'user_blocked' event on a given user.
 */
export interface IXGitHubUserBlockedEvent {
  __typename: '_xGitHubUserBlockedEvent';

  /**
   * Identifies the actor who performed the event.
   */
  actor: _xGitHubActor | null;

  /**
   * Number of days that the user was blocked for.
   */
  blockDuration: XGitHubUserBlockDuration;

  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: any;
  id: string;

  /**
   * The user who was blocked.
   */
  subject: IXGitHubUser | null;
}

/**
 * The connection type for User.
 */
export interface IXGitHubUserConnection {
  __typename: '_xGitHubUserConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubUserEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitHubUser | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edit on user content
 */
export interface IXGitHubUserContentEdit {
  __typename: '_xGitHubUserContentEdit';

  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: any;

  /**
   * Identifies the date and time when the object was deleted.
   */
  deletedAt: any | null;

  /**
   * The actor who deleted this content
   */
  deletedBy: _xGitHubActor | null;

  /**
   * A summary of the changes for this edit
   */
  diff: string | null;

  /**
   * When this content was edited
   */
  editedAt: any;

  /**
   * The actor who edited this content
   */
  editor: _xGitHubActor | null;
  id: string;

  /**
   * Identifies the date and time when the object was last updated.
   */
  updatedAt: any;
}

/**
 * A list of edits to content.
 */
export interface IXGitHubUserContentEditConnection {
  __typename: '_xGitHubUserContentEditConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubUserContentEditEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitHubUserContentEdit | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface IXGitHubUserContentEditEdge {
  __typename: '_xGitHubUserContentEditEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitHubUserContentEdit | null;
}

/**
 * Represents a user.
 */
export interface IXGitHubUserEdge {
  __typename: '_xGitHubUserEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitHubUser | null;
}

/**
 * Email attributes from External Identity
 */
export interface IXGitHubUserEmailMetadata {
  __typename: '_xGitHubUserEmailMetadata';

  /**
   * Boolean to identify primary emails
   */
  primary: boolean | null;

  /**
   * Type of email
   */
  type: string | null;

  /**
   * Email id
   */
  value: string;
}

/**
 * The user's description of what they're currently doing.
 */
export interface IXGitHubUserStatus {
  __typename: '_xGitHubUserStatus';

  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: any;

  /**
   * An emoji summarizing the user's status.
   */
  emoji: string | null;

  /**
   * The status emoji as HTML.
   */
  emojiHTML: any | null;

  /**
   * If set, the status will not be shown after this date.
   */
  expiresAt: any | null;
  id: string;

  /**
   * Whether this status indicates the user is not fully available on GitHub.
   */
  indicatesLimitedAvailability: boolean;

  /**
   * A brief message describing what the user is doing.
   */
  message: string | null;

  /**
   * The organization whose members can see this status. If null, this status is publicly visible.
   */
  organization: IXGitHubOrganization | null;

  /**
   * Identifies the date and time when the object was last updated.
   */
  updatedAt: any;

  /**
   * The user who has this status.
   */
  user: IXGitHubUser;
}

/**
 * The connection type for UserStatus.
 */
export interface IXGitHubUserStatusConnection {
  __typename: '_xGitHubUserStatusConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubUserStatusEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitHubUserStatus | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface IXGitHubUserStatusEdge {
  __typename: '_xGitHubUserStatusEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitHubUserStatus | null;
}

/**
 * Ordering options for user status connections.
 */
export interface IXGitHubUserStatusOrder {
  /**
   * The ordering direction.
   */
  direction: XGitHubOrderDirection;

  /**
   * The field to order user statuses by.
   */
  field: XGitHubUserStatusOrderField;
}

/**
 * Properties by which user status connections can be ordered.
 */
export const enum XGitHubUserStatusOrderField {
  /**
   * Order user statuses by when they were updated.
   */
  UPDATED_AT = 'UPDATED_AT'
}

/**
 * A domain that can be verified or approved for an organization or an enterprise.
 */
export interface IXGitHubVerifiableDomain {
  __typename: '_xGitHubVerifiableDomain';

  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: any;

  /**
   * Identifies the primary key from the database.
   */
  databaseId: number | null;

  /**
   * The DNS host name that should be used for verification.
   */
  dnsHostName: any | null;

  /**
   * The unicode encoded domain.
   */
  domain: any;

  /**
   * Whether a TXT record for verification with the expected host name was found.
   */
  hasFoundHostName: boolean;

  /**
   * Whether a TXT record for verification with the expected verification token was found.
   */
  hasFoundVerificationToken: boolean;
  id: string;

  /**
   * Whether or not the domain is approved.
   */
  isApproved: boolean;

  /**
   * Whether this domain is required to exist for an organization or enterprise policy to be enforced.
   */
  isRequiredForPolicyEnforcement: boolean;

  /**
   * Whether or not the domain is verified.
   */
  isVerified: boolean;

  /**
   * The owner of the domain.
   */
  owner: _xGitHubVerifiableDomainOwner;

  /**
   * The punycode encoded domain.
   */
  punycodeEncodedDomain: any;

  /**
   * The time that the current verification token will expire.
   */
  tokenExpirationTime: any | null;

  /**
   * Identifies the date and time when the object was last updated.
   */
  updatedAt: any;

  /**
   * The current verification token for the domain.
   */
  verificationToken: string | null;
}

/**
 * The connection type for VerifiableDomain.
 */
export interface IXGitHubVerifiableDomainConnection {
  __typename: '_xGitHubVerifiableDomainConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubVerifiableDomainEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitHubVerifiableDomain | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface IXGitHubVerifiableDomainEdge {
  __typename: '_xGitHubVerifiableDomainEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitHubVerifiableDomain | null;
}

/**
 * Ordering options for verifiable domain connections.
 */
export interface IXGitHubVerifiableDomainOrder {
  /**
   * The ordering direction.
   */
  direction: XGitHubOrderDirection;

  /**
   * The field to order verifiable domains by.
   */
  field: XGitHubVerifiableDomainOrderField;
}

/**
 * Properties by which verifiable domain connections can be ordered.
 */
export const enum XGitHubVerifiableDomainOrderField {
  /**
   * Order verifiable domains by their creation date.
   */
  CREATED_AT = 'CREATED_AT',

  /**
   * Order verifiable domains by the domain name.
   */
  DOMAIN = 'DOMAIN'
}

/**
 * Types that can own a verifiable domain.
 */
export type _xGitHubVerifiableDomainOwner =
  | IXGitHubEnterprise
  | IXGitHubOrganization;

/**
 * Autogenerated input type of VerifyVerifiableDomain
 */
export interface IXGitHubVerifyVerifiableDomainInput {
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;

  /**
   * The ID of the verifiable domain to verify.
   */
  id: string;
}

/**
 * Autogenerated return type of VerifyVerifiableDomain
 */
export interface IXGitHubVerifyVerifiableDomainPayload {
  __typename: '_xGitHubVerifyVerifiableDomainPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The verifiable domain that was verified.
   */
  domain: IXGitHubVerifiableDomain | null;
}

/**
 * A hovercard context with a message describing how the viewer is related.
 */
export interface IXGitHubViewerHovercardContext {
  __typename: '_xGitHubViewerHovercardContext';

  /**
   * A string describing this context
   */
  message: string;

  /**
   * An octicon to accompany this context
   */
  octicon: string;

  /**
   * Identifies the user who is related to this context.
   */
  viewer: IXGitHubUser;
}

/**
 * A subject that may be upvoted.
 */
export type _xGitHubVotable = IXGitHubDiscussion | IXGitHubDiscussionComment;

/**
 * A subject that may be upvoted.
 */
export interface IXGitHubVotable {
  __typename: '_xGitHubVotable';

  /**
   * Number of upvotes that this subject has received.
   */
  upvoteCount: number;

  /**
   * Whether or not the current user can add or remove an upvote on this subject.
   */
  viewerCanUpvote: boolean;

  /**
   * Whether or not the current user has already upvoted this subject.
   */
  viewerHasUpvoted: boolean;
}

/**
 * A workflow contains meta information about an Actions workflow file.
 */
export interface IXGitHubWorkflow {
  __typename: '_xGitHubWorkflow';

  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: any;

  /**
   * Identifies the primary key from the database.
   */
  databaseId: number | null;
  id: string;

  /**
   * The name of the workflow.
   */
  name: string;

  /**
   * Identifies the date and time when the object was last updated.
   */
  updatedAt: any;
}

/**
 * A workflow run.
 */
export interface IXGitHubWorkflowRun {
  __typename: '_xGitHubWorkflowRun';

  /**
   * The check suite this workflow run belongs to.
   */
  checkSuite: IXGitHubCheckSuite;

  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: any;

  /**
   * Identifies the primary key from the database.
   */
  databaseId: number | null;

  /**
   * The log of deployment reviews
   */
  deploymentReviews: IXGitHubDeploymentReviewConnection;
  id: string;

  /**
   * The pending deployment requests of all check runs in this workflow run
   */
  pendingDeploymentRequests: IXGitHubDeploymentRequestConnection;

  /**
   * The HTTP path for this workflow run
   */
  resourcePath: any;

  /**
   * A number that uniquely identifies this workflow run in its parent workflow.
   */
  runNumber: number;

  /**
   * Identifies the date and time when the object was last updated.
   */
  updatedAt: any;

  /**
   * The HTTP URL for this workflow run
   */
  url: any;

  /**
   * The workflow executed in this workflow run.
   */
  workflow: IXGitHubWorkflow;
}

export interface IDeploymentReviewsOnXGitHubWorkflowRunArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IPendingDeploymentRequestsOnXGitHubWorkflowRunArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

/**
 * An authentication strategy using Google
 */
export interface IAuthIdentityGoogle {
  __typename: 'AuthIdentityGoogle';

  /**
   * true if the email address using this strategy is verified, else false
   */
  isEmailVerified: boolean;
  type: AuthIdentityTypeEnum;

  /**
   * The googleID for this strategy
   */
  id: string;
}

/**
 * An authentication strategy to log in to Parabol
 */
export type AuthIdentity = IAuthIdentityGoogle | IAuthIdentityLocal;

/**
 * An authentication strategy to log in to Parabol
 */
export interface IAuthIdentity {
  __typename: 'AuthIdentity';

  /**
   * true if the email address using this strategy is verified, else false
   */
  isEmailVerified: boolean;
  type: AuthIdentityTypeEnum;
}

/**
 * The types of authentication strategies
 */
export const enum AuthIdentityTypeEnum {
  LOCAL = 'LOCAL',
  GOOGLE = 'GOOGLE'
}

/**
 * An authentication strategy using an email & password
 */
export interface IAuthIdentityLocal {
  __typename: 'AuthIdentityLocal';

  /**
   * true if the email address using this strategy is verified, else false
   */
  isEmailVerified: boolean;
  type: AuthIdentityTypeEnum;
}

/**
 * The meeting phase where all team members check in one-by-one
 */
export interface ICheckInPhase {
  __typename: 'CheckInPhase';

  /**
   * shortid
   */
  id: string;
  meetingId: string;
  teamId: string;

  /**
   * The type of phase
   */
  phaseType: NewMeetingPhaseTypeEnum;
  stages: Array<ICheckInStage>;

  /**
   * The checkIn greeting (fun language)
   */
  checkInGreeting: IMeetingGreeting;

  /**
   * The checkIn question of the week (draft-js format)
   */
  checkInQuestion: string;
}

export type NewMeetingPhase =
  | ICheckInPhase
  | IReflectPhase
  | IDiscussPhase
  | IUpdatesPhase
  | IAgendaItemsPhase
  | IGenericMeetingPhase
  | IEstimatePhase;

export interface INewMeetingPhase {
  __typename: 'NewMeetingPhase';

  /**
   * shortid
   */
  id: string;
  meetingId: string;
  teamId: string;

  /**
   * The type of phase
   */
  phaseType: NewMeetingPhaseTypeEnum;
  stages: Array<NewMeetingStage>;
}

/**
 * The phase of the meeting
 */
export const enum NewMeetingPhaseTypeEnum {
  lobby = 'lobby',
  checkin = 'checkin',
  updates = 'updates',
  firstcall = 'firstcall',
  agendaitems = 'agendaitems',
  lastcall = 'lastcall',
  reflect = 'reflect',
  group = 'group',
  vote = 'vote',
  discuss = 'discuss',
  SUMMARY = 'SUMMARY',
  SCOPE = 'SCOPE',
  ESTIMATE = 'ESTIMATE'
}

/**
 * An instance of a meeting phase item. On the client, this usually represents a single view
 */
export type NewMeetingStage =
  | ICheckInStage
  | IGenericMeetingStage
  | IRetroDiscussStage
  | IUpdatesStage
  | IEstimateStage
  | IAgendaItemsStage;

/**
 * An instance of a meeting phase item. On the client, this usually represents a single view
 */
export interface INewMeetingStage {
  __typename: 'NewMeetingStage';

  /**
   * stageId, shortid
   */
  id: string;

  /**
   * The datetime the stage was completed
   */
  endAt: any | null;

  /**
   * foreign key. try using meeting
   */
  meetingId: string;

  /**
   * The meeting this stage belongs to
   */
  meeting: NewMeeting | null;

  /**
   * true if the facilitator has completed this stage, else false. Should be boolean(endAt)
   */
  isComplete: boolean;

  /**
   * true if any meeting participant can navigate to this stage
   */
  isNavigable: boolean;

  /**
   * true if the facilitator can navigate to this stage
   */
  isNavigableByFacilitator: boolean;

  /**
   * The phase this stage belongs to
   */
  phase: NewMeetingPhase | null;

  /**
   * The type of the phase
   */
  phaseType: NewMeetingPhaseTypeEnum | null;

  /**
   * The datetime the stage was started
   */
  startAt: any | null;

  /**
   * Number of times the facilitator has visited this stage
   */
  viewCount: number | null;

  /**
   * true if a time limit is set, false if end time is set, null if neither is set
   */
  isAsync: boolean | null;

  /**
   * true if the viewer is ready to advance, else false
   */
  isViewerReady: boolean;

  /**
   * the number of meeting members ready to advance, excluding the facilitator
   */
  readyCount: number;

  /**
   * The datetime the phase is scheduled to be finished, null if no time limit or end time is set
   */
  scheduledEndTime: any | null;

  /**
   * The suggested ending datetime for a phase to be completed async, null if not enough data to make a suggestion
   */
  suggestedEndTime: any | null;

  /**
   * The suggested time limit for a phase to be completed together, null if not enough data to make a suggestion
   */
  suggestedTimeLimit: number | null;
  teamId: string;

  /**
   * The number of milliseconds left before the scheduled end time. Useful for unsynced client clocks. null if scheduledEndTime is null
   */
  timeRemaining: number | null;
}

/**
 * A team meeting history for all previous meetings
 */
export type NewMeeting = IActionMeeting | IRetrospectiveMeeting | IPokerMeeting;

/**
 * A team meeting history for all previous meetings
 */
export interface INewMeeting {
  __typename: 'NewMeeting';

  /**
   * The unique meeting id. shortid.
   */
  id: string;

  /**
   * The timestamp the meeting was created
   */
  createdAt: any;

  /**
   * The id of the user that created the meeting
   */
  createdBy: string;

  /**
   * The user that created the meeting
   */
  createdByUser: IUser;

  /**
   * The timestamp the meeting officially ended
   */
  endedAt: any | null;

  /**
   * The location of the facilitator in the meeting
   */
  facilitatorStageId: string;

  /**
   * The userId (or anonymousId) of the most recent facilitator
   */
  facilitatorUserId: string;

  /**
   * The facilitator team member
   */
  facilitator: ITeamMember;

  /**
   * The team members that were active during the time of the meeting
   */
  meetingMembers: Array<MeetingMember>;

  /**
   * The auto-incrementing meeting number for the team
   */
  meetingNumber: number;
  meetingType: MeetingTypeEnum;

  /**
   * The name of the meeting
   */
  name: string;

  /**
   * The organization this meeting belongs to
   */
  organization: IOrganization;

  /**
   * The phases the meeting will go through, including all phase-specific state
   */
  phases: Array<NewMeetingPhase>;

  /**
   * true if should show the org the conversion modal, else false
   */
  showConversionModal: boolean;

  /**
   * The time the meeting summary was emailed to the team
   */
  summarySentAt: any | null;

  /**
   * foreign key for team
   */
  teamId: string;

  /**
   * The team that ran the meeting
   */
  team: ITeam;

  /**
   * The last time a meeting was updated (stage completed, finished, etc)
   */
  updatedAt: any | null;

  /**
   * The meeting member of the viewer
   */
  viewerMeetingMember: MeetingMember | null;
}

/**
 * The user account profile
 */
export interface IUser {
  __typename: 'User';

  /**
   * The userId provided by us
   */
  id: string;
  archivedTasks: ITaskConnection | null;
  archivedTasksCount: number | null;

  /**
   * The assumed company this organizaiton belongs to
   */
  company: ICompany | null;

  /**
   * The timestamp the user was created
   */
  createdAt: any | null;

  /**
   * The user email
   */
  email: any;

  /**
   * Any super power given to the user via a super user
   */
  featureFlags: IUserFeatureFlags;

  /**
   * An array of objects with information about the user's identities.
   *       More than one will exists in case accounts are linked
   */
  identities: Array<AuthIdentity | null> | null;

  /**
   * true if the user is not currently being billed for service. removed on every websocket handshake
   */
  inactive: boolean | null;
  invoiceDetails: IInvoice | null;
  invoices: IInvoiceConnection | null;

  /**
   * true if the user is a billing leader on any organization, else false
   */
  isAnyBillingLeader: boolean;

  /**
   * true if the user is currently online
   */
  isConnected: boolean | null;

  /**
   * true if the user is the first to sign up from their domain, else false
   */
  isPatientZero: boolean;

  /**
   * the reason the user account was removed
   */
  reasonRemoved: string | null;

  /**
   * true if the user was removed from parabol, else false
   */
  isRemoved: boolean;

  /**
   * true if all user sessions are being recorded in LogRocket, else false
   */
  isWatched: boolean;

  /**
   * the endedAt timestamp of the most recent meeting they were a member of
   */
  lastMetAt: any | null;

  /**
   * The number of meetings the user has attended
   */
  meetingCount: number;

  /**
   * The largest number of consecutive months the user has checked into a meeting
   */
  monthlyStreakMax: number;

  /**
   * The number of consecutive 30-day intervals that the user has checked into a meeting as of this moment
   */
  monthlyStreakCurrent: number;

  /**
   * the most important actions for the user to perform
   */
  suggestedActions: Array<SuggestedAction>;

  /**
   * the number of times the user clicked pay later
   */
  payLaterClickCount: number;

  /**
   * The timeline of important events for the viewer
   */
  timeline: ITimelineEventConnection;

  /**
   * the comments and tasks created from the discussion
   */
  discussion: IDiscussion | null;

  /**
   * the ID of the newest feature, null if the user has dismissed it
   */
  newFeatureId: string | null;

  /**
   * The new feature released by Parabol. null if the user already hid it
   */
  newFeature: INewFeatureBroadcast | null;

  /**
   * url of user’s profile picture
   */
  picture: any;

  /**
   * The application-specific name, defaults to email before the tld
   */
  preferredName: string;

  /**
   * url of user’s raster profile picture (if user profile pic is an SVG, raster will be a PNG)
   */
  rasterPicture: any;

  /**
   * The last day the user connected via websocket or navigated to a common area
   */
  lastSeenAt: any | null;

  /**
   * The paths that the user is currently visiting. This is null if the user is not currently online. A URL can also be null if the socket is not in a meeting, e.g. on the timeline.
   */
  lastSeenAtURLs: Array<string | null> | null;

  /**
   * The meeting member associated with this user, if a meeting is currently in progress
   */
  meetingMember: MeetingMember | null;

  /**
   * A previous meeting that the user was in (present or absent)
   */
  meeting: NewMeeting | null;

  /**
   * A previous meeting that the user was in (present or absent)
   */
  newMeeting: NewMeeting | null;

  /**
   * all the notifications for a single user
   */
  notifications: INotificationConnection;

  /**
   * get a single organization and the count of users by status
   */
  organization: IOrganization | null;

  /**
   * The connection between a user and an organization
   */
  organizationUser: IOrganizationUser | null;

  /**
   * A single user that is connected to a single organization
   */
  organizationUsers: Array<IOrganizationUser>;

  /**
   * Get the list of all organizations a user belongs to
   */
  organizations: Array<IOrganization>;

  /**
   * a string with message stating that the user is over the free tier limit, else null
   */
  overLimitCopy: string | null;

  /**
   * The reflection groups that are similar to the selected reflection in the Spotlight
   */
  similarReflectionGroups: Array<IRetroReflectionGroup>;
  tasks: ITaskConnection;

  /**
   * A query for a team
   */
  team: ITeam | null;

  /**
   * The invitation sent to the user, even if it was sent before they were a user
   */
  teamInvitation: ITeamInvitationPayload;

  /**
   * all the teams the user is on that the viewer can see.
   */
  teams: Array<ITeam>;

  /**
   * The team member associated with this user
   */
  teamMember: ITeamMember | null;

  /**
   * The highest tier of any org the user belongs to
   */
  tier: TierEnum;

  /**
   * all the teams the user is a part of that the viewer can see
   */
  tms: Array<string>;

  /**
   * The timestamp the user was last updated
   */
  updatedAt: any | null;
  userOnTeam: IUser | null;
}

export interface IArchivedTasksOnUserArguments {
  first?: number | null;

  /**
   * the datetime cursor
   */
  after?: any | null;

  /**
   * The unique team ID
   */
  teamId: string;
}

export interface IArchivedTasksCountOnUserArguments {
  /**
   * The unique team ID
   */
  teamId: string;
}

export interface IInvoiceDetailsOnUserArguments {
  /**
   * The id of the invoice
   */
  invoiceId: string;
}

export interface IInvoicesOnUserArguments {
  first?: number | null;

  /**
   * the datetime cursor
   */
  after?: any | null;

  /**
   * The id of the organization
   */
  orgId: string;
}

export interface ITimelineOnUserArguments {
  /**
   * the datetime cursor
   */
  after?: any | null;

  /**
   * the number of timeline events to return
   */
  first: number;
}

export interface IDiscussionOnUserArguments {
  /**
   * The ID of the discussion
   */
  id: string;
}

export interface IMeetingMemberOnUserArguments {
  /**
   * The specific meeting ID
   */
  meetingId: string;
}

export interface IMeetingOnUserArguments {
  /**
   * The meeting ID
   */
  meetingId: string;
}

export interface INewMeetingOnUserArguments {
  /**
   * The meeting ID
   */
  meetingId: string;
}

export interface INotificationsOnUserArguments {
  first: number;
  after?: any | null;
}

export interface IOrganizationOnUserArguments {
  /**
   * the orgId
   */
  orgId: string;
}

export interface IOrganizationUserOnUserArguments {
  /**
   * the orgId
   */
  orgId: string;
}

export interface ISimilarReflectionGroupsOnUserArguments {
  /**
   * The id of the selected reflection in the Spotlight
   */
  reflectionId: string;

  /**
   * Only return reflection groups that match the search query
   */
  searchQuery: string;
}

export interface ITasksOnUserArguments {
  /**
   * the number of tasks to return
   */
  first: number;

  /**
   * the datetime cursor
   */
  after?: any | null;

  /**
   * a list of user Ids that you want tasks for. if null, will return tasks for all possible team members. An id is null if it is not assigned to anyone.
   */
  userIds?: Array<string | null> | null;

  /**
   * a list of team Ids that you want tasks for. if null, will return tasks for all possible active teams
   */
  teamIds?: Array<string> | null;

  /**
   * true to only return archived tasks; false to return active tasks
   * @default false
   */
  archived?: boolean | null;

  /**
   * filter tasks by the chosen statuses
   */
  statusFilters?: Array<TaskStatusEnum> | null;

  /**
   * only return tasks which match the given filter query
   */
  filterQuery?: string | null;

  /**
   * if true, include unassigned tasks. If false, only return assigned tasks
   * @default false
   */
  includeUnassigned?: boolean | null;
}

export interface ITeamOnUserArguments {
  /**
   * The team ID for the desired team
   */
  teamId: string;
}

export interface ITeamInvitationOnUserArguments {
  /**
   * The meetingId to check for the invitation, if teamId not available (e.g. on a meeting route)
   */
  meetingId?: string | null;

  /**
   * The teamId to check for the invitation
   */
  teamId?: string | null;
}

export interface ITeamMemberOnUserArguments {
  /**
   * The team the user is on
   */
  teamId: string;

  /**
   * If null, defaults to the team member for this user. Else, will grab the team member. Returns null if not on team.
   */
  userId?: string | null;
}

export interface IUserOnTeamOnUserArguments {
  /**
   * The other user
   */
  userId: string;
}

/**
 * A connection to a list of items.
 */
export interface ITaskConnection {
  __typename: 'TaskConnection';

  /**
   * Page info with cursors coerced to ISO8601 dates
   */
  pageInfo: IPageInfoDateCursor | null;

  /**
   * A list of edges.
   */
  edges: Array<ITaskEdge>;
}

/**
 * Information about pagination in a connection.
 */
export interface IPageInfoDateCursor {
  __typename: 'PageInfoDateCursor';

  /**
   * When paginating forwards, are there more items?
   */
  hasNextPage: boolean;

  /**
   * When paginating backwards, are there more items?
   */
  hasPreviousPage: boolean;

  /**
   * When paginating backwards, the cursor to continue.
   */
  startCursor: any | null;

  /**
   * When paginating forwards, the cursor to continue.
   */
  endCursor: any | null;
}

/**
 * An edge in a connection.
 */
export interface ITaskEdge {
  __typename: 'TaskEdge';

  /**
   * The item at the end of the edge
   */
  node: ITask;
  cursor: any | null;
}

/**
 * A long-term task shared across the team, assigned to a single user
 */
export interface ITask {
  __typename: 'Task';

  /**
   * shortid
   */
  id: string;

  /**
   * The rich text body of the item
   */
  content: string;

  /**
   * The timestamp the item was created
   */
  createdAt: any;

  /**
   * The userId that created the item
   */
  createdBy: string;

  /**
   * The user that created the item
   */
  createdByUser: IUser;

  /**
   * the replies to this threadable item
   */
  replies: Array<Threadable>;

  /**
   * The FK of the discussion this task was created in. Null if task was not created in a discussion
   */
  discussionId: string | null;

  /**
   * the parent, if this threadable is a reply, else null
   */
  threadParentId: string | null;

  /**
   * the order of this threadable, relative to threadParentId
   */
  threadSortOrder: number | null;

  /**
   * The timestamp the item was updated
   */
  updatedAt: any;

  /**
   * The agenda item that the task was created in, if any
   */
  agendaItem: IAgendaItem | null;

  /**
   * a user-defined due date
   */
  dueDate: any | null;

  /**
   * A list of the most recent estimates for the task
   */
  estimates: Array<ITaskEstimate>;

  /**
   * a list of users currently editing the task (fed by a subscription, so queries return null)
   */
  editors: Array<ITaskEditorDetails>;

  /**
   * The reference to the single source of truth for this task
   */
  integration: TaskIntegration | null;

  /**
   * A hash of the integrated task
   */
  integrationHash: string | null;

  /**
   * the foreign key for the meeting the task was created in
   */
  meetingId: string | null;

  /**
   * the foreign key for the meeting the task was marked as complete
   */
  doneMeetingId: string | null;

  /**
   * the plain text content of the task
   */
  plaintextContent: string;

  /**
   * the shared sort order for tasks on the team dash & user dash
   */
  sortOrder: number;

  /**
   * The status of the task
   */
  status: TaskStatusEnum;

  /**
   * The tags associated with the task
   */
  tags: Array<string>;

  /**
   * The id of the team (indexed). Needed for subscribing to archived tasks
   */
  teamId: string;

  /**
   * The team this task belongs to
   */
  team: ITeam;

  /**
   * The first block of the content
   */
  title: string;

  /**
   * * The userId, index useful for server-side methods getting all tasks under a user. This can be null if the task is not assigned to anyone.
   */
  userId: string | null;

  /**
   * The user the task is assigned to. Null if it is not assigned to anyone.
   */
  user: IUser | null;
}

/**
 * An item that can be put in a thread
 */
export type Threadable = ITask | IComment | IPoll;

/**
 * An item that can be put in a thread
 */
export interface IThreadable {
  __typename: 'Threadable';

  /**
   * shortid
   */
  id: string;

  /**
   * The rich text body of the item
   */
  content: string;

  /**
   * The timestamp the item was created
   */
  createdAt: any;

  /**
   * The userId that created the item
   */
  createdBy: string | null;

  /**
   * The user that created the item
   */
  createdByUser: IUser | null;

  /**
   * the replies to this threadable item
   */
  replies: Array<Threadable>;

  /**
   * The FK of the discussion this task was created in. Null if task was not created in a discussion
   */
  discussionId: string | null;

  /**
   * the parent, if this threadable is a reply, else null
   */
  threadParentId: string | null;

  /**
   * the order of this threadable, relative to threadParentId
   */
  threadSortOrder: number | null;

  /**
   * The timestamp the item was updated
   */
  updatedAt: any;
}

/**
 * A request placeholder that will likely turn into 1 or more tasks
 */
export interface IAgendaItem {
  __typename: 'AgendaItem';

  /**
   * The unique agenda item id teamId::shortid
   */
  id: string;

  /**
   * A list of users currently commenting
   * @deprecated "Moved to ThreadConnection. Can remove Jun-01-2021"
   */
  commentors: Array<ICommentorDetails> | null;

  /**
   * The body of the agenda item
   */
  content: string;

  /**
   * The timestamp the agenda item was created
   */
  createdAt: any | null;

  /**
   * true if the agenda item has not been processed or deleted
   */
  isActive: boolean;

  /**
   * True if the agenda item has been pinned
   */
  pinned: boolean | null;

  /**
   * If pinned, this is the unique id of the original agenda item
   */
  pinnedParentId: string | null;

  /**
   * The sort order of the agenda item in the list
   */
  sortOrder: number;

  /**
   * *The team for this agenda item
   */
  teamId: string;

  /**
   * The teamMemberId that created this agenda item
   */
  teamMemberId: string;

  /**
   * The meetingId of the agenda item
   */
  meetingId: string | null;

  /**
   * The timestamp the agenda item was updated
   */
  updatedAt: any | null;

  /**
   * The team member that created the agenda item
   */
  teamMember: ITeamMember;
}

/**
 * The user that is commenting
 */
export interface ICommentorDetails {
  __typename: 'CommentorDetails';

  /**
   * The userId of the person commenting
   */
  id: string;

  /**
   * The preferred name of the user commenting
   */
  preferredName: string;
}

/**
 * A member of a team
 */
export interface ITeamMember {
  __typename: 'TeamMember';

  /**
   * An ID for the teamMember. userId::teamId
   */
  id: string;

  /**
   * All the integrations that the user could possibly use
   */
  allAvailableIntegrations: Array<SuggestedIntegration>;

  /**
   * The datetime the team member was created
   */
  createdAt: any;

  /**
   * true if the user is a part of the team, false if they no longer are
   */
  isNotRemoved: boolean | null;

  /**
   * Is user a team lead?
   */
  isLead: boolean | null;

  /**
   * true if the user prefers to not vote during a poker meeting
   */
  isSpectatingPoker: boolean;

  /**
   * hide the agenda list on the dashboard
   */
  hideAgenda: boolean;

  /**
   * The user email
   */
  email: any;

  /**
   * url of user’s profile picture
   */
  picture: any;

  /**
   * true if this team member belongs to the user that queried it
   */
  isSelf: boolean;

  /**
   * The integrations that the team member has authorized. accessible by all
   */
  integrations: ITeamMemberIntegrations;

  /**
   * The meeting specifics for the meeting the team member is currently in
   */
  meetingMember: MeetingMember | null;

  /**
   * The name of the assignee
   */
  preferredName: string;

  /**
   * The integrations that the user would probably like to use
   */
  suggestedIntegrations: ISuggestedIntegrationQueryPayload;

  /**
   * Tasks owned by the team member
   */
  tasks: ITaskConnection | null;

  /**
   * The team this team member belongs to
   */
  team: ITeam | null;

  /**
   * foreign key to Team table
   */
  teamId: string;

  /**
   * The user for the team member
   */
  user: IUser;

  /**
   * foreign key to User table
   */
  userId: string;
}

export interface IMeetingMemberOnTeamMemberArguments {
  meetingId: string;
}

export interface ITasksOnTeamMemberArguments {
  first?: number | null;

  /**
   * the datetime cursor
   */
  after?: any | null;
}

export type SuggestedIntegration =
  | ISuggestedIntegrationGitHub
  | ISuggestedIntegrationJira;

export interface ISuggestedIntegration {
  __typename: 'SuggestedIntegration';
  id: string;
  service: TaskServiceEnum;
}

/**
 * The list of services for task integrations
 */
export const enum TaskServiceEnum {
  github = 'github',
  jira = 'jira',
  PARABOL = 'PARABOL'
}

/**
 * All the available integrations available for this team member
 */
export interface ITeamMemberIntegrations {
  __typename: 'TeamMemberIntegrations';

  /**
   * composite
   */
  id: string;

  /**
   * All things associated with an atlassian integration for a team member
   */
  atlassian: IAtlassianIntegration | null;

  /**
   * All things associated with a GitHub integration for a team member
   */
  github: IGitHubIntegration | null;

  /**
   * All things associated with a slack integration for a team member
   */
  slack: ISlackIntegration | null;
}

/**
 * The atlassian auth + integration helpers for a specific team member
 */
export interface IAtlassianIntegration {
  __typename: 'AtlassianIntegration';

  /**
   * Composite key in atlassiani:teamId:userId format
   */
  id: string;

  /**
   * true if the auth is valid, else false
   */
  isActive: boolean;

  /**
   * The access token to atlassian, useful for 1 hour. null if no access token available or the viewer is not the user
   */
  accessToken: string | null;

  /**
   * *The atlassian account ID
   */
  accountId: string;

  /**
   * The atlassian cloud IDs that the user has granted
   */
  cloudIds: Array<string>;

  /**
   * The timestamp the provider was created
   */
  createdAt: any;

  /**
   * *The team that the token is linked to
   */
  teamId: string;

  /**
   * The timestamp the token was updated at
   */
  updatedAt: any;

  /**
   * The user that the access token is attached to
   */
  userId: string;

  /**
   * A list of issues coming straight from the jira integration for a specific team member
   */
  issues: IJiraIssueConnection;

  /**
   * A list of projects accessible by this team member. empty if viewer is not the user
   */
  projects: Array<IJiraRemoteProject>;

  /**
   * The list of field names that can be used as a
   */
  jiraFields: Array<string>;

  /**
   * the list of suggested search queries, sorted by most recent. Guaranteed to be < 60 days old
   */
  jiraSearchQueries: Array<IJiraSearchQuery>;
}

export interface IIssuesOnAtlassianIntegrationArguments {
  /**
   * @default 100
   */
  first?: number | null;

  /**
   * the datetime cursor
   */
  after?: any | null;

  /**
   * A string of text to search for, or JQL if isJQL is true
   */
  queryString?: string | null;

  /**
   * true if the queryString is JQL, else false
   */
  isJQL: boolean;
  projectKeyFilters?: Array<string> | null;
}

export interface IJiraFieldsOnAtlassianIntegrationArguments {
  /**
   * Filter the fields to single cloudId
   */
  cloudId: string;
}

/**
 * A connection to a list of items.
 */
export interface IJiraIssueConnection {
  __typename: 'JiraIssueConnection';

  /**
   * Page info with cursors coerced to ISO8601 dates
   */
  pageInfo: IPageInfoDateCursor | null;

  /**
   * A list of edges.
   */
  edges: Array<IJiraIssueEdge>;

  /**
   * An error with the connection, if any
   */
  error: IStandardMutationError | null;
}

/**
 * An edge in a connection.
 */
export interface IJiraIssueEdge {
  __typename: 'JiraIssueEdge';

  /**
   * The item at the end of the edge
   */
  node: IJiraIssue;
  cursor: any | null;
}

/**
 * The Jira Issue that comes direct from Jira
 */
export interface IJiraIssue {
  __typename: 'JiraIssue';

  /**
   * GUID cloudId:issueKey
   */
  id: string;

  /**
   * The parabol teamId this issue was fetched for
   */
  teamId: string;

  /**
   * The parabol userId this issue was fetched for
   */
  userId: string;

  /**
   * The ID of the jira cloud where the issue lives
   */
  cloudId: string;

  /**
   * The name of the jira cloud where the issue lives
   */
  cloudName: string;

  /**
   * The url to access the issue
   */
  url: any;

  /**
   * The key of the issue as found in Jira
   */
  issueKey: string;

  /**
   * The key of the project, which is the prefix to the issueKey
   */
  projectKey: string;

  /**
   * The project fetched from jira
   */
  project: IJiraRemoteProject | null;

  /**
   * The plaintext summary of the jira issue
   */
  summary: string;

  /**
   * The stringified ADF of the jira issue description
   */
  description: string;

  /**
   * The description converted into raw HTML
   */
  descriptionHTML: string;
}

export type TaskIntegration = IXGitHubIssue | IJiraIssue;

export interface ITaskIntegration {
  __typename: 'TaskIntegration';
  id: string;
}

/**
 * A project fetched from Jira in real time
 */
export interface IJiraRemoteProject {
  __typename: 'JiraRemoteProject';
  id: string;

  /**
   * The parabol teamId this issue was fetched for
   */
  teamId: string;

  /**
   * The parabol userId this issue was fetched for
   */
  userId: string;
  self: string;

  /**
   * The cloud ID that the project lives on. Does not exist on the Jira object!
   */
  cloudId: string;
  key: string;
  name: string;
  avatar: string;
  avatarUrls: IJiraRemoteAvatarUrls;
  projectCategory: IJiraRemoteProjectCategory;
  simplified: boolean;
  style: string;
}

/**
 * The URLs for avatars. NOTE: If they are custom, an Authorization header is required!
 */
export interface IJiraRemoteAvatarUrls {
  __typename: 'JiraRemoteAvatarUrls';
  x48: string;
  x24: string;
  x16: string;
  x32: string;
}

/**
 * A project category fetched from a JiraRemoteProject
 */
export interface IJiraRemoteProjectCategory {
  __typename: 'JiraRemoteProjectCategory';
  self: string;
  id: string;
  name: string;
  description: string;
}

export interface IStandardMutationError {
  __typename: 'StandardMutationError';

  /**
   * The title of the error
   */
  title: string | null;

  /**
   * The full error
   */
  message: string;
}

/**
 * A jira search query including all filters selected when the query was executed
 */
export interface IJiraSearchQuery {
  __typename: 'JiraSearchQuery';

  /**
   * shortid
   */
  id: string;

  /**
   * The query string, either simple or JQL depending on the isJQL flag
   */
  queryString: string;

  /**
   * true if the queryString is JQL, else false
   */
  isJQL: boolean;

  /**
   * The list of project keys selected as a filter. null if not set
   */
  projectKeyFilters: Array<string>;

  /**
   * the time the search query was last used. Used for sorting
   */
  lastUsedAt: any;
}

/**
 * OAuth token for a team member
 */
export interface IGitHubIntegration {
  __typename: 'GitHubIntegration';

  /**
   * composite key
   */
  id: string;

  /**
   * The access token to github. good forever
   */
  accessToken: string | null;

  /**
   * The timestamp the provider was created
   */
  createdAt: any;

  /**
   * true if an access token exists, else false
   */
  isActive: boolean;

  /**
   * the list of suggested search queries, sorted by most recent. Guaranteed to be < 60 days old
   */
  githubSearchQueries: Array<IGitHubSearchQuery>;

  /**
   * *The GitHub login used for queries
   */
  login: string;

  /**
   * The comma-separated list of scopes requested from GitHub
   */
  scope: string;

  /**
   * *The team that the token is linked to
   */
  teamId: string;

  /**
   * The timestamp the token was updated at
   */
  updatedAt: any;

  /**
   * The user that the access token is attached to
   */
  userId: string;
  api: IXGitHubApi | null;
}

/**
 * A GitHub search query including all filters selected when the query was executed
 */
export interface IGitHubSearchQuery {
  __typename: 'GitHubSearchQuery';

  /**
   * shortid
   */
  id: string;

  /**
   * The query string in GitHub format, including repository filters. e.g. is:issue is:open
   */
  queryString: string;

  /**
   * the time the search query was last used. Used for sorting
   */
  lastUsedAt: any;
}

/**
 * OAuth token for a team member
 */
export interface ISlackIntegration {
  __typename: 'SlackIntegration';

  /**
   * shortid
   */
  id: string;

  /**
   * true if the auth is updated & ready to use for all features, else false
   */
  isActive: boolean;

  /**
   * the parabol bot user id
   */
  botUserId: string | null;

  /**
   * the parabol bot access token, used as primary communication
   */
  botAccessToken: string | null;

  /**
   * The timestamp the provider was created
   */
  createdAt: any;

  /**
   * The default channel to assign to new team notifications
   */
  defaultTeamChannelId: string;

  /**
   * The id of the team in slack
   */
  slackTeamId: string | null;

  /**
   * The name of the team in slack
   */
  slackTeamName: string | null;

  /**
   * The userId in slack
   */
  slackUserId: string;

  /**
   * The name of the user in slack
   */
  slackUserName: string;

  /**
   * *The team that the token is linked to
   */
  teamId: string;

  /**
   * The timestamp the token was updated at
   */
  updatedAt: any;

  /**
   * The id of the user that integrated Slack
   */
  userId: string;

  /**
   * A list of events and the slack channels they get posted to
   */
  notifications: Array<ISlackNotification>;
}

/**
 * an event trigger and slack channel to receive it
 */
export interface ISlackNotification {
  __typename: 'SlackNotification';
  id: string;
  event: SlackNotificationEventEnum;
  eventType: SlackNotificationEventTypeEnum;

  /**
   * null if no notification is to be sent
   */
  channelId: string | null;
  teamId: string;
  userId: string;
}

/**
 * The event that triggers a slack notification
 */
export const enum SlackNotificationEventEnum {
  meetingStart = 'meetingStart',
  meetingEnd = 'meetingEnd',
  MEETING_STAGE_TIME_LIMIT_END = 'MEETING_STAGE_TIME_LIMIT_END',
  MEETING_STAGE_TIME_LIMIT_START = 'MEETING_STAGE_TIME_LIMIT_START'
}

/**
 * The type of event for a slack notification
 */
export const enum SlackNotificationEventTypeEnum {
  /**
   * notification that concerns the whole team
   */
  team = 'team',

  /**
   * notification that concerns a single member on the team
   */
  member = 'member'
}

/**
 * All the user details for a specific meeting
 */
export type MeetingMember =
  | IActionMeetingMember
  | IRetrospectiveMeetingMember
  | IPokerMeetingMember;

/**
 * All the user details for a specific meeting
 */
export interface IMeetingMember {
  __typename: 'MeetingMember';

  /**
   * A composite of userId::meetingId
   */
  id: string;

  /**
   * true if present, false if absent, else null
   * @deprecated "Members are checked in when they enter the meeting now & not created beforehand"
   */
  isCheckedIn: boolean | null;
  meetingId: string;
  meetingType: MeetingTypeEnum;
  teamId: string;
  teamMember: ITeamMember;
  user: IUser;
  userId: string;

  /**
   * The last time a meeting was updated (stage completed, finished, etc)
   */
  updatedAt: any;
}

/**
 * The type of meeting
 */
export const enum MeetingTypeEnum {
  action = 'action',
  retrospective = 'retrospective',
  poker = 'poker'
}

/**
 * The details associated with a task integrated with GitHub
 */
export interface ISuggestedIntegrationQueryPayload {
  __typename: 'SuggestedIntegrationQueryPayload';
  error: IStandardMutationError | null;

  /**
   * true if the items returned are a subset of all the possible integration, else false (all possible integrations)
   */
  hasMore: boolean | null;

  /**
   * All the integrations that are likely to be integrated
   */
  items: Array<SuggestedIntegration> | null;
}

/**
 * A team
 */
export interface ITeam {
  __typename: 'Team';

  /**
   * A shortid for the team
   */
  id: string;

  /**
   * The datetime the team was created
   */
  createdAt: any;

  /**
   * The userId that created the team. Non-null at v2.22.0+
   */
  createdBy: string | null;

  /**
   * true if the team was created when the account was created, else false
   */
  isOnboardTeam: boolean;

  /**
   * The type of the last meeting run
   */
  lastMeetingType: MeetingTypeEnum;

  /**
   * The HTML message to show if isPaid is false
   */
  lockMessageHTML: string | null;

  /**
   * The hash and expiration for a token that allows anyone with it to join the team
   */
  massInvitation: IMassInvitation;

  /**
   * Integration details that are shared by all team members. Nothing user specific
   */
  integrations: ITeamIntegrations;

  /**
   * true if the underlying org has a validUntil date greater than now. if false, subs do not work
   */
  isPaid: boolean | null;

  /**
   * The name of the team
   */
  name: string;

  /**
   * The organization to which the team belongs
   */
  orgId: string;

  /**
   * Arbitrary tags that the team uses
   */
  tags: Array<string | null> | null;

  /**
   * The datetime the team was last updated
   */
  updatedAt: any | null;

  /**
   * @deprecated "Field no longer needs to exist for now"
   */
  customPhaseItems: Array<IReflectPrompt | null> | null;

  /**
   * The outstanding invitations to join the team
   */
  teamInvitations: Array<ITeamInvitation>;

  /**
   * true if the viewer is the team lead, else false
   */
  isLead: boolean;

  /**
   * The team-specific settings for running all available types of meetings
   */
  meetingSettings: TeamMeetingSettings;

  /**
   * A query for the scale
   */
  scale: ITemplateScale | null;

  /**
   * The list of scales this team can use
   */
  scales: Array<ITemplateScale>;

  /**
   * a list of meetings that are currently in progress
   */
  activeMeetings: Array<NewMeeting>;

  /**
   * The new meeting in progress, if any
   */
  meeting: NewMeeting | null;

  /**
   * The level of access to features on the parabol site
   */
  tier: TierEnum;
  organization: IOrganization;

  /**
   * The agenda items for the upcoming or current meeting
   */
  agendaItems: Array<IAgendaItem>;

  /**
   * All of the tasks for this team
   */
  tasks: ITaskConnection;

  /**
   * All the team members actively associated with the team
   */
  teamMembers: Array<ITeamMember>;

  /**
   * true if the team has been archived
   */
  isArchived: boolean | null;
}

export interface IMassInvitationOnTeamArguments {
  /**
   * the meetingId to optionally direct them to
   */
  meetingId?: string | null;
}

export interface IMeetingSettingsOnTeamArguments {
  /**
   * the type of meeting for the settings
   */
  meetingType: MeetingTypeEnum;
}

export interface IScaleOnTeamArguments {
  /**
   * The scale ID for the desired scale
   */
  scaleId: string;
}

export interface IMeetingOnTeamArguments {
  /**
   * The unique meetingId
   */
  meetingId: string;
}

export interface ITasksOnTeamArguments {
  first?: number | null;

  /**
   * the datetime cursor
   */
  after?: any | null;
}

export interface ITeamMembersOnTeamArguments {
  /**
   * the field to sort the teamMembers by
   */
  sortBy?: string | null;
}

/**
 * An invitation and expiration
 */
export interface IMassInvitation {
  __typename: 'MassInvitation';

  /**
   * the invitation token
   */
  id: string;

  /**
   * the expiration for the token
   */
  expiration: any;
  meetingId: string | null;
}

/**
 * All the available integrations available for this team member
 */
export interface ITeamIntegrations {
  __typename: 'TeamIntegrations';

  /**
   * composite
   */
  id: string;

  /**
   * All things associated with an atlassian integration for a team member
   */
  atlassian: IAtlassianTeamIntegration;
}

/**
 * The atlassian integration details shared across an entire team
 */
export interface IAtlassianTeamIntegration {
  __typename: 'AtlassianTeamIntegration';

  /**
   * shortid
   */
  id: string;

  /**
   * The dimensions and their corresponding Jira fields
   */
  jiraDimensionFields: Array<IJiraDimensionField>;
}

/**
 * Poker dimensions mapped to their corresponding fields in jira
 */
export interface IJiraDimensionField {
  __typename: 'JiraDimensionField';
  id: string;

  /**
   * The atlassian cloud that the field lives in
   */
  cloudId: string;

  /**
   * The name of the associated dimension
   */
  dimensionName: string;

  /**
   * The project under the atlassian cloud the field lives in
   */
  projectKey: string;

  /**
   * The ID referring to the field name
   */
  fieldId: string;

  /**
   * The field name in jira that the estimate is pushed to
   */
  fieldName: string;

  /**
   * the type of field, e.g. number, string, any
   */
  fieldType: string;
}

/**
 * A team-specific reflection prompt. Usually 3 or 4 exist per team, eg Good/Bad/Change, 4Ls, etc.
 */
export interface IReflectPrompt {
  __typename: 'ReflectPrompt';

  /**
   * shortid
   */
  id: string;
  createdAt: any;

  /**
   * foreign key. use the team field
   */
  teamId: string;

  /**
   * The team that owns this reflectPrompt
   */
  team: ITeam | null;
  updatedAt: any;

  /**
   * the order of the items in the template
   */
  sortOrder: number;

  /**
   * FK for template
   */
  templateId: string;

  /**
   * The template that this prompt belongs to
   */
  template: IReflectTemplate;

  /**
   * The question to answer during the phase of the retrospective (eg What went well?)
   */
  question: string;

  /**
   * The description to the question for further context. A long version of the question.
   */
  description: string;

  /**
   * The color used to visually group a phase item.
   */
  groupColor: string;

  /**
   * The datetime that the prompt was removed. Null if it has not been removed.
   */
  removedAt: any | null;
}

/**
 * The team-specific templates for the reflection prompts
 */
export interface IReflectTemplate {
  __typename: 'ReflectTemplate';

  /**
   * shortid
   */
  id: string;
  createdAt: any;

  /**
   * True if template can be used, else false
   */
  isActive: boolean;

  /**
   * The time of the meeting the template was last used
   */
  lastUsedAt: any | null;

  /**
   * The name of the template
   */
  name: string;

  /**
   * *Foreign key. The organization that owns the team that created the template
   */
  orgId: string;

  /**
   * Who can see this template
   */
  scope: SharingScopeEnum;

  /**
   * *Foreign key. The team this template belongs to
   */
  teamId: string;

  /**
   * The team this template belongs to
   */
  team: ITeam;

  /**
   * The type of the template
   */
  type: string;
  updatedAt: any;

  /**
   * The prompts that are part of this template
   */
  prompts: Array<IReflectPrompt>;
}

/**
 * The scope of a shareable item
 */
export const enum SharingScopeEnum {
  TEAM = 'TEAM',
  ORGANIZATION = 'ORGANIZATION',
  PUBLIC = 'PUBLIC'
}

/**
 * An invitation to become a team member
 */
export interface ITeamInvitation {
  __typename: 'TeamInvitation';

  /**
   * The unique invitation Id
   */
  id: string;

  /**
   * null if not accepted, else the datetime the invitation was accepted
   */
  acceptedAt: any | null;

  /**
   * null if not accepted, else the userId that accepted the invitation
   */
  acceptedBy: string | null;

  /**
   * The datetime the invitation was created
   */
  createdAt: any;

  /**
   * The email of the invitee
   */
  email: any;

  /**
   * The datetime the invitation expires. Changes when team is archived.
   */
  expiresAt: any;

  /**
   * The userId of the person that sent the invitation
   */
  invitedBy: string;

  /**
   * The userId of the person that sent the invitation
   */
  inviter: IUser;

  /**
   * the meetingId that the invite was generated for
   */
  meetingId: string | null;

  /**
   * The team invited to
   */
  teamId: string;

  /**
   * 48-byte hex encoded random string
   */
  token: string;
}

/**
 * The team settings for a specific type of meeting
 */
export type TeamMeetingSettings =
  | IPokerMeetingSettings
  | IRetrospectiveMeetingSettings
  | IActionMeetingSettings;

/**
 * The team settings for a specific type of meeting
 */
export interface ITeamMeetingSettings {
  __typename: 'TeamMeetingSettings';
  id: string;

  /**
   * The type of meeting these settings apply to
   */
  meetingType: MeetingTypeEnum;

  /**
   * The broad phase types that will be addressed during the meeting
   */
  phaseTypes: Array<NewMeetingPhaseTypeEnum>;

  /**
   * FK
   */
  teamId: string;

  /**
   * The team these settings belong to
   */
  team: ITeam;
}

/**
 * A team-specific template scale.
 */
export interface ITemplateScale {
  __typename: 'TemplateScale';

  /**
   * shortid
   */
  id: string;
  createdAt: any;

  /**
   * true if the scale is currently used by the team, else false
   */
  isActive: boolean;

  /**
   * True if this is a starter/default scale; false otherwise
   */
  isStarter: boolean;

  /**
   * The datetime that the scale was removed. Null if it has not been removed.
   */
  removedAt: any | null;

  /**
   * foreign key. use the team field
   */
  teamId: string;

  /**
   * The team that owns this template scale
   */
  team: ITeam;
  updatedAt: any;

  /**
   * The title of the scale used in the template
   */
  name: string;

  /**
   * The dimensions currently using this scale
   */
  dimensions: Array<ITemplateDimension>;

  /**
   * The values used in this scale
   */
  values: Array<ITemplateScaleValue>;
}

/**
 * A team-specific template dimension: e.g., effort, importance etc.
 */
export interface ITemplateDimension {
  __typename: 'TemplateDimension';

  /**
   * shortid
   */
  id: string;
  createdAt: any;

  /**
   * true if the dimension is currently used by the team, else false
   */
  isActive: boolean;

  /**
   * The datetime that the dimension was removed. Null if it has not been removed.
   */
  removedAt: any | null;

  /**
   * foreign key. use the team field
   */
  teamId: string;

  /**
   * The team that owns this dimension
   */
  team: ITeam;
  updatedAt: any;

  /**
   * the order of the dimensions in the template
   */
  sortOrder: number;

  /**
   * FK for template
   */
  templateId: string;

  /**
   * The template that this dimension belongs to
   */
  template: IPokerTemplate;

  /**
   * The name of the dimension
   */
  name: string;

  /**
   * The description to the dimension name for further context. A long version of the dimension name.
   */
  description: string;

  /**
   * The scaleId to resolve the selected scale
   */
  scaleId: string;

  /**
   * scale used in this dimension
   */
  selectedScale: ITemplateScale;
}

/**
 * A value for a scale.
 */
export interface ITemplateScaleValue {
  __typename: 'TemplateScaleValue';
  id: string;

  /**
   * The id of the scale this value belongs to
   */
  scaleId: string;

  /**
   * The color used to visually group a scale value
   */
  color: string;

  /**
   * The label for this value, e.g., XS, M, L
   */
  label: string;

  /**
   * the order of the scale value in this scale
   */
  sortOrder: number;
}

/**
 * The pay tier of the team
 */
export const enum TierEnum {
  personal = 'personal',
  pro = 'pro',
  enterprise = 'enterprise'
}

/**
 * An organization
 */
export interface IOrganization {
  __typename: 'Organization';

  /**
   * The unique organization ID
   */
  id: string;

  /**
   * The top level domain this organization is linked to, null if only generic emails used
   */
  activeDomain: string | null;

  /**
   * false if the activeDomain is null or was set automatically via a heuristic, true if set manually
   */
  isActiveDomainTouched: boolean;

  /**
   * The datetime the organization was created
   */
  createdAt: any;

  /**
   * The safe credit card details
   */
  creditCard: ICreditCard | null;

  /**
   * The assumed company this organizaiton belongs to
   */
  company: ICompany | null;

  /**
   * true if the viewer is the billing leader for the org
   */
  isBillingLeader: boolean;

  /**
   * The name of the organization
   */
  name: string;

  /**
   * The org avatar
   */
  picture: any | null;

  /**
   * all the teams the viewer is on in the organization
   */
  teams: Array<ITeam>;

  /**
   * The level of access to features on the parabol site
   */
  tier: TierEnum;

  /**
   * THe datetime the current billing cycle ends
   */
  periodEnd: any | null;

  /**
   * The datetime the current billing cycle starts
   */
  periodStart: any | null;

  /**
   * The total number of retroMeetings given to the team
   * @deprecated "Unlimited retros for all!"
   */
  retroMeetingsOffered: number;

  /**
   * Number of retro meetings that can be run (if not pro)
   * @deprecated "Unlimited retros for all!"
   */
  retroMeetingsRemaining: number;

  /**
   * true if should show the org the conversion modal, else false
   */
  showConversionModal: boolean;

  /**
   * The customerId from stripe
   */
  stripeId: string | null;

  /**
   * The subscriptionId from stripe
   */
  stripeSubscriptionId: string | null;

  /**
   * The last upcoming invoice email that was sent, null if never sent
   */
  upcomingInvoiceEmailSentAt: any | null;

  /**
   * The datetime the organization was last updated
   */
  updatedAt: any | null;
  organizationUsers: IOrganizationUserConnection;

  /**
   * The count of active & inactive users
   */
  orgUserCount: IOrgUserCount;

  /**
   * The leaders of the org
   */
  billingLeaders: Array<IUser>;
}

export interface IOrganizationUsersOnOrganizationArguments {
  after?: string | null;
  first?: number | null;
}

/**
 * A credit card
 */
export interface ICreditCard {
  __typename: 'CreditCard';

  /**
   * The brand of the credit card, as provided by stripe
   */
  brand: string;

  /**
   * The MM/YY string of the expiration date
   */
  expiry: string;

  /**
   * The last 4 digits of a credit card
   */
  last4: string;
}

/**
 * A grouping of organizations. Automatically grouped by top level domain of each
 */
export interface ICompany {
  __typename: 'Company';

  /**
   * the top level domain
   */
  id: string;

  /**
   * the number of active teams across all organizations
   */
  activeTeamCount: number;

  /**
   * the number of active users across all organizations
   */
  activeUserCount: number;

  /**
   * the last time any team in the organization started a meeting, null if no meetings were ever run
   */
  lastMetAt: any | null;

  /**
   * the total number of meetings started across all teams on all organizations
   */
  meetingCount: number;

  /**
   * the longest monthly streak for meeting at least once per month for any team in the company
   */
  monthlyTeamStreakMax: number;

  /**
   * Get the list of all organizations that belong to the company
   */
  organizations: Array<IOrganization>;

  /**
   * The highest tier for any organization within the company
   */
  tier: TierEnum;

  /**
   * the total number of users across all organizations
   */
  userCount: number;
}

/**
 * A connection to a list of items.
 */
export interface IOrganizationUserConnection {
  __typename: 'OrganizationUserConnection';

  /**
   * Information to aid in pagination.
   */
  pageInfo: IPageInfo;

  /**
   * A list of edges.
   */
  edges: Array<IOrganizationUserEdge>;
}

/**
 * Information about pagination in a connection.
 */
export interface IPageInfo {
  __typename: 'PageInfo';

  /**
   * When paginating forwards, are there more items?
   */
  hasNextPage: boolean;

  /**
   * When paginating backwards, are there more items?
   */
  hasPreviousPage: boolean;

  /**
   * When paginating backwards, the cursor to continue.
   */
  startCursor: string | null;

  /**
   * When paginating forwards, the cursor to continue.
   */
  endCursor: string | null;
}

/**
 * An edge in a connection.
 */
export interface IOrganizationUserEdge {
  __typename: 'OrganizationUserEdge';

  /**
   * The item at the end of the edge
   */
  node: IOrganizationUser;

  /**
   * A cursor for use in pagination
   */
  cursor: string;
}

/**
 * organization-specific details about a user
 */
export interface IOrganizationUser {
  __typename: 'OrganizationUser';

  /**
   * orgId::userId
   */
  id: string;

  /**
   * true if the user is paused and the orgs are not being billed, else false
   */
  inactive: boolean;

  /**
   * the datetime the user first joined the org
   */
  joinedAt: any;

  /**
   * The last moment a billing leader can remove the user from the org & receive a refund. Set to the subscription periodEnd
   */
  newUserUntil: any;

  /**
   * FK
   */
  orgId: string;

  /**
   * The user attached to the organization
   */
  organization: IOrganization;

  /**
   * if not a member, the datetime the user was removed from the org
   */
  removedAt: any | null;

  /**
   * role of the user in the org
   */
  role: OrgUserRole | null;

  /**
   * FK
   */
  userId: string;

  /**
   * The user attached to the organization
   */
  user: IUser;

  /**
   * Their level of access to features on the parabol site
   */
  tier: TierEnum | null;
}

/**
 * The role of the org user
 */
export const enum OrgUserRole {
  BILLING_LEADER = 'BILLING_LEADER'
}

export interface IOrgUserCount {
  __typename: 'OrgUserCount';

  /**
   * The number of orgUsers who have an inactive flag
   */
  inactiveUserCount: number;

  /**
   * The number of orgUsers who do not have an inactive flag
   */
  activeUserCount: number;
}

/**
 * An estimate for a Task that was voted on and scored in a poker meeting
 */
export interface ITaskEstimate {
  __typename: 'TaskEstimate';

  /**
   * The ID of the estimate
   */
  id: string;

  /**
   * The timestamp the estimate was created
   */
  createdAt: any;

  /**
   * The source that a change came in through
   */
  changeSource: ChangeSourceEnum;

  /**
   * The name of the estimate dimension
   */
  name: string;

  /**
   * The human-readable label for the estimate
   */
  label: string;

  /**
   * *The taskId that the estimate refers to
   */
  taskId: string;

  /**
   * The userId that added the estimate
   */
  userId: string;

  /**
   * *The meetingId that the estimate occured in, if any
   */
  meetingId: string | null;

  /**
   * The meeting stageId the estimate occurred in, if any
   */
  stageId: string | null;

  /**
   * The discussionId where the estimated was discussed
   */
  discussionId: string | null;

  /**
   * If the task comes from jira, this is the jira field that the estimate refers to
   */
  jiraFieldId: string | null;
}

/**
 * The source that a change to a record came in through
 */
export const enum ChangeSourceEnum {
  meeting = 'meeting',
  task = 'task',
  external = 'external'
}

export interface ITaskEditorDetails {
  __typename: 'TaskEditorDetails';

  /**
   * The userId of the person editing the task
   */
  userId: string;

  /**
   * The name of the userId editing the task
   */
  preferredName: string;
}

/**
 * The status of the task
 */
export const enum TaskStatusEnum {
  active = 'active',
  stuck = 'stuck',
  done = 'done',
  future = 'future'
}

/**
 * The user account profile
 */
export interface IUserFeatureFlags {
  __typename: 'UserFeatureFlags';

  /**
   * true if the user has access to retro meeting video
   */
  video: boolean;

  /**
   * true if jira is allowed
   */
  jira: boolean;

  /**
   * true if jira is allowed
   */
  poker: boolean;
}

/**
 * A monthly billing invoice for an organization
 */
export interface IInvoice {
  __typename: 'Invoice';

  /**
   * A shortid for the invoice
   */
  id: string;

  /**
   * The tier this invoice pays for
   */
  tier: TierEnum;

  /**
   * The amount the card will be charged (total + startingBalance with a min value of 0)
   */
  amountDue: number;

  /**
   * The datetime the invoice was first generated
   */
  createdAt: any;

  /**
   * The discount coupon information from Stripe, if any discount applied
   */
  coupon: ICoupon | null;

  /**
   * The total amount for the invoice (in USD)
   */
  total: number;

  /**
   * The emails the invoice was sent to
   */
  billingLeaderEmails: Array<any>;

  /**
   * the card used to pay the invoice
   */
  creditCard: ICreditCard | null;

  /**
   * The timestamp for the end of the billing cycle
   */
  endAt: any;

  /**
   * The date the invoice was created
   */
  invoiceDate: any;

  /**
   * An invoice line item for previous month adjustments
   */
  lines: Array<IInvoiceLineItem>;

  /**
   * The details that comprise the charges for next month
   */
  nextPeriodCharges: INextPeriodCharges;

  /**
   * *The organization id to charge
   */
  orgId: string;

  /**
   * The persisted name of the org as it was when invoiced
   */
  orgName: string;

  /**
   * the datetime the invoice was successfully paid
   */
  paidAt: any | null;

  /**
   * The URL to pay via stripe if payment was not collected in app
   */
  payUrl: string | null;

  /**
   * The picture of the organization
   */
  picture: any | null;

  /**
   * The timestamp for the beginning of the billing cycle
   */
  startAt: any;

  /**
   * The balance on the customer account (in cents)
   */
  startingBalance: number;

  /**
   * the status of the invoice. starts as pending, moves to paid or unpaid depending on if the payment succeeded
   */
  status: InvoiceStatusEnum;
}

/**
 * The discount coupon from Stripe, if any
 */
export interface ICoupon {
  __typename: 'Coupon';

  /**
   * The ID of the discount coupon from Stripe
   */
  id: string;

  /**
   * The amount off the invoice, if any
   */
  amountOff: number | null;

  /**
   * The name of the discount coupon from Stripe
   */
  name: string;

  /**
   * The percent off the invoice, if any
   */
  percentOff: number | null;
}

/**
 * A single line item charge on the invoice
 */
export interface IInvoiceLineItem {
  __typename: 'InvoiceLineItem';

  /**
   * The unique line item id
   */
  id: string;

  /**
   * The amount for the line item (in USD)
   */
  amount: number;

  /**
   * A description of the charge. Only present if we have no idea what the charge is
   */
  description: string | null;

  /**
   * Array of user activity line items that roll up to total activity (add/leave/pause/unpause)
   */
  details: Array<IInvoiceLineItemDetails>;

  /**
   * The total number of days that all org users have been inactive during the billing cycle
   */
  quantity: number | null;

  /**
   * The line item type for a monthly billing invoice
   */
  type: InvoiceLineItemEnum;
}

/**
 * The per-user-action line item details,
 */
export interface IInvoiceLineItemDetails {
  __typename: 'InvoiceLineItemDetails';

  /**
   * The unique detailed line item id
   */
  id: string;

  /**
   * The amount for the line item (in USD)
   */
  amount: number;

  /**
   * The email affected by this line item change
   */
  email: any;

  /**
   * End of the event. Only present if a pause action gets matched up with an unpause action
   */
  endAt: any | null;

  /**
   * The parent line item id
   */
  parentId: string;

  /**
   * The timestamp for the beginning of the period of no charge
   */
  startAt: any | null;
}

/**
 * A big picture line item
 */
export const enum InvoiceLineItemEnum {
  ADDED_USERS = 'ADDED_USERS',
  INACTIVITY_ADJUSTMENTS = 'INACTIVITY_ADJUSTMENTS',
  OTHER_ADJUSTMENTS = 'OTHER_ADJUSTMENTS',
  REMOVED_USERS = 'REMOVED_USERS'
}

/**
 * A single line item for the charges for next month
 */
export interface INextPeriodCharges {
  __typename: 'NextPeriodCharges';

  /**
   * The amount for the line item (in USD)
   */
  amount: number;

  /**
   * The datetime the next period will end
   */
  nextPeriodEnd: any;

  /**
   * The total number of days that all org users have been inactive during the billing cycle
   */
  quantity: number;

  /**
   * The per-seat monthly price of the subscription (in dollars), null if invoice is not per-seat
   */
  unitPrice: number | null;

  /**
   * "year" if enterprise, else "month" for pro
   */
  interval: string | null;
}

/**
 * The payment status of the invoice
 */
export const enum InvoiceStatusEnum {
  PENDING = 'PENDING',
  PAID = 'PAID',
  FAILED = 'FAILED',
  UPCOMING = 'UPCOMING'
}

/**
 * A connection to a list of items.
 */
export interface IInvoiceConnection {
  __typename: 'InvoiceConnection';

  /**
   * Page info with cursors coerced to ISO8601 dates
   */
  pageInfo: IPageInfoDateCursor | null;

  /**
   * A list of edges.
   */
  edges: Array<IInvoiceEdge>;
}

/**
 * An edge in a connection.
 */
export interface IInvoiceEdge {
  __typename: 'InvoiceEdge';

  /**
   * The item at the end of the edge
   */
  node: IInvoice;
  cursor: any | null;
}

/**
 * A past event that is important to the viewer
 */
export type SuggestedAction =
  | ISuggestedActionInviteYourTeam
  | ISuggestedActionTryRetroMeeting
  | ISuggestedActionTryActionMeeting
  | ISuggestedActionCreateNewTeam
  | ISuggestedActionTryTheDemo;

/**
 * A past event that is important to the viewer
 */
export interface ISuggestedAction {
  __typename: 'SuggestedAction';

  /**
   * shortid
   */
  id: string;

  /**
   * * The timestamp the action was created at
   */
  createdAt: any;

  /**
   * The priority of the suggested action compared to other suggested actions (smaller number is higher priority)
   */
  priority: number | null;

  /**
   * * The timestamp the action was removed at
   */
  removedAt: any;

  /**
   * The specific type of suggested action
   */
  type: SuggestedActionTypeEnum;

  /**
   * * The userId this action is for
   */
  userId: string;

  /**
   * The user than can see this event
   */
  user: IUser;
}

/**
 * The specific type of the suggested action
 */
export const enum SuggestedActionTypeEnum {
  inviteYourTeam = 'inviteYourTeam',
  tryTheDemo = 'tryTheDemo',
  tryRetroMeeting = 'tryRetroMeeting',
  createNewTeam = 'createNewTeam',
  tryActionMeeting = 'tryActionMeeting'
}

/**
 * A connection to a list of items.
 */
export interface ITimelineEventConnection {
  __typename: 'TimelineEventConnection';

  /**
   * Page info with cursors coerced to ISO8601 dates
   */
  pageInfo: IPageInfoDateCursor | null;

  /**
   * A list of edges.
   */
  edges: Array<ITimelineEventEdge>;
}

/**
 * An edge in a connection.
 */
export interface ITimelineEventEdge {
  __typename: 'TimelineEventEdge';

  /**
   * The item at the end of the edge
   */
  node: TimelineEvent;
  cursor: any | null;
}

/**
 * A past event that is important to the viewer
 */
export type TimelineEvent =
  | ITimelineEventTeamCreated
  | ITimelineEventJoinedParabol
  | ITimelineEventCompletedRetroMeeting
  | ITimelineEventCompletedActionMeeting
  | ITimelineEventPokerComplete;

/**
 * A past event that is important to the viewer
 */
export interface ITimelineEvent {
  __typename: 'TimelineEvent';

  /**
   * shortid
   */
  id: string;

  /**
   * * The timestamp the event was created at
   */
  createdAt: any;

  /**
   * the number of times the user has interacted with (ie clicked) this event
   */
  interactionCount: number;

  /**
   * true if the timeline event is active, false if archived
   */
  isActive: boolean;

  /**
   * The orgId this event is associated with. Null if not traceable to one org
   */
  orgId: string | null;

  /**
   * The organization this event is associated with
   */
  organization: IOrganization | null;

  /**
   * the number of times the user has seen this event
   */
  seenCount: number;

  /**
   * The teamId this event is associated with. Null if not traceable to one team
   */
  teamId: string | null;

  /**
   * The team that can see this event
   */
  team: ITeam | null;

  /**
   * The specific type of event
   */
  type: TimelineEventEnum;

  /**
   * * The userId that can see this event
   */
  userId: string;

  /**
   * The user than can see this event
   */
  user: IUser;
}

/**
 * The specific type of event
 */
export const enum TimelineEventEnum {
  retroComplete = 'retroComplete',
  actionComplete = 'actionComplete',
  joinedParabol = 'joinedParabol',
  createdTeam = 'createdTeam',
  POKER_COMPLETE = 'POKER_COMPLETE'
}

/**
 * A discussion thread
 */
export interface IDiscussion {
  __typename: 'Discussion';
  id: string;
  teamId: string;
  meetingId: string;

  /**
   * time the thread was created
   */
  createdAt: any;

  /**
   * The partial foreign key that references the object that is the topic of the discussion. E.g. AgendaItemId, TaskId, ReflectionGroupId
   */
  discussionTopicId: string;

  /**
   * The partial foregin key that describes the type of object that is the topic of the discussion. E.g. AgendaItem, TaskId, ReflectionGroup, GitHubIssue
   */
  discussionTopicType: DiscussionTopicTypeEnum;

  /**
   * The number of comments contained in the thread
   */
  commentCount: number;

  /**
   * The users writing a comment right now
   */
  commentors: Array<IUser>;

  /**
   * The comments & tasks thread in the discussion
   */
  thread: IThreadableConnection;
}

export interface IThreadOnDiscussionArguments {
  /**
   * How many items to show. optional if only comments are desired
   */
  first?: number | null;

  /**
   * the incrementing sort order in string format
   */
  after?: string | null;
}

/**
 * The topic being discussed
 */
export const enum DiscussionTopicTypeEnum {
  agendaItem = 'agendaItem',
  reflectionGroup = 'reflectionGroup',
  task = 'task',
  githubIssue = 'githubIssue',
  jiraIssue = 'jiraIssue'
}

/**
 * A connection to a list of items.
 */
export interface IThreadableConnection {
  __typename: 'ThreadableConnection';

  /**
   * Page info with strings (sortOrder) as cursors
   */
  pageInfo: IPageInfo | null;

  /**
   * A list of edges.
   */
  edges: Array<IThreadableEdge>;

  /**
   * Any errors that prevented the query from returning the full results
   */
  error: string | null;
}

/**
 * An edge in a connection.
 */
export interface IThreadableEdge {
  __typename: 'ThreadableEdge';

  /**
   * The item at the end of the edge
   */
  node: Threadable;
  cursor: string | null;
}

/**
 * The latest features released by Parabol
 */
export interface INewFeatureBroadcast {
  __typename: 'NewFeatureBroadcast';
  id: string;

  /**
   * The description of the new features
   */
  copy: string;

  /**
   * The permalink to the blog post describing the new features
   */
  url: string;
}

/**
 * A connection to a list of items.
 */
export interface INotificationConnection {
  __typename: 'NotificationConnection';

  /**
   * Page info with cursors coerced to ISO8601 dates
   */
  pageInfo: IPageInfoDateCursor | null;

  /**
   * A list of edges.
   */
  edges: Array<INotificationEdge>;
}

/**
 * An edge in a connection.
 */
export interface INotificationEdge {
  __typename: 'NotificationEdge';

  /**
   * The item at the end of the edge
   */
  node: Notification;
  cursor: any | null;
}

export type Notification =
  | INotificationTeamInvitation
  | INotifyPromoteToOrgLeader
  | INotifyTeamArchived
  | INotifyTaskInvolves
  | INotifyKickedOut
  | INotificationMeetingStageTimeLimitEnd
  | INotifyPaymentRejected;

export interface INotification {
  __typename: 'Notification';

  /**
   * A shortid for the notification
   */
  id: string;

  /**
   * UNREAD if new, READ if viewer has seen it, CLICKED if viewed clicked it
   */
  status: NotificationStatusEnum;

  /**
   * The datetime to activate the notification & send it to the client
   */
  createdAt: any;
  type: NotificationEnum;

  /**
   * *The userId that should see this notification
   */
  userId: string;
}

/**
 * The status of the notification interaction
 */
export const enum NotificationStatusEnum {
  UNREAD = 'UNREAD',
  READ = 'READ',
  CLICKED = 'CLICKED'
}

/**
 * The kind of notification
 */
export const enum NotificationEnum {
  KICKED_OUT = 'KICKED_OUT',
  PAYMENT_REJECTED = 'PAYMENT_REJECTED',
  PROMOTE_TO_BILLING_LEADER = 'PROMOTE_TO_BILLING_LEADER',
  TEAM_INVITATION = 'TEAM_INVITATION',
  TEAM_ARCHIVED = 'TEAM_ARCHIVED',
  TASK_INVOLVES = 'TASK_INVOLVES',
  MEETING_STAGE_TIME_LIMIT_END = 'MEETING_STAGE_TIME_LIMIT_END'
}

/**
 * A reflection group created during the group phase of a retrospective
 */
export interface IRetroReflectionGroup {
  __typename: 'RetroReflectionGroup';

  /**
   * shortid
   */
  id: string;

  /**
   * A list of users currently commenting
   * @deprecated "Moved to ThreadConnection. Can remove Jun-01-2021"
   */
  commentors: Array<ICommentorDetails> | null;

  /**
   * The timestamp the meeting was created
   */
  createdAt: any;

  /**
   * True if the group has not been removed, else false
   */
  isActive: boolean;

  /**
   * The foreign key to link a reflection group to its meeting
   */
  meetingId: string;

  /**
   * The retrospective meeting this reflection was created in
   */
  meeting: IRetrospectiveMeeting;
  prompt: IReflectPrompt;

  /**
   * The foreign key to link a reflection group to its prompt. Immutable.
   */
  promptId: string;
  reflections: Array<IRetroReflection>;

  /**
   * Our auto-suggested title, to be compared to the actual title for analytics
   */
  smartTitle: string | null;

  /**
   * The sort order of the reflection group
   */
  sortOrder: number;

  /**
   * The team that is running the retro
   */
  team: ITeam | null;

  /**
   * The title of the grouping of the retrospective reflections
   */
  title: string | null;

  /**
   * true if a user wrote the title, else false
   */
  titleIsUserDefined: boolean;

  /**
   * The timestamp the meeting was updated at
   */
  updatedAt: any | null;

  /**
   * A list of voterIds (userIds). Not available to team to preserve anonymity
   */
  voterIds: Array<string>;

  /**
   * The number of votes this group has received
   */
  voteCount: number;

  /**
   * The number of votes the viewer has given this group
   */
  viewerVoteCount: number | null;
}

/**
 * A reflection created during the reflect phase of a retrospective
 */
export interface IRetroReflection {
  __typename: 'RetroReflection';

  /**
   * shortid
   */
  id: string;

  /**
   * All the reactjis for the given reflection
   */
  reactjis: Array<IReactji>;

  /**
   * The ID of the group that the autogrouper assigned the reflection. Error rate = Sum(autoId != Id) / autoId.count()
   */
  autoReflectionGroupId: string | null;

  /**
   * The timestamp the meeting was created
   */
  createdAt: any | null;

  /**
   * The userId that created the reflection (or unique Id if not a team member)
   */
  creatorId: string | null;

  /**
   * an array of all the socketIds that are currently editing the reflection
   */
  editorIds: Array<string>;

  /**
   * True if the reflection was not removed, else false
   */
  isActive: boolean;

  /**
   * true if the viewer (userId) is the creator of the retro reflection, else false
   */
  isViewerCreator: boolean;

  /**
   * The stringified draft-js content
   */
  content: string;

  /**
   * The entities (i.e. nouns) parsed from the content and their respective salience
   */
  entities: Array<IGoogleAnalyzedEntity>;

  /**
   * The foreign key to link a reflection to its meeting
   */
  meetingId: string;

  /**
   * The retrospective meeting this reflection was created in
   */
  meeting: IRetrospectiveMeeting;

  /**
   * The plaintext version of content
   */
  plaintextContent: string;

  /**
   * The foreign key to link a reflection to its prompt. Immutable. For sorting, use prompt on the group.
   */
  promptId: string;
  prompt: IReflectPrompt;

  /**
   * The foreign key to link a reflection to its group
   */
  reflectionGroupId: string;

  /**
   * The group the reflection belongs to, if any
   */
  retroReflectionGroup: IRetroReflectionGroup | null;

  /**
   * The sort order of the reflection in the group (increments starting from 0)
   */
  sortOrder: number;

  /**
   * The team that is running the meeting that contains this reflection
   */
  team: ITeam;

  /**
   * The timestamp the meeting was updated. Used to determine how long it took to write a reflection
   */
  updatedAt: any | null;
}

/**
 * An item that can have reactjis
 */
export type Reactable = IRetroReflection | IComment;

/**
 * An item that can have reactjis
 */
export interface IReactable {
  __typename: 'Reactable';

  /**
   * shortid
   */
  id: string;

  /**
   * All the reactjis for the given reflection
   */
  reactjis: Array<IReactji>;
}

/**
 * An aggregate of reactji metadata
 */
export interface IReactji {
  __typename: 'Reactji';

  /**
   * composite of entity:reactjiId
   */
  id: string;

  /**
   * The number of users who have added this reactji
   */
  count: number;

  /**
   * true if the viewer is included in the count, else false
   */
  isViewerReactji: boolean;
}

export interface IGoogleAnalyzedEntity {
  __typename: 'GoogleAnalyzedEntity';

  /**
   * The lemma (dictionary entry) of the entity name. Fancy way of saying the singular form of the name, if plural.
   */
  lemma: string;

  /**
   * The name of the entity. Usually 1 or 2 words. Always a noun, sometimes a proper noun.
   */
  name: string;

  /**
   * The salience of the entity in the provided text. The salience of all entities always sums to 1
   */
  salience: number;
}

/**
 * The response to a teamInvitation query
 */
export interface ITeamInvitationPayload {
  __typename: 'TeamInvitationPayload';

  /**
   * The team invitation, if any
   */
  teamInvitation: ITeamInvitation | null;

  /**
   * the teamId of the team trying to join
   */
  teamId: string | null;

  /**
   * one of the active meetings trying to join
   */
  meetingId: string | null;
}

/**
 * A stage that focuses on a single team member
 */
export interface ICheckInStage {
  __typename: 'CheckInStage';

  /**
   * stageId, shortid
   */
  id: string;

  /**
   * The datetime the stage was completed
   */
  endAt: any | null;

  /**
   * foreign key. try using meeting
   */
  meetingId: string;

  /**
   * The meeting this stage belongs to
   */
  meeting: NewMeeting | null;

  /**
   * true if the facilitator has completed this stage, else false. Should be boolean(endAt)
   */
  isComplete: boolean;

  /**
   * true if any meeting participant can navigate to this stage
   */
  isNavigable: boolean;

  /**
   * true if the facilitator can navigate to this stage
   */
  isNavigableByFacilitator: boolean;

  /**
   * The phase this stage belongs to
   */
  phase: NewMeetingPhase | null;

  /**
   * The type of the phase
   */
  phaseType: NewMeetingPhaseTypeEnum | null;

  /**
   * The datetime the stage was started
   */
  startAt: any | null;

  /**
   * Number of times the facilitator has visited this stage
   */
  viewCount: number | null;

  /**
   * true if a time limit is set, false if end time is set, null if neither is set
   */
  isAsync: boolean | null;

  /**
   * true if the viewer is ready to advance, else false
   */
  isViewerReady: boolean;

  /**
   * the number of meeting members ready to advance, excluding the facilitator
   */
  readyCount: number;

  /**
   * The datetime the phase is scheduled to be finished, null if no time limit or end time is set
   */
  scheduledEndTime: any | null;

  /**
   * The suggested ending datetime for a phase to be completed async, null if not enough data to make a suggestion
   */
  suggestedEndTime: any | null;

  /**
   * The suggested time limit for a phase to be completed together, null if not enough data to make a suggestion
   */
  suggestedTimeLimit: number | null;
  teamId: string;

  /**
   * The number of milliseconds left before the scheduled end time. Useful for unsynced client clocks. null if scheduledEndTime is null
   */
  timeRemaining: number | null;

  /**
   * The meeting member that is the focus for this phase item
   */
  meetingMember: MeetingMember;

  /**
   * foreign key. use teamMember
   */
  teamMemberId: string;

  /**
   * The team member that is the focus for this phase item
   */
  teamMember: ITeamMember;
}

/**
 * An instance of a meeting phase item. On the client, this usually represents a single view
 */
export type NewMeetingTeamMemberStage = ICheckInStage | IUpdatesStage;

/**
 * An instance of a meeting phase item. On the client, this usually represents a single view
 */
export interface INewMeetingTeamMemberStage {
  __typename: 'NewMeetingTeamMemberStage';

  /**
   * The meeting member that is the focus for this phase item
   */
  meetingMember: MeetingMember;

  /**
   * foreign key. use teamMember
   */
  teamMemberId: string;

  /**
   * The team member that is the focus for this phase item
   */
  teamMember: ITeamMember;
}

export interface IMeetingGreeting {
  __typename: 'MeetingGreeting';

  /**
   * The foreign-language greeting
   */
  content: string;

  /**
   * The source language for the greeting
   */
  language: string;
}

/**
 * The meeting phase where all team members check in one-by-one
 */
export interface IReflectPhase {
  __typename: 'ReflectPhase';

  /**
   * shortid
   */
  id: string;
  meetingId: string;
  teamId: string;

  /**
   * The type of phase
   */
  phaseType: NewMeetingPhaseTypeEnum;
  stages: Array<IGenericMeetingStage>;

  /**
   * foreign key. use focusedPrompt
   */
  focusedPromptId: string | null;

  /**
   * the Prompt that the facilitator wants the group to focus on
   */
  focusedPrompt: IReflectPrompt | null;

  /**
   * The prompts used during the reflect phase
   */
  reflectPrompts: Array<IReflectPrompt>;
}

/**
 * A stage of a meeting that has no extra state. Only used for single-stage phases
 */
export interface IGenericMeetingStage {
  __typename: 'GenericMeetingStage';

  /**
   * stageId, shortid
   */
  id: string;

  /**
   * The datetime the stage was completed
   */
  endAt: any | null;

  /**
   * foreign key. try using meeting
   */
  meetingId: string;

  /**
   * The meeting this stage belongs to
   */
  meeting: NewMeeting | null;

  /**
   * true if the facilitator has completed this stage, else false. Should be boolean(endAt)
   */
  isComplete: boolean;

  /**
   * true if any meeting participant can navigate to this stage
   */
  isNavigable: boolean;

  /**
   * true if the facilitator can navigate to this stage
   */
  isNavigableByFacilitator: boolean;

  /**
   * The phase this stage belongs to
   */
  phase: NewMeetingPhase | null;

  /**
   * The type of the phase
   */
  phaseType: NewMeetingPhaseTypeEnum | null;

  /**
   * The datetime the stage was started
   */
  startAt: any | null;

  /**
   * Number of times the facilitator has visited this stage
   */
  viewCount: number | null;

  /**
   * true if a time limit is set, false if end time is set, null if neither is set
   */
  isAsync: boolean | null;

  /**
   * true if the viewer is ready to advance, else false
   */
  isViewerReady: boolean;

  /**
   * the number of meeting members ready to advance, excluding the facilitator
   */
  readyCount: number;

  /**
   * The datetime the phase is scheduled to be finished, null if no time limit or end time is set
   */
  scheduledEndTime: any | null;

  /**
   * The suggested ending datetime for a phase to be completed async, null if not enough data to make a suggestion
   */
  suggestedEndTime: any | null;

  /**
   * The suggested time limit for a phase to be completed together, null if not enough data to make a suggestion
   */
  suggestedTimeLimit: number | null;
  teamId: string;

  /**
   * The number of milliseconds left before the scheduled end time. Useful for unsynced client clocks. null if scheduledEndTime is null
   */
  timeRemaining: number | null;
}

/**
 * The team-specific templates for sprint poker meeting
 */
export interface IPokerTemplate {
  __typename: 'PokerTemplate';

  /**
   * shortid
   */
  id: string;
  createdAt: any;

  /**
   * True if template can be used, else false
   */
  isActive: boolean;

  /**
   * The time of the meeting the template was last used
   */
  lastUsedAt: any | null;

  /**
   * The name of the template
   */
  name: string;

  /**
   * *Foreign key. The organization that owns the team that created the template
   */
  orgId: string;

  /**
   * Who can see this template
   */
  scope: SharingScopeEnum;

  /**
   * *Foreign key. The team this template belongs to
   */
  teamId: string;

  /**
   * The team this template belongs to
   */
  team: ITeam;

  /**
   * The type of the template
   */
  type: string;
  updatedAt: any;

  /**
   * The dimensions that are part of this template
   */
  dimensions: Array<ITemplateDimension>;

  /**
   * A query for the dimension
   */
  dimension: ITemplateDimension;
}

export interface IDimensionOnPokerTemplateArguments {
  /**
   * The dimension ID for the desired dimension
   */
  dimensionId: string;
}

/**
 * A meeting template that can be shared across team, orgnization and public
 */
export type MeetingTemplate = IReflectTemplate | IPokerTemplate;

/**
 * A meeting template that can be shared across team, orgnization and public
 */
export interface IMeetingTemplate {
  __typename: 'MeetingTemplate';

  /**
   * shortid
   */
  id: string;
  createdAt: any;

  /**
   * True if template can be used, else false
   */
  isActive: boolean;

  /**
   * The time of the meeting the template was last used
   */
  lastUsedAt: any | null;

  /**
   * The name of the template
   */
  name: string;

  /**
   * *Foreign key. The organization that owns the team that created the template
   */
  orgId: string;

  /**
   * Who can see this template
   */
  scope: SharingScopeEnum;

  /**
   * *Foreign key. The team this template belongs to
   */
  teamId: string;

  /**
   * The team this template belongs to
   */
  team: ITeam;

  /**
   * The type of the template
   */
  type: string;
  updatedAt: any;
}

/**
 * The meeting phase where all team members discuss the topics with the most votes
 */
export interface IDiscussPhase {
  __typename: 'DiscussPhase';

  /**
   * shortid
   */
  id: string;
  meetingId: string;
  teamId: string;

  /**
   * The type of phase
   */
  phaseType: NewMeetingPhaseTypeEnum;
  stages: Array<IRetroDiscussStage>;
}

/**
 * The stage where the team discusses a single theme
 */
export interface IRetroDiscussStage {
  __typename: 'RetroDiscussStage';

  /**
   * stageId, shortid
   */
  id: string;

  /**
   * The datetime the stage was completed
   */
  endAt: any | null;

  /**
   * foreign key. try using meeting
   */
  meetingId: string;

  /**
   * The meeting this stage belongs to
   */
  meeting: NewMeeting | null;

  /**
   * true if the facilitator has completed this stage, else false. Should be boolean(endAt)
   */
  isComplete: boolean;

  /**
   * true if any meeting participant can navigate to this stage
   */
  isNavigable: boolean;

  /**
   * true if the facilitator can navigate to this stage
   */
  isNavigableByFacilitator: boolean;

  /**
   * The phase this stage belongs to
   */
  phase: NewMeetingPhase | null;

  /**
   * The type of the phase
   */
  phaseType: NewMeetingPhaseTypeEnum | null;

  /**
   * The datetime the stage was started
   */
  startAt: any | null;

  /**
   * Number of times the facilitator has visited this stage
   */
  viewCount: number | null;

  /**
   * true if a time limit is set, false if end time is set, null if neither is set
   */
  isAsync: boolean | null;

  /**
   * true if the viewer is ready to advance, else false
   */
  isViewerReady: boolean;

  /**
   * the number of meeting members ready to advance, excluding the facilitator
   */
  readyCount: number;

  /**
   * The datetime the phase is scheduled to be finished, null if no time limit or end time is set
   */
  scheduledEndTime: any | null;

  /**
   * The suggested ending datetime for a phase to be completed async, null if not enough data to make a suggestion
   */
  suggestedEndTime: any | null;

  /**
   * The suggested time limit for a phase to be completed together, null if not enough data to make a suggestion
   */
  suggestedTimeLimit: number | null;
  teamId: string;

  /**
   * The number of milliseconds left before the scheduled end time. Useful for unsynced client clocks. null if scheduledEndTime is null
   */
  timeRemaining: number | null;

  /**
   * The ID to find the discussion that goes in the stage
   */
  discussionId: string;

  /**
   * The discussion about the stage or a dummy data when there is no disscussion
   */
  discussion: IDiscussion;

  /**
   * foreign key. use reflectionGroup
   */
  reflectionGroupId: string;

  /**
   * the group that is the focal point of the discussion
   */
  reflectionGroup: IRetroReflectionGroup;

  /**
   * The sort order for reprioritizing discussion topics
   */
  sortOrder: number;
}

/**
 * A meeting stage that includes a discussion thread
 */
export type DiscussionThreadStage =
  | IRetroDiscussStage
  | IEstimateStage
  | IAgendaItemsStage;

/**
 * A meeting stage that includes a discussion thread
 */
export interface IDiscussionThreadStage {
  __typename: 'DiscussionThreadStage';

  /**
   * The ID to find the discussion that goes in the stage
   */
  discussionId: string;

  /**
   * The discussion about the stage
   */
  discussion: IDiscussion;
}

/**
 * The meeting phase where all team members give updates one-by-one
 */
export interface IUpdatesPhase {
  __typename: 'UpdatesPhase';

  /**
   * shortid
   */
  id: string;
  meetingId: string;
  teamId: string;

  /**
   * The type of phase
   */
  phaseType: NewMeetingPhaseTypeEnum;
  stages: Array<IUpdatesStage>;
}

/**
 * A stage that focuses on a single team member
 */
export interface IUpdatesStage {
  __typename: 'UpdatesStage';

  /**
   * stageId, shortid
   */
  id: string;

  /**
   * The datetime the stage was completed
   */
  endAt: any | null;

  /**
   * foreign key. try using meeting
   */
  meetingId: string;

  /**
   * The meeting this stage belongs to
   */
  meeting: NewMeeting | null;

  /**
   * true if the facilitator has completed this stage, else false. Should be boolean(endAt)
   */
  isComplete: boolean;

  /**
   * true if any meeting participant can navigate to this stage
   */
  isNavigable: boolean;

  /**
   * true if the facilitator can navigate to this stage
   */
  isNavigableByFacilitator: boolean;

  /**
   * The phase this stage belongs to
   */
  phase: NewMeetingPhase | null;

  /**
   * The type of the phase
   */
  phaseType: NewMeetingPhaseTypeEnum | null;

  /**
   * The datetime the stage was started
   */
  startAt: any | null;

  /**
   * Number of times the facilitator has visited this stage
   */
  viewCount: number | null;

  /**
   * true if a time limit is set, false if end time is set, null if neither is set
   */
  isAsync: boolean | null;

  /**
   * true if the viewer is ready to advance, else false
   */
  isViewerReady: boolean;

  /**
   * the number of meeting members ready to advance, excluding the facilitator
   */
  readyCount: number;

  /**
   * The datetime the phase is scheduled to be finished, null if no time limit or end time is set
   */
  scheduledEndTime: any | null;

  /**
   * The suggested ending datetime for a phase to be completed async, null if not enough data to make a suggestion
   */
  suggestedEndTime: any | null;

  /**
   * The suggested time limit for a phase to be completed together, null if not enough data to make a suggestion
   */
  suggestedTimeLimit: number | null;
  teamId: string;

  /**
   * The number of milliseconds left before the scheduled end time. Useful for unsynced client clocks. null if scheduledEndTime is null
   */
  timeRemaining: number | null;

  /**
   * The meeting member that is the focus for this phase item
   */
  meetingMember: MeetingMember;

  /**
   * foreign key. use teamMember
   */
  teamMemberId: string;

  /**
   * The team member that is the focus for this phase item
   */
  teamMember: ITeamMember;
}

/**
 * The stage where the team estimates & discusses a single task
 */
export interface IEstimateStage {
  __typename: 'EstimateStage';

  /**
   * stageId, shortid
   */
  id: string;

  /**
   * The datetime the stage was completed
   */
  endAt: any | null;

  /**
   * foreign key. try using meeting
   */
  meetingId: string;

  /**
   * The meeting this stage belongs to
   */
  meeting: NewMeeting | null;

  /**
   * true if the facilitator has completed this stage, else false. Should be boolean(endAt)
   */
  isComplete: boolean;

  /**
   * true if any meeting participant can navigate to this stage
   */
  isNavigable: boolean;

  /**
   * true if the facilitator can navigate to this stage
   */
  isNavigableByFacilitator: boolean;

  /**
   * The phase this stage belongs to
   */
  phase: NewMeetingPhase | null;

  /**
   * The type of the phase
   */
  phaseType: NewMeetingPhaseTypeEnum | null;

  /**
   * The datetime the stage was started
   */
  startAt: any | null;

  /**
   * Number of times the facilitator has visited this stage
   */
  viewCount: number | null;

  /**
   * true if a time limit is set, false if end time is set, null if neither is set
   */
  isAsync: boolean | null;

  /**
   * true if the viewer is ready to advance, else false
   */
  isViewerReady: boolean;

  /**
   * the number of meeting members ready to advance, excluding the facilitator
   */
  readyCount: number;

  /**
   * The datetime the phase is scheduled to be finished, null if no time limit or end time is set
   */
  scheduledEndTime: any | null;

  /**
   * The suggested ending datetime for a phase to be completed async, null if not enough data to make a suggestion
   */
  suggestedEndTime: any | null;

  /**
   * The suggested time limit for a phase to be completed together, null if not enough data to make a suggestion
   */
  suggestedTimeLimit: number | null;
  teamId: string;

  /**
   * The number of milliseconds left before the scheduled end time. Useful for unsynced client clocks. null if scheduledEndTime is null
   */
  timeRemaining: number | null;

  /**
   * The ID to find the discussion that goes in the stage
   */
  discussionId: string;

  /**
   * The discussion about the stage
   */
  discussion: IDiscussion;

  /**
   * The id of the user that added this stage.
   */
  creatorUserId: string;

  /**
   * The ID that points to the issue that exists in parabol
   */
  taskId: string;

  /**
   * The field name used by the service for this dimension
   */
  serviceField: IServiceField;

  /**
   * The sort order for reprioritizing discussion topics
   */
  sortOrder: number;

  /**
   * The immutable index of the dimensionRef tied to this stage
   */
  dimensionRefIdx: number;

  /**
   * The immutable dimension linked to this stage
   */
  dimensionRef: ITemplateDimensionRef;

  /**
   * the final score, as defined by the facilitator
   */
  finalScore: string | null;

  /**
   * the userIds of the team members hovering the deck
   */
  hoveringUserIds: Array<string>;

  /**
   * the users of the team members hovering the deck
   */
  hoveringUsers: Array<IUser>;

  /**
   * all the estimates, 1 per user
   */
  scores: Array<IEstimateUserScore>;

  /**
   * The task referenced in the stage, as it exists in Parabol. null if the task was deleted
   */
  task: ITask | null;

  /**
   * true when the participants are still voting and results are hidden. false when votes are revealed
   */
  isVoting: boolean;
}

/**
 * A field that exists on a 3rd party service
 */
export interface IServiceField {
  __typename: 'ServiceField';

  /**
   * The name of the field as provided by the service
   */
  name: string;

  /**
   * The field type, to be used for validation and analytics
   */
  type: string;
}

/**
 * An immutable TemplateDimension
 */
export interface ITemplateDimensionRef {
  __typename: 'TemplateDimensionRef';
  id: string;

  /**
   * the order of the dimensions in the template
   */
  sortOrder: number;

  /**
   * The name of the dimension
   */
  name: string;

  /**
   * The md5 hash to resolve the immutable selected scale ref
   */
  scaleRefId: string;

  /**
   * scale used in this dimension
   */
  scale: ITemplateScaleRef;
}

/**
 * An immutable version of TemplateScale to be shared across all users
 */
export interface ITemplateScaleRef {
  __typename: 'TemplateScaleRef';

  /**
   * md5 hash
   */
  id: string;
  createdAt: any;

  /**
   * The title of the scale used in the template
   */
  name: string;

  /**
   * The values used in this scale
   */
  values: Array<ITemplateScaleValue>;
}

/**
 * The user and number of points they estimated for dimension (where 1 stage has 1 dimension)
 */
export interface IEstimateUserScore {
  __typename: 'EstimateUserScore';

  /**
   * shortid
   */
  id: string;

  /**
   * The stageId
   */
  stageId: string;

  /**
   * The userId that for this score
   */
  userId: string;

  /**
   * The user that for this score
   */
  user: IUser;

  /**
   * The label that was associated with the score at the time of the vote. Note: It may no longer exist on the dimension
   */
  label: string;
}

/**
 * The meeting phase where all team members discuss the topics with the most votes
 */
export interface IAgendaItemsPhase {
  __typename: 'AgendaItemsPhase';

  /**
   * shortid
   */
  id: string;
  meetingId: string;
  teamId: string;

  /**
   * The type of phase
   */
  phaseType: NewMeetingPhaseTypeEnum;
  stages: Array<IAgendaItemsStage>;
}

/**
 * The stage where the team discusses a single agenda item
 */
export interface IAgendaItemsStage {
  __typename: 'AgendaItemsStage';

  /**
   * stageId, shortid
   */
  id: string;

  /**
   * The datetime the stage was completed
   */
  endAt: any | null;

  /**
   * foreign key. try using meeting
   */
  meetingId: string;

  /**
   * The meeting this stage belongs to
   */
  meeting: NewMeeting | null;

  /**
   * true if the facilitator has completed this stage, else false. Should be boolean(endAt)
   */
  isComplete: boolean;

  /**
   * true if any meeting participant can navigate to this stage
   */
  isNavigable: boolean;

  /**
   * true if the facilitator can navigate to this stage
   */
  isNavigableByFacilitator: boolean;

  /**
   * The phase this stage belongs to
   */
  phase: NewMeetingPhase | null;

  /**
   * The type of the phase
   */
  phaseType: NewMeetingPhaseTypeEnum | null;

  /**
   * The datetime the stage was started
   */
  startAt: any | null;

  /**
   * Number of times the facilitator has visited this stage
   */
  viewCount: number | null;

  /**
   * true if a time limit is set, false if end time is set, null if neither is set
   */
  isAsync: boolean | null;

  /**
   * true if the viewer is ready to advance, else false
   */
  isViewerReady: boolean;

  /**
   * the number of meeting members ready to advance, excluding the facilitator
   */
  readyCount: number;

  /**
   * The datetime the phase is scheduled to be finished, null if no time limit or end time is set
   */
  scheduledEndTime: any | null;

  /**
   * The suggested ending datetime for a phase to be completed async, null if not enough data to make a suggestion
   */
  suggestedEndTime: any | null;

  /**
   * The suggested time limit for a phase to be completed together, null if not enough data to make a suggestion
   */
  suggestedTimeLimit: number | null;
  teamId: string;

  /**
   * The number of milliseconds left before the scheduled end time. Useful for unsynced client clocks. null if scheduledEndTime is null
   */
  timeRemaining: number | null;

  /**
   * The ID to find the discussion that goes in the stage
   */
  discussionId: string;

  /**
   * The discussion about the stage
   */
  discussion: IDiscussion;

  /**
   * The id of the agenda item this relates to
   */
  agendaItemId: string;
  agendaItem: IAgendaItem;
}

/**
 * An all-purpose meeting phase with no extra state
 */
export interface IGenericMeetingPhase {
  __typename: 'GenericMeetingPhase';

  /**
   * shortid
   */
  id: string;
  meetingId: string;
  teamId: string;

  /**
   * The type of phase
   */
  phaseType: NewMeetingPhaseTypeEnum;
  stages: Array<IGenericMeetingStage>;
}

/**
 * The meeting phase where all team members estimate a the point value of a task
 */
export interface IEstimatePhase {
  __typename: 'EstimatePhase';

  /**
   * shortid
   */
  id: string;
  meetingId: string;
  teamId: string;

  /**
   * The type of phase
   */
  phaseType: NewMeetingPhaseTypeEnum;
  stages: Array<IEstimateStage>;
}

/**
 * A notification sent to a user that was invited to a new team
 */
export interface INotificationTeamInvitation {
  __typename: 'NotificationTeamInvitation';

  /**
   * FK
   */
  teamId: string;

  /**
   * FK
   */
  invitationId: string;

  /**
   * The invitation that triggered this notification
   */
  invitation: ITeamInvitation;
  team: ITeam;

  /**
   * A shortid for the notification
   */
  id: string;

  /**
   * UNREAD if new, READ if viewer has seen it, CLICKED if viewed clicked it
   */
  status: NotificationStatusEnum;

  /**
   * The datetime to activate the notification & send it to the client
   */
  createdAt: any;
  type: NotificationEnum;

  /**
   * *The userId that should see this notification
   */
  userId: string;
}

export type TeamNotification =
  | INotificationTeamInvitation
  | INotifyTaskInvolves
  | INotificationMeetingStageTimeLimitEnd;

export interface ITeamNotification {
  __typename: 'TeamNotification';
  id: string | null;
  type: NotificationEnum | null;
}

/**
 * A notification alerting the user that they have been promoted (to team or org leader)
 */
export interface INotifyPromoteToOrgLeader {
  __typename: 'NotifyPromoteToOrgLeader';
  organization: IOrganization;

  /**
   * A shortid for the notification
   */
  id: string;

  /**
   * UNREAD if new, READ if viewer has seen it, CLICKED if viewed clicked it
   */
  status: NotificationStatusEnum;

  /**
   * The datetime to activate the notification & send it to the client
   */
  createdAt: any;
  type: NotificationEnum;

  /**
   * *The userId that should see this notification
   */
  userId: string;
}

/**
 * An action meeting
 */
export interface IActionMeeting {
  __typename: 'ActionMeeting';

  /**
   * The unique meeting id. shortid.
   */
  id: string;

  /**
   * The timestamp the meeting was created
   */
  createdAt: any;

  /**
   * The id of the user that created the meeting
   */
  createdBy: string;

  /**
   * The user that created the meeting
   */
  createdByUser: IUser;

  /**
   * The timestamp the meeting officially ended
   */
  endedAt: any | null;

  /**
   * The location of the facilitator in the meeting
   */
  facilitatorStageId: string;

  /**
   * The userId (or anonymousId) of the most recent facilitator
   */
  facilitatorUserId: string;

  /**
   * The facilitator team member
   */
  facilitator: ITeamMember;

  /**
   * The team members that were active during the time of the meeting
   */
  meetingMembers: Array<IActionMeetingMember>;

  /**
   * The auto-incrementing meeting number for the team
   */
  meetingNumber: number;
  meetingType: MeetingTypeEnum;

  /**
   * The name of the meeting
   */
  name: string;

  /**
   * The organization this meeting belongs to
   */
  organization: IOrganization;

  /**
   * The phases the meeting will go through, including all phase-specific state
   */
  phases: Array<NewMeetingPhase>;

  /**
   * true if should show the org the conversion modal, else false
   */
  showConversionModal: boolean;

  /**
   * The time the meeting summary was emailed to the team
   */
  summarySentAt: any | null;

  /**
   * foreign key for team
   */
  teamId: string;

  /**
   * The team that ran the meeting
   */
  team: ITeam;

  /**
   * The last time a meeting was updated (stage completed, finished, etc)
   */
  updatedAt: any | null;

  /**
   * The action meeting member of the viewer
   */
  viewerMeetingMember: IActionMeetingMember | null;

  /**
   * A single agenda item
   */
  agendaItem: IAgendaItem | null;

  /**
   * The number of agenda items generated in the meeting
   */
  agendaItemCount: number;

  /**
   * All of the agenda items for the meeting
   */
  agendaItems: Array<IAgendaItem>;

  /**
   * The number of comments generated in the meeting
   */
  commentCount: number;

  /**
   * The settings that govern the action meeting
   */
  settings: IActionMeetingSettings;

  /**
   * The number of tasks generated in the meeting
   */
  taskCount: number;

  /**
   * The tasks created within the meeting
   */
  tasks: Array<ITask>;
}

export interface IAgendaItemOnActionMeetingArguments {
  agendaItemId: string;
}

/**
 * All the meeting specifics for a user in a retro meeting
 */
export interface IActionMeetingMember {
  __typename: 'ActionMeetingMember';

  /**
   * A composite of userId::meetingId
   */
  id: string;

  /**
   * true if present, false if absent, else null
   * @deprecated "Members are checked in when they enter the meeting now & not created beforehand"
   */
  isCheckedIn: boolean | null;
  meetingId: string;
  meetingType: MeetingTypeEnum;
  teamId: string;
  teamMember: ITeamMember;
  user: IUser;
  userId: string;

  /**
   * The last time a meeting was updated (stage completed, finished, etc)
   */
  updatedAt: any;

  /**
   * The tasks marked as done in the meeting
   */
  doneTasks: Array<ITask>;

  /**
   * The tasks assigned to members during the meeting
   */
  tasks: Array<ITask>;
}

/**
 * The retro-specific meeting settings
 */
export interface IPokerMeetingSettings {
  __typename: 'PokerMeetingSettings';
  id: string;

  /**
   * The type of meeting these settings apply to
   */
  meetingType: MeetingTypeEnum;

  /**
   * The broad phase types that will be addressed during the meeting
   */
  phaseTypes: Array<NewMeetingPhaseTypeEnum>;

  /**
   * FK
   */
  teamId: string;

  /**
   * The team these settings belong to
   */
  team: ITeam;

  /**
   * FK. The template that will be used to start the poker meeting
   */
  selectedTemplateId: string;

  /**
   * The template that will be used to start the Poker meeting
   */
  selectedTemplate: IPokerTemplate;

  /**
   * The list of templates used to start a Poker meeting
   */
  teamTemplates: Array<IPokerTemplate>;

  /**
   * The list of templates shared across the organization to start a Poker meeting
   */
  organizationTemplates: IPokerTemplateConnection;

  /**
   * The list of templates shared across the organization to start a Poker meeting
   */
  publicTemplates: IPokerTemplateConnection;
}

export interface IOrganizationTemplatesOnPokerMeetingSettingsArguments {
  first: number;

  /**
   * The cursor, which is the templateId
   */
  after?: string | null;
}

export interface IPublicTemplatesOnPokerMeetingSettingsArguments {
  first: number;

  /**
   * The cursor, which is the templateId
   */
  after?: string | null;
}

/**
 * A connection to a list of items.
 */
export interface IPokerTemplateConnection {
  __typename: 'PokerTemplateConnection';

  /**
   * Information to aid in pagination.
   */
  pageInfo: IPageInfo;

  /**
   * A list of edges.
   */
  edges: Array<IPokerTemplateEdge>;
}

/**
 * An edge in a connection.
 */
export interface IPokerTemplateEdge {
  __typename: 'PokerTemplateEdge';

  /**
   * The item at the end of the edge
   */
  node: IPokerTemplate;

  /**
   * A cursor for use in pagination
   */
  cursor: string;
}

/**
 * A retrospective meeting
 */
export interface IRetrospectiveMeeting {
  __typename: 'RetrospectiveMeeting';

  /**
   * The unique meeting id. shortid.
   */
  id: string;

  /**
   * The timestamp the meeting was created
   */
  createdAt: any;

  /**
   * The id of the user that created the meeting
   */
  createdBy: string;

  /**
   * The user that created the meeting
   */
  createdByUser: IUser;

  /**
   * The timestamp the meeting officially ended
   */
  endedAt: any | null;

  /**
   * The location of the facilitator in the meeting
   */
  facilitatorStageId: string;

  /**
   * The userId (or anonymousId) of the most recent facilitator
   */
  facilitatorUserId: string;

  /**
   * The facilitator team member
   */
  facilitator: ITeamMember;

  /**
   * The team members that were active during the time of the meeting
   */
  meetingMembers: Array<IRetrospectiveMeetingMember>;

  /**
   * The auto-incrementing meeting number for the team
   */
  meetingNumber: number;
  meetingType: MeetingTypeEnum;

  /**
   * The name of the meeting
   */
  name: string;

  /**
   * The organization this meeting belongs to
   */
  organization: IOrganization;

  /**
   * The phases the meeting will go through, including all phase-specific state
   */
  phases: Array<NewMeetingPhase>;

  /**
   * true if should show the org the conversion modal, else false
   */
  showConversionModal: boolean;

  /**
   * The time the meeting summary was emailed to the team
   */
  summarySentAt: any | null;
  teamId: string;

  /**
   * The team that ran the meeting
   */
  team: ITeam;

  /**
   * The last time a meeting was updated (stage completed, finished, etc)
   */
  updatedAt: any | null;

  /**
   * The retrospective meeting member of the viewer
   */
  viewerMeetingMember: IRetrospectiveMeetingMember | null;

  /**
   * the threshold used to achieve the autogroup. Useful for model tuning. Serves as a flag if autogroup was used.
   */
  autoGroupThreshold: number | null;

  /**
   * The number of comments generated in the meeting
   */
  commentCount: number;

  /**
   * the number of votes allowed for each participant to cast on a single group
   */
  maxVotesPerGroup: number;

  /**
   * the next smallest distance threshold to guarantee at least 1 more grouping will be achieved
   */
  nextAutoGroupThreshold: number | null;

  /**
   * The number of reflections generated in the meeting
   */
  reflectionCount: number;

  /**
   * a single reflection group
   */
  reflectionGroup: IRetroReflectionGroup | null;

  /**
   * The grouped reflections
   */
  reflectionGroups: Array<IRetroReflectionGroup>;

  /**
   * The settings that govern the retrospective meeting
   */
  settings: IRetrospectiveMeetingSettings;

  /**
   * The number of tasks generated in the meeting
   */
  taskCount: number;

  /**
   * The tasks created within the meeting
   */
  tasks: Array<ITask>;

  /**
   * The ID of the template used for the meeting
   */
  templateId: string;

  /**
   * The number of topics generated in the meeting
   */
  topicCount: number;

  /**
   * the total number of votes allowed for each participant
   */
  totalVotes: number;

  /**
   * The sum total of the votes remaining for the meeting members that are present in the meeting
   */
  votesRemaining: number;
}

export interface IReflectionGroupOnRetrospectiveMeetingArguments {
  reflectionGroupId: string;
}

export interface IReflectionGroupsOnRetrospectiveMeetingArguments {
  sortBy?: ReflectionGroupSortEnum | null;
}

/**
 * sorts for the reflection group. default is sortOrder. sorting by voteCount filters out items without votes.
 */
export const enum ReflectionGroupSortEnum {
  voteCount = 'voteCount',
  stageOrder = 'stageOrder'
}

/**
 * All the meeting specifics for a user in a retro meeting
 */
export interface IRetrospectiveMeetingMember {
  __typename: 'RetrospectiveMeetingMember';

  /**
   * A composite of userId::meetingId
   */
  id: string;

  /**
   * true if present, false if absent, else null
   * @deprecated "Members are checked in when they enter the meeting now & not created beforehand"
   */
  isCheckedIn: boolean | null;
  meetingId: string;
  meetingType: MeetingTypeEnum;
  teamId: string;
  teamMember: ITeamMember;
  user: IUser;
  userId: string;

  /**
   * The last time a meeting was updated (stage completed, finished, etc)
   */
  updatedAt: any;

  /**
   * The tasks assigned to members during the meeting
   */
  tasks: Array<ITask>;
  votesRemaining: number;
}

/**
 * The retro-specific meeting settings
 */
export interface IRetrospectiveMeetingSettings {
  __typename: 'RetrospectiveMeetingSettings';
  id: string;

  /**
   * The type of meeting these settings apply to
   */
  meetingType: MeetingTypeEnum;

  /**
   * The broad phase types that will be addressed during the meeting
   */
  phaseTypes: Array<NewMeetingPhaseTypeEnum>;

  /**
   * FK
   */
  teamId: string;

  /**
   * The team these settings belong to
   */
  team: ITeam;

  /**
   * The total number of votes each team member receives for the voting phase
   */
  totalVotes: number;

  /**
   * The maximum number of votes a team member can vote for a single reflection group
   */
  maxVotesPerGroup: number;

  /**
   * FK. The template that will be used to start the retrospective
   */
  selectedTemplateId: string;

  /**
   * The template that will be used to start the retrospective
   */
  selectedTemplate: IReflectTemplate;

  /**
   * The list of templates used to start a retrospective
   */
  reflectTemplates: Array<IReflectTemplate>;

  /**
   * The list of templates used to start a retrospective
   */
  teamTemplates: Array<IReflectTemplate>;

  /**
   * The list of templates shared across the organization to start a retrospective
   */
  organizationTemplates: IReflectTemplateConnection;

  /**
   * The list of templates shared across the organization to start a retrospective
   */
  publicTemplates: IReflectTemplateConnection;
}

export interface IOrganizationTemplatesOnRetrospectiveMeetingSettingsArguments {
  first: number;

  /**
   * The cursor, which is the templateId
   */
  after?: string | null;
}

export interface IPublicTemplatesOnRetrospectiveMeetingSettingsArguments {
  first: number;

  /**
   * The cursor, which is the templateId
   */
  after?: string | null;
}

/**
 * A connection to a list of items.
 */
export interface IReflectTemplateConnection {
  __typename: 'ReflectTemplateConnection';

  /**
   * Information to aid in pagination.
   */
  pageInfo: IPageInfo;

  /**
   * A list of edges.
   */
  edges: Array<IReflectTemplateEdge>;
}

/**
 * An edge in a connection.
 */
export interface IReflectTemplateEdge {
  __typename: 'ReflectTemplateEdge';

  /**
   * The item at the end of the edge
   */
  node: IReflectTemplate;

  /**
   * A cursor for use in pagination
   */
  cursor: string;
}

/**
 * a suggestion to invite others to your team
 */
export interface ISuggestedActionInviteYourTeam {
  __typename: 'SuggestedActionInviteYourTeam';

  /**
   * shortid
   */
  id: string;

  /**
   * * The timestamp the action was created at
   */
  createdAt: any;

  /**
   * The priority of the suggested action compared to other suggested actions (smaller number is higher priority)
   */
  priority: number | null;

  /**
   * * The timestamp the action was removed at
   */
  removedAt: any;

  /**
   * The specific type of suggested action
   */
  type: SuggestedActionTypeEnum;

  /**
   * * The userId this action is for
   */
  userId: string;

  /**
   * The user than can see this event
   */
  user: IUser;

  /**
   * The teamId that we suggest you should invite people to
   */
  teamId: string;

  /**
   * The team you should invite people to
   */
  team: ITeam;
}

/**
 * a suggestion to try a retro with your team
 */
export interface ISuggestedActionTryRetroMeeting {
  __typename: 'SuggestedActionTryRetroMeeting';

  /**
   * shortid
   */
  id: string;

  /**
   * * The timestamp the action was created at
   */
  createdAt: any;

  /**
   * The priority of the suggested action compared to other suggested actions (smaller number is higher priority)
   */
  priority: number | null;

  /**
   * * The timestamp the action was removed at
   */
  removedAt: any;

  /**
   * The specific type of suggested action
   */
  type: SuggestedActionTypeEnum;

  /**
   * * The userId this action is for
   */
  userId: string;

  /**
   * The user than can see this event
   */
  user: IUser;

  /**
   * fk
   */
  teamId: string;

  /**
   * The team you should run a retro with
   */
  team: ITeam;
}

/**
 * a suggestion to try a retro with your team
 */
export interface ISuggestedActionTryActionMeeting {
  __typename: 'SuggestedActionTryActionMeeting';

  /**
   * shortid
   */
  id: string;

  /**
   * * The timestamp the action was created at
   */
  createdAt: any;

  /**
   * The priority of the suggested action compared to other suggested actions (smaller number is higher priority)
   */
  priority: number | null;

  /**
   * * The timestamp the action was removed at
   */
  removedAt: any;

  /**
   * The specific type of suggested action
   */
  type: SuggestedActionTypeEnum;

  /**
   * * The userId this action is for
   */
  userId: string;

  /**
   * The user than can see this event
   */
  user: IUser;

  /**
   * fk
   */
  teamId: string;

  /**
   * The team you should run an action meeting with
   */
  team: ITeam;
}

/**
 * a suggestion to try a retro with your team
 */
export interface ISuggestedActionCreateNewTeam {
  __typename: 'SuggestedActionCreateNewTeam';

  /**
   * shortid
   */
  id: string;

  /**
   * * The timestamp the action was created at
   */
  createdAt: any;

  /**
   * The priority of the suggested action compared to other suggested actions (smaller number is higher priority)
   */
  priority: number | null;

  /**
   * * The timestamp the action was removed at
   */
  removedAt: any;

  /**
   * The specific type of suggested action
   */
  type: SuggestedActionTypeEnum;

  /**
   * * The userId this action is for
   */
  userId: string;

  /**
   * The user than can see this event
   */
  user: IUser;
}

/**
 * a suggestion to invite others to your team
 */
export interface ISuggestedActionTryTheDemo {
  __typename: 'SuggestedActionTryTheDemo';

  /**
   * shortid
   */
  id: string;

  /**
   * * The timestamp the action was created at
   */
  createdAt: any;

  /**
   * The priority of the suggested action compared to other suggested actions (smaller number is higher priority)
   */
  priority: number | null;

  /**
   * * The timestamp the action was removed at
   */
  removedAt: any;

  /**
   * The specific type of suggested action
   */
  type: SuggestedActionTypeEnum;

  /**
   * * The userId this action is for
   */
  userId: string;

  /**
   * The user than can see this event
   */
  user: IUser;
}

/**
 * An event triggered whenever a team is created
 */
export interface ITimelineEventTeamCreated {
  __typename: 'TimelineEventTeamCreated';

  /**
   * shortid
   */
  id: string;

  /**
   * * The timestamp the event was created at
   */
  createdAt: any;

  /**
   * the number of times the user has interacted with (ie clicked) this event
   */
  interactionCount: number;

  /**
   * true if the timeline event is active, false if archived
   */
  isActive: boolean;

  /**
   * The orgId this event is associated with
   */
  orgId: string;

  /**
   * The organization this event is associated with
   */
  organization: IOrganization | null;

  /**
   * the number of times the user has seen this event
   */
  seenCount: number;

  /**
   * The teamId this event is associated with. Null if not traceable to one team
   */
  teamId: string;

  /**
   * The team that can see this event
   */
  team: ITeam;

  /**
   * The specific type of event
   */
  type: TimelineEventEnum;

  /**
   * * The userId that can see this event
   */
  userId: string;

  /**
   * The user than can see this event
   */
  user: IUser;
}

/**
 * An event for joining the app
 */
export interface ITimelineEventJoinedParabol {
  __typename: 'TimelineEventJoinedParabol';

  /**
   * shortid
   */
  id: string;

  /**
   * * The timestamp the event was created at
   */
  createdAt: any;

  /**
   * the number of times the user has interacted with (ie clicked) this event
   */
  interactionCount: number;

  /**
   * true if the timeline event is active, false if archived
   */
  isActive: boolean;

  /**
   * The orgId this event is associated with. Null if not traceable to one org
   */
  orgId: string | null;

  /**
   * The organization this event is associated with
   */
  organization: IOrganization | null;

  /**
   * the number of times the user has seen this event
   */
  seenCount: number;

  /**
   * The teamId this event is associated with. Null if not traceable to one team
   */
  teamId: string | null;

  /**
   * The team that can see this event
   */
  team: ITeam | null;

  /**
   * The specific type of event
   */
  type: TimelineEventEnum;

  /**
   * * The userId that can see this event
   */
  userId: string;

  /**
   * The user than can see this event
   */
  user: IUser;
}

/**
 * An event for a completed retro meeting
 */
export interface ITimelineEventCompletedRetroMeeting {
  __typename: 'TimelineEventCompletedRetroMeeting';

  /**
   * shortid
   */
  id: string;

  /**
   * * The timestamp the event was created at
   */
  createdAt: any;

  /**
   * the number of times the user has interacted with (ie clicked) this event
   */
  interactionCount: number;

  /**
   * true if the timeline event is active, false if archived
   */
  isActive: boolean;

  /**
   * The orgId this event is associated with
   */
  orgId: string;

  /**
   * The organization this event is associated with
   */
  organization: IOrganization | null;

  /**
   * the number of times the user has seen this event
   */
  seenCount: number;

  /**
   * The teamId this event is associated with
   */
  teamId: string;

  /**
   * The team that can see this event
   */
  team: ITeam;

  /**
   * The specific type of event
   */
  type: TimelineEventEnum;

  /**
   * * The userId that can see this event
   */
  userId: string;

  /**
   * The user than can see this event
   */
  user: IUser;

  /**
   * The meeting that was completed
   */
  meeting: IRetrospectiveMeeting;

  /**
   * The meetingId that was completed
   */
  meetingId: string;
}

/**
 * An event for a completed action meeting
 */
export interface ITimelineEventCompletedActionMeeting {
  __typename: 'TimelineEventCompletedActionMeeting';

  /**
   * shortid
   */
  id: string;

  /**
   * * The timestamp the event was created at
   */
  createdAt: any;

  /**
   * the number of times the user has interacted with (ie clicked) this event
   */
  interactionCount: number;

  /**
   * true if the timeline event is active, false if archived
   */
  isActive: boolean;

  /**
   * The orgId this event is associated with
   */
  orgId: string;

  /**
   * The organization this event is associated with
   */
  organization: IOrganization | null;

  /**
   * the number of times the user has seen this event
   */
  seenCount: number;

  /**
   * The teamId this event is associated with
   */
  teamId: string;

  /**
   * The team that can see this event
   */
  team: ITeam;

  /**
   * The specific type of event
   */
  type: TimelineEventEnum;

  /**
   * * The userId that can see this event
   */
  userId: string;

  /**
   * The user than can see this event
   */
  user: IUser;

  /**
   * The meeting that was completed
   */
  meeting: IActionMeeting;

  /**
   * The meetingId that was completed, null if legacyMeetingId is present
   */
  meetingId: string;
}

/**
 * An event for a completed poker meeting
 */
export interface ITimelineEventPokerComplete {
  __typename: 'TimelineEventPokerComplete';

  /**
   * shortid
   */
  id: string;

  /**
   * * The timestamp the event was created at
   */
  createdAt: any;

  /**
   * the number of times the user has interacted with (ie clicked) this event
   */
  interactionCount: number;

  /**
   * true if the timeline event is active, false if archived
   */
  isActive: boolean;

  /**
   * The orgId this event is associated with
   */
  orgId: string;

  /**
   * The organization this event is associated with
   */
  organization: IOrganization | null;

  /**
   * the number of times the user has seen this event
   */
  seenCount: number;

  /**
   * The teamId this event is associated with
   */
  teamId: string;

  /**
   * The team that can see this event
   */
  team: ITeam;

  /**
   * The specific type of event
   */
  type: TimelineEventEnum;

  /**
   * * The userId that can see this event
   */
  userId: string;

  /**
   * The user than can see this event
   */
  user: IUser;

  /**
   * The meeting that was completed
   */
  meeting: IPokerMeeting;

  /**
   * The meetingId that was completed
   */
  meetingId: string;
}

/**
 * A Poker meeting
 */
export interface IPokerMeeting {
  __typename: 'PokerMeeting';

  /**
   * The unique meeting id. shortid.
   */
  id: string;

  /**
   * The timestamp the meeting was created
   */
  createdAt: any;

  /**
   * The id of the user that created the meeting
   */
  createdBy: string;

  /**
   * The user that created the meeting
   */
  createdByUser: IUser;

  /**
   * The timestamp the meeting officially ended
   */
  endedAt: any | null;

  /**
   * The location of the facilitator in the meeting
   */
  facilitatorStageId: string;

  /**
   * The userId (or anonymousId) of the most recent facilitator
   */
  facilitatorUserId: string;

  /**
   * The facilitator team member
   */
  facilitator: ITeamMember;

  /**
   * The team members that were active during the time of the meeting
   */
  meetingMembers: Array<IPokerMeetingMember>;

  /**
   * The auto-incrementing meeting number for the team
   */
  meetingNumber: number;
  meetingType: MeetingTypeEnum;

  /**
   * The name of the meeting
   */
  name: string;

  /**
   * The organization this meeting belongs to
   */
  organization: IOrganization;

  /**
   * The phases the meeting will go through, including all phase-specific state
   */
  phases: Array<NewMeetingPhase>;

  /**
   * true if should show the org the conversion modal, else false
   */
  showConversionModal: boolean;

  /**
   * The time the meeting summary was emailed to the team
   */
  summarySentAt: any | null;
  teamId: string;

  /**
   * The team that ran the meeting
   */
  team: ITeam;

  /**
   * The last time a meeting was updated (stage completed, finished, etc)
   */
  updatedAt: any | null;

  /**
   * The Poker meeting member of the viewer
   */
  viewerMeetingMember: IPokerMeetingMember | null;

  /**
   * The number of comments generated in the meeting
   */
  commentCount: number;

  /**
   * The number of stories scored during a meeting
   */
  storyCount: number;

  /**
   * The settings that govern the Poker meeting
   */
  settings: IPokerMeetingSettings;

  /**
   * A single story created in a Sprint Poker meeting
   */
  story: ITask | null;

  /**
   * The ID of the template used for the meeting. Note the underlying template could have changed!
   * @deprecated "The underlying template could be mutated. Use templateRefId"
   */
  templateId: string;

  /**
   * The ID of the immutable templateRef used for the meeting
   */
  templateRefId: string;
}

export interface IStoryOnPokerMeetingArguments {
  storyId: string;
}

/**
 * All the meeting specifics for a user in a poker meeting
 */
export interface IPokerMeetingMember {
  __typename: 'PokerMeetingMember';

  /**
   * A composite of userId::meetingId
   */
  id: string;

  /**
   * true if present, false if absent, else null
   * @deprecated "Members are checked in when they enter the meeting now & not created beforehand"
   */
  isCheckedIn: boolean | null;
  meetingId: string;
  meetingType: MeetingTypeEnum;
  teamId: string;
  teamMember: ITeamMember;
  user: IUser;
  userId: string;

  /**
   * The last time a meeting was updated (stage completed, finished, etc)
   */
  updatedAt: any;

  /**
   * true if the user is not voting and does not want their vote to count towards aggregates
   */
  isSpectating: boolean;
}

/**
 * The action-specific meeting settings
 */
export interface IActionMeetingSettings {
  __typename: 'ActionMeetingSettings';
  id: string;

  /**
   * The type of meeting these settings apply to
   */
  meetingType: MeetingTypeEnum;

  /**
   * The broad phase types that will be addressed during the meeting
   */
  phaseTypes: Array<NewMeetingPhaseTypeEnum>;

  /**
   * FK
   */
  teamId: string;

  /**
   * The team these settings belong to
   */
  team: ITeam;
}

/**
 * The details associated with a task integrated with GitHub
 */
export interface ISuggestedIntegrationGitHub {
  __typename: 'SuggestedIntegrationGitHub';
  id: string;
  service: TaskServiceEnum;

  /**
   * The name of the repo. Follows format of OWNER/NAME
   */
  nameWithOwner: string;
}

/**
 * The details associated with a task integrated with Jira
 */
export interface ISuggestedIntegrationJira {
  __typename: 'SuggestedIntegrationJira';
  id: string;
  service: TaskServiceEnum;

  /**
   * URL to a 24x24 avatar icon
   */
  avatar: string;

  /**
   * The project key used by jira as a more human readable proxy for a projectId
   */
  projectKey: string;

  /**
   * The name of the project, prefixed with the cloud name if more than 1 cloudId exists
   */
  projectName: string;

  /**
   * The cloud ID that the project lives on
   */
  cloudId: string;

  /**
   * The full project document fetched from Jira
   */
  remoteProject: IJiraRemoteProject | null;
}

/**
 * A comment on a thread
 */
export interface IComment {
  __typename: 'Comment';

  /**
   * shortid
   */
  id: string;

  /**
   * The rich text body of the item, if inactive, a tombstone text
   */
  content: string;

  /**
   * The timestamp the item was created
   */
  createdAt: any;

  /**
   * The userId that created the item, null if anonymous
   */
  createdBy: string | null;

  /**
   * The user that created the item, null if anonymous
   */
  createdByUser: IUser | null;

  /**
   * the replies to this threadable item
   */
  replies: Array<Threadable>;

  /**
   * The FK of the discussion this task was created in. Null if task was not created in a discussion
   */
  discussionId: string | null;

  /**
   * the parent, if this threadable is a reply, else null
   */
  threadParentId: string | null;

  /**
   * the order of this threadable, relative to threadParentId
   */
  threadSortOrder: number | null;

  /**
   * The timestamp the item was updated
   */
  updatedAt: any;

  /**
   * All the reactjis for the given reflection
   */
  reactjis: Array<IReactji>;

  /**
   * true if the agenda item has not been processed or deleted
   */
  isActive: boolean;

  /**
   * true if the comment is anonymous, else false
   */
  isAnonymous: boolean;

  /**
   * true if the viewer wrote this comment, else false
   */
  isViewerComment: boolean;
}

export interface IQuery {
  __typename: 'Query';
  viewer: IUser;
  getDemoEntities: IGetDemoEntitiesPayload;
  massInvitation: IMassInvitationPayload;
  verifiedInvitation: IVerifiedInvitationPayload;
  SAMLIdP: string | null;
}

export interface IGetDemoEntitiesOnQueryArguments {
  /**
   * the reflection bodies to entitize
   */
  text: string;
}

export interface IMassInvitationOnQueryArguments {
  /**
   * The mass invitation token
   */
  token: string;
}

export interface IVerifiedInvitationOnQueryArguments {
  /**
   * The invitation token
   */
  token: string;
}

export interface ISAMLIdPOnQueryArguments {
  /**
   * the email associated with a SAML login
   */
  email: string;

  /**
   * true if the user was invited, else false
   */
  isInvited?: boolean | null;
}

export interface IGetDemoEntitiesPayload {
  __typename: 'GetDemoEntitiesPayload';
  error: IStandardMutationError | null;
  entities: Array<IGoogleAnalyzedEntity> | null;
}

export interface IMassInvitationPayload {
  __typename: 'MassInvitationPayload';
  errorType: TeamInvitationErrorEnum | null;

  /**
   * The name of the person that sent the invitation, present if errorType is expired
   */
  inviterName: string | null;

  /**
   * The teamId from the token
   */
  teamId: string | null;

  /**
   * name of the inviting team, present if invitation exists
   */
  teamName: string | null;
}

/**
 * The reason the invitation failed
 */
export const enum TeamInvitationErrorEnum {
  accepted = 'accepted',
  expired = 'expired',
  notFound = 'notFound'
}

export interface IVerifiedInvitationPayload {
  __typename: 'VerifiedInvitationPayload';
  errorType: TeamInvitationErrorEnum | null;

  /**
   * The name of the person that sent the invitation, present if errorType is expired
   */
  inviterName: string | null;

  /**
   * The email of the person that send the invitation, present if errorType is expired
   */
  inviterEmail: string | null;

  /**
   * true if the mx record is hosted by google, else falsy
   */
  isGoogle: boolean | null;

  /**
   * a string to redirect to the sso IdP, else null
   */
  ssoURL: string | null;

  /**
   * The valid invitation, if any
   */
  teamInvitation: ITeamInvitation | null;

  /**
   * name of the inviting team, present if invitation exists
   */
  teamName: string | null;
  meetingId: string | null;
  meetingName: string | null;
  meetingType: MeetingTypeEnum | null;

  /**
   * The userId of the invitee, if already a parabol user
   */
  userId: string | null;

  /**
   * The invitee, if already a parabol user, present if errorType is null
   */
  user: IUser | null;
}

export interface IMutation {
  __typename: 'Mutation';

  /**
   * Redeem an invitation token for a logged in user
   */
  acceptTeamInvitation: IAcceptTeamInvitationPayload;

  /**
   * Create a new agenda item
   */
  addAgendaItem: IAddAgendaItemPayload | null;
  addAtlassianAuth: IAddAtlassianAuthPayload;

  /**
   * Add a comment to a discussion
   */
  addComment: AddCommentPayload;

  /**
   * Add a new poker template with a default dimension created
   */
  addPokerTemplate: IAddPokerTemplatePayload;

  /**
   * Add a new dimension for the poker template
   */
  addPokerTemplateDimension: IAddPokerTemplateDimensionPayload;

  /**
   * Add a new scale for the poker template
   */
  addPokerTemplateScale: IAddPokerTemplateScalePayload;

  /**
   * Add a new scale value for a scale in a poker template
   */
  addPokerTemplateScaleValue: IAddPokerTemplateScaleValuePayload;

  /**
   * Add or remove a reactji from a reactable
   */
  addReactjiToReactable: AddReactjiToReactablePayload;

  /**
   * Add a new template full of prompts
   */
  addReflectTemplate: IAddReflectTemplatePayload | null;

  /**
   * Add a new template full of prompts
   */
  addReflectTemplatePrompt: IAddReflectTemplatePromptPayload | null;
  addSlackAuth: IAddSlackAuthPayload;

  /**
   * Give someone advanced features in a flag
   */
  addFeatureFlag: IAddFeatureFlagPayload;
  addGitHubAuth: IAddGitHubAuthPayload;

  /**
   * Create a new team and add the first team member
   */
  addOrg: IAddOrgPayload;

  /**
   * Create a new team and add the first team member
   */
  addTeam: IAddTeamPayload;
  archiveOrganization: IArchiveOrganizationPayload;
  archiveTeam: IArchiveTeamPayload;

  /**
   * Archive a timeline event
   */
  archiveTimelineEvent: ArchiveTimelineEventPayload;

  /**
   * Automatically group reflections
   */
  autoGroupReflections: IAutoGroupReflectionsPayload | null;

  /**
   * Change the team a task is associated with
   */
  changeTaskTeam: IChangeTaskTeamPayload | null;

  /**
   * set the interaction status of a notifcation
   */
  setNotificationStatus: ISetNotificationStatusPayload | null;

  /**
   * for troubleshooting by admins, create a JWT for a given userId
   */
  createImposterToken: ICreateImposterTokenPayload;
  createGitHubTaskIntegration: ICreateGitHubTaskIntegrationPayload | null;
  createJiraTaskIntegration: ICreateJiraTaskIntegrationPayload | null;

  /**
   * Create a new mass inivtation and optionally void old ones
   */
  createMassInvitation: CreateMassInvitationPayload;

  /**
   * Create a new reflection
   */
  createReflection: ICreateReflectionPayload | null;

  /**
   * Create a new task, triggering a CreateCard for other viewers
   */
  createTask: ICreateTaskPayload;

  /**
   * Delete a comment from a discussion
   */
  deleteComment: DeleteCommentPayload;

  /**
   * Delete (not archive!) a task
   */
  deleteTask: IDeleteTaskPayload | null;

  /**
   * Delete a user, removing them from all teams and orgs
   */
  deleteUser: IDeleteUserPayload;

  /**
   * Deny a user from joining via push invitation
   */
  denyPushInvitation: IDenyPushInvitationPayload | null;

  /**
   * Redeem an invitation token for a logged in user
   */
  dismissNewFeature: IDismissNewFeaturePayload;

  /**
   * Dismiss a suggested action
   */
  dismissSuggestedAction: IDismissSuggestedActionPayload;

  /**
   * Downgrade a paid account to the personal service
   */
  downgradeToPersonal: IDowngradeToPersonalPayload | null;

  /**
   * Changes the priority of the discussion topics
   */
  dragDiscussionTopic: IDragDiscussionTopicPayload | null;

  /**
   * Changes the priority of the estimating tasks
   */
  dragEstimatingTask: DragEstimatingTaskPayload;

  /**
   * Send an email to reset a password
   */
  emailPasswordReset: EmailPasswordResetPayload;

  /**
   * Track which users are commenting
   */
  editCommenting: EditCommentingPayload | null;

  /**
   * Finish a sprint poker meeting
   */
  endSprintPoker: EndSprintPokerPayload;

  /**
   * Changes the editing state of a user for a phase item
   */
  editReflection: IEditReflectionPayload | null;

  /**
   * Announce to everyone that you are editing a task
   */
  editTask: IEditTaskPayload | null;

  /**
   * Finish a check-in meeting
   */
  endCheckIn: EndCheckInPayload;

  /**
   * Broadcast that the viewer stopped dragging a reflection
   */
  endDraggingReflection: IEndDraggingReflectionPayload | null;

  /**
   * Finish a retrospective meeting
   */
  endRetrospective: EndRetrospectivePayload;

  /**
   * flag a viewer as ready to advance to the next stage of a meeting
   */
  flagReadyToAdvance: FlagReadyToAdvancePayload;

  /**
   * pauses the subscription for a single user
   */
  inactivateUser: IInactivateUserPayload | null;

  /**
   * Invalidate all sessions by blacklisting all JWTs issued before now
   */
  invalidateSessions: IInvalidateSessionsPayload;

  /**
   * Send a team invitation to an email address
   */
  inviteToTeam: IInviteToTeamPayload;

  /**
   * Sign up or login using Google
   */
  loginWithGoogle: ILoginWithGooglePayload;

  /**
   * Login using an email address and password
   */
  loginWithPassword: ILoginWithPasswordPayload;

  /**
   * Move a template dimension
   */
  movePokerTemplateDimension: IMovePokerTemplateDimensionPayload;

  /**
   * Move a reflect template
   */
  moveReflectTemplatePrompt: IMoveReflectTemplatePromptPayload | null;

  /**
   * Move a team to a different org. Requires billing leader rights on both orgs!
   */
  moveTeamToOrg: string | null;

  /**
   * update a meeting by marking an item complete and setting the facilitator location
   */
  navigateMeeting: INavigateMeetingPayload;

  /**
   * Check a member in as present or absent
   * @deprecated "Members now join lazily and joining means they are present"
   */
  newMeetingCheckIn: INewMeetingCheckInPayload | null;

  /**
   * Increment the count of times the org has clicked pay later
   */
  payLater: IPayLaterPayload;

  /**
   * Add or remove a task and its estimate phase from the meeting
   */
  persistJiraSearchQuery: PersistJiraSearchQueryPayload;

  /**
   * Request to be invited to a team in real time
   */
  pushInvitation: IPushInvitationPayload | null;

  /**
   * Change a facilitator while the meeting is in progress
   */
  promoteNewMeetingFacilitator: IPromoteNewMeetingFacilitatorPayload | null;

  /**
   * Promote another team member to be the leader
   */
  promoteToTeamLead: IPromoteToTeamLeadPayload | null;

  /**
   * Update the description of a reflection prompt
   */
  reflectTemplatePromptUpdateDescription: IReflectTemplatePromptUpdateDescriptionPayload | null;

  /**
   * Update the description of a poker template dimension
   */
  pokerTemplateDimensionUpdateDescription: IPokerTemplateDimensionUpdateDescriptionPayload | null;
  reflectTemplatePromptUpdateGroupColor: IReflectTemplatePromptUpdateGroupColorPayload | null;

  /**
   * Remove an agenda item
   */
  removeAgendaItem: IRemoveAgendaItemPayload | null;

  /**
   * Disconnect a team member from atlassian
   */
  removeAtlassianAuth: IRemoveAtlassianAuthPayload;

  /**
   * Disconnect a team member from GitHub
   */
  removeGitHubAuth: IRemoveGitHubAuthPayload;

  /**
   * Remove a user from an org
   */
  removeOrgUser: IRemoveOrgUserPayload | null;

  /**
   * Remove a poker meeting template
   */
  removePokerTemplate: IRemovePokerTemplatePayload;

  /**
   * Remove a template full of prompts
   */
  removeReflectTemplate: IRemoveReflectTemplatePayload | null;

  /**
   * Remove a prompt from a template
   */
  removeReflectTemplatePrompt: IRemoveReflectTemplatePromptPayload | null;

  /**
   * Remove a dimension from a template
   */
  removePokerTemplateDimension: IRemovePokerTemplateDimensionPayload;

  /**
   * Rename a meeting
   */
  renameMeeting: RenameMeetingPayload;

  /**
   * Rename a meeting template
   */
  renameMeetingTemplate: IRenameMeetingTemplatePayload | null;

  /**
   * Rename a reflect template prompt
   */
  renameReflectTemplatePrompt: IRenameReflectTemplatePromptPayload | null;

  /**
   * Rename a poker template dimension
   */
  renamePokerTemplateDimension: IRenamePokerTemplateDimensionPayload;

  /**
   * Rename a poker template scale
   */
  renamePokerTemplateScale: IRenamePokerTemplateScalePayload;

  /**
   * Remove a scale from a template
   */
  removePokerTemplateScale: IRemovePokerTemplateScalePayload;

  /**
   * Remove a scale value from the scale of a template
   */
  removePokerTemplateScaleValue: IRemovePokerTemplateScaleValuePayload;

  /**
   * Remove a reflection
   */
  removeReflection: IRemoveReflectionPayload | null;

  /**
   * Disconnect a team member from Slack
   */
  removeSlackAuth: IRemoveSlackAuthPayload;

  /**
   * Remove a team member from the team
   */
  removeTeamMember: IRemoveTeamMemberPayload | null;

  /**
   * Reset the password for an account
   */
  resetPassword: IResetPasswordPayload;

  /**
   * Reset a retro meeting to group stage
   */
  resetRetroMeetingToGroupStage: IResetRetroMeetingToGroupStagePayload;

  /**
   * track an event in segment, like when errors are hit
   */
  segmentEventTrack: boolean | null;

  /**
   * Set the selected template for the upcoming retro meeting
   */
  selectTemplate: ISelectTemplatePayload | null;

  /**
   * Share where in the app the viewer is
   */
  setAppLocation: SetAppLocationPayload;

  /**
   * Enabled or disable the icebreaker round
   */
  setCheckInEnabled: ISetCheckInEnabledPayload;

  /**
   * Update the default Slack channel where notifications are sent
   */
  setDefaultSlackChannel: SetDefaultSlackChannelPayload;

  /**
   * Set the role of a user
   */
  setOrgUserRole: SetOrgUserRolePayload | null;

  /**
   * Focus (or unfocus) a phase item
   */
  setPhaseFocus: ISetPhaseFocusPayload | null;

  /**
   * Set or clear a timer for a meeting stage
   */
  setStageTimer: ISetStageTimerPayload;
  setSlackNotification: ISetSlackNotificationPayload;

  /**
   * Sign up using an email address and password
   */
  signUpWithPassword: ISignUpWithPasswordPayload;

  /**
   * Broadcast that the viewer started dragging a reflection
   */
  startDraggingReflection: IStartDraggingReflectionPayload | null;

  /**
   * Start a new meeting
   */
  startCheckIn: StartCheckInPayload;

  /**
   * Start a new meeting
   */
  startRetrospective: StartRetrospectivePayload;

  /**
   * Start a new sprint poker meeting
   */
  startSprintPoker: StartSprintPokerPayload;

  /**
   * Show/hide the agenda list
   */
  toggleAgendaList: ITeamMember | null;

  /**
   * Update an agenda item
   */
  updateAgendaItem: IUpdateAgendaItemPayload | null;

  /**
   * Update the content of a comment
   */
  updateCommentContent: UpdateCommentContentPayload | null;

  /**
   * Update an existing credit card on file
   */
  updateCreditCard: IUpdateCreditCardPayload | null;

  /**
   * Update an with a change in name, avatar
   */
  updateOrg: IUpdateOrgPayload;

  /**
   * Update the scale used for a dimension in a template
   */
  updatePokerTemplateDimensionScale: IUpdatePokerTemplateDimensionScalePayload;

  /**
   * Update the label, numerical value or color of a scale value in a scale
   */
  updatePokerTemplateScaleValue: IUpdatePokerTemplateScaleValuePayload;

  /**
   * Update a Team's Icebreaker in a new meeting
   */
  updateNewCheckInQuestion: IUpdateNewCheckInQuestionPayload | null;

  /**
   * all the info required to provide an accurate display-specific location of where an item is
   */
  updateDragLocation: boolean | null;

  /**
   * Add or remove a task and its estimate phase from the meeting
   */
  updatePokerScope: UpdatePokerScopePayload;

  /**
   * Update the content of a reflection
   */
  updateReflectionContent: IUpdateReflectionContentPayload | null;

  /**
   * Update the title of a reflection group
   */
  updateReflectionGroupTitle: IUpdateReflectionGroupTitlePayload | null;

  /**
   * Change the max votes for participants
   */
  updateRetroMaxVotes: UpdateRetroMaxVotesPayload;

  /**
   * Update a task with a change in content, ownership, or status
   */
  updateTask: IUpdateTaskPayload | null;

  /**
   * Set or unset the due date of a task
   */
  updateTaskDueDate: IUpdateTaskDueDatePayload | null;
  updateTeamName: IUpdateTeamNamePayload | null;

  /**
   * Change the scope of a template
   */
  updateTemplateScope: UpdateTemplateScopePayload;
  updateUserProfile: IUpdateUserProfilePayload | null;

  /**
   * Upgrade an account to the paid service
   */
  upgradeToPro: IUpgradeToProPayload | null;

  /**
   * Upload an image for an org avatar
   */
  uploadOrgImage: IUpdateOrgPayload;

  /**
   * Upload an image for a user avatar
   */
  uploadUserImage: IUpdateUserProfilePayload | null;

  /**
   * Verify an email address and sign in if not already a user
   */
  verifyEmail: IVerifyEmailPayload;

  /**
   * Cast your vote for a reflection group
   */
  voteForReflectionGroup: IVoteForReflectionGroupPayload | null;

  /**
   * Cast a vote for the estimated points for a given dimension
   */
  voteForPokerStory: VoteForPokerStoryPayload;

  /**
   * Progresses the stage dimension to the reveal & discuss step
   */
  pokerRevealVotes: PokerRevealVotesPayload;

  /**
   * Remove all votes, the final vote, and reset the stage
   */
  pokerResetDimension: PokerResetDimensionPayload;
  pokerAnnounceDeckHover: PokerAnnounceDeckHoverPayload;

  /**
   * Update the final score field & push to the associated integration
   * @deprecated "Use setTaskEstimate. Can delete this mutation Aug 15-2021"
   */
  pokerSetFinalScore: PokerSetFinalScorePayload;

  /**
   * Move a scale value to an index
   */
  movePokerTemplateScaleValue: MovePokerTemplateScaleValuePayload;

  /**
   * Set the jira field that the poker dimension should map to
   */
  updateJiraDimensionField: UpdateJiraDimensionFieldPayload;

  /**
   * Create a meeting member for a user
   */
  joinMeeting: JoinMeetingPayload;

  /**
   * Adds a missing Jira field to a screen currently assigned to a Jira project
   */
  addMissingJiraField: AddMissingJiraFieldPayload;

  /**
   * Set whether the user is spectating poker meeting
   */
  setPokerSpectate: SetPokerSpectatePayload;
  persistGitHubSearchQuery: PersistGitHubSearchQueryPayload;

  /**
   * Update a task estimate
   */
  setTaskEstimate: SetTaskEstimatePayload;
  createPoll: CreatePollPayload;
}

export interface IAcceptTeamInvitationOnMutationArguments {
  /**
   * The 48-byte hex encoded invitation token or the 2-part JWT for mass invitation tokens
   */
  invitationToken?: string | null;

  /**
   * the notification clicked to accept, if any
   */
  notificationId?: string | null;
}

export interface IAddAgendaItemOnMutationArguments {
  /**
   * The new task including an id, teamMemberId, and content
   */
  newAgendaItem: ICreateAgendaItemInput;
}

export interface IAddAtlassianAuthOnMutationArguments {
  code: string;
  teamId: string;
}

export interface IAddCommentOnMutationArguments {
  /**
   * A partial new comment
   */
  comment: IAddCommentInput;
}

export interface IAddPokerTemplateOnMutationArguments {
  parentTemplateId?: string | null;
  teamId: string;
}

export interface IAddPokerTemplateDimensionOnMutationArguments {
  templateId: string;
}

export interface IAddPokerTemplateScaleOnMutationArguments {
  parentScaleId?: string | null;
  teamId: string;
}

export interface IAddPokerTemplateScaleValueOnMutationArguments {
  scaleId: string;
  scaleValue: IAddTemplateScaleInput;
}

export interface IAddReactjiToReactableOnMutationArguments {
  /**
   * The id of the reactable
   */
  reactableId: string;

  /**
   * the type of the
   */
  reactableType: ReactableEnum;

  /**
   * the id of the reactji to add
   */
  reactji: string;

  /**
   * If true, remove the reaction, else add it
   */
  isRemove?: boolean | null;

  /**
   * The id of the meeting
   */
  meetingId: string;
}

export interface IAddReflectTemplateOnMutationArguments {
  parentTemplateId?: string | null;
  teamId: string;
}

export interface IAddReflectTemplatePromptOnMutationArguments {
  templateId: string;
}

export interface IAddSlackAuthOnMutationArguments {
  code: string;
  teamId: string;
}

export interface IAddFeatureFlagOnMutationArguments {
  /**
   * a list of the complete or partial email of the person to whom you are giving advanced features.
   *       Matches via a regex to support entire domains
   */
  emails?: Array<string> | null;

  /**
   * grant access to an entire domain. the part of the email after the @
   */
  domain?: string | null;

  /**
   * the flag that you want to give to the user
   */
  flag: UserFlagEnum;
}

export interface IAddGitHubAuthOnMutationArguments {
  code: string;
  teamId: string;
}

export interface IAddOrgOnMutationArguments {
  /**
   * The new team object with exactly 1 team member
   */
  newTeam: INewTeamInput;

  /**
   * The name of the new team
   */
  orgName: string;
}

export interface IAddTeamOnMutationArguments {
  /**
   * The new team object
   */
  newTeam: INewTeamInput;
}

export interface IArchiveOrganizationOnMutationArguments {
  /**
   * The orgId to archive
   */
  orgId: string;
}

export interface IArchiveTeamOnMutationArguments {
  /**
   * The teamId to archive (or delete, if team is unused)
   */
  teamId: string;
}

export interface IArchiveTimelineEventOnMutationArguments {
  /**
   * the id for the timeline event
   */
  timelineEventId: string;
}

export interface IAutoGroupReflectionsOnMutationArguments {
  meetingId: string;

  /**
   * A number from 0 to 1 to determine how tightly to pack the groups. Higher means fewer groups
   */
  groupingThreshold: number;
}

export interface IChangeTaskTeamOnMutationArguments {
  /**
   * The task to change
   */
  taskId: string;

  /**
   * The new team to assign the task to
   */
  teamId: string;
}

export interface ISetNotificationStatusOnMutationArguments {
  /**
   * The id of the notification
   */
  notificationId: string;
  status: NotificationStatusEnum;
}

export interface ICreateImposterTokenOnMutationArguments {
  /**
   * The target userId to impersonate
   */
  userId: string;
}

export interface ICreateGitHubTaskIntegrationOnMutationArguments {
  /**
   * The id of the task to convert to a GH issue
   */
  taskId: string;

  /**
   * The owner/repo string
   */
  nameWithOwner: string;
}

export interface ICreateJiraTaskIntegrationOnMutationArguments {
  /**
   * The atlassian cloudId for the site
   */
  cloudId: string;

  /**
   * The atlassian key of the project to put the issue in
   */
  projectKey: string;

  /**
   * The id of the task to convert to a Jira issue
   */
  taskId: string;
}

export interface ICreateMassInvitationOnMutationArguments {
  /**
   * the specific meeting where the invite occurred, if any
   */
  meetingId?: string | null;

  /**
   * The teamId to create the mass invitation for
   */
  teamId: string;

  /**
   * If true, will void all existing mass invitations for the team member
   */
  voidOld?: boolean | null;
}

export interface ICreateReflectionOnMutationArguments {
  input: ICreateReflectionInput;
}

export interface ICreateTaskOnMutationArguments {
  /**
   * The new task including an id, status, and type, and teamMemberId
   */
  newTask: ICreateTaskInput;

  /**
   * The part of the site where the creation occurred
   */
  area?: AreaEnum | null;
}

export interface IDeleteCommentOnMutationArguments {
  commentId: string;
  meetingId: string;
}

export interface IDeleteTaskOnMutationArguments {
  /**
   * The taskId to delete
   */
  taskId: string;
}

export interface IDeleteUserOnMutationArguments {
  /**
   * a userId
   */
  userId?: string | null;

  /**
   * the user email
   */
  email?: string | null;

  /**
   * the reason why the user wants to delete their account
   */
  reason?: string | null;
}

export interface IDenyPushInvitationOnMutationArguments {
  teamId: string;
  userId: string;
}

export interface IDismissSuggestedActionOnMutationArguments {
  /**
   * The id of the suggested action to dismiss
   */
  suggestedActionId: string;
}

export interface IDowngradeToPersonalOnMutationArguments {
  /**
   * the org requesting the upgrade
   */
  orgId: string;
}

export interface IDragDiscussionTopicOnMutationArguments {
  meetingId: string;
  stageId: string;
  sortOrder: number;
}

export interface IDragEstimatingTaskOnMutationArguments {
  meetingId: string;
  stageId: string;
  sortOrder: number;
}

export interface IEmailPasswordResetOnMutationArguments {
  /**
   * email to send the password reset code to
   */
  email: string;
}

export interface IEditCommentingOnMutationArguments {
  /**
   * True if the user is commenting, false if the user has stopped commenting
   */
  isCommenting: boolean;
  discussionId: string;
}

export interface IEndSprintPokerOnMutationArguments {
  /**
   * The meeting to end
   */
  meetingId: string;
}

export interface IEditReflectionOnMutationArguments {
  /**
   * Whether a reflectPrompt is being edited or not
   */
  isEditing: boolean;
  meetingId: string;
  promptId: string;
}

export interface IEditTaskOnMutationArguments {
  /**
   * The task id that is being edited
   */
  taskId: string;

  /**
   * true if the editing is starting, false if it is stopping
   */
  isEditing: boolean;
}

export interface IEndCheckInOnMutationArguments {
  /**
   * The meeting to end
   */
  meetingId: string;
}

export interface IEndDraggingReflectionOnMutationArguments {
  reflectionId: string;

  /**
   * if it was a drop (isDragging = false), the type of item it was dropped on. null if there was no valid drop target
   */
  dropTargetType?: DragReflectionDropTargetTypeEnum | null;

  /**
   * if dropTargetType could refer to more than 1 component, this ID defines which one
   */
  dropTargetId?: string | null;

  /**
   * the ID of the drag to connect to the start drag event
   */
  dragId?: string | null;
}

export interface IEndRetrospectiveOnMutationArguments {
  /**
   * The meeting to end
   */
  meetingId: string;
}

export interface IFlagReadyToAdvanceOnMutationArguments {
  meetingId: string;

  /**
   * the stage that the viewer marked as ready
   */
  stageId: string;

  /**
   * true if ready to advance, else false
   */
  isReady: boolean;
}

export interface IInactivateUserOnMutationArguments {
  /**
   * the user to pause
   */
  userId: string;
}

export interface IInviteToTeamOnMutationArguments {
  /**
   * the specific meeting where the invite occurred, if any
   */
  meetingId?: string | null;

  /**
   * The id of the inviting team
   */
  teamId: string;
  invitees: Array<any>;
}

export interface ILoginWithGoogleOnMutationArguments {
  /**
   * The code provided from the OAuth2 flow
   */
  code: string;

  /**
   * optional segment id created before they were a user
   */
  segmentId?: string | null;

  /**
   * if present, the user is also joining a team
   */
  invitationToken?: string | null;
}

export interface ILoginWithPasswordOnMutationArguments {
  email: string;
  password: string;
}

export interface IMovePokerTemplateDimensionOnMutationArguments {
  dimensionId: string;
  sortOrder: number;
}

export interface IMoveReflectTemplatePromptOnMutationArguments {
  promptId: string;
  sortOrder: number;
}

export interface IMoveTeamToOrgOnMutationArguments {
  /**
   * The teamId that you want to move
   */
  teamIds: Array<string>;

  /**
   * The ID of the organization you want to move the team to
   */
  orgId: string;
}

export interface INavigateMeetingOnMutationArguments {
  /**
   * The stage that the facilitator would like to mark as complete
   */
  completedStageId?: string | null;

  /**
   * The stage where the facilitator is
   */
  facilitatorStageId?: string | null;

  /**
   * The meeting ID
   */
  meetingId: string;
}

export interface INewMeetingCheckInOnMutationArguments {
  /**
   * The id of the user being marked present or absent
   */
  userId: string;

  /**
   * the meeting currently in progress
   */
  meetingId: string;

  /**
   * true if the member is present, false if absent, null if undecided
   */
  isCheckedIn?: boolean | null;
}

export interface IPayLaterOnMutationArguments {
  /**
   * the org that has clicked pay later
   */
  meetingId: string;
}

export interface IPersistJiraSearchQueryOnMutationArguments {
  /**
   * the team witht the settings we add the query to
   */
  teamId: string;

  /**
   * the jira search query to persist (or remove, if isRemove is true)
   */
  input: IJiraSearchQueryInput;
}

export interface IPushInvitationOnMutationArguments {
  /**
   * the meeting ID the pusher would like to join
   */
  meetingId?: string | null;
  teamId: string;
}

export interface IPromoteNewMeetingFacilitatorOnMutationArguments {
  /**
   * userId of the new facilitator for this meeting
   */
  facilitatorUserId: string;
  meetingId: string;
}

export interface IPromoteToTeamLeadOnMutationArguments {
  /**
   * the new team member that will be the leader
   */
  teamMemberId: string;
}

export interface IReflectTemplatePromptUpdateDescriptionOnMutationArguments {
  promptId: string;
  description: string;
}

export interface IPokerTemplateDimensionUpdateDescriptionOnMutationArguments {
  dimensionId: string;
  description: string;
}

export interface IReflectTemplatePromptUpdateGroupColorOnMutationArguments {
  promptId: string;
  groupColor: string;
}

export interface IRemoveAgendaItemOnMutationArguments {
  /**
   * The agenda item unique id
   */
  agendaItemId: string;
}

export interface IRemoveAtlassianAuthOnMutationArguments {
  /**
   * the teamId to disconnect from the token
   */
  teamId: string;
}

export interface IRemoveGitHubAuthOnMutationArguments {
  /**
   * the teamId to disconnect from the token
   */
  teamId: string;
}

export interface IRemoveOrgUserOnMutationArguments {
  /**
   * the user to remove
   */
  userId: string;

  /**
   * the org that does not want them anymore
   */
  orgId: string;
}

export interface IRemovePokerTemplateOnMutationArguments {
  templateId: string;
}

export interface IRemoveReflectTemplateOnMutationArguments {
  templateId: string;
}

export interface IRemoveReflectTemplatePromptOnMutationArguments {
  promptId: string;
}

export interface IRemovePokerTemplateDimensionOnMutationArguments {
  dimensionId: string;
}

export interface IRenameMeetingOnMutationArguments {
  /**
   * the new meeting name
   */
  name: string;

  /**
   * the meeting with the new name
   */
  meetingId: string;
}

export interface IRenameMeetingTemplateOnMutationArguments {
  templateId: string;
  name: string;
}

export interface IRenameReflectTemplatePromptOnMutationArguments {
  promptId: string;
  question: string;
}

export interface IRenamePokerTemplateDimensionOnMutationArguments {
  dimensionId: string;
  name: string;
}

export interface IRenamePokerTemplateScaleOnMutationArguments {
  scaleId: string;
  name: string;
}

export interface IRemovePokerTemplateScaleOnMutationArguments {
  scaleId: string;
}

export interface IRemovePokerTemplateScaleValueOnMutationArguments {
  scaleId: string;
  label: string;
}

export interface IRemoveReflectionOnMutationArguments {
  reflectionId: string;
}

export interface IRemoveSlackAuthOnMutationArguments {
  /**
   * the teamId to disconnect from the token
   */
  teamId: string;
}

export interface IRemoveTeamMemberOnMutationArguments {
  /**
   * The teamMemberId of the person who is being removed
   */
  teamMemberId: string;
}

export interface IResetPasswordOnMutationArguments {
  /**
   * the password reset token
   */
  token: string;

  /**
   * The new password for the account
   */
  newPassword: string;
}

export interface IResetRetroMeetingToGroupStageOnMutationArguments {
  meetingId: string;
}

export interface ISegmentEventTrackOnMutationArguments {
  event: string;
  options?: ISegmentEventTrackOptions | null;
}

export interface ISelectTemplateOnMutationArguments {
  selectedTemplateId: string;
  teamId: string;
}

export interface ISetAppLocationOnMutationArguments {
  /**
   * The location the viewer is currently at
   */
  location?: string | null;
}

export interface ISetCheckInEnabledOnMutationArguments {
  settingsId: string;

  /**
   * true to turn icebreaker phase on, false to turn it off
   */
  isEnabled: boolean;
}

export interface ISetDefaultSlackChannelOnMutationArguments {
  slackChannelId: string;
  teamId: string;
}

export interface ISetOrgUserRoleOnMutationArguments {
  /**
   * The org to affect
   */
  orgId: string;

  /**
   * the user who is receiving a role change
   */
  userId: string;

  /**
   * the user’s new role
   */
  role?: string | null;
}

export interface ISetPhaseFocusOnMutationArguments {
  meetingId: string;

  /**
   * The currently focused phase item
   */
  focusedPromptId?: string | null;
}

export interface ISetStageTimerOnMutationArguments {
  /**
   * the id of the meeting
   */
  meetingId: string;

  /**
   * The time the timer is scheduled to go off (based on client clock), null if unsetting the timer
   */
  scheduledEndTime?: any | null;

  /**
   * scheduledEndTime - now. Used to reconcile bad client clocks. Present for time limit, else null
   */
  timeRemaining?: number | null;
}

export interface ISetSlackNotificationOnMutationArguments {
  slackChannelId?: string | null;
  slackNotificationEvents: Array<SlackNotificationEventEnum>;
  teamId: string;
}

export interface ISignUpWithPasswordOnMutationArguments {
  email: string;
  password: string;

  /**
   * optional segment id created before they were a user
   */
  segmentId?: string | null;

  /**
   * used to determine what suggested actions to create
   */
  invitationToken?: string | null;
}

export interface IStartDraggingReflectionOnMutationArguments {
  reflectionId: string;
  dragId: string;
}

export interface IStartCheckInOnMutationArguments {
  /**
   * The team starting the meeting
   */
  teamId: string;
}

export interface IStartRetrospectiveOnMutationArguments {
  /**
   * The team starting the meeting
   */
  teamId: string;
}

export interface IStartSprintPokerOnMutationArguments {
  /**
   * The team starting the meeting
   */
  teamId: string;
}

export interface IToggleAgendaListOnMutationArguments {
  /**
   * the team to hide the agenda for
   */
  teamId: string;
}

export interface IUpdateAgendaItemOnMutationArguments {
  /**
   * The updated item including an id, content, status, sortOrder
   */
  updatedAgendaItem: IUpdateAgendaItemInput;
}

export interface IUpdateCommentContentOnMutationArguments {
  commentId: string;

  /**
   * A stringified draft-js document containing thoughts
   */
  content: string;
  meetingId: string;
}

export interface IUpdateCreditCardOnMutationArguments {
  /**
   * the org requesting the changed billing
   */
  orgId: string;

  /**
   * The token that came back from stripe
   */
  stripeToken: string;
}

export interface IUpdateOrgOnMutationArguments {
  /**
   * the updated org including the id, and at least one other field
   */
  updatedOrg: IUpdateOrgInput;
}

export interface IUpdatePokerTemplateDimensionScaleOnMutationArguments {
  dimensionId: string;
  scaleId: string;
}

export interface IUpdatePokerTemplateScaleValueOnMutationArguments {
  scaleId: string;
  oldScaleValue: ITemplateScaleInput;
  newScaleValue: ITemplateScaleInput;
}

export interface IUpdateNewCheckInQuestionOnMutationArguments {
  /**
   * ID of the Team which will have its Icebreaker updated
   */
  meetingId: string;

  /**
   * The Team's new Icebreaker
   */
  checkInQuestion: string;
}

export interface IUpdateDragLocationOnMutationArguments {
  input: IUpdateDragLocationInput;
}

export interface IUpdatePokerScopeOnMutationArguments {
  /**
   * the meeting with the estimate phases to modify
   */
  meetingId: string;

  /**
   * The list of items to add/remove to the estimate phase
   */
  updates: Array<IUpdatePokerScopeItemInput>;
}

export interface IUpdateReflectionContentOnMutationArguments {
  reflectionId: string;

  /**
   * A stringified draft-js document containing thoughts
   */
  content: string;
}

export interface IUpdateReflectionGroupTitleOnMutationArguments {
  reflectionGroupId: string;

  /**
   * The new title for the group
   */
  title: string;
}

export interface IUpdateRetroMaxVotesOnMutationArguments {
  /**
   * The total number of votes for each participant
   */
  totalVotes: number;

  /**
   * The total number of votes for each participant to vote on a single topic
   */
  maxVotesPerGroup: number;

  /**
   * the meeting to update
   */
  meetingId: string;
}

export interface IUpdateTaskOnMutationArguments {
  /**
   * The part of the site where the creation occurred
   */
  area?: AreaEnum | null;

  /**
   * the updated task including the id, and at least one other field
   */
  updatedTask: IUpdateTaskInput;
}

export interface IUpdateTaskDueDateOnMutationArguments {
  /**
   * The task id
   */
  taskId: string;

  /**
   * the new due date. if not a valid date, it will unset the due date
   */
  dueDate?: any | null;
}

export interface IUpdateTeamNameOnMutationArguments {
  /**
   * The input object containing the teamId and any modified fields
   */
  updatedTeam: IUpdatedTeamInput;
}

export interface IUpdateTemplateScopeOnMutationArguments {
  /**
   * The id of the template
   */
  templateId: string;

  /**
   * the new scope
   */
  scope: SharingScopeEnum;
}

export interface IUpdateUserProfileOnMutationArguments {
  /**
   * The input object containing the user profile fields that can be changed
   */
  updatedUser: IUpdateUserProfileInput;
}

export interface IUpgradeToProOnMutationArguments {
  /**
   * the org requesting the upgrade
   */
  orgId: string;

  /**
   * The token that came back from stripe
   */
  stripeToken: string;
}

export interface IUploadOrgImageOnMutationArguments {
  /**
   * the org avatar image file
   */
  file: any;

  /**
   * The org id to upload an avatar for
   */
  orgId: string;
}

export interface IUploadUserImageOnMutationArguments {
  /**
   * the user avatar image file
   */
  file: any;
}

export interface IVerifyEmailOnMutationArguments {
  /**
   * The 48-byte url-safe base64 encoded verification token
   */
  verificationToken?: string | null;
}

export interface IVoteForReflectionGroupOnMutationArguments {
  /**
   * true if the user wants to remove one of their votes
   */
  isUnvote?: boolean | null;
  reflectionGroupId: string;
}

export interface IVoteForPokerStoryOnMutationArguments {
  meetingId: string;

  /**
   * The stage that contains the dimension to vote for
   */
  stageId: string;

  /**
   * The label of the scaleValue to vote for. If null, remove the vote
   */
  score?: string | null;
}

export interface IPokerRevealVotesOnMutationArguments {
  meetingId: string;
  stageId: string;
}

export interface IPokerResetDimensionOnMutationArguments {
  meetingId: string;
  stageId: string;
}

export interface IPokerAnnounceDeckHoverOnMutationArguments {
  meetingId: string;
  stageId: string;

  /**
   * true if the viewer has started hovering the deck, else false
   */
  isHover: boolean;
}

export interface IPokerSetFinalScoreOnMutationArguments {
  meetingId: string;
  stageId: string;

  /**
   * The label from the scale value
   */
  finalScore: string;
}

export interface IMovePokerTemplateScaleValueOnMutationArguments {
  scaleId: string;

  /**
   * The label of the moving scale value
   */
  label: string;

  /**
   * The index position where the scale value is moving to
   */
  index: number;
}

export interface IUpdateJiraDimensionFieldOnMutationArguments {
  dimensionName: string;

  /**
   * The jira field name that we should push estimates to
   */
  fieldName: string;

  /**
   * The cloudId the field lives on
   */
  cloudId: string;

  /**
   * The project the field lives on
   */
  projectKey: string;

  /**
   * The meeting the update happend in. Returns a meeting object with updated serviceField
   */
  meetingId: string;
}

export interface IJoinMeetingOnMutationArguments {
  meetingId: string;
}

export interface IAddMissingJiraFieldOnMutationArguments {
  meetingId: string;
  stageId: string;
}

export interface ISetPokerSpectateOnMutationArguments {
  meetingId: string;

  /**
   * true if the viewer is spectating poker and does not want to vote. else false
   */
  isSpectating: boolean;
}

export interface IPersistGitHubSearchQueryOnMutationArguments {
  /**
   * the team witht the settings we add the query to
   */
  teamId: string;

  /**
   * The query string as sent to GitHub
   */
  queryString: string;

  /**
   * true if this query should be deleted
   */
  isRemove?: boolean | null;
}

export interface ISetTaskEstimateOnMutationArguments {
  taskEstimate: ITaskEstimateInput;
}

export interface ICreatePollOnMutationArguments {
  /**
   * The new poll including title and poll options
   */
  newPoll: ICreatePollInput;
}

export interface IAcceptTeamInvitationPayload {
  __typename: 'AcceptTeamInvitationPayload';
  error: IStandardMutationError | null;

  /**
   * The new auth token sent to the mutator
   */
  authToken: string | null;

  /**
   * the meetingId to redirect to
   */
  meetingId: string | null;

  /**
   * The team that the invitee will be joining
   */
  team: ITeam | null;

  /**
   * The new team member on the team
   */
  teamMember: ITeamMember | null;
  notifications: INotificationTeamInvitation | null;

  /**
   * For payloads going to the team leader that got new suggested actions
   */
  teamLead: IUser | null;
}

export interface IAddAgendaItemPayload {
  __typename: 'AddAgendaItemPayload';
  error: IStandardMutationError | null;
  agendaItem: IAgendaItem | null;
  meetingId: string | null;

  /**
   * The meeting with the updated agenda item, if any
   */
  meeting: NewMeeting | null;
}

export interface ICreateAgendaItemInput {
  /**
   * The content of the agenda item
   */
  content: string;

  /**
   * True if the agenda item has been pinned
   */
  pinned: boolean;
  teamId: string;

  /**
   * The team member ID of the person creating the agenda item
   */
  teamMemberId: string;

  /**
   * The sort order of the agenda item in the list
   */
  sortOrder?: number | null;

  /**
   * The meeting ID of the agenda item
   */
  meetingId?: string | null;
}

export interface IAddAtlassianAuthPayload {
  __typename: 'AddAtlassianAuthPayload';
  error: IStandardMutationError | null;

  /**
   * The newly created auth
   */
  atlassianIntegration: IAtlassianIntegration | null;
  teamId: string | null;

  /**
   * The team member with the updated atlassianAuth
   */
  teamMember: ITeamMember | null;

  /**
   * The user with updated atlassianAuth
   */
  user: IUser | null;
}

/**
 * Return object for AddCommentPayload
 */
export type AddCommentPayload = IErrorPayload | IAddCommentSuccess;

export interface IErrorPayload {
  __typename: 'ErrorPayload';
  error: IStandardMutationError;
}

export interface IAddCommentSuccess {
  __typename: 'AddCommentSuccess';

  /**
   * the comment just created
   */
  comment: IComment;

  /**
   * The id of the meeting where the comment was added
   */
  meetingId: string;
}

export interface IAddCommentInput {
  /**
   * A stringified draft-js document containing thoughts
   */
  content: string;

  /**
   * true if the comment should be anonymous
   */
  isAnonymous?: boolean | null;

  /**
   * foreign key for the discussion this was created in
   */
  discussionId: string;
  threadSortOrder: number;
  threadParentId?: string | null;
}

export interface IAddPokerTemplatePayload {
  __typename: 'AddPokerTemplatePayload';
  error: IStandardMutationError | null;
  pokerTemplate: IPokerTemplate | null;
}

export interface IAddPokerTemplateDimensionPayload {
  __typename: 'AddPokerTemplateDimensionPayload';
  error: IStandardMutationError | null;
  dimension: ITemplateDimension | null;
}

export interface IAddPokerTemplateScalePayload {
  __typename: 'AddPokerTemplateScalePayload';
  error: IStandardMutationError | null;
  scale: ITemplateScale | null;
}

export interface IAddPokerTemplateScaleValuePayload {
  __typename: 'AddPokerTemplateScaleValuePayload';
  error: IStandardMutationError | null;
  scale: ITemplateScale | null;
}

/**
 * Input for adding a new scale
 */
export interface IAddTemplateScaleInput {
  /**
   * The color used to visually group a scale value
   */
  color: string;

  /**
   * The label for this value, e.g., XS, M, L
   */
  label: string;
}

/**
 * Return object for AddReactjiToReactablePayload
 */
export type AddReactjiToReactablePayload =
  | IErrorPayload
  | IAddReactjiToReactableSuccess;

export interface IAddReactjiToReactableSuccess {
  __typename: 'AddReactjiToReactableSuccess';

  /**
   * the Reactable with the updated list of reactjis
   */
  reactable: Reactable;
}

/**
 * The type of reactable
 */
export const enum ReactableEnum {
  COMMENT = 'COMMENT',
  REFLECTION = 'REFLECTION'
}

export interface IAddReflectTemplatePayload {
  __typename: 'AddReflectTemplatePayload';
  error: IStandardMutationError | null;
  reflectTemplate: IReflectTemplate | null;
}

export interface IAddReflectTemplatePromptPayload {
  __typename: 'AddReflectTemplatePromptPayload';
  error: IStandardMutationError | null;
  prompt: IReflectPrompt | null;
}

export interface IAddSlackAuthPayload {
  __typename: 'AddSlackAuthPayload';
  error: IStandardMutationError | null;

  /**
   * The newly created auth
   */
  slackIntegration: ISlackIntegration | null;

  /**
   * The user with updated slackAuth
   */
  user: IUser | null;
}

export interface IAddFeatureFlagPayload {
  __typename: 'AddFeatureFlagPayload';
  error: IStandardMutationError | null;

  /**
   * the user that was given the super power. Use users instead in GraphiQL since it may affect multiple users
   */
  user: IUser | null;

  /**
   * the users given the super power
   */
  users: Array<IUser | null> | null;
}

/**
 * A flag to give an individual user super powers
 */
export const enum UserFlagEnum {
  video = 'video',
  jira = 'jira',
  poker = 'poker'
}

export interface IAddGitHubAuthPayload {
  __typename: 'AddGitHubAuthPayload';
  error: IStandardMutationError | null;

  /**
   * The newly created auth
   */
  githubIntegration: IGitHubIntegration | null;

  /**
   * The team member with the updated auth
   */
  teamMember: ITeamMember | null;

  /**
   * The user with updated githubAuth
   */
  user: IUser | null;
}

export interface IAddOrgPayload {
  __typename: 'AddOrgPayload';
  organization: IOrganization | null;
  error: IStandardMutationError | null;

  /**
   * The new auth token sent to the mutator
   */
  authToken: string | null;
  team: ITeam | null;

  /**
   * The teamMember that just created the new team, if this is a creation
   */
  teamMember: ITeamMember | null;

  /**
   * The ID of the suggestion to create a new team
   */
  removedSuggestedActionId: string | null;
}

export interface INewTeamInput {
  /**
   * The name of the team
   */
  name?: string | null;

  /**
   * The unique orginization ID that pays for the team
   */
  orgId?: string | null;
}

export interface IAddTeamPayload {
  __typename: 'AddTeamPayload';
  error: IStandardMutationError | null;

  /**
   * The new auth token sent to the mutator
   */
  authToken: string | null;
  team: ITeam | null;

  /**
   * The teamMember that just created the new team, if this is a creation
   */
  teamMember: ITeamMember | null;

  /**
   * The ID of the suggestion to create a new team
   */
  removedSuggestedActionId: string | null;
}

export interface IArchiveOrganizationPayload {
  __typename: 'ArchiveOrganizationPayload';
  error: IStandardMutationError | null;
  orgId: string | null;
  teams: Array<ITeam> | null;

  /**
   * all the suggested actions that never happened
   */
  removedSuggestedActionIds: Array<string | null> | null;
}

export interface IArchiveTeamPayload {
  __typename: 'ArchiveTeamPayload';
  error: IStandardMutationError | null;
  team: ITeam | null;

  /**
   * A notification explaining that the team was archived and removed from view
   */
  notification: INotifyTeamArchived | null;

  /**
   * all the suggested actions that never happened
   */
  removedSuggestedActionIds: Array<string | null> | null;

  /**
   * A list of the ids of templates created by a team
   */
  teamTemplateIds: Array<string>;
}

/**
 * A notification alerting the user that a team they were on is now archived
 */
export interface INotifyTeamArchived {
  __typename: 'NotifyTeamArchived';

  /**
   * the user that archived the team
   */
  archivor: IUser;
  team: ITeam;

  /**
   * A shortid for the notification
   */
  id: string;

  /**
   * UNREAD if new, READ if viewer has seen it, CLICKED if viewed clicked it
   */
  status: NotificationStatusEnum;

  /**
   * The datetime to activate the notification & send it to the client
   */
  createdAt: any;
  type: NotificationEnum;

  /**
   * *The userId that should see this notification
   */
  userId: string;
}

/**
 * Return object for ArchiveTimelineEventPayload
 */
export type ArchiveTimelineEventPayload =
  | IErrorPayload
  | IArchiveTimelineEventSuccess;

export interface IArchiveTimelineEventSuccess {
  __typename: 'ArchiveTimelineEventSuccess';

  /**
   * the archived timelineEvent
   */
  timelineEvent: TimelineEvent;
}

export interface IAutoGroupReflectionsPayload {
  __typename: 'AutoGroupReflectionsPayload';
  error: IStandardMutationError | null;
  meeting: IRetrospectiveMeeting | null;
  reflections: Array<IRetroReflection | null> | null;
  reflectionGroups: Array<IRetroReflectionGroup | null> | null;
  removedReflectionGroups: Array<IRetroReflectionGroup | null> | null;
}

export interface IChangeTaskTeamPayload {
  __typename: 'ChangeTaskTeamPayload';
  error: IStandardMutationError | null;
  task: ITask | null;

  /**
   * the taskId sent to a user who is not on the new team so they can remove it from their client
   */
  removedTaskId: string | null;
}

export interface ISetNotificationStatusPayload {
  __typename: 'SetNotificationStatusPayload';
  error: IStandardMutationError | null;

  /**
   * The updated notification
   */
  notification: Notification | null;
}

export interface ICreateImposterTokenPayload {
  __typename: 'CreateImposterTokenPayload';
  error: IStandardMutationError | null;

  /**
   * The new JWT
   */
  authToken: string | null;

  /**
   * The user you have assumed
   */
  user: IUser | null;
}

export interface ICreateGitHubTaskIntegrationPayload {
  __typename: 'CreateGitHubTaskIntegrationPayload';
  error: IStandardMutationError | null;
  task: ITask | null;
}

export interface ICreateJiraTaskIntegrationPayload {
  __typename: 'CreateJiraTaskIntegrationPayload';
  error: IStandardMutationError | null;
  task: ITask | null;
}

/**
 * Return object for CreateMassInvitationPayload
 */
export type CreateMassInvitationPayload =
  | IErrorPayload
  | ICreateMassInvitationSuccess;

export interface ICreateMassInvitationSuccess {
  __typename: 'CreateMassInvitationSuccess';

  /**
   * the team with the updated mass inivtation
   */
  team: ITeam;
}

export interface ICreateReflectionPayload {
  __typename: 'CreateReflectionPayload';
  error: IStandardMutationError | null;
  meeting: NewMeeting | null;
  reflectionId: string | null;
  reflection: IRetroReflection | null;

  /**
   * The group automatically created for the reflection
   */
  reflectionGroup: IRetroReflectionGroup | null;

  /**
   * The stages that were unlocked by navigating
   */
  unlockedStages: Array<NewMeetingStage> | null;
}

export interface ICreateReflectionInput {
  /**
   * A stringified draft-js document containing thoughts
   */
  content?: string | null;
  meetingId: string;

  /**
   * The prompt the reflection belongs to
   */
  promptId?: string | null;
  sortOrder: number;
}

export interface ICreateTaskPayload {
  __typename: 'CreateTaskPayload';
  error: IStandardMutationError | null;
  task: ITask | null;
  involvementNotification: INotifyTaskInvolves | null;
}

/**
 * A notification sent to someone who was just added to a team
 */
export interface INotifyTaskInvolves {
  __typename: 'NotifyTaskInvolves';

  /**
   * A shortid for the notification
   */
  id: string;

  /**
   * UNREAD if new, READ if viewer has seen it, CLICKED if viewed clicked it
   */
  status: NotificationStatusEnum;

  /**
   * The datetime to activate the notification & send it to the client
   */
  createdAt: any;
  type: NotificationEnum;

  /**
   * *The userId that should see this notification
   */
  userId: string;

  /**
   * How the user is affiliated with the task
   */
  involvement: TaskInvolvementType;

  /**
   * The taskId that now involves the userId
   */
  taskId: string;

  /**
   * The task that now involves the userId
   */
  task: ITask | null;

  /**
   * The teamMemberId of the person that made the change
   */
  changeAuthorId: string | null;

  /**
   * The TeamMember of the person that made the change
   */
  changeAuthor: ITeamMember;
  teamId: string;

  /**
   * The team the task is on
   */
  team: ITeam;
}

/**
 * How a user is involved with a task (listed in hierarchical order)
 */
export const enum TaskInvolvementType {
  ASSIGNEE = 'ASSIGNEE',
  MENTIONEE = 'MENTIONEE'
}

export interface ICreateTaskInput {
  content?: string | null;
  plaintextContent?: string | null;

  /**
   * foreign key for the meeting this was created in
   */
  meetingId?: string | null;

  /**
   * foreign key for the thread this was created in
   */
  discussionId?: string | null;
  threadSortOrder?: number | null;
  threadParentId?: string | null;
  sortOrder?: number | null;
  status: TaskStatusEnum;

  /**
   * teamId, the team the task is on
   */
  teamId: string;

  /**
   * userId, the owner of the task. This can be null if the task is not assigned to anyone.
   */
  userId?: string | null;
  integration?: ICreateTaskIntegrationInput | null;
}

export interface ICreateTaskIntegrationInput {
  /**
   * The service to push this new task to
   */
  service: TaskServiceEnum;

  /**
   * The key or composite key where the task should live in the service, e.g. nameWithOwner or cloudId:projectKey
   */
  serviceProjectHash: string;
}

/**
 * The part of the site that is calling the mutation
 */
export const enum AreaEnum {
  meeting = 'meeting',
  teamDash = 'teamDash',
  userDash = 'userDash'
}

/**
 * Return object for DeleteCommentPayload
 */
export type DeleteCommentPayload = IErrorPayload | IDeleteCommentSuccess;

export interface IDeleteCommentSuccess {
  __typename: 'DeleteCommentSuccess';
  commentId: string;

  /**
   * the comment just deleted
   */
  comment: IComment;
}

export interface IDeleteTaskPayload {
  __typename: 'DeleteTaskPayload';
  error: IStandardMutationError | null;

  /**
   * The task that was deleted
   */
  task: ITask | null;
}

export interface IDeleteUserPayload {
  __typename: 'DeleteUserPayload';
  error: IStandardMutationError | null;
}

export interface IDenyPushInvitationPayload {
  __typename: 'DenyPushInvitationPayload';
  error: IStandardMutationError | null;
  teamId: string | null;
  userId: string | null;
}

export interface IDismissNewFeaturePayload {
  __typename: 'DismissNewFeaturePayload';
  error: IStandardMutationError | null;
}

export interface IDismissSuggestedActionPayload {
  __typename: 'DismissSuggestedActionPayload';
  error: IStandardMutationError | null;

  /**
   * The user that dismissed the action
   */
  user: IUser | null;

  /**
   * The id of the removed suggested action
   */
  removedSuggestedActionId: string | null;
}

export interface IDowngradeToPersonalPayload {
  __typename: 'DowngradeToPersonalPayload';
  error: IStandardMutationError | null;

  /**
   * The new Personal Org
   */
  organization: IOrganization | null;

  /**
   * The updated teams under the org
   */
  teams: Array<ITeam | null> | null;
}

export interface IDragDiscussionTopicPayload {
  __typename: 'DragDiscussionTopicPayload';
  error: IStandardMutationError | null;
  meeting: NewMeeting | null;
  stage: IRetroDiscussStage | null;
}

/**
 * Return object for DragEstimatingTaskPayload
 */
export type DragEstimatingTaskPayload =
  | IErrorPayload
  | IDragEstimatingTaskSuccess;

export interface IDragEstimatingTaskSuccess {
  __typename: 'DragEstimatingTaskSuccess';
  meetingId: string;
  meeting: IPokerMeeting;
  stageId: string;
  stage: IEstimateStage;
}

/**
 * Return object for EmailPasswordResetPayload
 */
export type EmailPasswordResetPayload =
  | IErrorPayload
  | IEmailPasswordResetSuccess;

export interface IEmailPasswordResetSuccess {
  __typename: 'EmailPasswordResetSuccess';

  /**
   * True if the email password reset was successfully sent
   */
  success: boolean | null;
}

/**
 * Return object for EditCommentingPayload
 */
export type EditCommentingPayload = IErrorPayload | IEditCommentingSuccess;

export interface IEditCommentingSuccess {
  __typename: 'EditCommentingSuccess';

  /**
   * The discussion the comment was created in
   */
  discussionId: string;

  /**
   * The discussion where the commenting state changed
   */
  discussion: IDiscussion;
}

/**
 * Return object for EndSprintPokerPayload
 */
export type EndSprintPokerPayload = IErrorPayload | IEndSprintPokerSuccess;

export interface IEndSprintPokerSuccess {
  __typename: 'EndSprintPokerSuccess';

  /**
   * true if the meeting was killed (ended before reaching last stage)
   */
  isKill: boolean;
  meetingId: string;
  meeting: IPokerMeeting;
  removedTaskIds: Array<string>;
  team: ITeam;
  teamId: string;
}

export interface IEditReflectionPayload {
  __typename: 'EditReflectionPayload';
  error: IStandardMutationError | null;
  promptId: string | null;

  /**
   * The socketId of the client editing the card (uses socketId to maintain anonymity)
   */
  editorId: string | null;

  /**
   * true if the reflection is being edited, else false
   */
  isEditing: boolean | null;
}

export interface IEditTaskPayload {
  __typename: 'EditTaskPayload';
  error: IStandardMutationError | null;
  task: ITask | null;
  editor: IUser | null;

  /**
   * true if the editor is editing, false if they stopped editing
   */
  isEditing: boolean | null;
}

/**
 * Return object for EndCheckInPayload
 */
export type EndCheckInPayload = IErrorPayload | IEndCheckInSuccess;

export interface IEndCheckInSuccess {
  __typename: 'EndCheckInSuccess';

  /**
   * true if the meeting was killed (ended before reaching last stage)
   */
  isKill: boolean;
  team: ITeam;
  meeting: IActionMeeting;

  /**
   * The ID of the suggestion to try a check-in meeting, if tried
   */
  removedSuggestedActionId: string | null;
  removedTaskIds: Array<string> | null;

  /**
   * An event that is important to the viewer, e.g. an ended meeting
   */
  timelineEvent: TimelineEvent;
  updatedTaskIds: Array<string> | null;

  /**
   * Any tasks that were updated during the meeting
   */
  updatedTasks: Array<ITask> | null;
}

export interface IEndDraggingReflectionPayload {
  __typename: 'EndDraggingReflectionPayload';
  error: IStandardMutationError | null;
  dragId: string | null;

  /**
   * The drag as sent from the team member
   */
  remoteDrag: IRemoteReflectionDrag | null;

  /**
   * the type of item the reflection was dropped on
   */
  dropTargetType: DragReflectionDropTargetTypeEnum | null;

  /**
   * The ID that the dragged item was dropped on, if dropTargetType is not specific enough
   */
  dropTargetId: string | null;
  meeting: IRetrospectiveMeeting | null;
  meetingId: string | null;
  reflection: IRetroReflection | null;
  reflectionGroupId: string | null;
  reflectionId: string | null;

  /**
   * foreign key to get user
   */
  userId: string | null;

  /**
   * The group encapsulating the new reflection. A new one was created if one was not provided.
   */
  reflectionGroup: IRetroReflectionGroup | null;

  /**
   * The old group the reflection was in
   */
  oldReflectionGroup: IRetroReflectionGroup | null;
}

/**
 * Info associated with a current drag
 */
export interface IRemoteReflectionDrag {
  __typename: 'RemoteReflectionDrag';
  id: string;

  /**
   * The userId of the person currently dragging the reflection
   */
  dragUserId: string | null;

  /**
   * The name of the dragUser
   */
  dragUserName: string | null;
  clientHeight: number | null;
  clientWidth: number | null;

  /**
   * The primary key of the item being drug
   */
  sourceId: string;

  /**
   * The estimated destination of the item being drug
   */
  targetId: string | null;

  /**
   * horizontal distance from the top left of the target
   */
  targetOffsetX: number | null;

  /**
   * vertical distance from the top left of the target
   */
  targetOffsetY: number | null;

  /**
   * the left of the source, relative to the client window
   */
  clientX: number | null;

  /**
   * the top of the source, relative to the client window
   */
  clientY: number | null;
}

/**
 * The possible places a reflection can be dropped
 */
export const enum DragReflectionDropTargetTypeEnum {
  REFLECTION_GROUP = 'REFLECTION_GROUP',
  REFLECTION_GRID = 'REFLECTION_GRID'
}

/**
 * Return object for EndRetrospectivePayload
 */
export type EndRetrospectivePayload = IErrorPayload | IEndRetrospectiveSuccess;

export interface IEndRetrospectiveSuccess {
  __typename: 'EndRetrospectiveSuccess';

  /**
   * true if the meeting was killed (ended before reaching last stage)
   */
  isKill: boolean;
  team: ITeam;
  meeting: IRetrospectiveMeeting;

  /**
   * The ID of the suggestion to try a retro meeting, if tried
   */
  removedSuggestedActionId: string | null;
  removedTaskIds: Array<string>;

  /**
   * An event that is important to the viewer, e.g. an ended meeting
   */
  timelineEvent: TimelineEvent;
}

/**
 * Return object for FlagReadyToAdvancePayload
 */
export type FlagReadyToAdvancePayload =
  | IErrorPayload
  | IFlagReadyToAdvanceSuccess;

export interface IFlagReadyToAdvanceSuccess {
  __typename: 'FlagReadyToAdvanceSuccess';

  /**
   * the meeting with the updated readyCount
   */
  meeting: NewMeeting;

  /**
   * the stage with the updated readyCount
   */
  stage: NewMeetingStage;
}

export interface IInactivateUserPayload {
  __typename: 'InactivateUserPayload';
  error: IStandardMutationError | null;

  /**
   * The user that has been inactivated
   */
  user: IUser | null;
}

export interface IInvalidateSessionsPayload {
  __typename: 'InvalidateSessionsPayload';
  error: IStandardMutationError | null;

  /**
   * The new, only valid auth token
   */
  authToken: string | null;
}

export interface IInviteToTeamPayload {
  __typename: 'InviteToTeamPayload';
  error: IStandardMutationError | null;

  /**
   * The team the inviter is inviting the invitee to
   */
  team: ITeam | null;

  /**
   * A list of email addresses the invitations were sent to
   */
  invitees: Array<any> | null;

  /**
   * the notification ID if this payload is sent to a subscriber, else null
   */
  teamInvitationNotificationId: string | null;

  /**
   * The notification sent to the invitee if they are a parabol user
   */
  teamInvitationNotification: INotificationTeamInvitation | null;

  /**
   * the `invite your team` suggested action that was removed, if any
   */
  removedSuggestedActionId: string | null;
}

export interface ILoginWithGooglePayload {
  __typename: 'LoginWithGooglePayload';
  error: IStandardMutationError | null;

  /**
   * The new auth token
   */
  authToken: string | null;
  userId: string | null;

  /**
   * the newly created user
   */
  user: IUser | null;
}

export interface ILoginWithPasswordPayload {
  __typename: 'LoginWithPasswordPayload';
  error: IStandardMutationError | null;

  /**
   * The new auth token
   */
  authToken: string | null;
  userId: string | null;

  /**
   * the newly created user
   */
  user: IUser | null;
}

export interface IMovePokerTemplateDimensionPayload {
  __typename: 'MovePokerTemplateDimensionPayload';
  error: IStandardMutationError | null;
  dimension: ITemplateDimension | null;
}

export interface IMoveReflectTemplatePromptPayload {
  __typename: 'MoveReflectTemplatePromptPayload';
  error: IStandardMutationError | null;
  prompt: IReflectPrompt | null;
}

export interface INavigateMeetingPayload {
  __typename: 'NavigateMeetingPayload';
  error: IStandardMutationError | null;
  meeting: NewMeeting | null;

  /**
   * The stage that the facilitator is now on
   */
  facilitatorStage: NewMeetingStage | null;

  /**
   * The stage that the facilitator left
   */
  oldFacilitatorStage: NewMeetingStage | null;

  /**
   * Additional details triggered by completing certain phases
   */
  phaseComplete: IPhaseCompletePayload | null;

  /**
   * The stages that were unlocked by navigating
   */
  unlockedStages: Array<NewMeetingStage> | null;
}

export interface IPhaseCompletePayload {
  __typename: 'PhaseCompletePayload';

  /**
   * payload provided if the retro reflect phase was completed
   */
  reflect: IReflectPhaseCompletePayload | null;

  /**
   * payload provided if the retro grouping phase was completed
   */
  group: IGroupPhaseCompletePayload | null;

  /**
   * payload provided if the retro voting phase was completed
   */
  vote: IVotePhaseCompletePayload | null;
}

export interface IReflectPhaseCompletePayload {
  __typename: 'ReflectPhaseCompletePayload';

  /**
   * a list of empty reflection groups to remove
   */
  emptyReflectionGroupIds: Array<string>;

  /**
   * The grouped reflections
   */
  reflectionGroups: Array<IRetroReflectionGroup>;
}

export interface IGroupPhaseCompletePayload {
  __typename: 'GroupPhaseCompletePayload';

  /**
   * a list of empty reflection groups to remove
   */
  emptyReflectionGroupIds: Array<string>;

  /**
   * the current meeting
   */
  meeting: IRetrospectiveMeeting;

  /**
   * a list of updated reflection groups
   */
  reflectionGroups: Array<IRetroReflectionGroup | null> | null;
}

export interface IVotePhaseCompletePayload {
  __typename: 'VotePhaseCompletePayload';

  /**
   * the current meeting
   */
  meeting: IRetrospectiveMeeting | null;
}

export interface INewMeetingCheckInPayload {
  __typename: 'NewMeetingCheckInPayload';
  error: IStandardMutationError | null;
  meetingMember: MeetingMember | null;
  meeting: NewMeeting | null;
}

export interface IPayLaterPayload {
  __typename: 'PayLaterPayload';
  error: IStandardMutationError | null;

  /**
   * the ids of the meetings that were showing conversion modals
   */
  meetingId: string | null;

  /**
   * the meetings that were showing conversion modals
   */
  meeting: NewMeeting | null;
}

/**
 * Return object for PersistJiraSearchQueryPayload
 */
export type PersistJiraSearchQueryPayload =
  | IErrorPayload
  | IPersistJiraSearchQuerySuccess;

export interface IPersistJiraSearchQuerySuccess {
  __typename: 'PersistJiraSearchQuerySuccess';

  /**
   * The newly created auth
   */
  atlassianIntegration: IAtlassianIntegration | null;
}

export interface IJiraSearchQueryInput {
  /**
   * The query string, either simple or JQL depending on the isJQL flag
   */
  queryString: string;

  /**
   * true if the queryString is JQL, else false
   */
  isJQL: boolean;

  /**
   * The list of project keys selected as a filter. null if not set
   */
  projectKeyFilters?: Array<string> | null;

  /**
   * true if this query should be deleted
   */
  isRemove?: boolean | null;
}

export interface IPushInvitationPayload {
  __typename: 'PushInvitationPayload';
  error: IStandardMutationError | null;
  user: IUser | null;
  meetingId: string | null;
  team: ITeam | null;
}

export interface IPromoteNewMeetingFacilitatorPayload {
  __typename: 'PromoteNewMeetingFacilitatorPayload';
  error: IStandardMutationError | null;

  /**
   * The meeting in progress
   */
  meeting: NewMeeting | null;
  facilitatorStage: NewMeetingStage | null;

  /**
   * The old meeting facilitator
   */
  oldFacilitator: IUser | null;
}

export interface IPromoteToTeamLeadPayload {
  __typename: 'PromoteToTeamLeadPayload';
  error: IStandardMutationError | null;
  team: ITeam | null;
  oldLeader: ITeamMember | null;
  newLeader: ITeamMember | null;
}

export interface IReflectTemplatePromptUpdateDescriptionPayload {
  __typename: 'ReflectTemplatePromptUpdateDescriptionPayload';
  error: IStandardMutationError | null;
  prompt: IReflectPrompt | null;
}

export interface IPokerTemplateDimensionUpdateDescriptionPayload {
  __typename: 'PokerTemplateDimensionUpdateDescriptionPayload';
  error: IStandardMutationError | null;
  dimension: ITemplateDimension | null;
}

export interface IReflectTemplatePromptUpdateGroupColorPayload {
  __typename: 'ReflectTemplatePromptUpdateGroupColorPayload';
  error: IStandardMutationError | null;
  prompt: IReflectPrompt | null;
}

export interface IRemoveAgendaItemPayload {
  __typename: 'RemoveAgendaItemPayload';
  error: IStandardMutationError | null;
  agendaItem: IAgendaItem | null;
  meetingId: string | null;

  /**
   * The meeting with the updated agenda item, if any
   */
  meeting: NewMeeting | null;
}

export interface IRemoveAtlassianAuthPayload {
  __typename: 'RemoveAtlassianAuthPayload';
  error: IStandardMutationError | null;
  teamId: string | null;

  /**
   * The team member with the updated auth
   */
  teamMember: ITeamMember | null;

  /**
   * The user with updated atlassianAuth
   */
  user: IUser | null;
}

export interface IRemoveGitHubAuthPayload {
  __typename: 'RemoveGitHubAuthPayload';
  error: IStandardMutationError | null;
  teamId: string | null;

  /**
   * The team member with the updated auth
   */
  teamMember: ITeamMember | null;

  /**
   * The user with updated githubAuth
   */
  user: IUser | null;
}

export interface IRemoveOrgUserPayload {
  __typename: 'RemoveOrgUserPayload';
  error: IStandardMutationError | null;

  /**
   * The organization the user was removed from
   */
  organization: IOrganization | null;

  /**
   * The teams the user was removed from
   */
  teams: Array<ITeam> | null;

  /**
   * The teamMembers removed
   */
  teamMembers: Array<ITeamMember> | null;

  /**
   * The tasks that were archived or reassigned
   */
  updatedTasks: Array<ITask> | null;

  /**
   * The user removed from the organization
   */
  user: IUser | null;

  /**
   * The notifications for each team the user was kicked out of
   */
  kickOutNotifications: Array<INotifyKickedOut> | null;

  /**
   * The organization member that got removed
   */
  removedOrgMember: IOrganizationUser | null;
  organizationUserId: string | null;
}

/**
 * A notification sent to someone who was just kicked off a team
 */
export interface INotifyKickedOut {
  __typename: 'NotifyKickedOut';

  /**
   * A shortid for the notification
   */
  id: string;

  /**
   * UNREAD if new, READ if viewer has seen it, CLICKED if viewed clicked it
   */
  status: NotificationStatusEnum;

  /**
   * The datetime to activate the notification & send it to the client
   */
  createdAt: any;
  type: NotificationEnum;

  /**
   * *The userId that should see this notification
   */
  userId: string;

  /**
   * the user that evicted recipient
   */
  evictor: IUser;

  /**
   * The name of the team the user is joining
   */
  teamName: string;

  /**
   * The teamId the user was kicked out of
   */
  teamId: string;

  /**
   * The team the task is on
   */
  team: ITeam;
}

export interface IRemovePokerTemplatePayload {
  __typename: 'RemovePokerTemplatePayload';
  error: IStandardMutationError | null;
  pokerTemplate: IPokerTemplate | null;
  pokerMeetingSettings: IPokerMeetingSettings | null;
}

export interface IRemoveReflectTemplatePayload {
  __typename: 'RemoveReflectTemplatePayload';
  error: IStandardMutationError | null;
  reflectTemplate: IReflectTemplate | null;
  retroMeetingSettings: IRetrospectiveMeetingSettings | null;
}

export interface IRemoveReflectTemplatePromptPayload {
  __typename: 'RemoveReflectTemplatePromptPayload';
  error: IStandardMutationError | null;
  reflectTemplate: IReflectTemplate | null;
  prompt: IReflectPrompt | null;
}

export interface IRemovePokerTemplateDimensionPayload {
  __typename: 'RemovePokerTemplateDimensionPayload';
  error: IStandardMutationError | null;
  pokerTemplate: IPokerTemplate | null;
  dimension: ITemplateDimension | null;
}

/**
 * Return object for RenameMeetingPayload
 */
export type RenameMeetingPayload = IErrorPayload | IRenameMeetingSuccess;

export interface IRenameMeetingSuccess {
  __typename: 'RenameMeetingSuccess';

  /**
   * the renamed meeting
   */
  meeting: NewMeeting;
}

export interface IRenameMeetingTemplatePayload {
  __typename: 'RenameMeetingTemplatePayload';
  error: IStandardMutationError | null;
  meetingTemplate: MeetingTemplate | null;
}

export interface IRenameReflectTemplatePromptPayload {
  __typename: 'RenameReflectTemplatePromptPayload';
  error: IStandardMutationError | null;
  prompt: IReflectPrompt | null;
}

export interface IRenamePokerTemplateDimensionPayload {
  __typename: 'RenamePokerTemplateDimensionPayload';
  error: IStandardMutationError | null;
  dimension: ITemplateDimension | null;
}

export interface IRenamePokerTemplateScalePayload {
  __typename: 'RenamePokerTemplateScalePayload';
  error: IStandardMutationError | null;
  scale: ITemplateScale | null;
}

export interface IRemovePokerTemplateScalePayload {
  __typename: 'RemovePokerTemplateScalePayload';
  error: IStandardMutationError | null;
  scale: ITemplateScale | null;

  /**
   * A list of dimensions that were using the archived scale
   */
  dimensions: Array<ITemplateDimension>;
}

export interface IRemovePokerTemplateScaleValuePayload {
  __typename: 'RemovePokerTemplateScaleValuePayload';
  error: IStandardMutationError | null;
  scale: ITemplateScale | null;
}

export interface IRemoveReflectionPayload {
  __typename: 'RemoveReflectionPayload';
  error: IStandardMutationError | null;
  meeting: NewMeeting | null;
  reflection: IRetroReflection | null;

  /**
   * The stages that were unlocked by navigating
   */
  unlockedStages: Array<NewMeetingStage> | null;
}

export interface IRemoveSlackAuthPayload {
  __typename: 'RemoveSlackAuthPayload';
  error: IStandardMutationError | null;

  /**
   * The ID of the authorization removed
   */
  authId: string | null;
  teamId: string | null;

  /**
   * The user with updated slackAuth
   */
  user: IUser | null;
}

export interface IRemoveTeamMemberPayload {
  __typename: 'RemoveTeamMemberPayload';
  error: IStandardMutationError | null;

  /**
   * The team member removed
   */
  teamMember: ITeamMember | null;

  /**
   * The team the team member was removed from
   */
  team: ITeam | null;

  /**
   * The tasks that got reassigned
   */
  updatedTasks: Array<ITask> | null;

  /**
   * The user removed from the team
   */
  user: IUser | null;

  /**
   * A notification if you were kicked out by the team leader
   */
  kickOutNotification: INotifyKickedOut | null;
}

export interface IResetPasswordPayload {
  __typename: 'ResetPasswordPayload';
  error: IStandardMutationError | null;

  /**
   * The new auth token
   */
  authToken: string | null;
  userId: string | null;

  /**
   * the user that changed their password
   */
  user: IUser | null;
}

export interface IResetRetroMeetingToGroupStagePayload {
  __typename: 'ResetRetroMeetingToGroupStagePayload';
  error: IStandardMutationError | null;
  meeting: NewMeeting | null;
}

export interface ISegmentEventTrackOptions {
  teamId?: string | null;
  orgId?: string | null;
  phase?: NewMeetingPhaseTypeEnum | null;
  eventId?: number | null;
  actionType?: string | null;
}

export interface ISelectTemplatePayload {
  __typename: 'SelectTemplatePayload';
  error: IStandardMutationError | null;
  meetingSettings: TeamMeetingSettings | null;
}

/**
 * Return object for SetAppLocationPayload
 */
export type SetAppLocationPayload = IErrorPayload | ISetAppLocationSuccess;

export interface ISetAppLocationSuccess {
  __typename: 'SetAppLocationSuccess';

  /**
   * the user with the updated location
   */
  user: IUser;
}

export interface ISetCheckInEnabledPayload {
  __typename: 'SetCheckInEnabledPayload';
  error: IStandardMutationError | null;
  settings: TeamMeetingSettings | null;
}

/**
 * Return object for SetDefaultSlackChannelPayload
 */
export type SetDefaultSlackChannelPayload =
  | IErrorPayload
  | ISetDefaultSlackChannelSuccess;

export interface ISetDefaultSlackChannelSuccess {
  __typename: 'SetDefaultSlackChannelSuccess';

  /**
   * The id of the slack channel that is now the default slack channel
   */
  slackChannelId: string;

  /**
   * The team member with the updated slack channel
   */
  teamMember: ITeamMember;
}

export type SetOrgUserRolePayload =
  | ISetOrgUserRoleAddedPayload
  | ISetOrgUserRoleRemovedPayload;

export interface ISetOrgUserRolePayload {
  __typename: 'SetOrgUserRolePayload';
  error: IStandardMutationError | null;
  organization: IOrganization | null;
  updatedOrgMember: IOrganizationUser | null;
}

export interface ISetPhaseFocusPayload {
  __typename: 'SetPhaseFocusPayload';
  error: IStandardMutationError | null;
  meeting: IRetrospectiveMeeting;
  reflectPhase: IReflectPhase;
}

export interface ISetStageTimerPayload {
  __typename: 'SetStageTimerPayload';
  error: IStandardMutationError | null;

  /**
   * The updated stage
   */
  stage: NewMeetingStage | null;
}

export interface ISetSlackNotificationPayload {
  __typename: 'SetSlackNotificationPayload';
  error: IStandardMutationError | null;
  slackNotifications: Array<ISlackNotification> | null;

  /**
   * The user with updated slack notifications
   */
  user: IUser | null;
}

export interface ISignUpWithPasswordPayload {
  __typename: 'SignUpWithPasswordPayload';
  error: IStandardMutationError | null;

  /**
   * The new auth token
   */
  authToken: string | null;
  userId: string | null;

  /**
   * the newly created user
   */
  user: IUser | null;
}

export interface IStartDraggingReflectionPayload {
  __typename: 'StartDraggingReflectionPayload';
  error: IStandardMutationError | null;

  /**
   * The proposed start/end of a drag. Subject to race conditions, it is up to the client to decide to accept or ignore
   */
  remoteDrag: IRemoteReflectionDrag | null;
  meeting: NewMeeting | null;
  meetingId: string | null;
  reflection: IRetroReflection | null;
  reflectionId: string | null;
  teamId: string | null;
}

/**
 * Return object for StartCheckInPayload
 */
export type StartCheckInPayload = IErrorPayload | IStartCheckInSuccess;

export interface IStartCheckInSuccess {
  __typename: 'StartCheckInSuccess';
  meeting: IActionMeeting;
  meetingId: string;
  team: ITeam;
}

/**
 * Return object for StartRetrospectivePayload
 */
export type StartRetrospectivePayload =
  | IErrorPayload
  | IStartRetrospectiveSuccess;

export interface IStartRetrospectiveSuccess {
  __typename: 'StartRetrospectiveSuccess';
  meeting: IRetrospectiveMeeting;
  meetingId: string;
  team: ITeam;
}

/**
 * Return object for StartSprintPokerPayload
 */
export type StartSprintPokerPayload = IErrorPayload | IStartSprintPokerSuccess;

export interface IStartSprintPokerSuccess {
  __typename: 'StartSprintPokerSuccess';
  meetingId: string;
  meeting: IPokerMeeting;
  team: ITeam;
  teamId: string;
}

export interface IUpdateAgendaItemPayload {
  __typename: 'UpdateAgendaItemPayload';
  agendaItem: IAgendaItem | null;
  meetingId: string | null;

  /**
   * The meeting with the updated agenda item, if any
   */
  meeting: NewMeeting | null;
  error: IStandardMutationError | null;
}

export interface IUpdateAgendaItemInput {
  /**
   * The unique agenda item ID, composed of a teamId::shortid
   */
  id: string;

  /**
   * The content of the agenda item
   */
  content?: string | null;

  /**
   * True if agenda item has been pinned
   */
  pinned?: boolean | null;

  /**
   * True if not processed or deleted
   */
  isActive?: boolean | null;

  /**
   * The sort order of the agenda item in the list
   */
  sortOrder?: number | null;
}

/**
 * Return object for UpdateCommentContentPayload
 */
export type UpdateCommentContentPayload =
  | IErrorPayload
  | IUpdateCommentContentSuccess;

export interface IUpdateCommentContentSuccess {
  __typename: 'UpdateCommentContentSuccess';

  /**
   * the comment with updated content
   */
  comment: IComment;
}

export interface IUpdateCreditCardPayload {
  __typename: 'UpdateCreditCardPayload';
  error: IStandardMutationError | null;

  /**
   * The organization that received the updated credit card
   */
  organization: IOrganization | null;

  /**
   * The teams that are now paid up
   */
  teamsUpdated: Array<ITeam | null> | null;
}

export interface IUpdateOrgPayload {
  __typename: 'UpdateOrgPayload';
  error: IStandardMutationError | null;

  /**
   * The updated org
   */
  organization: IOrganization | null;
}

export interface IUpdateOrgInput {
  /**
   * The unique action ID
   */
  id: string;

  /**
   * The name of the org
   */
  name?: string | null;

  /**
   * The org avatar
   */
  picture?: any | null;
}

export interface IUpdatePokerTemplateDimensionScalePayload {
  __typename: 'UpdatePokerTemplateDimensionScalePayload';
  error: IStandardMutationError | null;
  dimension: ITemplateDimension | null;
}

export interface IUpdatePokerTemplateScaleValuePayload {
  __typename: 'UpdatePokerTemplateScaleValuePayload';
  error: IStandardMutationError | null;
  scale: ITemplateScale | null;
}

/**
 * A value for a scale
 */
export interface ITemplateScaleInput {
  /**
   * The color used to visually group a scale value
   */
  color: string;

  /**
   * The label for this value, e.g., XS, M, L
   */
  label: string;
}

export interface IUpdateNewCheckInQuestionPayload {
  __typename: 'UpdateNewCheckInQuestionPayload';
  error: IStandardMutationError | null;
  meeting: NewMeeting | null;
}

export interface IUpdateDragLocationInput {
  id: string;
  clientHeight: number;
  clientWidth: number;
  meetingId: string;

  /**
   * The primary key of the item being drug
   */
  sourceId: string;

  /**
   * The estimated destination of the item being drug
   */
  targetId?: string | null;

  /**
   * The teamId to broadcast the message to
   */
  teamId: string;

  /**
   * horizontal distance from the top left of the target
   */
  targetOffsetX?: number | null;

  /**
   * vertical distance from the top left of the target
   */
  targetOffsetY?: number | null;

  /**
   * the left of the source, relative to the client window
   */
  clientX?: number | null;

  /**
   * the top of the source, relative to the client window
   */
  clientY?: number | null;
}

/**
 * Return object for UpdatePokerScopePayload
 */
export type UpdatePokerScopePayload = IErrorPayload | IUpdatePokerScopeSuccess;

export interface IUpdatePokerScopeSuccess {
  __typename: 'UpdatePokerScopeSuccess';

  /**
   * The meeting with the updated estimate phases
   */
  meeting: IPokerMeeting;
}

export interface IUpdatePokerScopeItemInput {
  /**
   * The location of the single source of truth (e.g. a jira-integrated parabol task would be "jira")
   */
  service: TaskServiceEnum;

  /**
   * If vanilla parabol task, taskId. If integrated parabol task, integrationHash
   */
  serviceTaskId: string;

  /**
   * The action to perform
   */
  action: AddOrDeleteEnum;
}

/**
 * Option to add or delete
 */
export const enum AddOrDeleteEnum {
  ADD = 'ADD',
  DELETE = 'DELETE'
}

export interface IUpdateReflectionContentPayload {
  __typename: 'UpdateReflectionContentPayload';
  error: IStandardMutationError | null;
  meeting: NewMeeting | null;
  reflection: IRetroReflection | null;
}

export interface IUpdateReflectionGroupTitlePayload {
  __typename: 'UpdateReflectionGroupTitlePayload';
  error: IStandardMutationError | null;
  meeting: NewMeeting | null;
  reflectionGroup: IRetroReflectionGroup | null;
}

/**
 * Return object for UpdateRetroMaxVotesPayload
 */
export type UpdateRetroMaxVotesPayload =
  | IErrorPayload
  | IUpdateRetroMaxVotesSuccess;

export interface IUpdateRetroMaxVotesSuccess {
  __typename: 'UpdateRetroMaxVotesSuccess';

  /**
   * the meeting with the updated max votes
   */
  meeting: IRetrospectiveMeeting;
}

export interface IUpdateTaskPayload {
  __typename: 'UpdateTaskPayload';
  error: IStandardMutationError | null;
  task: ITask | null;

  /**
   * If a task was just turned private, this its ID, else null
   */
  privatizedTaskId: string | null;
  addedNotification: INotifyTaskInvolves | null;
}

export interface IUpdateTaskInput {
  /**
   * The task id
   */
  id: string;
  content?: string | null;
  sortOrder?: number | null;
  status?: TaskStatusEnum | null;
  teamId?: string | null;

  /**
   * userId, the owner of the task. This can be null if the task is not assigned to anyone.
   */
  userId?: string | null;
}

export interface IUpdateTaskDueDatePayload {
  __typename: 'UpdateTaskDueDatePayload';
  error: IStandardMutationError | null;
  task: ITask | null;
}

export interface IUpdateTeamNamePayload {
  __typename: 'UpdateTeamNamePayload';
  error: IStandardMutationError | null;
  team: ITeam | null;
}

export interface IUpdatedTeamInput {
  id?: string | null;

  /**
   * The name of the team
   */
  name?: string | null;

  /**
   * A link to the team’s profile image.
   */
  picture?: any | null;
}

/**
 * Return object for UpdateTemplateScopePayload
 */
export type UpdateTemplateScopePayload =
  | IErrorPayload
  | IUpdateTemplateScopeSuccess;

export interface IUpdateTemplateScopeSuccess {
  __typename: 'UpdateTemplateScopeSuccess';

  /**
   * the template that was just updated, if downscoped, does not provide whole story
   */
  template: MeetingTemplate;

  /**
   * if downscoping a previously used template, this will be the replacement
   */
  clonedTemplate: MeetingTemplate | null;

  /**
   * The settings that contain the teamTemplates array that was modified
   */
  settings: TeamMeetingSettings;
}

export interface IUpdateUserProfilePayload {
  __typename: 'UpdateUserProfilePayload';
  error: IStandardMutationError | null;
  user: IUser | null;

  /**
   * The updated team member
   */
  teamMembers: Array<ITeamMember> | null;
}

export interface IUpdateUserProfileInput {
  /**
   * A link to the user’s profile image.
   */
  picture?: any | null;

  /**
   * The name, as confirmed by the user
   */
  preferredName?: string | null;
}

export interface IUpgradeToProPayload {
  __typename: 'UpgradeToProPayload';
  error: IStandardMutationError | null;

  /**
   * The new Pro Org
   */
  organization: IOrganization | null;

  /**
   * The updated teams under the org
   */
  teams: Array<ITeam> | null;

  /**
   * the ids of the meetings that were showing conversion modals
   */
  meetingIds: Array<string> | null;

  /**
   * the meetings that were showing conversion modals
   */
  meetings: Array<NewMeeting> | null;
}

export interface IVerifyEmailPayload {
  __typename: 'VerifyEmailPayload';
  error: IStandardMutationError | null;

  /**
   * The new auth token sent to the mutator
   */
  authToken: string | null;
  userId: string | null;
  user: IUser | null;
}

export interface IVoteForReflectionGroupPayload {
  __typename: 'VoteForReflectionGroupPayload';
  error: IStandardMutationError | null;
  meeting: IRetrospectiveMeeting | null;
  meetingMember: IRetrospectiveMeetingMember | null;
  reflectionGroup: IRetroReflectionGroup | null;

  /**
   * The stages that were locked or unlocked by having at least 1 vote
   */
  unlockedStages: Array<NewMeetingStage> | null;
}

/**
 * Return object for VoteForPokerStoryPayload
 */
export type VoteForPokerStoryPayload =
  | IErrorPayload
  | IVoteForPokerStorySuccess;

export interface IVoteForPokerStorySuccess {
  __typename: 'VoteForPokerStorySuccess';

  /**
   * The stage that holds the updated scores
   */
  stage: IEstimateStage;
}

/**
 * Return object for PokerRevealVotesPayload
 */
export type PokerRevealVotesPayload = IErrorPayload | IPokerRevealVotesSuccess;

export interface IPokerRevealVotesSuccess {
  __typename: 'PokerRevealVotesSuccess';

  /**
   * The stage that holds the updated isVoting step
   */
  stage: IEstimateStage;
}

/**
 * Return object for PokerResetDimensionPayload
 */
export type PokerResetDimensionPayload =
  | IErrorPayload
  | IPokerResetDimensionSuccess;

export interface IPokerResetDimensionSuccess {
  __typename: 'PokerResetDimensionSuccess';

  /**
   * The stage that holds the updated isVoting step
   */
  stage: IEstimateStage;
}

/**
 * Return object for PokerAnnounceDeckHoverPayload
 */
export type PokerAnnounceDeckHoverPayload =
  | IErrorPayload
  | IPokerAnnounceDeckHoverSuccess;

export interface IPokerAnnounceDeckHoverSuccess {
  __typename: 'PokerAnnounceDeckHoverSuccess';
  meetingId: string;
  stageId: string;
  userId: string;
  user: IUser;
  isHover: boolean;

  /**
   * The stage that holds the updated scores
   */
  stage: IEstimateStage;
}

/**
 * Return object for PokerSetFinalScorePayload
 */
export type PokerSetFinalScorePayload =
  | IErrorPayload
  | IPokerSetFinalScoreSuccess;

export interface IPokerSetFinalScoreSuccess {
  __typename: 'PokerSetFinalScoreSuccess';

  /**
   * The stage that holds the updated finalScore
   */
  stage: IEstimateStage;
}

/**
 * Return object for MovePokerTemplateScaleValuePayload
 */
export type MovePokerTemplateScaleValuePayload =
  | IErrorPayload
  | IMovePokerTemplateScaleValueSuccess;

export interface IMovePokerTemplateScaleValueSuccess {
  __typename: 'MovePokerTemplateScaleValueSuccess';

  /**
   * The scale after values are moved
   */
  scale: ITemplateScale;
}

/**
 * Return object for UpdateJiraDimensionFieldPayload
 */
export type UpdateJiraDimensionFieldPayload =
  | IErrorPayload
  | IUpdateJiraDimensionFieldSuccess;

export interface IUpdateJiraDimensionFieldSuccess {
  __typename: 'UpdateJiraDimensionFieldSuccess';
  teamId: string;
  meetingId: string | null;
  team: ITeam;

  /**
   * The poker meeting the field was updated from
   */
  meeting: IPokerMeeting | null;
}

/**
 * Return object for JoinMeetingPayload
 */
export type JoinMeetingPayload = IErrorPayload | IJoinMeetingSuccess;

export interface IJoinMeetingSuccess {
  __typename: 'JoinMeetingSuccess';
  meetingId: string;

  /**
   * The meeting with the updated stages, if any
   */
  meeting: NewMeeting;
}

/**
 * Return object for AddMissingJiraFieldPayload
 */
export type AddMissingJiraFieldPayload =
  | IErrorPayload
  | IAddMissingJiraFieldSuccess;

export interface IAddMissingJiraFieldSuccess {
  __typename: 'AddMissingJiraFieldSuccess';

  /**
   * Jira field which was just added to an issue screen
   */
  dimensionField: IJiraDimensionField | null;
}

/**
 * Return object for SetPokerSpectatePayload
 */
export type SetPokerSpectatePayload = IErrorPayload | ISetPokerSpectateSuccess;

export interface ISetPokerSpectateSuccess {
  __typename: 'SetPokerSpectateSuccess';
  meetingId: string;
  userId: string;

  /**
   * The meeting member with the updated isSpectating value
   */
  meetingMember: IPokerMeetingMember;
}

/**
 * Return object for PersistGitHubSearchQueryPayload
 */
export type PersistGitHubSearchQueryPayload =
  | IErrorPayload
  | IPersistGitHubSearchQuerySuccess;

export interface IPersistGitHubSearchQuerySuccess {
  __typename: 'PersistGitHubSearchQuerySuccess';

  /**
   * The affected teamId
   */
  teamId: string;

  /**
   * The affected userId
   */
  userId: string;

  /**
   * The auth with the updated search queries
   */
  githubIntegration: IGitHubIntegration;
}

/**
 * Return object for SetTaskEstimatePayload
 */
export type SetTaskEstimatePayload = IErrorPayload | ISetTaskEstimateSuccess;

export interface ISetTaskEstimateSuccess {
  __typename: 'SetTaskEstimateSuccess';
  task: ITask;

  /**
   * The stage that holds the updated finalScore, if meetingId was provided
   */
  stage: IEstimateStage | null;
}

export interface ITaskEstimateInput {
  taskId: string;

  /**
   * The new estimate value
   */
  value: string;

  /**
   * The name of the estimate, e.g. Story Points
   */
  dimensionName: string;
  meetingId?: string | null;
}

/**
 * Return object for CreatePollPayload
 */
export type CreatePollPayload = IErrorPayload | ICreatePollSuccess;

export interface ICreatePollSuccess {
  __typename: 'CreatePollSuccess';

  /**
   * Poll id in a format of `poll:idGeneratedByDatabase`
   */
  pollId: string;

  /**
   * the poll just created
   */
  poll: IPoll;
}

/**
 * A poll created during the meeting
 */
export interface IPoll {
  __typename: 'Poll';

  /**
   * Poll id in a format of `poll:idGeneratedByDatabase`
   */
  id: string;

  /**
   * The rich text body of the item
   */
  content: string;

  /**
   * The timestamp the item was created
   */
  createdAt: any;

  /**
   * The userId that created the item
   */
  createdBy: string | null;

  /**
   * The user that created the item
   */
  createdByUser: IUser | null;

  /**
   * the replies to this threadable item
   */
  replies: Array<Threadable>;

  /**
   * The FK of the discussion this task was created in. Null if task was not created in a discussion
   */
  discussionId: string | null;

  /**
   * the parent, if this threadable is a reply, else null
   */
  threadParentId: string | null;

  /**
   * the order of this threadable, relative to threadParentId
   */
  threadSortOrder: number | null;

  /**
   * The timestamp the item was updated
   */
  updatedAt: any;

  /**
   * The foreign key for the meeting the poll was created in
   */
  meetingId: string | null;

  /**
   * The id of the team (indexed)
   */
  teamId: string;

  /**
   * The team this poll belongs to
   */
  team: ITeam;

  /**
   * Poll title
   */
  title: string;

  /**
   * A list of all the poll options related to this poll
   */
  options: Array<IPollOption>;
}

/**
 * Poll options for a given poll
 */
export interface IPollOption {
  __typename: 'PollOption';

  /**
   * Poll option id in a format of `pollOption:idGeneratedByDatabase`
   */
  id: string;

  /**
   * The timestamp the item was created
   */
  createdAt: any;

  /**
   * The timestamp the item was updated
   */
  updatedAt: any;

  /**
   * The foreign key of the poll this option belongs to in a format of `poll:idGeneratedByDatabase`
   */
  pollId: string;

  /**
   * The poll this option belongs to
   */
  poll: IPoll;

  /**
   * The ids of the users who voted for this option
   */
  voteUserIds: Array<string>;

  /**
   * Poll option title
   */
  title: string;
}

export interface ICreatePollInput {
  /**
   * Foreign key for the discussion this was created in
   */
  discussionId: string;

  /**
   * The order of this threadable
   */
  threadSortOrder: number;

  /**
   * Poll question
   */
  title: string;

  /**
   * All the poll voting options
   */
  options: Array<IPollOptionInput>;
}

export interface IPollOptionInput {
  /**
   * Poll option title
   */
  title: string;
}

export interface ISubscription {
  __typename: 'Subscription';
  meetingSubscription: MeetingSubscriptionPayload;
  notificationSubscription: NotificationSubscriptionPayload;
  organizationSubscription: OrganizationSubscriptionPayload;
  taskSubscription: TaskSubscriptionPayload;
  teamSubscription: TeamSubscriptionPayload;
}

export interface IMeetingSubscriptionOnSubscriptionArguments {
  meetingId: string;
}

export type MeetingSubscriptionPayload =
  | IAddCommentSuccess
  | IAddReactjiToReflectionSuccess
  | IAddReactjiToReactableSuccess
  | IAutoGroupReflectionsPayload
  | ICreateReflectionPayload
  | IDeleteCommentSuccess
  | IDragDiscussionTopicPayload
  | IDragEstimatingTaskSuccess
  | IEditCommentingSuccess
  | IEditReflectionPayload
  | IEndDraggingReflectionPayload
  | IFlagReadyToAdvanceSuccess
  | INewMeetingCheckInPayload
  | IPromoteNewMeetingFacilitatorPayload
  | IRemoveReflectionPayload
  | IResetRetroMeetingToGroupStagePayload
  | ISetPhaseFocusPayload
  | ISetStageTimerPayload
  | IStartDraggingReflectionPayload
  | IUpdateCommentContentSuccess
  | IUpdateDragLocationPayload
  | IUpdateNewCheckInQuestionPayload
  | IUpdateReflectionContentPayload
  | IUpdateReflectionGroupTitlePayload
  | IUpdateRetroMaxVotesSuccess
  | IUpdatePokerScopeSuccess
  | IVoteForReflectionGroupPayload
  | IVoteForPokerStorySuccess
  | IPokerRevealVotesSuccess
  | IPokerResetDimensionSuccess
  | IPokerAnnounceDeckHoverSuccess
  | IPokerSetFinalScoreSuccess
  | IJoinMeetingSuccess
  | ISetPokerSpectateSuccess
  | ISetTaskEstimateSuccess;

export interface IAddReactjiToReflectionSuccess {
  __typename: 'AddReactjiToReflectionSuccess';

  /**
   * the reflection with the updated list of reactjis
   */
  reflection: IRetroReflection;
}

export interface IUpdateDragLocationPayload {
  __typename: 'UpdateDragLocationPayload';

  /**
   * The drag as sent from the team member
   */
  remoteDrag: IRemoteReflectionDrag | null;
  userId: string;
}

export type NotificationSubscriptionPayload =
  | IAcceptTeamInvitationPayload
  | IAddFeatureFlagPayload
  | IAddNewFeaturePayload
  | IAddOrgPayload
  | IAddTeamPayload
  | IArchiveTimelineEventSuccess
  | ISetNotificationStatusPayload
  | ICreateTaskPayload
  | IDeleteTaskPayload
  | IDisconnectSocketPayload
  | IEndCheckInSuccess
  | IEndNewMeetingPayload
  | IEndRetrospectiveSuccess
  | IInvalidateSessionsPayload
  | IInviteToTeamPayload
  | IMeetingStageTimeLimitPayload
  | IRemoveOrgUserPayload
  | IStripeFailPaymentPayload
  | IPersistJiraSearchQuerySuccess
  | IUser
  | IAuthTokenPayload
  | IPersistGitHubSearchQuerySuccess;

export interface IAddNewFeaturePayload {
  __typename: 'AddNewFeaturePayload';

  /**
   * the new feature broadcast
   */
  newFeature: INewFeatureBroadcast | null;
}

export interface IDisconnectSocketPayload {
  __typename: 'DisconnectSocketPayload';

  /**
   * The user that disconnected
   */
  user: IUser | null;
}

export interface IEndNewMeetingPayload {
  __typename: 'EndNewMeetingPayload';
  error: IStandardMutationError | null;

  /**
   * true if the meeting was killed (ended before reaching last stage)
   */
  isKill: boolean | null;
  team: ITeam | null;
  meeting: NewMeeting | null;

  /**
   * The ID of the suggestion to try a retro meeting, if tried
   */
  removedSuggestedActionId: string | null;
  removedTaskIds: Array<string> | null;

  /**
   * An event that is important to the viewer, e.g. an ended meeting
   */
  timelineEvent: TimelineEvent | null;
  updatedTaskIds: Array<string> | null;

  /**
   * Any tasks that were updated during the meeting
   */
  updatedTasks: Array<ITask> | null;
}

export interface IMeetingStageTimeLimitPayload {
  __typename: 'MeetingStageTimeLimitPayload';

  /**
   * The new notification that was just created
   */
  notification: INotificationMeetingStageTimeLimitEnd;
}

/**
 * A notification sent to a facilitator that the stage time limit has ended
 */
export interface INotificationMeetingStageTimeLimitEnd {
  __typename: 'NotificationMeetingStageTimeLimitEnd';

  /**
   * A shortid for the notification
   */
  id: string;

  /**
   * UNREAD if new, READ if viewer has seen it, CLICKED if viewed clicked it
   */
  status: NotificationStatusEnum;

  /**
   * The datetime to activate the notification & send it to the client
   */
  createdAt: any;
  type: NotificationEnum;

  /**
   * *The userId that should see this notification
   */
  userId: string;

  /**
   * FK
   */
  meetingId: string;

  /**
   * The meeting that had the time limit expire
   */
  meeting: NewMeeting;
}

export interface IStripeFailPaymentPayload {
  __typename: 'StripeFailPaymentPayload';
  error: IStandardMutationError | null;
  organization: IOrganization | null;

  /**
   * The notification to a billing leader stating the payment was rejected
   */
  notification: INotifyPaymentRejected;
}

/**
 * A notification sent to a user when their payment has been rejected
 */
export interface INotifyPaymentRejected {
  __typename: 'NotifyPaymentRejected';
  organization: IOrganization;

  /**
   * A shortid for the notification
   */
  id: string;

  /**
   * UNREAD if new, READ if viewer has seen it, CLICKED if viewed clicked it
   */
  status: NotificationStatusEnum;

  /**
   * The datetime to activate the notification & send it to the client
   */
  createdAt: any;
  type: NotificationEnum;

  /**
   * *The userId that should see this notification
   */
  userId: string;
}

/**
 * An auth token provided by Parabol to the client
 */
export interface IAuthTokenPayload {
  __typename: 'AuthTokenPayload';

  /**
   * The encoded JWT
   */
  id: string;
}

export type OrganizationSubscriptionPayload =
  | IAddOrgPayload
  | IArchiveOrganizationPayload
  | IDowngradeToPersonalPayload
  | IPayLaterPayload
  | IRemoveOrgUserPayload
  | ISetOrgUserRoleAddedPayload
  | ISetOrgUserRoleRemovedPayload
  | IUpdateCreditCardPayload
  | IUpdateOrgPayload
  | IUpgradeToProPayload
  | IUpdateTemplateScopeSuccess;

export interface ISetOrgUserRoleAddedPayload {
  __typename: 'SetOrgUserRoleAddedPayload';
  error: IStandardMutationError | null;
  organization: IOrganization | null;
  updatedOrgMember: IOrganizationUser | null;

  /**
   * If promoted, notify them and give them all other admin notifications
   */
  notificationsAdded: Array<Notification | null> | null;
}

export interface ISetOrgUserRoleRemovedPayload {
  __typename: 'SetOrgUserRoleRemovedPayload';
  error: IStandardMutationError | null;
  organization: IOrganization | null;
  updatedOrgMember: IOrganizationUser | null;
}

export type TaskSubscriptionPayload =
  | IChangeTaskTeamPayload
  | ICreateGitHubTaskIntegrationPayload
  | ICreateJiraTaskIntegrationPayload
  | ICreateTaskPayload
  | IDeleteTaskPayload
  | IEditTaskPayload
  | IRemoveOrgUserPayload
  | IRemoveTeamMemberPayload
  | IUpdateTaskPayload
  | IUpdateTaskDueDatePayload;

export type TeamSubscriptionPayload =
  | IAcceptTeamInvitationPayload
  | IAddAgendaItemPayload
  | IAddAtlassianAuthPayload
  | IAddGitHubAuthPayload
  | IAddSlackAuthPayload
  | IAddTeamPayload
  | IArchiveTeamPayload
  | IDenyPushInvitationPayload
  | IDowngradeToPersonalPayload
  | IEndCheckInSuccess
  | IEndNewMeetingPayload
  | IEndRetrospectiveSuccess
  | IEndSprintPokerSuccess
  | INavigateMeetingPayload
  | IPushInvitationPayload
  | IPromoteToTeamLeadPayload
  | IRemoveAgendaItemPayload
  | IRemoveOrgUserPayload
  | IRemoveTeamMemberPayload
  | IRenameMeetingSuccess
  | ISelectTemplatePayload
  | IStartCheckInSuccess
  | IStartNewMeetingPayload
  | IStartRetrospectiveSuccess
  | IStartSprintPokerSuccess
  | IUpdateAgendaItemPayload
  | IUpdateCreditCardPayload
  | IUpdateTeamNamePayload
  | IUpgradeToProPayload
  | IAddReflectTemplatePayload
  | IAddPokerTemplatePayload
  | IAddReflectTemplatePromptPayload
  | IAddPokerTemplateDimensionPayload
  | IAddPokerTemplateScalePayload
  | IAddPokerTemplateScaleValuePayload
  | IMoveReflectTemplatePromptPayload
  | IMovePokerTemplateDimensionPayload
  | IReflectTemplatePromptUpdateDescriptionPayload
  | IPokerTemplateDimensionUpdateDescriptionPayload
  | IReflectTemplatePromptUpdateGroupColorPayload
  | IRemoveAtlassianAuthPayload
  | IRemoveGitHubAuthPayload
  | IRemoveSlackAuthPayload
  | IRemoveReflectTemplatePayload
  | IRemovePokerTemplatePayload
  | IRemoveReflectTemplatePromptPayload
  | IRemovePokerTemplateDimensionPayload
  | IRemovePokerTemplateScalePayload
  | IRenameMeetingTemplatePayload
  | IRenamePokerTemplatePayload
  | IRenameReflectTemplatePromptPayload
  | IRenamePokerTemplateDimensionPayload
  | IRenamePokerTemplateScalePayload
  | IRemovePokerTemplateScaleValuePayload
  | ISetCheckInEnabledPayload
  | ISetSlackNotificationPayload
  | IUpdatePokerTemplateDimensionScalePayload
  | IUpdatePokerTemplateScaleValuePayload
  | IUpdateUserProfilePayload
  | IPersistJiraSearchQuerySuccess
  | IMovePokerTemplateScaleValueSuccess
  | IUpdateJiraDimensionFieldSuccess
  | ISetDefaultSlackChannelSuccess
  | ISetAppLocationSuccess;

export interface IStartNewMeetingPayload {
  __typename: 'StartNewMeetingPayload';
  error: IStandardMutationError | null;
  team: ITeam | null;
  meetingId: string | null;
  meeting: NewMeeting | null;
}

export interface IRenamePokerTemplatePayload {
  __typename: 'RenamePokerTemplatePayload';
  error: IStandardMutationError | null;
  pokerTemplate: IPokerTemplate | null;
}

export interface IXGitHubErrorLocation {
  __typename: '_xGitHubErrorLocation';
  line: number;
  column: number;
}

export interface IXGitHubError {
  __typename: '_xGitHubError';
  message: string;
  locations: Array<IXGitHubErrorLocation> | null;
  path: Array<string> | null;
}

export interface IXGitHubApi {
  __typename: '_xGitHubApi';
  errors: Array<IXGitHubError> | null;
  query: IXGitHubQuery | null;
  mutation: IXGitHubMutation | null;
}

// tslint:enable
