// AUTOMATICALLY GENERATED FILE - DO NOT EDIT

// tslint:disable

export interface IGraphQLResponseRoot {
  data?: IQuery | IMutation | ISubscription;
  errors?: Array<IGraphQLResponseError>;
}

export interface IGraphQLResponseError {
  /** Required for all errors */
  message: string;
  locations?: Array<IGraphQLResponseErrorLocation>;
  /** 7.2.2 says 'GraphQL servers may provide additional entries to error' */
  [propName: string]: any;
}

export interface IGraphQLResponseErrorLocation {
  line: number;
  column: number;
}

/**
 * Autogenerated input type of AcceptEnterpriseAdministratorInvitation
 */
export interface IXGitHubAcceptEnterpriseAdministratorInvitationInput {
  /**
   * The id of the invitation being accepted
   */
  invitationId: string;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of AcceptEnterpriseAdministratorInvitation
 */
export interface IXGitHubAcceptEnterpriseAdministratorInvitationPayload {
  __typename: '_xGitHubAcceptEnterpriseAdministratorInvitationPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The invitation that was accepted.
   */
  invitation: IXGitHubEnterpriseAdministratorInvitation | null;

  /**
   * A message confirming the result of accepting an administrator invitation.
   */
  message: string | null;
}

/**
 * Autogenerated input type of AcceptTopicSuggestion
 */
export interface IXGitHubAcceptTopicSuggestionInput {
  /**
   * The Node ID of the repository.
   */
  repositoryId: string;

  /**
   * The name of the suggested topic.
   */
  name: string;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of AcceptTopicSuggestion
 */
export interface IXGitHubAcceptTopicSuggestionPayload {
  __typename: '_xGitHubAcceptTopicSuggestionPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The accepted topic.
   */
  topic: IXGitHubTopic | null;
}

/**
 * Represents an object which can take actions on GitHub. Typically a User or Bot.
 */
export type _xGitHubActor =
  | IXGitHubBot
  | IXGitHubEnterpriseUserAccount
  | IXGitHubMannequin
  | IXGitHubOrganization
  | IXGitHubUser;

/**
 * Represents an object which can take actions on GitHub. Typically a User or Bot.
 */
export interface IXGitHubActor {
  __typename: '_xGitHubActor';

  /**
   * A URL pointing to the actor's public avatar.
   */
  avatarUrl: any;

  /**
   * The username of the actor.
   */
  login: string;

  /**
   * The HTTP path for this actor.
   */
  resourcePath: any;

  /**
   * The HTTP URL for this actor.
   */
  url: any;
}

export interface IAvatarUrlOnXGitHubActorArguments {
  /**
   * The size of the resulting square image.
   */
  size?: number | null;
}

/**
 * Location information for an actor
 */
export interface IXGitHubActorLocation {
  __typename: '_xGitHubActorLocation';

  /**
   * City
   */
  city: string | null;

  /**
   * Country name
   */
  country: string | null;

  /**
   * Country code
   */
  countryCode: string | null;

  /**
   * Region name
   */
  region: string | null;

  /**
   * Region or state code
   */
  regionCode: string | null;
}

/**
 * Autogenerated input type of AddAssigneesToAssignable
 */
export interface IXGitHubAddAssigneesToAssignableInput {
  /**
   * The id of the assignable object to add assignees to.
   */
  assignableId: string;

  /**
   * The id of users to add as assignees.
   */
  assigneeIds: Array<string>;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of AddAssigneesToAssignable
 */
export interface IXGitHubAddAssigneesToAssignablePayload {
  __typename: '_xGitHubAddAssigneesToAssignablePayload';

  /**
   * The item that was assigned.
   */
  assignable: _xGitHubAssignable | null;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;
}

/**
 * Autogenerated input type of AddComment
 */
export interface IXGitHubAddCommentInput {
  /**
   * The Node ID of the subject to modify.
   */
  subjectId: string;

  /**
   * The contents of the comment.
   */
  body: string;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of AddComment
 */
export interface IXGitHubAddCommentPayload {
  __typename: '_xGitHubAddCommentPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The edge from the subject's comment connection.
   */
  commentEdge: IXGitHubIssueCommentEdge | null;

  /**
   * The subject
   */
  subject: _xGitHubNode | null;

  /**
   * The edge from the subject's timeline connection.
   */
  timelineEdge: IXGitHubIssueTimelineItemEdge | null;
}

/**
 * Autogenerated input type of AddDiscussionComment
 */
export interface IXGitHubAddDiscussionCommentInput {
  /**
   * The Node ID of the discussion to comment on.
   */
  discussionId: string;

  /**
   * The Node ID of the discussion comment within this discussion to reply to.
   */
  replyToId?: string | null;

  /**
   * The contents of the comment.
   */
  body: string;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of AddDiscussionComment
 */
export interface IXGitHubAddDiscussionCommentPayload {
  __typename: '_xGitHubAddDiscussionCommentPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The newly created discussion comment.
   */
  comment: IXGitHubDiscussionComment | null;
}

/**
 * Autogenerated input type of AddEnterpriseSupportEntitlement
 */
export interface IXGitHubAddEnterpriseSupportEntitlementInput {
  /**
   * The ID of the Enterprise which the admin belongs to.
   */
  enterpriseId: string;

  /**
   * The login of a member who will receive the support entitlement.
   */
  login: string;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of AddEnterpriseSupportEntitlement
 */
export interface IXGitHubAddEnterpriseSupportEntitlementPayload {
  __typename: '_xGitHubAddEnterpriseSupportEntitlementPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * A message confirming the result of adding the support entitlement.
   */
  message: string | null;
}

/**
 * Autogenerated input type of AddLabelsToLabelable
 */
export interface IXGitHubAddLabelsToLabelableInput {
  /**
   * The id of the labelable object to add labels to.
   */
  labelableId: string;

  /**
   * The ids of the labels to add.
   */
  labelIds: Array<string>;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of AddLabelsToLabelable
 */
export interface IXGitHubAddLabelsToLabelablePayload {
  __typename: '_xGitHubAddLabelsToLabelablePayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The item that was labeled.
   */
  labelable: _xGitHubLabelable | null;
}

/**
 * Autogenerated input type of AddProjectCard
 */
export interface IXGitHubAddProjectCardInput {
  /**
   * The Node ID of the ProjectColumn.
   */
  projectColumnId: string;

  /**
   * The content of the card. Must be a member of the ProjectCardItem union
   */
  contentId?: string | null;

  /**
   * The note on the card.
   */
  note?: string | null;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of AddProjectCard
 */
export interface IXGitHubAddProjectCardPayload {
  __typename: '_xGitHubAddProjectCardPayload';

  /**
   * The edge from the ProjectColumn's card connection.
   */
  cardEdge: IXGitHubProjectCardEdge | null;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The ProjectColumn
   */
  projectColumn: IXGitHubProjectColumn | null;
}

/**
 * Autogenerated input type of AddProjectColumn
 */
export interface IXGitHubAddProjectColumnInput {
  /**
   * The Node ID of the project.
   */
  projectId: string;

  /**
   * The name of the column.
   */
  name: string;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of AddProjectColumn
 */
export interface IXGitHubAddProjectColumnPayload {
  __typename: '_xGitHubAddProjectColumnPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The edge from the project's column connection.
   */
  columnEdge: IXGitHubProjectColumnEdge | null;

  /**
   * The project
   */
  project: IXGitHubProject | null;
}

/**
 * Autogenerated input type of AddPullRequestReviewComment
 */
export interface IXGitHubAddPullRequestReviewCommentInput {
  /**
   * The node ID of the pull request reviewing
   */
  pullRequestId?: string | null;

  /**
   * The Node ID of the review to modify.
   */
  pullRequestReviewId?: string | null;

  /**
   * The SHA of the commit to comment on.
   */
  commitOID?: any | null;

  /**
   * The text of the comment.
   */
  body: string;

  /**
   * The relative path of the file to comment on.
   */
  path?: string | null;

  /**
   * The line index in the diff to comment on.
   */
  position?: number | null;

  /**
   * The comment id to reply to.
   */
  inReplyTo?: string | null;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of AddPullRequestReviewComment
 */
export interface IXGitHubAddPullRequestReviewCommentPayload {
  __typename: '_xGitHubAddPullRequestReviewCommentPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The newly created comment.
   */
  comment: IXGitHubPullRequestReviewComment | null;

  /**
   * The edge from the review's comment connection.
   */
  commentEdge: IXGitHubPullRequestReviewCommentEdge | null;
}

/**
 * Autogenerated input type of AddPullRequestReview
 */
export interface IXGitHubAddPullRequestReviewInput {
  /**
   * The Node ID of the pull request to modify.
   */
  pullRequestId: string;

  /**
   * The commit OID the review pertains to.
   */
  commitOID?: any | null;

  /**
   * The contents of the review body comment.
   */
  body?: string | null;

  /**
   * The event to perform on the pull request review.
   */
  event?: XGitHubPullRequestReviewEvent | null;

  /**
   * The review line comments.
   */
  comments?: Array<IXGitHubDraftPullRequestReviewComment | null> | null;

  /**
   * The review line comment threads.
   */
  threads?: Array<IXGitHubDraftPullRequestReviewThread | null> | null;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of AddPullRequestReview
 */
export interface IXGitHubAddPullRequestReviewPayload {
  __typename: '_xGitHubAddPullRequestReviewPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The newly created pull request review.
   */
  pullRequestReview: IXGitHubPullRequestReview | null;

  /**
   * The edge from the pull request's review connection.
   */
  reviewEdge: IXGitHubPullRequestReviewEdge | null;
}

/**
 * Autogenerated input type of AddPullRequestReviewThread
 */
export interface IXGitHubAddPullRequestReviewThreadInput {
  /**
   * Path to the file being commented on.
   */
  path: string;

  /**
   * Body of the thread's first comment.
   */
  body: string;

  /**
   * The node ID of the pull request reviewing
   */
  pullRequestId?: string | null;

  /**
   * The Node ID of the review to modify.
   */
  pullRequestReviewId?: string | null;

  /**
   * The line of the blob to which the thread refers. The end of the line range for multi-line comments.
   */
  line: number;

  /**
   * The side of the diff on which the line resides. For multi-line comments, this is the side for the end of the line range.
   * @default "RIGHT"
   */
  side?: XGitHubDiffSide | null;

  /**
   * The first line of the range to which the comment refers.
   */
  startLine?: number | null;

  /**
   * The side of the diff on which the start line resides.
   * @default "RIGHT"
   */
  startSide?: XGitHubDiffSide | null;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of AddPullRequestReviewThread
 */
export interface IXGitHubAddPullRequestReviewThreadPayload {
  __typename: '_xGitHubAddPullRequestReviewThreadPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The newly created thread.
   */
  thread: IXGitHubPullRequestReviewThread | null;
}

/**
 * Autogenerated input type of AddReaction
 */
export interface IXGitHubAddReactionInput {
  /**
   * The Node ID of the subject to modify.
   */
  subjectId: string;

  /**
   * The name of the emoji to react with.
   */
  content: XGitHubReactionContent;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of AddReaction
 */
export interface IXGitHubAddReactionPayload {
  __typename: '_xGitHubAddReactionPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The reaction object.
   */
  reaction: IXGitHubReaction | null;

  /**
   * The reactable subject.
   */
  subject: _xGitHubReactable | null;
}

/**
 * Autogenerated input type of AddStar
 */
export interface IXGitHubAddStarInput {
  /**
   * The Starrable ID to star.
   */
  starrableId: string;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of AddStar
 */
export interface IXGitHubAddStarPayload {
  __typename: '_xGitHubAddStarPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The starrable.
   */
  starrable: _xGitHubStarrable | null;
}

/**
 * Autogenerated input type of AddUpvote
 */
export interface IXGitHubAddUpvoteInput {
  /**
   * The Node ID of the discussion or comment to upvote.
   */
  subjectId: string;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of AddUpvote
 */
export interface IXGitHubAddUpvotePayload {
  __typename: '_xGitHubAddUpvotePayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The votable subject.
   */
  subject: _xGitHubVotable | null;
}

/**
 * Autogenerated input type of AddVerifiableDomain
 */
export interface IXGitHubAddVerifiableDomainInput {
  /**
   * The ID of the owner to add the domain to
   */
  ownerId: string;

  /**
   * The URL of the domain
   */
  domain: any;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of AddVerifiableDomain
 */
export interface IXGitHubAddVerifiableDomainPayload {
  __typename: '_xGitHubAddVerifiableDomainPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The verifiable domain that was added.
   */
  domain: IXGitHubVerifiableDomain | null;
}

/**
 * Represents a 'added_to_project' event on a given issue or pull request.
 */
export interface IXGitHubAddedToProjectEvent {
  __typename: '_xGitHubAddedToProjectEvent';

  /**
   * Identifies the actor who performed the event.
   */
  actor: _xGitHubActor | null;

  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: any;

  /**
   * Identifies the primary key from the database.
   */
  databaseId: number | null;
  id: string;
}

/**
 * A GitHub App.
 */
export interface IXGitHubApp {
  __typename: '_xGitHubApp';

  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: any;

  /**
   * Identifies the primary key from the database.
   */
  databaseId: number | null;

  /**
   * The description of the app.
   */
  description: string | null;
  id: string;

  /**
   * The IP addresses of the app.
   */
  ipAllowListEntries: IXGitHubIpAllowListEntryConnection;

  /**
   * The hex color code, without the leading '#', for the logo background.
   */
  logoBackgroundColor: string;

  /**
   * A URL pointing to the app's logo.
   */
  logoUrl: any;

  /**
   * The name of the app.
   */
  name: string;

  /**
   * A slug based on the name of the app for use in URLs.
   */
  slug: string;

  /**
   * Identifies the date and time when the object was last updated.
   */
  updatedAt: any;

  /**
   * The URL to the app's homepage.
   */
  url: any;
}

export interface IIpAllowListEntriesOnXGitHubAppArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Ordering options for IP allow list entries returned.
   * @default {"field":"ALLOW_LIST_VALUE","direction":"ASC"}
   */
  orderBy?: IXGitHubIpAllowListEntryOrder | null;
}

export interface ILogoUrlOnXGitHubAppArguments {
  /**
   * The size of the resulting image.
   */
  size?: number | null;
}

/**
 * Autogenerated input type of ApproveDeployments
 */
export interface IXGitHubApproveDeploymentsInput {
  /**
   * The node ID of the workflow run containing the pending deployments.
   */
  workflowRunId: string;

  /**
   * The ids of environments to reject deployments
   */
  environmentIds: Array<string>;

  /**
   * Optional comment for approving deployments
   * @default ""
   */
  comment?: string | null;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of ApproveDeployments
 */
export interface IXGitHubApproveDeploymentsPayload {
  __typename: '_xGitHubApproveDeploymentsPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The affected deployments.
   */
  deployments: Array<IXGitHubDeployment> | null;
}

/**
 * Autogenerated input type of ApproveVerifiableDomain
 */
export interface IXGitHubApproveVerifiableDomainInput {
  /**
   * The ID of the verifiable domain to approve.
   */
  id: string;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of ApproveVerifiableDomain
 */
export interface IXGitHubApproveVerifiableDomainPayload {
  __typename: '_xGitHubApproveVerifiableDomainPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The verifiable domain that was approved.
   */
  domain: IXGitHubVerifiableDomain | null;
}

/**
 * Autogenerated input type of ArchiveRepository
 */
export interface IXGitHubArchiveRepositoryInput {
  /**
   * The ID of the repository to mark as archived.
   */
  repositoryId: string;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of ArchiveRepository
 */
export interface IXGitHubArchiveRepositoryPayload {
  __typename: '_xGitHubArchiveRepositoryPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The repository that was marked as archived.
   */
  repository: IXGitHubRepository | null;
}

/**
 * An object that can have users assigned to it.
 */
export type _xGitHubAssignable = IXGitHubIssue | IXGitHubPullRequest;

/**
 * An object that can have users assigned to it.
 */
export interface IXGitHubAssignable {
  __typename: '_xGitHubAssignable';

  /**
   * A list of Users assigned to this object.
   */
  assignees: IXGitHubUserConnection;
}

export interface IAssigneesOnXGitHubAssignableArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

/**
 * Represents an 'assigned' event on any assignable object.
 */
export interface IXGitHubAssignedEvent {
  __typename: '_xGitHubAssignedEvent';

  /**
   * Identifies the actor who performed the event.
   */
  actor: _xGitHubActor | null;

  /**
   * Identifies the assignable associated with the event.
   */
  assignable: _xGitHubAssignable;

  /**
   * Identifies the user or mannequin that was assigned.
   */
  assignee: _xGitHubAssignee | null;

  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: any;
  id: string;

  /**
   * Identifies the user who was assigned.
   * @deprecated "Assignees can now be mannequins. Use the `assignee` field instead. Removal on 2020-01-01 UTC."
   */
  user: IXGitHubUser | null;
}

/**
 * Types that can be assigned to issues.
 */
export type _xGitHubAssignee =
  | IXGitHubBot
  | IXGitHubMannequin
  | IXGitHubOrganization
  | IXGitHubUser;

/**
 * An entry in the audit log.
 */
export type _xGitHubAuditEntry =
  | IXGitHubMembersCanDeleteReposClearAuditEntry
  | IXGitHubMembersCanDeleteReposDisableAuditEntry
  | IXGitHubMembersCanDeleteReposEnableAuditEntry
  | IXGitHubOauthApplicationCreateAuditEntry
  | IXGitHubOrgAddBillingManagerAuditEntry
  | IXGitHubOrgAddMemberAuditEntry
  | IXGitHubOrgBlockUserAuditEntry
  | IXGitHubOrgConfigDisableCollaboratorsOnlyAuditEntry
  | IXGitHubOrgConfigEnableCollaboratorsOnlyAuditEntry
  | IXGitHubOrgCreateAuditEntry
  | IXGitHubOrgDisableOauthAppRestrictionsAuditEntry
  | IXGitHubOrgDisableSamlAuditEntry
  | IXGitHubOrgDisableTwoFactorRequirementAuditEntry
  | IXGitHubOrgEnableOauthAppRestrictionsAuditEntry
  | IXGitHubOrgEnableSamlAuditEntry
  | IXGitHubOrgEnableTwoFactorRequirementAuditEntry
  | IXGitHubOrgInviteMemberAuditEntry
  | IXGitHubOrgInviteToBusinessAuditEntry
  | IXGitHubOrgOauthAppAccessApprovedAuditEntry
  | IXGitHubOrgOauthAppAccessDeniedAuditEntry
  | IXGitHubOrgOauthAppAccessRequestedAuditEntry
  | IXGitHubOrgRemoveBillingManagerAuditEntry
  | IXGitHubOrgRemoveMemberAuditEntry
  | IXGitHubOrgRemoveOutsideCollaboratorAuditEntry
  | IXGitHubOrgRestoreMemberAuditEntry
  | IXGitHubOrgUnblockUserAuditEntry
  | IXGitHubOrgUpdateDefaultRepositoryPermissionAuditEntry
  | IXGitHubOrgUpdateMemberAuditEntry
  | IXGitHubOrgUpdateMemberRepositoryCreationPermissionAuditEntry
  | IXGitHubOrgUpdateMemberRepositoryInvitationPermissionAuditEntry
  | IXGitHubPrivateRepositoryForkingDisableAuditEntry
  | IXGitHubPrivateRepositoryForkingEnableAuditEntry
  | IXGitHubRepoAccessAuditEntry
  | IXGitHubRepoAddMemberAuditEntry
  | IXGitHubRepoAddTopicAuditEntry
  | IXGitHubRepoArchivedAuditEntry
  | IXGitHubRepoChangeMergeSettingAuditEntry
  | IXGitHubRepoConfigDisableAnonymousGitAccessAuditEntry
  | IXGitHubRepoConfigDisableCollaboratorsOnlyAuditEntry
  | IXGitHubRepoConfigDisableContributorsOnlyAuditEntry
  | IXGitHubRepoConfigDisableSockpuppetDisallowedAuditEntry
  | IXGitHubRepoConfigEnableAnonymousGitAccessAuditEntry
  | IXGitHubRepoConfigEnableCollaboratorsOnlyAuditEntry
  | IXGitHubRepoConfigEnableContributorsOnlyAuditEntry
  | IXGitHubRepoConfigEnableSockpuppetDisallowedAuditEntry
  | IXGitHubRepoConfigLockAnonymousGitAccessAuditEntry
  | IXGitHubRepoConfigUnlockAnonymousGitAccessAuditEntry
  | IXGitHubRepoCreateAuditEntry
  | IXGitHubRepoDestroyAuditEntry
  | IXGitHubRepoRemoveMemberAuditEntry
  | IXGitHubRepoRemoveTopicAuditEntry
  | IXGitHubRepositoryVisibilityChangeDisableAuditEntry
  | IXGitHubRepositoryVisibilityChangeEnableAuditEntry
  | IXGitHubTeamAddMemberAuditEntry
  | IXGitHubTeamAddRepositoryAuditEntry
  | IXGitHubTeamChangeParentTeamAuditEntry
  | IXGitHubTeamRemoveMemberAuditEntry
  | IXGitHubTeamRemoveRepositoryAuditEntry;

/**
 * An entry in the audit log.
 */
export interface IXGitHubAuditEntry {
  __typename: '_xGitHubAuditEntry';

  /**
   * The action name
   */
  action: string;

  /**
   * The user who initiated the action
   */
  actor: _xGitHubAuditEntryActor | null;

  /**
   * The IP address of the actor
   */
  actorIp: string | null;

  /**
   * A readable representation of the actor's location
   */
  actorLocation: IXGitHubActorLocation | null;

  /**
   * The username of the user who initiated the action
   */
  actorLogin: string | null;

  /**
   * The HTTP path for the actor.
   */
  actorResourcePath: any | null;

  /**
   * The HTTP URL for the actor.
   */
  actorUrl: any | null;

  /**
   * The time the action was initiated
   */
  createdAt: any;

  /**
   * The corresponding operation type for the action
   */
  operationType: XGitHubOperationType | null;

  /**
   * The user affected by the action
   */
  user: IXGitHubUser | null;

  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin: string | null;

  /**
   * The HTTP path for the user.
   */
  userResourcePath: any | null;

  /**
   * The HTTP URL for the user.
   */
  userUrl: any | null;
}

/**
 * Types that can initiate an audit log event.
 */
export type _xGitHubAuditEntryActor =
  | IXGitHubBot
  | IXGitHubOrganization
  | IXGitHubUser;

/**
 * Ordering options for Audit Log connections.
 */
export interface IXGitHubAuditLogOrder {
  /**
   * The field to order Audit Logs by.
   */
  field?: XGitHubAuditLogOrderField | null;

  /**
   * The ordering direction.
   */
  direction?: XGitHubOrderDirection | null;
}

/**
 * Properties by which Audit Log connections can be ordered.
 */
export const enum XGitHubAuditLogOrderField {
  /**
   * Order audit log entries by timestamp
   */
  CREATED_AT = 'CREATED_AT',
}

/**
 * Represents a 'auto_merge_disabled' event on a given pull request.
 */
export interface IXGitHubAutoMergeDisabledEvent {
  __typename: '_xGitHubAutoMergeDisabledEvent';

  /**
   * Identifies the actor who performed the event.
   */
  actor: _xGitHubActor | null;

  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: any;

  /**
   * The user who disabled auto-merge for this Pull Request
   */
  disabler: IXGitHubUser | null;
  id: string;

  /**
   * PullRequest referenced by event
   */
  pullRequest: IXGitHubPullRequest | null;

  /**
   * The reason auto-merge was disabled
   */
  reason: string | null;

  /**
   * The reason_code relating to why auto-merge was disabled
   */
  reasonCode: string | null;
}

/**
 * Represents a 'auto_merge_enabled' event on a given pull request.
 */
export interface IXGitHubAutoMergeEnabledEvent {
  __typename: '_xGitHubAutoMergeEnabledEvent';

  /**
   * Identifies the actor who performed the event.
   */
  actor: _xGitHubActor | null;

  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: any;

  /**
   * The user who enabled auto-merge for this Pull Request
   */
  enabler: IXGitHubUser | null;
  id: string;

  /**
   * PullRequest referenced by event.
   */
  pullRequest: IXGitHubPullRequest | null;
}

/**
 * Represents an auto-merge request for a pull request
 */
export interface IXGitHubAutoMergeRequest {
  __typename: '_xGitHubAutoMergeRequest';

  /**
   * The email address of the author of this auto-merge request.
   */
  authorEmail: string | null;

  /**
   * The commit message of the auto-merge request.
   */
  commitBody: string | null;

  /**
   * The commit title of the auto-merge request.
   */
  commitHeadline: string | null;

  /**
   * When was this auto-merge request was enabled.
   */
  enabledAt: any | null;

  /**
   * The actor who created the auto-merge request.
   */
  enabledBy: _xGitHubActor | null;

  /**
   * The merge method of the auto-merge request.
   */
  mergeMethod: XGitHubPullRequestMergeMethod;

  /**
   * The pull request that this auto-merge request is set against.
   */
  pullRequest: IXGitHubPullRequest;
}

/**
 * Represents a 'auto_rebase_enabled' event on a given pull request.
 */
export interface IXGitHubAutoRebaseEnabledEvent {
  __typename: '_xGitHubAutoRebaseEnabledEvent';

  /**
   * Identifies the actor who performed the event.
   */
  actor: _xGitHubActor | null;

  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: any;

  /**
   * The user who enabled auto-merge (rebase) for this Pull Request
   */
  enabler: IXGitHubUser | null;
  id: string;

  /**
   * PullRequest referenced by event.
   */
  pullRequest: IXGitHubPullRequest | null;
}

/**
 * Represents a 'auto_squash_enabled' event on a given pull request.
 */
export interface IXGitHubAutoSquashEnabledEvent {
  __typename: '_xGitHubAutoSquashEnabledEvent';

  /**
   * Identifies the actor who performed the event.
   */
  actor: _xGitHubActor | null;

  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: any;

  /**
   * The user who enabled auto-merge (squash) for this Pull Request
   */
  enabler: IXGitHubUser | null;
  id: string;

  /**
   * PullRequest referenced by event.
   */
  pullRequest: IXGitHubPullRequest | null;
}

/**
 * Represents a 'automatic_base_change_failed' event on a given pull request.
 */
export interface IXGitHubAutomaticBaseChangeFailedEvent {
  __typename: '_xGitHubAutomaticBaseChangeFailedEvent';

  /**
   * Identifies the actor who performed the event.
   */
  actor: _xGitHubActor | null;

  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: any;
  id: string;

  /**
   * The new base for this PR
   */
  newBase: string;

  /**
   * The old base for this PR
   */
  oldBase: string;

  /**
   * PullRequest referenced by event.
   */
  pullRequest: IXGitHubPullRequest;
}

/**
 * Represents a 'automatic_base_change_succeeded' event on a given pull request.
 */
export interface IXGitHubAutomaticBaseChangeSucceededEvent {
  __typename: '_xGitHubAutomaticBaseChangeSucceededEvent';

  /**
   * Identifies the actor who performed the event.
   */
  actor: _xGitHubActor | null;

  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: any;
  id: string;

  /**
   * The new base for this PR
   */
  newBase: string;

  /**
   * The old base for this PR
   */
  oldBase: string;

  /**
   * PullRequest referenced by event.
   */
  pullRequest: IXGitHubPullRequest;
}

/**
 * Represents a 'base_ref_changed' event on a given issue or pull request.
 */
export interface IXGitHubBaseRefChangedEvent {
  __typename: '_xGitHubBaseRefChangedEvent';

  /**
   * Identifies the actor who performed the event.
   */
  actor: _xGitHubActor | null;

  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: any;

  /**
   * Identifies the name of the base ref for the pull request after it was changed.
   */
  currentRefName: string;

  /**
   * Identifies the primary key from the database.
   */
  databaseId: number | null;
  id: string;

  /**
   * Identifies the name of the base ref for the pull request before it was changed.
   */
  previousRefName: string;

  /**
   * PullRequest referenced by event.
   */
  pullRequest: IXGitHubPullRequest;
}

/**
 * Represents a 'base_ref_deleted' event on a given pull request.
 */
export interface IXGitHubBaseRefDeletedEvent {
  __typename: '_xGitHubBaseRefDeletedEvent';

  /**
   * Identifies the actor who performed the event.
   */
  actor: _xGitHubActor | null;

  /**
   * Identifies the name of the Ref associated with the `base_ref_deleted` event.
   */
  baseRefName: string | null;

  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: any;
  id: string;

  /**
   * PullRequest referenced by event.
   */
  pullRequest: IXGitHubPullRequest | null;
}

/**
 * Represents a 'base_ref_force_pushed' event on a given pull request.
 */
export interface IXGitHubBaseRefForcePushedEvent {
  __typename: '_xGitHubBaseRefForcePushedEvent';

  /**
   * Identifies the actor who performed the event.
   */
  actor: _xGitHubActor | null;

  /**
   * Identifies the after commit SHA for the 'base_ref_force_pushed' event.
   */
  afterCommit: IXGitHubCommit | null;

  /**
   * Identifies the before commit SHA for the 'base_ref_force_pushed' event.
   */
  beforeCommit: IXGitHubCommit | null;

  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: any;
  id: string;

  /**
   * PullRequest referenced by event.
   */
  pullRequest: IXGitHubPullRequest;

  /**
   * Identifies the fully qualified ref name for the 'base_ref_force_pushed' event.
   */
  ref: IXGitHubRef | null;
}

/**
 * Represents a Git blame.
 */
export interface IXGitHubBlame {
  __typename: '_xGitHubBlame';

  /**
   * The list of ranges from a Git blame.
   */
  ranges: Array<IXGitHubBlameRange>;
}

/**
 * Represents a range of information from a Git blame.
 */
export interface IXGitHubBlameRange {
  __typename: '_xGitHubBlameRange';

  /**
   * Identifies the recency of the change, from 1 (new) to 10 (old). This is calculated as a 2-quantile and determines the length of distance between the median age of all the changes in the file and the recency of the current range's change.
   */
  age: number;

  /**
   * Identifies the line author
   */
  commit: IXGitHubCommit;

  /**
   * The ending line for the range
   */
  endingLine: number;

  /**
   * The starting line for the range
   */
  startingLine: number;
}

/**
 * Represents a Git blob.
 */
export interface IXGitHubBlob {
  __typename: '_xGitHubBlob';

  /**
   * An abbreviated version of the Git object ID
   */
  abbreviatedOid: string;

  /**
   * Byte size of Blob object
   */
  byteSize: number;

  /**
   * The HTTP path for this Git object
   */
  commitResourcePath: any;

  /**
   * The HTTP URL for this Git object
   */
  commitUrl: any;
  id: string;

  /**
   * Indicates whether the Blob is binary or text. Returns null if unable to determine the encoding.
   */
  isBinary: boolean | null;

  /**
   * Indicates whether the contents is truncated
   */
  isTruncated: boolean;

  /**
   * The Git object ID
   */
  oid: any;

  /**
   * The Repository the Git object belongs to
   */
  repository: IXGitHubRepository;

  /**
   * UTF8 text data or null if the Blob is binary
   */
  text: string | null;
}

/**
 * A special type of user which takes actions on behalf of GitHub Apps.
 */
export interface IXGitHubBot {
  __typename: '_xGitHubBot';

  /**
   * A URL pointing to the GitHub App's public avatar.
   */
  avatarUrl: any;

  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: any;

  /**
   * Identifies the primary key from the database.
   */
  databaseId: number | null;
  id: string;

  /**
   * The username of the actor.
   */
  login: string;

  /**
   * The HTTP path for this bot
   */
  resourcePath: any;

  /**
   * Identifies the date and time when the object was last updated.
   */
  updatedAt: any;

  /**
   * The HTTP URL for this bot
   */
  url: any;
}

export interface IAvatarUrlOnXGitHubBotArguments {
  /**
   * The size of the resulting square image.
   */
  size?: number | null;
}

/**
 * A branch protection rule.
 */
export interface IXGitHubBranchProtectionRule {
  __typename: '_xGitHubBranchProtectionRule';

  /**
   * Can this branch be deleted.
   */
  allowsDeletions: boolean;

  /**
   * Are force pushes allowed on this branch.
   */
  allowsForcePushes: boolean;

  /**
   * A list of conflicts matching branches protection rule and other branch protection rules
   */
  branchProtectionRuleConflicts: IXGitHubBranchProtectionRuleConflictConnection;

  /**
   * The actor who created this branch protection rule.
   */
  creator: _xGitHubActor | null;

  /**
   * Identifies the primary key from the database.
   */
  databaseId: number | null;

  /**
   * Will new commits pushed to matching branches dismiss pull request review approvals.
   */
  dismissesStaleReviews: boolean;
  id: string;

  /**
   * Can admins overwrite branch protection.
   */
  isAdminEnforced: boolean;

  /**
   * Repository refs that are protected by this rule
   */
  matchingRefs: IXGitHubRefConnection;

  /**
   * Identifies the protection rule pattern.
   */
  pattern: string;

  /**
   * A list push allowances for this branch protection rule.
   */
  pushAllowances: IXGitHubPushAllowanceConnection;

  /**
   * The repository associated with this branch protection rule.
   */
  repository: IXGitHubRepository | null;

  /**
   * Number of approving reviews required to update matching branches.
   */
  requiredApprovingReviewCount: number | null;

  /**
   * List of required status check contexts that must pass for commits to be accepted to matching branches.
   */
  requiredStatusCheckContexts: Array<string | null> | null;

  /**
   * Are approving reviews required to update matching branches.
   */
  requiresApprovingReviews: boolean;

  /**
   * Are reviews from code owners required to update matching branches.
   */
  requiresCodeOwnerReviews: boolean;

  /**
   * Are commits required to be signed.
   */
  requiresCommitSignatures: boolean;

  /**
   * Are conversations required to be resolved before merging.
   */
  requiresConversationResolution: boolean;

  /**
   * Are merge commits prohibited from being pushed to this branch.
   */
  requiresLinearHistory: boolean;

  /**
   * Are status checks required to update matching branches.
   */
  requiresStatusChecks: boolean;

  /**
   * Are branches required to be up to date before merging.
   */
  requiresStrictStatusChecks: boolean;

  /**
   * Is pushing to matching branches restricted.
   */
  restrictsPushes: boolean;

  /**
   * Is dismissal of pull request reviews restricted.
   */
  restrictsReviewDismissals: boolean;

  /**
   * A list review dismissal allowances for this branch protection rule.
   */
  reviewDismissalAllowances: IXGitHubReviewDismissalAllowanceConnection;
}

export interface IBranchProtectionRuleConflictsOnXGitHubBranchProtectionRuleArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IMatchingRefsOnXGitHubBranchProtectionRuleArguments {
  /**
   * Filters refs with query on name
   */
  query?: string | null;

  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IPushAllowancesOnXGitHubBranchProtectionRuleArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IReviewDismissalAllowancesOnXGitHubBranchProtectionRuleArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

/**
 * A conflict between two branch protection rules.
 */
export interface IXGitHubBranchProtectionRuleConflict {
  __typename: '_xGitHubBranchProtectionRuleConflict';

  /**
   * Identifies the branch protection rule.
   */
  branchProtectionRule: IXGitHubBranchProtectionRule | null;

  /**
   * Identifies the conflicting branch protection rule.
   */
  conflictingBranchProtectionRule: IXGitHubBranchProtectionRule | null;

  /**
   * Identifies the branch ref that has conflicting rules
   */
  ref: IXGitHubRef | null;
}

/**
 * The connection type for BranchProtectionRuleConflict.
 */
export interface IXGitHubBranchProtectionRuleConflictConnection {
  __typename: '_xGitHubBranchProtectionRuleConflictConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubBranchProtectionRuleConflictEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitHubBranchProtectionRuleConflict | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface IXGitHubBranchProtectionRuleConflictEdge {
  __typename: '_xGitHubBranchProtectionRuleConflictEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitHubBranchProtectionRuleConflict | null;
}

/**
 * The connection type for BranchProtectionRule.
 */
export interface IXGitHubBranchProtectionRuleConnection {
  __typename: '_xGitHubBranchProtectionRuleConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubBranchProtectionRuleEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitHubBranchProtectionRule | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface IXGitHubBranchProtectionRuleEdge {
  __typename: '_xGitHubBranchProtectionRuleEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitHubBranchProtectionRule | null;
}

/**
 * The Common Vulnerability Scoring System
 */
export interface IXGitHubCVSS {
  __typename: '_xGitHubCVSS';

  /**
   * The CVSS score associated with this advisory
   */
  score: number;

  /**
   * The CVSS vector string associated with this advisory
   */
  vectorString: string | null;
}

/**
 * A common weakness enumeration
 */
export interface IXGitHubCWE {
  __typename: '_xGitHubCWE';

  /**
   * The id of the CWE
   */
  cweId: string;

  /**
   * A detailed description of this CWE
   */
  description: string;
  id: string;

  /**
   * The name of this CWE
   */
  name: string;
}

/**
 * The connection type for CWE.
 */
export interface IXGitHubCWEConnection {
  __typename: '_xGitHubCWEConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubCWEEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitHubCWE | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface IXGitHubCWEEdge {
  __typename: '_xGitHubCWEEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitHubCWE | null;
}

/**
 * Autogenerated input type of CancelEnterpriseAdminInvitation
 */
export interface IXGitHubCancelEnterpriseAdminInvitationInput {
  /**
   * The Node ID of the pending enterprise administrator invitation.
   */
  invitationId: string;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of CancelEnterpriseAdminInvitation
 */
export interface IXGitHubCancelEnterpriseAdminInvitationPayload {
  __typename: '_xGitHubCancelEnterpriseAdminInvitationPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The invitation that was canceled.
   */
  invitation: IXGitHubEnterpriseAdministratorInvitation | null;

  /**
   * A message confirming the result of canceling an administrator invitation.
   */
  message: string | null;
}

/**
 * Autogenerated input type of CancelSponsorship
 */
export interface IXGitHubCancelSponsorshipInput {
  /**
   * The ID of the user or organization who is acting as the sponsor, paying for the sponsorship. Required if sponsorLogin is not given.
   */
  sponsorId?: string | null;

  /**
   * The username of the user or organization who is acting as the sponsor, paying for the sponsorship. Required if sponsorId is not given.
   */
  sponsorLogin?: string | null;

  /**
   * The ID of the user or organization who is receiving the sponsorship. Required if sponsorableLogin is not given.
   */
  sponsorableId?: string | null;

  /**
   * The username of the user or organization who is receiving the sponsorship. Required if sponsorableId is not given.
   */
  sponsorableLogin?: string | null;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of CancelSponsorship
 */
export interface IXGitHubCancelSponsorshipPayload {
  __typename: '_xGitHubCancelSponsorshipPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The tier that was being used at the time of cancellation.
   */
  sponsorsTier: IXGitHubSponsorsTier | null;
}

/**
 * Autogenerated input type of ChangeUserStatus
 */
export interface IXGitHubChangeUserStatusInput {
  /**
   * The emoji to represent your status. Can either be a native Unicode emoji or an emoji name with colons, e.g., :grinning:.
   */
  emoji?: string | null;

  /**
   * A short description of your current status.
   */
  message?: string | null;

  /**
   * The ID of the organization whose members will be allowed to see the status. If omitted, the status will be publicly visible.
   */
  organizationId?: string | null;

  /**
   * Whether this status should indicate you are not fully available on GitHub, e.g., you are away.
   * @default false
   */
  limitedAvailability?: boolean | null;

  /**
   * If set, the user status will not be shown after this date.
   */
  expiresAt?: any | null;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of ChangeUserStatus
 */
export interface IXGitHubChangeUserStatusPayload {
  __typename: '_xGitHubChangeUserStatusPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * Your updated status.
   */
  status: IXGitHubUserStatus | null;
}

/**
 * A single check annotation.
 */
export interface IXGitHubCheckAnnotation {
  __typename: '_xGitHubCheckAnnotation';

  /**
   * The annotation's severity level.
   */
  annotationLevel: XGitHubCheckAnnotationLevel | null;

  /**
   * The path to the file that this annotation was made on.
   */
  blobUrl: any;

  /**
   * Identifies the primary key from the database.
   */
  databaseId: number | null;

  /**
   * The position of this annotation.
   */
  location: IXGitHubCheckAnnotationSpan;

  /**
   * The annotation's message.
   */
  message: string;

  /**
   * The path that this annotation was made on.
   */
  path: string;

  /**
   * Additional information about the annotation.
   */
  rawDetails: string | null;

  /**
   * The annotation's title
   */
  title: string | null;
}

/**
 * The connection type for CheckAnnotation.
 */
export interface IXGitHubCheckAnnotationConnection {
  __typename: '_xGitHubCheckAnnotationConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubCheckAnnotationEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitHubCheckAnnotation | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * Information from a check run analysis to specific lines of code.
 */
export interface IXGitHubCheckAnnotationData {
  /**
   * The path of the file to add an annotation to.
   */
  path: string;

  /**
   * The location of the annotation
   */
  location: IXGitHubCheckAnnotationRange;

  /**
   * Represents an annotation's information level
   */
  annotationLevel: XGitHubCheckAnnotationLevel;

  /**
   * A short description of the feedback for these lines of code.
   */
  message: string;

  /**
   * The title that represents the annotation.
   */
  title?: string | null;

  /**
   * Details about this annotation.
   */
  rawDetails?: string | null;
}

/**
 * An edge in a connection.
 */
export interface IXGitHubCheckAnnotationEdge {
  __typename: '_xGitHubCheckAnnotationEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitHubCheckAnnotation | null;
}

/**
 * Represents an annotation's information level.
 */
export const enum XGitHubCheckAnnotationLevel {
  /**
   * An annotation indicating an inescapable error.
   */
  FAILURE = 'FAILURE',

  /**
   * An annotation indicating some information.
   */
  NOTICE = 'NOTICE',

  /**
   * An annotation indicating an ignorable error.
   */
  WARNING = 'WARNING',
}

/**
 * A character position in a check annotation.
 */
export interface IXGitHubCheckAnnotationPosition {
  __typename: '_xGitHubCheckAnnotationPosition';

  /**
   * Column number (1 indexed).
   */
  column: number | null;

  /**
   * Line number (1 indexed).
   */
  line: number;
}

/**
 * Information from a check run analysis to specific lines of code.
 */
export interface IXGitHubCheckAnnotationRange {
  /**
   * The starting line of the range.
   */
  startLine: number;

  /**
   * The starting column of the range.
   */
  startColumn?: number | null;

  /**
   * The ending line of the range.
   */
  endLine: number;

  /**
   * The ending column of the range.
   */
  endColumn?: number | null;
}

/**
 * An inclusive pair of positions for a check annotation.
 */
export interface IXGitHubCheckAnnotationSpan {
  __typename: '_xGitHubCheckAnnotationSpan';

  /**
   * End position (inclusive).
   */
  end: IXGitHubCheckAnnotationPosition;

  /**
   * Start position (inclusive).
   */
  start: IXGitHubCheckAnnotationPosition;
}

/**
 * The possible states for a check suite or run conclusion.
 */
export const enum XGitHubCheckConclusionState {
  /**
   * The check suite or run requires action.
   */
  ACTION_REQUIRED = 'ACTION_REQUIRED',

  /**
   * The check suite or run has timed out.
   */
  TIMED_OUT = 'TIMED_OUT',

  /**
   * The check suite or run has been cancelled.
   */
  CANCELLED = 'CANCELLED',

  /**
   * The check suite or run has failed.
   */
  FAILURE = 'FAILURE',

  /**
   * The check suite or run has succeeded.
   */
  SUCCESS = 'SUCCESS',

  /**
   * The check suite or run was neutral.
   */
  NEUTRAL = 'NEUTRAL',

  /**
   * The check suite or run was skipped.
   */
  SKIPPED = 'SKIPPED',

  /**
   * The check suite or run has failed at startup.
   */
  STARTUP_FAILURE = 'STARTUP_FAILURE',

  /**
   * The check suite or run was marked stale by GitHub. Only GitHub can use this conclusion.
   */
  STALE = 'STALE',
}

/**
 * A check run.
 */
export interface IXGitHubCheckRun {
  __typename: '_xGitHubCheckRun';

  /**
   * The check run's annotations
   */
  annotations: IXGitHubCheckAnnotationConnection | null;

  /**
   * The check suite that this run is a part of.
   */
  checkSuite: IXGitHubCheckSuite;

  /**
   * Identifies the date and time when the check run was completed.
   */
  completedAt: any | null;

  /**
   * The conclusion of the check run.
   */
  conclusion: XGitHubCheckConclusionState | null;

  /**
   * Identifies the primary key from the database.
   */
  databaseId: number | null;

  /**
   * The corresponding deployment for this job, if any
   */
  deployment: IXGitHubDeployment | null;

  /**
   * The URL from which to find full details of the check run on the integrator's site.
   */
  detailsUrl: any | null;

  /**
   * A reference for the check run on the integrator's system.
   */
  externalId: string | null;
  id: string;

  /**
   * Whether this is required to pass before merging for a specific pull request.
   */
  isRequired: boolean;

  /**
   * The name of the check for this check run.
   */
  name: string;

  /**
   * Information about a pending deployment, if any, in this check run
   */
  pendingDeploymentRequest: IXGitHubDeploymentRequest | null;

  /**
   * The permalink to the check run summary.
   */
  permalink: any;

  /**
   * The repository associated with this check run.
   */
  repository: IXGitHubRepository;

  /**
   * The HTTP path for this check run.
   */
  resourcePath: any;

  /**
   * Identifies the date and time when the check run was started.
   */
  startedAt: any | null;

  /**
   * The current status of the check run.
   */
  status: XGitHubCheckStatusState;

  /**
   * The check run's steps
   */
  steps: IXGitHubCheckStepConnection | null;

  /**
   * A string representing the check run's summary
   */
  summary: string | null;

  /**
   * A string representing the check run's text
   */
  text: string | null;

  /**
   * A string representing the check run
   */
  title: string | null;

  /**
   * The HTTP URL for this check run.
   */
  url: any;
}

export interface IAnnotationsOnXGitHubCheckRunArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IIsRequiredOnXGitHubCheckRunArguments {
  /**
   * The id of the pull request this is required for
   */
  pullRequestId?: string | null;

  /**
   * The number of the pull request this is required for
   */
  pullRequestNumber?: number | null;
}

export interface IStepsOnXGitHubCheckRunArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Step number
   */
  number?: number | null;
}

/**
 * Possible further actions the integrator can perform.
 */
export interface IXGitHubCheckRunAction {
  /**
   * The text to be displayed on a button in the web UI.
   */
  label: string;

  /**
   * A short explanation of what this action would do.
   */
  description: string;

  /**
   * A reference for the action on the integrator's system.
   */
  identifier: string;
}

/**
 * The connection type for CheckRun.
 */
export interface IXGitHubCheckRunConnection {
  __typename: '_xGitHubCheckRunConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubCheckRunEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitHubCheckRun | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface IXGitHubCheckRunEdge {
  __typename: '_xGitHubCheckRunEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitHubCheckRun | null;
}

/**
 * The filters that are available when fetching check runs.
 */
export interface IXGitHubCheckRunFilter {
  /**
   * Filters the check runs by this type.
   */
  checkType?: XGitHubCheckRunType | null;

  /**
   * Filters the check runs created by this application ID.
   */
  appId?: number | null;

  /**
   * Filters the check runs by this name.
   */
  checkName?: string | null;

  /**
   * Filters the check runs by this status.
   */
  status?: XGitHubCheckStatusState | null;
}

/**
 * Descriptive details about the check run.
 */
export interface IXGitHubCheckRunOutput {
  /**
   * A title to provide for this check run.
   */
  title: string;

  /**
   * The summary of the check run (supports Commonmark).
   */
  summary: string;

  /**
   * The details of the check run (supports Commonmark).
   */
  text?: string | null;

  /**
   * The annotations that are made as part of the check run.
   */
  annotations?: Array<IXGitHubCheckAnnotationData> | null;

  /**
   * Images attached to the check run output displayed in the GitHub pull request UI.
   */
  images?: Array<IXGitHubCheckRunOutputImage> | null;
}

/**
 * Images attached to the check run output displayed in the GitHub pull request UI.
 */
export interface IXGitHubCheckRunOutputImage {
  /**
   * The alternative text for the image.
   */
  alt: string;

  /**
   * The full URL of the image.
   */
  imageUrl: any;

  /**
   * A short image description.
   */
  caption?: string | null;
}

/**
 * The possible types of check runs.
 */
export const enum XGitHubCheckRunType {
  /**
   * Every check run available.
   */
  ALL = 'ALL',

  /**
   * The latest check run.
   */
  LATEST = 'LATEST',
}

/**
 * The possible states for a check suite or run status.
 */
export const enum XGitHubCheckStatusState {
  /**
   * The check suite or run has been queued.
   */
  QUEUED = 'QUEUED',

  /**
   * The check suite or run is in progress.
   */
  IN_PROGRESS = 'IN_PROGRESS',

  /**
   * The check suite or run has been completed.
   */
  COMPLETED = 'COMPLETED',

  /**
   * The check suite or run is in waiting state.
   */
  WAITING = 'WAITING',

  /**
   * The check suite or run is in pending state.
   */
  PENDING = 'PENDING',

  /**
   * The check suite or run has been requested.
   */
  REQUESTED = 'REQUESTED',
}

/**
 * A single check step.
 */
export interface IXGitHubCheckStep {
  __typename: '_xGitHubCheckStep';

  /**
   * Identifies the date and time when the check step was completed.
   */
  completedAt: any | null;

  /**
   * The conclusion of the check step.
   */
  conclusion: XGitHubCheckConclusionState | null;

  /**
   * A reference for the check step on the integrator's system.
   */
  externalId: string | null;

  /**
   * The step's name.
   */
  name: string;

  /**
   * The index of the step in the list of steps of the parent check run.
   */
  number: number;

  /**
   * Number of seconds to completion.
   */
  secondsToCompletion: number | null;

  /**
   * Identifies the date and time when the check step was started.
   */
  startedAt: any | null;

  /**
   * The current status of the check step.
   */
  status: XGitHubCheckStatusState;
}

/**
 * The connection type for CheckStep.
 */
export interface IXGitHubCheckStepConnection {
  __typename: '_xGitHubCheckStepConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubCheckStepEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitHubCheckStep | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface IXGitHubCheckStepEdge {
  __typename: '_xGitHubCheckStepEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitHubCheckStep | null;
}

/**
 * A check suite.
 */
export interface IXGitHubCheckSuite {
  __typename: '_xGitHubCheckSuite';

  /**
   * The GitHub App which created this check suite.
   */
  app: IXGitHubApp | null;

  /**
   * The name of the branch for this check suite.
   */
  branch: IXGitHubRef | null;

  /**
   * The check runs associated with a check suite.
   */
  checkRuns: IXGitHubCheckRunConnection | null;

  /**
   * The commit for this check suite
   */
  commit: IXGitHubCommit;

  /**
   * The conclusion of this check suite.
   */
  conclusion: XGitHubCheckConclusionState | null;

  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: any;

  /**
   * The user who triggered the check suite.
   */
  creator: IXGitHubUser | null;

  /**
   * Identifies the primary key from the database.
   */
  databaseId: number | null;
  id: string;

  /**
   * A list of open pull requests matching the check suite.
   */
  matchingPullRequests: IXGitHubPullRequestConnection | null;

  /**
   * The push that triggered this check suite.
   */
  push: IXGitHubPush | null;

  /**
   * The repository associated with this check suite.
   */
  repository: IXGitHubRepository;

  /**
   * The HTTP path for this check suite
   */
  resourcePath: any;

  /**
   * The status of this check suite.
   */
  status: XGitHubCheckStatusState;

  /**
   * Identifies the date and time when the object was last updated.
   */
  updatedAt: any;

  /**
   * The HTTP URL for this check suite
   */
  url: any;

  /**
   * The workflow run associated with this check suite.
   */
  workflowRun: IXGitHubWorkflowRun | null;
}

export interface ICheckRunsOnXGitHubCheckSuiteArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Filters the check runs by this type.
   */
  filterBy?: IXGitHubCheckRunFilter | null;
}

export interface IMatchingPullRequestsOnXGitHubCheckSuiteArguments {
  /**
   * A list of states to filter the pull requests by.
   */
  states?: Array<XGitHubPullRequestState> | null;

  /**
   * A list of label names to filter the pull requests by.
   */
  labels?: Array<string> | null;

  /**
   * The head ref name to filter the pull requests by.
   */
  headRefName?: string | null;

  /**
   * The base ref name to filter the pull requests by.
   */
  baseRefName?: string | null;

  /**
   * Ordering options for pull requests returned from the connection.
   */
  orderBy?: IXGitHubIssueOrder | null;

  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

/**
 * The auto-trigger preferences that are available for check suites.
 */
export interface IXGitHubCheckSuiteAutoTriggerPreference {
  /**
   * The node ID of the application that owns the check suite.
   */
  appId: string;

  /**
   * Set to `true` to enable automatic creation of CheckSuite events upon pushes to the repository.
   */
  setting: boolean;
}

/**
 * The connection type for CheckSuite.
 */
export interface IXGitHubCheckSuiteConnection {
  __typename: '_xGitHubCheckSuiteConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubCheckSuiteEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitHubCheckSuite | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface IXGitHubCheckSuiteEdge {
  __typename: '_xGitHubCheckSuiteEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitHubCheckSuite | null;
}

/**
 * The filters that are available when fetching check suites.
 */
export interface IXGitHubCheckSuiteFilter {
  /**
   * Filters the check suites created by this application ID.
   */
  appId?: number | null;

  /**
   * Filters the check suites by this name.
   */
  checkName?: string | null;
}

/**
 * Autogenerated input type of ClearLabelsFromLabelable
 */
export interface IXGitHubClearLabelsFromLabelableInput {
  /**
   * The id of the labelable object to clear the labels from.
   */
  labelableId: string;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of ClearLabelsFromLabelable
 */
export interface IXGitHubClearLabelsFromLabelablePayload {
  __typename: '_xGitHubClearLabelsFromLabelablePayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The item that was unlabeled.
   */
  labelable: _xGitHubLabelable | null;
}

/**
 * Autogenerated input type of CloneProject
 */
export interface IXGitHubCloneProjectInput {
  /**
   * The owner ID to create the project under.
   */
  targetOwnerId: string;

  /**
   * The source project to clone.
   */
  sourceId: string;

  /**
   * Whether or not to clone the source project's workflows.
   */
  includeWorkflows: boolean;

  /**
   * The name of the project.
   */
  name: string;

  /**
   * The description of the project.
   */
  body?: string | null;

  /**
   * The visibility of the project, defaults to false (private).
   */
  public?: boolean | null;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of CloneProject
 */
export interface IXGitHubCloneProjectPayload {
  __typename: '_xGitHubCloneProjectPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The id of the JobStatus for populating cloned fields.
   */
  jobStatusId: string | null;

  /**
   * The new cloned project.
   */
  project: IXGitHubProject | null;
}

/**
 * Autogenerated input type of CloneTemplateRepository
 */
export interface IXGitHubCloneTemplateRepositoryInput {
  /**
   * The Node ID of the template repository.
   */
  repositoryId: string;

  /**
   * The name of the new repository.
   */
  name: string;

  /**
   * The ID of the owner for the new repository.
   */
  ownerId: string;

  /**
   * A short description of the new repository.
   */
  description?: string | null;

  /**
   * Indicates the repository's visibility level.
   */
  visibility: XGitHubRepositoryVisibility;

  /**
   * Whether to copy all branches from the template to the new repository. Defaults to copying only the default branch of the template.
   * @default false
   */
  includeAllBranches?: boolean | null;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of CloneTemplateRepository
 */
export interface IXGitHubCloneTemplateRepositoryPayload {
  __typename: '_xGitHubCloneTemplateRepositoryPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The new repository.
   */
  repository: IXGitHubRepository | null;
}

/**
 * An object that can be closed
 */
export type _xGitHubClosable =
  | IXGitHubIssue
  | IXGitHubMilestone
  | IXGitHubProject
  | IXGitHubPullRequest;

/**
 * An object that can be closed
 */
export interface IXGitHubClosable {
  __typename: '_xGitHubClosable';

  /**
   * `true` if the object is closed (definition of closed may depend on type)
   */
  closed: boolean;

  /**
   * Identifies the date and time when the object was closed.
   */
  closedAt: any | null;
}

/**
 * Autogenerated input type of CloseIssue
 */
export interface IXGitHubCloseIssueInput {
  /**
   * ID of the issue to be closed.
   */
  issueId: string;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of CloseIssue
 */
export interface IXGitHubCloseIssuePayload {
  __typename: '_xGitHubCloseIssuePayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The issue that was closed.
   */
  issue: IXGitHubIssue | null;
}

/**
 * Autogenerated input type of ClosePullRequest
 */
export interface IXGitHubClosePullRequestInput {
  /**
   * ID of the pull request to be closed.
   */
  pullRequestId: string;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of ClosePullRequest
 */
export interface IXGitHubClosePullRequestPayload {
  __typename: '_xGitHubClosePullRequestPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The pull request that was closed.
   */
  pullRequest: IXGitHubPullRequest | null;
}

/**
 * Represents a 'closed' event on any `Closable`.
 */
export interface IXGitHubClosedEvent {
  __typename: '_xGitHubClosedEvent';

  /**
   * Identifies the actor who performed the event.
   */
  actor: _xGitHubActor | null;

  /**
   * Object that was closed.
   */
  closable: _xGitHubClosable;

  /**
   * Object which triggered the creation of this event.
   */
  closer: _xGitHubCloser | null;

  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: any;
  id: string;

  /**
   * The HTTP path for this closed event.
   */
  resourcePath: any;

  /**
   * The HTTP URL for this closed event.
   */
  url: any;
}

/**
 * The object which triggered a `ClosedEvent`.
 */
export type _xGitHubCloser = IXGitHubCommit | IXGitHubPullRequest;

/**
 * The Code of Conduct for a repository
 */
export interface IXGitHubCodeOfConduct {
  __typename: '_xGitHubCodeOfConduct';

  /**
   * The body of the Code of Conduct
   */
  body: string | null;
  id: string;

  /**
   * The key for the Code of Conduct
   */
  key: string;

  /**
   * The formal name of the Code of Conduct
   */
  name: string;

  /**
   * The HTTP path for this Code of Conduct
   */
  resourcePath: any | null;

  /**
   * The HTTP URL for this Code of Conduct
   */
  url: any | null;
}

/**
 * Collaborators affiliation level with a subject.
 */
export const enum XGitHubCollaboratorAffiliation {
  /**
   * All outside collaborators of an organization-owned subject.
   */
  OUTSIDE = 'OUTSIDE',

  /**
   * All collaborators with permissions to an organization-owned subject, regardless of organization membership status.
   */
  DIRECT = 'DIRECT',

  /**
   * All collaborators the authenticated user can see.
   */
  ALL = 'ALL',
}

/**
 * Represents a comment.
 */
export type _xGitHubComment =
  | IXGitHubCommitComment
  | IXGitHubDiscussion
  | IXGitHubDiscussionComment
  | IXGitHubGistComment
  | IXGitHubIssue
  | IXGitHubIssueComment
  | IXGitHubPullRequest
  | IXGitHubPullRequestReview
  | IXGitHubPullRequestReviewComment
  | IXGitHubTeamDiscussion
  | IXGitHubTeamDiscussionComment;

/**
 * Represents a comment.
 */
export interface IXGitHubComment {
  __typename: '_xGitHubComment';

  /**
   * The actor who authored the comment.
   */
  author: _xGitHubActor | null;

  /**
   * Author's association with the subject of the comment.
   */
  authorAssociation: XGitHubCommentAuthorAssociation;

  /**
   * The body as Markdown.
   */
  body: string;

  /**
   * The body rendered to HTML.
   */
  bodyHTML: any;

  /**
   * The body rendered to text.
   */
  bodyText: string;

  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: any;

  /**
   * Check if this comment was created via an email reply.
   */
  createdViaEmail: boolean;

  /**
   * The actor who edited the comment.
   */
  editor: _xGitHubActor | null;
  id: string;

  /**
   * Check if this comment was edited and includes an edit with the creation data
   */
  includesCreatedEdit: boolean;

  /**
   * The moment the editor made the last edit
   */
  lastEditedAt: any | null;

  /**
   * Identifies when the comment was published at.
   */
  publishedAt: any | null;

  /**
   * Identifies the date and time when the object was last updated.
   */
  updatedAt: any;

  /**
   * A list of edits to this content.
   */
  userContentEdits: IXGitHubUserContentEditConnection | null;

  /**
   * Did the viewer author this comment.
   */
  viewerDidAuthor: boolean;
}

export interface IUserContentEditsOnXGitHubCommentArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

/**
 * A comment author association with repository.
 */
export const enum XGitHubCommentAuthorAssociation {
  /**
   * Author is a member of the organization that owns the repository.
   */
  MEMBER = 'MEMBER',

  /**
   * Author is the owner of the repository.
   */
  OWNER = 'OWNER',

  /**
   * Author is a placeholder for an unclaimed user.
   */
  MANNEQUIN = 'MANNEQUIN',

  /**
   * Author has been invited to collaborate on the repository.
   */
  COLLABORATOR = 'COLLABORATOR',

  /**
   * Author has previously committed to the repository.
   */
  CONTRIBUTOR = 'CONTRIBUTOR',

  /**
   * Author has not previously committed to the repository.
   */
  FIRST_TIME_CONTRIBUTOR = 'FIRST_TIME_CONTRIBUTOR',

  /**
   * Author has not previously committed to GitHub.
   */
  FIRST_TIMER = 'FIRST_TIMER',

  /**
   * Author has no association with the repository.
   */
  NONE = 'NONE',
}

/**
 * The possible errors that will prevent a user from updating a comment.
 */
export const enum XGitHubCommentCannotUpdateReason {
  /**
   * Unable to create comment because repository is archived.
   */
  ARCHIVED = 'ARCHIVED',

  /**
   * You must be the author or have write access to this repository to update this comment.
   */
  INSUFFICIENT_ACCESS = 'INSUFFICIENT_ACCESS',

  /**
   * Unable to create comment because issue is locked.
   */
  LOCKED = 'LOCKED',

  /**
   * You must be logged in to update this comment.
   */
  LOGIN_REQUIRED = 'LOGIN_REQUIRED',

  /**
   * Repository is under maintenance.
   */
  MAINTENANCE = 'MAINTENANCE',

  /**
   * At least one email address must be verified to update this comment.
   */
  VERIFIED_EMAIL_REQUIRED = 'VERIFIED_EMAIL_REQUIRED',

  /**
   * You cannot update this comment
   */
  DENIED = 'DENIED',
}

/**
 * Represents a 'comment_deleted' event on a given issue or pull request.
 */
export interface IXGitHubCommentDeletedEvent {
  __typename: '_xGitHubCommentDeletedEvent';

  /**
   * Identifies the actor who performed the event.
   */
  actor: _xGitHubActor | null;

  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: any;

  /**
   * Identifies the primary key from the database.
   */
  databaseId: number | null;

  /**
   * The user who authored the deleted comment.
   */
  deletedCommentAuthor: _xGitHubActor | null;
  id: string;
}

/**
 * Represents a Git commit.
 */
export interface IXGitHubCommit {
  __typename: '_xGitHubCommit';

  /**
   * An abbreviated version of the Git object ID
   */
  abbreviatedOid: string;

  /**
   * The number of additions in this commit.
   */
  additions: number;

  /**
   * The merged Pull Request that introduced the commit to the repository. If the commit is not present in the default branch, additionally returns open Pull Requests associated with the commit
   */
  associatedPullRequests: IXGitHubPullRequestConnection | null;

  /**
   * Authorship details of the commit.
   */
  author: IXGitHubGitActor | null;

  /**
   * Check if the committer and the author match.
   */
  authoredByCommitter: boolean;

  /**
   * The datetime when this commit was authored.
   */
  authoredDate: any;

  /**
   * The list of authors for this commit based on the git author and the Co-authored-by
   * message trailer. The git author will always be first.
   */
  authors: IXGitHubGitActorConnection;

  /**
   * Fetches `git blame` information.
   */
  blame: IXGitHubBlame;

  /**
   * The number of changed files in this commit.
   */
  changedFiles: number;

  /**
   * The check suites associated with a commit.
   */
  checkSuites: IXGitHubCheckSuiteConnection | null;

  /**
   * Comments made on the commit.
   */
  comments: IXGitHubCommitCommentConnection;

  /**
   * The HTTP path for this Git object
   */
  commitResourcePath: any;

  /**
   * The HTTP URL for this Git object
   */
  commitUrl: any;

  /**
   * The datetime when this commit was committed.
   */
  committedDate: any;

  /**
   * Check if committed via GitHub web UI.
   */
  committedViaWeb: boolean;

  /**
   * Committer details of the commit.
   */
  committer: IXGitHubGitActor | null;

  /**
   * The number of deletions in this commit.
   */
  deletions: number;

  /**
   * The deployments associated with a commit.
   */
  deployments: IXGitHubDeploymentConnection | null;

  /**
   * The tree entry representing the file located at the given path.
   */
  file: IXGitHubTreeEntry | null;

  /**
   * The linear commit history starting from (and including) this commit, in the same order as `git log`.
   */
  history: IXGitHubCommitHistoryConnection;
  id: string;

  /**
   * The Git commit message
   */
  message: string;

  /**
   * The Git commit message body
   */
  messageBody: string;

  /**
   * The commit message body rendered to HTML.
   */
  messageBodyHTML: any;

  /**
   * The Git commit message headline
   */
  messageHeadline: string;

  /**
   * The commit message headline rendered to HTML.
   */
  messageHeadlineHTML: any;

  /**
   * The Git object ID
   */
  oid: any;

  /**
   * The organization this commit was made on behalf of.
   */
  onBehalfOf: IXGitHubOrganization | null;

  /**
   * The parents of a commit.
   */
  parents: IXGitHubCommitConnection;

  /**
   * The datetime when this commit was pushed.
   */
  pushedDate: any | null;

  /**
   * The Repository this commit belongs to
   */
  repository: IXGitHubRepository;

  /**
   * The HTTP path for this commit
   */
  resourcePath: any;

  /**
   * Commit signing information, if present.
   */
  signature: _xGitHubGitSignature | null;

  /**
   * Status information for this commit
   */
  status: IXGitHubStatus | null;

  /**
   * Check and Status rollup information for this commit.
   */
  statusCheckRollup: IXGitHubStatusCheckRollup | null;

  /**
   * Returns a list of all submodules in this repository as of this Commit parsed from the .gitmodules file.
   */
  submodules: IXGitHubSubmoduleConnection;

  /**
   * Returns a URL to download a tarball archive for a repository.
   * Note: For private repositories, these links are temporary and expire after five minutes.
   */
  tarballUrl: any;

  /**
   * Commit's root Tree
   */
  tree: IXGitHubTree;

  /**
   * The HTTP path for the tree of this commit
   */
  treeResourcePath: any;

  /**
   * The HTTP URL for the tree of this commit
   */
  treeUrl: any;

  /**
   * The HTTP URL for this commit
   */
  url: any;

  /**
   * Check if the viewer is able to change their subscription status for the repository.
   */
  viewerCanSubscribe: boolean;

  /**
   * Identifies if the viewer is watching, not watching, or ignoring the subscribable entity.
   */
  viewerSubscription: XGitHubSubscriptionState | null;

  /**
   * Returns a URL to download a zipball archive for a repository.
   * Note: For private repositories, these links are temporary and expire after five minutes.
   */
  zipballUrl: any;
}

export interface IAssociatedPullRequestsOnXGitHubCommitArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Ordering options for pull requests.
   * @default {"field":"CREATED_AT","direction":"ASC"}
   */
  orderBy?: IXGitHubPullRequestOrder | null;
}

export interface IAuthorsOnXGitHubCommitArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IBlameOnXGitHubCommitArguments {
  /**
   * The file whose Git blame information you want.
   */
  path: string;
}

export interface ICheckSuitesOnXGitHubCommitArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Filters the check suites by this type.
   */
  filterBy?: IXGitHubCheckSuiteFilter | null;
}

export interface ICommentsOnXGitHubCommitArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IDeploymentsOnXGitHubCommitArguments {
  /**
   * Environments to list deployments for
   */
  environments?: Array<string> | null;

  /**
   * Ordering options for deployments returned from the connection.
   * @default {"field":"CREATED_AT","direction":"ASC"}
   */
  orderBy?: IXGitHubDeploymentOrder | null;

  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IFileOnXGitHubCommitArguments {
  /**
   * The path for the file
   */
  path: string;
}

export interface IHistoryOnXGitHubCommitArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * If non-null, filters history to only show commits touching files under this path.
   */
  path?: string | null;

  /**
   * If non-null, filters history to only show commits with matching authorship.
   */
  author?: IXGitHubCommitAuthor | null;

  /**
   * Allows specifying a beginning time or date for fetching commits.
   */
  since?: any | null;

  /**
   * Allows specifying an ending time or date for fetching commits.
   */
  until?: any | null;
}

export interface IParentsOnXGitHubCommitArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface ISubmodulesOnXGitHubCommitArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

/**
 * Specifies an author for filtering Git commits.
 */
export interface IXGitHubCommitAuthor {
  /**
   * ID of a User to filter by. If non-null, only commits authored by this user will be returned. This field takes precedence over emails.
   */
  id?: string | null;

  /**
   * Email addresses to filter by. Commits authored by any of the specified email addresses will be returned.
   */
  emails?: Array<string> | null;
}

/**
 * Represents a comment on a given Commit.
 */
export interface IXGitHubCommitComment {
  __typename: '_xGitHubCommitComment';

  /**
   * The actor who authored the comment.
   */
  author: _xGitHubActor | null;

  /**
   * Author's association with the subject of the comment.
   */
  authorAssociation: XGitHubCommentAuthorAssociation;

  /**
   * Identifies the comment body.
   */
  body: string;

  /**
   * The body rendered to HTML.
   */
  bodyHTML: any;

  /**
   * The body rendered to text.
   */
  bodyText: string;

  /**
   * Identifies the commit associated with the comment, if the commit exists.
   */
  commit: IXGitHubCommit | null;

  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: any;

  /**
   * Check if this comment was created via an email reply.
   */
  createdViaEmail: boolean;

  /**
   * Identifies the primary key from the database.
   */
  databaseId: number | null;

  /**
   * The actor who edited the comment.
   */
  editor: _xGitHubActor | null;
  id: string;

  /**
   * Check if this comment was edited and includes an edit with the creation data
   */
  includesCreatedEdit: boolean;

  /**
   * Returns whether or not a comment has been minimized.
   */
  isMinimized: boolean;

  /**
   * The moment the editor made the last edit
   */
  lastEditedAt: any | null;

  /**
   * Returns why the comment was minimized.
   */
  minimizedReason: string | null;

  /**
   * Identifies the file path associated with the comment.
   */
  path: string | null;

  /**
   * Identifies the line position associated with the comment.
   */
  position: number | null;

  /**
   * Identifies when the comment was published at.
   */
  publishedAt: any | null;

  /**
   * A list of reactions grouped by content left on the subject.
   */
  reactionGroups: Array<IXGitHubReactionGroup> | null;

  /**
   * A list of Reactions left on the Issue.
   */
  reactions: IXGitHubReactionConnection;

  /**
   * The repository associated with this node.
   */
  repository: IXGitHubRepository;

  /**
   * The HTTP path permalink for this commit comment.
   */
  resourcePath: any;

  /**
   * Identifies the date and time when the object was last updated.
   */
  updatedAt: any;

  /**
   * The HTTP URL permalink for this commit comment.
   */
  url: any;

  /**
   * A list of edits to this content.
   */
  userContentEdits: IXGitHubUserContentEditConnection | null;

  /**
   * Check if the current viewer can delete this object.
   */
  viewerCanDelete: boolean;

  /**
   * Check if the current viewer can minimize this object.
   */
  viewerCanMinimize: boolean;

  /**
   * Can user react to this subject
   */
  viewerCanReact: boolean;

  /**
   * Check if the current viewer can update this object.
   */
  viewerCanUpdate: boolean;

  /**
   * Reasons why the current viewer can not update this comment.
   */
  viewerCannotUpdateReasons: Array<XGitHubCommentCannotUpdateReason>;

  /**
   * Did the viewer author this comment.
   */
  viewerDidAuthor: boolean;
}

export interface IReactionsOnXGitHubCommitCommentArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Allows filtering Reactions by emoji.
   */
  content?: XGitHubReactionContent | null;

  /**
   * Allows specifying the order in which reactions are returned.
   */
  orderBy?: IXGitHubReactionOrder | null;
}

export interface IUserContentEditsOnXGitHubCommitCommentArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

/**
 * The connection type for CommitComment.
 */
export interface IXGitHubCommitCommentConnection {
  __typename: '_xGitHubCommitCommentConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubCommitCommentEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitHubCommitComment | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface IXGitHubCommitCommentEdge {
  __typename: '_xGitHubCommitCommentEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitHubCommitComment | null;
}

/**
 * A thread of comments on a commit.
 */
export interface IXGitHubCommitCommentThread {
  __typename: '_xGitHubCommitCommentThread';

  /**
   * The comments that exist in this thread.
   */
  comments: IXGitHubCommitCommentConnection;

  /**
   * The commit the comments were made on.
   */
  commit: IXGitHubCommit | null;
  id: string;

  /**
   * The file the comments were made on.
   */
  path: string | null;

  /**
   * The position in the diff for the commit that the comment was made on.
   */
  position: number | null;

  /**
   * The repository associated with this node.
   */
  repository: IXGitHubRepository;
}

export interface ICommentsOnXGitHubCommitCommentThreadArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

/**
 * The connection type for Commit.
 */
export interface IXGitHubCommitConnection {
  __typename: '_xGitHubCommitConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubCommitEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitHubCommit | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * Ordering options for commit contribution connections.
 */
export interface IXGitHubCommitContributionOrder {
  /**
   * The field by which to order commit contributions.
   */
  field: XGitHubCommitContributionOrderField;

  /**
   * The ordering direction.
   */
  direction: XGitHubOrderDirection;
}

/**
 * Properties by which commit contribution connections can be ordered.
 */
export const enum XGitHubCommitContributionOrderField {
  /**
   * Order commit contributions by when they were made.
   */
  OCCURRED_AT = 'OCCURRED_AT',

  /**
   * Order commit contributions by how many commits they represent.
   */
  COMMIT_COUNT = 'COMMIT_COUNT',
}

/**
 * This aggregates commits made by a user within one repository.
 */
export interface IXGitHubCommitContributionsByRepository {
  __typename: '_xGitHubCommitContributionsByRepository';

  /**
   * The commit contributions, each representing a day.
   */
  contributions: IXGitHubCreatedCommitContributionConnection;

  /**
   * The repository in which the commits were made.
   */
  repository: IXGitHubRepository;

  /**
   * The HTTP path for the user's commits to the repository in this time range.
   */
  resourcePath: any;

  /**
   * The HTTP URL for the user's commits to the repository in this time range.
   */
  url: any;
}

export interface IContributionsOnXGitHubCommitContributionsByRepositoryArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Ordering options for commit contributions returned from the connection.
   * @default {"field":"OCCURRED_AT","direction":"DESC"}
   */
  orderBy?: IXGitHubCommitContributionOrder | null;
}

/**
 * An edge in a connection.
 */
export interface IXGitHubCommitEdge {
  __typename: '_xGitHubCommitEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitHubCommit | null;
}

/**
 * The connection type for Commit.
 */
export interface IXGitHubCommitHistoryConnection {
  __typename: '_xGitHubCommitHistoryConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubCommitEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitHubCommit | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * A message to include with a new commit
 */
export interface IXGitHubCommitMessage {
  /**
   * The headline of the message.
   */
  headline: string;

  /**
   * The body of the message.
   */
  body?: string | null;
}

/**
 * A git ref for a commit to be appended to.
 *
 * The ref must be a branch, i.e. its fully qualified name must start
 * with `refs/heads/` (although the input is not required to be fully
 * qualified).
 *
 * The Ref may be specified by its global node ID or by the
 * repository nameWithOwner and branch name.
 *
 * ### Examples
 *
 * Specify a branch using a global node ID:
 *
 *     { "id": "MDM6UmVmMTpyZWZzL2hlYWRzL21haW4=" }
 *
 * Specify a branch using nameWithOwner and branch name:
 *
 *     {
 *       "nameWithOwner": "github/graphql-client",
 *       "branchName": "main"
 *     }
 */
export interface IXGitHubCommittableBranch {
  /**
   * The Node ID of the Ref to be updated.
   */
  id?: string | null;

  /**
   * The nameWithOwner of the repository to commit to.
   */
  repositoryNameWithOwner?: string | null;

  /**
   * The unqualified name of the branch to append the commit to.
   */
  branchName?: string | null;
}

/**
 * Represents a 'connected' event on a given issue or pull request.
 */
export interface IXGitHubConnectedEvent {
  __typename: '_xGitHubConnectedEvent';

  /**
   * Identifies the actor who performed the event.
   */
  actor: _xGitHubActor | null;

  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: any;
  id: string;

  /**
   * Reference originated in a different repository.
   */
  isCrossRepository: boolean;

  /**
   * Issue or pull request that made the reference.
   */
  source: _xGitHubReferencedSubject;

  /**
   * Issue or pull request which was connected.
   */
  subject: _xGitHubReferencedSubject;
}

/**
 * Represents a contribution a user made on GitHub, such as opening an issue.
 */
export type _xGitHubContribution =
  | IXGitHubCreatedCommitContribution
  | IXGitHubCreatedIssueContribution
  | IXGitHubCreatedPullRequestContribution
  | IXGitHubCreatedPullRequestReviewContribution
  | IXGitHubCreatedRepositoryContribution
  | IXGitHubJoinedGitHubContribution
  | IXGitHubRestrictedContribution;

/**
 * Represents a contribution a user made on GitHub, such as opening an issue.
 */
export interface IXGitHubContribution {
  __typename: '_xGitHubContribution';

  /**
   * Whether this contribution is associated with a record you do not have access to. For
   * example, your own 'first issue' contribution may have been made on a repository you can no
   * longer access.
   */
  isRestricted: boolean;

  /**
   * When this contribution was made.
   */
  occurredAt: any;

  /**
   * The HTTP path for this contribution.
   */
  resourcePath: any;

  /**
   * The HTTP URL for this contribution.
   */
  url: any;

  /**
   * The user who made this contribution.
   */
  user: IXGitHubUser;
}

/**
 * A calendar of contributions made on GitHub by a user.
 */
export interface IXGitHubContributionCalendar {
  __typename: '_xGitHubContributionCalendar';

  /**
   * A list of hex color codes used in this calendar. The darker the color, the more contributions it represents.
   */
  colors: Array<string>;

  /**
   * Determine if the color set was chosen because it's currently Halloween.
   */
  isHalloween: boolean;

  /**
   * A list of the months of contributions in this calendar.
   */
  months: Array<IXGitHubContributionCalendarMonth>;

  /**
   * The count of total contributions in the calendar.
   */
  totalContributions: number;

  /**
   * A list of the weeks of contributions in this calendar.
   */
  weeks: Array<IXGitHubContributionCalendarWeek>;
}

/**
 * Represents a single day of contributions on GitHub by a user.
 */
export interface IXGitHubContributionCalendarDay {
  __typename: '_xGitHubContributionCalendarDay';

  /**
   * The hex color code that represents how many contributions were made on this day compared to others in the calendar.
   */
  color: string;

  /**
   * How many contributions were made by the user on this day.
   */
  contributionCount: number;

  /**
   * Indication of contributions, relative to other days. Can be used to indicate which color to represent this day on a calendar.
   */
  contributionLevel: XGitHubContributionLevel;

  /**
   * The day this square represents.
   */
  date: any;

  /**
   * A number representing which day of the week this square represents, e.g., 1 is Monday.
   */
  weekday: number;
}

/**
 * A month of contributions in a user's contribution graph.
 */
export interface IXGitHubContributionCalendarMonth {
  __typename: '_xGitHubContributionCalendarMonth';

  /**
   * The date of the first day of this month.
   */
  firstDay: any;

  /**
   * The name of the month.
   */
  name: string;

  /**
   * How many weeks started in this month.
   */
  totalWeeks: number;

  /**
   * The year the month occurred in.
   */
  year: number;
}

/**
 * A week of contributions in a user's contribution graph.
 */
export interface IXGitHubContributionCalendarWeek {
  __typename: '_xGitHubContributionCalendarWeek';

  /**
   * The days of contributions in this week.
   */
  contributionDays: Array<IXGitHubContributionCalendarDay>;

  /**
   * The date of the earliest square in this week.
   */
  firstDay: any;
}

/**
 * Varying levels of contributions from none to many.
 */
export const enum XGitHubContributionLevel {
  /**
   * No contributions occurred.
   */
  NONE = 'NONE',

  /**
   * Lowest 25% of days of contributions.
   */
  FIRST_QUARTILE = 'FIRST_QUARTILE',

  /**
   * Second lowest 25% of days of contributions. More contributions than the first quartile.
   */
  SECOND_QUARTILE = 'SECOND_QUARTILE',

  /**
   * Second highest 25% of days of contributions. More contributions than second quartile, less than the fourth quartile.
   */
  THIRD_QUARTILE = 'THIRD_QUARTILE',

  /**
   * Highest 25% of days of contributions. More contributions than the third quartile.
   */
  FOURTH_QUARTILE = 'FOURTH_QUARTILE',
}

/**
 * Ordering options for contribution connections.
 */
export interface IXGitHubContributionOrder {
  /**
   * The ordering direction.
   */
  direction: XGitHubOrderDirection;
}

/**
 * A contributions collection aggregates contributions such as opened issues and commits created by a user.
 */
export interface IXGitHubContributionsCollection {
  __typename: '_xGitHubContributionsCollection';

  /**
   * Commit contributions made by the user, grouped by repository.
   */
  commitContributionsByRepository: Array<IXGitHubCommitContributionsByRepository>;

  /**
   * A calendar of this user's contributions on GitHub.
   */
  contributionCalendar: IXGitHubContributionCalendar;

  /**
   * The years the user has been making contributions with the most recent year first.
   */
  contributionYears: Array<number>;

  /**
   * Determine if this collection's time span ends in the current month.
   */
  doesEndInCurrentMonth: boolean;

  /**
   * The date of the first restricted contribution the user made in this time period. Can only be non-null when the user has enabled private contribution counts.
   */
  earliestRestrictedContributionDate: any | null;

  /**
   * The ending date and time of this collection.
   */
  endedAt: any;

  /**
   * The first issue the user opened on GitHub. This will be null if that issue was opened outside the collection's time range and ignoreTimeRange is false. If the issue is not visible but the user has opted to show private contributions, a RestrictedContribution will be returned.
   */
  firstIssueContribution: _xGitHubCreatedIssueOrRestrictedContribution | null;

  /**
   * The first pull request the user opened on GitHub. This will be null if that pull request was opened outside the collection's time range and ignoreTimeRange is not true. If the pull request is not visible but the user has opted to show private contributions, a RestrictedContribution will be returned.
   */
  firstPullRequestContribution: _xGitHubCreatedPullRequestOrRestrictedContribution | null;

  /**
   * The first repository the user created on GitHub. This will be null if that first repository was created outside the collection's time range and ignoreTimeRange is false. If the repository is not visible, then a RestrictedContribution is returned.
   */
  firstRepositoryContribution: _xGitHubCreatedRepositoryOrRestrictedContribution | null;

  /**
   * Does the user have any more activity in the timeline that occurred prior to the collection's time range?
   */
  hasActivityInThePast: boolean;

  /**
   * Determine if there are any contributions in this collection.
   */
  hasAnyContributions: boolean;

  /**
   * Determine if the user made any contributions in this time frame whose details are not visible because they were made in a private repository. Can only be true if the user enabled private contribution counts.
   */
  hasAnyRestrictedContributions: boolean;

  /**
   * Whether or not the collector's time span is all within the same day.
   */
  isSingleDay: boolean;

  /**
   * A list of issues the user opened.
   */
  issueContributions: IXGitHubCreatedIssueContributionConnection;

  /**
   * Issue contributions made by the user, grouped by repository.
   */
  issueContributionsByRepository: Array<IXGitHubIssueContributionsByRepository>;

  /**
   * When the user signed up for GitHub. This will be null if that sign up date falls outside the collection's time range and ignoreTimeRange is false.
   */
  joinedGitHubContribution: IXGitHubJoinedGitHubContribution | null;

  /**
   * The date of the most recent restricted contribution the user made in this time period. Can only be non-null when the user has enabled private contribution counts.
   */
  latestRestrictedContributionDate: any | null;

  /**
   * When this collection's time range does not include any activity from the user, use this
   * to get a different collection from an earlier time range that does have activity.
   */
  mostRecentCollectionWithActivity: IXGitHubContributionsCollection | null;

  /**
   * Returns a different contributions collection from an earlier time range than this one
   * that does not have any contributions.
   */
  mostRecentCollectionWithoutActivity: IXGitHubContributionsCollection | null;

  /**
   * The issue the user opened on GitHub that received the most comments in the specified
   * time frame.
   */
  popularIssueContribution: IXGitHubCreatedIssueContribution | null;

  /**
   * The pull request the user opened on GitHub that received the most comments in the
   * specified time frame.
   */
  popularPullRequestContribution: IXGitHubCreatedPullRequestContribution | null;

  /**
   * Pull request contributions made by the user.
   */
  pullRequestContributions: IXGitHubCreatedPullRequestContributionConnection;

  /**
   * Pull request contributions made by the user, grouped by repository.
   */
  pullRequestContributionsByRepository: Array<IXGitHubPullRequestContributionsByRepository>;

  /**
   * Pull request review contributions made by the user.
   */
  pullRequestReviewContributions: IXGitHubCreatedPullRequestReviewContributionConnection;

  /**
   * Pull request review contributions made by the user, grouped by repository.
   */
  pullRequestReviewContributionsByRepository: Array<IXGitHubPullRequestReviewContributionsByRepository>;

  /**
   * A list of repositories owned by the user that the user created in this time range.
   */
  repositoryContributions: IXGitHubCreatedRepositoryContributionConnection;

  /**
   * A count of contributions made by the user that the viewer cannot access. Only non-zero when the user has chosen to share their private contribution counts.
   */
  restrictedContributionsCount: number;

  /**
   * The beginning date and time of this collection.
   */
  startedAt: any;

  /**
   * How many commits were made by the user in this time span.
   */
  totalCommitContributions: number;

  /**
   * How many issues the user opened.
   */
  totalIssueContributions: number;

  /**
   * How many pull requests the user opened.
   */
  totalPullRequestContributions: number;

  /**
   * How many pull request reviews the user left.
   */
  totalPullRequestReviewContributions: number;

  /**
   * How many different repositories the user committed to.
   */
  totalRepositoriesWithContributedCommits: number;

  /**
   * How many different repositories the user opened issues in.
   */
  totalRepositoriesWithContributedIssues: number;

  /**
   * How many different repositories the user left pull request reviews in.
   */
  totalRepositoriesWithContributedPullRequestReviews: number;

  /**
   * How many different repositories the user opened pull requests in.
   */
  totalRepositoriesWithContributedPullRequests: number;

  /**
   * How many repositories the user created.
   */
  totalRepositoryContributions: number;

  /**
   * The user who made the contributions in this collection.
   */
  user: IXGitHubUser;
}

export interface ICommitContributionsByRepositoryOnXGitHubContributionsCollectionArguments {
  /**
   * How many repositories should be included.
   * @default 25
   */
  maxRepositories?: number | null;
}

export interface IIssueContributionsOnXGitHubContributionsCollectionArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Should the user's first issue ever be excluded from the result.
   * @default false
   */
  excludeFirst?: boolean | null;

  /**
   * Should the user's most commented issue be excluded from the result.
   * @default false
   */
  excludePopular?: boolean | null;

  /**
   * Ordering options for contributions returned from the connection.
   * @default {"direction":"DESC"}
   */
  orderBy?: IXGitHubContributionOrder | null;
}

export interface IIssueContributionsByRepositoryOnXGitHubContributionsCollectionArguments {
  /**
   * How many repositories should be included.
   * @default 25
   */
  maxRepositories?: number | null;

  /**
   * Should the user's first issue ever be excluded from the result.
   * @default false
   */
  excludeFirst?: boolean | null;

  /**
   * Should the user's most commented issue be excluded from the result.
   * @default false
   */
  excludePopular?: boolean | null;
}

export interface IPullRequestContributionsOnXGitHubContributionsCollectionArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Should the user's first pull request ever be excluded from the result.
   * @default false
   */
  excludeFirst?: boolean | null;

  /**
   * Should the user's most commented pull request be excluded from the result.
   * @default false
   */
  excludePopular?: boolean | null;

  /**
   * Ordering options for contributions returned from the connection.
   * @default {"direction":"DESC"}
   */
  orderBy?: IXGitHubContributionOrder | null;
}

export interface IPullRequestContributionsByRepositoryOnXGitHubContributionsCollectionArguments {
  /**
   * How many repositories should be included.
   * @default 25
   */
  maxRepositories?: number | null;

  /**
   * Should the user's first pull request ever be excluded from the result.
   * @default false
   */
  excludeFirst?: boolean | null;

  /**
   * Should the user's most commented pull request be excluded from the result.
   * @default false
   */
  excludePopular?: boolean | null;
}

export interface IPullRequestReviewContributionsOnXGitHubContributionsCollectionArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Ordering options for contributions returned from the connection.
   * @default {"direction":"DESC"}
   */
  orderBy?: IXGitHubContributionOrder | null;
}

export interface IPullRequestReviewContributionsByRepositoryOnXGitHubContributionsCollectionArguments {
  /**
   * How many repositories should be included.
   * @default 25
   */
  maxRepositories?: number | null;
}

export interface IRepositoryContributionsOnXGitHubContributionsCollectionArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Should the user's first repository ever be excluded from the result.
   * @default false
   */
  excludeFirst?: boolean | null;

  /**
   * Ordering options for contributions returned from the connection.
   * @default {"direction":"DESC"}
   */
  orderBy?: IXGitHubContributionOrder | null;
}

export interface ITotalIssueContributionsOnXGitHubContributionsCollectionArguments {
  /**
   * Should the user's first issue ever be excluded from this count.
   * @default false
   */
  excludeFirst?: boolean | null;

  /**
   * Should the user's most commented issue be excluded from this count.
   * @default false
   */
  excludePopular?: boolean | null;
}

export interface ITotalPullRequestContributionsOnXGitHubContributionsCollectionArguments {
  /**
   * Should the user's first pull request ever be excluded from this count.
   * @default false
   */
  excludeFirst?: boolean | null;

  /**
   * Should the user's most commented pull request be excluded from this count.
   * @default false
   */
  excludePopular?: boolean | null;
}

export interface ITotalRepositoriesWithContributedIssuesOnXGitHubContributionsCollectionArguments {
  /**
   * Should the user's first issue ever be excluded from this count.
   * @default false
   */
  excludeFirst?: boolean | null;

  /**
   * Should the user's most commented issue be excluded from this count.
   * @default false
   */
  excludePopular?: boolean | null;
}

export interface ITotalRepositoriesWithContributedPullRequestsOnXGitHubContributionsCollectionArguments {
  /**
   * Should the user's first pull request ever be excluded from this count.
   * @default false
   */
  excludeFirst?: boolean | null;

  /**
   * Should the user's most commented pull request be excluded from this count.
   * @default false
   */
  excludePopular?: boolean | null;
}

export interface ITotalRepositoryContributionsOnXGitHubContributionsCollectionArguments {
  /**
   * Should the user's first repository ever be excluded from this count.
   * @default false
   */
  excludeFirst?: boolean | null;
}

/**
 * Autogenerated input type of ConvertProjectCardNoteToIssue
 */
export interface IXGitHubConvertProjectCardNoteToIssueInput {
  /**
   * The ProjectCard ID to convert.
   */
  projectCardId: string;

  /**
   * The ID of the repository to create the issue in.
   */
  repositoryId: string;

  /**
   * The title of the newly created issue. Defaults to the card's note text.
   */
  title?: string | null;

  /**
   * The body of the newly created issue.
   */
  body?: string | null;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of ConvertProjectCardNoteToIssue
 */
export interface IXGitHubConvertProjectCardNoteToIssuePayload {
  __typename: '_xGitHubConvertProjectCardNoteToIssuePayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The updated ProjectCard.
   */
  projectCard: IXGitHubProjectCard | null;
}

/**
 * Autogenerated input type of ConvertPullRequestToDraft
 */
export interface IXGitHubConvertPullRequestToDraftInput {
  /**
   * ID of the pull request to convert to draft
   */
  pullRequestId: string;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of ConvertPullRequestToDraft
 */
export interface IXGitHubConvertPullRequestToDraftPayload {
  __typename: '_xGitHubConvertPullRequestToDraftPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The pull request that is now a draft.
   */
  pullRequest: IXGitHubPullRequest | null;
}

/**
 * Represents a 'convert_to_draft' event on a given pull request.
 */
export interface IXGitHubConvertToDraftEvent {
  __typename: '_xGitHubConvertToDraftEvent';

  /**
   * Identifies the actor who performed the event.
   */
  actor: _xGitHubActor | null;

  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: any;
  id: string;

  /**
   * PullRequest referenced by event.
   */
  pullRequest: IXGitHubPullRequest;

  /**
   * The HTTP path for this convert to draft event.
   */
  resourcePath: any;

  /**
   * The HTTP URL for this convert to draft event.
   */
  url: any;
}

/**
 * Represents a 'converted_note_to_issue' event on a given issue or pull request.
 */
export interface IXGitHubConvertedNoteToIssueEvent {
  __typename: '_xGitHubConvertedNoteToIssueEvent';

  /**
   * Identifies the actor who performed the event.
   */
  actor: _xGitHubActor | null;

  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: any;

  /**
   * Identifies the primary key from the database.
   */
  databaseId: number | null;
  id: string;
}

/**
 * Autogenerated input type of CreateBranchProtectionRule
 */
export interface IXGitHubCreateBranchProtectionRuleInput {
  /**
   * The global relay id of the repository in which a new branch protection rule should be created in.
   */
  repositoryId: string;

  /**
   * The glob-like pattern used to determine matching branches.
   */
  pattern: string;

  /**
   * Are approving reviews required to update matching branches.
   */
  requiresApprovingReviews?: boolean | null;

  /**
   * Number of approving reviews required to update matching branches.
   */
  requiredApprovingReviewCount?: number | null;

  /**
   * Are commits required to be signed.
   */
  requiresCommitSignatures?: boolean | null;

  /**
   * Are merge commits prohibited from being pushed to this branch.
   */
  requiresLinearHistory?: boolean | null;

  /**
   * Are force pushes allowed on this branch.
   */
  allowsForcePushes?: boolean | null;

  /**
   * Can this branch be deleted.
   */
  allowsDeletions?: boolean | null;

  /**
   * Can admins overwrite branch protection.
   */
  isAdminEnforced?: boolean | null;

  /**
   * Are status checks required to update matching branches.
   */
  requiresStatusChecks?: boolean | null;

  /**
   * Are branches required to be up to date before merging.
   */
  requiresStrictStatusChecks?: boolean | null;

  /**
   * Are reviews from code owners required to update matching branches.
   */
  requiresCodeOwnerReviews?: boolean | null;

  /**
   * Will new commits pushed to matching branches dismiss pull request review approvals.
   */
  dismissesStaleReviews?: boolean | null;

  /**
   * Is dismissal of pull request reviews restricted.
   */
  restrictsReviewDismissals?: boolean | null;

  /**
   * A list of User or Team IDs allowed to dismiss reviews on pull requests targeting matching branches.
   */
  reviewDismissalActorIds?: Array<string> | null;

  /**
   * Is pushing to matching branches restricted.
   */
  restrictsPushes?: boolean | null;

  /**
   * A list of User, Team or App IDs allowed to push to matching branches.
   */
  pushActorIds?: Array<string> | null;

  /**
   * List of required status check contexts that must pass for commits to be accepted to matching branches.
   */
  requiredStatusCheckContexts?: Array<string> | null;

  /**
   * Are conversations required to be resolved before merging.
   */
  requiresConversationResolution?: boolean | null;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of CreateBranchProtectionRule
 */
export interface IXGitHubCreateBranchProtectionRulePayload {
  __typename: '_xGitHubCreateBranchProtectionRulePayload';

  /**
   * The newly created BranchProtectionRule.
   */
  branchProtectionRule: IXGitHubBranchProtectionRule | null;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;
}

/**
 * Autogenerated input type of CreateCheckRun
 */
export interface IXGitHubCreateCheckRunInput {
  /**
   * The node ID of the repository.
   */
  repositoryId: string;

  /**
   * The name of the check.
   */
  name: string;

  /**
   * The SHA of the head commit.
   */
  headSha: any;

  /**
   * The URL of the integrator's site that has the full details of the check.
   */
  detailsUrl?: any | null;

  /**
   * A reference for the run on the integrator's system.
   */
  externalId?: string | null;

  /**
   * The current status.
   */
  status?: XGitHubRequestableCheckStatusState | null;

  /**
   * The time that the check run began.
   */
  startedAt?: any | null;

  /**
   * The final conclusion of the check.
   */
  conclusion?: XGitHubCheckConclusionState | null;

  /**
   * The time that the check run finished.
   */
  completedAt?: any | null;

  /**
   * Descriptive details about the run.
   */
  output?: IXGitHubCheckRunOutput | null;

  /**
   * Possible further actions the integrator can perform, which a user may trigger.
   */
  actions?: Array<IXGitHubCheckRunAction> | null;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of CreateCheckRun
 */
export interface IXGitHubCreateCheckRunPayload {
  __typename: '_xGitHubCreateCheckRunPayload';

  /**
   * The newly created check run.
   */
  checkRun: IXGitHubCheckRun | null;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;
}

/**
 * Autogenerated input type of CreateCheckSuite
 */
export interface IXGitHubCreateCheckSuiteInput {
  /**
   * The Node ID of the repository.
   */
  repositoryId: string;

  /**
   * The SHA of the head commit.
   */
  headSha: any;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of CreateCheckSuite
 */
export interface IXGitHubCreateCheckSuitePayload {
  __typename: '_xGitHubCreateCheckSuitePayload';

  /**
   * The newly created check suite.
   */
  checkSuite: IXGitHubCheckSuite | null;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;
}

/**
 * Autogenerated input type of CreateCommitOnBranch
 */
export interface IXGitHubCreateCommitOnBranchInput {
  /**
   * The Ref to be updated.  Must be a branch.
   */
  branch: IXGitHubCommittableBranch;

  /**
   * A description of changes to files in this commit.
   */
  fileChanges?: IXGitHubFileChanges | null;

  /**
   * The commit message the be included with the commit.
   */
  message: IXGitHubCommitMessage;

  /**
   * The git commit oid expected at the head of the branch prior to the commit
   */
  expectedHeadOid: any;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of CreateCommitOnBranch
 */
export interface IXGitHubCreateCommitOnBranchPayload {
  __typename: '_xGitHubCreateCommitOnBranchPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The new commit.
   */
  commit: IXGitHubCommit | null;

  /**
   * The ref which has been updated to point to the new commit.
   */
  ref: IXGitHubRef | null;
}

/**
 * Autogenerated input type of CreateDiscussion
 */
export interface IXGitHubCreateDiscussionInput {
  /**
   * The id of the repository on which to create the discussion.
   */
  repositoryId: string;

  /**
   * The title of the discussion.
   */
  title: string;

  /**
   * The body of the discussion.
   */
  body: string;

  /**
   * The id of the discussion category to associate with this discussion.
   */
  categoryId: string;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of CreateDiscussion
 */
export interface IXGitHubCreateDiscussionPayload {
  __typename: '_xGitHubCreateDiscussionPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The discussion that was just created.
   */
  discussion: IXGitHubDiscussion | null;
}

/**
 * Autogenerated input type of CreateEnterpriseOrganization
 */
export interface IXGitHubCreateEnterpriseOrganizationInput {
  /**
   * The ID of the enterprise owning the new organization.
   */
  enterpriseId: string;

  /**
   * The login of the new organization.
   */
  login: string;

  /**
   * The profile name of the new organization.
   */
  profileName: string;

  /**
   * The email used for sending billing receipts.
   */
  billingEmail: string;

  /**
   * The logins for the administrators of the new organization.
   */
  adminLogins: Array<string>;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of CreateEnterpriseOrganization
 */
export interface IXGitHubCreateEnterpriseOrganizationPayload {
  __typename: '_xGitHubCreateEnterpriseOrganizationPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The enterprise that owns the created organization.
   */
  enterprise: IXGitHubEnterprise | null;

  /**
   * The organization that was created.
   */
  organization: IXGitHubOrganization | null;
}

/**
 * Autogenerated input type of CreateEnvironment
 */
export interface IXGitHubCreateEnvironmentInput {
  /**
   * The node ID of the repository.
   */
  repositoryId: string;

  /**
   * The name of the environment.
   */
  name: string;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of CreateEnvironment
 */
export interface IXGitHubCreateEnvironmentPayload {
  __typename: '_xGitHubCreateEnvironmentPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The new or existing environment.
   */
  environment: IXGitHubEnvironment | null;
}

/**
 * Autogenerated input type of CreateIpAllowListEntry
 */
export interface IXGitHubCreateIpAllowListEntryInput {
  /**
   * The ID of the owner for which to create the new IP allow list entry.
   */
  ownerId: string;

  /**
   * An IP address or range of addresses in CIDR notation.
   */
  allowListValue: string;

  /**
   * An optional name for the IP allow list entry.
   */
  name?: string | null;

  /**
   * Whether the IP allow list entry is active when an IP allow list is enabled.
   */
  isActive: boolean;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of CreateIpAllowListEntry
 */
export interface IXGitHubCreateIpAllowListEntryPayload {
  __typename: '_xGitHubCreateIpAllowListEntryPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The IP allow list entry that was created.
   */
  ipAllowListEntry: IXGitHubIpAllowListEntry | null;
}

/**
 * Autogenerated input type of CreateIssue
 */
export interface IXGitHubCreateIssueInput {
  /**
   * The Node ID of the repository.
   */
  repositoryId: string;

  /**
   * The title for the issue.
   */
  title: string;

  /**
   * The body for the issue description.
   */
  body?: string | null;

  /**
   * The Node ID for the user assignee for this issue.
   */
  assigneeIds?: Array<string> | null;

  /**
   * The Node ID of the milestone for this issue.
   */
  milestoneId?: string | null;

  /**
   * An array of Node IDs of labels for this issue.
   */
  labelIds?: Array<string> | null;

  /**
   * An array of Node IDs for projects associated with this issue.
   */
  projectIds?: Array<string> | null;

  /**
   * The name of an issue template in the repository, assigns labels and assignees from the template to the issue
   */
  issueTemplate?: string | null;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of CreateIssue
 */
export interface IXGitHubCreateIssuePayload {
  __typename: '_xGitHubCreateIssuePayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The new issue.
   */
  issue: IXGitHubIssue | null;
}

/**
 * Autogenerated input type of CreateLabel
 */
export interface IXGitHubCreateLabelInput {
  /**
   * The Node ID of the repository.
   */
  repositoryId: string;

  /**
   * A 6 character hex code, without the leading #, identifying the color of the label.
   */
  color: string;

  /**
   * The name of the label.
   */
  name: string;

  /**
   * A brief description of the label, such as its purpose.
   */
  description?: string | null;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of CreateLabel
 */
export interface IXGitHubCreateLabelPayload {
  __typename: '_xGitHubCreateLabelPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The new label.
   */
  label: IXGitHubLabel | null;
}

/**
 * Autogenerated input type of CreateProject
 */
export interface IXGitHubCreateProjectInput {
  /**
   * The owner ID to create the project under.
   */
  ownerId: string;

  /**
   * The name of project.
   */
  name: string;

  /**
   * The description of project.
   */
  body?: string | null;

  /**
   * The name of the GitHub-provided template.
   */
  template?: XGitHubProjectTemplate | null;

  /**
   * A list of repository IDs to create as linked repositories for the project
   */
  repositoryIds?: Array<string> | null;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of CreateProject
 */
export interface IXGitHubCreateProjectPayload {
  __typename: '_xGitHubCreateProjectPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The new project.
   */
  project: IXGitHubProject | null;
}

/**
 * Autogenerated input type of CreatePullRequest
 */
export interface IXGitHubCreatePullRequestInput {
  /**
   * The Node ID of the repository.
   */
  repositoryId: string;

  /**
   * The name of the branch you want your changes pulled into. This should be an existing branch
   * on the current repository. You cannot update the base branch on a pull request to point
   * to another repository.
   */
  baseRefName: string;

  /**
   * The name of the branch where your changes are implemented. For cross-repository pull requests
   * in the same network, namespace `head_ref_name` with a user like this: `username:branch`.
   */
  headRefName: string;

  /**
   * The title of the pull request.
   */
  title: string;

  /**
   * The contents of the pull request.
   */
  body?: string | null;

  /**
   * Indicates whether maintainers can modify the pull request.
   * @default true
   */
  maintainerCanModify?: boolean | null;

  /**
   * Indicates whether this pull request should be a draft.
   * @default false
   */
  draft?: boolean | null;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of CreatePullRequest
 */
export interface IXGitHubCreatePullRequestPayload {
  __typename: '_xGitHubCreatePullRequestPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The new pull request.
   */
  pullRequest: IXGitHubPullRequest | null;
}

/**
 * Autogenerated input type of CreateRef
 */
export interface IXGitHubCreateRefInput {
  /**
   * The Node ID of the Repository to create the Ref in.
   */
  repositoryId: string;

  /**
   * The fully qualified name of the new Ref (ie: `refs/heads/my_new_branch`).
   */
  name: string;

  /**
   * The GitObjectID that the new Ref shall target. Must point to a commit.
   */
  oid: any;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of CreateRef
 */
export interface IXGitHubCreateRefPayload {
  __typename: '_xGitHubCreateRefPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The newly created ref.
   */
  ref: IXGitHubRef | null;
}

/**
 * Autogenerated input type of CreateRepository
 */
export interface IXGitHubCreateRepositoryInput {
  /**
   * The name of the new repository.
   */
  name: string;

  /**
   * The ID of the owner for the new repository.
   */
  ownerId?: string | null;

  /**
   * A short description of the new repository.
   */
  description?: string | null;

  /**
   * Indicates the repository's visibility level.
   */
  visibility: XGitHubRepositoryVisibility;

  /**
   * Whether this repository should be marked as a template such that anyone who can access it can create new repositories with the same files and directory structure.
   * @default false
   */
  template?: boolean | null;

  /**
   * The URL for a web page about this repository.
   */
  homepageUrl?: any | null;

  /**
   * Indicates if the repository should have the wiki feature enabled.
   * @default false
   */
  hasWikiEnabled?: boolean | null;

  /**
   * Indicates if the repository should have the issues feature enabled.
   * @default true
   */
  hasIssuesEnabled?: boolean | null;

  /**
   * When an organization is specified as the owner, this ID identifies the team that should be granted access to the new repository.
   */
  teamId?: string | null;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of CreateRepository
 */
export interface IXGitHubCreateRepositoryPayload {
  __typename: '_xGitHubCreateRepositoryPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The new repository.
   */
  repository: IXGitHubRepository | null;
}

/**
 * Autogenerated input type of CreateSponsorship
 */
export interface IXGitHubCreateSponsorshipInput {
  /**
   * The ID of the user or organization who is acting as the sponsor, paying for the sponsorship. Required if sponsorLogin is not given.
   */
  sponsorId?: string | null;

  /**
   * The username of the user or organization who is acting as the sponsor, paying for the sponsorship. Required if sponsorId is not given.
   */
  sponsorLogin?: string | null;

  /**
   * The ID of the user or organization who is receiving the sponsorship. Required if sponsorableLogin is not given.
   */
  sponsorableId?: string | null;

  /**
   * The username of the user or organization who is receiving the sponsorship. Required if sponsorableId is not given.
   */
  sponsorableLogin?: string | null;

  /**
   * The ID of one of sponsorable's existing tiers to sponsor at. Required if amount is not specified.
   */
  tierId?: string | null;

  /**
   * The amount to pay to the sponsorable in US dollars. Required if a tierId is not specified. Valid values: 1-12000.
   */
  amount?: number | null;

  /**
   * Whether the sponsorship should happen monthly/yearly or just this one time. Required if a tierId is not specified.
   */
  isRecurring?: boolean | null;

  /**
   * Whether the sponsor should receive email updates from the sponsorable.
   * @default true
   */
  receiveEmails?: boolean | null;

  /**
   * Specify whether others should be able to see that the sponsor is sponsoring the sponsorable. Public visibility still does not reveal which tier is used.
   * @default "PUBLIC"
   */
  privacyLevel?: XGitHubSponsorshipPrivacy | null;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of CreateSponsorship
 */
export interface IXGitHubCreateSponsorshipPayload {
  __typename: '_xGitHubCreateSponsorshipPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The sponsorship that was started.
   */
  sponsorship: IXGitHubSponsorship | null;
}

/**
 * Autogenerated input type of CreateTeamDiscussionComment
 */
export interface IXGitHubCreateTeamDiscussionCommentInput {
  /**
   * The ID of the discussion to which the comment belongs.
   */
  discussionId: string;

  /**
   * The content of the comment.
   */
  body: string;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of CreateTeamDiscussionComment
 */
export interface IXGitHubCreateTeamDiscussionCommentPayload {
  __typename: '_xGitHubCreateTeamDiscussionCommentPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The new comment.
   */
  teamDiscussionComment: IXGitHubTeamDiscussionComment | null;
}

/**
 * Autogenerated input type of CreateTeamDiscussion
 */
export interface IXGitHubCreateTeamDiscussionInput {
  /**
   * The ID of the team to which the discussion belongs.
   */
  teamId: string;

  /**
   * The title of the discussion.
   */
  title: string;

  /**
   * The content of the discussion.
   */
  body: string;

  /**
   * If true, restricts the visibility of this discussion to team members and organization admins. If false or not specified, allows any organization member to view this discussion.
   */
  private?: boolean | null;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of CreateTeamDiscussion
 */
export interface IXGitHubCreateTeamDiscussionPayload {
  __typename: '_xGitHubCreateTeamDiscussionPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The new discussion.
   */
  teamDiscussion: IXGitHubTeamDiscussion | null;
}

/**
 * Represents the contribution a user made by committing to a repository.
 */
export interface IXGitHubCreatedCommitContribution {
  __typename: '_xGitHubCreatedCommitContribution';

  /**
   * How many commits were made on this day to this repository by the user.
   */
  commitCount: number;

  /**
   * Whether this contribution is associated with a record you do not have access to. For
   * example, your own 'first issue' contribution may have been made on a repository you can no
   * longer access.
   */
  isRestricted: boolean;

  /**
   * When this contribution was made.
   */
  occurredAt: any;

  /**
   * The repository the user made a commit in.
   */
  repository: IXGitHubRepository;

  /**
   * The HTTP path for this contribution.
   */
  resourcePath: any;

  /**
   * The HTTP URL for this contribution.
   */
  url: any;

  /**
   * The user who made this contribution.
   */
  user: IXGitHubUser;
}

/**
 * The connection type for CreatedCommitContribution.
 */
export interface IXGitHubCreatedCommitContributionConnection {
  __typename: '_xGitHubCreatedCommitContributionConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubCreatedCommitContributionEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitHubCreatedCommitContribution | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * Identifies the total count of commits across days and repositories in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface IXGitHubCreatedCommitContributionEdge {
  __typename: '_xGitHubCreatedCommitContributionEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitHubCreatedCommitContribution | null;
}

/**
 * Represents the contribution a user made on GitHub by opening an issue.
 */
export interface IXGitHubCreatedIssueContribution {
  __typename: '_xGitHubCreatedIssueContribution';

  /**
   * Whether this contribution is associated with a record you do not have access to. For
   * example, your own 'first issue' contribution may have been made on a repository you can no
   * longer access.
   */
  isRestricted: boolean;

  /**
   * The issue that was opened.
   */
  issue: IXGitHubIssue;

  /**
   * When this contribution was made.
   */
  occurredAt: any;

  /**
   * The HTTP path for this contribution.
   */
  resourcePath: any;

  /**
   * The HTTP URL for this contribution.
   */
  url: any;

  /**
   * The user who made this contribution.
   */
  user: IXGitHubUser;
}

/**
 * The connection type for CreatedIssueContribution.
 */
export interface IXGitHubCreatedIssueContributionConnection {
  __typename: '_xGitHubCreatedIssueContributionConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubCreatedIssueContributionEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitHubCreatedIssueContribution | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface IXGitHubCreatedIssueContributionEdge {
  __typename: '_xGitHubCreatedIssueContributionEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitHubCreatedIssueContribution | null;
}

/**
 * Represents either a issue the viewer can access or a restricted contribution.
 */
export type _xGitHubCreatedIssueOrRestrictedContribution =
  | IXGitHubCreatedIssueContribution
  | IXGitHubRestrictedContribution;

/**
 * Represents the contribution a user made on GitHub by opening a pull request.
 */
export interface IXGitHubCreatedPullRequestContribution {
  __typename: '_xGitHubCreatedPullRequestContribution';

  /**
   * Whether this contribution is associated with a record you do not have access to. For
   * example, your own 'first issue' contribution may have been made on a repository you can no
   * longer access.
   */
  isRestricted: boolean;

  /**
   * When this contribution was made.
   */
  occurredAt: any;

  /**
   * The pull request that was opened.
   */
  pullRequest: IXGitHubPullRequest;

  /**
   * The HTTP path for this contribution.
   */
  resourcePath: any;

  /**
   * The HTTP URL for this contribution.
   */
  url: any;

  /**
   * The user who made this contribution.
   */
  user: IXGitHubUser;
}

/**
 * The connection type for CreatedPullRequestContribution.
 */
export interface IXGitHubCreatedPullRequestContributionConnection {
  __typename: '_xGitHubCreatedPullRequestContributionConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubCreatedPullRequestContributionEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitHubCreatedPullRequestContribution | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface IXGitHubCreatedPullRequestContributionEdge {
  __typename: '_xGitHubCreatedPullRequestContributionEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitHubCreatedPullRequestContribution | null;
}

/**
 * Represents either a pull request the viewer can access or a restricted contribution.
 */
export type _xGitHubCreatedPullRequestOrRestrictedContribution =
  | IXGitHubCreatedPullRequestContribution
  | IXGitHubRestrictedContribution;

/**
 * Represents the contribution a user made by leaving a review on a pull request.
 */
export interface IXGitHubCreatedPullRequestReviewContribution {
  __typename: '_xGitHubCreatedPullRequestReviewContribution';

  /**
   * Whether this contribution is associated with a record you do not have access to. For
   * example, your own 'first issue' contribution may have been made on a repository you can no
   * longer access.
   */
  isRestricted: boolean;

  /**
   * When this contribution was made.
   */
  occurredAt: any;

  /**
   * The pull request the user reviewed.
   */
  pullRequest: IXGitHubPullRequest;

  /**
   * The review the user left on the pull request.
   */
  pullRequestReview: IXGitHubPullRequestReview;

  /**
   * The repository containing the pull request that the user reviewed.
   */
  repository: IXGitHubRepository;

  /**
   * The HTTP path for this contribution.
   */
  resourcePath: any;

  /**
   * The HTTP URL for this contribution.
   */
  url: any;

  /**
   * The user who made this contribution.
   */
  user: IXGitHubUser;
}

/**
 * The connection type for CreatedPullRequestReviewContribution.
 */
export interface IXGitHubCreatedPullRequestReviewContributionConnection {
  __typename: '_xGitHubCreatedPullRequestReviewContributionConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubCreatedPullRequestReviewContributionEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitHubCreatedPullRequestReviewContribution | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface IXGitHubCreatedPullRequestReviewContributionEdge {
  __typename: '_xGitHubCreatedPullRequestReviewContributionEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitHubCreatedPullRequestReviewContribution | null;
}

/**
 * Represents the contribution a user made on GitHub by creating a repository.
 */
export interface IXGitHubCreatedRepositoryContribution {
  __typename: '_xGitHubCreatedRepositoryContribution';

  /**
   * Whether this contribution is associated with a record you do not have access to. For
   * example, your own 'first issue' contribution may have been made on a repository you can no
   * longer access.
   */
  isRestricted: boolean;

  /**
   * When this contribution was made.
   */
  occurredAt: any;

  /**
   * The repository that was created.
   */
  repository: IXGitHubRepository;

  /**
   * The HTTP path for this contribution.
   */
  resourcePath: any;

  /**
   * The HTTP URL for this contribution.
   */
  url: any;

  /**
   * The user who made this contribution.
   */
  user: IXGitHubUser;
}

/**
 * The connection type for CreatedRepositoryContribution.
 */
export interface IXGitHubCreatedRepositoryContributionConnection {
  __typename: '_xGitHubCreatedRepositoryContributionConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubCreatedRepositoryContributionEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitHubCreatedRepositoryContribution | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface IXGitHubCreatedRepositoryContributionEdge {
  __typename: '_xGitHubCreatedRepositoryContributionEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitHubCreatedRepositoryContribution | null;
}

/**
 * Represents either a repository the viewer can access or a restricted contribution.
 */
export type _xGitHubCreatedRepositoryOrRestrictedContribution =
  | IXGitHubCreatedRepositoryContribution
  | IXGitHubRestrictedContribution;

/**
 * Represents a mention made by one issue or pull request to another.
 */
export interface IXGitHubCrossReferencedEvent {
  __typename: '_xGitHubCrossReferencedEvent';

  /**
   * Identifies the actor who performed the event.
   */
  actor: _xGitHubActor | null;

  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: any;
  id: string;

  /**
   * Reference originated in a different repository.
   */
  isCrossRepository: boolean;

  /**
   * Identifies when the reference was made.
   */
  referencedAt: any;

  /**
   * The HTTP path for this pull request.
   */
  resourcePath: any;

  /**
   * Issue or pull request that made the reference.
   */
  source: _xGitHubReferencedSubject;

  /**
   * Issue or pull request to which the reference was made.
   */
  target: _xGitHubReferencedSubject;

  /**
   * The HTTP URL for this pull request.
   */
  url: any;

  /**
   * Checks if the target will be closed when the source is merged.
   */
  willCloseTarget: boolean;
}

/**
 * Autogenerated input type of DeclineTopicSuggestion
 */
export interface IXGitHubDeclineTopicSuggestionInput {
  /**
   * The Node ID of the repository.
   */
  repositoryId: string;

  /**
   * The name of the suggested topic.
   */
  name: string;

  /**
   * The reason why the suggested topic is declined.
   */
  reason: XGitHubTopicSuggestionDeclineReason;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of DeclineTopicSuggestion
 */
export interface IXGitHubDeclineTopicSuggestionPayload {
  __typename: '_xGitHubDeclineTopicSuggestionPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The declined topic.
   */
  topic: IXGitHubTopic | null;
}

/**
 * The possible base permissions for repositories.
 */
export const enum XGitHubDefaultRepositoryPermissionField {
  /**
   * No access
   */
  NONE = 'NONE',

  /**
   * Can read repos by default
   */
  READ = 'READ',

  /**
   * Can read and write repos by default
   */
  WRITE = 'WRITE',

  /**
   * Can read, write, and administrate repos by default
   */
  ADMIN = 'ADMIN',
}

/**
 * Entities that can be deleted.
 */
export type _xGitHubDeletable =
  | IXGitHubCommitComment
  | IXGitHubDiscussion
  | IXGitHubDiscussionComment
  | IXGitHubGistComment
  | IXGitHubIssueComment
  | IXGitHubPullRequestReview
  | IXGitHubPullRequestReviewComment
  | IXGitHubTeamDiscussion
  | IXGitHubTeamDiscussionComment;

/**
 * Entities that can be deleted.
 */
export interface IXGitHubDeletable {
  __typename: '_xGitHubDeletable';

  /**
   * Check if the current viewer can delete this object.
   */
  viewerCanDelete: boolean;
}

/**
 * Autogenerated input type of DeleteBranchProtectionRule
 */
export interface IXGitHubDeleteBranchProtectionRuleInput {
  /**
   * The global relay id of the branch protection rule to be deleted.
   */
  branchProtectionRuleId: string;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of DeleteBranchProtectionRule
 */
export interface IXGitHubDeleteBranchProtectionRulePayload {
  __typename: '_xGitHubDeleteBranchProtectionRulePayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;
}

/**
 * Autogenerated input type of DeleteDeployment
 */
export interface IXGitHubDeleteDeploymentInput {
  /**
   * The Node ID of the deployment to be deleted.
   */
  id: string;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of DeleteDeployment
 */
export interface IXGitHubDeleteDeploymentPayload {
  __typename: '_xGitHubDeleteDeploymentPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;
}

/**
 * Autogenerated input type of DeleteDiscussionComment
 */
export interface IXGitHubDeleteDiscussionCommentInput {
  /**
   * The Node id of the discussion comment to delete.
   */
  id: string;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of DeleteDiscussionComment
 */
export interface IXGitHubDeleteDiscussionCommentPayload {
  __typename: '_xGitHubDeleteDiscussionCommentPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The discussion comment that was just deleted.
   */
  comment: IXGitHubDiscussionComment | null;
}

/**
 * Autogenerated input type of DeleteDiscussion
 */
export interface IXGitHubDeleteDiscussionInput {
  /**
   * The id of the discussion to delete.
   */
  id: string;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of DeleteDiscussion
 */
export interface IXGitHubDeleteDiscussionPayload {
  __typename: '_xGitHubDeleteDiscussionPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The discussion that was just deleted.
   */
  discussion: IXGitHubDiscussion | null;
}

/**
 * Autogenerated input type of DeleteEnvironment
 */
export interface IXGitHubDeleteEnvironmentInput {
  /**
   * The Node ID of the environment to be deleted.
   */
  id: string;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of DeleteEnvironment
 */
export interface IXGitHubDeleteEnvironmentPayload {
  __typename: '_xGitHubDeleteEnvironmentPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;
}

/**
 * Autogenerated input type of DeleteIpAllowListEntry
 */
export interface IXGitHubDeleteIpAllowListEntryInput {
  /**
   * The ID of the IP allow list entry to delete.
   */
  ipAllowListEntryId: string;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of DeleteIpAllowListEntry
 */
export interface IXGitHubDeleteIpAllowListEntryPayload {
  __typename: '_xGitHubDeleteIpAllowListEntryPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The IP allow list entry that was deleted.
   */
  ipAllowListEntry: IXGitHubIpAllowListEntry | null;
}

/**
 * Autogenerated input type of DeleteIssueComment
 */
export interface IXGitHubDeleteIssueCommentInput {
  /**
   * The ID of the comment to delete.
   */
  id: string;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of DeleteIssueComment
 */
export interface IXGitHubDeleteIssueCommentPayload {
  __typename: '_xGitHubDeleteIssueCommentPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;
}

/**
 * Autogenerated input type of DeleteIssue
 */
export interface IXGitHubDeleteIssueInput {
  /**
   * The ID of the issue to delete.
   */
  issueId: string;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of DeleteIssue
 */
export interface IXGitHubDeleteIssuePayload {
  __typename: '_xGitHubDeleteIssuePayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The repository the issue belonged to
   */
  repository: IXGitHubRepository | null;
}

/**
 * Autogenerated input type of DeleteLabel
 */
export interface IXGitHubDeleteLabelInput {
  /**
   * The Node ID of the label to be deleted.
   */
  id: string;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of DeleteLabel
 */
export interface IXGitHubDeleteLabelPayload {
  __typename: '_xGitHubDeleteLabelPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;
}

/**
 * Autogenerated input type of DeleteProjectCard
 */
export interface IXGitHubDeleteProjectCardInput {
  /**
   * The id of the card to delete.
   */
  cardId: string;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of DeleteProjectCard
 */
export interface IXGitHubDeleteProjectCardPayload {
  __typename: '_xGitHubDeleteProjectCardPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The column the deleted card was in.
   */
  column: IXGitHubProjectColumn | null;

  /**
   * The deleted card ID.
   */
  deletedCardId: string | null;
}

/**
 * Autogenerated input type of DeleteProjectColumn
 */
export interface IXGitHubDeleteProjectColumnInput {
  /**
   * The id of the column to delete.
   */
  columnId: string;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of DeleteProjectColumn
 */
export interface IXGitHubDeleteProjectColumnPayload {
  __typename: '_xGitHubDeleteProjectColumnPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The deleted column ID.
   */
  deletedColumnId: string | null;

  /**
   * The project the deleted column was in.
   */
  project: IXGitHubProject | null;
}

/**
 * Autogenerated input type of DeleteProject
 */
export interface IXGitHubDeleteProjectInput {
  /**
   * The Project ID to update.
   */
  projectId: string;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of DeleteProject
 */
export interface IXGitHubDeleteProjectPayload {
  __typename: '_xGitHubDeleteProjectPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The repository or organization the project was removed from.
   */
  owner: _xGitHubProjectOwner | null;
}

/**
 * Autogenerated input type of DeletePullRequestReviewComment
 */
export interface IXGitHubDeletePullRequestReviewCommentInput {
  /**
   * The ID of the comment to delete.
   */
  id: string;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of DeletePullRequestReviewComment
 */
export interface IXGitHubDeletePullRequestReviewCommentPayload {
  __typename: '_xGitHubDeletePullRequestReviewCommentPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The pull request review the deleted comment belonged to.
   */
  pullRequestReview: IXGitHubPullRequestReview | null;
}

/**
 * Autogenerated input type of DeletePullRequestReview
 */
export interface IXGitHubDeletePullRequestReviewInput {
  /**
   * The Node ID of the pull request review to delete.
   */
  pullRequestReviewId: string;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of DeletePullRequestReview
 */
export interface IXGitHubDeletePullRequestReviewPayload {
  __typename: '_xGitHubDeletePullRequestReviewPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The deleted pull request review.
   */
  pullRequestReview: IXGitHubPullRequestReview | null;
}

/**
 * Autogenerated input type of DeleteRef
 */
export interface IXGitHubDeleteRefInput {
  /**
   * The Node ID of the Ref to be deleted.
   */
  refId: string;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of DeleteRef
 */
export interface IXGitHubDeleteRefPayload {
  __typename: '_xGitHubDeleteRefPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;
}

/**
 * Autogenerated input type of DeleteTeamDiscussionComment
 */
export interface IXGitHubDeleteTeamDiscussionCommentInput {
  /**
   * The ID of the comment to delete.
   */
  id: string;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of DeleteTeamDiscussionComment
 */
export interface IXGitHubDeleteTeamDiscussionCommentPayload {
  __typename: '_xGitHubDeleteTeamDiscussionCommentPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;
}

/**
 * Autogenerated input type of DeleteTeamDiscussion
 */
export interface IXGitHubDeleteTeamDiscussionInput {
  /**
   * The discussion ID to delete.
   */
  id: string;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of DeleteTeamDiscussion
 */
export interface IXGitHubDeleteTeamDiscussionPayload {
  __typename: '_xGitHubDeleteTeamDiscussionPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;
}

/**
 * Autogenerated input type of DeleteVerifiableDomain
 */
export interface IXGitHubDeleteVerifiableDomainInput {
  /**
   * The ID of the verifiable domain to delete.
   */
  id: string;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of DeleteVerifiableDomain
 */
export interface IXGitHubDeleteVerifiableDomainPayload {
  __typename: '_xGitHubDeleteVerifiableDomainPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The owning account from which the domain was deleted.
   */
  owner: _xGitHubVerifiableDomainOwner | null;
}

/**
 * Represents a 'demilestoned' event on a given issue or pull request.
 */
export interface IXGitHubDemilestonedEvent {
  __typename: '_xGitHubDemilestonedEvent';

  /**
   * Identifies the actor who performed the event.
   */
  actor: _xGitHubActor | null;

  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: any;
  id: string;

  /**
   * Identifies the milestone title associated with the 'demilestoned' event.
   */
  milestoneTitle: string;

  /**
   * Object referenced by event.
   */
  subject: _xGitHubMilestoneItem;
}

/**
 * A repository deploy key.
 */
export interface IXGitHubDeployKey {
  __typename: '_xGitHubDeployKey';

  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: any;
  id: string;

  /**
   * The deploy key.
   */
  key: string;

  /**
   * Whether or not the deploy key is read only.
   */
  readOnly: boolean;

  /**
   * The deploy key title.
   */
  title: string;

  /**
   * Whether or not the deploy key has been verified.
   */
  verified: boolean;
}

/**
 * The connection type for DeployKey.
 */
export interface IXGitHubDeployKeyConnection {
  __typename: '_xGitHubDeployKeyConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubDeployKeyEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitHubDeployKey | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface IXGitHubDeployKeyEdge {
  __typename: '_xGitHubDeployKeyEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitHubDeployKey | null;
}

/**
 * Represents a 'deployed' event on a given pull request.
 */
export interface IXGitHubDeployedEvent {
  __typename: '_xGitHubDeployedEvent';

  /**
   * Identifies the actor who performed the event.
   */
  actor: _xGitHubActor | null;

  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: any;

  /**
   * Identifies the primary key from the database.
   */
  databaseId: number | null;

  /**
   * The deployment associated with the 'deployed' event.
   */
  deployment: IXGitHubDeployment;
  id: string;

  /**
   * PullRequest referenced by event.
   */
  pullRequest: IXGitHubPullRequest;

  /**
   * The ref associated with the 'deployed' event.
   */
  ref: IXGitHubRef | null;
}

/**
 * Represents triggered deployment instance.
 */
export interface IXGitHubDeployment {
  __typename: '_xGitHubDeployment';

  /**
   * Identifies the commit sha of the deployment.
   */
  commit: IXGitHubCommit | null;

  /**
   * Identifies the oid of the deployment commit, even if the commit has been deleted.
   */
  commitOid: string;

  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: any;

  /**
   * Identifies the actor who triggered the deployment.
   */
  creator: _xGitHubActor;

  /**
   * Identifies the primary key from the database.
   */
  databaseId: number | null;

  /**
   * The deployment description.
   */
  description: string | null;

  /**
   * The latest environment to which this deployment was made.
   */
  environment: string | null;
  id: string;

  /**
   * The latest environment to which this deployment was made.
   */
  latestEnvironment: string | null;

  /**
   * The latest status of this deployment.
   */
  latestStatus: IXGitHubDeploymentStatus | null;

  /**
   * The original environment to which this deployment was made.
   */
  originalEnvironment: string | null;

  /**
   * Extra information that a deployment system might need.
   */
  payload: string | null;

  /**
   * Identifies the Ref of the deployment, if the deployment was created by ref.
   */
  ref: IXGitHubRef | null;

  /**
   * Identifies the repository associated with the deployment.
   */
  repository: IXGitHubRepository;

  /**
   * The current state of the deployment.
   */
  state: XGitHubDeploymentState | null;

  /**
   * A list of statuses associated with the deployment.
   */
  statuses: IXGitHubDeploymentStatusConnection | null;

  /**
   * The deployment task.
   */
  task: string | null;

  /**
   * Identifies the date and time when the object was last updated.
   */
  updatedAt: any;
}

export interface IStatusesOnXGitHubDeploymentArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

/**
 * The connection type for Deployment.
 */
export interface IXGitHubDeploymentConnection {
  __typename: '_xGitHubDeploymentConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubDeploymentEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitHubDeployment | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface IXGitHubDeploymentEdge {
  __typename: '_xGitHubDeploymentEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitHubDeployment | null;
}

/**
 * Represents a 'deployment_environment_changed' event on a given pull request.
 */
export interface IXGitHubDeploymentEnvironmentChangedEvent {
  __typename: '_xGitHubDeploymentEnvironmentChangedEvent';

  /**
   * Identifies the actor who performed the event.
   */
  actor: _xGitHubActor | null;

  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: any;

  /**
   * The deployment status that updated the deployment environment.
   */
  deploymentStatus: IXGitHubDeploymentStatus;
  id: string;

  /**
   * PullRequest referenced by event.
   */
  pullRequest: IXGitHubPullRequest;
}

/**
 * Ordering options for deployment connections
 */
export interface IXGitHubDeploymentOrder {
  /**
   * The field to order deployments by.
   */
  field: XGitHubDeploymentOrderField;

  /**
   * The ordering direction.
   */
  direction: XGitHubOrderDirection;
}

/**
 * Properties by which deployment connections can be ordered.
 */
export const enum XGitHubDeploymentOrderField {
  /**
   * Order collection by creation time
   */
  CREATED_AT = 'CREATED_AT',
}

/**
 * A protection rule.
 */
export interface IXGitHubDeploymentProtectionRule {
  __typename: '_xGitHubDeploymentProtectionRule';

  /**
   * Identifies the primary key from the database.
   */
  databaseId: number | null;

  /**
   * The teams or users that can review the deployment
   */
  reviewers: IXGitHubDeploymentReviewerConnection;

  /**
   * The timeout in minutes for this protection rule.
   */
  timeout: number;

  /**
   * The type of protection rule.
   */
  type: XGitHubDeploymentProtectionRuleType;
}

export interface IReviewersOnXGitHubDeploymentProtectionRuleArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

/**
 * The connection type for DeploymentProtectionRule.
 */
export interface IXGitHubDeploymentProtectionRuleConnection {
  __typename: '_xGitHubDeploymentProtectionRuleConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubDeploymentProtectionRuleEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitHubDeploymentProtectionRule | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface IXGitHubDeploymentProtectionRuleEdge {
  __typename: '_xGitHubDeploymentProtectionRuleEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitHubDeploymentProtectionRule | null;
}

/**
 * The possible protection rule types.
 */
export const enum XGitHubDeploymentProtectionRuleType {
  /**
   * Required reviewers
   */
  REQUIRED_REVIEWERS = 'REQUIRED_REVIEWERS',

  /**
   * Wait timer
   */
  WAIT_TIMER = 'WAIT_TIMER',
}

/**
 * A request to deploy a workflow run to an environment.
 */
export interface IXGitHubDeploymentRequest {
  __typename: '_xGitHubDeploymentRequest';

  /**
   * Whether or not the current user can approve the deployment
   */
  currentUserCanApprove: boolean;

  /**
   * The target environment of the deployment
   */
  environment: IXGitHubEnvironment;

  /**
   * The teams or users that can review the deployment
   */
  reviewers: IXGitHubDeploymentReviewerConnection;

  /**
   * The wait timer in minutes configured in the environment
   */
  waitTimer: number;

  /**
   * The wait timer in minutes configured in the environment
   */
  waitTimerStartedAt: any | null;
}

export interface IReviewersOnXGitHubDeploymentRequestArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

/**
 * The connection type for DeploymentRequest.
 */
export interface IXGitHubDeploymentRequestConnection {
  __typename: '_xGitHubDeploymentRequestConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubDeploymentRequestEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitHubDeploymentRequest | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface IXGitHubDeploymentRequestEdge {
  __typename: '_xGitHubDeploymentRequestEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitHubDeploymentRequest | null;
}

/**
 * A deployment review.
 */
export interface IXGitHubDeploymentReview {
  __typename: '_xGitHubDeploymentReview';

  /**
   * The comment the user left.
   */
  comment: string;

  /**
   * Identifies the primary key from the database.
   */
  databaseId: number | null;

  /**
   * The environments approved or rejected
   */
  environments: IXGitHubEnvironmentConnection;
  id: string;

  /**
   * The decision of the user.
   */
  state: XGitHubDeploymentReviewState;

  /**
   * The user that reviewed the deployment.
   */
  user: IXGitHubUser;
}

export interface IEnvironmentsOnXGitHubDeploymentReviewArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

/**
 * The connection type for DeploymentReview.
 */
export interface IXGitHubDeploymentReviewConnection {
  __typename: '_xGitHubDeploymentReviewConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubDeploymentReviewEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitHubDeploymentReview | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface IXGitHubDeploymentReviewEdge {
  __typename: '_xGitHubDeploymentReviewEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitHubDeploymentReview | null;
}

/**
 * The possible states for a deployment review.
 */
export const enum XGitHubDeploymentReviewState {
  /**
   * The deployment was approved.
   */
  APPROVED = 'APPROVED',

  /**
   * The deployment was rejected.
   */
  REJECTED = 'REJECTED',
}

/**
 * Users and teams.
 */
export type _xGitHubDeploymentReviewer = IXGitHubTeam | IXGitHubUser;

/**
 * The connection type for DeploymentReviewer.
 */
export interface IXGitHubDeploymentReviewerConnection {
  __typename: '_xGitHubDeploymentReviewerConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubDeploymentReviewerEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<_xGitHubDeploymentReviewer | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface IXGitHubDeploymentReviewerEdge {
  __typename: '_xGitHubDeploymentReviewerEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: _xGitHubDeploymentReviewer | null;
}

/**
 * The possible states in which a deployment can be.
 */
export const enum XGitHubDeploymentState {
  /**
   * The pending deployment was not updated after 30 minutes.
   */
  ABANDONED = 'ABANDONED',

  /**
   * The deployment is currently active.
   */
  ACTIVE = 'ACTIVE',

  /**
   * An inactive transient deployment.
   */
  DESTROYED = 'DESTROYED',

  /**
   * The deployment experienced an error.
   */
  ERROR = 'ERROR',

  /**
   * The deployment has failed.
   */
  FAILURE = 'FAILURE',

  /**
   * The deployment is inactive.
   */
  INACTIVE = 'INACTIVE',

  /**
   * The deployment is pending.
   */
  PENDING = 'PENDING',

  /**
   * The deployment has queued
   */
  QUEUED = 'QUEUED',

  /**
   * The deployment is in progress.
   */
  IN_PROGRESS = 'IN_PROGRESS',

  /**
   * The deployment is waiting.
   */
  WAITING = 'WAITING',
}

/**
 * Describes the status of a given deployment attempt.
 */
export interface IXGitHubDeploymentStatus {
  __typename: '_xGitHubDeploymentStatus';

  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: any;

  /**
   * Identifies the actor who triggered the deployment.
   */
  creator: _xGitHubActor;

  /**
   * Identifies the deployment associated with status.
   */
  deployment: IXGitHubDeployment;

  /**
   * Identifies the description of the deployment.
   */
  description: string | null;

  /**
   * Identifies the environment URL of the deployment.
   */
  environmentUrl: any | null;
  id: string;

  /**
   * Identifies the log URL of the deployment.
   */
  logUrl: any | null;

  /**
   * Identifies the current state of the deployment.
   */
  state: XGitHubDeploymentStatusState;

  /**
   * Identifies the date and time when the object was last updated.
   */
  updatedAt: any;
}

/**
 * The connection type for DeploymentStatus.
 */
export interface IXGitHubDeploymentStatusConnection {
  __typename: '_xGitHubDeploymentStatusConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubDeploymentStatusEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitHubDeploymentStatus | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface IXGitHubDeploymentStatusEdge {
  __typename: '_xGitHubDeploymentStatusEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitHubDeploymentStatus | null;
}

/**
 * The possible states for a deployment status.
 */
export const enum XGitHubDeploymentStatusState {
  /**
   * The deployment is pending.
   */
  PENDING = 'PENDING',

  /**
   * The deployment was successful.
   */
  SUCCESS = 'SUCCESS',

  /**
   * The deployment has failed.
   */
  FAILURE = 'FAILURE',

  /**
   * The deployment is inactive.
   */
  INACTIVE = 'INACTIVE',

  /**
   * The deployment experienced an error.
   */
  ERROR = 'ERROR',

  /**
   * The deployment is queued
   */
  QUEUED = 'QUEUED',

  /**
   * The deployment is in progress.
   */
  IN_PROGRESS = 'IN_PROGRESS',

  /**
   * The deployment is waiting.
   */
  WAITING = 'WAITING',
}

/**
 * The possible sides of a diff.
 */
export const enum XGitHubDiffSide {
  /**
   * The left side of the diff.
   */
  LEFT = 'LEFT',

  /**
   * The right side of the diff.
   */
  RIGHT = 'RIGHT',
}

/**
 * Autogenerated input type of DisablePullRequestAutoMerge
 */
export interface IXGitHubDisablePullRequestAutoMergeInput {
  /**
   * ID of the pull request to disable auto merge on.
   */
  pullRequestId: string;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of DisablePullRequestAutoMerge
 */
export interface IXGitHubDisablePullRequestAutoMergePayload {
  __typename: '_xGitHubDisablePullRequestAutoMergePayload';

  /**
   * Identifies the actor who performed the event.
   */
  actor: _xGitHubActor | null;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The pull request auto merge was disabled on.
   */
  pullRequest: IXGitHubPullRequest | null;
}

/**
 * Represents a 'disconnected' event on a given issue or pull request.
 */
export interface IXGitHubDisconnectedEvent {
  __typename: '_xGitHubDisconnectedEvent';

  /**
   * Identifies the actor who performed the event.
   */
  actor: _xGitHubActor | null;

  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: any;
  id: string;

  /**
   * Reference originated in a different repository.
   */
  isCrossRepository: boolean;

  /**
   * Issue or pull request from which the issue was disconnected.
   */
  source: _xGitHubReferencedSubject;

  /**
   * Issue or pull request which was disconnected.
   */
  subject: _xGitHubReferencedSubject;
}

/**
 * A discussion in a repository.
 */
export interface IXGitHubDiscussion {
  __typename: '_xGitHubDiscussion';

  /**
   * Reason that the conversation was locked.
   */
  activeLockReason: XGitHubLockReason | null;

  /**
   * The comment chosen as this discussion's answer, if any.
   */
  answer: IXGitHubDiscussionComment | null;

  /**
   * The time when a user chose this discussion's answer, if answered.
   */
  answerChosenAt: any | null;

  /**
   * The user who chose this discussion's answer, if answered.
   */
  answerChosenBy: _xGitHubActor | null;

  /**
   * The actor who authored the comment.
   */
  author: _xGitHubActor | null;

  /**
   * Author's association with the subject of the comment.
   */
  authorAssociation: XGitHubCommentAuthorAssociation;

  /**
   * The main text of the discussion post.
   */
  body: string;

  /**
   * The body rendered to HTML.
   */
  bodyHTML: any;

  /**
   * The body rendered to text.
   */
  bodyText: string;

  /**
   * The category for this discussion.
   */
  category: IXGitHubDiscussionCategory;

  /**
   * The replies to the discussion.
   */
  comments: IXGitHubDiscussionCommentConnection;

  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: any;

  /**
   * Check if this comment was created via an email reply.
   */
  createdViaEmail: boolean;

  /**
   * Identifies the primary key from the database.
   */
  databaseId: number | null;

  /**
   * The actor who edited the comment.
   */
  editor: _xGitHubActor | null;
  id: string;

  /**
   * Check if this comment was edited and includes an edit with the creation data
   */
  includesCreatedEdit: boolean;

  /**
   * A list of labels associated with the object.
   */
  labels: IXGitHubLabelConnection | null;

  /**
   * The moment the editor made the last edit
   */
  lastEditedAt: any | null;

  /**
   * `true` if the object is locked
   */
  locked: boolean;

  /**
   * The number identifying this discussion within the repository.
   */
  number: number;

  /**
   * Identifies when the comment was published at.
   */
  publishedAt: any | null;

  /**
   * A list of reactions grouped by content left on the subject.
   */
  reactionGroups: Array<IXGitHubReactionGroup> | null;

  /**
   * A list of Reactions left on the Issue.
   */
  reactions: IXGitHubReactionConnection;

  /**
   * The repository associated with this node.
   */
  repository: IXGitHubRepository;

  /**
   * The path for this discussion.
   */
  resourcePath: any;

  /**
   * The title of this discussion.
   */
  title: string;

  /**
   * Identifies the date and time when the object was last updated.
   */
  updatedAt: any;

  /**
   * Number of upvotes that this subject has received.
   */
  upvoteCount: number;

  /**
   * The URL for this discussion.
   */
  url: any;

  /**
   * A list of edits to this content.
   */
  userContentEdits: IXGitHubUserContentEditConnection | null;

  /**
   * Check if the current viewer can delete this object.
   */
  viewerCanDelete: boolean;

  /**
   * Can user react to this subject
   */
  viewerCanReact: boolean;

  /**
   * Check if the viewer is able to change their subscription status for the repository.
   */
  viewerCanSubscribe: boolean;

  /**
   * Check if the current viewer can update this object.
   */
  viewerCanUpdate: boolean;

  /**
   * Whether or not the current user can add or remove an upvote on this subject.
   */
  viewerCanUpvote: boolean;

  /**
   * Did the viewer author this comment.
   */
  viewerDidAuthor: boolean;

  /**
   * Whether or not the current user has already upvoted this subject.
   */
  viewerHasUpvoted: boolean;

  /**
   * Identifies if the viewer is watching, not watching, or ignoring the subscribable entity.
   */
  viewerSubscription: XGitHubSubscriptionState | null;
}

export interface ICommentsOnXGitHubDiscussionArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface ILabelsOnXGitHubDiscussionArguments {
  /**
   * Ordering options for labels returned from the connection.
   * @default {"field":"CREATED_AT","direction":"ASC"}
   */
  orderBy?: IXGitHubLabelOrder | null;

  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IReactionsOnXGitHubDiscussionArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Allows filtering Reactions by emoji.
   */
  content?: XGitHubReactionContent | null;

  /**
   * Allows specifying the order in which reactions are returned.
   */
  orderBy?: IXGitHubReactionOrder | null;
}

export interface IUserContentEditsOnXGitHubDiscussionArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

/**
 * A category for discussions in a repository.
 */
export interface IXGitHubDiscussionCategory {
  __typename: '_xGitHubDiscussionCategory';

  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: any;

  /**
   * A description of this category.
   */
  description: string | null;

  /**
   * An emoji representing this category.
   */
  emoji: string;

  /**
   * This category's emoji rendered as HTML.
   */
  emojiHTML: any;
  id: string;

  /**
   * Whether or not discussions in this category support choosing an answer with the markDiscussionCommentAsAnswer mutation.
   */
  isAnswerable: boolean;

  /**
   * The name of this category.
   */
  name: string;

  /**
   * The repository associated with this node.
   */
  repository: IXGitHubRepository;

  /**
   * Identifies the date and time when the object was last updated.
   */
  updatedAt: any;
}

/**
 * The connection type for DiscussionCategory.
 */
export interface IXGitHubDiscussionCategoryConnection {
  __typename: '_xGitHubDiscussionCategoryConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubDiscussionCategoryEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitHubDiscussionCategory | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface IXGitHubDiscussionCategoryEdge {
  __typename: '_xGitHubDiscussionCategoryEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitHubDiscussionCategory | null;
}

/**
 * A comment on a discussion.
 */
export interface IXGitHubDiscussionComment {
  __typename: '_xGitHubDiscussionComment';

  /**
   * The actor who authored the comment.
   */
  author: _xGitHubActor | null;

  /**
   * Author's association with the subject of the comment.
   */
  authorAssociation: XGitHubCommentAuthorAssociation;

  /**
   * The body as Markdown.
   */
  body: string;

  /**
   * The body rendered to HTML.
   */
  bodyHTML: any;

  /**
   * The body rendered to text.
   */
  bodyText: string;

  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: any;

  /**
   * Check if this comment was created via an email reply.
   */
  createdViaEmail: boolean;

  /**
   * Identifies the primary key from the database.
   */
  databaseId: number | null;

  /**
   * The time when this replied-to comment was deleted
   */
  deletedAt: any | null;

  /**
   * The discussion this comment was created in
   */
  discussion: IXGitHubDiscussion | null;

  /**
   * The actor who edited the comment.
   */
  editor: _xGitHubActor | null;
  id: string;

  /**
   * Check if this comment was edited and includes an edit with the creation data
   */
  includesCreatedEdit: boolean;

  /**
   * Has this comment been chosen as the answer of its discussion?
   */
  isAnswer: boolean;

  /**
   * Returns whether or not a comment has been minimized.
   */
  isMinimized: boolean;

  /**
   * The moment the editor made the last edit
   */
  lastEditedAt: any | null;

  /**
   * Returns why the comment was minimized.
   */
  minimizedReason: string | null;

  /**
   * Identifies when the comment was published at.
   */
  publishedAt: any | null;

  /**
   * A list of reactions grouped by content left on the subject.
   */
  reactionGroups: Array<IXGitHubReactionGroup> | null;

  /**
   * A list of Reactions left on the Issue.
   */
  reactions: IXGitHubReactionConnection;

  /**
   * The threaded replies to this comment.
   */
  replies: IXGitHubDiscussionCommentConnection;

  /**
   * The discussion comment this comment is a reply to
   */
  replyTo: IXGitHubDiscussionComment | null;

  /**
   * The path for this discussion comment.
   */
  resourcePath: any;

  /**
   * Identifies the date and time when the object was last updated.
   */
  updatedAt: any;

  /**
   * Number of upvotes that this subject has received.
   */
  upvoteCount: number;

  /**
   * The URL for this discussion comment.
   */
  url: any;

  /**
   * A list of edits to this content.
   */
  userContentEdits: IXGitHubUserContentEditConnection | null;

  /**
   * Check if the current viewer can delete this object.
   */
  viewerCanDelete: boolean;

  /**
   * Can the current user mark this comment as an answer?
   */
  viewerCanMarkAsAnswer: boolean;

  /**
   * Check if the current viewer can minimize this object.
   */
  viewerCanMinimize: boolean;

  /**
   * Can user react to this subject
   */
  viewerCanReact: boolean;

  /**
   * Can the current user unmark this comment as an answer?
   */
  viewerCanUnmarkAsAnswer: boolean;

  /**
   * Check if the current viewer can update this object.
   */
  viewerCanUpdate: boolean;

  /**
   * Whether or not the current user can add or remove an upvote on this subject.
   */
  viewerCanUpvote: boolean;

  /**
   * Reasons why the current viewer can not update this comment.
   */
  viewerCannotUpdateReasons: Array<XGitHubCommentCannotUpdateReason>;

  /**
   * Did the viewer author this comment.
   */
  viewerDidAuthor: boolean;

  /**
   * Whether or not the current user has already upvoted this subject.
   */
  viewerHasUpvoted: boolean;
}

export interface IReactionsOnXGitHubDiscussionCommentArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Allows filtering Reactions by emoji.
   */
  content?: XGitHubReactionContent | null;

  /**
   * Allows specifying the order in which reactions are returned.
   */
  orderBy?: IXGitHubReactionOrder | null;
}

export interface IRepliesOnXGitHubDiscussionCommentArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IUserContentEditsOnXGitHubDiscussionCommentArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

/**
 * The connection type for DiscussionComment.
 */
export interface IXGitHubDiscussionCommentConnection {
  __typename: '_xGitHubDiscussionCommentConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubDiscussionCommentEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitHubDiscussionComment | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface IXGitHubDiscussionCommentEdge {
  __typename: '_xGitHubDiscussionCommentEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitHubDiscussionComment | null;
}

/**
 * The connection type for Discussion.
 */
export interface IXGitHubDiscussionConnection {
  __typename: '_xGitHubDiscussionConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubDiscussionEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitHubDiscussion | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface IXGitHubDiscussionEdge {
  __typename: '_xGitHubDiscussionEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitHubDiscussion | null;
}

/**
 * Ways in which lists of discussions can be ordered upon return.
 */
export interface IXGitHubDiscussionOrder {
  /**
   * The field by which to order discussions.
   */
  field: XGitHubDiscussionOrderField;

  /**
   * The direction in which to order discussions by the specified field.
   */
  direction: XGitHubOrderDirection;
}

/**
 * Properties by which discussion connections can be ordered.
 */
export const enum XGitHubDiscussionOrderField {
  /**
   * Order discussions by creation time.
   */
  CREATED_AT = 'CREATED_AT',

  /**
   * Order discussions by most recent modification time.
   */
  UPDATED_AT = 'UPDATED_AT',
}

/**
 * Autogenerated input type of DismissPullRequestReview
 */
export interface IXGitHubDismissPullRequestReviewInput {
  /**
   * The Node ID of the pull request review to modify.
   */
  pullRequestReviewId: string;

  /**
   * The contents of the pull request review dismissal message.
   */
  message: string;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of DismissPullRequestReview
 */
export interface IXGitHubDismissPullRequestReviewPayload {
  __typename: '_xGitHubDismissPullRequestReviewPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The dismissed pull request review.
   */
  pullRequestReview: IXGitHubPullRequestReview | null;
}

/**
 * Specifies a review comment to be left with a Pull Request Review.
 */
export interface IXGitHubDraftPullRequestReviewComment {
  /**
   * Path to the file being commented on.
   */
  path: string;

  /**
   * Position in the file to leave a comment on.
   */
  position: number;

  /**
   * Body of the comment to leave.
   */
  body: string;
}

/**
 * Specifies a review comment thread to be left with a Pull Request Review.
 */
export interface IXGitHubDraftPullRequestReviewThread {
  /**
   * Path to the file being commented on.
   */
  path: string;

  /**
   * The line of the blob to which the thread refers. The end of the line range for multi-line comments.
   */
  line: number;

  /**
   * The side of the diff on which the line resides. For multi-line comments, this is the side for the end of the line range.
   * @default "RIGHT"
   */
  side?: XGitHubDiffSide | null;

  /**
   * The first line of the range to which the comment refers.
   */
  startLine?: number | null;

  /**
   * The side of the diff on which the start line resides.
   * @default "RIGHT"
   */
  startSide?: XGitHubDiffSide | null;

  /**
   * Body of the comment to leave.
   */
  body: string;
}

/**
 * Autogenerated input type of EnablePullRequestAutoMerge
 */
export interface IXGitHubEnablePullRequestAutoMergeInput {
  /**
   * ID of the pull request to enable auto-merge on.
   */
  pullRequestId: string;

  /**
   * Commit headline to use for the commit when the PR is mergable; if omitted, a default message will be used.
   */
  commitHeadline?: string | null;

  /**
   * Commit body to use for the commit when the PR is mergable; if omitted, a default message will be used.
   */
  commitBody?: string | null;

  /**
   * The merge method to use. If omitted, defaults to 'MERGE'
   * @default "MERGE"
   */
  mergeMethod?: XGitHubPullRequestMergeMethod | null;

  /**
   * The email address to associate with this merge.
   */
  authorEmail?: string | null;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of EnablePullRequestAutoMerge
 */
export interface IXGitHubEnablePullRequestAutoMergePayload {
  __typename: '_xGitHubEnablePullRequestAutoMergePayload';

  /**
   * Identifies the actor who performed the event.
   */
  actor: _xGitHubActor | null;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The pull request auto-merge was enabled on.
   */
  pullRequest: IXGitHubPullRequest | null;
}

/**
 * An account to manage multiple organizations with consolidated policy and billing.
 */
export interface IXGitHubEnterprise {
  __typename: '_xGitHubEnterprise';

  /**
   * A URL pointing to the enterprise's public avatar.
   */
  avatarUrl: any;

  /**
   * Enterprise billing information visible to enterprise billing managers.
   */
  billingInfo: IXGitHubEnterpriseBillingInfo | null;

  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: any;

  /**
   * Identifies the primary key from the database.
   */
  databaseId: number | null;

  /**
   * The description of the enterprise.
   */
  description: string | null;

  /**
   * The description of the enterprise as HTML.
   */
  descriptionHTML: any;
  id: string;

  /**
   * The location of the enterprise.
   */
  location: string | null;

  /**
   * A list of users who are members of this enterprise.
   */
  members: IXGitHubEnterpriseMemberConnection;

  /**
   * The name of the enterprise.
   */
  name: string;

  /**
   * A list of organizations that belong to this enterprise.
   */
  organizations: IXGitHubOrganizationConnection;

  /**
   * Enterprise information only visible to enterprise owners.
   */
  ownerInfo: IXGitHubEnterpriseOwnerInfo | null;

  /**
   * The HTTP path for this enterprise.
   */
  resourcePath: any;

  /**
   * The URL-friendly identifier for the enterprise.
   */
  slug: string;

  /**
   * The HTTP URL for this enterprise.
   */
  url: any;

  /**
   * A list of user accounts on this enterprise.
   */
  userAccounts: IXGitHubEnterpriseUserAccountConnection;

  /**
   * Is the current viewer an admin of this enterprise?
   */
  viewerIsAdmin: boolean;

  /**
   * The URL of the enterprise website.
   */
  websiteUrl: any | null;
}

export interface IAvatarUrlOnXGitHubEnterpriseArguments {
  /**
   * The size of the resulting square image.
   */
  size?: number | null;
}

export interface IMembersOnXGitHubEnterpriseArguments {
  /**
   * Only return members within the organizations with these logins
   */
  organizationLogins?: Array<string> | null;

  /**
   * The search string to look for.
   */
  query?: string | null;

  /**
   * Ordering options for members returned from the connection.
   * @default {"field":"LOGIN","direction":"ASC"}
   */
  orderBy?: IXGitHubEnterpriseMemberOrder | null;

  /**
   * The role of the user in the enterprise organization or server.
   */
  role?: XGitHubEnterpriseUserAccountMembershipRole | null;

  /**
   * Only return members within the selected GitHub Enterprise deployment
   */
  deployment?: XGitHubEnterpriseUserDeployment | null;

  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IOrganizationsOnXGitHubEnterpriseArguments {
  /**
   * The search string to look for.
   */
  query?: string | null;

  /**
   * Ordering options for organizations returned from the connection.
   * @default {"field":"LOGIN","direction":"ASC"}
   */
  orderBy?: IXGitHubOrganizationOrder | null;

  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IUserAccountsOnXGitHubEnterpriseArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

/**
 * The connection type for User.
 */
export interface IXGitHubEnterpriseAdministratorConnection {
  __typename: '_xGitHubEnterpriseAdministratorConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubEnterpriseAdministratorEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitHubUser | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * A User who is an administrator of an enterprise.
 */
export interface IXGitHubEnterpriseAdministratorEdge {
  __typename: '_xGitHubEnterpriseAdministratorEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitHubUser | null;

  /**
   * The role of the administrator.
   */
  role: XGitHubEnterpriseAdministratorRole;
}

/**
 * An invitation for a user to become an owner or billing manager of an enterprise.
 */
export interface IXGitHubEnterpriseAdministratorInvitation {
  __typename: '_xGitHubEnterpriseAdministratorInvitation';

  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: any;

  /**
   * The email of the person who was invited to the enterprise.
   */
  email: string | null;

  /**
   * The enterprise the invitation is for.
   */
  enterprise: IXGitHubEnterprise;
  id: string;

  /**
   * The user who was invited to the enterprise.
   */
  invitee: IXGitHubUser | null;

  /**
   * The user who created the invitation.
   */
  inviter: IXGitHubUser | null;

  /**
   * The invitee's pending role in the enterprise (owner or billing_manager).
   */
  role: XGitHubEnterpriseAdministratorRole;
}

/**
 * The connection type for EnterpriseAdministratorInvitation.
 */
export interface IXGitHubEnterpriseAdministratorInvitationConnection {
  __typename: '_xGitHubEnterpriseAdministratorInvitationConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubEnterpriseAdministratorInvitationEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitHubEnterpriseAdministratorInvitation | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface IXGitHubEnterpriseAdministratorInvitationEdge {
  __typename: '_xGitHubEnterpriseAdministratorInvitationEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitHubEnterpriseAdministratorInvitation | null;
}

/**
 * Ordering options for enterprise administrator invitation connections
 */
export interface IXGitHubEnterpriseAdministratorInvitationOrder {
  /**
   * The field to order enterprise administrator invitations by.
   */
  field: XGitHubEnterpriseAdministratorInvitationOrderField;

  /**
   * The ordering direction.
   */
  direction: XGitHubOrderDirection;
}

/**
 * Properties by which enterprise administrator invitation connections can be ordered.
 */
export const enum XGitHubEnterpriseAdministratorInvitationOrderField {
  /**
   * Order enterprise administrator member invitations by creation time
   */
  CREATED_AT = 'CREATED_AT',
}

/**
 * The possible administrator roles in an enterprise account.
 */
export const enum XGitHubEnterpriseAdministratorRole {
  /**
   * Represents an owner of the enterprise account.
   */
  OWNER = 'OWNER',

  /**
   * Represents a billing manager of the enterprise account.
   */
  BILLING_MANAGER = 'BILLING_MANAGER',
}

/**
 * Metadata for an audit entry containing enterprise account information.
 */
export type _xGitHubEnterpriseAuditEntryData =
  | IXGitHubMembersCanDeleteReposClearAuditEntry
  | IXGitHubMembersCanDeleteReposDisableAuditEntry
  | IXGitHubMembersCanDeleteReposEnableAuditEntry
  | IXGitHubOrgInviteToBusinessAuditEntry
  | IXGitHubPrivateRepositoryForkingDisableAuditEntry
  | IXGitHubPrivateRepositoryForkingEnableAuditEntry
  | IXGitHubRepositoryVisibilityChangeDisableAuditEntry
  | IXGitHubRepositoryVisibilityChangeEnableAuditEntry;

/**
 * Metadata for an audit entry containing enterprise account information.
 */
export interface IXGitHubEnterpriseAuditEntryData {
  __typename: '_xGitHubEnterpriseAuditEntryData';

  /**
   * The HTTP path for this enterprise.
   */
  enterpriseResourcePath: any | null;

  /**
   * The slug of the enterprise.
   */
  enterpriseSlug: string | null;

  /**
   * The HTTP URL for this enterprise.
   */
  enterpriseUrl: any | null;
}

/**
 * Enterprise billing information visible to enterprise billing managers and owners.
 */
export interface IXGitHubEnterpriseBillingInfo {
  __typename: '_xGitHubEnterpriseBillingInfo';

  /**
   * The number of licenseable users/emails across the enterprise.
   */
  allLicensableUsersCount: number;

  /**
   * The number of data packs used by all organizations owned by the enterprise.
   */
  assetPacks: number;

  /**
   * The number of available seats across all owned organizations based on the unique number of billable users.
   * @deprecated "`availableSeats` will be replaced with `totalAvailableLicenses` to provide more clarity on the value being returned Use EnterpriseBillingInfo.totalAvailableLicenses instead. Removal on 2020-01-01 UTC."
   */
  availableSeats: number;

  /**
   * The bandwidth quota in GB for all organizations owned by the enterprise.
   */
  bandwidthQuota: number;

  /**
   * The bandwidth usage in GB for all organizations owned by the enterprise.
   */
  bandwidthUsage: number;

  /**
   * The bandwidth usage as a percentage of the bandwidth quota.
   */
  bandwidthUsagePercentage: number;

  /**
   * The total seats across all organizations owned by the enterprise.
   * @deprecated "`seats` will be replaced with `totalLicenses` to provide more clarity on the value being returned Use EnterpriseBillingInfo.totalLicenses instead. Removal on 2020-01-01 UTC."
   */
  seats: number;

  /**
   * The storage quota in GB for all organizations owned by the enterprise.
   */
  storageQuota: number;

  /**
   * The storage usage in GB for all organizations owned by the enterprise.
   */
  storageUsage: number;

  /**
   * The storage usage as a percentage of the storage quota.
   */
  storageUsagePercentage: number;

  /**
   * The number of available licenses across all owned organizations based on the unique number of billable users.
   */
  totalAvailableLicenses: number;

  /**
   * The total number of licenses allocated.
   */
  totalLicenses: number;
}

/**
 * The possible values for the enterprise base repository permission setting.
 */
export const enum XGitHubEnterpriseDefaultRepositoryPermissionSettingValue {
  /**
   * Organizations in the enterprise choose base repository permissions for their members.
   */
  NO_POLICY = 'NO_POLICY',

  /**
   * Organization members will be able to clone, pull, push, and add new collaborators to all organization repositories.
   */
  ADMIN = 'ADMIN',

  /**
   * Organization members will be able to clone, pull, and push all organization repositories.
   */
  WRITE = 'WRITE',

  /**
   * Organization members will be able to clone and pull all organization repositories.
   */
  READ = 'READ',

  /**
   * Organization members will only be able to clone and pull public repositories.
   */
  NONE = 'NONE',
}

/**
 * The possible values for an enabled/disabled enterprise setting.
 */
export const enum XGitHubEnterpriseEnabledDisabledSettingValue {
  /**
   * The setting is enabled for organizations in the enterprise.
   */
  ENABLED = 'ENABLED',

  /**
   * The setting is disabled for organizations in the enterprise.
   */
  DISABLED = 'DISABLED',

  /**
   * There is no policy set for organizations in the enterprise.
   */
  NO_POLICY = 'NO_POLICY',
}

/**
 * The possible values for an enabled/no policy enterprise setting.
 */
export const enum XGitHubEnterpriseEnabledSettingValue {
  /**
   * The setting is enabled for organizations in the enterprise.
   */
  ENABLED = 'ENABLED',

  /**
   * There is no policy set for organizations in the enterprise.
   */
  NO_POLICY = 'NO_POLICY',
}

/**
 * An identity provider configured to provision identities for an enterprise.
 */
export interface IXGitHubEnterpriseIdentityProvider {
  __typename: '_xGitHubEnterpriseIdentityProvider';

  /**
   * The digest algorithm used to sign SAML requests for the identity provider.
   */
  digestMethod: XGitHubSamlDigestAlgorithm | null;

  /**
   * The enterprise this identity provider belongs to.
   */
  enterprise: IXGitHubEnterprise | null;

  /**
   * ExternalIdentities provisioned by this identity provider.
   */
  externalIdentities: IXGitHubExternalIdentityConnection;
  id: string;

  /**
   * The x509 certificate used by the identity provider to sign assertions and responses.
   */
  idpCertificate: any | null;

  /**
   * The Issuer Entity ID for the SAML identity provider.
   */
  issuer: string | null;

  /**
   * Recovery codes that can be used by admins to access the enterprise if the identity provider is unavailable.
   */
  recoveryCodes: Array<string> | null;

  /**
   * The signature algorithm used to sign SAML requests for the identity provider.
   */
  signatureMethod: XGitHubSamlSignatureAlgorithm | null;

  /**
   * The URL endpoint for the identity provider's SAML SSO.
   */
  ssoUrl: any | null;
}

export interface IExternalIdentitiesOnXGitHubEnterpriseIdentityProviderArguments {
  /**
   * Filter to external identities with valid org membership only
   */
  membersOnly?: boolean | null;

  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

/**
 * An object that is a member of an enterprise.
 */
export type _xGitHubEnterpriseMember =
  | IXGitHubEnterpriseUserAccount
  | IXGitHubUser;

/**
 * The connection type for EnterpriseMember.
 */
export interface IXGitHubEnterpriseMemberConnection {
  __typename: '_xGitHubEnterpriseMemberConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubEnterpriseMemberEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<_xGitHubEnterpriseMember | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * A User who is a member of an enterprise through one or more organizations.
 */
export interface IXGitHubEnterpriseMemberEdge {
  __typename: '_xGitHubEnterpriseMemberEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * Whether the user does not have a license for the enterprise.
   * @deprecated "All members consume a license Removal on 2021-01-01 UTC."
   */
  isUnlicensed: boolean;

  /**
   * The item at the end of the edge.
   */
  node: _xGitHubEnterpriseMember | null;
}

/**
 * Ordering options for enterprise member connections.
 */
export interface IXGitHubEnterpriseMemberOrder {
  /**
   * The field to order enterprise members by.
   */
  field: XGitHubEnterpriseMemberOrderField;

  /**
   * The ordering direction.
   */
  direction: XGitHubOrderDirection;
}

/**
 * Properties by which enterprise member connections can be ordered.
 */
export const enum XGitHubEnterpriseMemberOrderField {
  /**
   * Order enterprise members by login
   */
  LOGIN = 'LOGIN',

  /**
   * Order enterprise members by creation time
   */
  CREATED_AT = 'CREATED_AT',
}

/**
 * The possible values for the enterprise members can create repositories setting.
 */
export const enum XGitHubEnterpriseMembersCanCreateRepositoriesSettingValue {
  /**
   * Organization administrators choose whether to allow members to create repositories.
   */
  NO_POLICY = 'NO_POLICY',

  /**
   * Members will be able to create public and private repositories.
   */
  ALL = 'ALL',

  /**
   * Members will be able to create only public repositories.
   */
  PUBLIC = 'PUBLIC',

  /**
   * Members will be able to create only private repositories.
   */
  PRIVATE = 'PRIVATE',

  /**
   * Members will not be able to create public or private repositories.
   */
  DISABLED = 'DISABLED',
}

/**
 * The possible values for the members can make purchases setting.
 */
export const enum XGitHubEnterpriseMembersCanMakePurchasesSettingValue {
  /**
   * The setting is enabled for organizations in the enterprise.
   */
  ENABLED = 'ENABLED',

  /**
   * The setting is disabled for organizations in the enterprise.
   */
  DISABLED = 'DISABLED',
}

/**
 * The connection type for Organization.
 */
export interface IXGitHubEnterpriseOrganizationMembershipConnection {
  __typename: '_xGitHubEnterpriseOrganizationMembershipConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubEnterpriseOrganizationMembershipEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitHubOrganization | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An enterprise organization that a user is a member of.
 */
export interface IXGitHubEnterpriseOrganizationMembershipEdge {
  __typename: '_xGitHubEnterpriseOrganizationMembershipEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitHubOrganization | null;

  /**
   * The role of the user in the enterprise membership.
   */
  role: XGitHubEnterpriseUserAccountMembershipRole;
}

/**
 * The connection type for User.
 */
export interface IXGitHubEnterpriseOutsideCollaboratorConnection {
  __typename: '_xGitHubEnterpriseOutsideCollaboratorConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubEnterpriseOutsideCollaboratorEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitHubUser | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * A User who is an outside collaborator of an enterprise through one or more organizations.
 */
export interface IXGitHubEnterpriseOutsideCollaboratorEdge {
  __typename: '_xGitHubEnterpriseOutsideCollaboratorEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * Whether the outside collaborator does not have a license for the enterprise.
   * @deprecated "All outside collaborators consume a license Removal on 2021-01-01 UTC."
   */
  isUnlicensed: boolean;

  /**
   * The item at the end of the edge.
   */
  node: IXGitHubUser | null;

  /**
   * The enterprise organization repositories this user is a member of.
   */
  repositories: IXGitHubEnterpriseRepositoryInfoConnection;
}

export interface IRepositoriesOnXGitHubEnterpriseOutsideCollaboratorEdgeArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Ordering options for repositories.
   * @default {"field":"NAME","direction":"ASC"}
   */
  orderBy?: IXGitHubRepositoryOrder | null;
}

/**
 * Enterprise information only visible to enterprise owners.
 */
export interface IXGitHubEnterpriseOwnerInfo {
  __typename: '_xGitHubEnterpriseOwnerInfo';

  /**
   * A list of all of the administrators for this enterprise.
   */
  admins: IXGitHubEnterpriseAdministratorConnection;

  /**
   * A list of users in the enterprise who currently have two-factor authentication disabled.
   */
  affiliatedUsersWithTwoFactorDisabled: IXGitHubUserConnection;

  /**
   * Whether or not affiliated users with two-factor authentication disabled exist in the enterprise.
   */
  affiliatedUsersWithTwoFactorDisabledExist: boolean;

  /**
   * The setting value for whether private repository forking is enabled for repositories in organizations in this enterprise.
   */
  allowPrivateRepositoryForkingSetting: XGitHubEnterpriseEnabledDisabledSettingValue;

  /**
   * A list of enterprise organizations configured with the provided private repository forking setting value.
   */
  allowPrivateRepositoryForkingSettingOrganizations: IXGitHubOrganizationConnection;

  /**
   * The setting value for base repository permissions for organizations in this enterprise.
   */
  defaultRepositoryPermissionSetting: XGitHubEnterpriseDefaultRepositoryPermissionSettingValue;

  /**
   * A list of enterprise organizations configured with the provided base repository permission.
   */
  defaultRepositoryPermissionSettingOrganizations: IXGitHubOrganizationConnection;

  /**
   * A list of domains owned by the enterprise.
   */
  domains: IXGitHubVerifiableDomainConnection;

  /**
   * Enterprise Server installations owned by the enterprise.
   */
  enterpriseServerInstallations: IXGitHubEnterpriseServerInstallationConnection;

  /**
   * The setting value for whether the enterprise has an IP allow list enabled.
   */
  ipAllowListEnabledSetting: XGitHubIpAllowListEnabledSettingValue;

  /**
   * The IP addresses that are allowed to access resources owned by the enterprise.
   */
  ipAllowListEntries: IXGitHubIpAllowListEntryConnection;

  /**
   * The setting value for whether the enterprise has IP allow list configuration for installed GitHub Apps enabled.
   */
  ipAllowListForInstalledAppsEnabledSetting: XGitHubIpAllowListForInstalledAppsEnabledSettingValue;

  /**
   * Whether or not the base repository permission is currently being updated.
   */
  isUpdatingDefaultRepositoryPermission: boolean;

  /**
   * Whether the two-factor authentication requirement is currently being enforced.
   */
  isUpdatingTwoFactorRequirement: boolean;

  /**
   * The setting value for whether organization members with admin permissions on a repository can change repository visibility.
   */
  membersCanChangeRepositoryVisibilitySetting: XGitHubEnterpriseEnabledDisabledSettingValue;

  /**
   * A list of enterprise organizations configured with the provided can change repository visibility setting value.
   */
  membersCanChangeRepositoryVisibilitySettingOrganizations: IXGitHubOrganizationConnection;

  /**
   * The setting value for whether members of organizations in the enterprise can create internal repositories.
   */
  membersCanCreateInternalRepositoriesSetting: boolean | null;

  /**
   * The setting value for whether members of organizations in the enterprise can create private repositories.
   */
  membersCanCreatePrivateRepositoriesSetting: boolean | null;

  /**
   * The setting value for whether members of organizations in the enterprise can create public repositories.
   */
  membersCanCreatePublicRepositoriesSetting: boolean | null;

  /**
   * The setting value for whether members of organizations in the enterprise can create repositories.
   */
  membersCanCreateRepositoriesSetting: XGitHubEnterpriseMembersCanCreateRepositoriesSettingValue | null;

  /**
   * A list of enterprise organizations configured with the provided repository creation setting value.
   */
  membersCanCreateRepositoriesSettingOrganizations: IXGitHubOrganizationConnection;

  /**
   * The setting value for whether members with admin permissions for repositories can delete issues.
   */
  membersCanDeleteIssuesSetting: XGitHubEnterpriseEnabledDisabledSettingValue;

  /**
   * A list of enterprise organizations configured with the provided members can delete issues setting value.
   */
  membersCanDeleteIssuesSettingOrganizations: IXGitHubOrganizationConnection;

  /**
   * The setting value for whether members with admin permissions for repositories can delete or transfer repositories.
   */
  membersCanDeleteRepositoriesSetting: XGitHubEnterpriseEnabledDisabledSettingValue;

  /**
   * A list of enterprise organizations configured with the provided members can delete repositories setting value.
   */
  membersCanDeleteRepositoriesSettingOrganizations: IXGitHubOrganizationConnection;

  /**
   * The setting value for whether members of organizations in the enterprise can invite outside collaborators.
   */
  membersCanInviteCollaboratorsSetting: XGitHubEnterpriseEnabledDisabledSettingValue;

  /**
   * A list of enterprise organizations configured with the provided members can invite collaborators setting value.
   */
  membersCanInviteCollaboratorsSettingOrganizations: IXGitHubOrganizationConnection;

  /**
   * Indicates whether members of this enterprise's organizations can purchase additional services for those organizations.
   */
  membersCanMakePurchasesSetting: XGitHubEnterpriseMembersCanMakePurchasesSettingValue;

  /**
   * The setting value for whether members with admin permissions for repositories can update protected branches.
   */
  membersCanUpdateProtectedBranchesSetting: XGitHubEnterpriseEnabledDisabledSettingValue;

  /**
   * A list of enterprise organizations configured with the provided members can update protected branches setting value.
   */
  membersCanUpdateProtectedBranchesSettingOrganizations: IXGitHubOrganizationConnection;

  /**
   * The setting value for whether members can view dependency insights.
   */
  membersCanViewDependencyInsightsSetting: XGitHubEnterpriseEnabledDisabledSettingValue;

  /**
   * A list of enterprise organizations configured with the provided members can view dependency insights setting value.
   */
  membersCanViewDependencyInsightsSettingOrganizations: IXGitHubOrganizationConnection;

  /**
   * Indicates if email notification delivery for this enterprise is restricted to verified or approved domains.
   */
  notificationDeliveryRestrictionEnabledSetting: XGitHubNotificationRestrictionSettingValue;

  /**
   * The setting value for whether organization projects are enabled for organizations in this enterprise.
   */
  organizationProjectsSetting: XGitHubEnterpriseEnabledDisabledSettingValue;

  /**
   * A list of enterprise organizations configured with the provided organization projects setting value.
   */
  organizationProjectsSettingOrganizations: IXGitHubOrganizationConnection;

  /**
   * A list of outside collaborators across the repositories in the enterprise.
   */
  outsideCollaborators: IXGitHubEnterpriseOutsideCollaboratorConnection;

  /**
   * A list of pending administrator invitations for the enterprise.
   */
  pendingAdminInvitations: IXGitHubEnterpriseAdministratorInvitationConnection;

  /**
   * A list of pending collaborator invitations across the repositories in the enterprise.
   */
  pendingCollaboratorInvitations: IXGitHubRepositoryInvitationConnection;

  /**
   * A list of pending collaborators across the repositories in the enterprise.
   * @deprecated "Repository invitations can now be associated with an email, not only an invitee. Use the `pendingCollaboratorInvitations` field instead. Removal on 2020-10-01 UTC."
   */
  pendingCollaborators: IXGitHubEnterprisePendingCollaboratorConnection;

  /**
   * A list of pending member invitations for organizations in the enterprise.
   */
  pendingMemberInvitations: IXGitHubEnterprisePendingMemberInvitationConnection;

  /**
   * The setting value for whether repository projects are enabled in this enterprise.
   */
  repositoryProjectsSetting: XGitHubEnterpriseEnabledDisabledSettingValue;

  /**
   * A list of enterprise organizations configured with the provided repository projects setting value.
   */
  repositoryProjectsSettingOrganizations: IXGitHubOrganizationConnection;

  /**
   * The SAML Identity Provider for the enterprise.
   */
  samlIdentityProvider: IXGitHubEnterpriseIdentityProvider | null;

  /**
   * A list of enterprise organizations configured with the SAML single sign-on setting value.
   */
  samlIdentityProviderSettingOrganizations: IXGitHubOrganizationConnection;

  /**
   * A list of members with a support entitlement.
   */
  supportEntitlements: IXGitHubEnterpriseMemberConnection;

  /**
   * The setting value for whether team discussions are enabled for organizations in this enterprise.
   */
  teamDiscussionsSetting: XGitHubEnterpriseEnabledDisabledSettingValue;

  /**
   * A list of enterprise organizations configured with the provided team discussions setting value.
   */
  teamDiscussionsSettingOrganizations: IXGitHubOrganizationConnection;

  /**
   * The setting value for whether the enterprise requires two-factor authentication for its organizations and users.
   */
  twoFactorRequiredSetting: XGitHubEnterpriseEnabledSettingValue;

  /**
   * A list of enterprise organizations configured with the two-factor authentication setting value.
   */
  twoFactorRequiredSettingOrganizations: IXGitHubOrganizationConnection;
}

export interface IAdminsOnXGitHubEnterpriseOwnerInfoArguments {
  /**
   * The search string to look for.
   */
  query?: string | null;

  /**
   * The role to filter by.
   */
  role?: XGitHubEnterpriseAdministratorRole | null;

  /**
   * Ordering options for administrators returned from the connection.
   * @default {"field":"LOGIN","direction":"ASC"}
   */
  orderBy?: IXGitHubEnterpriseMemberOrder | null;

  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IAffiliatedUsersWithTwoFactorDisabledOnXGitHubEnterpriseOwnerInfoArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IAllowPrivateRepositoryForkingSettingOrganizationsOnXGitHubEnterpriseOwnerInfoArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * The setting value to find organizations for.
   */
  value: boolean;

  /**
   * Ordering options for organizations with this setting.
   * @default {"field":"LOGIN","direction":"ASC"}
   */
  orderBy?: IXGitHubOrganizationOrder | null;
}

export interface IDefaultRepositoryPermissionSettingOrganizationsOnXGitHubEnterpriseOwnerInfoArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * The permission to find organizations for.
   */
  value: XGitHubDefaultRepositoryPermissionField;

  /**
   * Ordering options for organizations with this setting.
   * @default {"field":"LOGIN","direction":"ASC"}
   */
  orderBy?: IXGitHubOrganizationOrder | null;
}

export interface IDomainsOnXGitHubEnterpriseOwnerInfoArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Filter whether or not the domain is verified.
   * @default null
   */
  isVerified?: boolean | null;

  /**
   * Filter whether or not the domain is approved.
   * @default null
   */
  isApproved?: boolean | null;

  /**
   * Ordering options for verifiable domains returned.
   * @default {"field":"DOMAIN","direction":"ASC"}
   */
  orderBy?: IXGitHubVerifiableDomainOrder | null;
}

export interface IEnterpriseServerInstallationsOnXGitHubEnterpriseOwnerInfoArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Whether or not to only return installations discovered via GitHub Connect.
   * @default false
   */
  connectedOnly?: boolean | null;

  /**
   * Ordering options for Enterprise Server installations returned.
   * @default {"field":"HOST_NAME","direction":"ASC"}
   */
  orderBy?: IXGitHubEnterpriseServerInstallationOrder | null;
}

export interface IIpAllowListEntriesOnXGitHubEnterpriseOwnerInfoArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Ordering options for IP allow list entries returned.
   * @default {"field":"ALLOW_LIST_VALUE","direction":"ASC"}
   */
  orderBy?: IXGitHubIpAllowListEntryOrder | null;
}

export interface IMembersCanChangeRepositoryVisibilitySettingOrganizationsOnXGitHubEnterpriseOwnerInfoArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * The setting value to find organizations for.
   */
  value: boolean;

  /**
   * Ordering options for organizations with this setting.
   * @default {"field":"LOGIN","direction":"ASC"}
   */
  orderBy?: IXGitHubOrganizationOrder | null;
}

export interface IMembersCanCreateRepositoriesSettingOrganizationsOnXGitHubEnterpriseOwnerInfoArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * The setting to find organizations for.
   */
  value: XGitHubOrganizationMembersCanCreateRepositoriesSettingValue;

  /**
   * Ordering options for organizations with this setting.
   * @default {"field":"LOGIN","direction":"ASC"}
   */
  orderBy?: IXGitHubOrganizationOrder | null;
}

export interface IMembersCanDeleteIssuesSettingOrganizationsOnXGitHubEnterpriseOwnerInfoArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * The setting value to find organizations for.
   */
  value: boolean;

  /**
   * Ordering options for organizations with this setting.
   * @default {"field":"LOGIN","direction":"ASC"}
   */
  orderBy?: IXGitHubOrganizationOrder | null;
}

export interface IMembersCanDeleteRepositoriesSettingOrganizationsOnXGitHubEnterpriseOwnerInfoArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * The setting value to find organizations for.
   */
  value: boolean;

  /**
   * Ordering options for organizations with this setting.
   * @default {"field":"LOGIN","direction":"ASC"}
   */
  orderBy?: IXGitHubOrganizationOrder | null;
}

export interface IMembersCanInviteCollaboratorsSettingOrganizationsOnXGitHubEnterpriseOwnerInfoArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * The setting value to find organizations for.
   */
  value: boolean;

  /**
   * Ordering options for organizations with this setting.
   * @default {"field":"LOGIN","direction":"ASC"}
   */
  orderBy?: IXGitHubOrganizationOrder | null;
}

export interface IMembersCanUpdateProtectedBranchesSettingOrganizationsOnXGitHubEnterpriseOwnerInfoArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * The setting value to find organizations for.
   */
  value: boolean;

  /**
   * Ordering options for organizations with this setting.
   * @default {"field":"LOGIN","direction":"ASC"}
   */
  orderBy?: IXGitHubOrganizationOrder | null;
}

export interface IMembersCanViewDependencyInsightsSettingOrganizationsOnXGitHubEnterpriseOwnerInfoArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * The setting value to find organizations for.
   */
  value: boolean;

  /**
   * Ordering options for organizations with this setting.
   * @default {"field":"LOGIN","direction":"ASC"}
   */
  orderBy?: IXGitHubOrganizationOrder | null;
}

export interface IOrganizationProjectsSettingOrganizationsOnXGitHubEnterpriseOwnerInfoArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * The setting value to find organizations for.
   */
  value: boolean;

  /**
   * Ordering options for organizations with this setting.
   * @default {"field":"LOGIN","direction":"ASC"}
   */
  orderBy?: IXGitHubOrganizationOrder | null;
}

export interface IOutsideCollaboratorsOnXGitHubEnterpriseOwnerInfoArguments {
  /**
   * The login of one specific outside collaborator.
   */
  login?: string | null;

  /**
   * The search string to look for.
   */
  query?: string | null;

  /**
   * Ordering options for outside collaborators returned from the connection.
   * @default {"field":"LOGIN","direction":"ASC"}
   */
  orderBy?: IXGitHubEnterpriseMemberOrder | null;

  /**
   * Only return outside collaborators on repositories with this visibility.
   */
  visibility?: XGitHubRepositoryVisibility | null;

  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IPendingAdminInvitationsOnXGitHubEnterpriseOwnerInfoArguments {
  /**
   * The search string to look for.
   */
  query?: string | null;

  /**
   * Ordering options for pending enterprise administrator invitations returned from the connection.
   * @default {"field":"CREATED_AT","direction":"DESC"}
   */
  orderBy?: IXGitHubEnterpriseAdministratorInvitationOrder | null;

  /**
   * The role to filter by.
   */
  role?: XGitHubEnterpriseAdministratorRole | null;

  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IPendingCollaboratorInvitationsOnXGitHubEnterpriseOwnerInfoArguments {
  /**
   * The search string to look for.
   */
  query?: string | null;

  /**
   * Ordering options for pending repository collaborator invitations returned from the connection.
   * @default {"field":"CREATED_AT","direction":"DESC"}
   */
  orderBy?: IXGitHubRepositoryInvitationOrder | null;

  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IPendingCollaboratorsOnXGitHubEnterpriseOwnerInfoArguments {
  /**
   * The search string to look for.
   */
  query?: string | null;

  /**
   * Ordering options for pending repository collaborator invitations returned from the connection.
   * @default {"field":"CREATED_AT","direction":"DESC"}
   */
  orderBy?: IXGitHubRepositoryInvitationOrder | null;

  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IPendingMemberInvitationsOnXGitHubEnterpriseOwnerInfoArguments {
  /**
   * The search string to look for.
   */
  query?: string | null;

  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IRepositoryProjectsSettingOrganizationsOnXGitHubEnterpriseOwnerInfoArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * The setting value to find organizations for.
   */
  value: boolean;

  /**
   * Ordering options for organizations with this setting.
   * @default {"field":"LOGIN","direction":"ASC"}
   */
  orderBy?: IXGitHubOrganizationOrder | null;
}

export interface ISamlIdentityProviderSettingOrganizationsOnXGitHubEnterpriseOwnerInfoArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * The setting value to find organizations for.
   */
  value: XGitHubIdentityProviderConfigurationState;

  /**
   * Ordering options for organizations with this setting.
   * @default {"field":"LOGIN","direction":"ASC"}
   */
  orderBy?: IXGitHubOrganizationOrder | null;
}

export interface ISupportEntitlementsOnXGitHubEnterpriseOwnerInfoArguments {
  /**
   * Ordering options for support entitlement users returned from the connection.
   * @default {"field":"LOGIN","direction":"ASC"}
   */
  orderBy?: IXGitHubEnterpriseMemberOrder | null;

  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface ITeamDiscussionsSettingOrganizationsOnXGitHubEnterpriseOwnerInfoArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * The setting value to find organizations for.
   */
  value: boolean;

  /**
   * Ordering options for organizations with this setting.
   * @default {"field":"LOGIN","direction":"ASC"}
   */
  orderBy?: IXGitHubOrganizationOrder | null;
}

export interface ITwoFactorRequiredSettingOrganizationsOnXGitHubEnterpriseOwnerInfoArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * The setting value to find organizations for.
   */
  value: boolean;

  /**
   * Ordering options for organizations with this setting.
   * @default {"field":"LOGIN","direction":"ASC"}
   */
  orderBy?: IXGitHubOrganizationOrder | null;
}

/**
 * The connection type for User.
 */
export interface IXGitHubEnterprisePendingCollaboratorConnection {
  __typename: '_xGitHubEnterprisePendingCollaboratorConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubEnterprisePendingCollaboratorEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitHubUser | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * A user with an invitation to be a collaborator on a repository owned by an organization in an enterprise.
 */
export interface IXGitHubEnterprisePendingCollaboratorEdge {
  __typename: '_xGitHubEnterprisePendingCollaboratorEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * Whether the invited collaborator does not have a license for the enterprise.
   * @deprecated "All pending collaborators consume a license Removal on 2021-01-01 UTC."
   */
  isUnlicensed: boolean;

  /**
   * The item at the end of the edge.
   */
  node: IXGitHubUser | null;

  /**
   * The enterprise organization repositories this user is a member of.
   */
  repositories: IXGitHubEnterpriseRepositoryInfoConnection;
}

export interface IRepositoriesOnXGitHubEnterprisePendingCollaboratorEdgeArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Ordering options for repositories.
   * @default {"field":"NAME","direction":"ASC"}
   */
  orderBy?: IXGitHubRepositoryOrder | null;
}

/**
 * The connection type for OrganizationInvitation.
 */
export interface IXGitHubEnterprisePendingMemberInvitationConnection {
  __typename: '_xGitHubEnterprisePendingMemberInvitationConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubEnterprisePendingMemberInvitationEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitHubOrganizationInvitation | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;

  /**
   * Identifies the total count of unique users in the connection.
   */
  totalUniqueUserCount: number;
}

/**
 * An invitation to be a member in an enterprise organization.
 */
export interface IXGitHubEnterprisePendingMemberInvitationEdge {
  __typename: '_xGitHubEnterprisePendingMemberInvitationEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * Whether the invitation has a license for the enterprise.
   * @deprecated "All pending members consume a license Removal on 2020-07-01 UTC."
   */
  isUnlicensed: boolean;

  /**
   * The item at the end of the edge.
   */
  node: IXGitHubOrganizationInvitation | null;
}

/**
 * A subset of repository information queryable from an enterprise.
 */
export interface IXGitHubEnterpriseRepositoryInfo {
  __typename: '_xGitHubEnterpriseRepositoryInfo';
  id: string;

  /**
   * Identifies if the repository is private or internal.
   */
  isPrivate: boolean;

  /**
   * The repository's name.
   */
  name: string;

  /**
   * The repository's name with owner.
   */
  nameWithOwner: string;
}

/**
 * The connection type for EnterpriseRepositoryInfo.
 */
export interface IXGitHubEnterpriseRepositoryInfoConnection {
  __typename: '_xGitHubEnterpriseRepositoryInfoConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubEnterpriseRepositoryInfoEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitHubEnterpriseRepositoryInfo | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface IXGitHubEnterpriseRepositoryInfoEdge {
  __typename: '_xGitHubEnterpriseRepositoryInfoEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitHubEnterpriseRepositoryInfo | null;
}

/**
 * An Enterprise Server installation.
 */
export interface IXGitHubEnterpriseServerInstallation {
  __typename: '_xGitHubEnterpriseServerInstallation';

  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: any;

  /**
   * The customer name to which the Enterprise Server installation belongs.
   */
  customerName: string;

  /**
   * The host name of the Enterprise Server installation.
   */
  hostName: string;
  id: string;

  /**
   * Whether or not the installation is connected to an Enterprise Server installation via GitHub Connect.
   */
  isConnected: boolean;

  /**
   * Identifies the date and time when the object was last updated.
   */
  updatedAt: any;

  /**
   * User accounts on this Enterprise Server installation.
   */
  userAccounts: IXGitHubEnterpriseServerUserAccountConnection;

  /**
   * User accounts uploads for the Enterprise Server installation.
   */
  userAccountsUploads: IXGitHubEnterpriseServerUserAccountsUploadConnection;
}

export interface IUserAccountsOnXGitHubEnterpriseServerInstallationArguments {
  /**
   * Ordering options for Enterprise Server user accounts returned from the connection.
   * @default {"field":"LOGIN","direction":"ASC"}
   */
  orderBy?: IXGitHubEnterpriseServerUserAccountOrder | null;

  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IUserAccountsUploadsOnXGitHubEnterpriseServerInstallationArguments {
  /**
   * Ordering options for Enterprise Server user accounts uploads returned from the connection.
   * @default {"field":"CREATED_AT","direction":"DESC"}
   */
  orderBy?: IXGitHubEnterpriseServerUserAccountsUploadOrder | null;

  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

/**
 * The connection type for EnterpriseServerInstallation.
 */
export interface IXGitHubEnterpriseServerInstallationConnection {
  __typename: '_xGitHubEnterpriseServerInstallationConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubEnterpriseServerInstallationEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitHubEnterpriseServerInstallation | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface IXGitHubEnterpriseServerInstallationEdge {
  __typename: '_xGitHubEnterpriseServerInstallationEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitHubEnterpriseServerInstallation | null;
}

/**
 * Ordering options for Enterprise Server installation connections.
 */
export interface IXGitHubEnterpriseServerInstallationOrder {
  /**
   * The field to order Enterprise Server installations by.
   */
  field: XGitHubEnterpriseServerInstallationOrderField;

  /**
   * The ordering direction.
   */
  direction: XGitHubOrderDirection;
}

/**
 * Properties by which Enterprise Server installation connections can be ordered.
 */
export const enum XGitHubEnterpriseServerInstallationOrderField {
  /**
   * Order Enterprise Server installations by host name
   */
  HOST_NAME = 'HOST_NAME',

  /**
   * Order Enterprise Server installations by customer name
   */
  CUSTOMER_NAME = 'CUSTOMER_NAME',

  /**
   * Order Enterprise Server installations by creation time
   */
  CREATED_AT = 'CREATED_AT',
}

/**
 * A user account on an Enterprise Server installation.
 */
export interface IXGitHubEnterpriseServerUserAccount {
  __typename: '_xGitHubEnterpriseServerUserAccount';

  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: any;

  /**
   * User emails belonging to this user account.
   */
  emails: IXGitHubEnterpriseServerUserAccountEmailConnection;

  /**
   * The Enterprise Server installation on which this user account exists.
   */
  enterpriseServerInstallation: IXGitHubEnterpriseServerInstallation;
  id: string;

  /**
   * Whether the user account is a site administrator on the Enterprise Server installation.
   */
  isSiteAdmin: boolean;

  /**
   * The login of the user account on the Enterprise Server installation.
   */
  login: string;

  /**
   * The profile name of the user account on the Enterprise Server installation.
   */
  profileName: string | null;

  /**
   * The date and time when the user account was created on the Enterprise Server installation.
   */
  remoteCreatedAt: any;

  /**
   * The ID of the user account on the Enterprise Server installation.
   */
  remoteUserId: number;

  /**
   * Identifies the date and time when the object was last updated.
   */
  updatedAt: any;
}

export interface IEmailsOnXGitHubEnterpriseServerUserAccountArguments {
  /**
   * Ordering options for Enterprise Server user account emails returned from the connection.
   * @default {"field":"EMAIL","direction":"ASC"}
   */
  orderBy?: IXGitHubEnterpriseServerUserAccountEmailOrder | null;

  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

/**
 * The connection type for EnterpriseServerUserAccount.
 */
export interface IXGitHubEnterpriseServerUserAccountConnection {
  __typename: '_xGitHubEnterpriseServerUserAccountConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubEnterpriseServerUserAccountEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitHubEnterpriseServerUserAccount | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface IXGitHubEnterpriseServerUserAccountEdge {
  __typename: '_xGitHubEnterpriseServerUserAccountEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitHubEnterpriseServerUserAccount | null;
}

/**
 * An email belonging to a user account on an Enterprise Server installation.
 */
export interface IXGitHubEnterpriseServerUserAccountEmail {
  __typename: '_xGitHubEnterpriseServerUserAccountEmail';

  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: any;

  /**
   * The email address.
   */
  email: string;
  id: string;

  /**
   * Indicates whether this is the primary email of the associated user account.
   */
  isPrimary: boolean;

  /**
   * Identifies the date and time when the object was last updated.
   */
  updatedAt: any;

  /**
   * The user account to which the email belongs.
   */
  userAccount: IXGitHubEnterpriseServerUserAccount;
}

/**
 * The connection type for EnterpriseServerUserAccountEmail.
 */
export interface IXGitHubEnterpriseServerUserAccountEmailConnection {
  __typename: '_xGitHubEnterpriseServerUserAccountEmailConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubEnterpriseServerUserAccountEmailEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitHubEnterpriseServerUserAccountEmail | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface IXGitHubEnterpriseServerUserAccountEmailEdge {
  __typename: '_xGitHubEnterpriseServerUserAccountEmailEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitHubEnterpriseServerUserAccountEmail | null;
}

/**
 * Ordering options for Enterprise Server user account email connections.
 */
export interface IXGitHubEnterpriseServerUserAccountEmailOrder {
  /**
   * The field to order emails by.
   */
  field: XGitHubEnterpriseServerUserAccountEmailOrderField;

  /**
   * The ordering direction.
   */
  direction: XGitHubOrderDirection;
}

/**
 * Properties by which Enterprise Server user account email connections can be ordered.
 */
export const enum XGitHubEnterpriseServerUserAccountEmailOrderField {
  /**
   * Order emails by email
   */
  EMAIL = 'EMAIL',
}

/**
 * Ordering options for Enterprise Server user account connections.
 */
export interface IXGitHubEnterpriseServerUserAccountOrder {
  /**
   * The field to order user accounts by.
   */
  field: XGitHubEnterpriseServerUserAccountOrderField;

  /**
   * The ordering direction.
   */
  direction: XGitHubOrderDirection;
}

/**
 * Properties by which Enterprise Server user account connections can be ordered.
 */
export const enum XGitHubEnterpriseServerUserAccountOrderField {
  /**
   * Order user accounts by login
   */
  LOGIN = 'LOGIN',

  /**
   * Order user accounts by creation time on the Enterprise Server installation
   */
  REMOTE_CREATED_AT = 'REMOTE_CREATED_AT',
}

/**
 * A user accounts upload from an Enterprise Server installation.
 */
export interface IXGitHubEnterpriseServerUserAccountsUpload {
  __typename: '_xGitHubEnterpriseServerUserAccountsUpload';

  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: any;

  /**
   * The enterprise to which this upload belongs.
   */
  enterprise: IXGitHubEnterprise;

  /**
   * The Enterprise Server installation for which this upload was generated.
   */
  enterpriseServerInstallation: IXGitHubEnterpriseServerInstallation;
  id: string;

  /**
   * The name of the file uploaded.
   */
  name: string;

  /**
   * The synchronization state of the upload
   */
  syncState: XGitHubEnterpriseServerUserAccountsUploadSyncState;

  /**
   * Identifies the date and time when the object was last updated.
   */
  updatedAt: any;
}

/**
 * The connection type for EnterpriseServerUserAccountsUpload.
 */
export interface IXGitHubEnterpriseServerUserAccountsUploadConnection {
  __typename: '_xGitHubEnterpriseServerUserAccountsUploadConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubEnterpriseServerUserAccountsUploadEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitHubEnterpriseServerUserAccountsUpload | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface IXGitHubEnterpriseServerUserAccountsUploadEdge {
  __typename: '_xGitHubEnterpriseServerUserAccountsUploadEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitHubEnterpriseServerUserAccountsUpload | null;
}

/**
 * Ordering options for Enterprise Server user accounts upload connections.
 */
export interface IXGitHubEnterpriseServerUserAccountsUploadOrder {
  /**
   * The field to order user accounts uploads by.
   */
  field: XGitHubEnterpriseServerUserAccountsUploadOrderField;

  /**
   * The ordering direction.
   */
  direction: XGitHubOrderDirection;
}

/**
 * Properties by which Enterprise Server user accounts upload connections can be ordered.
 */
export const enum XGitHubEnterpriseServerUserAccountsUploadOrderField {
  /**
   * Order user accounts uploads by creation time
   */
  CREATED_AT = 'CREATED_AT',
}

/**
 * Synchronization state of the Enterprise Server user accounts upload
 */
export const enum XGitHubEnterpriseServerUserAccountsUploadSyncState {
  /**
   * The synchronization of the upload is pending.
   */
  PENDING = 'PENDING',

  /**
   * The synchronization of the upload succeeded.
   */
  SUCCESS = 'SUCCESS',

  /**
   * The synchronization of the upload failed.
   */
  FAILURE = 'FAILURE',
}

/**
 * An account for a user who is an admin of an enterprise or a member of an enterprise through one or more organizations.
 */
export interface IXGitHubEnterpriseUserAccount {
  __typename: '_xGitHubEnterpriseUserAccount';

  /**
   * A URL pointing to the enterprise user account's public avatar.
   */
  avatarUrl: any;

  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: any;

  /**
   * The enterprise in which this user account exists.
   */
  enterprise: IXGitHubEnterprise;
  id: string;

  /**
   * An identifier for the enterprise user account, a login or email address
   */
  login: string;

  /**
   * The name of the enterprise user account
   */
  name: string | null;

  /**
   * A list of enterprise organizations this user is a member of.
   */
  organizations: IXGitHubEnterpriseOrganizationMembershipConnection;

  /**
   * The HTTP path for this user.
   */
  resourcePath: any;

  /**
   * Identifies the date and time when the object was last updated.
   */
  updatedAt: any;

  /**
   * The HTTP URL for this user.
   */
  url: any;

  /**
   * The user within the enterprise.
   */
  user: IXGitHubUser | null;
}

export interface IAvatarUrlOnXGitHubEnterpriseUserAccountArguments {
  /**
   * The size of the resulting square image.
   */
  size?: number | null;
}

export interface IOrganizationsOnXGitHubEnterpriseUserAccountArguments {
  /**
   * The search string to look for.
   */
  query?: string | null;

  /**
   * Ordering options for organizations returned from the connection.
   * @default {"field":"LOGIN","direction":"ASC"}
   */
  orderBy?: IXGitHubOrganizationOrder | null;

  /**
   * The role of the user in the enterprise organization.
   */
  role?: XGitHubEnterpriseUserAccountMembershipRole | null;

  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

/**
 * The connection type for EnterpriseUserAccount.
 */
export interface IXGitHubEnterpriseUserAccountConnection {
  __typename: '_xGitHubEnterpriseUserAccountConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubEnterpriseUserAccountEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitHubEnterpriseUserAccount | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface IXGitHubEnterpriseUserAccountEdge {
  __typename: '_xGitHubEnterpriseUserAccountEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitHubEnterpriseUserAccount | null;
}

/**
 * The possible roles for enterprise membership.
 */
export const enum XGitHubEnterpriseUserAccountMembershipRole {
  /**
   * The user is a member of the enterprise membership.
   */
  MEMBER = 'MEMBER',

  /**
   * The user is an owner of the enterprise membership.
   */
  OWNER = 'OWNER',
}

/**
 * The possible GitHub Enterprise deployments where this user can exist.
 */
export const enum XGitHubEnterpriseUserDeployment {
  /**
   * The user is part of a GitHub Enterprise Cloud deployment.
   */
  CLOUD = 'CLOUD',

  /**
   * The user is part of a GitHub Enterprise Server deployment.
   */
  SERVER = 'SERVER',
}

/**
 * An environment.
 */
export interface IXGitHubEnvironment {
  __typename: '_xGitHubEnvironment';

  /**
   * Identifies the primary key from the database.
   */
  databaseId: number | null;
  id: string;

  /**
   * The name of the environment
   */
  name: string;

  /**
   * The protection rules defined for this environment
   */
  protectionRules: IXGitHubDeploymentProtectionRuleConnection;
}

export interface IProtectionRulesOnXGitHubEnvironmentArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

/**
 * The connection type for Environment.
 */
export interface IXGitHubEnvironmentConnection {
  __typename: '_xGitHubEnvironmentConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubEnvironmentEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitHubEnvironment | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface IXGitHubEnvironmentEdge {
  __typename: '_xGitHubEnvironmentEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitHubEnvironment | null;
}

/**
 * An external identity provisioned by SAML SSO or SCIM.
 */
export interface IXGitHubExternalIdentity {
  __typename: '_xGitHubExternalIdentity';

  /**
   * The GUID for this identity
   */
  guid: string;
  id: string;

  /**
   * Organization invitation for this SCIM-provisioned external identity
   */
  organizationInvitation: IXGitHubOrganizationInvitation | null;

  /**
   * SAML Identity attributes
   */
  samlIdentity: IXGitHubExternalIdentitySamlAttributes | null;

  /**
   * SCIM Identity attributes
   */
  scimIdentity: IXGitHubExternalIdentityScimAttributes | null;

  /**
   * User linked to this external identity. Will be NULL if this identity has not been claimed by an organization member.
   */
  user: IXGitHubUser | null;
}

/**
 * The connection type for ExternalIdentity.
 */
export interface IXGitHubExternalIdentityConnection {
  __typename: '_xGitHubExternalIdentityConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubExternalIdentityEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitHubExternalIdentity | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface IXGitHubExternalIdentityEdge {
  __typename: '_xGitHubExternalIdentityEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitHubExternalIdentity | null;
}

/**
 * SAML attributes for the External Identity
 */
export interface IXGitHubExternalIdentitySamlAttributes {
  __typename: '_xGitHubExternalIdentitySamlAttributes';

  /**
   * The emails associated with the SAML identity
   */
  emails: Array<IXGitHubUserEmailMetadata> | null;

  /**
   * Family name of the SAML identity
   */
  familyName: string | null;

  /**
   * Given name of the SAML identity
   */
  givenName: string | null;

  /**
   * The groups linked to this identity in IDP
   */
  groups: Array<string> | null;

  /**
   * The NameID of the SAML identity
   */
  nameId: string | null;

  /**
   * The userName of the SAML identity
   */
  username: string | null;
}

/**
 * SCIM attributes for the External Identity
 */
export interface IXGitHubExternalIdentityScimAttributes {
  __typename: '_xGitHubExternalIdentityScimAttributes';

  /**
   * The emails associated with the SCIM identity
   */
  emails: Array<IXGitHubUserEmailMetadata> | null;

  /**
   * Family name of the SCIM identity
   */
  familyName: string | null;

  /**
   * Given name of the SCIM identity
   */
  givenName: string | null;

  /**
   * The groups linked to this identity in IDP
   */
  groups: Array<string> | null;

  /**
   * The userName of the SCIM identity
   */
  username: string | null;
}

/**
 * A command to add a file at the given path with the given contents as part of a commit.  Any existing file at that that path will be replaced.
 */
export interface IXGitHubFileAddition {
  /**
   * The path in the repository where the file will be located
   */
  path: string;

  /**
   * The base64 encoded contents of the file
   */
  contents: any;
}

/**
 * A description of a set of changes to a file tree to be made as part of
* a git commit, modeled as zero or more file `additions` and zero or more
* file `deletions`.
* 
* Both fields are optional; omitting both will produce a commit with no
* file changes.
* 
* `deletions` and `additions` describe changes to files identified
* by their path in the git tree using unix-style path separators, i.e.
* `/`.  The root of a git tree is an empty string, so paths are not
* slash-prefixed.
* 
* `path` values must be unique across all `additions` and `deletions`
* provided.  Any duplication will result in a validation error.
* 
* ### Encoding
* 
* File contents must be provided in full for each `FileAddition`.
* 
* The `contents` of a `FileAddition` must be encoded using RFC 4648
* compliant base64, i.e. correct padding is required and no characters
* outside the standard alphabet may be used.  Invalid base64
* encoding will be rejected with a validation error.
* 
* The encoded contents may be binary.
* 
* For text files, no assumptions are made about the character encoding of
* the file contents (after base64 decoding).  No charset transcoding or
* line-ending normalization will be performed; it is the client's
* responsibility to manage the character encoding of files they provide.
* However, for maximum compatibility we recommend using UTF-8 encoding
* and ensuring that all files in a repository use a consistent
* line-ending convention (`
` or `\r
`), and that all files end
* with a newline.
* 
* ### Modeling file changes
* 
* Each of the the five types of conceptual changes that can be made in a
* git commit can be described using the `FileChanges` type as follows:
* 
* 1. New file addition: create file `hello world
` at path `docs/README.txt`:
* 
*        {
*          "additions" [
*            {
*              "path": "docs/README.txt",
*              "contents": base64encode("hello world
")
*            }
*          ]
*        }
* 
* 2. Existing file modification: change existing `docs/README.txt` to have new
*    content `new content here
`:
* 
*        {
*          "additions" [
*            {
*              "path": "docs/README.txt",
*              "contents": base64encode("new content here
")
*            }
*          ]
*        }
* 
* 3. Existing file deletion: remove existing file `docs/README.txt`.
*    Note that the path is required to exist -- specifying a
*    path that does not exist on the given branch will abort the
*    commit and return an error.
* 
*        {
*          "deletions" [
*            {
*              "path": "docs/README.txt"
*            }
*          ]
*        }
* 
* 
* 4. File rename with no changes: rename `docs/README.txt` with
*    previous content `hello world
` to the same content at
*    `newdocs/README.txt`:
* 
*        {
*          "deletions" [
*            {
*              "path": "docs/README.txt",
*            }
*          ],
*          "additions" [
*            {
*              "path": "newdocs/README.txt",
*              "contents": base64encode("hello world
")
*            }
*          ]
*        }
* 
* 
* 5. File rename with changes: rename `docs/README.txt` with
*    previous content `hello world
` to a file at path
*    `newdocs/README.txt` with content `new contents
`:
* 
*        {
*          "deletions" [
*            {
*              "path": "docs/README.txt",
*            }
*          ],
*          "additions" [
*            {
*              "path": "newdocs/README.txt",
*              "contents": base64encode("new contents
")
*            }
*          ]
*        }
 */
export interface IXGitHubFileChanges {
  /**
   * Files to delete.
   * @default []
   */
  deletions?: Array<IXGitHubFileDeletion> | null;

  /**
   * File to add or change.
   * @default []
   */
  additions?: Array<IXGitHubFileAddition> | null;
}

/**
 * A command to delete the file at the given path as part of a commit.
 */
export interface IXGitHubFileDeletion {
  /**
   * The path to delete
   */
  path: string;
}

/**
 * The possible viewed states of a file .
 */
export const enum XGitHubFileViewedState {
  /**
   * The file has new changes since last viewed.
   */
  DISMISSED = 'DISMISSED',

  /**
   * The file has been marked as viewed.
   */
  VIEWED = 'VIEWED',

  /**
   * The file has not been marked as viewed.
   */
  UNVIEWED = 'UNVIEWED',
}

/**
 * Autogenerated input type of FollowUser
 */
export interface IXGitHubFollowUserInput {
  /**
   * ID of the user to follow.
   */
  userId: string;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of FollowUser
 */
export interface IXGitHubFollowUserPayload {
  __typename: '_xGitHubFollowUserPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The user that was followed.
   */
  user: IXGitHubUser | null;
}

/**
 * The connection type for User.
 */
export interface IXGitHubFollowerConnection {
  __typename: '_xGitHubFollowerConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubUserEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitHubUser | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * The connection type for User.
 */
export interface IXGitHubFollowingConnection {
  __typename: '_xGitHubFollowingConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubUserEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitHubUser | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * A funding platform link for a repository.
 */
export interface IXGitHubFundingLink {
  __typename: '_xGitHubFundingLink';

  /**
   * The funding platform this link is for.
   */
  platform: XGitHubFundingPlatform;

  /**
   * The configured URL for this funding link.
   */
  url: any;
}

/**
 * The possible funding platforms for repository funding links.
 */
export const enum XGitHubFundingPlatform {
  /**
   * GitHub funding platform.
   */
  GITHUB = 'GITHUB',

  /**
   * Patreon funding platform.
   */
  PATREON = 'PATREON',

  /**
   * Open Collective funding platform.
   */
  OPEN_COLLECTIVE = 'OPEN_COLLECTIVE',

  /**
   * Ko-fi funding platform.
   */
  KO_FI = 'KO_FI',

  /**
   * Tidelift funding platform.
   */
  TIDELIFT = 'TIDELIFT',

  /**
   * Community Bridge funding platform.
   */
  COMMUNITY_BRIDGE = 'COMMUNITY_BRIDGE',

  /**
   * Liberapay funding platform.
   */
  LIBERAPAY = 'LIBERAPAY',

  /**
   * IssueHunt funding platform.
   */
  ISSUEHUNT = 'ISSUEHUNT',

  /**
   * Otechie funding platform.
   */
  OTECHIE = 'OTECHIE',

  /**
   * Custom funding platform.
   */
  CUSTOM = 'CUSTOM',
}

/**
 * A generic hovercard context with a message and icon
 */
export interface IXGitHubGenericHovercardContext {
  __typename: '_xGitHubGenericHovercardContext';

  /**
   * A string describing this context
   */
  message: string;

  /**
   * An octicon to accompany this context
   */
  octicon: string;
}

/**
 * A Gist.
 */
export interface IXGitHubGist {
  __typename: '_xGitHubGist';

  /**
   * A list of comments associated with the gist
   */
  comments: IXGitHubGistCommentConnection;

  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: any;

  /**
   * The gist description.
   */
  description: string | null;

  /**
   * The files in this gist.
   */
  files: Array<IXGitHubGistFile | null> | null;

  /**
   * A list of forks associated with the gist
   */
  forks: IXGitHubGistConnection;
  id: string;

  /**
   * Identifies if the gist is a fork.
   */
  isFork: boolean;

  /**
   * Whether the gist is public or not.
   */
  isPublic: boolean;

  /**
   * The gist name.
   */
  name: string;

  /**
   * The gist owner.
   */
  owner: _xGitHubRepositoryOwner | null;

  /**
   * Identifies when the gist was last pushed to.
   */
  pushedAt: any | null;

  /**
   * The HTML path to this resource.
   */
  resourcePath: any;

  /**
   * Returns a count of how many stargazers there are on this object
   */
  stargazerCount: number;

  /**
   * A list of users who have starred this starrable.
   */
  stargazers: IXGitHubStargazerConnection;

  /**
   * Identifies the date and time when the object was last updated.
   */
  updatedAt: any;

  /**
   * The HTTP URL for this Gist.
   */
  url: any;

  /**
   * Returns a boolean indicating whether the viewing user has starred this starrable.
   */
  viewerHasStarred: boolean;
}

export interface ICommentsOnXGitHubGistArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IFilesOnXGitHubGistArguments {
  /**
   * The maximum number of files to return.
   * @default 10
   */
  limit?: number | null;

  /**
   * The oid of the files to return
   */
  oid?: any | null;
}

export interface IForksOnXGitHubGistArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Ordering options for gists returned from the connection
   */
  orderBy?: IXGitHubGistOrder | null;
}

export interface IStargazersOnXGitHubGistArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Order for connection
   */
  orderBy?: IXGitHubStarOrder | null;
}

/**
 * Represents a comment on an Gist.
 */
export interface IXGitHubGistComment {
  __typename: '_xGitHubGistComment';

  /**
   * The actor who authored the comment.
   */
  author: _xGitHubActor | null;

  /**
   * Author's association with the gist.
   */
  authorAssociation: XGitHubCommentAuthorAssociation;

  /**
   * Identifies the comment body.
   */
  body: string;

  /**
   * The body rendered to HTML.
   */
  bodyHTML: any;

  /**
   * The body rendered to text.
   */
  bodyText: string;

  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: any;

  /**
   * Check if this comment was created via an email reply.
   */
  createdViaEmail: boolean;

  /**
   * Identifies the primary key from the database.
   */
  databaseId: number | null;

  /**
   * The actor who edited the comment.
   */
  editor: _xGitHubActor | null;

  /**
   * The associated gist.
   */
  gist: IXGitHubGist;
  id: string;

  /**
   * Check if this comment was edited and includes an edit with the creation data
   */
  includesCreatedEdit: boolean;

  /**
   * Returns whether or not a comment has been minimized.
   */
  isMinimized: boolean;

  /**
   * The moment the editor made the last edit
   */
  lastEditedAt: any | null;

  /**
   * Returns why the comment was minimized.
   */
  minimizedReason: string | null;

  /**
   * Identifies when the comment was published at.
   */
  publishedAt: any | null;

  /**
   * Identifies the date and time when the object was last updated.
   */
  updatedAt: any;

  /**
   * A list of edits to this content.
   */
  userContentEdits: IXGitHubUserContentEditConnection | null;

  /**
   * Check if the current viewer can delete this object.
   */
  viewerCanDelete: boolean;

  /**
   * Check if the current viewer can minimize this object.
   */
  viewerCanMinimize: boolean;

  /**
   * Check if the current viewer can update this object.
   */
  viewerCanUpdate: boolean;

  /**
   * Reasons why the current viewer can not update this comment.
   */
  viewerCannotUpdateReasons: Array<XGitHubCommentCannotUpdateReason>;

  /**
   * Did the viewer author this comment.
   */
  viewerDidAuthor: boolean;
}

export interface IUserContentEditsOnXGitHubGistCommentArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

/**
 * The connection type for GistComment.
 */
export interface IXGitHubGistCommentConnection {
  __typename: '_xGitHubGistCommentConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubGistCommentEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitHubGistComment | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface IXGitHubGistCommentEdge {
  __typename: '_xGitHubGistCommentEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitHubGistComment | null;
}

/**
 * The connection type for Gist.
 */
export interface IXGitHubGistConnection {
  __typename: '_xGitHubGistConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubGistEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitHubGist | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface IXGitHubGistEdge {
  __typename: '_xGitHubGistEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitHubGist | null;
}

/**
 * A file in a gist.
 */
export interface IXGitHubGistFile {
  __typename: '_xGitHubGistFile';

  /**
   * The file name encoded to remove characters that are invalid in URL paths.
   */
  encodedName: string | null;

  /**
   * The gist file encoding.
   */
  encoding: string | null;

  /**
   * The file extension from the file name.
   */
  extension: string | null;

  /**
   * Indicates if this file is an image.
   */
  isImage: boolean;

  /**
   * Whether the file's contents were truncated.
   */
  isTruncated: boolean;

  /**
   * The programming language this file is written in.
   */
  language: IXGitHubLanguage | null;

  /**
   * The gist file name.
   */
  name: string | null;

  /**
   * The gist file size in bytes.
   */
  size: number | null;

  /**
   * UTF8 text data or null if the file is binary
   */
  text: string | null;
}

export interface ITextOnXGitHubGistFileArguments {
  /**
   * Optionally truncate the returned file to this length.
   */
  truncate?: number | null;
}

/**
 * Ordering options for gist connections
 */
export interface IXGitHubGistOrder {
  /**
   * The field to order repositories by.
   */
  field: XGitHubGistOrderField;

  /**
   * The ordering direction.
   */
  direction: XGitHubOrderDirection;
}

/**
 * Properties by which gist connections can be ordered.
 */
export const enum XGitHubGistOrderField {
  /**
   * Order gists by creation time
   */
  CREATED_AT = 'CREATED_AT',

  /**
   * Order gists by update time
   */
  UPDATED_AT = 'UPDATED_AT',

  /**
   * Order gists by push time
   */
  PUSHED_AT = 'PUSHED_AT',
}

/**
 * The privacy of a Gist
 */
export const enum XGitHubGistPrivacy {
  /**
   * Public
   */
  PUBLIC = 'PUBLIC',

  /**
   * Secret
   */
  SECRET = 'SECRET',

  /**
   * Gists that are public and secret
   */
  ALL = 'ALL',
}

/**
 * Represents an actor in a Git commit (ie. an author or committer).
 */
export interface IXGitHubGitActor {
  __typename: '_xGitHubGitActor';

  /**
   * A URL pointing to the author's public avatar.
   */
  avatarUrl: any;

  /**
   * The timestamp of the Git action (authoring or committing).
   */
  date: any | null;

  /**
   * The email in the Git commit.
   */
  email: string | null;

  /**
   * The name in the Git commit.
   */
  name: string | null;

  /**
   * The GitHub user corresponding to the email field. Null if no such user exists.
   */
  user: IXGitHubUser | null;
}

export interface IAvatarUrlOnXGitHubGitActorArguments {
  /**
   * The size of the resulting square image.
   */
  size?: number | null;
}

/**
 * The connection type for GitActor.
 */
export interface IXGitHubGitActorConnection {
  __typename: '_xGitHubGitActorConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubGitActorEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitHubGitActor | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface IXGitHubGitActorEdge {
  __typename: '_xGitHubGitActorEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitHubGitActor | null;
}

/**
 * Represents information about the GitHub instance.
 */
export interface IXGitHubGitHubMetadata {
  __typename: '_xGitHubGitHubMetadata';

  /**
   * Returns a String that's a SHA of `github-services`
   */
  gitHubServicesSha: any;

  /**
   * IP addresses that users connect to for git operations
   */
  gitIpAddresses: Array<string> | null;

  /**
   * IP addresses that service hooks are sent from
   */
  hookIpAddresses: Array<string> | null;

  /**
   * IP addresses that the importer connects from
   */
  importerIpAddresses: Array<string> | null;

  /**
   * Whether or not users are verified
   */
  isPasswordAuthenticationVerifiable: boolean;

  /**
   * IP addresses for GitHub Pages' A records
   */
  pagesIpAddresses: Array<string> | null;
}

/**
 * Represents a Git object.
 */
export type _xGitHubGitObject =
  | IXGitHubBlob
  | IXGitHubCommit
  | IXGitHubTag
  | IXGitHubTree;

/**
 * Represents a Git object.
 */
export interface IXGitHubGitObject {
  __typename: '_xGitHubGitObject';

  /**
   * An abbreviated version of the Git object ID
   */
  abbreviatedOid: string;

  /**
   * The HTTP path for this Git object
   */
  commitResourcePath: any;

  /**
   * The HTTP URL for this Git object
   */
  commitUrl: any;
  id: string;

  /**
   * The Git object ID
   */
  oid: any;

  /**
   * The Repository the Git object belongs to
   */
  repository: IXGitHubRepository;
}

/**
 * Information about a signature (GPG or S/MIME) on a Commit or Tag.
 */
export type _xGitHubGitSignature =
  | IXGitHubGpgSignature
  | IXGitHubSmimeSignature
  | IXGitHubUnknownSignature;

/**
 * Information about a signature (GPG or S/MIME) on a Commit or Tag.
 */
export interface IXGitHubGitSignature {
  __typename: '_xGitHubGitSignature';

  /**
   * Email used to sign this object.
   */
  email: string;

  /**
   * True if the signature is valid and verified by GitHub.
   */
  isValid: boolean;

  /**
   * Payload for GPG signing object. Raw ODB object without the signature header.
   */
  payload: string;

  /**
   * ASCII-armored signature header from object.
   */
  signature: string;

  /**
   * GitHub user corresponding to the email signing this commit.
   */
  signer: IXGitHubUser | null;

  /**
   * The state of this signature. `VALID` if signature is valid and verified by GitHub, otherwise represents reason why signature is considered invalid.
   */
  state: XGitHubGitSignatureState;

  /**
   * True if the signature was made with GitHub's signing key.
   */
  wasSignedByGitHub: boolean;
}

/**
 * The state of a Git signature.
 */
export const enum XGitHubGitSignatureState {
  /**
   * Valid signature and verified by GitHub
   */
  VALID = 'VALID',

  /**
   * Invalid signature
   */
  INVALID = 'INVALID',

  /**
   * Malformed signature
   */
  MALFORMED_SIG = 'MALFORMED_SIG',

  /**
   * Key used for signing not known to GitHub
   */
  UNKNOWN_KEY = 'UNKNOWN_KEY',

  /**
   * Invalid email used for signing
   */
  BAD_EMAIL = 'BAD_EMAIL',

  /**
   * Email used for signing unverified on GitHub
   */
  UNVERIFIED_EMAIL = 'UNVERIFIED_EMAIL',

  /**
   * Email used for signing not known to GitHub
   */
  NO_USER = 'NO_USER',

  /**
   * Unknown signature type
   */
  UNKNOWN_SIG_TYPE = 'UNKNOWN_SIG_TYPE',

  /**
   * Unsigned
   */
  UNSIGNED = 'UNSIGNED',

  /**
   * Internal error - the GPG verification service is unavailable at the moment
   */
  GPGVERIFY_UNAVAILABLE = 'GPGVERIFY_UNAVAILABLE',

  /**
   * Internal error - the GPG verification service misbehaved
   */
  GPGVERIFY_ERROR = 'GPGVERIFY_ERROR',

  /**
   * The usage flags for the key that signed this don't allow signing
   */
  NOT_SIGNING_KEY = 'NOT_SIGNING_KEY',

  /**
   * Signing key expired
   */
  EXPIRED_KEY = 'EXPIRED_KEY',

  /**
   * Valid signature, pending certificate revocation checking
   */
  OCSP_PENDING = 'OCSP_PENDING',

  /**
   * Valid signature, though certificate revocation check failed
   */
  OCSP_ERROR = 'OCSP_ERROR',

  /**
   * The signing certificate or its chain could not be verified
   */
  BAD_CERT = 'BAD_CERT',

  /**
   * One or more certificates in chain has been revoked
   */
  OCSP_REVOKED = 'OCSP_REVOKED',
}

/**
 * Represents a GPG signature on a Commit or Tag.
 */
export interface IXGitHubGpgSignature {
  __typename: '_xGitHubGpgSignature';

  /**
   * Email used to sign this object.
   */
  email: string;

  /**
   * True if the signature is valid and verified by GitHub.
   */
  isValid: boolean;

  /**
   * Hex-encoded ID of the key that signed this object.
   */
  keyId: string | null;

  /**
   * Payload for GPG signing object. Raw ODB object without the signature header.
   */
  payload: string;

  /**
   * ASCII-armored signature header from object.
   */
  signature: string;

  /**
   * GitHub user corresponding to the email signing this commit.
   */
  signer: IXGitHubUser | null;

  /**
   * The state of this signature. `VALID` if signature is valid and verified by GitHub, otherwise represents reason why signature is considered invalid.
   */
  state: XGitHubGitSignatureState;

  /**
   * True if the signature was made with GitHub's signing key.
   */
  wasSignedByGitHub: boolean;
}

/**
 * Represents a 'head_ref_deleted' event on a given pull request.
 */
export interface IXGitHubHeadRefDeletedEvent {
  __typename: '_xGitHubHeadRefDeletedEvent';

  /**
   * Identifies the actor who performed the event.
   */
  actor: _xGitHubActor | null;

  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: any;

  /**
   * Identifies the Ref associated with the `head_ref_deleted` event.
   */
  headRef: IXGitHubRef | null;

  /**
   * Identifies the name of the Ref associated with the `head_ref_deleted` event.
   */
  headRefName: string;
  id: string;

  /**
   * PullRequest referenced by event.
   */
  pullRequest: IXGitHubPullRequest;
}

/**
 * Represents a 'head_ref_force_pushed' event on a given pull request.
 */
export interface IXGitHubHeadRefForcePushedEvent {
  __typename: '_xGitHubHeadRefForcePushedEvent';

  /**
   * Identifies the actor who performed the event.
   */
  actor: _xGitHubActor | null;

  /**
   * Identifies the after commit SHA for the 'head_ref_force_pushed' event.
   */
  afterCommit: IXGitHubCommit | null;

  /**
   * Identifies the before commit SHA for the 'head_ref_force_pushed' event.
   */
  beforeCommit: IXGitHubCommit | null;

  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: any;
  id: string;

  /**
   * PullRequest referenced by event.
   */
  pullRequest: IXGitHubPullRequest;

  /**
   * Identifies the fully qualified ref name for the 'head_ref_force_pushed' event.
   */
  ref: IXGitHubRef | null;
}

/**
 * Represents a 'head_ref_restored' event on a given pull request.
 */
export interface IXGitHubHeadRefRestoredEvent {
  __typename: '_xGitHubHeadRefRestoredEvent';

  /**
   * Identifies the actor who performed the event.
   */
  actor: _xGitHubActor | null;

  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: any;
  id: string;

  /**
   * PullRequest referenced by event.
   */
  pullRequest: IXGitHubPullRequest;
}

/**
 * Detail needed to display a hovercard for a user
 */
export interface IXGitHubHovercard {
  __typename: '_xGitHubHovercard';

  /**
   * Each of the contexts for this hovercard
   */
  contexts: Array<_xGitHubHovercardContext>;
}

/**
 * An individual line of a hovercard
 */
export type _xGitHubHovercardContext =
  | IXGitHubGenericHovercardContext
  | IXGitHubOrganizationTeamsHovercardContext
  | IXGitHubOrganizationsHovercardContext
  | IXGitHubReviewStatusHovercardContext
  | IXGitHubViewerHovercardContext;

/**
 * An individual line of a hovercard
 */
export interface IXGitHubHovercardContext {
  __typename: '_xGitHubHovercardContext';

  /**
   * A string describing this context
   */
  message: string;

  /**
   * An octicon to accompany this context
   */
  octicon: string;
}

/**
 * The possible states in which authentication can be configured with an identity provider.
 */
export const enum XGitHubIdentityProviderConfigurationState {
  /**
   * Authentication with an identity provider is configured and enforced.
   */
  ENFORCED = 'ENFORCED',

  /**
   * Authentication with an identity provider is configured but not enforced.
   */
  CONFIGURED = 'CONFIGURED',

  /**
   * Authentication with an identity provider is not configured.
   */
  UNCONFIGURED = 'UNCONFIGURED',
}

/**
 * Autogenerated input type of InviteEnterpriseAdmin
 */
export interface IXGitHubInviteEnterpriseAdminInput {
  /**
   * The ID of the enterprise to which you want to invite an administrator.
   */
  enterpriseId: string;

  /**
   * The login of a user to invite as an administrator.
   */
  invitee?: string | null;

  /**
   * The email of the person to invite as an administrator.
   */
  email?: string | null;

  /**
   * The role of the administrator.
   */
  role?: XGitHubEnterpriseAdministratorRole | null;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of InviteEnterpriseAdmin
 */
export interface IXGitHubInviteEnterpriseAdminPayload {
  __typename: '_xGitHubInviteEnterpriseAdminPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The created enterprise administrator invitation.
   */
  invitation: IXGitHubEnterpriseAdministratorInvitation | null;
}

/**
 * The possible values for the IP allow list enabled setting.
 */
export const enum XGitHubIpAllowListEnabledSettingValue {
  /**
   * The setting is enabled for the owner.
   */
  ENABLED = 'ENABLED',

  /**
   * The setting is disabled for the owner.
   */
  DISABLED = 'DISABLED',
}

/**
 * An IP address or range of addresses that is allowed to access an owner's resources.
 */
export interface IXGitHubIpAllowListEntry {
  __typename: '_xGitHubIpAllowListEntry';

  /**
   * A single IP address or range of IP addresses in CIDR notation.
   */
  allowListValue: string;

  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: any;
  id: string;

  /**
   * Whether the entry is currently active.
   */
  isActive: boolean;

  /**
   * The name of the IP allow list entry.
   */
  name: string | null;

  /**
   * The owner of the IP allow list entry.
   */
  owner: _xGitHubIpAllowListOwner;

  /**
   * Identifies the date and time when the object was last updated.
   */
  updatedAt: any;
}

/**
 * The connection type for IpAllowListEntry.
 */
export interface IXGitHubIpAllowListEntryConnection {
  __typename: '_xGitHubIpAllowListEntryConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubIpAllowListEntryEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitHubIpAllowListEntry | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface IXGitHubIpAllowListEntryEdge {
  __typename: '_xGitHubIpAllowListEntryEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitHubIpAllowListEntry | null;
}

/**
 * Ordering options for IP allow list entry connections.
 */
export interface IXGitHubIpAllowListEntryOrder {
  /**
   * The field to order IP allow list entries by.
   */
  field: XGitHubIpAllowListEntryOrderField;

  /**
   * The ordering direction.
   */
  direction: XGitHubOrderDirection;
}

/**
 * Properties by which IP allow list entry connections can be ordered.
 */
export const enum XGitHubIpAllowListEntryOrderField {
  /**
   * Order IP allow list entries by creation time.
   */
  CREATED_AT = 'CREATED_AT',

  /**
   * Order IP allow list entries by the allow list value.
   */
  ALLOW_LIST_VALUE = 'ALLOW_LIST_VALUE',
}

/**
 * The possible values for the IP allow list configuration for installed GitHub Apps setting.
 */
export const enum XGitHubIpAllowListForInstalledAppsEnabledSettingValue {
  /**
   * The setting is enabled for the owner.
   */
  ENABLED = 'ENABLED',

  /**
   * The setting is disabled for the owner.
   */
  DISABLED = 'DISABLED',
}

/**
 * Types that can own an IP allow list.
 */
export type _xGitHubIpAllowListOwner =
  | IXGitHubApp
  | IXGitHubEnterprise
  | IXGitHubOrganization;

/**
 * An Issue is a place to discuss ideas, enhancements, tasks, and bugs for a project.
 */
export interface IXGitHubIssue {
  __typename: '_xGitHubIssue';

  /**
   * Reason that the conversation was locked.
   */
  activeLockReason: XGitHubLockReason | null;

  /**
   * A list of Users assigned to this object.
   */
  assignees: IXGitHubUserConnection;

  /**
   * The actor who authored the comment.
   */
  author: _xGitHubActor | null;

  /**
   * Author's association with the subject of the comment.
   */
  authorAssociation: XGitHubCommentAuthorAssociation;

  /**
   * Identifies the body of the issue.
   */
  body: string;

  /**
   * The body rendered to HTML.
   */
  bodyHTML: any;

  /**
   * The http path for this issue body
   */
  bodyResourcePath: any;

  /**
   * Identifies the body of the issue rendered to text.
   */
  bodyText: string;

  /**
   * The http URL for this issue body
   */
  bodyUrl: any;

  /**
   * `true` if the object is closed (definition of closed may depend on type)
   */
  closed: boolean;

  /**
   * Identifies the date and time when the object was closed.
   */
  closedAt: any | null;

  /**
   * A list of comments associated with the Issue.
   */
  comments: IXGitHubIssueCommentConnection;

  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: any;

  /**
   * Check if this comment was created via an email reply.
   */
  createdViaEmail: boolean;

  /**
   * Identifies the primary key from the database.
   */
  databaseId: number | null;

  /**
   * The actor who edited the comment.
   */
  editor: _xGitHubActor | null;

  /**
   * The hovercard information for this issue
   */
  hovercard: IXGitHubHovercard;
  id: string;

  /**
   * Check if this comment was edited and includes an edit with the creation data
   */
  includesCreatedEdit: boolean;

  /**
   * Indicates whether or not this issue is currently pinned to the repository issues list
   */
  isPinned: boolean | null;

  /**
   * Is this issue read by the viewer
   */
  isReadByViewer: boolean | null;

  /**
   * A list of labels associated with the object.
   */
  labels: IXGitHubLabelConnection | null;

  /**
   * The moment the editor made the last edit
   */
  lastEditedAt: any | null;

  /**
   * `true` if the object is locked
   */
  locked: boolean;

  /**
   * Identifies the milestone associated with the issue.
   */
  milestone: IXGitHubMilestone | null;

  /**
   * Identifies the issue number.
   */
  number: number;

  /**
   * A list of Users that are participating in the Issue conversation.
   */
  participants: IXGitHubUserConnection;

  /**
   * List of project cards associated with this issue.
   */
  projectCards: IXGitHubProjectCardConnection;

  /**
   * Identifies when the comment was published at.
   */
  publishedAt: any | null;

  /**
   * A list of reactions grouped by content left on the subject.
   */
  reactionGroups: Array<IXGitHubReactionGroup> | null;

  /**
   * A list of Reactions left on the Issue.
   */
  reactions: IXGitHubReactionConnection;

  /**
   * The repository associated with this node.
   */
  repository: IXGitHubRepository;

  /**
   * The HTTP path for this issue
   */
  resourcePath: any;

  /**
   * Identifies the state of the issue.
   */
  state: XGitHubIssueState;

  /**
   * A list of events, comments, commits, etc. associated with the issue.
   * @deprecated "`timeline` will be removed Use Issue.timelineItems instead. Removal on 2020-10-01 UTC."
   */
  timeline: IXGitHubIssueTimelineConnection;

  /**
   * A list of events, comments, commits, etc. associated with the issue.
   */
  timelineItems: IXGitHubIssueTimelineItemsConnection;

  /**
   * Identifies the issue title.
   */
  title: string;

  /**
   * Identifies the issue title rendered to HTML.
   */
  titleHTML: string;

  /**
   * Identifies the date and time when the object was last updated.
   */
  updatedAt: any;

  /**
   * The HTTP URL for this issue
   */
  url: any;

  /**
   * A list of edits to this content.
   */
  userContentEdits: IXGitHubUserContentEditConnection | null;

  /**
   * Can user react to this subject
   */
  viewerCanReact: boolean;

  /**
   * Check if the viewer is able to change their subscription status for the repository.
   */
  viewerCanSubscribe: boolean;

  /**
   * Check if the current viewer can update this object.
   */
  viewerCanUpdate: boolean;

  /**
   * Reasons why the current viewer can not update this comment.
   */
  viewerCannotUpdateReasons: Array<XGitHubCommentCannotUpdateReason>;

  /**
   * Did the viewer author this comment.
   */
  viewerDidAuthor: boolean;

  /**
   * Identifies if the viewer is watching, not watching, or ignoring the subscribable entity.
   */
  viewerSubscription: XGitHubSubscriptionState | null;
}

export interface IAssigneesOnXGitHubIssueArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface ICommentsOnXGitHubIssueArguments {
  /**
   * Ordering options for issue comments returned from the connection.
   */
  orderBy?: IXGitHubIssueCommentOrder | null;

  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IHovercardOnXGitHubIssueArguments {
  /**
   * Whether or not to include notification contexts
   * @default true
   */
  includeNotificationContexts?: boolean | null;
}

export interface ILabelsOnXGitHubIssueArguments {
  /**
   * Ordering options for labels returned from the connection.
   * @default {"field":"CREATED_AT","direction":"ASC"}
   */
  orderBy?: IXGitHubLabelOrder | null;

  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IParticipantsOnXGitHubIssueArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IProjectCardsOnXGitHubIssueArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * A list of archived states to filter the cards by
   * @default ["ARCHIVED","NOT_ARCHIVED"]
   */
  archivedStates?: Array<XGitHubProjectCardArchivedState | null> | null;
}

export interface IReactionsOnXGitHubIssueArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Allows filtering Reactions by emoji.
   */
  content?: XGitHubReactionContent | null;

  /**
   * Allows specifying the order in which reactions are returned.
   */
  orderBy?: IXGitHubReactionOrder | null;
}

export interface ITimelineOnXGitHubIssueArguments {
  /**
   * Allows filtering timeline events by a `since` timestamp.
   */
  since?: any | null;

  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface ITimelineItemsOnXGitHubIssueArguments {
  /**
   * Filter timeline items by a `since` timestamp.
   */
  since?: any | null;

  /**
   * Skips the first _n_ elements in the list.
   */
  skip?: number | null;

  /**
   * Filter timeline items by type.
   */
  itemTypes?: Array<XGitHubIssueTimelineItemsItemType> | null;

  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IUserContentEditsOnXGitHubIssueArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

/**
 * Represents a comment on an Issue.
 */
export interface IXGitHubIssueComment {
  __typename: '_xGitHubIssueComment';

  /**
   * The actor who authored the comment.
   */
  author: _xGitHubActor | null;

  /**
   * Author's association with the subject of the comment.
   */
  authorAssociation: XGitHubCommentAuthorAssociation;

  /**
   * The body as Markdown.
   */
  body: string;

  /**
   * The body rendered to HTML.
   */
  bodyHTML: any;

  /**
   * The body rendered to text.
   */
  bodyText: string;

  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: any;

  /**
   * Check if this comment was created via an email reply.
   */
  createdViaEmail: boolean;

  /**
   * Identifies the primary key from the database.
   */
  databaseId: number | null;

  /**
   * The actor who edited the comment.
   */
  editor: _xGitHubActor | null;
  id: string;

  /**
   * Check if this comment was edited and includes an edit with the creation data
   */
  includesCreatedEdit: boolean;

  /**
   * Returns whether or not a comment has been minimized.
   */
  isMinimized: boolean;

  /**
   * Identifies the issue associated with the comment.
   */
  issue: IXGitHubIssue;

  /**
   * The moment the editor made the last edit
   */
  lastEditedAt: any | null;

  /**
   * Returns why the comment was minimized.
   */
  minimizedReason: string | null;

  /**
   * Identifies when the comment was published at.
   */
  publishedAt: any | null;

  /**
   * Returns the pull request associated with the comment, if this comment was made on a
   * pull request.
   */
  pullRequest: IXGitHubPullRequest | null;

  /**
   * A list of reactions grouped by content left on the subject.
   */
  reactionGroups: Array<IXGitHubReactionGroup> | null;

  /**
   * A list of Reactions left on the Issue.
   */
  reactions: IXGitHubReactionConnection;

  /**
   * The repository associated with this node.
   */
  repository: IXGitHubRepository;

  /**
   * The HTTP path for this issue comment
   */
  resourcePath: any;

  /**
   * Identifies the date and time when the object was last updated.
   */
  updatedAt: any;

  /**
   * The HTTP URL for this issue comment
   */
  url: any;

  /**
   * A list of edits to this content.
   */
  userContentEdits: IXGitHubUserContentEditConnection | null;

  /**
   * Check if the current viewer can delete this object.
   */
  viewerCanDelete: boolean;

  /**
   * Check if the current viewer can minimize this object.
   */
  viewerCanMinimize: boolean;

  /**
   * Can user react to this subject
   */
  viewerCanReact: boolean;

  /**
   * Check if the current viewer can update this object.
   */
  viewerCanUpdate: boolean;

  /**
   * Reasons why the current viewer can not update this comment.
   */
  viewerCannotUpdateReasons: Array<XGitHubCommentCannotUpdateReason>;

  /**
   * Did the viewer author this comment.
   */
  viewerDidAuthor: boolean;
}

export interface IReactionsOnXGitHubIssueCommentArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Allows filtering Reactions by emoji.
   */
  content?: XGitHubReactionContent | null;

  /**
   * Allows specifying the order in which reactions are returned.
   */
  orderBy?: IXGitHubReactionOrder | null;
}

export interface IUserContentEditsOnXGitHubIssueCommentArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

/**
 * The connection type for IssueComment.
 */
export interface IXGitHubIssueCommentConnection {
  __typename: '_xGitHubIssueCommentConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubIssueCommentEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitHubIssueComment | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface IXGitHubIssueCommentEdge {
  __typename: '_xGitHubIssueCommentEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitHubIssueComment | null;
}

/**
 * Ways in which lists of issue comments can be ordered upon return.
 */
export interface IXGitHubIssueCommentOrder {
  /**
   * The field in which to order issue comments by.
   */
  field: XGitHubIssueCommentOrderField;

  /**
   * The direction in which to order issue comments by the specified field.
   */
  direction: XGitHubOrderDirection;
}

/**
 * Properties by which issue comment connections can be ordered.
 */
export const enum XGitHubIssueCommentOrderField {
  /**
   * Order issue comments by update time
   */
  UPDATED_AT = 'UPDATED_AT',
}

/**
 * The connection type for Issue.
 */
export interface IXGitHubIssueConnection {
  __typename: '_xGitHubIssueConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubIssueEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitHubIssue | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * This aggregates issues opened by a user within one repository.
 */
export interface IXGitHubIssueContributionsByRepository {
  __typename: '_xGitHubIssueContributionsByRepository';

  /**
   * The issue contributions.
   */
  contributions: IXGitHubCreatedIssueContributionConnection;

  /**
   * The repository in which the issues were opened.
   */
  repository: IXGitHubRepository;
}

export interface IContributionsOnXGitHubIssueContributionsByRepositoryArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Ordering options for contributions returned from the connection.
   * @default {"direction":"DESC"}
   */
  orderBy?: IXGitHubContributionOrder | null;
}

/**
 * An edge in a connection.
 */
export interface IXGitHubIssueEdge {
  __typename: '_xGitHubIssueEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitHubIssue | null;
}

/**
 * Ways in which to filter lists of issues.
 */
export interface IXGitHubIssueFilters {
  /**
   * List issues assigned to given name. Pass in `null` for issues with no assigned user, and `*` for issues assigned to any user.
   */
  assignee?: string | null;

  /**
   * List issues created by given name.
   */
  createdBy?: string | null;

  /**
   * List issues where the list of label names exist on the issue.
   */
  labels?: Array<string> | null;

  /**
   * List issues where the given name is mentioned in the issue.
   */
  mentioned?: string | null;

  /**
   * List issues by given milestone argument. If an string representation of an integer is passed, it should refer to a milestone by its number field. Pass in `null` for issues with no milestone, and `*` for issues that are assigned to any milestone.
   */
  milestone?: string | null;

  /**
   * List issues that have been updated at or after the given date.
   */
  since?: any | null;

  /**
   * List issues filtered by the list of states given.
   */
  states?: Array<XGitHubIssueState> | null;

  /**
   * List issues subscribed to by viewer.
   * @default false
   */
  viewerSubscribed?: boolean | null;
}

/**
 * Used for return value of Repository.issueOrPullRequest.
 */
export type _xGitHubIssueOrPullRequest = IXGitHubIssue | IXGitHubPullRequest;

/**
 * Ways in which lists of issues can be ordered upon return.
 */
export interface IXGitHubIssueOrder {
  /**
   * The field in which to order issues by.
   */
  field: XGitHubIssueOrderField;

  /**
   * The direction in which to order issues by the specified field.
   */
  direction: XGitHubOrderDirection;
}

/**
 * Properties by which issue connections can be ordered.
 */
export const enum XGitHubIssueOrderField {
  /**
   * Order issues by creation time
   */
  CREATED_AT = 'CREATED_AT',

  /**
   * Order issues by update time
   */
  UPDATED_AT = 'UPDATED_AT',

  /**
   * Order issues by comment count
   */
  COMMENTS = 'COMMENTS',
}

/**
 * The possible states of an issue.
 */
export const enum XGitHubIssueState {
  /**
   * An issue that is still open
   */
  OPEN = 'OPEN',

  /**
   * An issue that has been closed
   */
  CLOSED = 'CLOSED',
}

/**
 * A repository issue template.
 */
export interface IXGitHubIssueTemplate {
  __typename: '_xGitHubIssueTemplate';

  /**
   * The template purpose.
   */
  about: string | null;

  /**
   * The suggested issue body.
   */
  body: string | null;

  /**
   * The template name.
   */
  name: string;

  /**
   * The suggested issue title.
   */
  title: string | null;
}

/**
 * The connection type for IssueTimelineItem.
 */
export interface IXGitHubIssueTimelineConnection {
  __typename: '_xGitHubIssueTimelineConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubIssueTimelineItemEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<_xGitHubIssueTimelineItem | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An item in an issue timeline
 */
export type _xGitHubIssueTimelineItem =
  | IXGitHubAssignedEvent
  | IXGitHubClosedEvent
  | IXGitHubCommit
  | IXGitHubCrossReferencedEvent
  | IXGitHubDemilestonedEvent
  | IXGitHubIssueComment
  | IXGitHubLabeledEvent
  | IXGitHubLockedEvent
  | IXGitHubMilestonedEvent
  | IXGitHubReferencedEvent
  | IXGitHubRenamedTitleEvent
  | IXGitHubReopenedEvent
  | IXGitHubSubscribedEvent
  | IXGitHubTransferredEvent
  | IXGitHubUnassignedEvent
  | IXGitHubUnlabeledEvent
  | IXGitHubUnlockedEvent
  | IXGitHubUnsubscribedEvent
  | IXGitHubUserBlockedEvent;

/**
 * An edge in a connection.
 */
export interface IXGitHubIssueTimelineItemEdge {
  __typename: '_xGitHubIssueTimelineItemEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: _xGitHubIssueTimelineItem | null;
}

/**
 * An item in an issue timeline
 */
export type _xGitHubIssueTimelineItems =
  | IXGitHubAddedToProjectEvent
  | IXGitHubAssignedEvent
  | IXGitHubClosedEvent
  | IXGitHubCommentDeletedEvent
  | IXGitHubConnectedEvent
  | IXGitHubConvertedNoteToIssueEvent
  | IXGitHubCrossReferencedEvent
  | IXGitHubDemilestonedEvent
  | IXGitHubDisconnectedEvent
  | IXGitHubIssueComment
  | IXGitHubLabeledEvent
  | IXGitHubLockedEvent
  | IXGitHubMarkedAsDuplicateEvent
  | IXGitHubMentionedEvent
  | IXGitHubMilestonedEvent
  | IXGitHubMovedColumnsInProjectEvent
  | IXGitHubPinnedEvent
  | IXGitHubReferencedEvent
  | IXGitHubRemovedFromProjectEvent
  | IXGitHubRenamedTitleEvent
  | IXGitHubReopenedEvent
  | IXGitHubSubscribedEvent
  | IXGitHubTransferredEvent
  | IXGitHubUnassignedEvent
  | IXGitHubUnlabeledEvent
  | IXGitHubUnlockedEvent
  | IXGitHubUnmarkedAsDuplicateEvent
  | IXGitHubUnpinnedEvent
  | IXGitHubUnsubscribedEvent
  | IXGitHubUserBlockedEvent;

/**
 * The connection type for IssueTimelineItems.
 */
export interface IXGitHubIssueTimelineItemsConnection {
  __typename: '_xGitHubIssueTimelineItemsConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubIssueTimelineItemsEdge | null> | null;

  /**
   * Identifies the count of items after applying `before` and `after` filters.
   */
  filteredCount: number;

  /**
   * A list of nodes.
   */
  nodes: Array<_xGitHubIssueTimelineItems | null> | null;

  /**
   * Identifies the count of items after applying `before`/`after` filters and `first`/`last`/`skip` slicing.
   */
  pageCount: number;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;

  /**
   * Identifies the date and time when the timeline was last updated.
   */
  updatedAt: any;
}

/**
 * An edge in a connection.
 */
export interface IXGitHubIssueTimelineItemsEdge {
  __typename: '_xGitHubIssueTimelineItemsEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: _xGitHubIssueTimelineItems | null;
}

/**
 * The possible item types found in a timeline.
 */
export const enum XGitHubIssueTimelineItemsItemType {
  /**
   * Represents a comment on an Issue.
   */
  ISSUE_COMMENT = 'ISSUE_COMMENT',

  /**
   * Represents a mention made by one issue or pull request to another.
   */
  CROSS_REFERENCED_EVENT = 'CROSS_REFERENCED_EVENT',

  /**
   * Represents a 'added_to_project' event on a given issue or pull request.
   */
  ADDED_TO_PROJECT_EVENT = 'ADDED_TO_PROJECT_EVENT',

  /**
   * Represents an 'assigned' event on any assignable object.
   */
  ASSIGNED_EVENT = 'ASSIGNED_EVENT',

  /**
   * Represents a 'closed' event on any `Closable`.
   */
  CLOSED_EVENT = 'CLOSED_EVENT',

  /**
   * Represents a 'comment_deleted' event on a given issue or pull request.
   */
  COMMENT_DELETED_EVENT = 'COMMENT_DELETED_EVENT',

  /**
   * Represents a 'connected' event on a given issue or pull request.
   */
  CONNECTED_EVENT = 'CONNECTED_EVENT',

  /**
   * Represents a 'converted_note_to_issue' event on a given issue or pull request.
   */
  CONVERTED_NOTE_TO_ISSUE_EVENT = 'CONVERTED_NOTE_TO_ISSUE_EVENT',

  /**
   * Represents a 'demilestoned' event on a given issue or pull request.
   */
  DEMILESTONED_EVENT = 'DEMILESTONED_EVENT',

  /**
   * Represents a 'disconnected' event on a given issue or pull request.
   */
  DISCONNECTED_EVENT = 'DISCONNECTED_EVENT',

  /**
   * Represents a 'labeled' event on a given issue or pull request.
   */
  LABELED_EVENT = 'LABELED_EVENT',

  /**
   * Represents a 'locked' event on a given issue or pull request.
   */
  LOCKED_EVENT = 'LOCKED_EVENT',

  /**
   * Represents a 'marked_as_duplicate' event on a given issue or pull request.
   */
  MARKED_AS_DUPLICATE_EVENT = 'MARKED_AS_DUPLICATE_EVENT',

  /**
   * Represents a 'mentioned' event on a given issue or pull request.
   */
  MENTIONED_EVENT = 'MENTIONED_EVENT',

  /**
   * Represents a 'milestoned' event on a given issue or pull request.
   */
  MILESTONED_EVENT = 'MILESTONED_EVENT',

  /**
   * Represents a 'moved_columns_in_project' event on a given issue or pull request.
   */
  MOVED_COLUMNS_IN_PROJECT_EVENT = 'MOVED_COLUMNS_IN_PROJECT_EVENT',

  /**
   * Represents a 'pinned' event on a given issue or pull request.
   */
  PINNED_EVENT = 'PINNED_EVENT',

  /**
   * Represents a 'referenced' event on a given `ReferencedSubject`.
   */
  REFERENCED_EVENT = 'REFERENCED_EVENT',

  /**
   * Represents a 'removed_from_project' event on a given issue or pull request.
   */
  REMOVED_FROM_PROJECT_EVENT = 'REMOVED_FROM_PROJECT_EVENT',

  /**
   * Represents a 'renamed' event on a given issue or pull request
   */
  RENAMED_TITLE_EVENT = 'RENAMED_TITLE_EVENT',

  /**
   * Represents a 'reopened' event on any `Closable`.
   */
  REOPENED_EVENT = 'REOPENED_EVENT',

  /**
   * Represents a 'subscribed' event on a given `Subscribable`.
   */
  SUBSCRIBED_EVENT = 'SUBSCRIBED_EVENT',

  /**
   * Represents a 'transferred' event on a given issue or pull request.
   */
  TRANSFERRED_EVENT = 'TRANSFERRED_EVENT',

  /**
   * Represents an 'unassigned' event on any assignable object.
   */
  UNASSIGNED_EVENT = 'UNASSIGNED_EVENT',

  /**
   * Represents an 'unlabeled' event on a given issue or pull request.
   */
  UNLABELED_EVENT = 'UNLABELED_EVENT',

  /**
   * Represents an 'unlocked' event on a given issue or pull request.
   */
  UNLOCKED_EVENT = 'UNLOCKED_EVENT',

  /**
   * Represents a 'user_blocked' event on a given user.
   */
  USER_BLOCKED_EVENT = 'USER_BLOCKED_EVENT',

  /**
   * Represents an 'unmarked_as_duplicate' event on a given issue or pull request.
   */
  UNMARKED_AS_DUPLICATE_EVENT = 'UNMARKED_AS_DUPLICATE_EVENT',

  /**
   * Represents an 'unpinned' event on a given issue or pull request.
   */
  UNPINNED_EVENT = 'UNPINNED_EVENT',

  /**
   * Represents an 'unsubscribed' event on a given `Subscribable`.
   */
  UNSUBSCRIBED_EVENT = 'UNSUBSCRIBED_EVENT',
}

/**
 * Represents a user signing up for a GitHub account.
 */
export interface IXGitHubJoinedGitHubContribution {
  __typename: '_xGitHubJoinedGitHubContribution';

  /**
   * Whether this contribution is associated with a record you do not have access to. For
   * example, your own 'first issue' contribution may have been made on a repository you can no
   * longer access.
   */
  isRestricted: boolean;

  /**
   * When this contribution was made.
   */
  occurredAt: any;

  /**
   * The HTTP path for this contribution.
   */
  resourcePath: any;

  /**
   * The HTTP URL for this contribution.
   */
  url: any;

  /**
   * The user who made this contribution.
   */
  user: IXGitHubUser;
}

/**
 * A label for categorizing Issues, Pull Requests, Milestones, or Discussions with a given Repository.
 */
export interface IXGitHubLabel {
  __typename: '_xGitHubLabel';

  /**
   * Identifies the label color.
   */
  color: string;

  /**
   * Identifies the date and time when the label was created.
   */
  createdAt: any | null;

  /**
   * A brief description of this label.
   */
  description: string | null;
  id: string;

  /**
   * Indicates whether or not this is a default label.
   */
  isDefault: boolean;

  /**
   * A list of issues associated with this label.
   */
  issues: IXGitHubIssueConnection;

  /**
   * Identifies the label name.
   */
  name: string;

  /**
   * A list of pull requests associated with this label.
   */
  pullRequests: IXGitHubPullRequestConnection;

  /**
   * The repository associated with this label.
   */
  repository: IXGitHubRepository;

  /**
   * The HTTP path for this label.
   */
  resourcePath: any;

  /**
   * Identifies the date and time when the label was last updated.
   */
  updatedAt: any | null;

  /**
   * The HTTP URL for this label.
   */
  url: any;
}

export interface IIssuesOnXGitHubLabelArguments {
  /**
   * Ordering options for issues returned from the connection.
   */
  orderBy?: IXGitHubIssueOrder | null;

  /**
   * A list of label names to filter the pull requests by.
   */
  labels?: Array<string> | null;

  /**
   * A list of states to filter the issues by.
   */
  states?: Array<XGitHubIssueState> | null;

  /**
   * Filtering options for issues returned from the connection.
   */
  filterBy?: IXGitHubIssueFilters | null;

  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IPullRequestsOnXGitHubLabelArguments {
  /**
   * A list of states to filter the pull requests by.
   */
  states?: Array<XGitHubPullRequestState> | null;

  /**
   * A list of label names to filter the pull requests by.
   */
  labels?: Array<string> | null;

  /**
   * The head ref name to filter the pull requests by.
   */
  headRefName?: string | null;

  /**
   * The base ref name to filter the pull requests by.
   */
  baseRefName?: string | null;

  /**
   * Ordering options for pull requests returned from the connection.
   */
  orderBy?: IXGitHubIssueOrder | null;

  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

/**
 * The connection type for Label.
 */
export interface IXGitHubLabelConnection {
  __typename: '_xGitHubLabelConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubLabelEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitHubLabel | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface IXGitHubLabelEdge {
  __typename: '_xGitHubLabelEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitHubLabel | null;
}

/**
 * Ways in which lists of labels can be ordered upon return.
 */
export interface IXGitHubLabelOrder {
  /**
   * The field in which to order labels by.
   */
  field: XGitHubLabelOrderField;

  /**
   * The direction in which to order labels by the specified field.
   */
  direction: XGitHubOrderDirection;
}

/**
 * Properties by which label connections can be ordered.
 */
export const enum XGitHubLabelOrderField {
  /**
   * Order labels by name
   */
  NAME = 'NAME',

  /**
   * Order labels by creation time
   */
  CREATED_AT = 'CREATED_AT',
}

/**
 * An object that can have labels assigned to it.
 */
export type _xGitHubLabelable =
  | IXGitHubDiscussion
  | IXGitHubIssue
  | IXGitHubPullRequest;

/**
 * An object that can have labels assigned to it.
 */
export interface IXGitHubLabelable {
  __typename: '_xGitHubLabelable';

  /**
   * A list of labels associated with the object.
   */
  labels: IXGitHubLabelConnection | null;
}

export interface ILabelsOnXGitHubLabelableArguments {
  /**
   * Ordering options for labels returned from the connection.
   * @default {"field":"CREATED_AT","direction":"ASC"}
   */
  orderBy?: IXGitHubLabelOrder | null;

  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

/**
 * Represents a 'labeled' event on a given issue or pull request.
 */
export interface IXGitHubLabeledEvent {
  __typename: '_xGitHubLabeledEvent';

  /**
   * Identifies the actor who performed the event.
   */
  actor: _xGitHubActor | null;

  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: any;
  id: string;

  /**
   * Identifies the label associated with the 'labeled' event.
   */
  label: IXGitHubLabel;

  /**
   * Identifies the `Labelable` associated with the event.
   */
  labelable: _xGitHubLabelable;
}

/**
 * Represents a given language found in repositories.
 */
export interface IXGitHubLanguage {
  __typename: '_xGitHubLanguage';

  /**
   * The color defined for the current language.
   */
  color: string | null;
  id: string;

  /**
   * The name of the current language.
   */
  name: string;
}

/**
 * A list of languages associated with the parent.
 */
export interface IXGitHubLanguageConnection {
  __typename: '_xGitHubLanguageConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubLanguageEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitHubLanguage | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;

  /**
   * The total size in bytes of files written in that language.
   */
  totalSize: number;
}

/**
 * Represents the language of a repository.
 */
export interface IXGitHubLanguageEdge {
  __typename: '_xGitHubLanguageEdge';
  cursor: string;
  node: IXGitHubLanguage;

  /**
   * The number of bytes of code written in the language.
   */
  size: number;
}

/**
 * Ordering options for language connections.
 */
export interface IXGitHubLanguageOrder {
  /**
   * The field to order languages by.
   */
  field: XGitHubLanguageOrderField;

  /**
   * The ordering direction.
   */
  direction: XGitHubOrderDirection;
}

/**
 * Properties by which language connections can be ordered.
 */
export const enum XGitHubLanguageOrderField {
  /**
   * Order languages by the size of all files containing the language
   */
  SIZE = 'SIZE',
}

/**
 * A repository's open source license
 */
export interface IXGitHubLicense {
  __typename: '_xGitHubLicense';

  /**
   * The full text of the license
   */
  body: string;

  /**
   * The conditions set by the license
   */
  conditions: Array<IXGitHubLicenseRule | null>;

  /**
   * A human-readable description of the license
   */
  description: string | null;

  /**
   * Whether the license should be featured
   */
  featured: boolean;

  /**
   * Whether the license should be displayed in license pickers
   */
  hidden: boolean;
  id: string;

  /**
   * Instructions on how to implement the license
   */
  implementation: string | null;

  /**
   * The lowercased SPDX ID of the license
   */
  key: string;

  /**
   * The limitations set by the license
   */
  limitations: Array<IXGitHubLicenseRule | null>;

  /**
   * The license full name specified by <https://spdx.org/licenses>
   */
  name: string;

  /**
   * Customary short name if applicable (e.g, GPLv3)
   */
  nickname: string | null;

  /**
   * The permissions set by the license
   */
  permissions: Array<IXGitHubLicenseRule | null>;

  /**
   * Whether the license is a pseudo-license placeholder (e.g., other, no-license)
   */
  pseudoLicense: boolean;

  /**
   * Short identifier specified by <https://spdx.org/licenses>
   */
  spdxId: string | null;

  /**
   * URL to the license on <https://choosealicense.com>
   */
  url: any | null;
}

/**
 * Describes a License's conditions, permissions, and limitations
 */
export interface IXGitHubLicenseRule {
  __typename: '_xGitHubLicenseRule';

  /**
   * A description of the rule
   */
  description: string;

  /**
   * The machine-readable rule key
   */
  key: string;

  /**
   * The human-readable rule label
   */
  label: string;
}

/**
 * Autogenerated input type of LinkRepositoryToProject
 */
export interface IXGitHubLinkRepositoryToProjectInput {
  /**
   * The ID of the Project to link to a Repository
   */
  projectId: string;

  /**
   * The ID of the Repository to link to a Project.
   */
  repositoryId: string;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of LinkRepositoryToProject
 */
export interface IXGitHubLinkRepositoryToProjectPayload {
  __typename: '_xGitHubLinkRepositoryToProjectPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The linked Project.
   */
  project: IXGitHubProject | null;

  /**
   * The linked Repository.
   */
  repository: IXGitHubRepository | null;
}

/**
 * Autogenerated input type of LockLockable
 */
export interface IXGitHubLockLockableInput {
  /**
   * ID of the item to be locked.
   */
  lockableId: string;

  /**
   * A reason for why the item will be locked.
   */
  lockReason?: XGitHubLockReason | null;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of LockLockable
 */
export interface IXGitHubLockLockablePayload {
  __typename: '_xGitHubLockLockablePayload';

  /**
   * Identifies the actor who performed the event.
   */
  actor: _xGitHubActor | null;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The item that was locked.
   */
  lockedRecord: _xGitHubLockable | null;
}

/**
 * The possible reasons that an issue or pull request was locked.
 */
export const enum XGitHubLockReason {
  /**
   * The issue or pull request was locked because the conversation was off-topic.
   */
  OFF_TOPIC = 'OFF_TOPIC',

  /**
   * The issue or pull request was locked because the conversation was too heated.
   */
  TOO_HEATED = 'TOO_HEATED',

  /**
   * The issue or pull request was locked because the conversation was resolved.
   */
  RESOLVED = 'RESOLVED',

  /**
   * The issue or pull request was locked because the conversation was spam.
   */
  SPAM = 'SPAM',
}

/**
 * An object that can be locked.
 */
export type _xGitHubLockable =
  | IXGitHubDiscussion
  | IXGitHubIssue
  | IXGitHubPullRequest;

/**
 * An object that can be locked.
 */
export interface IXGitHubLockable {
  __typename: '_xGitHubLockable';

  /**
   * Reason that the conversation was locked.
   */
  activeLockReason: XGitHubLockReason | null;

  /**
   * `true` if the object is locked
   */
  locked: boolean;
}

/**
 * Represents a 'locked' event on a given issue or pull request.
 */
export interface IXGitHubLockedEvent {
  __typename: '_xGitHubLockedEvent';

  /**
   * Identifies the actor who performed the event.
   */
  actor: _xGitHubActor | null;

  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: any;
  id: string;

  /**
   * Reason that the conversation was locked (optional).
   */
  lockReason: XGitHubLockReason | null;

  /**
   * Object that was locked.
   */
  lockable: _xGitHubLockable;
}

/**
 * A placeholder user for attribution of imported data on GitHub.
 */
export interface IXGitHubMannequin {
  __typename: '_xGitHubMannequin';

  /**
   * A URL pointing to the GitHub App's public avatar.
   */
  avatarUrl: any;

  /**
   * The user that has claimed the data attributed to this mannequin.
   */
  claimant: IXGitHubUser | null;

  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: any;

  /**
   * Identifies the primary key from the database.
   */
  databaseId: number | null;

  /**
   * The mannequin's email on the source instance.
   */
  email: string | null;
  id: string;

  /**
   * The username of the actor.
   */
  login: string;

  /**
   * The HTML path to this resource.
   */
  resourcePath: any;

  /**
   * Identifies the date and time when the object was last updated.
   */
  updatedAt: any;

  /**
   * The URL to this resource.
   */
  url: any;
}

export interface IAvatarUrlOnXGitHubMannequinArguments {
  /**
   * The size of the resulting square image.
   */
  size?: number | null;
}

/**
 * Autogenerated input type of MarkDiscussionCommentAsAnswer
 */
export interface IXGitHubMarkDiscussionCommentAsAnswerInput {
  /**
   * The Node ID of the discussion comment to mark as an answer.
   */
  id: string;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of MarkDiscussionCommentAsAnswer
 */
export interface IXGitHubMarkDiscussionCommentAsAnswerPayload {
  __typename: '_xGitHubMarkDiscussionCommentAsAnswerPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The discussion that includes the chosen comment.
   */
  discussion: IXGitHubDiscussion | null;
}

/**
 * Autogenerated input type of MarkFileAsViewed
 */
export interface IXGitHubMarkFileAsViewedInput {
  /**
   * The Node ID of the pull request.
   */
  pullRequestId: string;

  /**
   * The path of the file to mark as viewed
   */
  path: string;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of MarkFileAsViewed
 */
export interface IXGitHubMarkFileAsViewedPayload {
  __typename: '_xGitHubMarkFileAsViewedPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The updated pull request.
   */
  pullRequest: IXGitHubPullRequest | null;
}

/**
 * Autogenerated input type of MarkPullRequestReadyForReview
 */
export interface IXGitHubMarkPullRequestReadyForReviewInput {
  /**
   * ID of the pull request to be marked as ready for review.
   */
  pullRequestId: string;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of MarkPullRequestReadyForReview
 */
export interface IXGitHubMarkPullRequestReadyForReviewPayload {
  __typename: '_xGitHubMarkPullRequestReadyForReviewPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The pull request that is ready for review.
   */
  pullRequest: IXGitHubPullRequest | null;
}

/**
 * Represents a 'marked_as_duplicate' event on a given issue or pull request.
 */
export interface IXGitHubMarkedAsDuplicateEvent {
  __typename: '_xGitHubMarkedAsDuplicateEvent';

  /**
   * Identifies the actor who performed the event.
   */
  actor: _xGitHubActor | null;

  /**
   * The authoritative issue or pull request which has been duplicated by another.
   */
  canonical: _xGitHubIssueOrPullRequest | null;

  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: any;

  /**
   * The issue or pull request which has been marked as a duplicate of another.
   */
  duplicate: _xGitHubIssueOrPullRequest | null;
  id: string;

  /**
   * Canonical and duplicate belong to different repositories.
   */
  isCrossRepository: boolean;
}

/**
 * A public description of a Marketplace category.
 */
export interface IXGitHubMarketplaceCategory {
  __typename: '_xGitHubMarketplaceCategory';

  /**
   * The category's description.
   */
  description: string | null;

  /**
   * The technical description of how apps listed in this category work with GitHub.
   */
  howItWorks: string | null;
  id: string;

  /**
   * The category's name.
   */
  name: string;

  /**
   * How many Marketplace listings have this as their primary category.
   */
  primaryListingCount: number;

  /**
   * The HTTP path for this Marketplace category.
   */
  resourcePath: any;

  /**
   * How many Marketplace listings have this as their secondary category.
   */
  secondaryListingCount: number;

  /**
   * The short name of the category used in its URL.
   */
  slug: string;

  /**
   * The HTTP URL for this Marketplace category.
   */
  url: any;
}

/**
 * A listing in the GitHub integration marketplace.
 */
export interface IXGitHubMarketplaceListing {
  __typename: '_xGitHubMarketplaceListing';

  /**
   * The GitHub App this listing represents.
   */
  app: IXGitHubApp | null;

  /**
   * URL to the listing owner's company site.
   */
  companyUrl: any | null;

  /**
   * The HTTP path for configuring access to the listing's integration or OAuth app
   */
  configurationResourcePath: any;

  /**
   * The HTTP URL for configuring access to the listing's integration or OAuth app
   */
  configurationUrl: any;

  /**
   * URL to the listing's documentation.
   */
  documentationUrl: any | null;

  /**
   * The listing's detailed description.
   */
  extendedDescription: string | null;

  /**
   * The listing's detailed description rendered to HTML.
   */
  extendedDescriptionHTML: any;

  /**
   * The listing's introductory description.
   */
  fullDescription: string;

  /**
   * The listing's introductory description rendered to HTML.
   */
  fullDescriptionHTML: any;

  /**
   * Does this listing have any plans with a free trial?
   */
  hasPublishedFreeTrialPlans: boolean;

  /**
   * Does this listing have a terms of service link?
   */
  hasTermsOfService: boolean;

  /**
   * Whether the creator of the app is a verified org
   */
  hasVerifiedOwner: boolean;

  /**
   * A technical description of how this app works with GitHub.
   */
  howItWorks: string | null;

  /**
   * The listing's technical description rendered to HTML.
   */
  howItWorksHTML: any;
  id: string;

  /**
   * URL to install the product to the viewer's account or organization.
   */
  installationUrl: any | null;

  /**
   * Whether this listing's app has been installed for the current viewer
   */
  installedForViewer: boolean;

  /**
   * Whether this listing has been removed from the Marketplace.
   */
  isArchived: boolean;

  /**
   * Whether this listing is still an editable draft that has not been submitted for review and is not publicly visible in the Marketplace.
   */
  isDraft: boolean;

  /**
   * Whether the product this listing represents is available as part of a paid plan.
   */
  isPaid: boolean;

  /**
   * Whether this listing has been approved for display in the Marketplace.
   */
  isPublic: boolean;

  /**
   * Whether this listing has been rejected by GitHub for display in the Marketplace.
   */
  isRejected: boolean;

  /**
   * Whether this listing has been approved for unverified display in the Marketplace.
   */
  isUnverified: boolean;

  /**
   * Whether this draft listing has been submitted for review for approval to be unverified in the Marketplace.
   */
  isUnverifiedPending: boolean;

  /**
   * Whether this draft listing has been submitted for review from GitHub for approval to be verified in the Marketplace.
   */
  isVerificationPendingFromDraft: boolean;

  /**
   * Whether this unverified listing has been submitted for review from GitHub for approval to be verified in the Marketplace.
   */
  isVerificationPendingFromUnverified: boolean;

  /**
   * Whether this listing has been approved for verified display in the Marketplace.
   */
  isVerified: boolean;

  /**
   * The hex color code, without the leading '#', for the logo background.
   */
  logoBackgroundColor: string;

  /**
   * URL for the listing's logo image.
   */
  logoUrl: any | null;

  /**
   * The listing's full name.
   */
  name: string;

  /**
   * The listing's very short description without a trailing period or ampersands.
   */
  normalizedShortDescription: string;

  /**
   * URL to the listing's detailed pricing.
   */
  pricingUrl: any | null;

  /**
   * The category that best describes the listing.
   */
  primaryCategory: IXGitHubMarketplaceCategory;

  /**
   * URL to the listing's privacy policy, may return an empty string for listings that do not require a privacy policy URL.
   */
  privacyPolicyUrl: any;

  /**
   * The HTTP path for the Marketplace listing.
   */
  resourcePath: any;

  /**
   * The URLs for the listing's screenshots.
   */
  screenshotUrls: Array<string | null>;

  /**
   * An alternate category that describes the listing.
   */
  secondaryCategory: IXGitHubMarketplaceCategory | null;

  /**
   * The listing's very short description.
   */
  shortDescription: string;

  /**
   * The short name of the listing used in its URL.
   */
  slug: string;

  /**
   * URL to the listing's status page.
   */
  statusUrl: any | null;

  /**
   * An email address for support for this listing's app.
   */
  supportEmail: string | null;

  /**
   * Either a URL or an email address for support for this listing's app, may return an empty string for listings that do not require a support URL.
   */
  supportUrl: any;

  /**
   * URL to the listing's terms of service.
   */
  termsOfServiceUrl: any | null;

  /**
   * The HTTP URL for the Marketplace listing.
   */
  url: any;

  /**
   * Can the current viewer add plans for this Marketplace listing.
   */
  viewerCanAddPlans: boolean;

  /**
   * Can the current viewer approve this Marketplace listing.
   */
  viewerCanApprove: boolean;

  /**
   * Can the current viewer delist this Marketplace listing.
   */
  viewerCanDelist: boolean;

  /**
   * Can the current viewer edit this Marketplace listing.
   */
  viewerCanEdit: boolean;

  /**
   * Can the current viewer edit the primary and secondary category of this
   * Marketplace listing.
   */
  viewerCanEditCategories: boolean;

  /**
   * Can the current viewer edit the plans for this Marketplace listing.
   */
  viewerCanEditPlans: boolean;

  /**
   * Can the current viewer return this Marketplace listing to draft state
   * so it becomes editable again.
   */
  viewerCanRedraft: boolean;

  /**
   * Can the current viewer reject this Marketplace listing by returning it to
   * an editable draft state or rejecting it entirely.
   */
  viewerCanReject: boolean;

  /**
   * Can the current viewer request this listing be reviewed for display in
   * the Marketplace as verified.
   */
  viewerCanRequestApproval: boolean;

  /**
   * Indicates whether the current user has an active subscription to this Marketplace listing.
   */
  viewerHasPurchased: boolean;

  /**
   * Indicates if the current user has purchased a subscription to this Marketplace listing
   * for all of the organizations the user owns.
   */
  viewerHasPurchasedForAllOrganizations: boolean;

  /**
   * Does the current viewer role allow them to administer this Marketplace listing.
   */
  viewerIsListingAdmin: boolean;
}

export interface ILogoUrlOnXGitHubMarketplaceListingArguments {
  /**
   * The size in pixels of the resulting square image.
   * @default 400
   */
  size?: number | null;
}

/**
 * Look up Marketplace Listings
 */
export interface IXGitHubMarketplaceListingConnection {
  __typename: '_xGitHubMarketplaceListingConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubMarketplaceListingEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitHubMarketplaceListing | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface IXGitHubMarketplaceListingEdge {
  __typename: '_xGitHubMarketplaceListingEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitHubMarketplaceListing | null;
}

/**
 * Entities that have members who can set status messages.
 */
export type _xGitHubMemberStatusable = IXGitHubOrganization | IXGitHubTeam;

/**
 * Entities that have members who can set status messages.
 */
export interface IXGitHubMemberStatusable {
  __typename: '_xGitHubMemberStatusable';

  /**
   * Get the status messages members of this entity have set that are either public or visible only to the organization.
   */
  memberStatuses: IXGitHubUserStatusConnection;
}

export interface IMemberStatusesOnXGitHubMemberStatusableArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Ordering options for user statuses returned from the connection.
   * @default {"field":"UPDATED_AT","direction":"DESC"}
   */
  orderBy?: IXGitHubUserStatusOrder | null;
}

/**
 * Audit log entry for a members_can_delete_repos.clear event.
 */
export interface IXGitHubMembersCanDeleteReposClearAuditEntry {
  __typename: '_xGitHubMembersCanDeleteReposClearAuditEntry';

  /**
   * The action name
   */
  action: string;

  /**
   * The user who initiated the action
   */
  actor: _xGitHubAuditEntryActor | null;

  /**
   * The IP address of the actor
   */
  actorIp: string | null;

  /**
   * A readable representation of the actor's location
   */
  actorLocation: IXGitHubActorLocation | null;

  /**
   * The username of the user who initiated the action
   */
  actorLogin: string | null;

  /**
   * The HTTP path for the actor.
   */
  actorResourcePath: any | null;

  /**
   * The HTTP URL for the actor.
   */
  actorUrl: any | null;

  /**
   * The time the action was initiated
   */
  createdAt: any;

  /**
   * The HTTP path for this enterprise.
   */
  enterpriseResourcePath: any | null;

  /**
   * The slug of the enterprise.
   */
  enterpriseSlug: string | null;

  /**
   * The HTTP URL for this enterprise.
   */
  enterpriseUrl: any | null;
  id: string;

  /**
   * The corresponding operation type for the action
   */
  operationType: XGitHubOperationType | null;

  /**
   * The Organization associated with the Audit Entry.
   */
  organization: IXGitHubOrganization | null;

  /**
   * The name of the Organization.
   */
  organizationName: string | null;

  /**
   * The HTTP path for the organization
   */
  organizationResourcePath: any | null;

  /**
   * The HTTP URL for the organization
   */
  organizationUrl: any | null;

  /**
   * The user affected by the action
   */
  user: IXGitHubUser | null;

  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin: string | null;

  /**
   * The HTTP path for the user.
   */
  userResourcePath: any | null;

  /**
   * The HTTP URL for the user.
   */
  userUrl: any | null;
}

/**
 * Audit log entry for a members_can_delete_repos.disable event.
 */
export interface IXGitHubMembersCanDeleteReposDisableAuditEntry {
  __typename: '_xGitHubMembersCanDeleteReposDisableAuditEntry';

  /**
   * The action name
   */
  action: string;

  /**
   * The user who initiated the action
   */
  actor: _xGitHubAuditEntryActor | null;

  /**
   * The IP address of the actor
   */
  actorIp: string | null;

  /**
   * A readable representation of the actor's location
   */
  actorLocation: IXGitHubActorLocation | null;

  /**
   * The username of the user who initiated the action
   */
  actorLogin: string | null;

  /**
   * The HTTP path for the actor.
   */
  actorResourcePath: any | null;

  /**
   * The HTTP URL for the actor.
   */
  actorUrl: any | null;

  /**
   * The time the action was initiated
   */
  createdAt: any;

  /**
   * The HTTP path for this enterprise.
   */
  enterpriseResourcePath: any | null;

  /**
   * The slug of the enterprise.
   */
  enterpriseSlug: string | null;

  /**
   * The HTTP URL for this enterprise.
   */
  enterpriseUrl: any | null;
  id: string;

  /**
   * The corresponding operation type for the action
   */
  operationType: XGitHubOperationType | null;

  /**
   * The Organization associated with the Audit Entry.
   */
  organization: IXGitHubOrganization | null;

  /**
   * The name of the Organization.
   */
  organizationName: string | null;

  /**
   * The HTTP path for the organization
   */
  organizationResourcePath: any | null;

  /**
   * The HTTP URL for the organization
   */
  organizationUrl: any | null;

  /**
   * The user affected by the action
   */
  user: IXGitHubUser | null;

  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin: string | null;

  /**
   * The HTTP path for the user.
   */
  userResourcePath: any | null;

  /**
   * The HTTP URL for the user.
   */
  userUrl: any | null;
}

/**
 * Audit log entry for a members_can_delete_repos.enable event.
 */
export interface IXGitHubMembersCanDeleteReposEnableAuditEntry {
  __typename: '_xGitHubMembersCanDeleteReposEnableAuditEntry';

  /**
   * The action name
   */
  action: string;

  /**
   * The user who initiated the action
   */
  actor: _xGitHubAuditEntryActor | null;

  /**
   * The IP address of the actor
   */
  actorIp: string | null;

  /**
   * A readable representation of the actor's location
   */
  actorLocation: IXGitHubActorLocation | null;

  /**
   * The username of the user who initiated the action
   */
  actorLogin: string | null;

  /**
   * The HTTP path for the actor.
   */
  actorResourcePath: any | null;

  /**
   * The HTTP URL for the actor.
   */
  actorUrl: any | null;

  /**
   * The time the action was initiated
   */
  createdAt: any;

  /**
   * The HTTP path for this enterprise.
   */
  enterpriseResourcePath: any | null;

  /**
   * The slug of the enterprise.
   */
  enterpriseSlug: string | null;

  /**
   * The HTTP URL for this enterprise.
   */
  enterpriseUrl: any | null;
  id: string;

  /**
   * The corresponding operation type for the action
   */
  operationType: XGitHubOperationType | null;

  /**
   * The Organization associated with the Audit Entry.
   */
  organization: IXGitHubOrganization | null;

  /**
   * The name of the Organization.
   */
  organizationName: string | null;

  /**
   * The HTTP path for the organization
   */
  organizationResourcePath: any | null;

  /**
   * The HTTP URL for the organization
   */
  organizationUrl: any | null;

  /**
   * The user affected by the action
   */
  user: IXGitHubUser | null;

  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin: string | null;

  /**
   * The HTTP path for the user.
   */
  userResourcePath: any | null;

  /**
   * The HTTP URL for the user.
   */
  userUrl: any | null;
}

/**
 * Represents a 'mentioned' event on a given issue or pull request.
 */
export interface IXGitHubMentionedEvent {
  __typename: '_xGitHubMentionedEvent';

  /**
   * Identifies the actor who performed the event.
   */
  actor: _xGitHubActor | null;

  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: any;

  /**
   * Identifies the primary key from the database.
   */
  databaseId: number | null;
  id: string;
}

/**
 * Autogenerated input type of MergeBranch
 */
export interface IXGitHubMergeBranchInput {
  /**
   * The Node ID of the Repository containing the base branch that will be modified.
   */
  repositoryId: string;

  /**
   * The name of the base branch that the provided head will be merged into.
   */
  base: string;

  /**
   * The head to merge into the base branch. This can be a branch name or a commit GitObjectID.
   */
  head: string;

  /**
   * Message to use for the merge commit. If omitted, a default will be used.
   */
  commitMessage?: string | null;

  /**
   * The email address to associate with this commit.
   */
  authorEmail?: string | null;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of MergeBranch
 */
export interface IXGitHubMergeBranchPayload {
  __typename: '_xGitHubMergeBranchPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The resulting merge Commit.
   */
  mergeCommit: IXGitHubCommit | null;
}

/**
 * Autogenerated input type of MergePullRequest
 */
export interface IXGitHubMergePullRequestInput {
  /**
   * ID of the pull request to be merged.
   */
  pullRequestId: string;

  /**
   * Commit headline to use for the merge commit; if omitted, a default message will be used.
   */
  commitHeadline?: string | null;

  /**
   * Commit body to use for the merge commit; if omitted, a default message will be used
   */
  commitBody?: string | null;

  /**
   * OID that the pull request head ref must match to allow merge; if omitted, no check is performed.
   */
  expectedHeadOid?: any | null;

  /**
   * The merge method to use. If omitted, defaults to 'MERGE'
   * @default "MERGE"
   */
  mergeMethod?: XGitHubPullRequestMergeMethod | null;

  /**
   * The email address to associate with this merge.
   */
  authorEmail?: string | null;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of MergePullRequest
 */
export interface IXGitHubMergePullRequestPayload {
  __typename: '_xGitHubMergePullRequestPayload';

  /**
   * Identifies the actor who performed the event.
   */
  actor: _xGitHubActor | null;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The pull request that was merged.
   */
  pullRequest: IXGitHubPullRequest | null;
}

/**
 * Whether or not a PullRequest can be merged.
 */
export const enum XGitHubMergeableState {
  /**
   * The pull request can be merged.
   */
  MERGEABLE = 'MERGEABLE',

  /**
   * The pull request cannot be merged due to merge conflicts.
   */
  CONFLICTING = 'CONFLICTING',

  /**
   * The mergeability of the pull request is still being calculated.
   */
  UNKNOWN = 'UNKNOWN',
}

/**
 * Represents a 'merged' event on a given pull request.
 */
export interface IXGitHubMergedEvent {
  __typename: '_xGitHubMergedEvent';

  /**
   * Identifies the actor who performed the event.
   */
  actor: _xGitHubActor | null;

  /**
   * Identifies the commit associated with the `merge` event.
   */
  commit: IXGitHubCommit | null;

  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: any;
  id: string;

  /**
   * Identifies the Ref associated with the `merge` event.
   */
  mergeRef: IXGitHubRef | null;

  /**
   * Identifies the name of the Ref associated with the `merge` event.
   */
  mergeRefName: string;

  /**
   * PullRequest referenced by event.
   */
  pullRequest: IXGitHubPullRequest;

  /**
   * The HTTP path for this merged event.
   */
  resourcePath: any;

  /**
   * The HTTP URL for this merged event.
   */
  url: any;
}

/**
 * Represents a Milestone object on a given repository.
 */
export interface IXGitHubMilestone {
  __typename: '_xGitHubMilestone';

  /**
   * `true` if the object is closed (definition of closed may depend on type)
   */
  closed: boolean;

  /**
   * Identifies the date and time when the object was closed.
   */
  closedAt: any | null;

  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: any;

  /**
   * Identifies the actor who created the milestone.
   */
  creator: _xGitHubActor | null;

  /**
   * Identifies the description of the milestone.
   */
  description: string | null;

  /**
   * Identifies the due date of the milestone.
   */
  dueOn: any | null;
  id: string;

  /**
   * A list of issues associated with the milestone.
   */
  issues: IXGitHubIssueConnection;

  /**
   * Identifies the number of the milestone.
   */
  number: number;

  /**
   * Identifies the percentage complete for the milestone
   */
  progressPercentage: number;

  /**
   * A list of pull requests associated with the milestone.
   */
  pullRequests: IXGitHubPullRequestConnection;

  /**
   * The repository associated with this milestone.
   */
  repository: IXGitHubRepository;

  /**
   * The HTTP path for this milestone
   */
  resourcePath: any;

  /**
   * Identifies the state of the milestone.
   */
  state: XGitHubMilestoneState;

  /**
   * Identifies the title of the milestone.
   */
  title: string;

  /**
   * Identifies the date and time when the object was last updated.
   */
  updatedAt: any;

  /**
   * The HTTP URL for this milestone
   */
  url: any;
}

export interface IIssuesOnXGitHubMilestoneArguments {
  /**
   * Ordering options for issues returned from the connection.
   */
  orderBy?: IXGitHubIssueOrder | null;

  /**
   * A list of label names to filter the pull requests by.
   */
  labels?: Array<string> | null;

  /**
   * A list of states to filter the issues by.
   */
  states?: Array<XGitHubIssueState> | null;

  /**
   * Filtering options for issues returned from the connection.
   */
  filterBy?: IXGitHubIssueFilters | null;

  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IPullRequestsOnXGitHubMilestoneArguments {
  /**
   * A list of states to filter the pull requests by.
   */
  states?: Array<XGitHubPullRequestState> | null;

  /**
   * A list of label names to filter the pull requests by.
   */
  labels?: Array<string> | null;

  /**
   * The head ref name to filter the pull requests by.
   */
  headRefName?: string | null;

  /**
   * The base ref name to filter the pull requests by.
   */
  baseRefName?: string | null;

  /**
   * Ordering options for pull requests returned from the connection.
   */
  orderBy?: IXGitHubIssueOrder | null;

  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

/**
 * The connection type for Milestone.
 */
export interface IXGitHubMilestoneConnection {
  __typename: '_xGitHubMilestoneConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubMilestoneEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitHubMilestone | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface IXGitHubMilestoneEdge {
  __typename: '_xGitHubMilestoneEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitHubMilestone | null;
}

/**
 * Types that can be inside a Milestone.
 */
export type _xGitHubMilestoneItem = IXGitHubIssue | IXGitHubPullRequest;

/**
 * Ordering options for milestone connections.
 */
export interface IXGitHubMilestoneOrder {
  /**
   * The field to order milestones by.
   */
  field: XGitHubMilestoneOrderField;

  /**
   * The ordering direction.
   */
  direction: XGitHubOrderDirection;
}

/**
 * Properties by which milestone connections can be ordered.
 */
export const enum XGitHubMilestoneOrderField {
  /**
   * Order milestones by when they are due.
   */
  DUE_DATE = 'DUE_DATE',

  /**
   * Order milestones by when they were created.
   */
  CREATED_AT = 'CREATED_AT',

  /**
   * Order milestones by when they were last updated.
   */
  UPDATED_AT = 'UPDATED_AT',

  /**
   * Order milestones by their number.
   */
  NUMBER = 'NUMBER',
}

/**
 * The possible states of a milestone.
 */
export const enum XGitHubMilestoneState {
  /**
   * A milestone that is still open.
   */
  OPEN = 'OPEN',

  /**
   * A milestone that has been closed.
   */
  CLOSED = 'CLOSED',
}

/**
 * Represents a 'milestoned' event on a given issue or pull request.
 */
export interface IXGitHubMilestonedEvent {
  __typename: '_xGitHubMilestonedEvent';

  /**
   * Identifies the actor who performed the event.
   */
  actor: _xGitHubActor | null;

  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: any;
  id: string;

  /**
   * Identifies the milestone title associated with the 'milestoned' event.
   */
  milestoneTitle: string;

  /**
   * Object referenced by event.
   */
  subject: _xGitHubMilestoneItem;
}

/**
 * Entities that can be minimized.
 */
export type _xGitHubMinimizable =
  | IXGitHubCommitComment
  | IXGitHubDiscussionComment
  | IXGitHubGistComment
  | IXGitHubIssueComment
  | IXGitHubPullRequestReviewComment;

/**
 * Entities that can be minimized.
 */
export interface IXGitHubMinimizable {
  __typename: '_xGitHubMinimizable';

  /**
   * Returns whether or not a comment has been minimized.
   */
  isMinimized: boolean;

  /**
   * Returns why the comment was minimized.
   */
  minimizedReason: string | null;

  /**
   * Check if the current viewer can minimize this object.
   */
  viewerCanMinimize: boolean;
}

/**
 * Autogenerated input type of MinimizeComment
 */
export interface IXGitHubMinimizeCommentInput {
  /**
   * The Node ID of the subject to modify.
   */
  subjectId: string;

  /**
   * The classification of comment
   */
  classifier: XGitHubReportedContentClassifiers;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of MinimizeComment
 */
export interface IXGitHubMinimizeCommentPayload {
  __typename: '_xGitHubMinimizeCommentPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The comment that was minimized.
   */
  minimizedComment: _xGitHubMinimizable | null;
}

/**
 * Autogenerated input type of MoveProjectCard
 */
export interface IXGitHubMoveProjectCardInput {
  /**
   * The id of the card to move.
   */
  cardId: string;

  /**
   * The id of the column to move it into.
   */
  columnId: string;

  /**
   * Place the new card after the card with this id. Pass null to place it at the top.
   */
  afterCardId?: string | null;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of MoveProjectCard
 */
export interface IXGitHubMoveProjectCardPayload {
  __typename: '_xGitHubMoveProjectCardPayload';

  /**
   * The new edge of the moved card.
   */
  cardEdge: IXGitHubProjectCardEdge | null;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;
}

/**
 * Autogenerated input type of MoveProjectColumn
 */
export interface IXGitHubMoveProjectColumnInput {
  /**
   * The id of the column to move.
   */
  columnId: string;

  /**
   * Place the new column after the column with this id. Pass null to place it at the front.
   */
  afterColumnId?: string | null;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of MoveProjectColumn
 */
export interface IXGitHubMoveProjectColumnPayload {
  __typename: '_xGitHubMoveProjectColumnPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The new edge of the moved column.
   */
  columnEdge: IXGitHubProjectColumnEdge | null;
}

/**
 * Represents a 'moved_columns_in_project' event on a given issue or pull request.
 */
export interface IXGitHubMovedColumnsInProjectEvent {
  __typename: '_xGitHubMovedColumnsInProjectEvent';

  /**
   * Identifies the actor who performed the event.
   */
  actor: _xGitHubActor | null;

  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: any;

  /**
   * Identifies the primary key from the database.
   */
  databaseId: number | null;
  id: string;
}

/**
 * The root query for implementing GraphQL mutations.
 */
export interface IXGitHubMutation {
  __typename: '_xGitHubMutation';

  /**
   * Accepts a pending invitation for a user to become an administrator of an enterprise.
   */
  acceptEnterpriseAdministratorInvitation: IXGitHubAcceptEnterpriseAdministratorInvitationPayload | null;

  /**
   * Applies a suggested topic to the repository.
   */
  acceptTopicSuggestion: IXGitHubAcceptTopicSuggestionPayload | null;

  /**
   * Adds assignees to an assignable object.
   */
  addAssigneesToAssignable: IXGitHubAddAssigneesToAssignablePayload | null;

  /**
   * Adds a comment to an Issue or Pull Request.
   */
  addComment: IXGitHubAddCommentPayload | null;

  /**
   * Adds a comment to a Discussion, possibly as a reply to another comment.
   */
  addDiscussionComment: IXGitHubAddDiscussionCommentPayload | null;

  /**
   * Adds a support entitlement to an enterprise member.
   */
  addEnterpriseSupportEntitlement: IXGitHubAddEnterpriseSupportEntitlementPayload | null;

  /**
   * Adds labels to a labelable object.
   */
  addLabelsToLabelable: IXGitHubAddLabelsToLabelablePayload | null;

  /**
   * Adds a card to a ProjectColumn. Either `contentId` or `note` must be provided but **not** both.
   */
  addProjectCard: IXGitHubAddProjectCardPayload | null;

  /**
   * Adds a column to a Project.
   */
  addProjectColumn: IXGitHubAddProjectColumnPayload | null;

  /**
   * Adds a review to a Pull Request.
   */
  addPullRequestReview: IXGitHubAddPullRequestReviewPayload | null;

  /**
   * Adds a comment to a review.
   */
  addPullRequestReviewComment: IXGitHubAddPullRequestReviewCommentPayload | null;

  /**
   * Adds a new thread to a pending Pull Request Review.
   */
  addPullRequestReviewThread: IXGitHubAddPullRequestReviewThreadPayload | null;

  /**
   * Adds a reaction to a subject.
   */
  addReaction: IXGitHubAddReactionPayload | null;

  /**
   * Adds a star to a Starrable.
   */
  addStar: IXGitHubAddStarPayload | null;

  /**
   * Add an upvote to a discussion or discussion comment.
   */
  addUpvote: IXGitHubAddUpvotePayload | null;

  /**
   * Adds a verifiable domain to an owning account.
   */
  addVerifiableDomain: IXGitHubAddVerifiableDomainPayload | null;

  /**
   * Approve all pending deployments under one or more environments
   */
  approveDeployments: IXGitHubApproveDeploymentsPayload | null;

  /**
   * Approve a verifiable domain for notification delivery.
   */
  approveVerifiableDomain: IXGitHubApproveVerifiableDomainPayload | null;

  /**
   * Marks a repository as archived.
   */
  archiveRepository: IXGitHubArchiveRepositoryPayload | null;

  /**
   * Cancels a pending invitation for an administrator to join an enterprise.
   */
  cancelEnterpriseAdminInvitation: IXGitHubCancelEnterpriseAdminInvitationPayload | null;

  /**
   * Cancel an active sponsorship.
   */
  cancelSponsorship: IXGitHubCancelSponsorshipPayload | null;

  /**
   * Update your status on GitHub.
   */
  changeUserStatus: IXGitHubChangeUserStatusPayload | null;

  /**
   * Clears all labels from a labelable object.
   */
  clearLabelsFromLabelable: IXGitHubClearLabelsFromLabelablePayload | null;

  /**
   * Creates a new project by cloning configuration from an existing project.
   */
  cloneProject: IXGitHubCloneProjectPayload | null;

  /**
   * Create a new repository with the same files and directory structure as a template repository.
   */
  cloneTemplateRepository: IXGitHubCloneTemplateRepositoryPayload | null;

  /**
   * Close an issue.
   */
  closeIssue: IXGitHubCloseIssuePayload | null;

  /**
   * Close a pull request.
   */
  closePullRequest: IXGitHubClosePullRequestPayload | null;

  /**
   * Convert a project note card to one associated with a newly created issue.
   */
  convertProjectCardNoteToIssue: IXGitHubConvertProjectCardNoteToIssuePayload | null;

  /**
   * Converts a pull request to draft
   */
  convertPullRequestToDraft: IXGitHubConvertPullRequestToDraftPayload | null;

  /**
   * Create a new branch protection rule
   */
  createBranchProtectionRule: IXGitHubCreateBranchProtectionRulePayload | null;

  /**
   * Create a check run.
   */
  createCheckRun: IXGitHubCreateCheckRunPayload | null;

  /**
   * Create a check suite
   */
  createCheckSuite: IXGitHubCreateCheckSuitePayload | null;

  /**
   * Appends a commit to the given branch as the authenticated user.
   *
   * This mutation creates a commit whose parent is the HEAD of the provided
   * branch and also updates that branch to point to the new commit.
   * It can be thought of as similar to `git commit`.
   *
   * ### Locating a Branch
   *
   * Commits are appended to a `branch` of type `Ref`.
   * This must refer to a git branch (i.e.  the fully qualified path must
   * begin with `refs/heads/`, although including this prefix is optional.
   *
   * Callers may specify the `branch` to commit to either by its global node
   * ID or by passing both of `repositoryNameWithOwner` and `refName`.  For
   * more details see the documentation for `CommittableBranch`.
   *
   * ### Describing Changes
   *
   * `fileChanges` are specified as a `FilesChanges` object describing
   * `FileAdditions` and `FileDeletions`.
   *
   * Please see the documentation for `FileChanges` for more information on
   * how to use this argument to describe any set of file changes.
   *
   * ### Authorship
   *
   * Similar to the web commit interface, this mutation does not support
   * specifying the author or committer of the commit and will not add
   * support for this in the future.
   *
   * A commit created by a successful execution of this mutation will be
   * authored by the owner of the credential which authenticates the API
   * request.  The committer will be identical to that of commits authored
   * using the web interface.
   *
   * If you need full control over author and committer information, please
   * use the Git Database REST API instead.
   *
   * ### Commit Signing
   *
   * Commits made using this mutation are automatically signed by GitHub if
   * supported and will be marked as verified in the user interface.
   */
  createCommitOnBranch: IXGitHubCreateCommitOnBranchPayload | null;

  /**
   * Create a discussion.
   */
  createDiscussion: IXGitHubCreateDiscussionPayload | null;

  /**
   * Creates an organization as part of an enterprise account.
   */
  createEnterpriseOrganization: IXGitHubCreateEnterpriseOrganizationPayload | null;

  /**
   * Creates an environment or simply returns it if already exists.
   */
  createEnvironment: IXGitHubCreateEnvironmentPayload | null;

  /**
   * Creates a new IP allow list entry.
   */
  createIpAllowListEntry: IXGitHubCreateIpAllowListEntryPayload | null;

  /**
   * Creates a new issue.
   */
  createIssue: IXGitHubCreateIssuePayload | null;

  /**
   * Creates a new label.
   */
  createLabel: IXGitHubCreateLabelPayload | null;

  /**
   * Creates a new project.
   */
  createProject: IXGitHubCreateProjectPayload | null;

  /**
   * Create a new pull request
   */
  createPullRequest: IXGitHubCreatePullRequestPayload | null;

  /**
   * Create a new Git Ref.
   */
  createRef: IXGitHubCreateRefPayload | null;

  /**
   * Create a new repository.
   */
  createRepository: IXGitHubCreateRepositoryPayload | null;

  /**
   * Start a new sponsorship of a maintainer in GitHub Sponsors, or reactivate a past sponsorship.
   */
  createSponsorship: IXGitHubCreateSponsorshipPayload | null;

  /**
   * Creates a new team discussion.
   */
  createTeamDiscussion: IXGitHubCreateTeamDiscussionPayload | null;

  /**
   * Creates a new team discussion comment.
   */
  createTeamDiscussionComment: IXGitHubCreateTeamDiscussionCommentPayload | null;

  /**
   * Rejects a suggested topic for the repository.
   */
  declineTopicSuggestion: IXGitHubDeclineTopicSuggestionPayload | null;

  /**
   * Delete a branch protection rule
   */
  deleteBranchProtectionRule: IXGitHubDeleteBranchProtectionRulePayload | null;

  /**
   * Deletes a deployment.
   */
  deleteDeployment: IXGitHubDeleteDeploymentPayload | null;

  /**
   * Delete a discussion and all of its replies.
   */
  deleteDiscussion: IXGitHubDeleteDiscussionPayload | null;

  /**
   * Delete a discussion comment. If it has replies, wipe it instead.
   */
  deleteDiscussionComment: IXGitHubDeleteDiscussionCommentPayload | null;

  /**
   * Deletes an environment
   */
  deleteEnvironment: IXGitHubDeleteEnvironmentPayload | null;

  /**
   * Deletes an IP allow list entry.
   */
  deleteIpAllowListEntry: IXGitHubDeleteIpAllowListEntryPayload | null;

  /**
   * Deletes an Issue object.
   */
  deleteIssue: IXGitHubDeleteIssuePayload | null;

  /**
   * Deletes an IssueComment object.
   */
  deleteIssueComment: IXGitHubDeleteIssueCommentPayload | null;

  /**
   * Deletes a label.
   */
  deleteLabel: IXGitHubDeleteLabelPayload | null;

  /**
   * Deletes a project.
   */
  deleteProject: IXGitHubDeleteProjectPayload | null;

  /**
   * Deletes a project card.
   */
  deleteProjectCard: IXGitHubDeleteProjectCardPayload | null;

  /**
   * Deletes a project column.
   */
  deleteProjectColumn: IXGitHubDeleteProjectColumnPayload | null;

  /**
   * Deletes a pull request review.
   */
  deletePullRequestReview: IXGitHubDeletePullRequestReviewPayload | null;

  /**
   * Deletes a pull request review comment.
   */
  deletePullRequestReviewComment: IXGitHubDeletePullRequestReviewCommentPayload | null;

  /**
   * Delete a Git Ref.
   */
  deleteRef: IXGitHubDeleteRefPayload | null;

  /**
   * Deletes a team discussion.
   */
  deleteTeamDiscussion: IXGitHubDeleteTeamDiscussionPayload | null;

  /**
   * Deletes a team discussion comment.
   */
  deleteTeamDiscussionComment: IXGitHubDeleteTeamDiscussionCommentPayload | null;

  /**
   * Deletes a verifiable domain.
   */
  deleteVerifiableDomain: IXGitHubDeleteVerifiableDomainPayload | null;

  /**
   * Disable auto merge on the given pull request
   */
  disablePullRequestAutoMerge: IXGitHubDisablePullRequestAutoMergePayload | null;

  /**
   * Dismisses an approved or rejected pull request review.
   */
  dismissPullRequestReview: IXGitHubDismissPullRequestReviewPayload | null;

  /**
   * Enable the default auto-merge on a pull request.
   */
  enablePullRequestAutoMerge: IXGitHubEnablePullRequestAutoMergePayload | null;

  /**
   * Follow a user.
   */
  followUser: IXGitHubFollowUserPayload | null;

  /**
   * Invite someone to become an administrator of the enterprise.
   */
  inviteEnterpriseAdmin: IXGitHubInviteEnterpriseAdminPayload | null;

  /**
   * Creates a repository link for a project.
   */
  linkRepositoryToProject: IXGitHubLinkRepositoryToProjectPayload | null;

  /**
   * Lock a lockable object
   */
  lockLockable: IXGitHubLockLockablePayload | null;

  /**
   * Mark a discussion comment as the chosen answer for discussions in an answerable category.
   */
  markDiscussionCommentAsAnswer: IXGitHubMarkDiscussionCommentAsAnswerPayload | null;

  /**
   * Mark a pull request file as viewed
   */
  markFileAsViewed: IXGitHubMarkFileAsViewedPayload | null;

  /**
   * Marks a pull request ready for review.
   */
  markPullRequestReadyForReview: IXGitHubMarkPullRequestReadyForReviewPayload | null;

  /**
   * Merge a head into a branch.
   */
  mergeBranch: IXGitHubMergeBranchPayload | null;

  /**
   * Merge a pull request.
   */
  mergePullRequest: IXGitHubMergePullRequestPayload | null;

  /**
   * Minimizes a comment on an Issue, Commit, Pull Request, or Gist
   */
  minimizeComment: IXGitHubMinimizeCommentPayload | null;

  /**
   * Moves a project card to another place.
   */
  moveProjectCard: IXGitHubMoveProjectCardPayload | null;

  /**
   * Moves a project column to another place.
   */
  moveProjectColumn: IXGitHubMoveProjectColumnPayload | null;

  /**
   * Pin an issue to a repository
   */
  pinIssue: IXGitHubPinIssuePayload | null;

  /**
   * Regenerates the identity provider recovery codes for an enterprise
   */
  regenerateEnterpriseIdentityProviderRecoveryCodes: IXGitHubRegenerateEnterpriseIdentityProviderRecoveryCodesPayload | null;

  /**
   * Regenerates a verifiable domain's verification token.
   */
  regenerateVerifiableDomainToken: IXGitHubRegenerateVerifiableDomainTokenPayload | null;

  /**
   * Reject all pending deployments under one or more environments
   */
  rejectDeployments: IXGitHubRejectDeploymentsPayload | null;

  /**
   * Removes assignees from an assignable object.
   */
  removeAssigneesFromAssignable: IXGitHubRemoveAssigneesFromAssignablePayload | null;

  /**
   * Removes an administrator from the enterprise.
   */
  removeEnterpriseAdmin: IXGitHubRemoveEnterpriseAdminPayload | null;

  /**
   * Removes the identity provider from an enterprise
   */
  removeEnterpriseIdentityProvider: IXGitHubRemoveEnterpriseIdentityProviderPayload | null;

  /**
   * Removes an organization from the enterprise
   */
  removeEnterpriseOrganization: IXGitHubRemoveEnterpriseOrganizationPayload | null;

  /**
   * Removes a support entitlement from an enterprise member.
   */
  removeEnterpriseSupportEntitlement: IXGitHubRemoveEnterpriseSupportEntitlementPayload | null;

  /**
   * Removes labels from a Labelable object.
   */
  removeLabelsFromLabelable: IXGitHubRemoveLabelsFromLabelablePayload | null;

  /**
   * Removes outside collaborator from all repositories in an organization.
   */
  removeOutsideCollaborator: IXGitHubRemoveOutsideCollaboratorPayload | null;

  /**
   * Removes a reaction from a subject.
   */
  removeReaction: IXGitHubRemoveReactionPayload | null;

  /**
   * Removes a star from a Starrable.
   */
  removeStar: IXGitHubRemoveStarPayload | null;

  /**
   * Remove an upvote to a discussion or discussion comment.
   */
  removeUpvote: IXGitHubRemoveUpvotePayload | null;

  /**
   * Reopen a issue.
   */
  reopenIssue: IXGitHubReopenIssuePayload | null;

  /**
   * Reopen a pull request.
   */
  reopenPullRequest: IXGitHubReopenPullRequestPayload | null;

  /**
   * Set review requests on a pull request.
   */
  requestReviews: IXGitHubRequestReviewsPayload | null;

  /**
   * Rerequests an existing check suite.
   */
  rerequestCheckSuite: IXGitHubRerequestCheckSuitePayload | null;

  /**
   * Marks a review thread as resolved.
   */
  resolveReviewThread: IXGitHubResolveReviewThreadPayload | null;

  /**
   * Creates or updates the identity provider for an enterprise.
   */
  setEnterpriseIdentityProvider: IXGitHubSetEnterpriseIdentityProviderPayload | null;

  /**
   * Set an organization level interaction limit for an organization's public repositories.
   */
  setOrganizationInteractionLimit: IXGitHubSetOrganizationInteractionLimitPayload | null;

  /**
   * Sets an interaction limit setting for a repository.
   */
  setRepositoryInteractionLimit: IXGitHubSetRepositoryInteractionLimitPayload | null;

  /**
   * Set a user level interaction limit for an user's public repositories.
   */
  setUserInteractionLimit: IXGitHubSetUserInteractionLimitPayload | null;

  /**
   * Submits a pending pull request review.
   */
  submitPullRequestReview: IXGitHubSubmitPullRequestReviewPayload | null;

  /**
   * Transfer an issue to a different repository
   */
  transferIssue: IXGitHubTransferIssuePayload | null;

  /**
   * Unarchives a repository.
   */
  unarchiveRepository: IXGitHubUnarchiveRepositoryPayload | null;

  /**
   * Unfollow a user.
   */
  unfollowUser: IXGitHubUnfollowUserPayload | null;

  /**
   * Deletes a repository link from a project.
   */
  unlinkRepositoryFromProject: IXGitHubUnlinkRepositoryFromProjectPayload | null;

  /**
   * Unlock a lockable object
   */
  unlockLockable: IXGitHubUnlockLockablePayload | null;

  /**
   * Unmark a discussion comment as the chosen answer for discussions in an answerable category.
   */
  unmarkDiscussionCommentAsAnswer: IXGitHubUnmarkDiscussionCommentAsAnswerPayload | null;

  /**
   * Unmark a pull request file as viewed
   */
  unmarkFileAsViewed: IXGitHubUnmarkFileAsViewedPayload | null;

  /**
   * Unmark an issue as a duplicate of another issue.
   */
  unmarkIssueAsDuplicate: IXGitHubUnmarkIssueAsDuplicatePayload | null;

  /**
   * Unminimizes a comment on an Issue, Commit, Pull Request, or Gist
   */
  unminimizeComment: IXGitHubUnminimizeCommentPayload | null;

  /**
   * Unpin a pinned issue from a repository
   */
  unpinIssue: IXGitHubUnpinIssuePayload | null;

  /**
   * Marks a review thread as unresolved.
   */
  unresolveReviewThread: IXGitHubUnresolveReviewThreadPayload | null;

  /**
   * Create a new branch protection rule
   */
  updateBranchProtectionRule: IXGitHubUpdateBranchProtectionRulePayload | null;

  /**
   * Update a check run
   */
  updateCheckRun: IXGitHubUpdateCheckRunPayload | null;

  /**
   * Modifies the settings of an existing check suite
   */
  updateCheckSuitePreferences: IXGitHubUpdateCheckSuitePreferencesPayload | null;

  /**
   * Update a discussion
   */
  updateDiscussion: IXGitHubUpdateDiscussionPayload | null;

  /**
   * Update the contents of a comment on a Discussion
   */
  updateDiscussionComment: IXGitHubUpdateDiscussionCommentPayload | null;

  /**
   * Updates the role of an enterprise administrator.
   */
  updateEnterpriseAdministratorRole: IXGitHubUpdateEnterpriseAdministratorRolePayload | null;

  /**
   * Sets whether private repository forks are enabled for an enterprise.
   */
  updateEnterpriseAllowPrivateRepositoryForkingSetting: IXGitHubUpdateEnterpriseAllowPrivateRepositoryForkingSettingPayload | null;

  /**
   * Sets the base repository permission for organizations in an enterprise.
   */
  updateEnterpriseDefaultRepositoryPermissionSetting: IXGitHubUpdateEnterpriseDefaultRepositoryPermissionSettingPayload | null;

  /**
   * Sets whether organization members with admin permissions on a repository can change repository visibility.
   */
  updateEnterpriseMembersCanChangeRepositoryVisibilitySetting: IXGitHubUpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingPayload | null;

  /**
   * Sets the members can create repositories setting for an enterprise.
   */
  updateEnterpriseMembersCanCreateRepositoriesSetting: IXGitHubUpdateEnterpriseMembersCanCreateRepositoriesSettingPayload | null;

  /**
   * Sets the members can delete issues setting for an enterprise.
   */
  updateEnterpriseMembersCanDeleteIssuesSetting: IXGitHubUpdateEnterpriseMembersCanDeleteIssuesSettingPayload | null;

  /**
   * Sets the members can delete repositories setting for an enterprise.
   */
  updateEnterpriseMembersCanDeleteRepositoriesSetting: IXGitHubUpdateEnterpriseMembersCanDeleteRepositoriesSettingPayload | null;

  /**
   * Sets whether members can invite collaborators are enabled for an enterprise.
   */
  updateEnterpriseMembersCanInviteCollaboratorsSetting: IXGitHubUpdateEnterpriseMembersCanInviteCollaboratorsSettingPayload | null;

  /**
   * Sets whether or not an organization admin can make purchases.
   */
  updateEnterpriseMembersCanMakePurchasesSetting: IXGitHubUpdateEnterpriseMembersCanMakePurchasesSettingPayload | null;

  /**
   * Sets the members can update protected branches setting for an enterprise.
   */
  updateEnterpriseMembersCanUpdateProtectedBranchesSetting: IXGitHubUpdateEnterpriseMembersCanUpdateProtectedBranchesSettingPayload | null;

  /**
   * Sets the members can view dependency insights for an enterprise.
   */
  updateEnterpriseMembersCanViewDependencyInsightsSetting: IXGitHubUpdateEnterpriseMembersCanViewDependencyInsightsSettingPayload | null;

  /**
   * Sets whether organization projects are enabled for an enterprise.
   */
  updateEnterpriseOrganizationProjectsSetting: IXGitHubUpdateEnterpriseOrganizationProjectsSettingPayload | null;

  /**
   * Updates an enterprise's profile.
   */
  updateEnterpriseProfile: IXGitHubUpdateEnterpriseProfilePayload | null;

  /**
   * Sets whether repository projects are enabled for a enterprise.
   */
  updateEnterpriseRepositoryProjectsSetting: IXGitHubUpdateEnterpriseRepositoryProjectsSettingPayload | null;

  /**
   * Sets whether team discussions are enabled for an enterprise.
   */
  updateEnterpriseTeamDiscussionsSetting: IXGitHubUpdateEnterpriseTeamDiscussionsSettingPayload | null;

  /**
   * Sets whether two factor authentication is required for all users in an enterprise.
   */
  updateEnterpriseTwoFactorAuthenticationRequiredSetting: IXGitHubUpdateEnterpriseTwoFactorAuthenticationRequiredSettingPayload | null;

  /**
   * Updates an environment.
   */
  updateEnvironment: IXGitHubUpdateEnvironmentPayload | null;

  /**
   * Sets whether an IP allow list is enabled on an owner.
   */
  updateIpAllowListEnabledSetting: IXGitHubUpdateIpAllowListEnabledSettingPayload | null;

  /**
   * Updates an IP allow list entry.
   */
  updateIpAllowListEntry: IXGitHubUpdateIpAllowListEntryPayload | null;

  /**
   * Sets whether IP allow list configuration for installed GitHub Apps is enabled on an owner.
   */
  updateIpAllowListForInstalledAppsEnabledSetting: IXGitHubUpdateIpAllowListForInstalledAppsEnabledSettingPayload | null;

  /**
   * Updates an Issue.
   */
  updateIssue: IXGitHubUpdateIssuePayload | null;

  /**
   * Updates an IssueComment object.
   */
  updateIssueComment: IXGitHubUpdateIssueCommentPayload | null;

  /**
   * Updates an existing label.
   */
  updateLabel: IXGitHubUpdateLabelPayload | null;

  /**
   * Update the setting to restrict notifications to only verified or approved domains available to an owner.
   */
  updateNotificationRestrictionSetting: IXGitHubUpdateNotificationRestrictionSettingPayload | null;

  /**
   * Updates an existing project.
   */
  updateProject: IXGitHubUpdateProjectPayload | null;

  /**
   * Updates an existing project card.
   */
  updateProjectCard: IXGitHubUpdateProjectCardPayload | null;

  /**
   * Updates an existing project column.
   */
  updateProjectColumn: IXGitHubUpdateProjectColumnPayload | null;

  /**
   * Update a pull request
   */
  updatePullRequest: IXGitHubUpdatePullRequestPayload | null;

  /**
   * Updates the body of a pull request review.
   */
  updatePullRequestReview: IXGitHubUpdatePullRequestReviewPayload | null;

  /**
   * Updates a pull request review comment.
   */
  updatePullRequestReviewComment: IXGitHubUpdatePullRequestReviewCommentPayload | null;

  /**
   * Update a Git Ref.
   */
  updateRef: IXGitHubUpdateRefPayload | null;

  /**
   * Update information about a repository.
   */
  updateRepository: IXGitHubUpdateRepositoryPayload | null;

  /**
   * Change visibility of your sponsorship and opt in or out of email updates from the maintainer.
   */
  updateSponsorshipPreferences: IXGitHubUpdateSponsorshipPreferencesPayload | null;

  /**
   * Updates the state for subscribable subjects.
   */
  updateSubscription: IXGitHubUpdateSubscriptionPayload | null;

  /**
   * Updates a team discussion.
   */
  updateTeamDiscussion: IXGitHubUpdateTeamDiscussionPayload | null;

  /**
   * Updates a discussion comment.
   */
  updateTeamDiscussionComment: IXGitHubUpdateTeamDiscussionCommentPayload | null;

  /**
   * Replaces the repository's topics with the given topics.
   */
  updateTopics: IXGitHubUpdateTopicsPayload | null;

  /**
   * Verify that a verifiable domain has the expected DNS record.
   */
  verifyVerifiableDomain: IXGitHubVerifyVerifiableDomainPayload | null;
}

export interface IAcceptEnterpriseAdministratorInvitationOnXGitHubMutationArguments {
  /**
   * Parameters for AcceptEnterpriseAdministratorInvitation
   */
  input: IXGitHubAcceptEnterpriseAdministratorInvitationInput;
}

export interface IAcceptTopicSuggestionOnXGitHubMutationArguments {
  /**
   * Parameters for AcceptTopicSuggestion
   */
  input: IXGitHubAcceptTopicSuggestionInput;
}

export interface IAddAssigneesToAssignableOnXGitHubMutationArguments {
  /**
   * Parameters for AddAssigneesToAssignable
   */
  input: IXGitHubAddAssigneesToAssignableInput;
}

export interface IAddCommentOnXGitHubMutationArguments {
  /**
   * Parameters for AddComment
   */
  input: IXGitHubAddCommentInput;
}

export interface IAddDiscussionCommentOnXGitHubMutationArguments {
  /**
   * Parameters for AddDiscussionComment
   */
  input: IXGitHubAddDiscussionCommentInput;
}

export interface IAddEnterpriseSupportEntitlementOnXGitHubMutationArguments {
  /**
   * Parameters for AddEnterpriseSupportEntitlement
   */
  input: IXGitHubAddEnterpriseSupportEntitlementInput;
}

export interface IAddLabelsToLabelableOnXGitHubMutationArguments {
  /**
   * Parameters for AddLabelsToLabelable
   */
  input: IXGitHubAddLabelsToLabelableInput;
}

export interface IAddProjectCardOnXGitHubMutationArguments {
  /**
   * Parameters for AddProjectCard
   */
  input: IXGitHubAddProjectCardInput;
}

export interface IAddProjectColumnOnXGitHubMutationArguments {
  /**
   * Parameters for AddProjectColumn
   */
  input: IXGitHubAddProjectColumnInput;
}

export interface IAddPullRequestReviewOnXGitHubMutationArguments {
  /**
   * Parameters for AddPullRequestReview
   */
  input: IXGitHubAddPullRequestReviewInput;
}

export interface IAddPullRequestReviewCommentOnXGitHubMutationArguments {
  /**
   * Parameters for AddPullRequestReviewComment
   */
  input: IXGitHubAddPullRequestReviewCommentInput;
}

export interface IAddPullRequestReviewThreadOnXGitHubMutationArguments {
  /**
   * Parameters for AddPullRequestReviewThread
   */
  input: IXGitHubAddPullRequestReviewThreadInput;
}

export interface IAddReactionOnXGitHubMutationArguments {
  /**
   * Parameters for AddReaction
   */
  input: IXGitHubAddReactionInput;
}

export interface IAddStarOnXGitHubMutationArguments {
  /**
   * Parameters for AddStar
   */
  input: IXGitHubAddStarInput;
}

export interface IAddUpvoteOnXGitHubMutationArguments {
  /**
   * Parameters for AddUpvote
   */
  input: IXGitHubAddUpvoteInput;
}

export interface IAddVerifiableDomainOnXGitHubMutationArguments {
  /**
   * Parameters for AddVerifiableDomain
   */
  input: IXGitHubAddVerifiableDomainInput;
}

export interface IApproveDeploymentsOnXGitHubMutationArguments {
  /**
   * Parameters for ApproveDeployments
   */
  input: IXGitHubApproveDeploymentsInput;
}

export interface IApproveVerifiableDomainOnXGitHubMutationArguments {
  /**
   * Parameters for ApproveVerifiableDomain
   */
  input: IXGitHubApproveVerifiableDomainInput;
}

export interface IArchiveRepositoryOnXGitHubMutationArguments {
  /**
   * Parameters for ArchiveRepository
   */
  input: IXGitHubArchiveRepositoryInput;
}

export interface ICancelEnterpriseAdminInvitationOnXGitHubMutationArguments {
  /**
   * Parameters for CancelEnterpriseAdminInvitation
   */
  input: IXGitHubCancelEnterpriseAdminInvitationInput;
}

export interface ICancelSponsorshipOnXGitHubMutationArguments {
  /**
   * Parameters for CancelSponsorship
   */
  input: IXGitHubCancelSponsorshipInput;
}

export interface IChangeUserStatusOnXGitHubMutationArguments {
  /**
   * Parameters for ChangeUserStatus
   */
  input: IXGitHubChangeUserStatusInput;
}

export interface IClearLabelsFromLabelableOnXGitHubMutationArguments {
  /**
   * Parameters for ClearLabelsFromLabelable
   */
  input: IXGitHubClearLabelsFromLabelableInput;
}

export interface ICloneProjectOnXGitHubMutationArguments {
  /**
   * Parameters for CloneProject
   */
  input: IXGitHubCloneProjectInput;
}

export interface ICloneTemplateRepositoryOnXGitHubMutationArguments {
  /**
   * Parameters for CloneTemplateRepository
   */
  input: IXGitHubCloneTemplateRepositoryInput;
}

export interface ICloseIssueOnXGitHubMutationArguments {
  /**
   * Parameters for CloseIssue
   */
  input: IXGitHubCloseIssueInput;
}

export interface IClosePullRequestOnXGitHubMutationArguments {
  /**
   * Parameters for ClosePullRequest
   */
  input: IXGitHubClosePullRequestInput;
}

export interface IConvertProjectCardNoteToIssueOnXGitHubMutationArguments {
  /**
   * Parameters for ConvertProjectCardNoteToIssue
   */
  input: IXGitHubConvertProjectCardNoteToIssueInput;
}

export interface IConvertPullRequestToDraftOnXGitHubMutationArguments {
  /**
   * Parameters for ConvertPullRequestToDraft
   */
  input: IXGitHubConvertPullRequestToDraftInput;
}

export interface ICreateBranchProtectionRuleOnXGitHubMutationArguments {
  /**
   * Parameters for CreateBranchProtectionRule
   */
  input: IXGitHubCreateBranchProtectionRuleInput;
}

export interface ICreateCheckRunOnXGitHubMutationArguments {
  /**
   * Parameters for CreateCheckRun
   */
  input: IXGitHubCreateCheckRunInput;
}

export interface ICreateCheckSuiteOnXGitHubMutationArguments {
  /**
   * Parameters for CreateCheckSuite
   */
  input: IXGitHubCreateCheckSuiteInput;
}

export interface ICreateCommitOnBranchOnXGitHubMutationArguments {
  /**
   * Parameters for CreateCommitOnBranch
   */
  input: IXGitHubCreateCommitOnBranchInput;
}

export interface ICreateDiscussionOnXGitHubMutationArguments {
  /**
   * Parameters for CreateDiscussion
   */
  input: IXGitHubCreateDiscussionInput;
}

export interface ICreateEnterpriseOrganizationOnXGitHubMutationArguments {
  /**
   * Parameters for CreateEnterpriseOrganization
   */
  input: IXGitHubCreateEnterpriseOrganizationInput;
}

export interface ICreateEnvironmentOnXGitHubMutationArguments {
  /**
   * Parameters for CreateEnvironment
   */
  input: IXGitHubCreateEnvironmentInput;
}

export interface ICreateIpAllowListEntryOnXGitHubMutationArguments {
  /**
   * Parameters for CreateIpAllowListEntry
   */
  input: IXGitHubCreateIpAllowListEntryInput;
}

export interface ICreateIssueOnXGitHubMutationArguments {
  /**
   * Parameters for CreateIssue
   */
  input: IXGitHubCreateIssueInput;
}

export interface ICreateLabelOnXGitHubMutationArguments {
  /**
   * Parameters for CreateLabel
   */
  input: IXGitHubCreateLabelInput;
}

export interface ICreateProjectOnXGitHubMutationArguments {
  /**
   * Parameters for CreateProject
   */
  input: IXGitHubCreateProjectInput;
}

export interface ICreatePullRequestOnXGitHubMutationArguments {
  /**
   * Parameters for CreatePullRequest
   */
  input: IXGitHubCreatePullRequestInput;
}

export interface ICreateRefOnXGitHubMutationArguments {
  /**
   * Parameters for CreateRef
   */
  input: IXGitHubCreateRefInput;
}

export interface ICreateRepositoryOnXGitHubMutationArguments {
  /**
   * Parameters for CreateRepository
   */
  input: IXGitHubCreateRepositoryInput;
}

export interface ICreateSponsorshipOnXGitHubMutationArguments {
  /**
   * Parameters for CreateSponsorship
   */
  input: IXGitHubCreateSponsorshipInput;
}

export interface ICreateTeamDiscussionOnXGitHubMutationArguments {
  /**
   * Parameters for CreateTeamDiscussion
   */
  input: IXGitHubCreateTeamDiscussionInput;
}

export interface ICreateTeamDiscussionCommentOnXGitHubMutationArguments {
  /**
   * Parameters for CreateTeamDiscussionComment
   */
  input: IXGitHubCreateTeamDiscussionCommentInput;
}

export interface IDeclineTopicSuggestionOnXGitHubMutationArguments {
  /**
   * Parameters for DeclineTopicSuggestion
   */
  input: IXGitHubDeclineTopicSuggestionInput;
}

export interface IDeleteBranchProtectionRuleOnXGitHubMutationArguments {
  /**
   * Parameters for DeleteBranchProtectionRule
   */
  input: IXGitHubDeleteBranchProtectionRuleInput;
}

export interface IDeleteDeploymentOnXGitHubMutationArguments {
  /**
   * Parameters for DeleteDeployment
   */
  input: IXGitHubDeleteDeploymentInput;
}

export interface IDeleteDiscussionOnXGitHubMutationArguments {
  /**
   * Parameters for DeleteDiscussion
   */
  input: IXGitHubDeleteDiscussionInput;
}

export interface IDeleteDiscussionCommentOnXGitHubMutationArguments {
  /**
   * Parameters for DeleteDiscussionComment
   */
  input: IXGitHubDeleteDiscussionCommentInput;
}

export interface IDeleteEnvironmentOnXGitHubMutationArguments {
  /**
   * Parameters for DeleteEnvironment
   */
  input: IXGitHubDeleteEnvironmentInput;
}

export interface IDeleteIpAllowListEntryOnXGitHubMutationArguments {
  /**
   * Parameters for DeleteIpAllowListEntry
   */
  input: IXGitHubDeleteIpAllowListEntryInput;
}

export interface IDeleteIssueOnXGitHubMutationArguments {
  /**
   * Parameters for DeleteIssue
   */
  input: IXGitHubDeleteIssueInput;
}

export interface IDeleteIssueCommentOnXGitHubMutationArguments {
  /**
   * Parameters for DeleteIssueComment
   */
  input: IXGitHubDeleteIssueCommentInput;
}

export interface IDeleteLabelOnXGitHubMutationArguments {
  /**
   * Parameters for DeleteLabel
   */
  input: IXGitHubDeleteLabelInput;
}

export interface IDeleteProjectOnXGitHubMutationArguments {
  /**
   * Parameters for DeleteProject
   */
  input: IXGitHubDeleteProjectInput;
}

export interface IDeleteProjectCardOnXGitHubMutationArguments {
  /**
   * Parameters for DeleteProjectCard
   */
  input: IXGitHubDeleteProjectCardInput;
}

export interface IDeleteProjectColumnOnXGitHubMutationArguments {
  /**
   * Parameters for DeleteProjectColumn
   */
  input: IXGitHubDeleteProjectColumnInput;
}

export interface IDeletePullRequestReviewOnXGitHubMutationArguments {
  /**
   * Parameters for DeletePullRequestReview
   */
  input: IXGitHubDeletePullRequestReviewInput;
}

export interface IDeletePullRequestReviewCommentOnXGitHubMutationArguments {
  /**
   * Parameters for DeletePullRequestReviewComment
   */
  input: IXGitHubDeletePullRequestReviewCommentInput;
}

export interface IDeleteRefOnXGitHubMutationArguments {
  /**
   * Parameters for DeleteRef
   */
  input: IXGitHubDeleteRefInput;
}

export interface IDeleteTeamDiscussionOnXGitHubMutationArguments {
  /**
   * Parameters for DeleteTeamDiscussion
   */
  input: IXGitHubDeleteTeamDiscussionInput;
}

export interface IDeleteTeamDiscussionCommentOnXGitHubMutationArguments {
  /**
   * Parameters for DeleteTeamDiscussionComment
   */
  input: IXGitHubDeleteTeamDiscussionCommentInput;
}

export interface IDeleteVerifiableDomainOnXGitHubMutationArguments {
  /**
   * Parameters for DeleteVerifiableDomain
   */
  input: IXGitHubDeleteVerifiableDomainInput;
}

export interface IDisablePullRequestAutoMergeOnXGitHubMutationArguments {
  /**
   * Parameters for DisablePullRequestAutoMerge
   */
  input: IXGitHubDisablePullRequestAutoMergeInput;
}

export interface IDismissPullRequestReviewOnXGitHubMutationArguments {
  /**
   * Parameters for DismissPullRequestReview
   */
  input: IXGitHubDismissPullRequestReviewInput;
}

export interface IEnablePullRequestAutoMergeOnXGitHubMutationArguments {
  /**
   * Parameters for EnablePullRequestAutoMerge
   */
  input: IXGitHubEnablePullRequestAutoMergeInput;
}

export interface IFollowUserOnXGitHubMutationArguments {
  /**
   * Parameters for FollowUser
   */
  input: IXGitHubFollowUserInput;
}

export interface IInviteEnterpriseAdminOnXGitHubMutationArguments {
  /**
   * Parameters for InviteEnterpriseAdmin
   */
  input: IXGitHubInviteEnterpriseAdminInput;
}

export interface ILinkRepositoryToProjectOnXGitHubMutationArguments {
  /**
   * Parameters for LinkRepositoryToProject
   */
  input: IXGitHubLinkRepositoryToProjectInput;
}

export interface ILockLockableOnXGitHubMutationArguments {
  /**
   * Parameters for LockLockable
   */
  input: IXGitHubLockLockableInput;
}

export interface IMarkDiscussionCommentAsAnswerOnXGitHubMutationArguments {
  /**
   * Parameters for MarkDiscussionCommentAsAnswer
   */
  input: IXGitHubMarkDiscussionCommentAsAnswerInput;
}

export interface IMarkFileAsViewedOnXGitHubMutationArguments {
  /**
   * Parameters for MarkFileAsViewed
   */
  input: IXGitHubMarkFileAsViewedInput;
}

export interface IMarkPullRequestReadyForReviewOnXGitHubMutationArguments {
  /**
   * Parameters for MarkPullRequestReadyForReview
   */
  input: IXGitHubMarkPullRequestReadyForReviewInput;
}

export interface IMergeBranchOnXGitHubMutationArguments {
  /**
   * Parameters for MergeBranch
   */
  input: IXGitHubMergeBranchInput;
}

export interface IMergePullRequestOnXGitHubMutationArguments {
  /**
   * Parameters for MergePullRequest
   */
  input: IXGitHubMergePullRequestInput;
}

export interface IMinimizeCommentOnXGitHubMutationArguments {
  /**
   * Parameters for MinimizeComment
   */
  input: IXGitHubMinimizeCommentInput;
}

export interface IMoveProjectCardOnXGitHubMutationArguments {
  /**
   * Parameters for MoveProjectCard
   */
  input: IXGitHubMoveProjectCardInput;
}

export interface IMoveProjectColumnOnXGitHubMutationArguments {
  /**
   * Parameters for MoveProjectColumn
   */
  input: IXGitHubMoveProjectColumnInput;
}

export interface IPinIssueOnXGitHubMutationArguments {
  /**
   * Parameters for PinIssue
   */
  input: IXGitHubPinIssueInput;
}

export interface IRegenerateEnterpriseIdentityProviderRecoveryCodesOnXGitHubMutationArguments {
  /**
   * Parameters for RegenerateEnterpriseIdentityProviderRecoveryCodes
   */
  input: IXGitHubRegenerateEnterpriseIdentityProviderRecoveryCodesInput;
}

export interface IRegenerateVerifiableDomainTokenOnXGitHubMutationArguments {
  /**
   * Parameters for RegenerateVerifiableDomainToken
   */
  input: IXGitHubRegenerateVerifiableDomainTokenInput;
}

export interface IRejectDeploymentsOnXGitHubMutationArguments {
  /**
   * Parameters for RejectDeployments
   */
  input: IXGitHubRejectDeploymentsInput;
}

export interface IRemoveAssigneesFromAssignableOnXGitHubMutationArguments {
  /**
   * Parameters for RemoveAssigneesFromAssignable
   */
  input: IXGitHubRemoveAssigneesFromAssignableInput;
}

export interface IRemoveEnterpriseAdminOnXGitHubMutationArguments {
  /**
   * Parameters for RemoveEnterpriseAdmin
   */
  input: IXGitHubRemoveEnterpriseAdminInput;
}

export interface IRemoveEnterpriseIdentityProviderOnXGitHubMutationArguments {
  /**
   * Parameters for RemoveEnterpriseIdentityProvider
   */
  input: IXGitHubRemoveEnterpriseIdentityProviderInput;
}

export interface IRemoveEnterpriseOrganizationOnXGitHubMutationArguments {
  /**
   * Parameters for RemoveEnterpriseOrganization
   */
  input: IXGitHubRemoveEnterpriseOrganizationInput;
}

export interface IRemoveEnterpriseSupportEntitlementOnXGitHubMutationArguments {
  /**
   * Parameters for RemoveEnterpriseSupportEntitlement
   */
  input: IXGitHubRemoveEnterpriseSupportEntitlementInput;
}

export interface IRemoveLabelsFromLabelableOnXGitHubMutationArguments {
  /**
   * Parameters for RemoveLabelsFromLabelable
   */
  input: IXGitHubRemoveLabelsFromLabelableInput;
}

export interface IRemoveOutsideCollaboratorOnXGitHubMutationArguments {
  /**
   * Parameters for RemoveOutsideCollaborator
   */
  input: IXGitHubRemoveOutsideCollaboratorInput;
}

export interface IRemoveReactionOnXGitHubMutationArguments {
  /**
   * Parameters for RemoveReaction
   */
  input: IXGitHubRemoveReactionInput;
}

export interface IRemoveStarOnXGitHubMutationArguments {
  /**
   * Parameters for RemoveStar
   */
  input: IXGitHubRemoveStarInput;
}

export interface IRemoveUpvoteOnXGitHubMutationArguments {
  /**
   * Parameters for RemoveUpvote
   */
  input: IXGitHubRemoveUpvoteInput;
}

export interface IReopenIssueOnXGitHubMutationArguments {
  /**
   * Parameters for ReopenIssue
   */
  input: IXGitHubReopenIssueInput;
}

export interface IReopenPullRequestOnXGitHubMutationArguments {
  /**
   * Parameters for ReopenPullRequest
   */
  input: IXGitHubReopenPullRequestInput;
}

export interface IRequestReviewsOnXGitHubMutationArguments {
  /**
   * Parameters for RequestReviews
   */
  input: IXGitHubRequestReviewsInput;
}

export interface IRerequestCheckSuiteOnXGitHubMutationArguments {
  /**
   * Parameters for RerequestCheckSuite
   */
  input: IXGitHubRerequestCheckSuiteInput;
}

export interface IResolveReviewThreadOnXGitHubMutationArguments {
  /**
   * Parameters for ResolveReviewThread
   */
  input: IXGitHubResolveReviewThreadInput;
}

export interface ISetEnterpriseIdentityProviderOnXGitHubMutationArguments {
  /**
   * Parameters for SetEnterpriseIdentityProvider
   */
  input: IXGitHubSetEnterpriseIdentityProviderInput;
}

export interface ISetOrganizationInteractionLimitOnXGitHubMutationArguments {
  /**
   * Parameters for SetOrganizationInteractionLimit
   */
  input: IXGitHubSetOrganizationInteractionLimitInput;
}

export interface ISetRepositoryInteractionLimitOnXGitHubMutationArguments {
  /**
   * Parameters for SetRepositoryInteractionLimit
   */
  input: IXGitHubSetRepositoryInteractionLimitInput;
}

export interface ISetUserInteractionLimitOnXGitHubMutationArguments {
  /**
   * Parameters for SetUserInteractionLimit
   */
  input: IXGitHubSetUserInteractionLimitInput;
}

export interface ISubmitPullRequestReviewOnXGitHubMutationArguments {
  /**
   * Parameters for SubmitPullRequestReview
   */
  input: IXGitHubSubmitPullRequestReviewInput;
}

export interface ITransferIssueOnXGitHubMutationArguments {
  /**
   * Parameters for TransferIssue
   */
  input: IXGitHubTransferIssueInput;
}

export interface IUnarchiveRepositoryOnXGitHubMutationArguments {
  /**
   * Parameters for UnarchiveRepository
   */
  input: IXGitHubUnarchiveRepositoryInput;
}

export interface IUnfollowUserOnXGitHubMutationArguments {
  /**
   * Parameters for UnfollowUser
   */
  input: IXGitHubUnfollowUserInput;
}

export interface IUnlinkRepositoryFromProjectOnXGitHubMutationArguments {
  /**
   * Parameters for UnlinkRepositoryFromProject
   */
  input: IXGitHubUnlinkRepositoryFromProjectInput;
}

export interface IUnlockLockableOnXGitHubMutationArguments {
  /**
   * Parameters for UnlockLockable
   */
  input: IXGitHubUnlockLockableInput;
}

export interface IUnmarkDiscussionCommentAsAnswerOnXGitHubMutationArguments {
  /**
   * Parameters for UnmarkDiscussionCommentAsAnswer
   */
  input: IXGitHubUnmarkDiscussionCommentAsAnswerInput;
}

export interface IUnmarkFileAsViewedOnXGitHubMutationArguments {
  /**
   * Parameters for UnmarkFileAsViewed
   */
  input: IXGitHubUnmarkFileAsViewedInput;
}

export interface IUnmarkIssueAsDuplicateOnXGitHubMutationArguments {
  /**
   * Parameters for UnmarkIssueAsDuplicate
   */
  input: IXGitHubUnmarkIssueAsDuplicateInput;
}

export interface IUnminimizeCommentOnXGitHubMutationArguments {
  /**
   * Parameters for UnminimizeComment
   */
  input: IXGitHubUnminimizeCommentInput;
}

export interface IUnpinIssueOnXGitHubMutationArguments {
  /**
   * Parameters for UnpinIssue
   */
  input: IXGitHubUnpinIssueInput;
}

export interface IUnresolveReviewThreadOnXGitHubMutationArguments {
  /**
   * Parameters for UnresolveReviewThread
   */
  input: IXGitHubUnresolveReviewThreadInput;
}

export interface IUpdateBranchProtectionRuleOnXGitHubMutationArguments {
  /**
   * Parameters for UpdateBranchProtectionRule
   */
  input: IXGitHubUpdateBranchProtectionRuleInput;
}

export interface IUpdateCheckRunOnXGitHubMutationArguments {
  /**
   * Parameters for UpdateCheckRun
   */
  input: IXGitHubUpdateCheckRunInput;
}

export interface IUpdateCheckSuitePreferencesOnXGitHubMutationArguments {
  /**
   * Parameters for UpdateCheckSuitePreferences
   */
  input: IXGitHubUpdateCheckSuitePreferencesInput;
}

export interface IUpdateDiscussionOnXGitHubMutationArguments {
  /**
   * Parameters for UpdateDiscussion
   */
  input: IXGitHubUpdateDiscussionInput;
}

export interface IUpdateDiscussionCommentOnXGitHubMutationArguments {
  /**
   * Parameters for UpdateDiscussionComment
   */
  input: IXGitHubUpdateDiscussionCommentInput;
}

export interface IUpdateEnterpriseAdministratorRoleOnXGitHubMutationArguments {
  /**
   * Parameters for UpdateEnterpriseAdministratorRole
   */
  input: IXGitHubUpdateEnterpriseAdministratorRoleInput;
}

export interface IUpdateEnterpriseAllowPrivateRepositoryForkingSettingOnXGitHubMutationArguments {
  /**
   * Parameters for UpdateEnterpriseAllowPrivateRepositoryForkingSetting
   */
  input: IXGitHubUpdateEnterpriseAllowPrivateRepositoryForkingSettingInput;
}

export interface IUpdateEnterpriseDefaultRepositoryPermissionSettingOnXGitHubMutationArguments {
  /**
   * Parameters for UpdateEnterpriseDefaultRepositoryPermissionSetting
   */
  input: IXGitHubUpdateEnterpriseDefaultRepositoryPermissionSettingInput;
}

export interface IUpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingOnXGitHubMutationArguments {
  /**
   * Parameters for UpdateEnterpriseMembersCanChangeRepositoryVisibilitySetting
   */
  input: IXGitHubUpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingInput;
}

export interface IUpdateEnterpriseMembersCanCreateRepositoriesSettingOnXGitHubMutationArguments {
  /**
   * Parameters for UpdateEnterpriseMembersCanCreateRepositoriesSetting
   */
  input: IXGitHubUpdateEnterpriseMembersCanCreateRepositoriesSettingInput;
}

export interface IUpdateEnterpriseMembersCanDeleteIssuesSettingOnXGitHubMutationArguments {
  /**
   * Parameters for UpdateEnterpriseMembersCanDeleteIssuesSetting
   */
  input: IXGitHubUpdateEnterpriseMembersCanDeleteIssuesSettingInput;
}

export interface IUpdateEnterpriseMembersCanDeleteRepositoriesSettingOnXGitHubMutationArguments {
  /**
   * Parameters for UpdateEnterpriseMembersCanDeleteRepositoriesSetting
   */
  input: IXGitHubUpdateEnterpriseMembersCanDeleteRepositoriesSettingInput;
}

export interface IUpdateEnterpriseMembersCanInviteCollaboratorsSettingOnXGitHubMutationArguments {
  /**
   * Parameters for UpdateEnterpriseMembersCanInviteCollaboratorsSetting
   */
  input: IXGitHubUpdateEnterpriseMembersCanInviteCollaboratorsSettingInput;
}

export interface IUpdateEnterpriseMembersCanMakePurchasesSettingOnXGitHubMutationArguments {
  /**
   * Parameters for UpdateEnterpriseMembersCanMakePurchasesSetting
   */
  input: IXGitHubUpdateEnterpriseMembersCanMakePurchasesSettingInput;
}

export interface IUpdateEnterpriseMembersCanUpdateProtectedBranchesSettingOnXGitHubMutationArguments {
  /**
   * Parameters for UpdateEnterpriseMembersCanUpdateProtectedBranchesSetting
   */
  input: IXGitHubUpdateEnterpriseMembersCanUpdateProtectedBranchesSettingInput;
}

export interface IUpdateEnterpriseMembersCanViewDependencyInsightsSettingOnXGitHubMutationArguments {
  /**
   * Parameters for UpdateEnterpriseMembersCanViewDependencyInsightsSetting
   */
  input: IXGitHubUpdateEnterpriseMembersCanViewDependencyInsightsSettingInput;
}

export interface IUpdateEnterpriseOrganizationProjectsSettingOnXGitHubMutationArguments {
  /**
   * Parameters for UpdateEnterpriseOrganizationProjectsSetting
   */
  input: IXGitHubUpdateEnterpriseOrganizationProjectsSettingInput;
}

export interface IUpdateEnterpriseProfileOnXGitHubMutationArguments {
  /**
   * Parameters for UpdateEnterpriseProfile
   */
  input: IXGitHubUpdateEnterpriseProfileInput;
}

export interface IUpdateEnterpriseRepositoryProjectsSettingOnXGitHubMutationArguments {
  /**
   * Parameters for UpdateEnterpriseRepositoryProjectsSetting
   */
  input: IXGitHubUpdateEnterpriseRepositoryProjectsSettingInput;
}

export interface IUpdateEnterpriseTeamDiscussionsSettingOnXGitHubMutationArguments {
  /**
   * Parameters for UpdateEnterpriseTeamDiscussionsSetting
   */
  input: IXGitHubUpdateEnterpriseTeamDiscussionsSettingInput;
}

export interface IUpdateEnterpriseTwoFactorAuthenticationRequiredSettingOnXGitHubMutationArguments {
  /**
   * Parameters for UpdateEnterpriseTwoFactorAuthenticationRequiredSetting
   */
  input: IXGitHubUpdateEnterpriseTwoFactorAuthenticationRequiredSettingInput;
}

export interface IUpdateEnvironmentOnXGitHubMutationArguments {
  /**
   * Parameters for UpdateEnvironment
   */
  input: IXGitHubUpdateEnvironmentInput;
}

export interface IUpdateIpAllowListEnabledSettingOnXGitHubMutationArguments {
  /**
   * Parameters for UpdateIpAllowListEnabledSetting
   */
  input: IXGitHubUpdateIpAllowListEnabledSettingInput;
}

export interface IUpdateIpAllowListEntryOnXGitHubMutationArguments {
  /**
   * Parameters for UpdateIpAllowListEntry
   */
  input: IXGitHubUpdateIpAllowListEntryInput;
}

export interface IUpdateIpAllowListForInstalledAppsEnabledSettingOnXGitHubMutationArguments {
  /**
   * Parameters for UpdateIpAllowListForInstalledAppsEnabledSetting
   */
  input: IXGitHubUpdateIpAllowListForInstalledAppsEnabledSettingInput;
}

export interface IUpdateIssueOnXGitHubMutationArguments {
  /**
   * Parameters for UpdateIssue
   */
  input: IXGitHubUpdateIssueInput;
}

export interface IUpdateIssueCommentOnXGitHubMutationArguments {
  /**
   * Parameters for UpdateIssueComment
   */
  input: IXGitHubUpdateIssueCommentInput;
}

export interface IUpdateLabelOnXGitHubMutationArguments {
  /**
   * Parameters for UpdateLabel
   */
  input: IXGitHubUpdateLabelInput;
}

export interface IUpdateNotificationRestrictionSettingOnXGitHubMutationArguments {
  /**
   * Parameters for UpdateNotificationRestrictionSetting
   */
  input: IXGitHubUpdateNotificationRestrictionSettingInput;
}

export interface IUpdateProjectOnXGitHubMutationArguments {
  /**
   * Parameters for UpdateProject
   */
  input: IXGitHubUpdateProjectInput;
}

export interface IUpdateProjectCardOnXGitHubMutationArguments {
  /**
   * Parameters for UpdateProjectCard
   */
  input: IXGitHubUpdateProjectCardInput;
}

export interface IUpdateProjectColumnOnXGitHubMutationArguments {
  /**
   * Parameters for UpdateProjectColumn
   */
  input: IXGitHubUpdateProjectColumnInput;
}

export interface IUpdatePullRequestOnXGitHubMutationArguments {
  /**
   * Parameters for UpdatePullRequest
   */
  input: IXGitHubUpdatePullRequestInput;
}

export interface IUpdatePullRequestReviewOnXGitHubMutationArguments {
  /**
   * Parameters for UpdatePullRequestReview
   */
  input: IXGitHubUpdatePullRequestReviewInput;
}

export interface IUpdatePullRequestReviewCommentOnXGitHubMutationArguments {
  /**
   * Parameters for UpdatePullRequestReviewComment
   */
  input: IXGitHubUpdatePullRequestReviewCommentInput;
}

export interface IUpdateRefOnXGitHubMutationArguments {
  /**
   * Parameters for UpdateRef
   */
  input: IXGitHubUpdateRefInput;
}

export interface IUpdateRepositoryOnXGitHubMutationArguments {
  /**
   * Parameters for UpdateRepository
   */
  input: IXGitHubUpdateRepositoryInput;
}

export interface IUpdateSponsorshipPreferencesOnXGitHubMutationArguments {
  /**
   * Parameters for UpdateSponsorshipPreferences
   */
  input: IXGitHubUpdateSponsorshipPreferencesInput;
}

export interface IUpdateSubscriptionOnXGitHubMutationArguments {
  /**
   * Parameters for UpdateSubscription
   */
  input: IXGitHubUpdateSubscriptionInput;
}

export interface IUpdateTeamDiscussionOnXGitHubMutationArguments {
  /**
   * Parameters for UpdateTeamDiscussion
   */
  input: IXGitHubUpdateTeamDiscussionInput;
}

export interface IUpdateTeamDiscussionCommentOnXGitHubMutationArguments {
  /**
   * Parameters for UpdateTeamDiscussionComment
   */
  input: IXGitHubUpdateTeamDiscussionCommentInput;
}

export interface IUpdateTopicsOnXGitHubMutationArguments {
  /**
   * Parameters for UpdateTopics
   */
  input: IXGitHubUpdateTopicsInput;
}

export interface IVerifyVerifiableDomainOnXGitHubMutationArguments {
  /**
   * Parameters for VerifyVerifiableDomain
   */
  input: IXGitHubVerifyVerifiableDomainInput;
}

/**
 * An object with an ID.
 */
export type _xGitHubNode =
  | IXGitHubAddedToProjectEvent
  | IXGitHubApp
  | IXGitHubAssignedEvent
  | IXGitHubAutoMergeDisabledEvent
  | IXGitHubAutoMergeEnabledEvent
  | IXGitHubAutoRebaseEnabledEvent
  | IXGitHubAutoSquashEnabledEvent
  | IXGitHubAutomaticBaseChangeFailedEvent
  | IXGitHubAutomaticBaseChangeSucceededEvent
  | IXGitHubBaseRefChangedEvent
  | IXGitHubBaseRefDeletedEvent
  | IXGitHubBaseRefForcePushedEvent
  | IXGitHubBlob
  | IXGitHubBot
  | IXGitHubBranchProtectionRule
  | IXGitHubCWE
  | IXGitHubCheckRun
  | IXGitHubCheckSuite
  | IXGitHubClosedEvent
  | IXGitHubCodeOfConduct
  | IXGitHubCommentDeletedEvent
  | IXGitHubCommit
  | IXGitHubCommitComment
  | IXGitHubCommitCommentThread
  | IXGitHubConnectedEvent
  | IXGitHubConvertToDraftEvent
  | IXGitHubConvertedNoteToIssueEvent
  | IXGitHubCrossReferencedEvent
  | IXGitHubDemilestonedEvent
  | IXGitHubDeployKey
  | IXGitHubDeployedEvent
  | IXGitHubDeployment
  | IXGitHubDeploymentEnvironmentChangedEvent
  | IXGitHubDeploymentReview
  | IXGitHubDeploymentStatus
  | IXGitHubDisconnectedEvent
  | IXGitHubDiscussion
  | IXGitHubDiscussionCategory
  | IXGitHubDiscussionComment
  | IXGitHubEnterprise
  | IXGitHubEnterpriseAdministratorInvitation
  | IXGitHubEnterpriseIdentityProvider
  | IXGitHubEnterpriseRepositoryInfo
  | IXGitHubEnterpriseServerInstallation
  | IXGitHubEnterpriseServerUserAccount
  | IXGitHubEnterpriseServerUserAccountEmail
  | IXGitHubEnterpriseServerUserAccountsUpload
  | IXGitHubEnterpriseUserAccount
  | IXGitHubEnvironment
  | IXGitHubExternalIdentity
  | IXGitHubGist
  | IXGitHubGistComment
  | IXGitHubHeadRefDeletedEvent
  | IXGitHubHeadRefForcePushedEvent
  | IXGitHubHeadRefRestoredEvent
  | IXGitHubIpAllowListEntry
  | IXGitHubIssue
  | IXGitHubIssueComment
  | IXGitHubLabel
  | IXGitHubLabeledEvent
  | IXGitHubLanguage
  | IXGitHubLicense
  | IXGitHubLockedEvent
  | IXGitHubMannequin
  | IXGitHubMarkedAsDuplicateEvent
  | IXGitHubMarketplaceCategory
  | IXGitHubMarketplaceListing
  | IXGitHubMembersCanDeleteReposClearAuditEntry
  | IXGitHubMembersCanDeleteReposDisableAuditEntry
  | IXGitHubMembersCanDeleteReposEnableAuditEntry
  | IXGitHubMentionedEvent
  | IXGitHubMergedEvent
  | IXGitHubMilestone
  | IXGitHubMilestonedEvent
  | IXGitHubMovedColumnsInProjectEvent
  | IXGitHubOauthApplicationCreateAuditEntry
  | IXGitHubOrgAddBillingManagerAuditEntry
  | IXGitHubOrgAddMemberAuditEntry
  | IXGitHubOrgBlockUserAuditEntry
  | IXGitHubOrgConfigDisableCollaboratorsOnlyAuditEntry
  | IXGitHubOrgConfigEnableCollaboratorsOnlyAuditEntry
  | IXGitHubOrgCreateAuditEntry
  | IXGitHubOrgDisableOauthAppRestrictionsAuditEntry
  | IXGitHubOrgDisableSamlAuditEntry
  | IXGitHubOrgDisableTwoFactorRequirementAuditEntry
  | IXGitHubOrgEnableOauthAppRestrictionsAuditEntry
  | IXGitHubOrgEnableSamlAuditEntry
  | IXGitHubOrgEnableTwoFactorRequirementAuditEntry
  | IXGitHubOrgInviteMemberAuditEntry
  | IXGitHubOrgInviteToBusinessAuditEntry
  | IXGitHubOrgOauthAppAccessApprovedAuditEntry
  | IXGitHubOrgOauthAppAccessDeniedAuditEntry
  | IXGitHubOrgOauthAppAccessRequestedAuditEntry
  | IXGitHubOrgRemoveBillingManagerAuditEntry
  | IXGitHubOrgRemoveMemberAuditEntry
  | IXGitHubOrgRemoveOutsideCollaboratorAuditEntry
  | IXGitHubOrgRestoreMemberAuditEntry
  | IXGitHubOrgUnblockUserAuditEntry
  | IXGitHubOrgUpdateDefaultRepositoryPermissionAuditEntry
  | IXGitHubOrgUpdateMemberAuditEntry
  | IXGitHubOrgUpdateMemberRepositoryCreationPermissionAuditEntry
  | IXGitHubOrgUpdateMemberRepositoryInvitationPermissionAuditEntry
  | IXGitHubOrganization
  | IXGitHubOrganizationIdentityProvider
  | IXGitHubOrganizationInvitation
  | IXGitHubPackage
  | IXGitHubPackageFile
  | IXGitHubPackageTag
  | IXGitHubPackageVersion
  | IXGitHubPinnedDiscussion
  | IXGitHubPinnedEvent
  | IXGitHubPinnedIssue
  | IXGitHubPrivateRepositoryForkingDisableAuditEntry
  | IXGitHubPrivateRepositoryForkingEnableAuditEntry
  | IXGitHubProject
  | IXGitHubProjectCard
  | IXGitHubProjectColumn
  | IXGitHubPublicKey
  | IXGitHubPullRequest
  | IXGitHubPullRequestCommit
  | IXGitHubPullRequestCommitCommentThread
  | IXGitHubPullRequestReview
  | IXGitHubPullRequestReviewComment
  | IXGitHubPullRequestReviewThread
  | IXGitHubPush
  | IXGitHubPushAllowance
  | IXGitHubReaction
  | IXGitHubReadyForReviewEvent
  | IXGitHubRef
  | IXGitHubReferencedEvent
  | IXGitHubRelease
  | IXGitHubReleaseAsset
  | IXGitHubRemovedFromProjectEvent
  | IXGitHubRenamedTitleEvent
  | IXGitHubReopenedEvent
  | IXGitHubRepoAccessAuditEntry
  | IXGitHubRepoAddMemberAuditEntry
  | IXGitHubRepoAddTopicAuditEntry
  | IXGitHubRepoArchivedAuditEntry
  | IXGitHubRepoChangeMergeSettingAuditEntry
  | IXGitHubRepoConfigDisableAnonymousGitAccessAuditEntry
  | IXGitHubRepoConfigDisableCollaboratorsOnlyAuditEntry
  | IXGitHubRepoConfigDisableContributorsOnlyAuditEntry
  | IXGitHubRepoConfigDisableSockpuppetDisallowedAuditEntry
  | IXGitHubRepoConfigEnableAnonymousGitAccessAuditEntry
  | IXGitHubRepoConfigEnableCollaboratorsOnlyAuditEntry
  | IXGitHubRepoConfigEnableContributorsOnlyAuditEntry
  | IXGitHubRepoConfigEnableSockpuppetDisallowedAuditEntry
  | IXGitHubRepoConfigLockAnonymousGitAccessAuditEntry
  | IXGitHubRepoConfigUnlockAnonymousGitAccessAuditEntry
  | IXGitHubRepoCreateAuditEntry
  | IXGitHubRepoDestroyAuditEntry
  | IXGitHubRepoRemoveMemberAuditEntry
  | IXGitHubRepoRemoveTopicAuditEntry
  | IXGitHubRepository
  | IXGitHubRepositoryInvitation
  | IXGitHubRepositoryTopic
  | IXGitHubRepositoryVisibilityChangeDisableAuditEntry
  | IXGitHubRepositoryVisibilityChangeEnableAuditEntry
  | IXGitHubRepositoryVulnerabilityAlert
  | IXGitHubReviewDismissalAllowance
  | IXGitHubReviewDismissedEvent
  | IXGitHubReviewRequest
  | IXGitHubReviewRequestRemovedEvent
  | IXGitHubReviewRequestedEvent
  | IXGitHubSavedReply
  | IXGitHubSecurityAdvisory
  | IXGitHubSponsorsActivity
  | IXGitHubSponsorsListing
  | IXGitHubSponsorsTier
  | IXGitHubSponsorship
  | IXGitHubSponsorshipNewsletter
  | IXGitHubStatus
  | IXGitHubStatusCheckRollup
  | IXGitHubStatusContext
  | IXGitHubSubscribedEvent
  | IXGitHubTag
  | IXGitHubTeam
  | IXGitHubTeamAddMemberAuditEntry
  | IXGitHubTeamAddRepositoryAuditEntry
  | IXGitHubTeamChangeParentTeamAuditEntry
  | IXGitHubTeamDiscussion
  | IXGitHubTeamDiscussionComment
  | IXGitHubTeamRemoveMemberAuditEntry
  | IXGitHubTeamRemoveRepositoryAuditEntry
  | IXGitHubTopic
  | IXGitHubTransferredEvent
  | IXGitHubTree
  | IXGitHubUnassignedEvent
  | IXGitHubUnlabeledEvent
  | IXGitHubUnlockedEvent
  | IXGitHubUnmarkedAsDuplicateEvent
  | IXGitHubUnpinnedEvent
  | IXGitHubUnsubscribedEvent
  | IXGitHubUser
  | IXGitHubUserBlockedEvent
  | IXGitHubUserContentEdit
  | IXGitHubUserStatus
  | IXGitHubVerifiableDomain
  | IXGitHubWorkflow
  | IXGitHubWorkflowRun;

/**
 * An object with an ID.
 */
export interface IXGitHubNode {
  __typename: '_xGitHubNode';

  /**
   * ID of the object.
   */
  id: string;
}

/**
 * The possible values for the notification restriction setting.
 */
export const enum XGitHubNotificationRestrictionSettingValue {
  /**
   * The setting is enabled for the owner.
   */
  ENABLED = 'ENABLED',

  /**
   * The setting is disabled for the owner.
   */
  DISABLED = 'DISABLED',
}

/**
 * Metadata for an audit entry with action oauth_application.*
 */
export type _xGitHubOauthApplicationAuditEntryData =
  | IXGitHubOauthApplicationCreateAuditEntry
  | IXGitHubOrgOauthAppAccessApprovedAuditEntry
  | IXGitHubOrgOauthAppAccessDeniedAuditEntry
  | IXGitHubOrgOauthAppAccessRequestedAuditEntry;

/**
 * Metadata for an audit entry with action oauth_application.*
 */
export interface IXGitHubOauthApplicationAuditEntryData {
  __typename: '_xGitHubOauthApplicationAuditEntryData';

  /**
   * The name of the OAuth Application.
   */
  oauthApplicationName: string | null;

  /**
   * The HTTP path for the OAuth Application
   */
  oauthApplicationResourcePath: any | null;

  /**
   * The HTTP URL for the OAuth Application
   */
  oauthApplicationUrl: any | null;
}

/**
 * Audit log entry for a oauth_application.create event.
 */
export interface IXGitHubOauthApplicationCreateAuditEntry {
  __typename: '_xGitHubOauthApplicationCreateAuditEntry';

  /**
   * The action name
   */
  action: string;

  /**
   * The user who initiated the action
   */
  actor: _xGitHubAuditEntryActor | null;

  /**
   * The IP address of the actor
   */
  actorIp: string | null;

  /**
   * A readable representation of the actor's location
   */
  actorLocation: IXGitHubActorLocation | null;

  /**
   * The username of the user who initiated the action
   */
  actorLogin: string | null;

  /**
   * The HTTP path for the actor.
   */
  actorResourcePath: any | null;

  /**
   * The HTTP URL for the actor.
   */
  actorUrl: any | null;

  /**
   * The application URL of the OAuth Application.
   */
  applicationUrl: any | null;

  /**
   * The callback URL of the OAuth Application.
   */
  callbackUrl: any | null;

  /**
   * The time the action was initiated
   */
  createdAt: any;
  id: string;

  /**
   * The name of the OAuth Application.
   */
  oauthApplicationName: string | null;

  /**
   * The HTTP path for the OAuth Application
   */
  oauthApplicationResourcePath: any | null;

  /**
   * The HTTP URL for the OAuth Application
   */
  oauthApplicationUrl: any | null;

  /**
   * The corresponding operation type for the action
   */
  operationType: XGitHubOperationType | null;

  /**
   * The Organization associated with the Audit Entry.
   */
  organization: IXGitHubOrganization | null;

  /**
   * The name of the Organization.
   */
  organizationName: string | null;

  /**
   * The HTTP path for the organization
   */
  organizationResourcePath: any | null;

  /**
   * The HTTP URL for the organization
   */
  organizationUrl: any | null;

  /**
   * The rate limit of the OAuth Application.
   */
  rateLimit: number | null;

  /**
   * The state of the OAuth Application.
   */
  state: XGitHubOauthApplicationCreateAuditEntryState | null;

  /**
   * The user affected by the action
   */
  user: IXGitHubUser | null;

  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin: string | null;

  /**
   * The HTTP path for the user.
   */
  userResourcePath: any | null;

  /**
   * The HTTP URL for the user.
   */
  userUrl: any | null;
}

/**
 * The state of an OAuth Application when it was created.
 */
export const enum XGitHubOauthApplicationCreateAuditEntryState {
  /**
   * The OAuth Application was active and allowed to have OAuth Accesses.
   */
  ACTIVE = 'ACTIVE',

  /**
   * The OAuth Application was suspended from generating OAuth Accesses due to abuse or security concerns.
   */
  SUSPENDED = 'SUSPENDED',

  /**
   * The OAuth Application was in the process of being deleted.
   */
  PENDING_DELETION = 'PENDING_DELETION',
}

/**
 * The corresponding operation type for the action
 */
export const enum XGitHubOperationType {
  /**
   * An existing resource was accessed
   */
  ACCESS = 'ACCESS',

  /**
   * A resource performed an authentication event
   */
  AUTHENTICATION = 'AUTHENTICATION',

  /**
   * A new resource was created
   */
  CREATE = 'CREATE',

  /**
   * An existing resource was modified
   */
  MODIFY = 'MODIFY',

  /**
   * An existing resource was removed
   */
  REMOVE = 'REMOVE',

  /**
   * An existing resource was restored
   */
  RESTORE = 'RESTORE',

  /**
   * An existing resource was transferred between multiple resources
   */
  TRANSFER = 'TRANSFER',
}

/**
 * Possible directions in which to order a list of items when provided an `orderBy` argument.
 */
export const enum XGitHubOrderDirection {
  /**
   * Specifies an ascending order for a given `orderBy` argument.
   */
  ASC = 'ASC',

  /**
   * Specifies a descending order for a given `orderBy` argument.
   */
  DESC = 'DESC',
}

/**
 * Audit log entry for a org.add_billing_manager
 */
export interface IXGitHubOrgAddBillingManagerAuditEntry {
  __typename: '_xGitHubOrgAddBillingManagerAuditEntry';

  /**
   * The action name
   */
  action: string;

  /**
   * The user who initiated the action
   */
  actor: _xGitHubAuditEntryActor | null;

  /**
   * The IP address of the actor
   */
  actorIp: string | null;

  /**
   * A readable representation of the actor's location
   */
  actorLocation: IXGitHubActorLocation | null;

  /**
   * The username of the user who initiated the action
   */
  actorLogin: string | null;

  /**
   * The HTTP path for the actor.
   */
  actorResourcePath: any | null;

  /**
   * The HTTP URL for the actor.
   */
  actorUrl: any | null;

  /**
   * The time the action was initiated
   */
  createdAt: any;
  id: string;

  /**
   * The email address used to invite a billing manager for the organization.
   */
  invitationEmail: string | null;

  /**
   * The corresponding operation type for the action
   */
  operationType: XGitHubOperationType | null;

  /**
   * The Organization associated with the Audit Entry.
   */
  organization: IXGitHubOrganization | null;

  /**
   * The name of the Organization.
   */
  organizationName: string | null;

  /**
   * The HTTP path for the organization
   */
  organizationResourcePath: any | null;

  /**
   * The HTTP URL for the organization
   */
  organizationUrl: any | null;

  /**
   * The user affected by the action
   */
  user: IXGitHubUser | null;

  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin: string | null;

  /**
   * The HTTP path for the user.
   */
  userResourcePath: any | null;

  /**
   * The HTTP URL for the user.
   */
  userUrl: any | null;
}

/**
 * Audit log entry for a org.add_member
 */
export interface IXGitHubOrgAddMemberAuditEntry {
  __typename: '_xGitHubOrgAddMemberAuditEntry';

  /**
   * The action name
   */
  action: string;

  /**
   * The user who initiated the action
   */
  actor: _xGitHubAuditEntryActor | null;

  /**
   * The IP address of the actor
   */
  actorIp: string | null;

  /**
   * A readable representation of the actor's location
   */
  actorLocation: IXGitHubActorLocation | null;

  /**
   * The username of the user who initiated the action
   */
  actorLogin: string | null;

  /**
   * The HTTP path for the actor.
   */
  actorResourcePath: any | null;

  /**
   * The HTTP URL for the actor.
   */
  actorUrl: any | null;

  /**
   * The time the action was initiated
   */
  createdAt: any;
  id: string;

  /**
   * The corresponding operation type for the action
   */
  operationType: XGitHubOperationType | null;

  /**
   * The Organization associated with the Audit Entry.
   */
  organization: IXGitHubOrganization | null;

  /**
   * The name of the Organization.
   */
  organizationName: string | null;

  /**
   * The HTTP path for the organization
   */
  organizationResourcePath: any | null;

  /**
   * The HTTP URL for the organization
   */
  organizationUrl: any | null;

  /**
   * The permission level of the member added to the organization.
   */
  permission: XGitHubOrgAddMemberAuditEntryPermission | null;

  /**
   * The user affected by the action
   */
  user: IXGitHubUser | null;

  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin: string | null;

  /**
   * The HTTP path for the user.
   */
  userResourcePath: any | null;

  /**
   * The HTTP URL for the user.
   */
  userUrl: any | null;
}

/**
 * The permissions available to members on an Organization.
 */
export const enum XGitHubOrgAddMemberAuditEntryPermission {
  /**
   * Can read and clone repositories.
   */
  READ = 'READ',

  /**
   * Can read, clone, push, and add collaborators to repositories.
   */
  ADMIN = 'ADMIN',
}

/**
 * Audit log entry for a org.block_user
 */
export interface IXGitHubOrgBlockUserAuditEntry {
  __typename: '_xGitHubOrgBlockUserAuditEntry';

  /**
   * The action name
   */
  action: string;

  /**
   * The user who initiated the action
   */
  actor: _xGitHubAuditEntryActor | null;

  /**
   * The IP address of the actor
   */
  actorIp: string | null;

  /**
   * A readable representation of the actor's location
   */
  actorLocation: IXGitHubActorLocation | null;

  /**
   * The username of the user who initiated the action
   */
  actorLogin: string | null;

  /**
   * The HTTP path for the actor.
   */
  actorResourcePath: any | null;

  /**
   * The HTTP URL for the actor.
   */
  actorUrl: any | null;

  /**
   * The blocked user.
   */
  blockedUser: IXGitHubUser | null;

  /**
   * The username of the blocked user.
   */
  blockedUserName: string | null;

  /**
   * The HTTP path for the blocked user.
   */
  blockedUserResourcePath: any | null;

  /**
   * The HTTP URL for the blocked user.
   */
  blockedUserUrl: any | null;

  /**
   * The time the action was initiated
   */
  createdAt: any;
  id: string;

  /**
   * The corresponding operation type for the action
   */
  operationType: XGitHubOperationType | null;

  /**
   * The Organization associated with the Audit Entry.
   */
  organization: IXGitHubOrganization | null;

  /**
   * The name of the Organization.
   */
  organizationName: string | null;

  /**
   * The HTTP path for the organization
   */
  organizationResourcePath: any | null;

  /**
   * The HTTP URL for the organization
   */
  organizationUrl: any | null;

  /**
   * The user affected by the action
   */
  user: IXGitHubUser | null;

  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin: string | null;

  /**
   * The HTTP path for the user.
   */
  userResourcePath: any | null;

  /**
   * The HTTP URL for the user.
   */
  userUrl: any | null;
}

/**
 * Audit log entry for a org.config.disable_collaborators_only event.
 */
export interface IXGitHubOrgConfigDisableCollaboratorsOnlyAuditEntry {
  __typename: '_xGitHubOrgConfigDisableCollaboratorsOnlyAuditEntry';

  /**
   * The action name
   */
  action: string;

  /**
   * The user who initiated the action
   */
  actor: _xGitHubAuditEntryActor | null;

  /**
   * The IP address of the actor
   */
  actorIp: string | null;

  /**
   * A readable representation of the actor's location
   */
  actorLocation: IXGitHubActorLocation | null;

  /**
   * The username of the user who initiated the action
   */
  actorLogin: string | null;

  /**
   * The HTTP path for the actor.
   */
  actorResourcePath: any | null;

  /**
   * The HTTP URL for the actor.
   */
  actorUrl: any | null;

  /**
   * The time the action was initiated
   */
  createdAt: any;
  id: string;

  /**
   * The corresponding operation type for the action
   */
  operationType: XGitHubOperationType | null;

  /**
   * The Organization associated with the Audit Entry.
   */
  organization: IXGitHubOrganization | null;

  /**
   * The name of the Organization.
   */
  organizationName: string | null;

  /**
   * The HTTP path for the organization
   */
  organizationResourcePath: any | null;

  /**
   * The HTTP URL for the organization
   */
  organizationUrl: any | null;

  /**
   * The user affected by the action
   */
  user: IXGitHubUser | null;

  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin: string | null;

  /**
   * The HTTP path for the user.
   */
  userResourcePath: any | null;

  /**
   * The HTTP URL for the user.
   */
  userUrl: any | null;
}

/**
 * Audit log entry for a org.config.enable_collaborators_only event.
 */
export interface IXGitHubOrgConfigEnableCollaboratorsOnlyAuditEntry {
  __typename: '_xGitHubOrgConfigEnableCollaboratorsOnlyAuditEntry';

  /**
   * The action name
   */
  action: string;

  /**
   * The user who initiated the action
   */
  actor: _xGitHubAuditEntryActor | null;

  /**
   * The IP address of the actor
   */
  actorIp: string | null;

  /**
   * A readable representation of the actor's location
   */
  actorLocation: IXGitHubActorLocation | null;

  /**
   * The username of the user who initiated the action
   */
  actorLogin: string | null;

  /**
   * The HTTP path for the actor.
   */
  actorResourcePath: any | null;

  /**
   * The HTTP URL for the actor.
   */
  actorUrl: any | null;

  /**
   * The time the action was initiated
   */
  createdAt: any;
  id: string;

  /**
   * The corresponding operation type for the action
   */
  operationType: XGitHubOperationType | null;

  /**
   * The Organization associated with the Audit Entry.
   */
  organization: IXGitHubOrganization | null;

  /**
   * The name of the Organization.
   */
  organizationName: string | null;

  /**
   * The HTTP path for the organization
   */
  organizationResourcePath: any | null;

  /**
   * The HTTP URL for the organization
   */
  organizationUrl: any | null;

  /**
   * The user affected by the action
   */
  user: IXGitHubUser | null;

  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin: string | null;

  /**
   * The HTTP path for the user.
   */
  userResourcePath: any | null;

  /**
   * The HTTP URL for the user.
   */
  userUrl: any | null;
}

/**
 * Audit log entry for a org.create event.
 */
export interface IXGitHubOrgCreateAuditEntry {
  __typename: '_xGitHubOrgCreateAuditEntry';

  /**
   * The action name
   */
  action: string;

  /**
   * The user who initiated the action
   */
  actor: _xGitHubAuditEntryActor | null;

  /**
   * The IP address of the actor
   */
  actorIp: string | null;

  /**
   * A readable representation of the actor's location
   */
  actorLocation: IXGitHubActorLocation | null;

  /**
   * The username of the user who initiated the action
   */
  actorLogin: string | null;

  /**
   * The HTTP path for the actor.
   */
  actorResourcePath: any | null;

  /**
   * The HTTP URL for the actor.
   */
  actorUrl: any | null;

  /**
   * The billing plan for the Organization.
   */
  billingPlan: XGitHubOrgCreateAuditEntryBillingPlan | null;

  /**
   * The time the action was initiated
   */
  createdAt: any;
  id: string;

  /**
   * The corresponding operation type for the action
   */
  operationType: XGitHubOperationType | null;

  /**
   * The Organization associated with the Audit Entry.
   */
  organization: IXGitHubOrganization | null;

  /**
   * The name of the Organization.
   */
  organizationName: string | null;

  /**
   * The HTTP path for the organization
   */
  organizationResourcePath: any | null;

  /**
   * The HTTP URL for the organization
   */
  organizationUrl: any | null;

  /**
   * The user affected by the action
   */
  user: IXGitHubUser | null;

  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin: string | null;

  /**
   * The HTTP path for the user.
   */
  userResourcePath: any | null;

  /**
   * The HTTP URL for the user.
   */
  userUrl: any | null;
}

/**
 * The billing plans available for organizations.
 */
export const enum XGitHubOrgCreateAuditEntryBillingPlan {
  /**
   * Free Plan
   */
  FREE = 'FREE',

  /**
   * Team Plan
   */
  BUSINESS = 'BUSINESS',

  /**
   * Enterprise Cloud Plan
   */
  BUSINESS_PLUS = 'BUSINESS_PLUS',

  /**
   * Legacy Unlimited Plan
   */
  UNLIMITED = 'UNLIMITED',

  /**
   * Tiered Per Seat Plan
   */
  TIERED_PER_SEAT = 'TIERED_PER_SEAT',
}

/**
 * Audit log entry for a org.disable_oauth_app_restrictions event.
 */
export interface IXGitHubOrgDisableOauthAppRestrictionsAuditEntry {
  __typename: '_xGitHubOrgDisableOauthAppRestrictionsAuditEntry';

  /**
   * The action name
   */
  action: string;

  /**
   * The user who initiated the action
   */
  actor: _xGitHubAuditEntryActor | null;

  /**
   * The IP address of the actor
   */
  actorIp: string | null;

  /**
   * A readable representation of the actor's location
   */
  actorLocation: IXGitHubActorLocation | null;

  /**
   * The username of the user who initiated the action
   */
  actorLogin: string | null;

  /**
   * The HTTP path for the actor.
   */
  actorResourcePath: any | null;

  /**
   * The HTTP URL for the actor.
   */
  actorUrl: any | null;

  /**
   * The time the action was initiated
   */
  createdAt: any;
  id: string;

  /**
   * The corresponding operation type for the action
   */
  operationType: XGitHubOperationType | null;

  /**
   * The Organization associated with the Audit Entry.
   */
  organization: IXGitHubOrganization | null;

  /**
   * The name of the Organization.
   */
  organizationName: string | null;

  /**
   * The HTTP path for the organization
   */
  organizationResourcePath: any | null;

  /**
   * The HTTP URL for the organization
   */
  organizationUrl: any | null;

  /**
   * The user affected by the action
   */
  user: IXGitHubUser | null;

  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin: string | null;

  /**
   * The HTTP path for the user.
   */
  userResourcePath: any | null;

  /**
   * The HTTP URL for the user.
   */
  userUrl: any | null;
}

/**
 * Audit log entry for a org.disable_saml event.
 */
export interface IXGitHubOrgDisableSamlAuditEntry {
  __typename: '_xGitHubOrgDisableSamlAuditEntry';

  /**
   * The action name
   */
  action: string;

  /**
   * The user who initiated the action
   */
  actor: _xGitHubAuditEntryActor | null;

  /**
   * The IP address of the actor
   */
  actorIp: string | null;

  /**
   * A readable representation of the actor's location
   */
  actorLocation: IXGitHubActorLocation | null;

  /**
   * The username of the user who initiated the action
   */
  actorLogin: string | null;

  /**
   * The HTTP path for the actor.
   */
  actorResourcePath: any | null;

  /**
   * The HTTP URL for the actor.
   */
  actorUrl: any | null;

  /**
   * The time the action was initiated
   */
  createdAt: any;

  /**
   * The SAML provider's digest algorithm URL.
   */
  digestMethodUrl: any | null;
  id: string;

  /**
   * The SAML provider's issuer URL.
   */
  issuerUrl: any | null;

  /**
   * The corresponding operation type for the action
   */
  operationType: XGitHubOperationType | null;

  /**
   * The Organization associated with the Audit Entry.
   */
  organization: IXGitHubOrganization | null;

  /**
   * The name of the Organization.
   */
  organizationName: string | null;

  /**
   * The HTTP path for the organization
   */
  organizationResourcePath: any | null;

  /**
   * The HTTP URL for the organization
   */
  organizationUrl: any | null;

  /**
   * The SAML provider's signature algorithm URL.
   */
  signatureMethodUrl: any | null;

  /**
   * The SAML provider's single sign-on URL.
   */
  singleSignOnUrl: any | null;

  /**
   * The user affected by the action
   */
  user: IXGitHubUser | null;

  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin: string | null;

  /**
   * The HTTP path for the user.
   */
  userResourcePath: any | null;

  /**
   * The HTTP URL for the user.
   */
  userUrl: any | null;
}

/**
 * Audit log entry for a org.disable_two_factor_requirement event.
 */
export interface IXGitHubOrgDisableTwoFactorRequirementAuditEntry {
  __typename: '_xGitHubOrgDisableTwoFactorRequirementAuditEntry';

  /**
   * The action name
   */
  action: string;

  /**
   * The user who initiated the action
   */
  actor: _xGitHubAuditEntryActor | null;

  /**
   * The IP address of the actor
   */
  actorIp: string | null;

  /**
   * A readable representation of the actor's location
   */
  actorLocation: IXGitHubActorLocation | null;

  /**
   * The username of the user who initiated the action
   */
  actorLogin: string | null;

  /**
   * The HTTP path for the actor.
   */
  actorResourcePath: any | null;

  /**
   * The HTTP URL for the actor.
   */
  actorUrl: any | null;

  /**
   * The time the action was initiated
   */
  createdAt: any;
  id: string;

  /**
   * The corresponding operation type for the action
   */
  operationType: XGitHubOperationType | null;

  /**
   * The Organization associated with the Audit Entry.
   */
  organization: IXGitHubOrganization | null;

  /**
   * The name of the Organization.
   */
  organizationName: string | null;

  /**
   * The HTTP path for the organization
   */
  organizationResourcePath: any | null;

  /**
   * The HTTP URL for the organization
   */
  organizationUrl: any | null;

  /**
   * The user affected by the action
   */
  user: IXGitHubUser | null;

  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin: string | null;

  /**
   * The HTTP path for the user.
   */
  userResourcePath: any | null;

  /**
   * The HTTP URL for the user.
   */
  userUrl: any | null;
}

/**
 * Audit log entry for a org.enable_oauth_app_restrictions event.
 */
export interface IXGitHubOrgEnableOauthAppRestrictionsAuditEntry {
  __typename: '_xGitHubOrgEnableOauthAppRestrictionsAuditEntry';

  /**
   * The action name
   */
  action: string;

  /**
   * The user who initiated the action
   */
  actor: _xGitHubAuditEntryActor | null;

  /**
   * The IP address of the actor
   */
  actorIp: string | null;

  /**
   * A readable representation of the actor's location
   */
  actorLocation: IXGitHubActorLocation | null;

  /**
   * The username of the user who initiated the action
   */
  actorLogin: string | null;

  /**
   * The HTTP path for the actor.
   */
  actorResourcePath: any | null;

  /**
   * The HTTP URL for the actor.
   */
  actorUrl: any | null;

  /**
   * The time the action was initiated
   */
  createdAt: any;
  id: string;

  /**
   * The corresponding operation type for the action
   */
  operationType: XGitHubOperationType | null;

  /**
   * The Organization associated with the Audit Entry.
   */
  organization: IXGitHubOrganization | null;

  /**
   * The name of the Organization.
   */
  organizationName: string | null;

  /**
   * The HTTP path for the organization
   */
  organizationResourcePath: any | null;

  /**
   * The HTTP URL for the organization
   */
  organizationUrl: any | null;

  /**
   * The user affected by the action
   */
  user: IXGitHubUser | null;

  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin: string | null;

  /**
   * The HTTP path for the user.
   */
  userResourcePath: any | null;

  /**
   * The HTTP URL for the user.
   */
  userUrl: any | null;
}

/**
 * Audit log entry for a org.enable_saml event.
 */
export interface IXGitHubOrgEnableSamlAuditEntry {
  __typename: '_xGitHubOrgEnableSamlAuditEntry';

  /**
   * The action name
   */
  action: string;

  /**
   * The user who initiated the action
   */
  actor: _xGitHubAuditEntryActor | null;

  /**
   * The IP address of the actor
   */
  actorIp: string | null;

  /**
   * A readable representation of the actor's location
   */
  actorLocation: IXGitHubActorLocation | null;

  /**
   * The username of the user who initiated the action
   */
  actorLogin: string | null;

  /**
   * The HTTP path for the actor.
   */
  actorResourcePath: any | null;

  /**
   * The HTTP URL for the actor.
   */
  actorUrl: any | null;

  /**
   * The time the action was initiated
   */
  createdAt: any;

  /**
   * The SAML provider's digest algorithm URL.
   */
  digestMethodUrl: any | null;
  id: string;

  /**
   * The SAML provider's issuer URL.
   */
  issuerUrl: any | null;

  /**
   * The corresponding operation type for the action
   */
  operationType: XGitHubOperationType | null;

  /**
   * The Organization associated with the Audit Entry.
   */
  organization: IXGitHubOrganization | null;

  /**
   * The name of the Organization.
   */
  organizationName: string | null;

  /**
   * The HTTP path for the organization
   */
  organizationResourcePath: any | null;

  /**
   * The HTTP URL for the organization
   */
  organizationUrl: any | null;

  /**
   * The SAML provider's signature algorithm URL.
   */
  signatureMethodUrl: any | null;

  /**
   * The SAML provider's single sign-on URL.
   */
  singleSignOnUrl: any | null;

  /**
   * The user affected by the action
   */
  user: IXGitHubUser | null;

  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin: string | null;

  /**
   * The HTTP path for the user.
   */
  userResourcePath: any | null;

  /**
   * The HTTP URL for the user.
   */
  userUrl: any | null;
}

/**
 * Audit log entry for a org.enable_two_factor_requirement event.
 */
export interface IXGitHubOrgEnableTwoFactorRequirementAuditEntry {
  __typename: '_xGitHubOrgEnableTwoFactorRequirementAuditEntry';

  /**
   * The action name
   */
  action: string;

  /**
   * The user who initiated the action
   */
  actor: _xGitHubAuditEntryActor | null;

  /**
   * The IP address of the actor
   */
  actorIp: string | null;

  /**
   * A readable representation of the actor's location
   */
  actorLocation: IXGitHubActorLocation | null;

  /**
   * The username of the user who initiated the action
   */
  actorLogin: string | null;

  /**
   * The HTTP path for the actor.
   */
  actorResourcePath: any | null;

  /**
   * The HTTP URL for the actor.
   */
  actorUrl: any | null;

  /**
   * The time the action was initiated
   */
  createdAt: any;
  id: string;

  /**
   * The corresponding operation type for the action
   */
  operationType: XGitHubOperationType | null;

  /**
   * The Organization associated with the Audit Entry.
   */
  organization: IXGitHubOrganization | null;

  /**
   * The name of the Organization.
   */
  organizationName: string | null;

  /**
   * The HTTP path for the organization
   */
  organizationResourcePath: any | null;

  /**
   * The HTTP URL for the organization
   */
  organizationUrl: any | null;

  /**
   * The user affected by the action
   */
  user: IXGitHubUser | null;

  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin: string | null;

  /**
   * The HTTP path for the user.
   */
  userResourcePath: any | null;

  /**
   * The HTTP URL for the user.
   */
  userUrl: any | null;
}

/**
 * Audit log entry for a org.invite_member event.
 */
export interface IXGitHubOrgInviteMemberAuditEntry {
  __typename: '_xGitHubOrgInviteMemberAuditEntry';

  /**
   * The action name
   */
  action: string;

  /**
   * The user who initiated the action
   */
  actor: _xGitHubAuditEntryActor | null;

  /**
   * The IP address of the actor
   */
  actorIp: string | null;

  /**
   * A readable representation of the actor's location
   */
  actorLocation: IXGitHubActorLocation | null;

  /**
   * The username of the user who initiated the action
   */
  actorLogin: string | null;

  /**
   * The HTTP path for the actor.
   */
  actorResourcePath: any | null;

  /**
   * The HTTP URL for the actor.
   */
  actorUrl: any | null;

  /**
   * The time the action was initiated
   */
  createdAt: any;

  /**
   * The email address of the organization invitation.
   */
  email: string | null;
  id: string;

  /**
   * The corresponding operation type for the action
   */
  operationType: XGitHubOperationType | null;

  /**
   * The Organization associated with the Audit Entry.
   */
  organization: IXGitHubOrganization | null;

  /**
   * The organization invitation.
   */
  organizationInvitation: IXGitHubOrganizationInvitation | null;

  /**
   * The name of the Organization.
   */
  organizationName: string | null;

  /**
   * The HTTP path for the organization
   */
  organizationResourcePath: any | null;

  /**
   * The HTTP URL for the organization
   */
  organizationUrl: any | null;

  /**
   * The user affected by the action
   */
  user: IXGitHubUser | null;

  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin: string | null;

  /**
   * The HTTP path for the user.
   */
  userResourcePath: any | null;

  /**
   * The HTTP URL for the user.
   */
  userUrl: any | null;
}

/**
 * Audit log entry for a org.invite_to_business event.
 */
export interface IXGitHubOrgInviteToBusinessAuditEntry {
  __typename: '_xGitHubOrgInviteToBusinessAuditEntry';

  /**
   * The action name
   */
  action: string;

  /**
   * The user who initiated the action
   */
  actor: _xGitHubAuditEntryActor | null;

  /**
   * The IP address of the actor
   */
  actorIp: string | null;

  /**
   * A readable representation of the actor's location
   */
  actorLocation: IXGitHubActorLocation | null;

  /**
   * The username of the user who initiated the action
   */
  actorLogin: string | null;

  /**
   * The HTTP path for the actor.
   */
  actorResourcePath: any | null;

  /**
   * The HTTP URL for the actor.
   */
  actorUrl: any | null;

  /**
   * The time the action was initiated
   */
  createdAt: any;

  /**
   * The HTTP path for this enterprise.
   */
  enterpriseResourcePath: any | null;

  /**
   * The slug of the enterprise.
   */
  enterpriseSlug: string | null;

  /**
   * The HTTP URL for this enterprise.
   */
  enterpriseUrl: any | null;
  id: string;

  /**
   * The corresponding operation type for the action
   */
  operationType: XGitHubOperationType | null;

  /**
   * The Organization associated with the Audit Entry.
   */
  organization: IXGitHubOrganization | null;

  /**
   * The name of the Organization.
   */
  organizationName: string | null;

  /**
   * The HTTP path for the organization
   */
  organizationResourcePath: any | null;

  /**
   * The HTTP URL for the organization
   */
  organizationUrl: any | null;

  /**
   * The user affected by the action
   */
  user: IXGitHubUser | null;

  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin: string | null;

  /**
   * The HTTP path for the user.
   */
  userResourcePath: any | null;

  /**
   * The HTTP URL for the user.
   */
  userUrl: any | null;
}

/**
 * Audit log entry for a org.oauth_app_access_approved event.
 */
export interface IXGitHubOrgOauthAppAccessApprovedAuditEntry {
  __typename: '_xGitHubOrgOauthAppAccessApprovedAuditEntry';

  /**
   * The action name
   */
  action: string;

  /**
   * The user who initiated the action
   */
  actor: _xGitHubAuditEntryActor | null;

  /**
   * The IP address of the actor
   */
  actorIp: string | null;

  /**
   * A readable representation of the actor's location
   */
  actorLocation: IXGitHubActorLocation | null;

  /**
   * The username of the user who initiated the action
   */
  actorLogin: string | null;

  /**
   * The HTTP path for the actor.
   */
  actorResourcePath: any | null;

  /**
   * The HTTP URL for the actor.
   */
  actorUrl: any | null;

  /**
   * The time the action was initiated
   */
  createdAt: any;
  id: string;

  /**
   * The name of the OAuth Application.
   */
  oauthApplicationName: string | null;

  /**
   * The HTTP path for the OAuth Application
   */
  oauthApplicationResourcePath: any | null;

  /**
   * The HTTP URL for the OAuth Application
   */
  oauthApplicationUrl: any | null;

  /**
   * The corresponding operation type for the action
   */
  operationType: XGitHubOperationType | null;

  /**
   * The Organization associated with the Audit Entry.
   */
  organization: IXGitHubOrganization | null;

  /**
   * The name of the Organization.
   */
  organizationName: string | null;

  /**
   * The HTTP path for the organization
   */
  organizationResourcePath: any | null;

  /**
   * The HTTP URL for the organization
   */
  organizationUrl: any | null;

  /**
   * The user affected by the action
   */
  user: IXGitHubUser | null;

  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin: string | null;

  /**
   * The HTTP path for the user.
   */
  userResourcePath: any | null;

  /**
   * The HTTP URL for the user.
   */
  userUrl: any | null;
}

/**
 * Audit log entry for a org.oauth_app_access_denied event.
 */
export interface IXGitHubOrgOauthAppAccessDeniedAuditEntry {
  __typename: '_xGitHubOrgOauthAppAccessDeniedAuditEntry';

  /**
   * The action name
   */
  action: string;

  /**
   * The user who initiated the action
   */
  actor: _xGitHubAuditEntryActor | null;

  /**
   * The IP address of the actor
   */
  actorIp: string | null;

  /**
   * A readable representation of the actor's location
   */
  actorLocation: IXGitHubActorLocation | null;

  /**
   * The username of the user who initiated the action
   */
  actorLogin: string | null;

  /**
   * The HTTP path for the actor.
   */
  actorResourcePath: any | null;

  /**
   * The HTTP URL for the actor.
   */
  actorUrl: any | null;

  /**
   * The time the action was initiated
   */
  createdAt: any;
  id: string;

  /**
   * The name of the OAuth Application.
   */
  oauthApplicationName: string | null;

  /**
   * The HTTP path for the OAuth Application
   */
  oauthApplicationResourcePath: any | null;

  /**
   * The HTTP URL for the OAuth Application
   */
  oauthApplicationUrl: any | null;

  /**
   * The corresponding operation type for the action
   */
  operationType: XGitHubOperationType | null;

  /**
   * The Organization associated with the Audit Entry.
   */
  organization: IXGitHubOrganization | null;

  /**
   * The name of the Organization.
   */
  organizationName: string | null;

  /**
   * The HTTP path for the organization
   */
  organizationResourcePath: any | null;

  /**
   * The HTTP URL for the organization
   */
  organizationUrl: any | null;

  /**
   * The user affected by the action
   */
  user: IXGitHubUser | null;

  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin: string | null;

  /**
   * The HTTP path for the user.
   */
  userResourcePath: any | null;

  /**
   * The HTTP URL for the user.
   */
  userUrl: any | null;
}

/**
 * Audit log entry for a org.oauth_app_access_requested event.
 */
export interface IXGitHubOrgOauthAppAccessRequestedAuditEntry {
  __typename: '_xGitHubOrgOauthAppAccessRequestedAuditEntry';

  /**
   * The action name
   */
  action: string;

  /**
   * The user who initiated the action
   */
  actor: _xGitHubAuditEntryActor | null;

  /**
   * The IP address of the actor
   */
  actorIp: string | null;

  /**
   * A readable representation of the actor's location
   */
  actorLocation: IXGitHubActorLocation | null;

  /**
   * The username of the user who initiated the action
   */
  actorLogin: string | null;

  /**
   * The HTTP path for the actor.
   */
  actorResourcePath: any | null;

  /**
   * The HTTP URL for the actor.
   */
  actorUrl: any | null;

  /**
   * The time the action was initiated
   */
  createdAt: any;
  id: string;

  /**
   * The name of the OAuth Application.
   */
  oauthApplicationName: string | null;

  /**
   * The HTTP path for the OAuth Application
   */
  oauthApplicationResourcePath: any | null;

  /**
   * The HTTP URL for the OAuth Application
   */
  oauthApplicationUrl: any | null;

  /**
   * The corresponding operation type for the action
   */
  operationType: XGitHubOperationType | null;

  /**
   * The Organization associated with the Audit Entry.
   */
  organization: IXGitHubOrganization | null;

  /**
   * The name of the Organization.
   */
  organizationName: string | null;

  /**
   * The HTTP path for the organization
   */
  organizationResourcePath: any | null;

  /**
   * The HTTP URL for the organization
   */
  organizationUrl: any | null;

  /**
   * The user affected by the action
   */
  user: IXGitHubUser | null;

  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin: string | null;

  /**
   * The HTTP path for the user.
   */
  userResourcePath: any | null;

  /**
   * The HTTP URL for the user.
   */
  userUrl: any | null;
}

/**
 * Audit log entry for a org.remove_billing_manager event.
 */
export interface IXGitHubOrgRemoveBillingManagerAuditEntry {
  __typename: '_xGitHubOrgRemoveBillingManagerAuditEntry';

  /**
   * The action name
   */
  action: string;

  /**
   * The user who initiated the action
   */
  actor: _xGitHubAuditEntryActor | null;

  /**
   * The IP address of the actor
   */
  actorIp: string | null;

  /**
   * A readable representation of the actor's location
   */
  actorLocation: IXGitHubActorLocation | null;

  /**
   * The username of the user who initiated the action
   */
  actorLogin: string | null;

  /**
   * The HTTP path for the actor.
   */
  actorResourcePath: any | null;

  /**
   * The HTTP URL for the actor.
   */
  actorUrl: any | null;

  /**
   * The time the action was initiated
   */
  createdAt: any;
  id: string;

  /**
   * The corresponding operation type for the action
   */
  operationType: XGitHubOperationType | null;

  /**
   * The Organization associated with the Audit Entry.
   */
  organization: IXGitHubOrganization | null;

  /**
   * The name of the Organization.
   */
  organizationName: string | null;

  /**
   * The HTTP path for the organization
   */
  organizationResourcePath: any | null;

  /**
   * The HTTP URL for the organization
   */
  organizationUrl: any | null;

  /**
   * The reason for the billing manager being removed.
   */
  reason: XGitHubOrgRemoveBillingManagerAuditEntryReason | null;

  /**
   * The user affected by the action
   */
  user: IXGitHubUser | null;

  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin: string | null;

  /**
   * The HTTP path for the user.
   */
  userResourcePath: any | null;

  /**
   * The HTTP URL for the user.
   */
  userUrl: any | null;
}

/**
 * The reason a billing manager was removed from an Organization.
 */
export const enum XGitHubOrgRemoveBillingManagerAuditEntryReason {
  /**
   * The organization required 2FA of its billing managers and this user did not have 2FA enabled.
   */
  TWO_FACTOR_REQUIREMENT_NON_COMPLIANCE = 'TWO_FACTOR_REQUIREMENT_NON_COMPLIANCE',

  /**
   * SAML external identity missing
   */
  SAML_EXTERNAL_IDENTITY_MISSING = 'SAML_EXTERNAL_IDENTITY_MISSING',

  /**
   * SAML SSO enforcement requires an external identity
   */
  SAML_SSO_ENFORCEMENT_REQUIRES_EXTERNAL_IDENTITY = 'SAML_SSO_ENFORCEMENT_REQUIRES_EXTERNAL_IDENTITY',
}

/**
 * Audit log entry for a org.remove_member event.
 */
export interface IXGitHubOrgRemoveMemberAuditEntry {
  __typename: '_xGitHubOrgRemoveMemberAuditEntry';

  /**
   * The action name
   */
  action: string;

  /**
   * The user who initiated the action
   */
  actor: _xGitHubAuditEntryActor | null;

  /**
   * The IP address of the actor
   */
  actorIp: string | null;

  /**
   * A readable representation of the actor's location
   */
  actorLocation: IXGitHubActorLocation | null;

  /**
   * The username of the user who initiated the action
   */
  actorLogin: string | null;

  /**
   * The HTTP path for the actor.
   */
  actorResourcePath: any | null;

  /**
   * The HTTP URL for the actor.
   */
  actorUrl: any | null;

  /**
   * The time the action was initiated
   */
  createdAt: any;
  id: string;

  /**
   * The types of membership the member has with the organization.
   */
  membershipTypes: Array<XGitHubOrgRemoveMemberAuditEntryMembershipType> | null;

  /**
   * The corresponding operation type for the action
   */
  operationType: XGitHubOperationType | null;

  /**
   * The Organization associated with the Audit Entry.
   */
  organization: IXGitHubOrganization | null;

  /**
   * The name of the Organization.
   */
  organizationName: string | null;

  /**
   * The HTTP path for the organization
   */
  organizationResourcePath: any | null;

  /**
   * The HTTP URL for the organization
   */
  organizationUrl: any | null;

  /**
   * The reason for the member being removed.
   */
  reason: XGitHubOrgRemoveMemberAuditEntryReason | null;

  /**
   * The user affected by the action
   */
  user: IXGitHubUser | null;

  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin: string | null;

  /**
   * The HTTP path for the user.
   */
  userResourcePath: any | null;

  /**
   * The HTTP URL for the user.
   */
  userUrl: any | null;
}

/**
 * The type of membership a user has with an Organization.
 */
export const enum XGitHubOrgRemoveMemberAuditEntryMembershipType {
  /**
   * A direct member is a user that is a member of the Organization.
   */
  DIRECT_MEMBER = 'DIRECT_MEMBER',

  /**
   * Organization administrators have full access and can change several settings, including the names of repositories that belong to the Organization and Owners team membership. In addition, organization admins can delete the organization and all of its repositories.
   */
  ADMIN = 'ADMIN',

  /**
   * A billing manager is a user who manages the billing settings for the Organization, such as updating payment information.
   */
  BILLING_MANAGER = 'BILLING_MANAGER',

  /**
   * An unaffiliated collaborator is a person who is not a member of the Organization and does not have access to any repositories in the Organization.
   */
  UNAFFILIATED = 'UNAFFILIATED',

  /**
   * An outside collaborator is a person who isn't explicitly a member of the Organization, but who has Read, Write, or Admin permissions to one or more repositories in the organization.
   */
  OUTSIDE_COLLABORATOR = 'OUTSIDE_COLLABORATOR',
}

/**
 * The reason a member was removed from an Organization.
 */
export const enum XGitHubOrgRemoveMemberAuditEntryReason {
  /**
   * The organization required 2FA of its billing managers and this user did not have 2FA enabled.
   */
  TWO_FACTOR_REQUIREMENT_NON_COMPLIANCE = 'TWO_FACTOR_REQUIREMENT_NON_COMPLIANCE',

  /**
   * SAML external identity missing
   */
  SAML_EXTERNAL_IDENTITY_MISSING = 'SAML_EXTERNAL_IDENTITY_MISSING',

  /**
   * SAML SSO enforcement requires an external identity
   */
  SAML_SSO_ENFORCEMENT_REQUIRES_EXTERNAL_IDENTITY = 'SAML_SSO_ENFORCEMENT_REQUIRES_EXTERNAL_IDENTITY',

  /**
   * User account has been deleted
   */
  USER_ACCOUNT_DELETED = 'USER_ACCOUNT_DELETED',

  /**
   * User was removed from organization during account recovery
   */
  TWO_FACTOR_ACCOUNT_RECOVERY = 'TWO_FACTOR_ACCOUNT_RECOVERY',
}

/**
 * Audit log entry for a org.remove_outside_collaborator event.
 */
export interface IXGitHubOrgRemoveOutsideCollaboratorAuditEntry {
  __typename: '_xGitHubOrgRemoveOutsideCollaboratorAuditEntry';

  /**
   * The action name
   */
  action: string;

  /**
   * The user who initiated the action
   */
  actor: _xGitHubAuditEntryActor | null;

  /**
   * The IP address of the actor
   */
  actorIp: string | null;

  /**
   * A readable representation of the actor's location
   */
  actorLocation: IXGitHubActorLocation | null;

  /**
   * The username of the user who initiated the action
   */
  actorLogin: string | null;

  /**
   * The HTTP path for the actor.
   */
  actorResourcePath: any | null;

  /**
   * The HTTP URL for the actor.
   */
  actorUrl: any | null;

  /**
   * The time the action was initiated
   */
  createdAt: any;
  id: string;

  /**
   * The types of membership the outside collaborator has with the organization.
   */
  membershipTypes: Array<XGitHubOrgRemoveOutsideCollaboratorAuditEntryMembershipType> | null;

  /**
   * The corresponding operation type for the action
   */
  operationType: XGitHubOperationType | null;

  /**
   * The Organization associated with the Audit Entry.
   */
  organization: IXGitHubOrganization | null;

  /**
   * The name of the Organization.
   */
  organizationName: string | null;

  /**
   * The HTTP path for the organization
   */
  organizationResourcePath: any | null;

  /**
   * The HTTP URL for the organization
   */
  organizationUrl: any | null;

  /**
   * The reason for the outside collaborator being removed from the Organization.
   */
  reason: XGitHubOrgRemoveOutsideCollaboratorAuditEntryReason | null;

  /**
   * The user affected by the action
   */
  user: IXGitHubUser | null;

  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin: string | null;

  /**
   * The HTTP path for the user.
   */
  userResourcePath: any | null;

  /**
   * The HTTP URL for the user.
   */
  userUrl: any | null;
}

/**
 * The type of membership a user has with an Organization.
 */
export const enum XGitHubOrgRemoveOutsideCollaboratorAuditEntryMembershipType {
  /**
   * An outside collaborator is a person who isn't explicitly a member of the Organization, but who has Read, Write, or Admin permissions to one or more repositories in the organization.
   */
  OUTSIDE_COLLABORATOR = 'OUTSIDE_COLLABORATOR',

  /**
   * An unaffiliated collaborator is a person who is not a member of the Organization and does not have access to any repositories in the organization.
   */
  UNAFFILIATED = 'UNAFFILIATED',

  /**
   * A billing manager is a user who manages the billing settings for the Organization, such as updating payment information.
   */
  BILLING_MANAGER = 'BILLING_MANAGER',
}

/**
 * The reason an outside collaborator was removed from an Organization.
 */
export const enum XGitHubOrgRemoveOutsideCollaboratorAuditEntryReason {
  /**
   * The organization required 2FA of its billing managers and this user did not have 2FA enabled.
   */
  TWO_FACTOR_REQUIREMENT_NON_COMPLIANCE = 'TWO_FACTOR_REQUIREMENT_NON_COMPLIANCE',

  /**
   * SAML external identity missing
   */
  SAML_EXTERNAL_IDENTITY_MISSING = 'SAML_EXTERNAL_IDENTITY_MISSING',
}

/**
 * Audit log entry for a org.restore_member event.
 */
export interface IXGitHubOrgRestoreMemberAuditEntry {
  __typename: '_xGitHubOrgRestoreMemberAuditEntry';

  /**
   * The action name
   */
  action: string;

  /**
   * The user who initiated the action
   */
  actor: _xGitHubAuditEntryActor | null;

  /**
   * The IP address of the actor
   */
  actorIp: string | null;

  /**
   * A readable representation of the actor's location
   */
  actorLocation: IXGitHubActorLocation | null;

  /**
   * The username of the user who initiated the action
   */
  actorLogin: string | null;

  /**
   * The HTTP path for the actor.
   */
  actorResourcePath: any | null;

  /**
   * The HTTP URL for the actor.
   */
  actorUrl: any | null;

  /**
   * The time the action was initiated
   */
  createdAt: any;
  id: string;

  /**
   * The corresponding operation type for the action
   */
  operationType: XGitHubOperationType | null;

  /**
   * The Organization associated with the Audit Entry.
   */
  organization: IXGitHubOrganization | null;

  /**
   * The name of the Organization.
   */
  organizationName: string | null;

  /**
   * The HTTP path for the organization
   */
  organizationResourcePath: any | null;

  /**
   * The HTTP URL for the organization
   */
  organizationUrl: any | null;

  /**
   * The number of custom email routings for the restored member.
   */
  restoredCustomEmailRoutingsCount: number | null;

  /**
   * The number of issue assignments for the restored member.
   */
  restoredIssueAssignmentsCount: number | null;

  /**
   * Restored organization membership objects.
   */
  restoredMemberships: Array<_xGitHubOrgRestoreMemberAuditEntryMembership> | null;

  /**
   * The number of restored memberships.
   */
  restoredMembershipsCount: number | null;

  /**
   * The number of repositories of the restored member.
   */
  restoredRepositoriesCount: number | null;

  /**
   * The number of starred repositories for the restored member.
   */
  restoredRepositoryStarsCount: number | null;

  /**
   * The number of watched repositories for the restored member.
   */
  restoredRepositoryWatchesCount: number | null;

  /**
   * The user affected by the action
   */
  user: IXGitHubUser | null;

  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin: string | null;

  /**
   * The HTTP path for the user.
   */
  userResourcePath: any | null;

  /**
   * The HTTP URL for the user.
   */
  userUrl: any | null;
}

/**
 * Types of memberships that can be restored for an Organization member.
 */
export type _xGitHubOrgRestoreMemberAuditEntryMembership =
  | IXGitHubOrgRestoreMemberMembershipOrganizationAuditEntryData
  | IXGitHubOrgRestoreMemberMembershipRepositoryAuditEntryData
  | IXGitHubOrgRestoreMemberMembershipTeamAuditEntryData;

/**
 * Metadata for an organization membership for org.restore_member actions
 */
export interface IXGitHubOrgRestoreMemberMembershipOrganizationAuditEntryData {
  __typename: '_xGitHubOrgRestoreMemberMembershipOrganizationAuditEntryData';

  /**
   * The Organization associated with the Audit Entry.
   */
  organization: IXGitHubOrganization | null;

  /**
   * The name of the Organization.
   */
  organizationName: string | null;

  /**
   * The HTTP path for the organization
   */
  organizationResourcePath: any | null;

  /**
   * The HTTP URL for the organization
   */
  organizationUrl: any | null;
}

/**
 * Metadata for a repository membership for org.restore_member actions
 */
export interface IXGitHubOrgRestoreMemberMembershipRepositoryAuditEntryData {
  __typename: '_xGitHubOrgRestoreMemberMembershipRepositoryAuditEntryData';

  /**
   * The repository associated with the action
   */
  repository: IXGitHubRepository | null;

  /**
   * The name of the repository
   */
  repositoryName: string | null;

  /**
   * The HTTP path for the repository
   */
  repositoryResourcePath: any | null;

  /**
   * The HTTP URL for the repository
   */
  repositoryUrl: any | null;
}

/**
 * Metadata for a team membership for org.restore_member actions
 */
export interface IXGitHubOrgRestoreMemberMembershipTeamAuditEntryData {
  __typename: '_xGitHubOrgRestoreMemberMembershipTeamAuditEntryData';

  /**
   * The team associated with the action
   */
  team: IXGitHubTeam | null;

  /**
   * The name of the team
   */
  teamName: string | null;

  /**
   * The HTTP path for this team
   */
  teamResourcePath: any | null;

  /**
   * The HTTP URL for this team
   */
  teamUrl: any | null;
}

/**
 * Audit log entry for a org.unblock_user
 */
export interface IXGitHubOrgUnblockUserAuditEntry {
  __typename: '_xGitHubOrgUnblockUserAuditEntry';

  /**
   * The action name
   */
  action: string;

  /**
   * The user who initiated the action
   */
  actor: _xGitHubAuditEntryActor | null;

  /**
   * The IP address of the actor
   */
  actorIp: string | null;

  /**
   * A readable representation of the actor's location
   */
  actorLocation: IXGitHubActorLocation | null;

  /**
   * The username of the user who initiated the action
   */
  actorLogin: string | null;

  /**
   * The HTTP path for the actor.
   */
  actorResourcePath: any | null;

  /**
   * The HTTP URL for the actor.
   */
  actorUrl: any | null;

  /**
   * The user being unblocked by the organization.
   */
  blockedUser: IXGitHubUser | null;

  /**
   * The username of the blocked user.
   */
  blockedUserName: string | null;

  /**
   * The HTTP path for the blocked user.
   */
  blockedUserResourcePath: any | null;

  /**
   * The HTTP URL for the blocked user.
   */
  blockedUserUrl: any | null;

  /**
   * The time the action was initiated
   */
  createdAt: any;
  id: string;

  /**
   * The corresponding operation type for the action
   */
  operationType: XGitHubOperationType | null;

  /**
   * The Organization associated with the Audit Entry.
   */
  organization: IXGitHubOrganization | null;

  /**
   * The name of the Organization.
   */
  organizationName: string | null;

  /**
   * The HTTP path for the organization
   */
  organizationResourcePath: any | null;

  /**
   * The HTTP URL for the organization
   */
  organizationUrl: any | null;

  /**
   * The user affected by the action
   */
  user: IXGitHubUser | null;

  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin: string | null;

  /**
   * The HTTP path for the user.
   */
  userResourcePath: any | null;

  /**
   * The HTTP URL for the user.
   */
  userUrl: any | null;
}

/**
 * Audit log entry for a org.update_default_repository_permission
 */
export interface IXGitHubOrgUpdateDefaultRepositoryPermissionAuditEntry {
  __typename: '_xGitHubOrgUpdateDefaultRepositoryPermissionAuditEntry';

  /**
   * The action name
   */
  action: string;

  /**
   * The user who initiated the action
   */
  actor: _xGitHubAuditEntryActor | null;

  /**
   * The IP address of the actor
   */
  actorIp: string | null;

  /**
   * A readable representation of the actor's location
   */
  actorLocation: IXGitHubActorLocation | null;

  /**
   * The username of the user who initiated the action
   */
  actorLogin: string | null;

  /**
   * The HTTP path for the actor.
   */
  actorResourcePath: any | null;

  /**
   * The HTTP URL for the actor.
   */
  actorUrl: any | null;

  /**
   * The time the action was initiated
   */
  createdAt: any;
  id: string;

  /**
   * The corresponding operation type for the action
   */
  operationType: XGitHubOperationType | null;

  /**
   * The Organization associated with the Audit Entry.
   */
  organization: IXGitHubOrganization | null;

  /**
   * The name of the Organization.
   */
  organizationName: string | null;

  /**
   * The HTTP path for the organization
   */
  organizationResourcePath: any | null;

  /**
   * The HTTP URL for the organization
   */
  organizationUrl: any | null;

  /**
   * The new base repository permission level for the organization.
   */
  permission: XGitHubOrgUpdateDefaultRepositoryPermissionAuditEntryPermission | null;

  /**
   * The former base repository permission level for the organization.
   */
  permissionWas: XGitHubOrgUpdateDefaultRepositoryPermissionAuditEntryPermission | null;

  /**
   * The user affected by the action
   */
  user: IXGitHubUser | null;

  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin: string | null;

  /**
   * The HTTP path for the user.
   */
  userResourcePath: any | null;

  /**
   * The HTTP URL for the user.
   */
  userUrl: any | null;
}

/**
 * The default permission a repository can have in an Organization.
 */
export const enum XGitHubOrgUpdateDefaultRepositoryPermissionAuditEntryPermission {
  /**
   * Can read and clone repositories.
   */
  READ = 'READ',

  /**
   * Can read, clone and push to repositories.
   */
  WRITE = 'WRITE',

  /**
   * Can read, clone, push, and add collaborators to repositories.
   */
  ADMIN = 'ADMIN',

  /**
   * No default permission value.
   */
  NONE = 'NONE',
}

/**
 * Audit log entry for a org.update_member event.
 */
export interface IXGitHubOrgUpdateMemberAuditEntry {
  __typename: '_xGitHubOrgUpdateMemberAuditEntry';

  /**
   * The action name
   */
  action: string;

  /**
   * The user who initiated the action
   */
  actor: _xGitHubAuditEntryActor | null;

  /**
   * The IP address of the actor
   */
  actorIp: string | null;

  /**
   * A readable representation of the actor's location
   */
  actorLocation: IXGitHubActorLocation | null;

  /**
   * The username of the user who initiated the action
   */
  actorLogin: string | null;

  /**
   * The HTTP path for the actor.
   */
  actorResourcePath: any | null;

  /**
   * The HTTP URL for the actor.
   */
  actorUrl: any | null;

  /**
   * The time the action was initiated
   */
  createdAt: any;
  id: string;

  /**
   * The corresponding operation type for the action
   */
  operationType: XGitHubOperationType | null;

  /**
   * The Organization associated with the Audit Entry.
   */
  organization: IXGitHubOrganization | null;

  /**
   * The name of the Organization.
   */
  organizationName: string | null;

  /**
   * The HTTP path for the organization
   */
  organizationResourcePath: any | null;

  /**
   * The HTTP URL for the organization
   */
  organizationUrl: any | null;

  /**
   * The new member permission level for the organization.
   */
  permission: XGitHubOrgUpdateMemberAuditEntryPermission | null;

  /**
   * The former member permission level for the organization.
   */
  permissionWas: XGitHubOrgUpdateMemberAuditEntryPermission | null;

  /**
   * The user affected by the action
   */
  user: IXGitHubUser | null;

  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin: string | null;

  /**
   * The HTTP path for the user.
   */
  userResourcePath: any | null;

  /**
   * The HTTP URL for the user.
   */
  userUrl: any | null;
}

/**
 * The permissions available to members on an Organization.
 */
export const enum XGitHubOrgUpdateMemberAuditEntryPermission {
  /**
   * Can read and clone repositories.
   */
  READ = 'READ',

  /**
   * Can read, clone, push, and add collaborators to repositories.
   */
  ADMIN = 'ADMIN',
}

/**
 * Audit log entry for a org.update_member_repository_creation_permission event.
 */
export interface IXGitHubOrgUpdateMemberRepositoryCreationPermissionAuditEntry {
  __typename: '_xGitHubOrgUpdateMemberRepositoryCreationPermissionAuditEntry';

  /**
   * The action name
   */
  action: string;

  /**
   * The user who initiated the action
   */
  actor: _xGitHubAuditEntryActor | null;

  /**
   * The IP address of the actor
   */
  actorIp: string | null;

  /**
   * A readable representation of the actor's location
   */
  actorLocation: IXGitHubActorLocation | null;

  /**
   * The username of the user who initiated the action
   */
  actorLogin: string | null;

  /**
   * The HTTP path for the actor.
   */
  actorResourcePath: any | null;

  /**
   * The HTTP URL for the actor.
   */
  actorUrl: any | null;

  /**
   * Can members create repositories in the organization.
   */
  canCreateRepositories: boolean | null;

  /**
   * The time the action was initiated
   */
  createdAt: any;
  id: string;

  /**
   * The corresponding operation type for the action
   */
  operationType: XGitHubOperationType | null;

  /**
   * The Organization associated with the Audit Entry.
   */
  organization: IXGitHubOrganization | null;

  /**
   * The name of the Organization.
   */
  organizationName: string | null;

  /**
   * The HTTP path for the organization
   */
  organizationResourcePath: any | null;

  /**
   * The HTTP URL for the organization
   */
  organizationUrl: any | null;

  /**
   * The user affected by the action
   */
  user: IXGitHubUser | null;

  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin: string | null;

  /**
   * The HTTP path for the user.
   */
  userResourcePath: any | null;

  /**
   * The HTTP URL for the user.
   */
  userUrl: any | null;

  /**
   * The permission for visibility level of repositories for this organization.
   */
  visibility: XGitHubOrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility | null;
}

/**
 * The permissions available for repository creation on an Organization.
 */
export const enum XGitHubOrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility {
  /**
   * All organization members are restricted from creating any repositories.
   */
  ALL = 'ALL',

  /**
   * All organization members are restricted from creating public repositories.
   */
  PUBLIC = 'PUBLIC',

  /**
   * All organization members are allowed to create any repositories.
   */
  NONE = 'NONE',

  /**
   * All organization members are restricted from creating private repositories.
   */
  PRIVATE = 'PRIVATE',

  /**
   * All organization members are restricted from creating internal repositories.
   */
  INTERNAL = 'INTERNAL',

  /**
   * All organization members are restricted from creating public or internal repositories.
   */
  PUBLIC_INTERNAL = 'PUBLIC_INTERNAL',

  /**
   * All organization members are restricted from creating private or internal repositories.
   */
  PRIVATE_INTERNAL = 'PRIVATE_INTERNAL',

  /**
   * All organization members are restricted from creating public or private repositories.
   */
  PUBLIC_PRIVATE = 'PUBLIC_PRIVATE',
}

/**
 * Audit log entry for a org.update_member_repository_invitation_permission event.
 */
export interface IXGitHubOrgUpdateMemberRepositoryInvitationPermissionAuditEntry {
  __typename: '_xGitHubOrgUpdateMemberRepositoryInvitationPermissionAuditEntry';

  /**
   * The action name
   */
  action: string;

  /**
   * The user who initiated the action
   */
  actor: _xGitHubAuditEntryActor | null;

  /**
   * The IP address of the actor
   */
  actorIp: string | null;

  /**
   * A readable representation of the actor's location
   */
  actorLocation: IXGitHubActorLocation | null;

  /**
   * The username of the user who initiated the action
   */
  actorLogin: string | null;

  /**
   * The HTTP path for the actor.
   */
  actorResourcePath: any | null;

  /**
   * The HTTP URL for the actor.
   */
  actorUrl: any | null;

  /**
   * Can outside collaborators be invited to repositories in the organization.
   */
  canInviteOutsideCollaboratorsToRepositories: boolean | null;

  /**
   * The time the action was initiated
   */
  createdAt: any;
  id: string;

  /**
   * The corresponding operation type for the action
   */
  operationType: XGitHubOperationType | null;

  /**
   * The Organization associated with the Audit Entry.
   */
  organization: IXGitHubOrganization | null;

  /**
   * The name of the Organization.
   */
  organizationName: string | null;

  /**
   * The HTTP path for the organization
   */
  organizationResourcePath: any | null;

  /**
   * The HTTP URL for the organization
   */
  organizationUrl: any | null;

  /**
   * The user affected by the action
   */
  user: IXGitHubUser | null;

  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin: string | null;

  /**
   * The HTTP path for the user.
   */
  userResourcePath: any | null;

  /**
   * The HTTP URL for the user.
   */
  userUrl: any | null;
}

/**
 * An account on GitHub, with one or more owners, that has repositories, members and teams.
 */
export interface IXGitHubOrganization {
  __typename: '_xGitHubOrganization';

  /**
   * Determine if this repository owner has any items that can be pinned to their profile.
   */
  anyPinnableItems: boolean;

  /**
   * Audit log entries of the organization
   */
  auditLog: IXGitHubOrganizationAuditEntryConnection;

  /**
   * A URL pointing to the organization's public avatar.
   */
  avatarUrl: any;

  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: any;

  /**
   * Identifies the primary key from the database.
   */
  databaseId: number | null;

  /**
   * The organization's public profile description.
   */
  description: string | null;

  /**
   * The organization's public profile description rendered to HTML.
   */
  descriptionHTML: string | null;

  /**
   * A list of domains owned by the organization.
   */
  domains: IXGitHubVerifiableDomainConnection | null;

  /**
   * The organization's public email.
   */
  email: string | null;

  /**
   * The estimated next GitHub Sponsors payout for this user/organization in cents (USD).
   */
  estimatedNextSponsorsPayoutInCents: number;

  /**
   * True if this user/organization has a GitHub Sponsors listing.
   */
  hasSponsorsListing: boolean;
  id: string;

  /**
   * The interaction ability settings for this organization.
   */
  interactionAbility: IXGitHubRepositoryInteractionAbility | null;

  /**
   * The setting value for whether the organization has an IP allow list enabled.
   */
  ipAllowListEnabledSetting: XGitHubIpAllowListEnabledSettingValue;

  /**
   * The IP addresses that are allowed to access resources owned by the organization.
   */
  ipAllowListEntries: IXGitHubIpAllowListEntryConnection;

  /**
   * The setting value for whether the organization has IP allow list configuration for installed GitHub Apps enabled.
   */
  ipAllowListForInstalledAppsEnabledSetting: XGitHubIpAllowListForInstalledAppsEnabledSettingValue;

  /**
   * Check if the given account is sponsoring this user/organization.
   */
  isSponsoredBy: boolean;

  /**
   * True if the viewer is sponsored by this user/organization.
   */
  isSponsoringViewer: boolean;

  /**
   * Whether the organization has verified its profile email and website.
   */
  isVerified: boolean;

  /**
   * Showcases a selection of repositories and gists that the profile owner has either curated or that have been selected automatically based on popularity.
   */
  itemShowcase: IXGitHubProfileItemShowcase;

  /**
   * The organization's public profile location.
   */
  location: string | null;

  /**
   * The organization's login name.
   */
  login: string;

  /**
   * Get the status messages members of this entity have set that are either public or visible only to the organization.
   */
  memberStatuses: IXGitHubUserStatusConnection;

  /**
   * A list of users who are members of this organization.
   */
  membersWithRole: IXGitHubOrganizationMemberConnection;

  /**
   * The estimated monthly GitHub Sponsors income for this user/organization in cents (USD).
   */
  monthlyEstimatedSponsorsIncomeInCents: number;

  /**
   * The organization's public profile name.
   */
  name: string | null;

  /**
   * The HTTP path creating a new team
   */
  newTeamResourcePath: any;

  /**
   * The HTTP URL creating a new team
   */
  newTeamUrl: any;

  /**
   * Indicates if email notification delivery for this organization is restricted to verified or approved domains.
   */
  notificationDeliveryRestrictionEnabledSetting: XGitHubNotificationRestrictionSettingValue;

  /**
   * The billing email for the organization.
   */
  organizationBillingEmail: string | null;

  /**
   * A list of packages under the owner.
   */
  packages: IXGitHubPackageConnection;

  /**
   * A list of users who have been invited to join this organization.
   */
  pendingMembers: IXGitHubUserConnection;

  /**
   * A list of repositories and gists this profile owner can pin to their profile.
   */
  pinnableItems: IXGitHubPinnableItemConnection;

  /**
   * A list of repositories and gists this profile owner has pinned to their profile
   */
  pinnedItems: IXGitHubPinnableItemConnection;

  /**
   * Returns how many more items this profile owner can pin to their profile.
   */
  pinnedItemsRemaining: number;

  /**
   * Find project by number.
   */
  project: IXGitHubProject | null;

  /**
   * A list of projects under the owner.
   */
  projects: IXGitHubProjectConnection;

  /**
   * The HTTP path listing organization's projects
   */
  projectsResourcePath: any;

  /**
   * The HTTP URL listing organization's projects
   */
  projectsUrl: any;

  /**
   * A list of repositories that the user owns.
   */
  repositories: IXGitHubRepositoryConnection;

  /**
   * Find Repository.
   */
  repository: IXGitHubRepository | null;

  /**
   * Discussion comments this user has authored.
   */
  repositoryDiscussionComments: IXGitHubDiscussionCommentConnection;

  /**
   * Discussions this user has started.
   */
  repositoryDiscussions: IXGitHubDiscussionConnection;

  /**
   * When true the organization requires all members, billing managers, and outside collaborators to enable two-factor authentication.
   */
  requiresTwoFactorAuthentication: boolean | null;

  /**
   * The HTTP path for this organization.
   */
  resourcePath: any;

  /**
   * The Organization's SAML identity providers
   */
  samlIdentityProvider: IXGitHubOrganizationIdentityProvider | null;

  /**
   * List of users and organizations this entity is sponsoring.
   */
  sponsoring: IXGitHubSponsorConnection;

  /**
   * List of sponsors for this user or organization.
   */
  sponsors: IXGitHubSponsorConnection;

  /**
   * Events involving this sponsorable, such as new sponsorships.
   */
  sponsorsActivities: IXGitHubSponsorsActivityConnection;

  /**
   * The GitHub Sponsors listing for this user or organization.
   */
  sponsorsListing: IXGitHubSponsorsListing | null;

  /**
   * The sponsorship from the viewer to this user/organization; that is, the sponsorship where you're the sponsor. Only returns a sponsorship if it is active.
   */
  sponsorshipForViewerAsSponsor: IXGitHubSponsorship | null;

  /**
   * The sponsorship from this user/organization to the viewer; that is, the sponsorship you're receiving. Only returns a sponsorship if it is active.
   */
  sponsorshipForViewerAsSponsorable: IXGitHubSponsorship | null;

  /**
   * List of sponsorship updates sent from this sponsorable to sponsors.
   */
  sponsorshipNewsletters: IXGitHubSponsorshipNewsletterConnection;

  /**
   * This object's sponsorships as the maintainer.
   */
  sponsorshipsAsMaintainer: IXGitHubSponsorshipConnection;

  /**
   * This object's sponsorships as the sponsor.
   */
  sponsorshipsAsSponsor: IXGitHubSponsorshipConnection;

  /**
   * Find an organization's team by its slug.
   */
  team: IXGitHubTeam | null;

  /**
   * A list of teams in this organization.
   */
  teams: IXGitHubTeamConnection;

  /**
   * The HTTP path listing organization's teams
   */
  teamsResourcePath: any;

  /**
   * The HTTP URL listing organization's teams
   */
  teamsUrl: any;

  /**
   * The organization's Twitter username.
   */
  twitterUsername: string | null;

  /**
   * Identifies the date and time when the object was last updated.
   */
  updatedAt: any;

  /**
   * The HTTP URL for this organization.
   */
  url: any;

  /**
   * Organization is adminable by the viewer.
   */
  viewerCanAdminister: boolean;

  /**
   * Can the viewer pin repositories and gists to the profile?
   */
  viewerCanChangePinnedItems: boolean;

  /**
   * Can the current viewer create new projects on this owner.
   */
  viewerCanCreateProjects: boolean;

  /**
   * Viewer can create repositories on this organization
   */
  viewerCanCreateRepositories: boolean;

  /**
   * Viewer can create teams on this organization.
   */
  viewerCanCreateTeams: boolean;

  /**
   * Whether or not the viewer is able to sponsor this user/organization.
   */
  viewerCanSponsor: boolean;

  /**
   * Viewer is an active member of this organization.
   */
  viewerIsAMember: boolean;

  /**
   * True if the viewer is sponsoring this user/organization.
   */
  viewerIsSponsoring: boolean;

  /**
   * The organization's public profile URL.
   */
  websiteUrl: any | null;
}

export interface IAnyPinnableItemsOnXGitHubOrganizationArguments {
  /**
   * Filter to only a particular kind of pinnable item.
   */
  type?: XGitHubPinnableItemType | null;
}

export interface IAuditLogOnXGitHubOrganizationArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * The query string to filter audit entries
   */
  query?: string | null;

  /**
   * Ordering options for the returned audit log entries.
   * @default {"field":"CREATED_AT","direction":"DESC"}
   */
  orderBy?: IXGitHubAuditLogOrder | null;
}

export interface IAvatarUrlOnXGitHubOrganizationArguments {
  /**
   * The size of the resulting square image.
   */
  size?: number | null;
}

export interface IDomainsOnXGitHubOrganizationArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Filter by if the domain is verified.
   * @default null
   */
  isVerified?: boolean | null;

  /**
   * Filter by if the domain is approved.
   * @default null
   */
  isApproved?: boolean | null;

  /**
   * Ordering options for verifiable domains returned.
   * @default {"field":"DOMAIN","direction":"ASC"}
   */
  orderBy?: IXGitHubVerifiableDomainOrder | null;
}

export interface IIpAllowListEntriesOnXGitHubOrganizationArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Ordering options for IP allow list entries returned.
   * @default {"field":"ALLOW_LIST_VALUE","direction":"ASC"}
   */
  orderBy?: IXGitHubIpAllowListEntryOrder | null;
}

export interface IIsSponsoredByOnXGitHubOrganizationArguments {
  /**
   * The target account's login.
   */
  accountLogin: string;
}

export interface IMemberStatusesOnXGitHubOrganizationArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Ordering options for user statuses returned from the connection.
   * @default {"field":"UPDATED_AT","direction":"DESC"}
   */
  orderBy?: IXGitHubUserStatusOrder | null;
}

export interface IMembersWithRoleOnXGitHubOrganizationArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IPackagesOnXGitHubOrganizationArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Find packages by their names.
   */
  names?: Array<string | null> | null;

  /**
   * Find packages in a repository by ID.
   */
  repositoryId?: string | null;

  /**
   * Filter registry package by type.
   */
  packageType?: XGitHubPackageType | null;

  /**
   * Ordering of the returned packages.
   * @default {"field":"CREATED_AT","direction":"DESC"}
   */
  orderBy?: IXGitHubPackageOrder | null;
}

export interface IPendingMembersOnXGitHubOrganizationArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IPinnableItemsOnXGitHubOrganizationArguments {
  /**
   * Filter the types of pinnable items that are returned.
   */
  types?: Array<XGitHubPinnableItemType> | null;

  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IPinnedItemsOnXGitHubOrganizationArguments {
  /**
   * Filter the types of pinned items that are returned.
   */
  types?: Array<XGitHubPinnableItemType> | null;

  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IProjectOnXGitHubOrganizationArguments {
  /**
   * The project number to find.
   */
  number: number;
}

export interface IProjectsOnXGitHubOrganizationArguments {
  /**
   * Ordering options for projects returned from the connection
   */
  orderBy?: IXGitHubProjectOrder | null;

  /**
   * Query to search projects by, currently only searching by name.
   */
  search?: string | null;

  /**
   * A list of states to filter the projects by.
   */
  states?: Array<XGitHubProjectState> | null;

  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IRepositoriesOnXGitHubOrganizationArguments {
  /**
   * If non-null, filters repositories according to privacy
   */
  privacy?: XGitHubRepositoryPrivacy | null;

  /**
   * Ordering options for repositories returned from the connection
   */
  orderBy?: IXGitHubRepositoryOrder | null;

  /**
   * Array of viewer's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the current viewer owns.
   */
  affiliations?: Array<XGitHubRepositoryAffiliation | null> | null;

  /**
   * Array of owner's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the organization or user being viewed owns.
   * @default ["OWNER","COLLABORATOR"]
   */
  ownerAffiliations?: Array<XGitHubRepositoryAffiliation | null> | null;

  /**
   * If non-null, filters repositories according to whether they have been locked
   */
  isLocked?: boolean | null;

  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * If non-null, filters repositories according to whether they are forks of another repository
   */
  isFork?: boolean | null;
}

export interface IRepositoryOnXGitHubOrganizationArguments {
  /**
   * Name of Repository to find.
   */
  name: string;
}

export interface IRepositoryDiscussionCommentsOnXGitHubOrganizationArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Filter discussion comments to only those in a specific repository.
   */
  repositoryId?: string | null;

  /**
   * Filter discussion comments to only those that were marked as the answer
   * @default false
   */
  onlyAnswers?: boolean | null;
}

export interface IRepositoryDiscussionsOnXGitHubOrganizationArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Ordering options for discussions returned from the connection.
   * @default {"field":"CREATED_AT","direction":"DESC"}
   */
  orderBy?: IXGitHubDiscussionOrder | null;

  /**
   * Filter discussions to only those in a specific repository.
   */
  repositoryId?: string | null;

  /**
   * Filter discussions to only those that have been answered or not. Defaults to including both answered and unanswered discussions.
   * @default null
   */
  answered?: boolean | null;
}

export interface ISponsoringOnXGitHubOrganizationArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Ordering options for the users and organizations returned from the connection.
   * @default {"field":"RELEVANCE","direction":"DESC"}
   */
  orderBy?: IXGitHubSponsorOrder | null;
}

export interface ISponsorsOnXGitHubOrganizationArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * If given, will filter for sponsors at the given tier. Will only return sponsors whose tier the viewer is permitted to see.
   */
  tierId?: string | null;

  /**
   * Ordering options for sponsors returned from the connection.
   * @default {"field":"RELEVANCE","direction":"DESC"}
   */
  orderBy?: IXGitHubSponsorOrder | null;
}

export interface ISponsorsActivitiesOnXGitHubOrganizationArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Filter activities returned to only those that occurred in a given time range.
   * @default "MONTH"
   */
  period?: XGitHubSponsorsActivityPeriod | null;

  /**
   * Ordering options for activity returned from the connection.
   * @default {"field":"TIMESTAMP","direction":"DESC"}
   */
  orderBy?: IXGitHubSponsorsActivityOrder | null;
}

export interface ISponsorshipNewslettersOnXGitHubOrganizationArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Ordering options for sponsorship updates returned from the connection.
   * @default {"field":"CREATED_AT","direction":"DESC"}
   */
  orderBy?: IXGitHubSponsorshipNewsletterOrder | null;
}

export interface ISponsorshipsAsMaintainerOnXGitHubOrganizationArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Whether or not to include private sponsorships in the result set
   * @default false
   */
  includePrivate?: boolean | null;

  /**
   * Ordering options for sponsorships returned from this connection. If left blank, the sponsorships will be ordered based on relevancy to the viewer.
   */
  orderBy?: IXGitHubSponsorshipOrder | null;
}

export interface ISponsorshipsAsSponsorOnXGitHubOrganizationArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Ordering options for sponsorships returned from this connection. If left blank, the sponsorships will be ordered based on relevancy to the viewer.
   */
  orderBy?: IXGitHubSponsorshipOrder | null;
}

export interface ITeamOnXGitHubOrganizationArguments {
  /**
   * The name or slug of the team to find.
   */
  slug: string;
}

export interface ITeamsOnXGitHubOrganizationArguments {
  /**
   * If non-null, filters teams according to privacy
   */
  privacy?: XGitHubTeamPrivacy | null;

  /**
   * If non-null, filters teams according to whether the viewer is an admin or member on team
   */
  role?: XGitHubTeamRole | null;

  /**
   * If non-null, filters teams with query on team name and team slug
   */
  query?: string | null;

  /**
   * User logins to filter by
   */
  userLogins?: Array<string> | null;

  /**
   * Ordering options for teams returned from the connection
   */
  orderBy?: IXGitHubTeamOrder | null;

  /**
   * If true, filters teams that are mapped to an LDAP Group (Enterprise only)
   */
  ldapMapped?: boolean | null;

  /**
   * If true, restrict to only root teams
   * @default false
   */
  rootTeamsOnly?: boolean | null;

  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

/**
 * An audit entry in an organization audit log.
 */
export type _xGitHubOrganizationAuditEntry =
  | IXGitHubMembersCanDeleteReposClearAuditEntry
  | IXGitHubMembersCanDeleteReposDisableAuditEntry
  | IXGitHubMembersCanDeleteReposEnableAuditEntry
  | IXGitHubOauthApplicationCreateAuditEntry
  | IXGitHubOrgAddBillingManagerAuditEntry
  | IXGitHubOrgAddMemberAuditEntry
  | IXGitHubOrgBlockUserAuditEntry
  | IXGitHubOrgConfigDisableCollaboratorsOnlyAuditEntry
  | IXGitHubOrgConfigEnableCollaboratorsOnlyAuditEntry
  | IXGitHubOrgCreateAuditEntry
  | IXGitHubOrgDisableOauthAppRestrictionsAuditEntry
  | IXGitHubOrgDisableSamlAuditEntry
  | IXGitHubOrgDisableTwoFactorRequirementAuditEntry
  | IXGitHubOrgEnableOauthAppRestrictionsAuditEntry
  | IXGitHubOrgEnableSamlAuditEntry
  | IXGitHubOrgEnableTwoFactorRequirementAuditEntry
  | IXGitHubOrgInviteMemberAuditEntry
  | IXGitHubOrgInviteToBusinessAuditEntry
  | IXGitHubOrgOauthAppAccessApprovedAuditEntry
  | IXGitHubOrgOauthAppAccessDeniedAuditEntry
  | IXGitHubOrgOauthAppAccessRequestedAuditEntry
  | IXGitHubOrgRemoveBillingManagerAuditEntry
  | IXGitHubOrgRemoveMemberAuditEntry
  | IXGitHubOrgRemoveOutsideCollaboratorAuditEntry
  | IXGitHubOrgRestoreMemberAuditEntry
  | IXGitHubOrgUnblockUserAuditEntry
  | IXGitHubOrgUpdateDefaultRepositoryPermissionAuditEntry
  | IXGitHubOrgUpdateMemberAuditEntry
  | IXGitHubOrgUpdateMemberRepositoryCreationPermissionAuditEntry
  | IXGitHubOrgUpdateMemberRepositoryInvitationPermissionAuditEntry
  | IXGitHubPrivateRepositoryForkingDisableAuditEntry
  | IXGitHubPrivateRepositoryForkingEnableAuditEntry
  | IXGitHubRepoAccessAuditEntry
  | IXGitHubRepoAddMemberAuditEntry
  | IXGitHubRepoAddTopicAuditEntry
  | IXGitHubRepoArchivedAuditEntry
  | IXGitHubRepoChangeMergeSettingAuditEntry
  | IXGitHubRepoConfigDisableAnonymousGitAccessAuditEntry
  | IXGitHubRepoConfigDisableCollaboratorsOnlyAuditEntry
  | IXGitHubRepoConfigDisableContributorsOnlyAuditEntry
  | IXGitHubRepoConfigDisableSockpuppetDisallowedAuditEntry
  | IXGitHubRepoConfigEnableAnonymousGitAccessAuditEntry
  | IXGitHubRepoConfigEnableCollaboratorsOnlyAuditEntry
  | IXGitHubRepoConfigEnableContributorsOnlyAuditEntry
  | IXGitHubRepoConfigEnableSockpuppetDisallowedAuditEntry
  | IXGitHubRepoConfigLockAnonymousGitAccessAuditEntry
  | IXGitHubRepoConfigUnlockAnonymousGitAccessAuditEntry
  | IXGitHubRepoCreateAuditEntry
  | IXGitHubRepoDestroyAuditEntry
  | IXGitHubRepoRemoveMemberAuditEntry
  | IXGitHubRepoRemoveTopicAuditEntry
  | IXGitHubRepositoryVisibilityChangeDisableAuditEntry
  | IXGitHubRepositoryVisibilityChangeEnableAuditEntry
  | IXGitHubTeamAddMemberAuditEntry
  | IXGitHubTeamAddRepositoryAuditEntry
  | IXGitHubTeamChangeParentTeamAuditEntry
  | IXGitHubTeamRemoveMemberAuditEntry
  | IXGitHubTeamRemoveRepositoryAuditEntry;

/**
 * The connection type for OrganizationAuditEntry.
 */
export interface IXGitHubOrganizationAuditEntryConnection {
  __typename: '_xGitHubOrganizationAuditEntryConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubOrganizationAuditEntryEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<_xGitHubOrganizationAuditEntry | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * Metadata for an audit entry with action org.*
 */
export type _xGitHubOrganizationAuditEntryData =
  | IXGitHubMembersCanDeleteReposClearAuditEntry
  | IXGitHubMembersCanDeleteReposDisableAuditEntry
  | IXGitHubMembersCanDeleteReposEnableAuditEntry
  | IXGitHubOauthApplicationCreateAuditEntry
  | IXGitHubOrgAddBillingManagerAuditEntry
  | IXGitHubOrgAddMemberAuditEntry
  | IXGitHubOrgBlockUserAuditEntry
  | IXGitHubOrgConfigDisableCollaboratorsOnlyAuditEntry
  | IXGitHubOrgConfigEnableCollaboratorsOnlyAuditEntry
  | IXGitHubOrgCreateAuditEntry
  | IXGitHubOrgDisableOauthAppRestrictionsAuditEntry
  | IXGitHubOrgDisableSamlAuditEntry
  | IXGitHubOrgDisableTwoFactorRequirementAuditEntry
  | IXGitHubOrgEnableOauthAppRestrictionsAuditEntry
  | IXGitHubOrgEnableSamlAuditEntry
  | IXGitHubOrgEnableTwoFactorRequirementAuditEntry
  | IXGitHubOrgInviteMemberAuditEntry
  | IXGitHubOrgInviteToBusinessAuditEntry
  | IXGitHubOrgOauthAppAccessApprovedAuditEntry
  | IXGitHubOrgOauthAppAccessDeniedAuditEntry
  | IXGitHubOrgOauthAppAccessRequestedAuditEntry
  | IXGitHubOrgRemoveBillingManagerAuditEntry
  | IXGitHubOrgRemoveMemberAuditEntry
  | IXGitHubOrgRemoveOutsideCollaboratorAuditEntry
  | IXGitHubOrgRestoreMemberAuditEntry
  | IXGitHubOrgRestoreMemberMembershipOrganizationAuditEntryData
  | IXGitHubOrgUnblockUserAuditEntry
  | IXGitHubOrgUpdateDefaultRepositoryPermissionAuditEntry
  | IXGitHubOrgUpdateMemberAuditEntry
  | IXGitHubOrgUpdateMemberRepositoryCreationPermissionAuditEntry
  | IXGitHubOrgUpdateMemberRepositoryInvitationPermissionAuditEntry
  | IXGitHubPrivateRepositoryForkingDisableAuditEntry
  | IXGitHubPrivateRepositoryForkingEnableAuditEntry
  | IXGitHubRepoAccessAuditEntry
  | IXGitHubRepoAddMemberAuditEntry
  | IXGitHubRepoAddTopicAuditEntry
  | IXGitHubRepoArchivedAuditEntry
  | IXGitHubRepoChangeMergeSettingAuditEntry
  | IXGitHubRepoConfigDisableAnonymousGitAccessAuditEntry
  | IXGitHubRepoConfigDisableCollaboratorsOnlyAuditEntry
  | IXGitHubRepoConfigDisableContributorsOnlyAuditEntry
  | IXGitHubRepoConfigDisableSockpuppetDisallowedAuditEntry
  | IXGitHubRepoConfigEnableAnonymousGitAccessAuditEntry
  | IXGitHubRepoConfigEnableCollaboratorsOnlyAuditEntry
  | IXGitHubRepoConfigEnableContributorsOnlyAuditEntry
  | IXGitHubRepoConfigEnableSockpuppetDisallowedAuditEntry
  | IXGitHubRepoConfigLockAnonymousGitAccessAuditEntry
  | IXGitHubRepoConfigUnlockAnonymousGitAccessAuditEntry
  | IXGitHubRepoCreateAuditEntry
  | IXGitHubRepoDestroyAuditEntry
  | IXGitHubRepoRemoveMemberAuditEntry
  | IXGitHubRepoRemoveTopicAuditEntry
  | IXGitHubRepositoryVisibilityChangeDisableAuditEntry
  | IXGitHubRepositoryVisibilityChangeEnableAuditEntry
  | IXGitHubTeamAddMemberAuditEntry
  | IXGitHubTeamAddRepositoryAuditEntry
  | IXGitHubTeamChangeParentTeamAuditEntry
  | IXGitHubTeamRemoveMemberAuditEntry
  | IXGitHubTeamRemoveRepositoryAuditEntry;

/**
 * Metadata for an audit entry with action org.*
 */
export interface IXGitHubOrganizationAuditEntryData {
  __typename: '_xGitHubOrganizationAuditEntryData';

  /**
   * The Organization associated with the Audit Entry.
   */
  organization: IXGitHubOrganization | null;

  /**
   * The name of the Organization.
   */
  organizationName: string | null;

  /**
   * The HTTP path for the organization
   */
  organizationResourcePath: any | null;

  /**
   * The HTTP URL for the organization
   */
  organizationUrl: any | null;
}

/**
 * An edge in a connection.
 */
export interface IXGitHubOrganizationAuditEntryEdge {
  __typename: '_xGitHubOrganizationAuditEntryEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: _xGitHubOrganizationAuditEntry | null;
}

/**
 * The connection type for Organization.
 */
export interface IXGitHubOrganizationConnection {
  __typename: '_xGitHubOrganizationConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubOrganizationEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitHubOrganization | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface IXGitHubOrganizationEdge {
  __typename: '_xGitHubOrganizationEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitHubOrganization | null;
}

/**
 * An Identity Provider configured to provision SAML and SCIM identities for Organizations
 */
export interface IXGitHubOrganizationIdentityProvider {
  __typename: '_xGitHubOrganizationIdentityProvider';

  /**
   * The digest algorithm used to sign SAML requests for the Identity Provider.
   */
  digestMethod: any | null;

  /**
   * External Identities provisioned by this Identity Provider
   */
  externalIdentities: IXGitHubExternalIdentityConnection;
  id: string;

  /**
   * The x509 certificate used by the Identity Provider to sign assertions and responses.
   */
  idpCertificate: any | null;

  /**
   * The Issuer Entity ID for the SAML Identity Provider
   */
  issuer: string | null;

  /**
   * Organization this Identity Provider belongs to
   */
  organization: IXGitHubOrganization | null;

  /**
   * The signature algorithm used to sign SAML requests for the Identity Provider.
   */
  signatureMethod: any | null;

  /**
   * The URL endpoint for the Identity Provider's SAML SSO.
   */
  ssoUrl: any | null;
}

export interface IExternalIdentitiesOnXGitHubOrganizationIdentityProviderArguments {
  /**
   * Filter to external identities with valid org membership only
   */
  membersOnly?: boolean | null;

  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

/**
 * An Invitation for a user to an organization.
 */
export interface IXGitHubOrganizationInvitation {
  __typename: '_xGitHubOrganizationInvitation';

  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: any;

  /**
   * The email address of the user invited to the organization.
   */
  email: string | null;
  id: string;

  /**
   * The type of invitation that was sent (e.g. email, user).
   */
  invitationType: XGitHubOrganizationInvitationType;

  /**
   * The user who was invited to the organization.
   */
  invitee: IXGitHubUser | null;

  /**
   * The user who created the invitation.
   */
  inviter: IXGitHubUser;

  /**
   * The organization the invite is for
   */
  organization: IXGitHubOrganization;

  /**
   * The user's pending role in the organization (e.g. member, owner).
   */
  role: XGitHubOrganizationInvitationRole;
}

/**
 * The connection type for OrganizationInvitation.
 */
export interface IXGitHubOrganizationInvitationConnection {
  __typename: '_xGitHubOrganizationInvitationConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubOrganizationInvitationEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitHubOrganizationInvitation | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface IXGitHubOrganizationInvitationEdge {
  __typename: '_xGitHubOrganizationInvitationEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitHubOrganizationInvitation | null;
}

/**
 * The possible organization invitation roles.
 */
export const enum XGitHubOrganizationInvitationRole {
  /**
   * The user is invited to be a direct member of the organization.
   */
  DIRECT_MEMBER = 'DIRECT_MEMBER',

  /**
   * The user is invited to be an admin of the organization.
   */
  ADMIN = 'ADMIN',

  /**
   * The user is invited to be a billing manager of the organization.
   */
  BILLING_MANAGER = 'BILLING_MANAGER',

  /**
   * The user's previous role will be reinstated.
   */
  REINSTATE = 'REINSTATE',
}

/**
 * The possible organization invitation types.
 */
export const enum XGitHubOrganizationInvitationType {
  /**
   * The invitation was to an existing user.
   */
  USER = 'USER',

  /**
   * The invitation was to an email address.
   */
  EMAIL = 'EMAIL',
}

/**
 * The connection type for User.
 */
export interface IXGitHubOrganizationMemberConnection {
  __typename: '_xGitHubOrganizationMemberConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubOrganizationMemberEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitHubUser | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * Represents a user within an organization.
 */
export interface IXGitHubOrganizationMemberEdge {
  __typename: '_xGitHubOrganizationMemberEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * Whether the organization member has two factor enabled or not. Returns null if information is not available to viewer.
   */
  hasTwoFactorEnabled: boolean | null;

  /**
   * The item at the end of the edge.
   */
  node: IXGitHubUser | null;

  /**
   * The role this user has in the organization.
   */
  role: XGitHubOrganizationMemberRole | null;
}

/**
 * The possible roles within an organization for its members.
 */
export const enum XGitHubOrganizationMemberRole {
  /**
   * The user is a member of the organization.
   */
  MEMBER = 'MEMBER',

  /**
   * The user is an administrator of the organization.
   */
  ADMIN = 'ADMIN',
}

/**
 * The possible values for the members can create repositories setting on an organization.
 */
export const enum XGitHubOrganizationMembersCanCreateRepositoriesSettingValue {
  /**
   * Members will be able to create public and private repositories.
   */
  ALL = 'ALL',

  /**
   * Members will be able to create only private repositories.
   */
  PRIVATE = 'PRIVATE',

  /**
   * Members will be able to create only internal repositories.
   */
  INTERNAL = 'INTERNAL',

  /**
   * Members will not be able to create public or private repositories.
   */
  DISABLED = 'DISABLED',
}

/**
 * Ordering options for organization connections.
 */
export interface IXGitHubOrganizationOrder {
  /**
   * The field to order organizations by.
   */
  field: XGitHubOrganizationOrderField;

  /**
   * The ordering direction.
   */
  direction: XGitHubOrderDirection;
}

/**
 * Properties by which organization connections can be ordered.
 */
export const enum XGitHubOrganizationOrderField {
  /**
   * Order organizations by creation time
   */
  CREATED_AT = 'CREATED_AT',

  /**
   * Order organizations by login
   */
  LOGIN = 'LOGIN',
}

/**
 * An organization teams hovercard context
 */
export interface IXGitHubOrganizationTeamsHovercardContext {
  __typename: '_xGitHubOrganizationTeamsHovercardContext';

  /**
   * A string describing this context
   */
  message: string;

  /**
   * An octicon to accompany this context
   */
  octicon: string;

  /**
   * Teams in this organization the user is a member of that are relevant
   */
  relevantTeams: IXGitHubTeamConnection;

  /**
   * The path for the full team list for this user
   */
  teamsResourcePath: any;

  /**
   * The URL for the full team list for this user
   */
  teamsUrl: any;

  /**
   * The total number of teams the user is on in the organization
   */
  totalTeamCount: number;
}

export interface IRelevantTeamsOnXGitHubOrganizationTeamsHovercardContextArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

/**
 * An organization list hovercard context
 */
export interface IXGitHubOrganizationsHovercardContext {
  __typename: '_xGitHubOrganizationsHovercardContext';

  /**
   * A string describing this context
   */
  message: string;

  /**
   * An octicon to accompany this context
   */
  octicon: string;

  /**
   * Organizations this user is a member of that are relevant
   */
  relevantOrganizations: IXGitHubOrganizationConnection;

  /**
   * The total number of organizations this user is in
   */
  totalOrganizationCount: number;
}

export interface IRelevantOrganizationsOnXGitHubOrganizationsHovercardContextArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

/**
 * Information for an uploaded package.
 */
export interface IXGitHubPackage {
  __typename: '_xGitHubPackage';
  id: string;

  /**
   * Find the latest version for the package.
   */
  latestVersion: IXGitHubPackageVersion | null;

  /**
   * Identifies the name of the package.
   */
  name: string;

  /**
   * Identifies the type of the package.
   */
  packageType: XGitHubPackageType;

  /**
   * The repository this package belongs to.
   */
  repository: IXGitHubRepository | null;

  /**
   * Statistics about package activity.
   */
  statistics: IXGitHubPackageStatistics | null;

  /**
   * Find package version by version string.
   */
  version: IXGitHubPackageVersion | null;

  /**
   * list of versions for this package
   */
  versions: IXGitHubPackageVersionConnection;
}

export interface IVersionOnXGitHubPackageArguments {
  /**
   * The package version.
   */
  version: string;
}

export interface IVersionsOnXGitHubPackageArguments {
  /**
   * Ordering of the returned packages.
   * @default {"field":"CREATED_AT","direction":"DESC"}
   */
  orderBy?: IXGitHubPackageVersionOrder | null;

  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

/**
 * The connection type for Package.
 */
export interface IXGitHubPackageConnection {
  __typename: '_xGitHubPackageConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubPackageEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitHubPackage | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface IXGitHubPackageEdge {
  __typename: '_xGitHubPackageEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitHubPackage | null;
}

/**
 * A file in a package version.
 */
export interface IXGitHubPackageFile {
  __typename: '_xGitHubPackageFile';
  id: string;

  /**
   * MD5 hash of the file.
   */
  md5: string | null;

  /**
   * Name of the file.
   */
  name: string;

  /**
   * The package version this file belongs to.
   */
  packageVersion: IXGitHubPackageVersion | null;

  /**
   * SHA1 hash of the file.
   */
  sha1: string | null;

  /**
   * SHA256 hash of the file.
   */
  sha256: string | null;

  /**
   * Size of the file in bytes.
   */
  size: number | null;

  /**
   * Identifies the date and time when the object was last updated.
   */
  updatedAt: any;

  /**
   * URL to download the asset.
   */
  url: any | null;
}

/**
 * The connection type for PackageFile.
 */
export interface IXGitHubPackageFileConnection {
  __typename: '_xGitHubPackageFileConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubPackageFileEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitHubPackageFile | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface IXGitHubPackageFileEdge {
  __typename: '_xGitHubPackageFileEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitHubPackageFile | null;
}

/**
 * Ways in which lists of package files can be ordered upon return.
 */
export interface IXGitHubPackageFileOrder {
  /**
   * The field in which to order package files by.
   */
  field?: XGitHubPackageFileOrderField | null;

  /**
   * The direction in which to order package files by the specified field.
   */
  direction?: XGitHubOrderDirection | null;
}

/**
 * Properties by which package file connections can be ordered.
 */
export const enum XGitHubPackageFileOrderField {
  /**
   * Order package files by creation time
   */
  CREATED_AT = 'CREATED_AT',
}

/**
 * Ways in which lists of packages can be ordered upon return.
 */
export interface IXGitHubPackageOrder {
  /**
   * The field in which to order packages by.
   */
  field?: XGitHubPackageOrderField | null;

  /**
   * The direction in which to order packages by the specified field.
   */
  direction?: XGitHubOrderDirection | null;
}

/**
 * Properties by which package connections can be ordered.
 */
export const enum XGitHubPackageOrderField {
  /**
   * Order packages by creation time
   */
  CREATED_AT = 'CREATED_AT',
}

/**
 * Represents an owner of a package.
 */
export type _xGitHubPackageOwner =
  | IXGitHubOrganization
  | IXGitHubRepository
  | IXGitHubUser;

/**
 * Represents an owner of a package.
 */
export interface IXGitHubPackageOwner {
  __typename: '_xGitHubPackageOwner';
  id: string;

  /**
   * A list of packages under the owner.
   */
  packages: IXGitHubPackageConnection;
}

export interface IPackagesOnXGitHubPackageOwnerArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Find packages by their names.
   */
  names?: Array<string | null> | null;

  /**
   * Find packages in a repository by ID.
   */
  repositoryId?: string | null;

  /**
   * Filter registry package by type.
   */
  packageType?: XGitHubPackageType | null;

  /**
   * Ordering of the returned packages.
   * @default {"field":"CREATED_AT","direction":"DESC"}
   */
  orderBy?: IXGitHubPackageOrder | null;
}

/**
 * Represents a object that contains package activity statistics such as downloads.
 */
export interface IXGitHubPackageStatistics {
  __typename: '_xGitHubPackageStatistics';

  /**
   * Number of times the package was downloaded since it was created.
   */
  downloadsTotalCount: number;
}

/**
 * A version tag contains the mapping between a tag name and a version.
 */
export interface IXGitHubPackageTag {
  __typename: '_xGitHubPackageTag';
  id: string;

  /**
   * Identifies the tag name of the version.
   */
  name: string;

  /**
   * Version that the tag is associated with.
   */
  version: IXGitHubPackageVersion | null;
}

/**
 * The possible types of a package.
 */
export const enum XGitHubPackageType {
  /**
   * An npm package.
   */
  NPM = 'NPM',

  /**
   * A rubygems package.
   */
  RUBYGEMS = 'RUBYGEMS',

  /**
   * A maven package.
   */
  MAVEN = 'MAVEN',

  /**
   * A docker image.
   * @deprecated "DOCKER will be removed from this enum as this type will be migrated to only be used by the Packages REST API. Removal on 2021-06-21 UTC."
   */
  DOCKER = 'DOCKER',

  /**
   * A debian package.
   */
  DEBIAN = 'DEBIAN',

  /**
   * A nuget package.
   */
  NUGET = 'NUGET',

  /**
   * A python package.
   */
  PYPI = 'PYPI',
}

/**
 * Information about a specific package version.
 */
export interface IXGitHubPackageVersion {
  __typename: '_xGitHubPackageVersion';

  /**
   * List of files associated with this package version
   */
  files: IXGitHubPackageFileConnection;
  id: string;

  /**
   * The package associated with this version.
   */
  package: IXGitHubPackage | null;

  /**
   * The platform this version was built for.
   */
  platform: string | null;

  /**
   * Whether or not this version is a pre-release.
   */
  preRelease: boolean;

  /**
   * The README of this package version.
   */
  readme: string | null;

  /**
   * The release associated with this package version.
   */
  release: IXGitHubRelease | null;

  /**
   * Statistics about package activity.
   */
  statistics: IXGitHubPackageVersionStatistics | null;

  /**
   * The package version summary.
   */
  summary: string | null;

  /**
   * The version string.
   */
  version: string;
}

export interface IFilesOnXGitHubPackageVersionArguments {
  /**
   * Ordering of the returned package files.
   * @default {"field":"CREATED_AT","direction":"ASC"}
   */
  orderBy?: IXGitHubPackageFileOrder | null;

  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

/**
 * The connection type for PackageVersion.
 */
export interface IXGitHubPackageVersionConnection {
  __typename: '_xGitHubPackageVersionConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubPackageVersionEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitHubPackageVersion | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface IXGitHubPackageVersionEdge {
  __typename: '_xGitHubPackageVersionEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitHubPackageVersion | null;
}

/**
 * Ways in which lists of package versions can be ordered upon return.
 */
export interface IXGitHubPackageVersionOrder {
  /**
   * The field in which to order package versions by.
   */
  field?: XGitHubPackageVersionOrderField | null;

  /**
   * The direction in which to order package versions by the specified field.
   */
  direction?: XGitHubOrderDirection | null;
}

/**
 * Properties by which package version connections can be ordered.
 */
export const enum XGitHubPackageVersionOrderField {
  /**
   * Order package versions by creation time
   */
  CREATED_AT = 'CREATED_AT',
}

/**
 * Represents a object that contains package version activity statistics such as downloads.
 */
export interface IXGitHubPackageVersionStatistics {
  __typename: '_xGitHubPackageVersionStatistics';

  /**
   * Number of times the package was downloaded since it was created.
   */
  downloadsTotalCount: number;
}

/**
 * Information about pagination in a connection.
 */
export interface IXGitHubPageInfo {
  __typename: '_xGitHubPageInfo';

  /**
   * When paginating forwards, the cursor to continue.
   */
  endCursor: string | null;

  /**
   * When paginating forwards, are there more items?
   */
  hasNextPage: boolean;

  /**
   * When paginating backwards, are there more items?
   */
  hasPreviousPage: boolean;

  /**
   * When paginating backwards, the cursor to continue.
   */
  startCursor: string | null;
}

/**
 * Types that can grant permissions on a repository to a user
 */
export type _xGitHubPermissionGranter =
  | IXGitHubOrganization
  | IXGitHubRepository
  | IXGitHubTeam;

/**
 * A level of permission and source for a user's access to a repository.
 */
export interface IXGitHubPermissionSource {
  __typename: '_xGitHubPermissionSource';

  /**
   * The organization the repository belongs to.
   */
  organization: IXGitHubOrganization;

  /**
   * The level of access this source has granted to the user.
   */
  permission: XGitHubDefaultRepositoryPermissionField;

  /**
   * The source of this permission.
   */
  source: _xGitHubPermissionGranter;
}

/**
 * Autogenerated input type of PinIssue
 */
export interface IXGitHubPinIssueInput {
  /**
   * The ID of the issue to be pinned
   */
  issueId: string;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of PinIssue
 */
export interface IXGitHubPinIssuePayload {
  __typename: '_xGitHubPinIssuePayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The issue that was pinned
   */
  issue: IXGitHubIssue | null;
}

/**
 * Types that can be pinned to a profile page.
 */
export type _xGitHubPinnableItem = IXGitHubGist | IXGitHubRepository;

/**
 * The connection type for PinnableItem.
 */
export interface IXGitHubPinnableItemConnection {
  __typename: '_xGitHubPinnableItemConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubPinnableItemEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<_xGitHubPinnableItem | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface IXGitHubPinnableItemEdge {
  __typename: '_xGitHubPinnableItemEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: _xGitHubPinnableItem | null;
}

/**
 * Represents items that can be pinned to a profile page or dashboard.
 */
export const enum XGitHubPinnableItemType {
  /**
   * A repository.
   */
  REPOSITORY = 'REPOSITORY',

  /**
   * A gist.
   */
  GIST = 'GIST',

  /**
   * An issue.
   */
  ISSUE = 'ISSUE',

  /**
   * A project.
   */
  PROJECT = 'PROJECT',

  /**
   * A pull request.
   */
  PULL_REQUEST = 'PULL_REQUEST',

  /**
   * A user.
   */
  USER = 'USER',

  /**
   * An organization.
   */
  ORGANIZATION = 'ORGANIZATION',

  /**
   * A team.
   */
  TEAM = 'TEAM',
}

/**
 * A Pinned Discussion is a discussion pinned to a repository's index page.
 */
export interface IXGitHubPinnedDiscussion {
  __typename: '_xGitHubPinnedDiscussion';

  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: any;

  /**
   * Identifies the primary key from the database.
   */
  databaseId: number | null;

  /**
   * The discussion that was pinned.
   */
  discussion: IXGitHubDiscussion;

  /**
   * Color stops of the chosen gradient
   */
  gradientStopColors: Array<string>;
  id: string;

  /**
   * Background texture pattern
   */
  pattern: XGitHubPinnedDiscussionPattern;

  /**
   * The actor that pinned this discussion.
   */
  pinnedBy: _xGitHubActor;

  /**
   * Preconfigured background gradient option
   */
  preconfiguredGradient: XGitHubPinnedDiscussionGradient | null;

  /**
   * The repository associated with this node.
   */
  repository: IXGitHubRepository;

  /**
   * Identifies the date and time when the object was last updated.
   */
  updatedAt: any;
}

/**
 * The connection type for PinnedDiscussion.
 */
export interface IXGitHubPinnedDiscussionConnection {
  __typename: '_xGitHubPinnedDiscussionConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubPinnedDiscussionEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitHubPinnedDiscussion | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface IXGitHubPinnedDiscussionEdge {
  __typename: '_xGitHubPinnedDiscussionEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitHubPinnedDiscussion | null;
}

/**
 * Preconfigured gradients that may be used to style discussions pinned within a repository.
 */
export const enum XGitHubPinnedDiscussionGradient {
  /**
   * A gradient of red to orange
   */
  RED_ORANGE = 'RED_ORANGE',

  /**
   * A gradient of blue to mint
   */
  BLUE_MINT = 'BLUE_MINT',

  /**
   * A gradient of blue to purple
   */
  BLUE_PURPLE = 'BLUE_PURPLE',

  /**
   * A gradient of pink to blue
   */
  PINK_BLUE = 'PINK_BLUE',

  /**
   * A gradient of purple to coral
   */
  PURPLE_CORAL = 'PURPLE_CORAL',
}

/**
 * Preconfigured background patterns that may be used to style discussions pinned within a repository.
 */
export const enum XGitHubPinnedDiscussionPattern {
  /**
   * A solid dot pattern
   */
  DOT_FILL = 'DOT_FILL',

  /**
   * A plus sign pattern
   */
  PLUS = 'PLUS',

  /**
   * A lightning bolt pattern
   */
  ZAP = 'ZAP',

  /**
   * An upward-facing chevron pattern
   */
  CHEVRON_UP = 'CHEVRON_UP',

  /**
   * A hollow dot pattern
   */
  DOT = 'DOT',

  /**
   * A heart pattern
   */
  HEART_FILL = 'HEART_FILL',
}

/**
 * Represents a 'pinned' event on a given issue or pull request.
 */
export interface IXGitHubPinnedEvent {
  __typename: '_xGitHubPinnedEvent';

  /**
   * Identifies the actor who performed the event.
   */
  actor: _xGitHubActor | null;

  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: any;
  id: string;

  /**
   * Identifies the issue associated with the event.
   */
  issue: IXGitHubIssue;
}

/**
 * A Pinned Issue is a issue pinned to a repository's index page.
 */
export interface IXGitHubPinnedIssue {
  __typename: '_xGitHubPinnedIssue';

  /**
   * Identifies the primary key from the database.
   */
  databaseId: number | null;
  id: string;

  /**
   * The issue that was pinned.
   */
  issue: IXGitHubIssue;

  /**
   * The actor that pinned this issue.
   */
  pinnedBy: _xGitHubActor;

  /**
   * The repository that this issue was pinned to.
   */
  repository: IXGitHubRepository;
}

/**
 * The connection type for PinnedIssue.
 */
export interface IXGitHubPinnedIssueConnection {
  __typename: '_xGitHubPinnedIssueConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubPinnedIssueEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitHubPinnedIssue | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface IXGitHubPinnedIssueEdge {
  __typename: '_xGitHubPinnedIssueEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitHubPinnedIssue | null;
}

/**
 * Audit log entry for a private_repository_forking.disable event.
 */
export interface IXGitHubPrivateRepositoryForkingDisableAuditEntry {
  __typename: '_xGitHubPrivateRepositoryForkingDisableAuditEntry';

  /**
   * The action name
   */
  action: string;

  /**
   * The user who initiated the action
   */
  actor: _xGitHubAuditEntryActor | null;

  /**
   * The IP address of the actor
   */
  actorIp: string | null;

  /**
   * A readable representation of the actor's location
   */
  actorLocation: IXGitHubActorLocation | null;

  /**
   * The username of the user who initiated the action
   */
  actorLogin: string | null;

  /**
   * The HTTP path for the actor.
   */
  actorResourcePath: any | null;

  /**
   * The HTTP URL for the actor.
   */
  actorUrl: any | null;

  /**
   * The time the action was initiated
   */
  createdAt: any;

  /**
   * The HTTP path for this enterprise.
   */
  enterpriseResourcePath: any | null;

  /**
   * The slug of the enterprise.
   */
  enterpriseSlug: string | null;

  /**
   * The HTTP URL for this enterprise.
   */
  enterpriseUrl: any | null;
  id: string;

  /**
   * The corresponding operation type for the action
   */
  operationType: XGitHubOperationType | null;

  /**
   * The Organization associated with the Audit Entry.
   */
  organization: IXGitHubOrganization | null;

  /**
   * The name of the Organization.
   */
  organizationName: string | null;

  /**
   * The HTTP path for the organization
   */
  organizationResourcePath: any | null;

  /**
   * The HTTP URL for the organization
   */
  organizationUrl: any | null;

  /**
   * The repository associated with the action
   */
  repository: IXGitHubRepository | null;

  /**
   * The name of the repository
   */
  repositoryName: string | null;

  /**
   * The HTTP path for the repository
   */
  repositoryResourcePath: any | null;

  /**
   * The HTTP URL for the repository
   */
  repositoryUrl: any | null;

  /**
   * The user affected by the action
   */
  user: IXGitHubUser | null;

  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin: string | null;

  /**
   * The HTTP path for the user.
   */
  userResourcePath: any | null;

  /**
   * The HTTP URL for the user.
   */
  userUrl: any | null;
}

/**
 * Audit log entry for a private_repository_forking.enable event.
 */
export interface IXGitHubPrivateRepositoryForkingEnableAuditEntry {
  __typename: '_xGitHubPrivateRepositoryForkingEnableAuditEntry';

  /**
   * The action name
   */
  action: string;

  /**
   * The user who initiated the action
   */
  actor: _xGitHubAuditEntryActor | null;

  /**
   * The IP address of the actor
   */
  actorIp: string | null;

  /**
   * A readable representation of the actor's location
   */
  actorLocation: IXGitHubActorLocation | null;

  /**
   * The username of the user who initiated the action
   */
  actorLogin: string | null;

  /**
   * The HTTP path for the actor.
   */
  actorResourcePath: any | null;

  /**
   * The HTTP URL for the actor.
   */
  actorUrl: any | null;

  /**
   * The time the action was initiated
   */
  createdAt: any;

  /**
   * The HTTP path for this enterprise.
   */
  enterpriseResourcePath: any | null;

  /**
   * The slug of the enterprise.
   */
  enterpriseSlug: string | null;

  /**
   * The HTTP URL for this enterprise.
   */
  enterpriseUrl: any | null;
  id: string;

  /**
   * The corresponding operation type for the action
   */
  operationType: XGitHubOperationType | null;

  /**
   * The Organization associated with the Audit Entry.
   */
  organization: IXGitHubOrganization | null;

  /**
   * The name of the Organization.
   */
  organizationName: string | null;

  /**
   * The HTTP path for the organization
   */
  organizationResourcePath: any | null;

  /**
   * The HTTP URL for the organization
   */
  organizationUrl: any | null;

  /**
   * The repository associated with the action
   */
  repository: IXGitHubRepository | null;

  /**
   * The name of the repository
   */
  repositoryName: string | null;

  /**
   * The HTTP path for the repository
   */
  repositoryResourcePath: any | null;

  /**
   * The HTTP URL for the repository
   */
  repositoryUrl: any | null;

  /**
   * The user affected by the action
   */
  user: IXGitHubUser | null;

  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin: string | null;

  /**
   * The HTTP path for the user.
   */
  userResourcePath: any | null;

  /**
   * The HTTP URL for the user.
   */
  userUrl: any | null;
}

/**
 * A curatable list of repositories relating to a repository owner, which defaults to showing the most popular repositories they own.
 */
export interface IXGitHubProfileItemShowcase {
  __typename: '_xGitHubProfileItemShowcase';

  /**
   * Whether or not the owner has pinned any repositories or gists.
   */
  hasPinnedItems: boolean;

  /**
   * The repositories and gists in the showcase. If the profile owner has any pinned items, those will be returned. Otherwise, the profile owner's popular repositories will be returned.
   */
  items: IXGitHubPinnableItemConnection;
}

export interface IItemsOnXGitHubProfileItemShowcaseArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

/**
 * Represents any entity on GitHub that has a profile page.
 */
export type _xGitHubProfileOwner = IXGitHubOrganization | IXGitHubUser;

/**
 * Represents any entity on GitHub that has a profile page.
 */
export interface IXGitHubProfileOwner {
  __typename: '_xGitHubProfileOwner';

  /**
   * Determine if this repository owner has any items that can be pinned to their profile.
   */
  anyPinnableItems: boolean;

  /**
   * The public profile email.
   */
  email: string | null;
  id: string;

  /**
   * Showcases a selection of repositories and gists that the profile owner has either curated or that have been selected automatically based on popularity.
   */
  itemShowcase: IXGitHubProfileItemShowcase;

  /**
   * The public profile location.
   */
  location: string | null;

  /**
   * The username used to login.
   */
  login: string;

  /**
   * The public profile name.
   */
  name: string | null;

  /**
   * A list of repositories and gists this profile owner can pin to their profile.
   */
  pinnableItems: IXGitHubPinnableItemConnection;

  /**
   * A list of repositories and gists this profile owner has pinned to their profile
   */
  pinnedItems: IXGitHubPinnableItemConnection;

  /**
   * Returns how many more items this profile owner can pin to their profile.
   */
  pinnedItemsRemaining: number;

  /**
   * Can the viewer pin repositories and gists to the profile?
   */
  viewerCanChangePinnedItems: boolean;

  /**
   * The public profile website URL.
   */
  websiteUrl: any | null;
}

export interface IAnyPinnableItemsOnXGitHubProfileOwnerArguments {
  /**
   * Filter to only a particular kind of pinnable item.
   */
  type?: XGitHubPinnableItemType | null;
}

export interface IPinnableItemsOnXGitHubProfileOwnerArguments {
  /**
   * Filter the types of pinnable items that are returned.
   */
  types?: Array<XGitHubPinnableItemType> | null;

  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IPinnedItemsOnXGitHubProfileOwnerArguments {
  /**
   * Filter the types of pinned items that are returned.
   */
  types?: Array<XGitHubPinnableItemType> | null;

  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

/**
 * Projects manage issues, pull requests and notes within a project owner.
 */
export interface IXGitHubProject {
  __typename: '_xGitHubProject';

  /**
   * The project's description body.
   */
  body: string | null;

  /**
   * The projects description body rendered to HTML.
   */
  bodyHTML: any;

  /**
   * `true` if the object is closed (definition of closed may depend on type)
   */
  closed: boolean;

  /**
   * Identifies the date and time when the object was closed.
   */
  closedAt: any | null;

  /**
   * List of columns in the project
   */
  columns: IXGitHubProjectColumnConnection;

  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: any;

  /**
   * The actor who originally created the project.
   */
  creator: _xGitHubActor | null;

  /**
   * Identifies the primary key from the database.
   */
  databaseId: number | null;
  id: string;

  /**
   * The project's name.
   */
  name: string;

  /**
   * The project's number.
   */
  number: number;

  /**
   * The project's owner. Currently limited to repositories, organizations, and users.
   */
  owner: _xGitHubProjectOwner;

  /**
   * List of pending cards in this project
   */
  pendingCards: IXGitHubProjectCardConnection;

  /**
   * Project progress details.
   */
  progress: IXGitHubProjectProgress;

  /**
   * The HTTP path for this project
   */
  resourcePath: any;

  /**
   * Whether the project is open or closed.
   */
  state: XGitHubProjectState;

  /**
   * Identifies the date and time when the object was last updated.
   */
  updatedAt: any;

  /**
   * The HTTP URL for this project
   */
  url: any;

  /**
   * Check if the current viewer can update this object.
   */
  viewerCanUpdate: boolean;
}

export interface IColumnsOnXGitHubProjectArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IPendingCardsOnXGitHubProjectArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * A list of archived states to filter the cards by
   * @default ["ARCHIVED","NOT_ARCHIVED"]
   */
  archivedStates?: Array<XGitHubProjectCardArchivedState | null> | null;
}

/**
 * A card in a project.
 */
export interface IXGitHubProjectCard {
  __typename: '_xGitHubProjectCard';

  /**
   * The project column this card is associated under. A card may only belong to one
   * project column at a time. The column field will be null if the card is created
   * in a pending state and has yet to be associated with a column. Once cards are
   * associated with a column, they will not become pending in the future.
   */
  column: IXGitHubProjectColumn | null;

  /**
   * The card content item
   */
  content: _xGitHubProjectCardItem | null;

  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: any;

  /**
   * The actor who created this card
   */
  creator: _xGitHubActor | null;

  /**
   * Identifies the primary key from the database.
   */
  databaseId: number | null;
  id: string;

  /**
   * Whether the card is archived
   */
  isArchived: boolean;

  /**
   * The card note
   */
  note: string | null;

  /**
   * The project that contains this card.
   */
  project: IXGitHubProject;

  /**
   * The HTTP path for this card
   */
  resourcePath: any;

  /**
   * The state of ProjectCard
   */
  state: XGitHubProjectCardState | null;

  /**
   * Identifies the date and time when the object was last updated.
   */
  updatedAt: any;

  /**
   * The HTTP URL for this card
   */
  url: any;
}

/**
 * The possible archived states of a project card.
 */
export const enum XGitHubProjectCardArchivedState {
  /**
   * A project card that is archived
   */
  ARCHIVED = 'ARCHIVED',

  /**
   * A project card that is not archived
   */
  NOT_ARCHIVED = 'NOT_ARCHIVED',
}

/**
 * The connection type for ProjectCard.
 */
export interface IXGitHubProjectCardConnection {
  __typename: '_xGitHubProjectCardConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubProjectCardEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitHubProjectCard | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface IXGitHubProjectCardEdge {
  __typename: '_xGitHubProjectCardEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitHubProjectCard | null;
}

/**
 * Types that can be inside Project Cards.
 */
export type _xGitHubProjectCardItem = IXGitHubIssue | IXGitHubPullRequest;

/**
 * Various content states of a ProjectCard
 */
export const enum XGitHubProjectCardState {
  /**
   * The card has content only.
   */
  CONTENT_ONLY = 'CONTENT_ONLY',

  /**
   * The card has a note only.
   */
  NOTE_ONLY = 'NOTE_ONLY',

  /**
   * The card is redacted.
   */
  REDACTED = 'REDACTED',
}

/**
 * A column inside a project.
 */
export interface IXGitHubProjectColumn {
  __typename: '_xGitHubProjectColumn';

  /**
   * List of cards in the column
   */
  cards: IXGitHubProjectCardConnection;

  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: any;

  /**
   * Identifies the primary key from the database.
   */
  databaseId: number | null;
  id: string;

  /**
   * The project column's name.
   */
  name: string;

  /**
   * The project that contains this column.
   */
  project: IXGitHubProject;

  /**
   * The semantic purpose of the column
   */
  purpose: XGitHubProjectColumnPurpose | null;

  /**
   * The HTTP path for this project column
   */
  resourcePath: any;

  /**
   * Identifies the date and time when the object was last updated.
   */
  updatedAt: any;

  /**
   * The HTTP URL for this project column
   */
  url: any;
}

export interface ICardsOnXGitHubProjectColumnArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * A list of archived states to filter the cards by
   * @default ["ARCHIVED","NOT_ARCHIVED"]
   */
  archivedStates?: Array<XGitHubProjectCardArchivedState | null> | null;
}

/**
 * The connection type for ProjectColumn.
 */
export interface IXGitHubProjectColumnConnection {
  __typename: '_xGitHubProjectColumnConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubProjectColumnEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitHubProjectColumn | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface IXGitHubProjectColumnEdge {
  __typename: '_xGitHubProjectColumnEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitHubProjectColumn | null;
}

/**
 * The semantic purpose of the column - todo, in progress, or done.
 */
export const enum XGitHubProjectColumnPurpose {
  /**
   * The column contains cards still to be worked on
   */
  TODO = 'TODO',

  /**
   * The column contains cards which are currently being worked on
   */
  IN_PROGRESS = 'IN_PROGRESS',

  /**
   * The column contains cards which are complete
   */
  DONE = 'DONE',
}

/**
 * A list of projects associated with the owner.
 */
export interface IXGitHubProjectConnection {
  __typename: '_xGitHubProjectConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubProjectEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitHubProject | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface IXGitHubProjectEdge {
  __typename: '_xGitHubProjectEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitHubProject | null;
}

/**
 * Ways in which lists of projects can be ordered upon return.
 */
export interface IXGitHubProjectOrder {
  /**
   * The field in which to order projects by.
   */
  field: XGitHubProjectOrderField;

  /**
   * The direction in which to order projects by the specified field.
   */
  direction: XGitHubOrderDirection;
}

/**
 * Properties by which project connections can be ordered.
 */
export const enum XGitHubProjectOrderField {
  /**
   * Order projects by creation time
   */
  CREATED_AT = 'CREATED_AT',

  /**
   * Order projects by update time
   */
  UPDATED_AT = 'UPDATED_AT',

  /**
   * Order projects by name
   */
  NAME = 'NAME',
}

/**
 * Represents an owner of a Project.
 */
export type _xGitHubProjectOwner =
  | IXGitHubOrganization
  | IXGitHubRepository
  | IXGitHubUser;

/**
 * Represents an owner of a Project.
 */
export interface IXGitHubProjectOwner {
  __typename: '_xGitHubProjectOwner';
  id: string;

  /**
   * Find project by number.
   */
  project: IXGitHubProject | null;

  /**
   * A list of projects under the owner.
   */
  projects: IXGitHubProjectConnection;

  /**
   * The HTTP path listing owners projects
   */
  projectsResourcePath: any;

  /**
   * The HTTP URL listing owners projects
   */
  projectsUrl: any;

  /**
   * Can the current viewer create new projects on this owner.
   */
  viewerCanCreateProjects: boolean;
}

export interface IProjectOnXGitHubProjectOwnerArguments {
  /**
   * The project number to find.
   */
  number: number;
}

export interface IProjectsOnXGitHubProjectOwnerArguments {
  /**
   * Ordering options for projects returned from the connection
   */
  orderBy?: IXGitHubProjectOrder | null;

  /**
   * Query to search projects by, currently only searching by name.
   */
  search?: string | null;

  /**
   * A list of states to filter the projects by.
   */
  states?: Array<XGitHubProjectState> | null;

  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

/**
 * Project progress stats.
 */
export interface IXGitHubProjectProgress {
  __typename: '_xGitHubProjectProgress';

  /**
   * The number of done cards.
   */
  doneCount: number;

  /**
   * The percentage of done cards.
   */
  donePercentage: number;

  /**
   * Whether progress tracking is enabled and cards with purpose exist for this project
   */
  enabled: boolean;

  /**
   * The number of in-progress cards.
   */
  inProgressCount: number;

  /**
   * The percentage of in-progress cards.
   */
  inProgressPercentage: number;

  /**
   * The number of to do cards.
   */
  todoCount: number;

  /**
   * The percentage of to do cards.
   */
  todoPercentage: number;
}

/**
 * State of the project; either 'open' or 'closed'
 */
export const enum XGitHubProjectState {
  /**
   * The project is open.
   */
  OPEN = 'OPEN',

  /**
   * The project is closed.
   */
  CLOSED = 'CLOSED',
}

/**
 * GitHub-provided templates for Projects
 */
export const enum XGitHubProjectTemplate {
  /**
   * Create a board with columns for To do, In progress and Done.
   */
  BASIC_KANBAN = 'BASIC_KANBAN',

  /**
   * Create a board with v2 triggers to automatically move cards across To do, In progress and Done columns.
   */
  AUTOMATED_KANBAN_V2 = 'AUTOMATED_KANBAN_V2',

  /**
   * Create a board with triggers to automatically move cards across columns with review automation.
   */
  AUTOMATED_REVIEWS_KANBAN = 'AUTOMATED_REVIEWS_KANBAN',

  /**
   * Create a board to triage and prioritize bugs with To do, priority, and Done columns.
   */
  BUG_TRIAGE = 'BUG_TRIAGE',
}

/**
 * A user's public key.
 */
export interface IXGitHubPublicKey {
  __typename: '_xGitHubPublicKey';

  /**
   * The last time this authorization was used to perform an action. Values will be null for keys not owned by the user.
   */
  accessedAt: any | null;

  /**
   * Identifies the date and time when the key was created. Keys created before March 5th, 2014 have inaccurate values. Values will be null for keys not owned by the user.
   */
  createdAt: any | null;

  /**
   * The fingerprint for this PublicKey.
   */
  fingerprint: string;
  id: string;

  /**
   * Whether this PublicKey is read-only or not. Values will be null for keys not owned by the user.
   */
  isReadOnly: boolean | null;

  /**
   * The public key string.
   */
  key: string;

  /**
   * Identifies the date and time when the key was updated. Keys created before March 5th, 2014 may have inaccurate values. Values will be null for keys not owned by the user.
   */
  updatedAt: any | null;
}

/**
 * The connection type for PublicKey.
 */
export interface IXGitHubPublicKeyConnection {
  __typename: '_xGitHubPublicKeyConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubPublicKeyEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitHubPublicKey | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface IXGitHubPublicKeyEdge {
  __typename: '_xGitHubPublicKeyEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitHubPublicKey | null;
}

/**
 * A repository pull request.
 */
export interface IXGitHubPullRequest {
  __typename: '_xGitHubPullRequest';

  /**
   * Reason that the conversation was locked.
   */
  activeLockReason: XGitHubLockReason | null;

  /**
   * The number of additions in this pull request.
   */
  additions: number;

  /**
   * A list of Users assigned to this object.
   */
  assignees: IXGitHubUserConnection;

  /**
   * The actor who authored the comment.
   */
  author: _xGitHubActor | null;

  /**
   * Author's association with the subject of the comment.
   */
  authorAssociation: XGitHubCommentAuthorAssociation;

  /**
   * Returns the auto-merge request object if one exists for this pull request.
   */
  autoMergeRequest: IXGitHubAutoMergeRequest | null;

  /**
   * Identifies the base Ref associated with the pull request.
   */
  baseRef: IXGitHubRef | null;

  /**
   * Identifies the name of the base Ref associated with the pull request, even if the ref has been deleted.
   */
  baseRefName: string;

  /**
   * Identifies the oid of the base ref associated with the pull request, even if the ref has been deleted.
   */
  baseRefOid: any;

  /**
   * The repository associated with this pull request's base Ref.
   */
  baseRepository: IXGitHubRepository | null;

  /**
   * The body as Markdown.
   */
  body: string;

  /**
   * The body rendered to HTML.
   */
  bodyHTML: any;

  /**
   * The body rendered to text.
   */
  bodyText: string;

  /**
   * The number of changed files in this pull request.
   */
  changedFiles: number;

  /**
   * The HTTP path for the checks of this pull request.
   */
  checksResourcePath: any;

  /**
   * The HTTP URL for the checks of this pull request.
   */
  checksUrl: any;

  /**
   * `true` if the pull request is closed
   */
  closed: boolean;

  /**
   * Identifies the date and time when the object was closed.
   */
  closedAt: any | null;

  /**
   * List of issues that were may be closed by this pull request
   */
  closingIssuesReferences: IXGitHubIssueConnection | null;

  /**
   * A list of comments associated with the pull request.
   */
  comments: IXGitHubIssueCommentConnection;

  /**
   * A list of commits present in this pull request's head branch not present in the base branch.
   */
  commits: IXGitHubPullRequestCommitConnection;

  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: any;

  /**
   * Check if this comment was created via an email reply.
   */
  createdViaEmail: boolean;

  /**
   * Identifies the primary key from the database.
   */
  databaseId: number | null;

  /**
   * The number of deletions in this pull request.
   */
  deletions: number;

  /**
   * The actor who edited this pull request's body.
   */
  editor: _xGitHubActor | null;

  /**
   * Lists the files changed within this pull request.
   */
  files: IXGitHubPullRequestChangedFileConnection | null;

  /**
   * Identifies the head Ref associated with the pull request.
   */
  headRef: IXGitHubRef | null;

  /**
   * Identifies the name of the head Ref associated with the pull request, even if the ref has been deleted.
   */
  headRefName: string;

  /**
   * Identifies the oid of the head ref associated with the pull request, even if the ref has been deleted.
   */
  headRefOid: any;

  /**
   * The repository associated with this pull request's head Ref.
   */
  headRepository: IXGitHubRepository | null;

  /**
   * The owner of the repository associated with this pull request's head Ref.
   */
  headRepositoryOwner: _xGitHubRepositoryOwner | null;

  /**
   * The hovercard information for this issue
   */
  hovercard: IXGitHubHovercard;
  id: string;

  /**
   * Check if this comment was edited and includes an edit with the creation data
   */
  includesCreatedEdit: boolean;

  /**
   * The head and base repositories are different.
   */
  isCrossRepository: boolean;

  /**
   * Identifies if the pull request is a draft.
   */
  isDraft: boolean;

  /**
   * Is this pull request read by the viewer
   */
  isReadByViewer: boolean | null;

  /**
   * A list of labels associated with the object.
   */
  labels: IXGitHubLabelConnection | null;

  /**
   * The moment the editor made the last edit
   */
  lastEditedAt: any | null;

  /**
   * A list of latest reviews per user associated with the pull request.
   */
  latestOpinionatedReviews: IXGitHubPullRequestReviewConnection | null;

  /**
   * A list of latest reviews per user associated with the pull request that are not also pending review.
   */
  latestReviews: IXGitHubPullRequestReviewConnection | null;

  /**
   * `true` if the pull request is locked
   */
  locked: boolean;

  /**
   * Indicates whether maintainers can modify the pull request.
   */
  maintainerCanModify: boolean;

  /**
   * The commit that was created when this pull request was merged.
   */
  mergeCommit: IXGitHubCommit | null;

  /**
   * Whether or not the pull request can be merged based on the existence of merge conflicts.
   */
  mergeable: XGitHubMergeableState;

  /**
   * Whether or not the pull request was merged.
   */
  merged: boolean;

  /**
   * The date and time that the pull request was merged.
   */
  mergedAt: any | null;

  /**
   * The actor who merged the pull request.
   */
  mergedBy: _xGitHubActor | null;

  /**
   * Identifies the milestone associated with the pull request.
   */
  milestone: IXGitHubMilestone | null;

  /**
   * Identifies the pull request number.
   */
  number: number;

  /**
   * A list of Users that are participating in the Pull Request conversation.
   */
  participants: IXGitHubUserConnection;

  /**
   * The permalink to the pull request.
   */
  permalink: any;

  /**
   * The commit that GitHub automatically generated to test if this pull request could be merged. This field will not return a value if the pull request is merged, or if the test merge commit is still being generated. See the `mergeable` field for more details on the mergeability of the pull request.
   */
  potentialMergeCommit: IXGitHubCommit | null;

  /**
   * List of project cards associated with this pull request.
   */
  projectCards: IXGitHubProjectCardConnection;

  /**
   * Identifies when the comment was published at.
   */
  publishedAt: any | null;

  /**
   * A list of reactions grouped by content left on the subject.
   */
  reactionGroups: Array<IXGitHubReactionGroup> | null;

  /**
   * A list of Reactions left on the Issue.
   */
  reactions: IXGitHubReactionConnection;

  /**
   * The repository associated with this node.
   */
  repository: IXGitHubRepository;

  /**
   * The HTTP path for this pull request.
   */
  resourcePath: any;

  /**
   * The HTTP path for reverting this pull request.
   */
  revertResourcePath: any;

  /**
   * The HTTP URL for reverting this pull request.
   */
  revertUrl: any;

  /**
   * The current status of this pull request with respect to code review.
   */
  reviewDecision: XGitHubPullRequestReviewDecision | null;

  /**
   * A list of review requests associated with the pull request.
   */
  reviewRequests: IXGitHubReviewRequestConnection | null;

  /**
   * The list of all review threads for this pull request.
   */
  reviewThreads: IXGitHubPullRequestReviewThreadConnection;

  /**
   * A list of reviews associated with the pull request.
   */
  reviews: IXGitHubPullRequestReviewConnection | null;

  /**
   * Identifies the state of the pull request.
   */
  state: XGitHubPullRequestState;

  /**
   * A list of reviewer suggestions based on commit history and past review comments.
   */
  suggestedReviewers: Array<IXGitHubSuggestedReviewer | null>;

  /**
   * A list of events, comments, commits, etc. associated with the pull request.
   * @deprecated "`timeline` will be removed Use PullRequest.timelineItems instead. Removal on 2020-10-01 UTC."
   */
  timeline: IXGitHubPullRequestTimelineConnection;

  /**
   * A list of events, comments, commits, etc. associated with the pull request.
   */
  timelineItems: IXGitHubPullRequestTimelineItemsConnection;

  /**
   * Identifies the pull request title.
   */
  title: string;

  /**
   * Identifies the pull request title rendered to HTML.
   */
  titleHTML: any;

  /**
   * Identifies the date and time when the object was last updated.
   */
  updatedAt: any;

  /**
   * The HTTP URL for this pull request.
   */
  url: any;

  /**
   * A list of edits to this content.
   */
  userContentEdits: IXGitHubUserContentEditConnection | null;

  /**
   * Whether or not the viewer can apply suggestion.
   */
  viewerCanApplySuggestion: boolean;

  /**
   * Check if the viewer can restore the deleted head ref.
   */
  viewerCanDeleteHeadRef: boolean;

  /**
   * Whether or not the viewer can disable auto-merge
   */
  viewerCanDisableAutoMerge: boolean;

  /**
   * Whether or not the viewer can enable auto-merge
   */
  viewerCanEnableAutoMerge: boolean;

  /**
   * Can user react to this subject
   */
  viewerCanReact: boolean;

  /**
   * Check if the viewer is able to change their subscription status for the repository.
   */
  viewerCanSubscribe: boolean;

  /**
   * Check if the current viewer can update this object.
   */
  viewerCanUpdate: boolean;

  /**
   * Reasons why the current viewer can not update this comment.
   */
  viewerCannotUpdateReasons: Array<XGitHubCommentCannotUpdateReason>;

  /**
   * Did the viewer author this comment.
   */
  viewerDidAuthor: boolean;

  /**
   * The latest review given from the viewer.
   */
  viewerLatestReview: IXGitHubPullRequestReview | null;

  /**
   * The person who has requested the viewer for review on this pull request.
   */
  viewerLatestReviewRequest: IXGitHubReviewRequest | null;

  /**
   * The merge body text for the viewer and method.
   */
  viewerMergeBodyText: string;

  /**
   * The merge headline text for the viewer and method.
   */
  viewerMergeHeadlineText: string;

  /**
   * Identifies if the viewer is watching, not watching, or ignoring the subscribable entity.
   */
  viewerSubscription: XGitHubSubscriptionState | null;
}

export interface IAssigneesOnXGitHubPullRequestArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IClosingIssuesReferencesOnXGitHubPullRequestArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Ordering options for issues returned from the connection
   */
  orderBy?: IXGitHubIssueOrder | null;
}

export interface ICommentsOnXGitHubPullRequestArguments {
  /**
   * Ordering options for issue comments returned from the connection.
   */
  orderBy?: IXGitHubIssueCommentOrder | null;

  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface ICommitsOnXGitHubPullRequestArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IFilesOnXGitHubPullRequestArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IHovercardOnXGitHubPullRequestArguments {
  /**
   * Whether or not to include notification contexts
   * @default true
   */
  includeNotificationContexts?: boolean | null;
}

export interface ILabelsOnXGitHubPullRequestArguments {
  /**
   * Ordering options for labels returned from the connection.
   * @default {"field":"CREATED_AT","direction":"ASC"}
   */
  orderBy?: IXGitHubLabelOrder | null;

  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface ILatestOpinionatedReviewsOnXGitHubPullRequestArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Only return reviews from user who have write access to the repository
   * @default false
   */
  writersOnly?: boolean | null;
}

export interface ILatestReviewsOnXGitHubPullRequestArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IParticipantsOnXGitHubPullRequestArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IProjectCardsOnXGitHubPullRequestArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * A list of archived states to filter the cards by
   * @default ["ARCHIVED","NOT_ARCHIVED"]
   */
  archivedStates?: Array<XGitHubProjectCardArchivedState | null> | null;
}

export interface IReactionsOnXGitHubPullRequestArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Allows filtering Reactions by emoji.
   */
  content?: XGitHubReactionContent | null;

  /**
   * Allows specifying the order in which reactions are returned.
   */
  orderBy?: IXGitHubReactionOrder | null;
}

export interface IReviewRequestsOnXGitHubPullRequestArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IReviewThreadsOnXGitHubPullRequestArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IReviewsOnXGitHubPullRequestArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * A list of states to filter the reviews.
   */
  states?: Array<XGitHubPullRequestReviewState> | null;

  /**
   * Filter by author of the review.
   */
  author?: string | null;
}

export interface ITimelineOnXGitHubPullRequestArguments {
  /**
   * Allows filtering timeline events by a `since` timestamp.
   */
  since?: any | null;

  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface ITimelineItemsOnXGitHubPullRequestArguments {
  /**
   * Filter timeline items by a `since` timestamp.
   */
  since?: any | null;

  /**
   * Skips the first _n_ elements in the list.
   */
  skip?: number | null;

  /**
   * Filter timeline items by type.
   */
  itemTypes?: Array<XGitHubPullRequestTimelineItemsItemType> | null;

  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IUserContentEditsOnXGitHubPullRequestArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IViewerMergeBodyTextOnXGitHubPullRequestArguments {
  /**
   * The merge method for the message.
   */
  mergeType?: XGitHubPullRequestMergeMethod | null;
}

export interface IViewerMergeHeadlineTextOnXGitHubPullRequestArguments {
  /**
   * The merge method for the message.
   */
  mergeType?: XGitHubPullRequestMergeMethod | null;
}

/**
 * A file changed in a pull request.
 */
export interface IXGitHubPullRequestChangedFile {
  __typename: '_xGitHubPullRequestChangedFile';

  /**
   * The number of additions to the file.
   */
  additions: number;

  /**
   * The number of deletions to the file.
   */
  deletions: number;

  /**
   * The path of the file.
   */
  path: string;

  /**
   * The state of the file for the viewer.
   */
  viewerViewedState: XGitHubFileViewedState;
}

/**
 * The connection type for PullRequestChangedFile.
 */
export interface IXGitHubPullRequestChangedFileConnection {
  __typename: '_xGitHubPullRequestChangedFileConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubPullRequestChangedFileEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitHubPullRequestChangedFile | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface IXGitHubPullRequestChangedFileEdge {
  __typename: '_xGitHubPullRequestChangedFileEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitHubPullRequestChangedFile | null;
}

/**
 * Represents a Git commit part of a pull request.
 */
export interface IXGitHubPullRequestCommit {
  __typename: '_xGitHubPullRequestCommit';

  /**
   * The Git commit object
   */
  commit: IXGitHubCommit;
  id: string;

  /**
   * The pull request this commit belongs to
   */
  pullRequest: IXGitHubPullRequest;

  /**
   * The HTTP path for this pull request commit
   */
  resourcePath: any;

  /**
   * The HTTP URL for this pull request commit
   */
  url: any;
}

/**
 * Represents a commit comment thread part of a pull request.
 */
export interface IXGitHubPullRequestCommitCommentThread {
  __typename: '_xGitHubPullRequestCommitCommentThread';

  /**
   * The comments that exist in this thread.
   */
  comments: IXGitHubCommitCommentConnection;

  /**
   * The commit the comments were made on.
   */
  commit: IXGitHubCommit;
  id: string;

  /**
   * The file the comments were made on.
   */
  path: string | null;

  /**
   * The position in the diff for the commit that the comment was made on.
   */
  position: number | null;

  /**
   * The pull request this commit comment thread belongs to
   */
  pullRequest: IXGitHubPullRequest;

  /**
   * The repository associated with this node.
   */
  repository: IXGitHubRepository;
}

export interface ICommentsOnXGitHubPullRequestCommitCommentThreadArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

/**
 * The connection type for PullRequestCommit.
 */
export interface IXGitHubPullRequestCommitConnection {
  __typename: '_xGitHubPullRequestCommitConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubPullRequestCommitEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitHubPullRequestCommit | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface IXGitHubPullRequestCommitEdge {
  __typename: '_xGitHubPullRequestCommitEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitHubPullRequestCommit | null;
}

/**
 * The connection type for PullRequest.
 */
export interface IXGitHubPullRequestConnection {
  __typename: '_xGitHubPullRequestConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubPullRequestEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitHubPullRequest | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * This aggregates pull requests opened by a user within one repository.
 */
export interface IXGitHubPullRequestContributionsByRepository {
  __typename: '_xGitHubPullRequestContributionsByRepository';

  /**
   * The pull request contributions.
   */
  contributions: IXGitHubCreatedPullRequestContributionConnection;

  /**
   * The repository in which the pull requests were opened.
   */
  repository: IXGitHubRepository;
}

export interface IContributionsOnXGitHubPullRequestContributionsByRepositoryArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Ordering options for contributions returned from the connection.
   * @default {"direction":"DESC"}
   */
  orderBy?: IXGitHubContributionOrder | null;
}

/**
 * An edge in a connection.
 */
export interface IXGitHubPullRequestEdge {
  __typename: '_xGitHubPullRequestEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitHubPullRequest | null;
}

/**
 * Represents available types of methods to use when merging a pull request.
 */
export const enum XGitHubPullRequestMergeMethod {
  /**
   * Add all commits from the head branch to the base branch with a merge commit.
   */
  MERGE = 'MERGE',

  /**
   * Combine all commits from the head branch into a single commit in the base branch.
   */
  SQUASH = 'SQUASH',

  /**
   * Add all commits from the head branch onto the base branch individually.
   */
  REBASE = 'REBASE',
}

/**
 * Ways in which lists of issues can be ordered upon return.
 */
export interface IXGitHubPullRequestOrder {
  /**
   * The field in which to order pull requests by.
   */
  field: XGitHubPullRequestOrderField;

  /**
   * The direction in which to order pull requests by the specified field.
   */
  direction: XGitHubOrderDirection;
}

/**
 * Properties by which pull_requests connections can be ordered.
 */
export const enum XGitHubPullRequestOrderField {
  /**
   * Order pull_requests by creation time
   */
  CREATED_AT = 'CREATED_AT',

  /**
   * Order pull_requests by update time
   */
  UPDATED_AT = 'UPDATED_AT',
}

/**
 * A review object for a given pull request.
 */
export interface IXGitHubPullRequestReview {
  __typename: '_xGitHubPullRequestReview';

  /**
   * The actor who authored the comment.
   */
  author: _xGitHubActor | null;

  /**
   * Author's association with the subject of the comment.
   */
  authorAssociation: XGitHubCommentAuthorAssociation;

  /**
   * Indicates whether the author of this review has push access to the repository.
   */
  authorCanPushToRepository: boolean;

  /**
   * Identifies the pull request review body.
   */
  body: string;

  /**
   * The body rendered to HTML.
   */
  bodyHTML: any;

  /**
   * The body of this review rendered as plain text.
   */
  bodyText: string;

  /**
   * A list of review comments for the current pull request review.
   */
  comments: IXGitHubPullRequestReviewCommentConnection;

  /**
   * Identifies the commit associated with this pull request review.
   */
  commit: IXGitHubCommit | null;

  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: any;

  /**
   * Check if this comment was created via an email reply.
   */
  createdViaEmail: boolean;

  /**
   * Identifies the primary key from the database.
   */
  databaseId: number | null;

  /**
   * The actor who edited the comment.
   */
  editor: _xGitHubActor | null;
  id: string;

  /**
   * Check if this comment was edited and includes an edit with the creation data
   */
  includesCreatedEdit: boolean;

  /**
   * The moment the editor made the last edit
   */
  lastEditedAt: any | null;

  /**
   * A list of teams that this review was made on behalf of.
   */
  onBehalfOf: IXGitHubTeamConnection;

  /**
   * Identifies when the comment was published at.
   */
  publishedAt: any | null;

  /**
   * Identifies the pull request associated with this pull request review.
   */
  pullRequest: IXGitHubPullRequest;

  /**
   * A list of reactions grouped by content left on the subject.
   */
  reactionGroups: Array<IXGitHubReactionGroup> | null;

  /**
   * A list of Reactions left on the Issue.
   */
  reactions: IXGitHubReactionConnection;

  /**
   * The repository associated with this node.
   */
  repository: IXGitHubRepository;

  /**
   * The HTTP path permalink for this PullRequestReview.
   */
  resourcePath: any;

  /**
   * Identifies the current state of the pull request review.
   */
  state: XGitHubPullRequestReviewState;

  /**
   * Identifies when the Pull Request Review was submitted
   */
  submittedAt: any | null;

  /**
   * Identifies the date and time when the object was last updated.
   */
  updatedAt: any;

  /**
   * The HTTP URL permalink for this PullRequestReview.
   */
  url: any;

  /**
   * A list of edits to this content.
   */
  userContentEdits: IXGitHubUserContentEditConnection | null;

  /**
   * Check if the current viewer can delete this object.
   */
  viewerCanDelete: boolean;

  /**
   * Can user react to this subject
   */
  viewerCanReact: boolean;

  /**
   * Check if the current viewer can update this object.
   */
  viewerCanUpdate: boolean;

  /**
   * Reasons why the current viewer can not update this comment.
   */
  viewerCannotUpdateReasons: Array<XGitHubCommentCannotUpdateReason>;

  /**
   * Did the viewer author this comment.
   */
  viewerDidAuthor: boolean;
}

export interface ICommentsOnXGitHubPullRequestReviewArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IOnBehalfOfOnXGitHubPullRequestReviewArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IReactionsOnXGitHubPullRequestReviewArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Allows filtering Reactions by emoji.
   */
  content?: XGitHubReactionContent | null;

  /**
   * Allows specifying the order in which reactions are returned.
   */
  orderBy?: IXGitHubReactionOrder | null;
}

export interface IUserContentEditsOnXGitHubPullRequestReviewArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

/**
 * A review comment associated with a given repository pull request.
 */
export interface IXGitHubPullRequestReviewComment {
  __typename: '_xGitHubPullRequestReviewComment';

  /**
   * The actor who authored the comment.
   */
  author: _xGitHubActor | null;

  /**
   * Author's association with the subject of the comment.
   */
  authorAssociation: XGitHubCommentAuthorAssociation;

  /**
   * The comment body of this review comment.
   */
  body: string;

  /**
   * The body rendered to HTML.
   */
  bodyHTML: any;

  /**
   * The comment body of this review comment rendered as plain text.
   */
  bodyText: string;

  /**
   * Identifies the commit associated with the comment.
   */
  commit: IXGitHubCommit | null;

  /**
   * Identifies when the comment was created.
   */
  createdAt: any;

  /**
   * Check if this comment was created via an email reply.
   */
  createdViaEmail: boolean;

  /**
   * Identifies the primary key from the database.
   */
  databaseId: number | null;

  /**
   * The diff hunk to which the comment applies.
   */
  diffHunk: string;

  /**
   * Identifies when the comment was created in a draft state.
   */
  draftedAt: any;

  /**
   * The actor who edited the comment.
   */
  editor: _xGitHubActor | null;
  id: string;

  /**
   * Check if this comment was edited and includes an edit with the creation data
   */
  includesCreatedEdit: boolean;

  /**
   * Returns whether or not a comment has been minimized.
   */
  isMinimized: boolean;

  /**
   * The moment the editor made the last edit
   */
  lastEditedAt: any | null;

  /**
   * Returns why the comment was minimized.
   */
  minimizedReason: string | null;

  /**
   * Identifies the original commit associated with the comment.
   */
  originalCommit: IXGitHubCommit | null;

  /**
   * The original line index in the diff to which the comment applies.
   */
  originalPosition: number;

  /**
   * Identifies when the comment body is outdated
   */
  outdated: boolean;

  /**
   * The path to which the comment applies.
   */
  path: string;

  /**
   * The line index in the diff to which the comment applies.
   */
  position: number | null;

  /**
   * Identifies when the comment was published at.
   */
  publishedAt: any | null;

  /**
   * The pull request associated with this review comment.
   */
  pullRequest: IXGitHubPullRequest;

  /**
   * The pull request review associated with this review comment.
   */
  pullRequestReview: IXGitHubPullRequestReview | null;

  /**
   * A list of reactions grouped by content left on the subject.
   */
  reactionGroups: Array<IXGitHubReactionGroup> | null;

  /**
   * A list of Reactions left on the Issue.
   */
  reactions: IXGitHubReactionConnection;

  /**
   * The comment this is a reply to.
   */
  replyTo: IXGitHubPullRequestReviewComment | null;

  /**
   * The repository associated with this node.
   */
  repository: IXGitHubRepository;

  /**
   * The HTTP path permalink for this review comment.
   */
  resourcePath: any;

  /**
   * Identifies the state of the comment.
   */
  state: XGitHubPullRequestReviewCommentState;

  /**
   * Identifies when the comment was last updated.
   */
  updatedAt: any;

  /**
   * The HTTP URL permalink for this review comment.
   */
  url: any;

  /**
   * A list of edits to this content.
   */
  userContentEdits: IXGitHubUserContentEditConnection | null;

  /**
   * Check if the current viewer can delete this object.
   */
  viewerCanDelete: boolean;

  /**
   * Check if the current viewer can minimize this object.
   */
  viewerCanMinimize: boolean;

  /**
   * Can user react to this subject
   */
  viewerCanReact: boolean;

  /**
   * Check if the current viewer can update this object.
   */
  viewerCanUpdate: boolean;

  /**
   * Reasons why the current viewer can not update this comment.
   */
  viewerCannotUpdateReasons: Array<XGitHubCommentCannotUpdateReason>;

  /**
   * Did the viewer author this comment.
   */
  viewerDidAuthor: boolean;
}

export interface IReactionsOnXGitHubPullRequestReviewCommentArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Allows filtering Reactions by emoji.
   */
  content?: XGitHubReactionContent | null;

  /**
   * Allows specifying the order in which reactions are returned.
   */
  orderBy?: IXGitHubReactionOrder | null;
}

export interface IUserContentEditsOnXGitHubPullRequestReviewCommentArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

/**
 * The connection type for PullRequestReviewComment.
 */
export interface IXGitHubPullRequestReviewCommentConnection {
  __typename: '_xGitHubPullRequestReviewCommentConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubPullRequestReviewCommentEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitHubPullRequestReviewComment | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface IXGitHubPullRequestReviewCommentEdge {
  __typename: '_xGitHubPullRequestReviewCommentEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitHubPullRequestReviewComment | null;
}

/**
 * The possible states of a pull request review comment.
 */
export const enum XGitHubPullRequestReviewCommentState {
  /**
   * A comment that is part of a pending review
   */
  PENDING = 'PENDING',

  /**
   * A comment that is part of a submitted review
   */
  SUBMITTED = 'SUBMITTED',
}

/**
 * The connection type for PullRequestReview.
 */
export interface IXGitHubPullRequestReviewConnection {
  __typename: '_xGitHubPullRequestReviewConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubPullRequestReviewEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitHubPullRequestReview | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * This aggregates pull request reviews made by a user within one repository.
 */
export interface IXGitHubPullRequestReviewContributionsByRepository {
  __typename: '_xGitHubPullRequestReviewContributionsByRepository';

  /**
   * The pull request review contributions.
   */
  contributions: IXGitHubCreatedPullRequestReviewContributionConnection;

  /**
   * The repository in which the pull request reviews were made.
   */
  repository: IXGitHubRepository;
}

export interface IContributionsOnXGitHubPullRequestReviewContributionsByRepositoryArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Ordering options for contributions returned from the connection.
   * @default {"direction":"DESC"}
   */
  orderBy?: IXGitHubContributionOrder | null;
}

/**
 * The review status of a pull request.
 */
export const enum XGitHubPullRequestReviewDecision {
  /**
   * Changes have been requested on the pull request.
   */
  CHANGES_REQUESTED = 'CHANGES_REQUESTED',

  /**
   * The pull request has received an approving review.
   */
  APPROVED = 'APPROVED',

  /**
   * A review is required before the pull request can be merged.
   */
  REVIEW_REQUIRED = 'REVIEW_REQUIRED',
}

/**
 * An edge in a connection.
 */
export interface IXGitHubPullRequestReviewEdge {
  __typename: '_xGitHubPullRequestReviewEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitHubPullRequestReview | null;
}

/**
 * The possible events to perform on a pull request review.
 */
export const enum XGitHubPullRequestReviewEvent {
  /**
   * Submit general feedback without explicit approval.
   */
  COMMENT = 'COMMENT',

  /**
   * Submit feedback and approve merging these changes.
   */
  APPROVE = 'APPROVE',

  /**
   * Submit feedback that must be addressed before merging.
   */
  REQUEST_CHANGES = 'REQUEST_CHANGES',

  /**
   * Dismiss review so it now longer effects merging.
   */
  DISMISS = 'DISMISS',
}

/**
 * The possible states of a pull request review.
 */
export const enum XGitHubPullRequestReviewState {
  /**
   * A review that has not yet been submitted.
   */
  PENDING = 'PENDING',

  /**
   * An informational review.
   */
  COMMENTED = 'COMMENTED',

  /**
   * A review allowing the pull request to merge.
   */
  APPROVED = 'APPROVED',

  /**
   * A review blocking the pull request from merging.
   */
  CHANGES_REQUESTED = 'CHANGES_REQUESTED',

  /**
   * A review that has been dismissed.
   */
  DISMISSED = 'DISMISSED',
}

/**
 * A threaded list of comments for a given pull request.
 */
export interface IXGitHubPullRequestReviewThread {
  __typename: '_xGitHubPullRequestReviewThread';

  /**
   * A list of pull request comments associated with the thread.
   */
  comments: IXGitHubPullRequestReviewCommentConnection;

  /**
   * The side of the diff on which this thread was placed.
   */
  diffSide: XGitHubDiffSide;
  id: string;

  /**
   * Whether or not the thread has been collapsed (resolved)
   */
  isCollapsed: boolean;

  /**
   * Indicates whether this thread was outdated by newer changes.
   */
  isOutdated: boolean;

  /**
   * Whether this thread has been resolved
   */
  isResolved: boolean;

  /**
   * The line in the file to which this thread refers
   */
  line: number | null;

  /**
   * The original line in the file to which this thread refers.
   */
  originalLine: number | null;

  /**
   * The original start line in the file to which this thread refers (multi-line only).
   */
  originalStartLine: number | null;

  /**
   * Identifies the file path of this thread.
   */
  path: string;

  /**
   * Identifies the pull request associated with this thread.
   */
  pullRequest: IXGitHubPullRequest;

  /**
   * Identifies the repository associated with this thread.
   */
  repository: IXGitHubRepository;

  /**
   * The user who resolved this thread
   */
  resolvedBy: IXGitHubUser | null;

  /**
   * The side of the diff that the first line of the thread starts on (multi-line only)
   */
  startDiffSide: XGitHubDiffSide | null;

  /**
   * The start line in the file to which this thread refers (multi-line only)
   */
  startLine: number | null;

  /**
   * Indicates whether the current viewer can reply to this thread.
   */
  viewerCanReply: boolean;

  /**
   * Whether or not the viewer can resolve this thread
   */
  viewerCanResolve: boolean;

  /**
   * Whether or not the viewer can unresolve this thread
   */
  viewerCanUnresolve: boolean;
}

export interface ICommentsOnXGitHubPullRequestReviewThreadArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Skips the first _n_ elements in the list.
   */
  skip?: number | null;
}

/**
 * Review comment threads for a pull request review.
 */
export interface IXGitHubPullRequestReviewThreadConnection {
  __typename: '_xGitHubPullRequestReviewThreadConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubPullRequestReviewThreadEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitHubPullRequestReviewThread | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface IXGitHubPullRequestReviewThreadEdge {
  __typename: '_xGitHubPullRequestReviewThreadEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitHubPullRequestReviewThread | null;
}

/**
 * Represents the latest point in the pull request timeline for which the viewer has seen the pull request's commits.
 */
export interface IXGitHubPullRequestRevisionMarker {
  __typename: '_xGitHubPullRequestRevisionMarker';

  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: any;

  /**
   * The last commit the viewer has seen.
   */
  lastSeenCommit: IXGitHubCommit;

  /**
   * The pull request to which the marker belongs.
   */
  pullRequest: IXGitHubPullRequest;
}

/**
 * The possible states of a pull request.
 */
export const enum XGitHubPullRequestState {
  /**
   * A pull request that is still open.
   */
  OPEN = 'OPEN',

  /**
   * A pull request that has been closed without being merged.
   */
  CLOSED = 'CLOSED',

  /**
   * A pull request that has been closed by being merged.
   */
  MERGED = 'MERGED',
}

/**
 * A repository pull request template.
 */
export interface IXGitHubPullRequestTemplate {
  __typename: '_xGitHubPullRequestTemplate';

  /**
   * The body of the template
   */
  body: string | null;

  /**
   * The filename of the template
   */
  filename: string | null;

  /**
   * The repository the template belongs to
   */
  repository: IXGitHubRepository;
}

/**
 * The connection type for PullRequestTimelineItem.
 */
export interface IXGitHubPullRequestTimelineConnection {
  __typename: '_xGitHubPullRequestTimelineConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubPullRequestTimelineItemEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<_xGitHubPullRequestTimelineItem | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An item in a pull request timeline
 */
export type _xGitHubPullRequestTimelineItem =
  | IXGitHubAssignedEvent
  | IXGitHubBaseRefDeletedEvent
  | IXGitHubBaseRefForcePushedEvent
  | IXGitHubClosedEvent
  | IXGitHubCommit
  | IXGitHubCommitCommentThread
  | IXGitHubCrossReferencedEvent
  | IXGitHubDemilestonedEvent
  | IXGitHubDeployedEvent
  | IXGitHubDeploymentEnvironmentChangedEvent
  | IXGitHubHeadRefDeletedEvent
  | IXGitHubHeadRefForcePushedEvent
  | IXGitHubHeadRefRestoredEvent
  | IXGitHubIssueComment
  | IXGitHubLabeledEvent
  | IXGitHubLockedEvent
  | IXGitHubMergedEvent
  | IXGitHubMilestonedEvent
  | IXGitHubPullRequestReview
  | IXGitHubPullRequestReviewComment
  | IXGitHubPullRequestReviewThread
  | IXGitHubReferencedEvent
  | IXGitHubRenamedTitleEvent
  | IXGitHubReopenedEvent
  | IXGitHubReviewDismissedEvent
  | IXGitHubReviewRequestRemovedEvent
  | IXGitHubReviewRequestedEvent
  | IXGitHubSubscribedEvent
  | IXGitHubUnassignedEvent
  | IXGitHubUnlabeledEvent
  | IXGitHubUnlockedEvent
  | IXGitHubUnsubscribedEvent
  | IXGitHubUserBlockedEvent;

/**
 * An edge in a connection.
 */
export interface IXGitHubPullRequestTimelineItemEdge {
  __typename: '_xGitHubPullRequestTimelineItemEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: _xGitHubPullRequestTimelineItem | null;
}

/**
 * An item in a pull request timeline
 */
export type _xGitHubPullRequestTimelineItems =
  | IXGitHubAddedToProjectEvent
  | IXGitHubAssignedEvent
  | IXGitHubAutoMergeDisabledEvent
  | IXGitHubAutoMergeEnabledEvent
  | IXGitHubAutoRebaseEnabledEvent
  | IXGitHubAutoSquashEnabledEvent
  | IXGitHubAutomaticBaseChangeFailedEvent
  | IXGitHubAutomaticBaseChangeSucceededEvent
  | IXGitHubBaseRefChangedEvent
  | IXGitHubBaseRefDeletedEvent
  | IXGitHubBaseRefForcePushedEvent
  | IXGitHubClosedEvent
  | IXGitHubCommentDeletedEvent
  | IXGitHubConnectedEvent
  | IXGitHubConvertToDraftEvent
  | IXGitHubConvertedNoteToIssueEvent
  | IXGitHubCrossReferencedEvent
  | IXGitHubDemilestonedEvent
  | IXGitHubDeployedEvent
  | IXGitHubDeploymentEnvironmentChangedEvent
  | IXGitHubDisconnectedEvent
  | IXGitHubHeadRefDeletedEvent
  | IXGitHubHeadRefForcePushedEvent
  | IXGitHubHeadRefRestoredEvent
  | IXGitHubIssueComment
  | IXGitHubLabeledEvent
  | IXGitHubLockedEvent
  | IXGitHubMarkedAsDuplicateEvent
  | IXGitHubMentionedEvent
  | IXGitHubMergedEvent
  | IXGitHubMilestonedEvent
  | IXGitHubMovedColumnsInProjectEvent
  | IXGitHubPinnedEvent
  | IXGitHubPullRequestCommit
  | IXGitHubPullRequestCommitCommentThread
  | IXGitHubPullRequestReview
  | IXGitHubPullRequestReviewThread
  | IXGitHubPullRequestRevisionMarker
  | IXGitHubReadyForReviewEvent
  | IXGitHubReferencedEvent
  | IXGitHubRemovedFromProjectEvent
  | IXGitHubRenamedTitleEvent
  | IXGitHubReopenedEvent
  | IXGitHubReviewDismissedEvent
  | IXGitHubReviewRequestRemovedEvent
  | IXGitHubReviewRequestedEvent
  | IXGitHubSubscribedEvent
  | IXGitHubTransferredEvent
  | IXGitHubUnassignedEvent
  | IXGitHubUnlabeledEvent
  | IXGitHubUnlockedEvent
  | IXGitHubUnmarkedAsDuplicateEvent
  | IXGitHubUnpinnedEvent
  | IXGitHubUnsubscribedEvent
  | IXGitHubUserBlockedEvent;

/**
 * The connection type for PullRequestTimelineItems.
 */
export interface IXGitHubPullRequestTimelineItemsConnection {
  __typename: '_xGitHubPullRequestTimelineItemsConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubPullRequestTimelineItemsEdge | null> | null;

  /**
   * Identifies the count of items after applying `before` and `after` filters.
   */
  filteredCount: number;

  /**
   * A list of nodes.
   */
  nodes: Array<_xGitHubPullRequestTimelineItems | null> | null;

  /**
   * Identifies the count of items after applying `before`/`after` filters and `first`/`last`/`skip` slicing.
   */
  pageCount: number;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;

  /**
   * Identifies the date and time when the timeline was last updated.
   */
  updatedAt: any;
}

/**
 * An edge in a connection.
 */
export interface IXGitHubPullRequestTimelineItemsEdge {
  __typename: '_xGitHubPullRequestTimelineItemsEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: _xGitHubPullRequestTimelineItems | null;
}

/**
 * The possible item types found in a timeline.
 */
export const enum XGitHubPullRequestTimelineItemsItemType {
  /**
   * Represents a Git commit part of a pull request.
   */
  PULL_REQUEST_COMMIT = 'PULL_REQUEST_COMMIT',

  /**
   * Represents a commit comment thread part of a pull request.
   */
  PULL_REQUEST_COMMIT_COMMENT_THREAD = 'PULL_REQUEST_COMMIT_COMMENT_THREAD',

  /**
   * A review object for a given pull request.
   */
  PULL_REQUEST_REVIEW = 'PULL_REQUEST_REVIEW',

  /**
   * A threaded list of comments for a given pull request.
   */
  PULL_REQUEST_REVIEW_THREAD = 'PULL_REQUEST_REVIEW_THREAD',

  /**
   * Represents the latest point in the pull request timeline for which the viewer has seen the pull request's commits.
   */
  PULL_REQUEST_REVISION_MARKER = 'PULL_REQUEST_REVISION_MARKER',

  /**
   * Represents a 'automatic_base_change_failed' event on a given pull request.
   */
  AUTOMATIC_BASE_CHANGE_FAILED_EVENT = 'AUTOMATIC_BASE_CHANGE_FAILED_EVENT',

  /**
   * Represents a 'automatic_base_change_succeeded' event on a given pull request.
   */
  AUTOMATIC_BASE_CHANGE_SUCCEEDED_EVENT = 'AUTOMATIC_BASE_CHANGE_SUCCEEDED_EVENT',

  /**
   * Represents a 'auto_merge_disabled' event on a given pull request.
   */
  AUTO_MERGE_DISABLED_EVENT = 'AUTO_MERGE_DISABLED_EVENT',

  /**
   * Represents a 'auto_merge_enabled' event on a given pull request.
   */
  AUTO_MERGE_ENABLED_EVENT = 'AUTO_MERGE_ENABLED_EVENT',

  /**
   * Represents a 'auto_rebase_enabled' event on a given pull request.
   */
  AUTO_REBASE_ENABLED_EVENT = 'AUTO_REBASE_ENABLED_EVENT',

  /**
   * Represents a 'auto_squash_enabled' event on a given pull request.
   */
  AUTO_SQUASH_ENABLED_EVENT = 'AUTO_SQUASH_ENABLED_EVENT',

  /**
   * Represents a 'base_ref_changed' event on a given issue or pull request.
   */
  BASE_REF_CHANGED_EVENT = 'BASE_REF_CHANGED_EVENT',

  /**
   * Represents a 'base_ref_force_pushed' event on a given pull request.
   */
  BASE_REF_FORCE_PUSHED_EVENT = 'BASE_REF_FORCE_PUSHED_EVENT',

  /**
   * Represents a 'base_ref_deleted' event on a given pull request.
   */
  BASE_REF_DELETED_EVENT = 'BASE_REF_DELETED_EVENT',

  /**
   * Represents a 'deployed' event on a given pull request.
   */
  DEPLOYED_EVENT = 'DEPLOYED_EVENT',

  /**
   * Represents a 'deployment_environment_changed' event on a given pull request.
   */
  DEPLOYMENT_ENVIRONMENT_CHANGED_EVENT = 'DEPLOYMENT_ENVIRONMENT_CHANGED_EVENT',

  /**
   * Represents a 'head_ref_deleted' event on a given pull request.
   */
  HEAD_REF_DELETED_EVENT = 'HEAD_REF_DELETED_EVENT',

  /**
   * Represents a 'head_ref_force_pushed' event on a given pull request.
   */
  HEAD_REF_FORCE_PUSHED_EVENT = 'HEAD_REF_FORCE_PUSHED_EVENT',

  /**
   * Represents a 'head_ref_restored' event on a given pull request.
   */
  HEAD_REF_RESTORED_EVENT = 'HEAD_REF_RESTORED_EVENT',

  /**
   * Represents a 'merged' event on a given pull request.
   */
  MERGED_EVENT = 'MERGED_EVENT',

  /**
   * Represents a 'review_dismissed' event on a given issue or pull request.
   */
  REVIEW_DISMISSED_EVENT = 'REVIEW_DISMISSED_EVENT',

  /**
   * Represents an 'review_requested' event on a given pull request.
   */
  REVIEW_REQUESTED_EVENT = 'REVIEW_REQUESTED_EVENT',

  /**
   * Represents an 'review_request_removed' event on a given pull request.
   */
  REVIEW_REQUEST_REMOVED_EVENT = 'REVIEW_REQUEST_REMOVED_EVENT',

  /**
   * Represents a 'ready_for_review' event on a given pull request.
   */
  READY_FOR_REVIEW_EVENT = 'READY_FOR_REVIEW_EVENT',

  /**
   * Represents a 'convert_to_draft' event on a given pull request.
   */
  CONVERT_TO_DRAFT_EVENT = 'CONVERT_TO_DRAFT_EVENT',

  /**
   * Represents a comment on an Issue.
   */
  ISSUE_COMMENT = 'ISSUE_COMMENT',

  /**
   * Represents a mention made by one issue or pull request to another.
   */
  CROSS_REFERENCED_EVENT = 'CROSS_REFERENCED_EVENT',

  /**
   * Represents a 'added_to_project' event on a given issue or pull request.
   */
  ADDED_TO_PROJECT_EVENT = 'ADDED_TO_PROJECT_EVENT',

  /**
   * Represents an 'assigned' event on any assignable object.
   */
  ASSIGNED_EVENT = 'ASSIGNED_EVENT',

  /**
   * Represents a 'closed' event on any `Closable`.
   */
  CLOSED_EVENT = 'CLOSED_EVENT',

  /**
   * Represents a 'comment_deleted' event on a given issue or pull request.
   */
  COMMENT_DELETED_EVENT = 'COMMENT_DELETED_EVENT',

  /**
   * Represents a 'connected' event on a given issue or pull request.
   */
  CONNECTED_EVENT = 'CONNECTED_EVENT',

  /**
   * Represents a 'converted_note_to_issue' event on a given issue or pull request.
   */
  CONVERTED_NOTE_TO_ISSUE_EVENT = 'CONVERTED_NOTE_TO_ISSUE_EVENT',

  /**
   * Represents a 'demilestoned' event on a given issue or pull request.
   */
  DEMILESTONED_EVENT = 'DEMILESTONED_EVENT',

  /**
   * Represents a 'disconnected' event on a given issue or pull request.
   */
  DISCONNECTED_EVENT = 'DISCONNECTED_EVENT',

  /**
   * Represents a 'labeled' event on a given issue or pull request.
   */
  LABELED_EVENT = 'LABELED_EVENT',

  /**
   * Represents a 'locked' event on a given issue or pull request.
   */
  LOCKED_EVENT = 'LOCKED_EVENT',

  /**
   * Represents a 'marked_as_duplicate' event on a given issue or pull request.
   */
  MARKED_AS_DUPLICATE_EVENT = 'MARKED_AS_DUPLICATE_EVENT',

  /**
   * Represents a 'mentioned' event on a given issue or pull request.
   */
  MENTIONED_EVENT = 'MENTIONED_EVENT',

  /**
   * Represents a 'milestoned' event on a given issue or pull request.
   */
  MILESTONED_EVENT = 'MILESTONED_EVENT',

  /**
   * Represents a 'moved_columns_in_project' event on a given issue or pull request.
   */
  MOVED_COLUMNS_IN_PROJECT_EVENT = 'MOVED_COLUMNS_IN_PROJECT_EVENT',

  /**
   * Represents a 'pinned' event on a given issue or pull request.
   */
  PINNED_EVENT = 'PINNED_EVENT',

  /**
   * Represents a 'referenced' event on a given `ReferencedSubject`.
   */
  REFERENCED_EVENT = 'REFERENCED_EVENT',

  /**
   * Represents a 'removed_from_project' event on a given issue or pull request.
   */
  REMOVED_FROM_PROJECT_EVENT = 'REMOVED_FROM_PROJECT_EVENT',

  /**
   * Represents a 'renamed' event on a given issue or pull request
   */
  RENAMED_TITLE_EVENT = 'RENAMED_TITLE_EVENT',

  /**
   * Represents a 'reopened' event on any `Closable`.
   */
  REOPENED_EVENT = 'REOPENED_EVENT',

  /**
   * Represents a 'subscribed' event on a given `Subscribable`.
   */
  SUBSCRIBED_EVENT = 'SUBSCRIBED_EVENT',

  /**
   * Represents a 'transferred' event on a given issue or pull request.
   */
  TRANSFERRED_EVENT = 'TRANSFERRED_EVENT',

  /**
   * Represents an 'unassigned' event on any assignable object.
   */
  UNASSIGNED_EVENT = 'UNASSIGNED_EVENT',

  /**
   * Represents an 'unlabeled' event on a given issue or pull request.
   */
  UNLABELED_EVENT = 'UNLABELED_EVENT',

  /**
   * Represents an 'unlocked' event on a given issue or pull request.
   */
  UNLOCKED_EVENT = 'UNLOCKED_EVENT',

  /**
   * Represents a 'user_blocked' event on a given user.
   */
  USER_BLOCKED_EVENT = 'USER_BLOCKED_EVENT',

  /**
   * Represents an 'unmarked_as_duplicate' event on a given issue or pull request.
   */
  UNMARKED_AS_DUPLICATE_EVENT = 'UNMARKED_AS_DUPLICATE_EVENT',

  /**
   * Represents an 'unpinned' event on a given issue or pull request.
   */
  UNPINNED_EVENT = 'UNPINNED_EVENT',

  /**
   * Represents an 'unsubscribed' event on a given `Subscribable`.
   */
  UNSUBSCRIBED_EVENT = 'UNSUBSCRIBED_EVENT',
}

/**
 * The possible target states when updating a pull request.
 */
export const enum XGitHubPullRequestUpdateState {
  /**
   * A pull request that is still open.
   */
  OPEN = 'OPEN',

  /**
   * A pull request that has been closed without being merged.
   */
  CLOSED = 'CLOSED',
}

/**
 * A Git push.
 */
export interface IXGitHubPush {
  __typename: '_xGitHubPush';
  id: string;

  /**
   * The SHA after the push
   */
  nextSha: any | null;

  /**
   * The permalink for this push.
   */
  permalink: any;

  /**
   * The SHA before the push
   */
  previousSha: any | null;

  /**
   * The user who pushed
   */
  pusher: IXGitHubUser;

  /**
   * The repository that was pushed to
   */
  repository: IXGitHubRepository;
}

/**
 * A team, user or app who has the ability to push to a protected branch.
 */
export interface IXGitHubPushAllowance {
  __typename: '_xGitHubPushAllowance';

  /**
   * The actor that can push.
   */
  actor: _xGitHubPushAllowanceActor | null;

  /**
   * Identifies the branch protection rule associated with the allowed user or team.
   */
  branchProtectionRule: IXGitHubBranchProtectionRule | null;
  id: string;
}

/**
 * Types that can be an actor.
 */
export type _xGitHubPushAllowanceActor =
  | IXGitHubApp
  | IXGitHubTeam
  | IXGitHubUser;

/**
 * The connection type for PushAllowance.
 */
export interface IXGitHubPushAllowanceConnection {
  __typename: '_xGitHubPushAllowanceConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubPushAllowanceEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitHubPushAllowance | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface IXGitHubPushAllowanceEdge {
  __typename: '_xGitHubPushAllowanceEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitHubPushAllowance | null;
}

/**
 * The query root of GitHub's GraphQL interface.
 */
export interface IXGitHubQuery {
  __typename: '_xGitHubQuery';

  /**
   * Look up a code of conduct by its key
   */
  codeOfConduct: IXGitHubCodeOfConduct | null;

  /**
   * Look up a code of conduct by its key
   */
  codesOfConduct: Array<IXGitHubCodeOfConduct | null> | null;

  /**
   * Look up an enterprise by URL slug.
   */
  enterprise: IXGitHubEnterprise | null;

  /**
   * Look up a pending enterprise administrator invitation by invitee, enterprise and role.
   */
  enterpriseAdministratorInvitation: IXGitHubEnterpriseAdministratorInvitation | null;

  /**
   * Look up a pending enterprise administrator invitation by invitation token.
   */
  enterpriseAdministratorInvitationByToken: IXGitHubEnterpriseAdministratorInvitation | null;

  /**
   * Look up an open source license by its key
   */
  license: IXGitHubLicense | null;

  /**
   * Return a list of known open source licenses
   */
  licenses: Array<IXGitHubLicense | null>;

  /**
   * Get alphabetically sorted list of Marketplace categories
   */
  marketplaceCategories: Array<IXGitHubMarketplaceCategory>;

  /**
   * Look up a Marketplace category by its slug.
   */
  marketplaceCategory: IXGitHubMarketplaceCategory | null;

  /**
   * Look up a single Marketplace listing
   */
  marketplaceListing: IXGitHubMarketplaceListing | null;

  /**
   * Look up Marketplace listings
   */
  marketplaceListings: IXGitHubMarketplaceListingConnection;

  /**
   * Return information about the GitHub instance
   */
  meta: IXGitHubGitHubMetadata;

  /**
   * Fetches an object given its ID.
   */
  node: _xGitHubNode | null;

  /**
   * Lookup nodes by a list of IDs.
   */
  nodes: Array<_xGitHubNode | null>;

  /**
   * Lookup a organization by login.
   */
  organization: IXGitHubOrganization | null;

  /**
   * The client's rate limit information.
   */
  rateLimit: IXGitHubRateLimit | null;

  /**
   * Hack to workaround https://github.com/facebook/relay/issues/112 re-exposing the root query object
   */
  relay: IXGitHubQuery;

  /**
   * Lookup a given repository by the owner and repository name.
   */
  repository: IXGitHubRepository | null;

  /**
   * Lookup a repository owner (ie. either a User or an Organization) by login.
   */
  repositoryOwner: _xGitHubRepositoryOwner | null;

  /**
   * Lookup resource by a URL.
   */
  resource: _xGitHubUniformResourceLocatable | null;

  /**
   * Perform a search across resources.
   */
  search: IXGitHubSearchResultItemConnection;

  /**
   * GitHub Security Advisories
   */
  securityAdvisories: IXGitHubSecurityAdvisoryConnection;

  /**
   * Fetch a Security Advisory by its GHSA ID
   */
  securityAdvisory: IXGitHubSecurityAdvisory | null;

  /**
   * Software Vulnerabilities documented by GitHub Security Advisories
   */
  securityVulnerabilities: IXGitHubSecurityVulnerabilityConnection;

  /**
   * Users and organizations who can be sponsored via GitHub Sponsors.
   */
  sponsorables: IXGitHubSponsorableItemConnection;

  /**
   * Look up a topic by name.
   */
  topic: IXGitHubTopic | null;

  /**
   * Lookup a user by login.
   */
  user: IXGitHubUser | null;

  /**
   * The currently authenticated user.
   */
  viewer: IXGitHubUser;
}

export interface ICodeOfConductOnXGitHubQueryArguments {
  /**
   * The code of conduct's key
   */
  key: string;
}

export interface IEnterpriseOnXGitHubQueryArguments {
  /**
   * The enterprise URL slug.
   */
  slug: string;

  /**
   * The enterprise invitation token.
   */
  invitationToken?: string | null;
}

export interface IEnterpriseAdministratorInvitationOnXGitHubQueryArguments {
  /**
   * The login of the user invited to join the business.
   */
  userLogin: string;

  /**
   * The slug of the enterprise the user was invited to join.
   */
  enterpriseSlug: string;

  /**
   * The role for the business member invitation.
   */
  role: XGitHubEnterpriseAdministratorRole;
}

export interface IEnterpriseAdministratorInvitationByTokenOnXGitHubQueryArguments {
  /**
   * The invitation token sent with the invitation email.
   */
  invitationToken: string;
}

export interface ILicenseOnXGitHubQueryArguments {
  /**
   * The license's downcased SPDX ID
   */
  key: string;
}

export interface IMarketplaceCategoriesOnXGitHubQueryArguments {
  /**
   * Return only the specified categories.
   */
  includeCategories?: Array<string> | null;

  /**
   * Exclude categories with no listings.
   */
  excludeEmpty?: boolean | null;

  /**
   * Returns top level categories only, excluding any subcategories.
   */
  excludeSubcategories?: boolean | null;
}

export interface IMarketplaceCategoryOnXGitHubQueryArguments {
  /**
   * The URL slug of the category.
   */
  slug: string;

  /**
   * Also check topic aliases for the category slug
   */
  useTopicAliases?: boolean | null;
}

export interface IMarketplaceListingOnXGitHubQueryArguments {
  /**
   * Select the listing that matches this slug. It's the short name of the listing used in its URL.
   */
  slug: string;
}

export interface IMarketplaceListingsOnXGitHubQueryArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Select only listings with the given category.
   */
  categorySlug?: string | null;

  /**
   * Also check topic aliases for the category slug
   */
  useTopicAliases?: boolean | null;

  /**
   * Select listings to which user has admin access. If omitted, listings visible to the
   * viewer are returned.
   */
  viewerCanAdmin?: boolean | null;

  /**
   * Select listings that can be administered by the specified user.
   */
  adminId?: string | null;

  /**
   * Select listings for products owned by the specified organization.
   */
  organizationId?: string | null;

  /**
   * Select listings visible to the viewer even if they are not approved. If omitted or
   * false, only approved listings will be returned.
   */
  allStates?: boolean | null;

  /**
   * Select the listings with these slugs, if they are visible to the viewer.
   */
  slugs?: Array<string | null> | null;

  /**
   * Select only listings where the primary category matches the given category slug.
   * @default false
   */
  primaryCategoryOnly?: boolean | null;

  /**
   * Select only listings that offer a free trial.
   * @default false
   */
  withFreeTrialsOnly?: boolean | null;
}

export interface INodeOnXGitHubQueryArguments {
  /**
   * ID of the object.
   */
  id: string;
}

export interface INodesOnXGitHubQueryArguments {
  /**
   * The list of node IDs.
   */
  ids: Array<string>;
}

export interface IOrganizationOnXGitHubQueryArguments {
  /**
   * The organization's login.
   */
  login: string;
}

export interface IRateLimitOnXGitHubQueryArguments {
  /**
   * If true, calculate the cost for the query without evaluating it
   * @default false
   */
  dryRun?: boolean | null;
}

export interface IRepositoryOnXGitHubQueryArguments {
  /**
   * The login field of a user or organization
   */
  owner: string;

  /**
   * The name of the repository
   */
  name: string;
}

export interface IRepositoryOwnerOnXGitHubQueryArguments {
  /**
   * The username to lookup the owner by.
   */
  login: string;
}

export interface IResourceOnXGitHubQueryArguments {
  /**
   * The URL.
   */
  url: any;
}

export interface ISearchOnXGitHubQueryArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * The search string to look for.
   */
  query: string;

  /**
   * The types of search items to search within.
   */
  type: XGitHubSearchType;
}

export interface ISecurityAdvisoriesOnXGitHubQueryArguments {
  /**
   * Ordering options for the returned topics.
   * @default {"field":"UPDATED_AT","direction":"DESC"}
   */
  orderBy?: IXGitHubSecurityAdvisoryOrder | null;

  /**
   * Filter advisories by identifier, e.g. GHSA or CVE.
   */
  identifier?: IXGitHubSecurityAdvisoryIdentifierFilter | null;

  /**
   * Filter advisories to those published since a time in the past.
   */
  publishedSince?: any | null;

  /**
   * Filter advisories to those updated since a time in the past.
   */
  updatedSince?: any | null;

  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface ISecurityAdvisoryOnXGitHubQueryArguments {
  /**
   * GitHub Security Advisory ID.
   */
  ghsaId: string;
}

export interface ISecurityVulnerabilitiesOnXGitHubQueryArguments {
  /**
   * Ordering options for the returned topics.
   * @default {"field":"UPDATED_AT","direction":"DESC"}
   */
  orderBy?: IXGitHubSecurityVulnerabilityOrder | null;

  /**
   * An ecosystem to filter vulnerabilities by.
   */
  ecosystem?: XGitHubSecurityAdvisoryEcosystem | null;

  /**
   * A package name to filter vulnerabilities by.
   */
  package?: string | null;

  /**
   * A list of severities to filter vulnerabilities by.
   */
  severities?: Array<XGitHubSecurityAdvisorySeverity> | null;

  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface ISponsorablesOnXGitHubQueryArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Ordering options for users and organizations returned from the connection.
   * @default {"field":"LOGIN","direction":"ASC"}
   */
  orderBy?: IXGitHubSponsorableOrder | null;

  /**
   * Whether only sponsorables who own the viewer's dependencies will be returned. Must be authenticated to use. Can check an organization instead for their dependencies owned by sponsorables by passing orgLoginForDependencies.
   * @default false
   */
  onlyDependencies?: boolean | null;

  /**
   * Optional organization username for whose dependencies should be checked. Used when onlyDependencies = true. Omit to check your own dependencies. If you are not an administrator of the organization, only dependencies from its public repositories will be considered.
   */
  orgLoginForDependencies?: string | null;

  /**
   * Optional filter for which dependencies should be checked for sponsorable owners. Only sponsorable owners of dependencies in this ecosystem will be included. Used when onlyDependencies = true.
   */
  dependencyEcosystem?: XGitHubSecurityAdvisoryEcosystem | null;
}

export interface ITopicOnXGitHubQueryArguments {
  /**
   * The topic's name.
   */
  name: string;
}

export interface IUserOnXGitHubQueryArguments {
  /**
   * The user's login.
   */
  login: string;
}

/**
 * Represents the client's rate limit.
 */
export interface IXGitHubRateLimit {
  __typename: '_xGitHubRateLimit';

  /**
   * The point cost for the current query counting against the rate limit.
   */
  cost: number;

  /**
   * The maximum number of points the client is permitted to consume in a 60 minute window.
   */
  limit: number;

  /**
   * The maximum number of nodes this query may return
   */
  nodeCount: number;

  /**
   * The number of points remaining in the current rate limit window.
   */
  remaining: number;

  /**
   * The time at which the current rate limit window resets in UTC epoch seconds.
   */
  resetAt: any;

  /**
   * The number of points used in the current rate limit window.
   */
  used: number;
}

/**
 * Represents a subject that can be reacted on.
 */
export type _xGitHubReactable =
  | IXGitHubCommitComment
  | IXGitHubDiscussion
  | IXGitHubDiscussionComment
  | IXGitHubIssue
  | IXGitHubIssueComment
  | IXGitHubPullRequest
  | IXGitHubPullRequestReview
  | IXGitHubPullRequestReviewComment
  | IXGitHubRelease
  | IXGitHubTeamDiscussion
  | IXGitHubTeamDiscussionComment;

/**
 * Represents a subject that can be reacted on.
 */
export interface IXGitHubReactable {
  __typename: '_xGitHubReactable';

  /**
   * Identifies the primary key from the database.
   */
  databaseId: number | null;
  id: string;

  /**
   * A list of reactions grouped by content left on the subject.
   */
  reactionGroups: Array<IXGitHubReactionGroup> | null;

  /**
   * A list of Reactions left on the Issue.
   */
  reactions: IXGitHubReactionConnection;

  /**
   * Can user react to this subject
   */
  viewerCanReact: boolean;
}

export interface IReactionsOnXGitHubReactableArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Allows filtering Reactions by emoji.
   */
  content?: XGitHubReactionContent | null;

  /**
   * Allows specifying the order in which reactions are returned.
   */
  orderBy?: IXGitHubReactionOrder | null;
}

/**
 * The connection type for User.
 */
export interface IXGitHubReactingUserConnection {
  __typename: '_xGitHubReactingUserConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubReactingUserEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitHubUser | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * Represents a user that's made a reaction.
 */
export interface IXGitHubReactingUserEdge {
  __typename: '_xGitHubReactingUserEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  node: IXGitHubUser;

  /**
   * The moment when the user made the reaction.
   */
  reactedAt: any;
}

/**
 * An emoji reaction to a particular piece of content.
 */
export interface IXGitHubReaction {
  __typename: '_xGitHubReaction';

  /**
   * Identifies the emoji reaction.
   */
  content: XGitHubReactionContent;

  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: any;

  /**
   * Identifies the primary key from the database.
   */
  databaseId: number | null;
  id: string;

  /**
   * The reactable piece of content
   */
  reactable: _xGitHubReactable;

  /**
   * Identifies the user who created this reaction.
   */
  user: IXGitHubUser | null;
}

/**
 * A list of reactions that have been left on the subject.
 */
export interface IXGitHubReactionConnection {
  __typename: '_xGitHubReactionConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubReactionEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitHubReaction | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;

  /**
   * Whether or not the authenticated user has left a reaction on the subject.
   */
  viewerHasReacted: boolean;
}

/**
 * Emojis that can be attached to Issues, Pull Requests and Comments.
 */
export const enum XGitHubReactionContent {
  /**
   * Represents the `:+1:` emoji.
   */
  THUMBS_UP = 'THUMBS_UP',

  /**
   * Represents the `:-1:` emoji.
   */
  THUMBS_DOWN = 'THUMBS_DOWN',

  /**
   * Represents the `:laugh:` emoji.
   */
  LAUGH = 'LAUGH',

  /**
   * Represents the `:hooray:` emoji.
   */
  HOORAY = 'HOORAY',

  /**
   * Represents the `:confused:` emoji.
   */
  CONFUSED = 'CONFUSED',

  /**
   * Represents the `:heart:` emoji.
   */
  HEART = 'HEART',

  /**
   * Represents the `:rocket:` emoji.
   */
  ROCKET = 'ROCKET',

  /**
   * Represents the `:eyes:` emoji.
   */
  EYES = 'EYES',
}

/**
 * An edge in a connection.
 */
export interface IXGitHubReactionEdge {
  __typename: '_xGitHubReactionEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitHubReaction | null;
}

/**
 * A group of emoji reactions to a particular piece of content.
 */
export interface IXGitHubReactionGroup {
  __typename: '_xGitHubReactionGroup';

  /**
   * Identifies the emoji reaction.
   */
  content: XGitHubReactionContent;

  /**
   * Identifies when the reaction was created.
   */
  createdAt: any | null;

  /**
   * Reactors to the reaction subject with the emotion represented by this reaction group.
   */
  reactors: IXGitHubReactorConnection;

  /**
   * The subject that was reacted to.
   */
  subject: _xGitHubReactable;

  /**
   * Users who have reacted to the reaction subject with the emotion represented by this reaction group
   * @deprecated "Reactors can now be mannequins, bots, and organizations. Use the `reactors` field instead. Removal on 2021-10-01 UTC."
   */
  users: IXGitHubReactingUserConnection;

  /**
   * Whether or not the authenticated user has left a reaction on the subject.
   */
  viewerHasReacted: boolean;
}

export interface IReactorsOnXGitHubReactionGroupArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IUsersOnXGitHubReactionGroupArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

/**
 * Ways in which lists of reactions can be ordered upon return.
 */
export interface IXGitHubReactionOrder {
  /**
   * The field in which to order reactions by.
   */
  field: XGitHubReactionOrderField;

  /**
   * The direction in which to order reactions by the specified field.
   */
  direction: XGitHubOrderDirection;
}

/**
 * A list of fields that reactions can be ordered by.
 */
export const enum XGitHubReactionOrderField {
  /**
   * Allows ordering a list of reactions by when they were created.
   */
  CREATED_AT = 'CREATED_AT',
}

/**
 * Types that can be assigned to reactions.
 */
export type _xGitHubReactor =
  | IXGitHubBot
  | IXGitHubMannequin
  | IXGitHubOrganization
  | IXGitHubUser;

/**
 * The connection type for Reactor.
 */
export interface IXGitHubReactorConnection {
  __typename: '_xGitHubReactorConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubReactorEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<_xGitHubReactor | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * Represents an author of a reaction.
 */
export interface IXGitHubReactorEdge {
  __typename: '_xGitHubReactorEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The author of the reaction.
   */
  node: _xGitHubReactor;

  /**
   * The moment when the user made the reaction.
   */
  reactedAt: any;
}

/**
 * Represents a 'ready_for_review' event on a given pull request.
 */
export interface IXGitHubReadyForReviewEvent {
  __typename: '_xGitHubReadyForReviewEvent';

  /**
   * Identifies the actor who performed the event.
   */
  actor: _xGitHubActor | null;

  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: any;
  id: string;

  /**
   * PullRequest referenced by event.
   */
  pullRequest: IXGitHubPullRequest;

  /**
   * The HTTP path for this ready for review event.
   */
  resourcePath: any;

  /**
   * The HTTP URL for this ready for review event.
   */
  url: any;
}

/**
 * Represents a Git reference.
 */
export interface IXGitHubRef {
  __typename: '_xGitHubRef';

  /**
   * A list of pull requests with this ref as the head ref.
   */
  associatedPullRequests: IXGitHubPullRequestConnection;

  /**
   * Branch protection rules for this ref
   */
  branchProtectionRule: IXGitHubBranchProtectionRule | null;
  id: string;

  /**
   * The ref name.
   */
  name: string;

  /**
   * The ref's prefix, such as `refs/heads/` or `refs/tags/`.
   */
  prefix: string;

  /**
   * Branch protection rules that are viewable by non-admins
   */
  refUpdateRule: IXGitHubRefUpdateRule | null;

  /**
   * The repository the ref belongs to.
   */
  repository: IXGitHubRepository;

  /**
   * The object the ref points to. Returns null when object does not exist.
   */
  target: _xGitHubGitObject | null;
}

export interface IAssociatedPullRequestsOnXGitHubRefArguments {
  /**
   * A list of states to filter the pull requests by.
   */
  states?: Array<XGitHubPullRequestState> | null;

  /**
   * A list of label names to filter the pull requests by.
   */
  labels?: Array<string> | null;

  /**
   * The head ref name to filter the pull requests by.
   */
  headRefName?: string | null;

  /**
   * The base ref name to filter the pull requests by.
   */
  baseRefName?: string | null;

  /**
   * Ordering options for pull requests returned from the connection.
   */
  orderBy?: IXGitHubIssueOrder | null;

  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

/**
 * The connection type for Ref.
 */
export interface IXGitHubRefConnection {
  __typename: '_xGitHubRefConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubRefEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitHubRef | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface IXGitHubRefEdge {
  __typename: '_xGitHubRefEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitHubRef | null;
}

/**
 * Ways in which lists of git refs can be ordered upon return.
 */
export interface IXGitHubRefOrder {
  /**
   * The field in which to order refs by.
   */
  field: XGitHubRefOrderField;

  /**
   * The direction in which to order refs by the specified field.
   */
  direction: XGitHubOrderDirection;
}

/**
 * Properties by which ref connections can be ordered.
 */
export const enum XGitHubRefOrderField {
  /**
   * Order refs by underlying commit date if the ref prefix is refs/tags/
   */
  TAG_COMMIT_DATE = 'TAG_COMMIT_DATE',

  /**
   * Order refs by their alphanumeric name
   */
  ALPHABETICAL = 'ALPHABETICAL',
}

/**
 * A ref update rules for a viewer.
 */
export interface IXGitHubRefUpdateRule {
  __typename: '_xGitHubRefUpdateRule';

  /**
   * Can this branch be deleted.
   */
  allowsDeletions: boolean;

  /**
   * Are force pushes allowed on this branch.
   */
  allowsForcePushes: boolean;

  /**
   * Identifies the protection rule pattern.
   */
  pattern: string;

  /**
   * Number of approving reviews required to update matching branches.
   */
  requiredApprovingReviewCount: number | null;

  /**
   * List of required status check contexts that must pass for commits to be accepted to matching branches.
   */
  requiredStatusCheckContexts: Array<string | null> | null;

  /**
   * Are reviews from code owners required to update matching branches.
   */
  requiresCodeOwnerReviews: boolean;

  /**
   * Are conversations required to be resolved before merging.
   */
  requiresConversationResolution: boolean;

  /**
   * Are merge commits prohibited from being pushed to this branch.
   */
  requiresLinearHistory: boolean;

  /**
   * Are commits required to be signed.
   */
  requiresSignatures: boolean;

  /**
   * Is the viewer allowed to dismiss reviews.
   */
  viewerAllowedToDismissReviews: boolean;

  /**
   * Can the viewer push to the branch
   */
  viewerCanPush: boolean;
}

/**
 * Represents a 'referenced' event on a given `ReferencedSubject`.
 */
export interface IXGitHubReferencedEvent {
  __typename: '_xGitHubReferencedEvent';

  /**
   * Identifies the actor who performed the event.
   */
  actor: _xGitHubActor | null;

  /**
   * Identifies the commit associated with the 'referenced' event.
   */
  commit: IXGitHubCommit | null;

  /**
   * Identifies the repository associated with the 'referenced' event.
   */
  commitRepository: IXGitHubRepository;

  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: any;
  id: string;

  /**
   * Reference originated in a different repository.
   */
  isCrossRepository: boolean;

  /**
   * Checks if the commit message itself references the subject. Can be false in the case of a commit comment reference.
   */
  isDirectReference: boolean;

  /**
   * Object referenced by event.
   */
  subject: _xGitHubReferencedSubject;
}

/**
 * Any referencable object
 */
export type _xGitHubReferencedSubject = IXGitHubIssue | IXGitHubPullRequest;

/**
 * Autogenerated input type of RegenerateEnterpriseIdentityProviderRecoveryCodes
 */
export interface IXGitHubRegenerateEnterpriseIdentityProviderRecoveryCodesInput {
  /**
   * The ID of the enterprise on which to set an identity provider.
   */
  enterpriseId: string;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of RegenerateEnterpriseIdentityProviderRecoveryCodes
 */
export interface IXGitHubRegenerateEnterpriseIdentityProviderRecoveryCodesPayload {
  __typename: '_xGitHubRegenerateEnterpriseIdentityProviderRecoveryCodesPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The identity provider for the enterprise.
   */
  identityProvider: IXGitHubEnterpriseIdentityProvider | null;
}

/**
 * Autogenerated input type of RegenerateVerifiableDomainToken
 */
export interface IXGitHubRegenerateVerifiableDomainTokenInput {
  /**
   * The ID of the verifiable domain to regenerate the verification token of.
   */
  id: string;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of RegenerateVerifiableDomainToken
 */
export interface IXGitHubRegenerateVerifiableDomainTokenPayload {
  __typename: '_xGitHubRegenerateVerifiableDomainTokenPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The verification token that was generated.
   */
  verificationToken: string | null;
}

/**
 * Autogenerated input type of RejectDeployments
 */
export interface IXGitHubRejectDeploymentsInput {
  /**
   * The node ID of the workflow run containing the pending deployments.
   */
  workflowRunId: string;

  /**
   * The ids of environments to reject deployments
   */
  environmentIds: Array<string>;

  /**
   * Optional comment for rejecting deployments
   * @default ""
   */
  comment?: string | null;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of RejectDeployments
 */
export interface IXGitHubRejectDeploymentsPayload {
  __typename: '_xGitHubRejectDeploymentsPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The affected deployments.
   */
  deployments: Array<IXGitHubDeployment> | null;
}

/**
 * A release contains the content for a release.
 */
export interface IXGitHubRelease {
  __typename: '_xGitHubRelease';

  /**
   * The author of the release
   */
  author: IXGitHubUser | null;

  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: any;

  /**
   * Identifies the primary key from the database.
   */
  databaseId: number | null;

  /**
   * The description of the release.
   */
  description: string | null;

  /**
   * The description of this release rendered to HTML.
   */
  descriptionHTML: any | null;
  id: string;

  /**
   * Whether or not the release is a draft
   */
  isDraft: boolean;

  /**
   * Whether or not the release is the latest releast
   */
  isLatest: boolean;

  /**
   * Whether or not the release is a prerelease
   */
  isPrerelease: boolean;

  /**
   * A list of users mentioned in the release description
   */
  mentions: IXGitHubUserConnection | null;

  /**
   * The title of the release.
   */
  name: string | null;

  /**
   * Identifies the date and time when the release was created.
   */
  publishedAt: any | null;

  /**
   * A list of reactions grouped by content left on the subject.
   */
  reactionGroups: Array<IXGitHubReactionGroup> | null;

  /**
   * A list of Reactions left on the Issue.
   */
  reactions: IXGitHubReactionConnection;

  /**
   * List of releases assets which are dependent on this release.
   */
  releaseAssets: IXGitHubReleaseAssetConnection;

  /**
   * The repository that the release belongs to.
   */
  repository: IXGitHubRepository;

  /**
   * The HTTP path for this issue
   */
  resourcePath: any;

  /**
   * A description of the release, rendered to HTML without any links in it.
   */
  shortDescriptionHTML: any | null;

  /**
   * The Git tag the release points to
   */
  tag: IXGitHubRef | null;

  /**
   * The tag commit for this release.
   */
  tagCommit: IXGitHubCommit | null;

  /**
   * The name of the release's Git tag
   */
  tagName: string;

  /**
   * Identifies the date and time when the object was last updated.
   */
  updatedAt: any;

  /**
   * The HTTP URL for this issue
   */
  url: any;

  /**
   * Can user react to this subject
   */
  viewerCanReact: boolean;
}

export interface IMentionsOnXGitHubReleaseArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IReactionsOnXGitHubReleaseArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Allows filtering Reactions by emoji.
   */
  content?: XGitHubReactionContent | null;

  /**
   * Allows specifying the order in which reactions are returned.
   */
  orderBy?: IXGitHubReactionOrder | null;
}

export interface IReleaseAssetsOnXGitHubReleaseArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * A list of names to filter the assets by.
   */
  name?: string | null;
}

export interface IShortDescriptionHTMLOnXGitHubReleaseArguments {
  /**
   * How many characters to return.
   * @default 200
   */
  limit?: number | null;
}

/**
 * A release asset contains the content for a release asset.
 */
export interface IXGitHubReleaseAsset {
  __typename: '_xGitHubReleaseAsset';

  /**
   * The asset's content-type
   */
  contentType: string;

  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: any;

  /**
   * The number of times this asset was downloaded
   */
  downloadCount: number;

  /**
   * Identifies the URL where you can download the release asset via the browser.
   */
  downloadUrl: any;
  id: string;

  /**
   * Identifies the title of the release asset.
   */
  name: string;

  /**
   * Release that the asset is associated with
   */
  release: IXGitHubRelease | null;

  /**
   * The size (in bytes) of the asset
   */
  size: number;

  /**
   * Identifies the date and time when the object was last updated.
   */
  updatedAt: any;

  /**
   * The user that performed the upload
   */
  uploadedBy: IXGitHubUser;

  /**
   * Identifies the URL of the release asset.
   */
  url: any;
}

/**
 * The connection type for ReleaseAsset.
 */
export interface IXGitHubReleaseAssetConnection {
  __typename: '_xGitHubReleaseAssetConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubReleaseAssetEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitHubReleaseAsset | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface IXGitHubReleaseAssetEdge {
  __typename: '_xGitHubReleaseAssetEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitHubReleaseAsset | null;
}

/**
 * The connection type for Release.
 */
export interface IXGitHubReleaseConnection {
  __typename: '_xGitHubReleaseConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubReleaseEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitHubRelease | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface IXGitHubReleaseEdge {
  __typename: '_xGitHubReleaseEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitHubRelease | null;
}

/**
 * Ways in which lists of releases can be ordered upon return.
 */
export interface IXGitHubReleaseOrder {
  /**
   * The field in which to order releases by.
   */
  field: XGitHubReleaseOrderField;

  /**
   * The direction in which to order releases by the specified field.
   */
  direction: XGitHubOrderDirection;
}

/**
 * Properties by which release connections can be ordered.
 */
export const enum XGitHubReleaseOrderField {
  /**
   * Order releases by creation time
   */
  CREATED_AT = 'CREATED_AT',

  /**
   * Order releases alphabetically by name
   */
  NAME = 'NAME',
}

/**
 * Autogenerated input type of RemoveAssigneesFromAssignable
 */
export interface IXGitHubRemoveAssigneesFromAssignableInput {
  /**
   * The id of the assignable object to remove assignees from.
   */
  assignableId: string;

  /**
   * The id of users to remove as assignees.
   */
  assigneeIds: Array<string>;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of RemoveAssigneesFromAssignable
 */
export interface IXGitHubRemoveAssigneesFromAssignablePayload {
  __typename: '_xGitHubRemoveAssigneesFromAssignablePayload';

  /**
   * The item that was unassigned.
   */
  assignable: _xGitHubAssignable | null;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;
}

/**
 * Autogenerated input type of RemoveEnterpriseAdmin
 */
export interface IXGitHubRemoveEnterpriseAdminInput {
  /**
   * The Enterprise ID from which to remove the administrator.
   */
  enterpriseId: string;

  /**
   * The login of the user to remove as an administrator.
   */
  login: string;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of RemoveEnterpriseAdmin
 */
export interface IXGitHubRemoveEnterpriseAdminPayload {
  __typename: '_xGitHubRemoveEnterpriseAdminPayload';

  /**
   * The user who was removed as an administrator.
   */
  admin: IXGitHubUser | null;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The updated enterprise.
   */
  enterprise: IXGitHubEnterprise | null;

  /**
   * A message confirming the result of removing an administrator.
   */
  message: string | null;

  /**
   * The viewer performing the mutation.
   */
  viewer: IXGitHubUser | null;
}

/**
 * Autogenerated input type of RemoveEnterpriseIdentityProvider
 */
export interface IXGitHubRemoveEnterpriseIdentityProviderInput {
  /**
   * The ID of the enterprise from which to remove the identity provider.
   */
  enterpriseId: string;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of RemoveEnterpriseIdentityProvider
 */
export interface IXGitHubRemoveEnterpriseIdentityProviderPayload {
  __typename: '_xGitHubRemoveEnterpriseIdentityProviderPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The identity provider that was removed from the enterprise.
   */
  identityProvider: IXGitHubEnterpriseIdentityProvider | null;
}

/**
 * Autogenerated input type of RemoveEnterpriseOrganization
 */
export interface IXGitHubRemoveEnterpriseOrganizationInput {
  /**
   * The ID of the enterprise from which the organization should be removed.
   */
  enterpriseId: string;

  /**
   * The ID of the organization to remove from the enterprise.
   */
  organizationId: string;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of RemoveEnterpriseOrganization
 */
export interface IXGitHubRemoveEnterpriseOrganizationPayload {
  __typename: '_xGitHubRemoveEnterpriseOrganizationPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The updated enterprise.
   */
  enterprise: IXGitHubEnterprise | null;

  /**
   * The organization that was removed from the enterprise.
   */
  organization: IXGitHubOrganization | null;

  /**
   * The viewer performing the mutation.
   */
  viewer: IXGitHubUser | null;
}

/**
 * Autogenerated input type of RemoveEnterpriseSupportEntitlement
 */
export interface IXGitHubRemoveEnterpriseSupportEntitlementInput {
  /**
   * The ID of the Enterprise which the admin belongs to.
   */
  enterpriseId: string;

  /**
   * The login of a member who will lose the support entitlement.
   */
  login: string;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of RemoveEnterpriseSupportEntitlement
 */
export interface IXGitHubRemoveEnterpriseSupportEntitlementPayload {
  __typename: '_xGitHubRemoveEnterpriseSupportEntitlementPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * A message confirming the result of removing the support entitlement.
   */
  message: string | null;
}

/**
 * Autogenerated input type of RemoveLabelsFromLabelable
 */
export interface IXGitHubRemoveLabelsFromLabelableInput {
  /**
   * The id of the Labelable to remove labels from.
   */
  labelableId: string;

  /**
   * The ids of labels to remove.
   */
  labelIds: Array<string>;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of RemoveLabelsFromLabelable
 */
export interface IXGitHubRemoveLabelsFromLabelablePayload {
  __typename: '_xGitHubRemoveLabelsFromLabelablePayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The Labelable the labels were removed from.
   */
  labelable: _xGitHubLabelable | null;
}

/**
 * Autogenerated input type of RemoveOutsideCollaborator
 */
export interface IXGitHubRemoveOutsideCollaboratorInput {
  /**
   * The ID of the outside collaborator to remove.
   */
  userId: string;

  /**
   * The ID of the organization to remove the outside collaborator from.
   */
  organizationId: string;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of RemoveOutsideCollaborator
 */
export interface IXGitHubRemoveOutsideCollaboratorPayload {
  __typename: '_xGitHubRemoveOutsideCollaboratorPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The user that was removed as an outside collaborator.
   */
  removedUser: IXGitHubUser | null;
}

/**
 * Autogenerated input type of RemoveReaction
 */
export interface IXGitHubRemoveReactionInput {
  /**
   * The Node ID of the subject to modify.
   */
  subjectId: string;

  /**
   * The name of the emoji reaction to remove.
   */
  content: XGitHubReactionContent;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of RemoveReaction
 */
export interface IXGitHubRemoveReactionPayload {
  __typename: '_xGitHubRemoveReactionPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The reaction object.
   */
  reaction: IXGitHubReaction | null;

  /**
   * The reactable subject.
   */
  subject: _xGitHubReactable | null;
}

/**
 * Autogenerated input type of RemoveStar
 */
export interface IXGitHubRemoveStarInput {
  /**
   * The Starrable ID to unstar.
   */
  starrableId: string;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of RemoveStar
 */
export interface IXGitHubRemoveStarPayload {
  __typename: '_xGitHubRemoveStarPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The starrable.
   */
  starrable: _xGitHubStarrable | null;
}

/**
 * Autogenerated input type of RemoveUpvote
 */
export interface IXGitHubRemoveUpvoteInput {
  /**
   * The Node ID of the discussion or comment to remove upvote.
   */
  subjectId: string;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of RemoveUpvote
 */
export interface IXGitHubRemoveUpvotePayload {
  __typename: '_xGitHubRemoveUpvotePayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The votable subject.
   */
  subject: _xGitHubVotable | null;
}

/**
 * Represents a 'removed_from_project' event on a given issue or pull request.
 */
export interface IXGitHubRemovedFromProjectEvent {
  __typename: '_xGitHubRemovedFromProjectEvent';

  /**
   * Identifies the actor who performed the event.
   */
  actor: _xGitHubActor | null;

  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: any;

  /**
   * Identifies the primary key from the database.
   */
  databaseId: number | null;
  id: string;
}

/**
 * Represents a 'renamed' event on a given issue or pull request
 */
export interface IXGitHubRenamedTitleEvent {
  __typename: '_xGitHubRenamedTitleEvent';

  /**
   * Identifies the actor who performed the event.
   */
  actor: _xGitHubActor | null;

  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: any;

  /**
   * Identifies the current title of the issue or pull request.
   */
  currentTitle: string;
  id: string;

  /**
   * Identifies the previous title of the issue or pull request.
   */
  previousTitle: string;

  /**
   * Subject that was renamed.
   */
  subject: _xGitHubRenamedTitleSubject;
}

/**
 * An object which has a renamable title
 */
export type _xGitHubRenamedTitleSubject = IXGitHubIssue | IXGitHubPullRequest;

/**
 * Autogenerated input type of ReopenIssue
 */
export interface IXGitHubReopenIssueInput {
  /**
   * ID of the issue to be opened.
   */
  issueId: string;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of ReopenIssue
 */
export interface IXGitHubReopenIssuePayload {
  __typename: '_xGitHubReopenIssuePayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The issue that was opened.
   */
  issue: IXGitHubIssue | null;
}

/**
 * Autogenerated input type of ReopenPullRequest
 */
export interface IXGitHubReopenPullRequestInput {
  /**
   * ID of the pull request to be reopened.
   */
  pullRequestId: string;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of ReopenPullRequest
 */
export interface IXGitHubReopenPullRequestPayload {
  __typename: '_xGitHubReopenPullRequestPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The pull request that was reopened.
   */
  pullRequest: IXGitHubPullRequest | null;
}

/**
 * Represents a 'reopened' event on any `Closable`.
 */
export interface IXGitHubReopenedEvent {
  __typename: '_xGitHubReopenedEvent';

  /**
   * Identifies the actor who performed the event.
   */
  actor: _xGitHubActor | null;

  /**
   * Object that was reopened.
   */
  closable: _xGitHubClosable;

  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: any;
  id: string;
}

/**
 * Audit log entry for a repo.access event.
 */
export interface IXGitHubRepoAccessAuditEntry {
  __typename: '_xGitHubRepoAccessAuditEntry';

  /**
   * The action name
   */
  action: string;

  /**
   * The user who initiated the action
   */
  actor: _xGitHubAuditEntryActor | null;

  /**
   * The IP address of the actor
   */
  actorIp: string | null;

  /**
   * A readable representation of the actor's location
   */
  actorLocation: IXGitHubActorLocation | null;

  /**
   * The username of the user who initiated the action
   */
  actorLogin: string | null;

  /**
   * The HTTP path for the actor.
   */
  actorResourcePath: any | null;

  /**
   * The HTTP URL for the actor.
   */
  actorUrl: any | null;

  /**
   * The time the action was initiated
   */
  createdAt: any;
  id: string;

  /**
   * The corresponding operation type for the action
   */
  operationType: XGitHubOperationType | null;

  /**
   * The Organization associated with the Audit Entry.
   */
  organization: IXGitHubOrganization | null;

  /**
   * The name of the Organization.
   */
  organizationName: string | null;

  /**
   * The HTTP path for the organization
   */
  organizationResourcePath: any | null;

  /**
   * The HTTP URL for the organization
   */
  organizationUrl: any | null;

  /**
   * The repository associated with the action
   */
  repository: IXGitHubRepository | null;

  /**
   * The name of the repository
   */
  repositoryName: string | null;

  /**
   * The HTTP path for the repository
   */
  repositoryResourcePath: any | null;

  /**
   * The HTTP URL for the repository
   */
  repositoryUrl: any | null;

  /**
   * The user affected by the action
   */
  user: IXGitHubUser | null;

  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin: string | null;

  /**
   * The HTTP path for the user.
   */
  userResourcePath: any | null;

  /**
   * The HTTP URL for the user.
   */
  userUrl: any | null;

  /**
   * The visibility of the repository
   */
  visibility: XGitHubRepoAccessAuditEntryVisibility | null;
}

/**
 * The privacy of a repository
 */
export const enum XGitHubRepoAccessAuditEntryVisibility {
  /**
   * The repository is visible only to users in the same business.
   */
  INTERNAL = 'INTERNAL',

  /**
   * The repository is visible only to those with explicit access.
   */
  PRIVATE = 'PRIVATE',

  /**
   * The repository is visible to everyone.
   */
  PUBLIC = 'PUBLIC',
}

/**
 * Audit log entry for a repo.add_member event.
 */
export interface IXGitHubRepoAddMemberAuditEntry {
  __typename: '_xGitHubRepoAddMemberAuditEntry';

  /**
   * The action name
   */
  action: string;

  /**
   * The user who initiated the action
   */
  actor: _xGitHubAuditEntryActor | null;

  /**
   * The IP address of the actor
   */
  actorIp: string | null;

  /**
   * A readable representation of the actor's location
   */
  actorLocation: IXGitHubActorLocation | null;

  /**
   * The username of the user who initiated the action
   */
  actorLogin: string | null;

  /**
   * The HTTP path for the actor.
   */
  actorResourcePath: any | null;

  /**
   * The HTTP URL for the actor.
   */
  actorUrl: any | null;

  /**
   * The time the action was initiated
   */
  createdAt: any;
  id: string;

  /**
   * The corresponding operation type for the action
   */
  operationType: XGitHubOperationType | null;

  /**
   * The Organization associated with the Audit Entry.
   */
  organization: IXGitHubOrganization | null;

  /**
   * The name of the Organization.
   */
  organizationName: string | null;

  /**
   * The HTTP path for the organization
   */
  organizationResourcePath: any | null;

  /**
   * The HTTP URL for the organization
   */
  organizationUrl: any | null;

  /**
   * The repository associated with the action
   */
  repository: IXGitHubRepository | null;

  /**
   * The name of the repository
   */
  repositoryName: string | null;

  /**
   * The HTTP path for the repository
   */
  repositoryResourcePath: any | null;

  /**
   * The HTTP URL for the repository
   */
  repositoryUrl: any | null;

  /**
   * The user affected by the action
   */
  user: IXGitHubUser | null;

  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin: string | null;

  /**
   * The HTTP path for the user.
   */
  userResourcePath: any | null;

  /**
   * The HTTP URL for the user.
   */
  userUrl: any | null;

  /**
   * The visibility of the repository
   */
  visibility: XGitHubRepoAddMemberAuditEntryVisibility | null;
}

/**
 * The privacy of a repository
 */
export const enum XGitHubRepoAddMemberAuditEntryVisibility {
  /**
   * The repository is visible only to users in the same business.
   */
  INTERNAL = 'INTERNAL',

  /**
   * The repository is visible only to those with explicit access.
   */
  PRIVATE = 'PRIVATE',

  /**
   * The repository is visible to everyone.
   */
  PUBLIC = 'PUBLIC',
}

/**
 * Audit log entry for a repo.add_topic event.
 */
export interface IXGitHubRepoAddTopicAuditEntry {
  __typename: '_xGitHubRepoAddTopicAuditEntry';

  /**
   * The action name
   */
  action: string;

  /**
   * The user who initiated the action
   */
  actor: _xGitHubAuditEntryActor | null;

  /**
   * The IP address of the actor
   */
  actorIp: string | null;

  /**
   * A readable representation of the actor's location
   */
  actorLocation: IXGitHubActorLocation | null;

  /**
   * The username of the user who initiated the action
   */
  actorLogin: string | null;

  /**
   * The HTTP path for the actor.
   */
  actorResourcePath: any | null;

  /**
   * The HTTP URL for the actor.
   */
  actorUrl: any | null;

  /**
   * The time the action was initiated
   */
  createdAt: any;
  id: string;

  /**
   * The corresponding operation type for the action
   */
  operationType: XGitHubOperationType | null;

  /**
   * The Organization associated with the Audit Entry.
   */
  organization: IXGitHubOrganization | null;

  /**
   * The name of the Organization.
   */
  organizationName: string | null;

  /**
   * The HTTP path for the organization
   */
  organizationResourcePath: any | null;

  /**
   * The HTTP URL for the organization
   */
  organizationUrl: any | null;

  /**
   * The repository associated with the action
   */
  repository: IXGitHubRepository | null;

  /**
   * The name of the repository
   */
  repositoryName: string | null;

  /**
   * The HTTP path for the repository
   */
  repositoryResourcePath: any | null;

  /**
   * The HTTP URL for the repository
   */
  repositoryUrl: any | null;

  /**
   * The name of the topic added to the repository
   */
  topic: IXGitHubTopic | null;

  /**
   * The name of the topic added to the repository
   */
  topicName: string | null;

  /**
   * The user affected by the action
   */
  user: IXGitHubUser | null;

  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin: string | null;

  /**
   * The HTTP path for the user.
   */
  userResourcePath: any | null;

  /**
   * The HTTP URL for the user.
   */
  userUrl: any | null;
}

/**
 * Audit log entry for a repo.archived event.
 */
export interface IXGitHubRepoArchivedAuditEntry {
  __typename: '_xGitHubRepoArchivedAuditEntry';

  /**
   * The action name
   */
  action: string;

  /**
   * The user who initiated the action
   */
  actor: _xGitHubAuditEntryActor | null;

  /**
   * The IP address of the actor
   */
  actorIp: string | null;

  /**
   * A readable representation of the actor's location
   */
  actorLocation: IXGitHubActorLocation | null;

  /**
   * The username of the user who initiated the action
   */
  actorLogin: string | null;

  /**
   * The HTTP path for the actor.
   */
  actorResourcePath: any | null;

  /**
   * The HTTP URL for the actor.
   */
  actorUrl: any | null;

  /**
   * The time the action was initiated
   */
  createdAt: any;
  id: string;

  /**
   * The corresponding operation type for the action
   */
  operationType: XGitHubOperationType | null;

  /**
   * The Organization associated with the Audit Entry.
   */
  organization: IXGitHubOrganization | null;

  /**
   * The name of the Organization.
   */
  organizationName: string | null;

  /**
   * The HTTP path for the organization
   */
  organizationResourcePath: any | null;

  /**
   * The HTTP URL for the organization
   */
  organizationUrl: any | null;

  /**
   * The repository associated with the action
   */
  repository: IXGitHubRepository | null;

  /**
   * The name of the repository
   */
  repositoryName: string | null;

  /**
   * The HTTP path for the repository
   */
  repositoryResourcePath: any | null;

  /**
   * The HTTP URL for the repository
   */
  repositoryUrl: any | null;

  /**
   * The user affected by the action
   */
  user: IXGitHubUser | null;

  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin: string | null;

  /**
   * The HTTP path for the user.
   */
  userResourcePath: any | null;

  /**
   * The HTTP URL for the user.
   */
  userUrl: any | null;

  /**
   * The visibility of the repository
   */
  visibility: XGitHubRepoArchivedAuditEntryVisibility | null;
}

/**
 * The privacy of a repository
 */
export const enum XGitHubRepoArchivedAuditEntryVisibility {
  /**
   * The repository is visible only to users in the same business.
   */
  INTERNAL = 'INTERNAL',

  /**
   * The repository is visible only to those with explicit access.
   */
  PRIVATE = 'PRIVATE',

  /**
   * The repository is visible to everyone.
   */
  PUBLIC = 'PUBLIC',
}

/**
 * Audit log entry for a repo.change_merge_setting event.
 */
export interface IXGitHubRepoChangeMergeSettingAuditEntry {
  __typename: '_xGitHubRepoChangeMergeSettingAuditEntry';

  /**
   * The action name
   */
  action: string;

  /**
   * The user who initiated the action
   */
  actor: _xGitHubAuditEntryActor | null;

  /**
   * The IP address of the actor
   */
  actorIp: string | null;

  /**
   * A readable representation of the actor's location
   */
  actorLocation: IXGitHubActorLocation | null;

  /**
   * The username of the user who initiated the action
   */
  actorLogin: string | null;

  /**
   * The HTTP path for the actor.
   */
  actorResourcePath: any | null;

  /**
   * The HTTP URL for the actor.
   */
  actorUrl: any | null;

  /**
   * The time the action was initiated
   */
  createdAt: any;
  id: string;

  /**
   * Whether the change was to enable (true) or disable (false) the merge type
   */
  isEnabled: boolean | null;

  /**
   * The merge method affected by the change
   */
  mergeType: XGitHubRepoChangeMergeSettingAuditEntryMergeType | null;

  /**
   * The corresponding operation type for the action
   */
  operationType: XGitHubOperationType | null;

  /**
   * The Organization associated with the Audit Entry.
   */
  organization: IXGitHubOrganization | null;

  /**
   * The name of the Organization.
   */
  organizationName: string | null;

  /**
   * The HTTP path for the organization
   */
  organizationResourcePath: any | null;

  /**
   * The HTTP URL for the organization
   */
  organizationUrl: any | null;

  /**
   * The repository associated with the action
   */
  repository: IXGitHubRepository | null;

  /**
   * The name of the repository
   */
  repositoryName: string | null;

  /**
   * The HTTP path for the repository
   */
  repositoryResourcePath: any | null;

  /**
   * The HTTP URL for the repository
   */
  repositoryUrl: any | null;

  /**
   * The user affected by the action
   */
  user: IXGitHubUser | null;

  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin: string | null;

  /**
   * The HTTP path for the user.
   */
  userResourcePath: any | null;

  /**
   * The HTTP URL for the user.
   */
  userUrl: any | null;
}

/**
 * The merge options available for pull requests to this repository.
 */
export const enum XGitHubRepoChangeMergeSettingAuditEntryMergeType {
  /**
   * The pull request is added to the base branch in a merge commit.
   */
  MERGE = 'MERGE',

  /**
   * Commits from the pull request are added onto the base branch individually without a merge commit.
   */
  REBASE = 'REBASE',

  /**
   * The pull request's commits are squashed into a single commit before they are merged to the base branch.
   */
  SQUASH = 'SQUASH',
}

/**
 * Audit log entry for a repo.config.disable_anonymous_git_access event.
 */
export interface IXGitHubRepoConfigDisableAnonymousGitAccessAuditEntry {
  __typename: '_xGitHubRepoConfigDisableAnonymousGitAccessAuditEntry';

  /**
   * The action name
   */
  action: string;

  /**
   * The user who initiated the action
   */
  actor: _xGitHubAuditEntryActor | null;

  /**
   * The IP address of the actor
   */
  actorIp: string | null;

  /**
   * A readable representation of the actor's location
   */
  actorLocation: IXGitHubActorLocation | null;

  /**
   * The username of the user who initiated the action
   */
  actorLogin: string | null;

  /**
   * The HTTP path for the actor.
   */
  actorResourcePath: any | null;

  /**
   * The HTTP URL for the actor.
   */
  actorUrl: any | null;

  /**
   * The time the action was initiated
   */
  createdAt: any;
  id: string;

  /**
   * The corresponding operation type for the action
   */
  operationType: XGitHubOperationType | null;

  /**
   * The Organization associated with the Audit Entry.
   */
  organization: IXGitHubOrganization | null;

  /**
   * The name of the Organization.
   */
  organizationName: string | null;

  /**
   * The HTTP path for the organization
   */
  organizationResourcePath: any | null;

  /**
   * The HTTP URL for the organization
   */
  organizationUrl: any | null;

  /**
   * The repository associated with the action
   */
  repository: IXGitHubRepository | null;

  /**
   * The name of the repository
   */
  repositoryName: string | null;

  /**
   * The HTTP path for the repository
   */
  repositoryResourcePath: any | null;

  /**
   * The HTTP URL for the repository
   */
  repositoryUrl: any | null;

  /**
   * The user affected by the action
   */
  user: IXGitHubUser | null;

  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin: string | null;

  /**
   * The HTTP path for the user.
   */
  userResourcePath: any | null;

  /**
   * The HTTP URL for the user.
   */
  userUrl: any | null;
}

/**
 * Audit log entry for a repo.config.disable_collaborators_only event.
 */
export interface IXGitHubRepoConfigDisableCollaboratorsOnlyAuditEntry {
  __typename: '_xGitHubRepoConfigDisableCollaboratorsOnlyAuditEntry';

  /**
   * The action name
   */
  action: string;

  /**
   * The user who initiated the action
   */
  actor: _xGitHubAuditEntryActor | null;

  /**
   * The IP address of the actor
   */
  actorIp: string | null;

  /**
   * A readable representation of the actor's location
   */
  actorLocation: IXGitHubActorLocation | null;

  /**
   * The username of the user who initiated the action
   */
  actorLogin: string | null;

  /**
   * The HTTP path for the actor.
   */
  actorResourcePath: any | null;

  /**
   * The HTTP URL for the actor.
   */
  actorUrl: any | null;

  /**
   * The time the action was initiated
   */
  createdAt: any;
  id: string;

  /**
   * The corresponding operation type for the action
   */
  operationType: XGitHubOperationType | null;

  /**
   * The Organization associated with the Audit Entry.
   */
  organization: IXGitHubOrganization | null;

  /**
   * The name of the Organization.
   */
  organizationName: string | null;

  /**
   * The HTTP path for the organization
   */
  organizationResourcePath: any | null;

  /**
   * The HTTP URL for the organization
   */
  organizationUrl: any | null;

  /**
   * The repository associated with the action
   */
  repository: IXGitHubRepository | null;

  /**
   * The name of the repository
   */
  repositoryName: string | null;

  /**
   * The HTTP path for the repository
   */
  repositoryResourcePath: any | null;

  /**
   * The HTTP URL for the repository
   */
  repositoryUrl: any | null;

  /**
   * The user affected by the action
   */
  user: IXGitHubUser | null;

  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin: string | null;

  /**
   * The HTTP path for the user.
   */
  userResourcePath: any | null;

  /**
   * The HTTP URL for the user.
   */
  userUrl: any | null;
}

/**
 * Audit log entry for a repo.config.disable_contributors_only event.
 */
export interface IXGitHubRepoConfigDisableContributorsOnlyAuditEntry {
  __typename: '_xGitHubRepoConfigDisableContributorsOnlyAuditEntry';

  /**
   * The action name
   */
  action: string;

  /**
   * The user who initiated the action
   */
  actor: _xGitHubAuditEntryActor | null;

  /**
   * The IP address of the actor
   */
  actorIp: string | null;

  /**
   * A readable representation of the actor's location
   */
  actorLocation: IXGitHubActorLocation | null;

  /**
   * The username of the user who initiated the action
   */
  actorLogin: string | null;

  /**
   * The HTTP path for the actor.
   */
  actorResourcePath: any | null;

  /**
   * The HTTP URL for the actor.
   */
  actorUrl: any | null;

  /**
   * The time the action was initiated
   */
  createdAt: any;
  id: string;

  /**
   * The corresponding operation type for the action
   */
  operationType: XGitHubOperationType | null;

  /**
   * The Organization associated with the Audit Entry.
   */
  organization: IXGitHubOrganization | null;

  /**
   * The name of the Organization.
   */
  organizationName: string | null;

  /**
   * The HTTP path for the organization
   */
  organizationResourcePath: any | null;

  /**
   * The HTTP URL for the organization
   */
  organizationUrl: any | null;

  /**
   * The repository associated with the action
   */
  repository: IXGitHubRepository | null;

  /**
   * The name of the repository
   */
  repositoryName: string | null;

  /**
   * The HTTP path for the repository
   */
  repositoryResourcePath: any | null;

  /**
   * The HTTP URL for the repository
   */
  repositoryUrl: any | null;

  /**
   * The user affected by the action
   */
  user: IXGitHubUser | null;

  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin: string | null;

  /**
   * The HTTP path for the user.
   */
  userResourcePath: any | null;

  /**
   * The HTTP URL for the user.
   */
  userUrl: any | null;
}

/**
 * Audit log entry for a repo.config.disable_sockpuppet_disallowed event.
 */
export interface IXGitHubRepoConfigDisableSockpuppetDisallowedAuditEntry {
  __typename: '_xGitHubRepoConfigDisableSockpuppetDisallowedAuditEntry';

  /**
   * The action name
   */
  action: string;

  /**
   * The user who initiated the action
   */
  actor: _xGitHubAuditEntryActor | null;

  /**
   * The IP address of the actor
   */
  actorIp: string | null;

  /**
   * A readable representation of the actor's location
   */
  actorLocation: IXGitHubActorLocation | null;

  /**
   * The username of the user who initiated the action
   */
  actorLogin: string | null;

  /**
   * The HTTP path for the actor.
   */
  actorResourcePath: any | null;

  /**
   * The HTTP URL for the actor.
   */
  actorUrl: any | null;

  /**
   * The time the action was initiated
   */
  createdAt: any;
  id: string;

  /**
   * The corresponding operation type for the action
   */
  operationType: XGitHubOperationType | null;

  /**
   * The Organization associated with the Audit Entry.
   */
  organization: IXGitHubOrganization | null;

  /**
   * The name of the Organization.
   */
  organizationName: string | null;

  /**
   * The HTTP path for the organization
   */
  organizationResourcePath: any | null;

  /**
   * The HTTP URL for the organization
   */
  organizationUrl: any | null;

  /**
   * The repository associated with the action
   */
  repository: IXGitHubRepository | null;

  /**
   * The name of the repository
   */
  repositoryName: string | null;

  /**
   * The HTTP path for the repository
   */
  repositoryResourcePath: any | null;

  /**
   * The HTTP URL for the repository
   */
  repositoryUrl: any | null;

  /**
   * The user affected by the action
   */
  user: IXGitHubUser | null;

  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin: string | null;

  /**
   * The HTTP path for the user.
   */
  userResourcePath: any | null;

  /**
   * The HTTP URL for the user.
   */
  userUrl: any | null;
}

/**
 * Audit log entry for a repo.config.enable_anonymous_git_access event.
 */
export interface IXGitHubRepoConfigEnableAnonymousGitAccessAuditEntry {
  __typename: '_xGitHubRepoConfigEnableAnonymousGitAccessAuditEntry';

  /**
   * The action name
   */
  action: string;

  /**
   * The user who initiated the action
   */
  actor: _xGitHubAuditEntryActor | null;

  /**
   * The IP address of the actor
   */
  actorIp: string | null;

  /**
   * A readable representation of the actor's location
   */
  actorLocation: IXGitHubActorLocation | null;

  /**
   * The username of the user who initiated the action
   */
  actorLogin: string | null;

  /**
   * The HTTP path for the actor.
   */
  actorResourcePath: any | null;

  /**
   * The HTTP URL for the actor.
   */
  actorUrl: any | null;

  /**
   * The time the action was initiated
   */
  createdAt: any;
  id: string;

  /**
   * The corresponding operation type for the action
   */
  operationType: XGitHubOperationType | null;

  /**
   * The Organization associated with the Audit Entry.
   */
  organization: IXGitHubOrganization | null;

  /**
   * The name of the Organization.
   */
  organizationName: string | null;

  /**
   * The HTTP path for the organization
   */
  organizationResourcePath: any | null;

  /**
   * The HTTP URL for the organization
   */
  organizationUrl: any | null;

  /**
   * The repository associated with the action
   */
  repository: IXGitHubRepository | null;

  /**
   * The name of the repository
   */
  repositoryName: string | null;

  /**
   * The HTTP path for the repository
   */
  repositoryResourcePath: any | null;

  /**
   * The HTTP URL for the repository
   */
  repositoryUrl: any | null;

  /**
   * The user affected by the action
   */
  user: IXGitHubUser | null;

  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin: string | null;

  /**
   * The HTTP path for the user.
   */
  userResourcePath: any | null;

  /**
   * The HTTP URL for the user.
   */
  userUrl: any | null;
}

/**
 * Audit log entry for a repo.config.enable_collaborators_only event.
 */
export interface IXGitHubRepoConfigEnableCollaboratorsOnlyAuditEntry {
  __typename: '_xGitHubRepoConfigEnableCollaboratorsOnlyAuditEntry';

  /**
   * The action name
   */
  action: string;

  /**
   * The user who initiated the action
   */
  actor: _xGitHubAuditEntryActor | null;

  /**
   * The IP address of the actor
   */
  actorIp: string | null;

  /**
   * A readable representation of the actor's location
   */
  actorLocation: IXGitHubActorLocation | null;

  /**
   * The username of the user who initiated the action
   */
  actorLogin: string | null;

  /**
   * The HTTP path for the actor.
   */
  actorResourcePath: any | null;

  /**
   * The HTTP URL for the actor.
   */
  actorUrl: any | null;

  /**
   * The time the action was initiated
   */
  createdAt: any;
  id: string;

  /**
   * The corresponding operation type for the action
   */
  operationType: XGitHubOperationType | null;

  /**
   * The Organization associated with the Audit Entry.
   */
  organization: IXGitHubOrganization | null;

  /**
   * The name of the Organization.
   */
  organizationName: string | null;

  /**
   * The HTTP path for the organization
   */
  organizationResourcePath: any | null;

  /**
   * The HTTP URL for the organization
   */
  organizationUrl: any | null;

  /**
   * The repository associated with the action
   */
  repository: IXGitHubRepository | null;

  /**
   * The name of the repository
   */
  repositoryName: string | null;

  /**
   * The HTTP path for the repository
   */
  repositoryResourcePath: any | null;

  /**
   * The HTTP URL for the repository
   */
  repositoryUrl: any | null;

  /**
   * The user affected by the action
   */
  user: IXGitHubUser | null;

  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin: string | null;

  /**
   * The HTTP path for the user.
   */
  userResourcePath: any | null;

  /**
   * The HTTP URL for the user.
   */
  userUrl: any | null;
}

/**
 * Audit log entry for a repo.config.enable_contributors_only event.
 */
export interface IXGitHubRepoConfigEnableContributorsOnlyAuditEntry {
  __typename: '_xGitHubRepoConfigEnableContributorsOnlyAuditEntry';

  /**
   * The action name
   */
  action: string;

  /**
   * The user who initiated the action
   */
  actor: _xGitHubAuditEntryActor | null;

  /**
   * The IP address of the actor
   */
  actorIp: string | null;

  /**
   * A readable representation of the actor's location
   */
  actorLocation: IXGitHubActorLocation | null;

  /**
   * The username of the user who initiated the action
   */
  actorLogin: string | null;

  /**
   * The HTTP path for the actor.
   */
  actorResourcePath: any | null;

  /**
   * The HTTP URL for the actor.
   */
  actorUrl: any | null;

  /**
   * The time the action was initiated
   */
  createdAt: any;
  id: string;

  /**
   * The corresponding operation type for the action
   */
  operationType: XGitHubOperationType | null;

  /**
   * The Organization associated with the Audit Entry.
   */
  organization: IXGitHubOrganization | null;

  /**
   * The name of the Organization.
   */
  organizationName: string | null;

  /**
   * The HTTP path for the organization
   */
  organizationResourcePath: any | null;

  /**
   * The HTTP URL for the organization
   */
  organizationUrl: any | null;

  /**
   * The repository associated with the action
   */
  repository: IXGitHubRepository | null;

  /**
   * The name of the repository
   */
  repositoryName: string | null;

  /**
   * The HTTP path for the repository
   */
  repositoryResourcePath: any | null;

  /**
   * The HTTP URL for the repository
   */
  repositoryUrl: any | null;

  /**
   * The user affected by the action
   */
  user: IXGitHubUser | null;

  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin: string | null;

  /**
   * The HTTP path for the user.
   */
  userResourcePath: any | null;

  /**
   * The HTTP URL for the user.
   */
  userUrl: any | null;
}

/**
 * Audit log entry for a repo.config.enable_sockpuppet_disallowed event.
 */
export interface IXGitHubRepoConfigEnableSockpuppetDisallowedAuditEntry {
  __typename: '_xGitHubRepoConfigEnableSockpuppetDisallowedAuditEntry';

  /**
   * The action name
   */
  action: string;

  /**
   * The user who initiated the action
   */
  actor: _xGitHubAuditEntryActor | null;

  /**
   * The IP address of the actor
   */
  actorIp: string | null;

  /**
   * A readable representation of the actor's location
   */
  actorLocation: IXGitHubActorLocation | null;

  /**
   * The username of the user who initiated the action
   */
  actorLogin: string | null;

  /**
   * The HTTP path for the actor.
   */
  actorResourcePath: any | null;

  /**
   * The HTTP URL for the actor.
   */
  actorUrl: any | null;

  /**
   * The time the action was initiated
   */
  createdAt: any;
  id: string;

  /**
   * The corresponding operation type for the action
   */
  operationType: XGitHubOperationType | null;

  /**
   * The Organization associated with the Audit Entry.
   */
  organization: IXGitHubOrganization | null;

  /**
   * The name of the Organization.
   */
  organizationName: string | null;

  /**
   * The HTTP path for the organization
   */
  organizationResourcePath: any | null;

  /**
   * The HTTP URL for the organization
   */
  organizationUrl: any | null;

  /**
   * The repository associated with the action
   */
  repository: IXGitHubRepository | null;

  /**
   * The name of the repository
   */
  repositoryName: string | null;

  /**
   * The HTTP path for the repository
   */
  repositoryResourcePath: any | null;

  /**
   * The HTTP URL for the repository
   */
  repositoryUrl: any | null;

  /**
   * The user affected by the action
   */
  user: IXGitHubUser | null;

  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin: string | null;

  /**
   * The HTTP path for the user.
   */
  userResourcePath: any | null;

  /**
   * The HTTP URL for the user.
   */
  userUrl: any | null;
}

/**
 * Audit log entry for a repo.config.lock_anonymous_git_access event.
 */
export interface IXGitHubRepoConfigLockAnonymousGitAccessAuditEntry {
  __typename: '_xGitHubRepoConfigLockAnonymousGitAccessAuditEntry';

  /**
   * The action name
   */
  action: string;

  /**
   * The user who initiated the action
   */
  actor: _xGitHubAuditEntryActor | null;

  /**
   * The IP address of the actor
   */
  actorIp: string | null;

  /**
   * A readable representation of the actor's location
   */
  actorLocation: IXGitHubActorLocation | null;

  /**
   * The username of the user who initiated the action
   */
  actorLogin: string | null;

  /**
   * The HTTP path for the actor.
   */
  actorResourcePath: any | null;

  /**
   * The HTTP URL for the actor.
   */
  actorUrl: any | null;

  /**
   * The time the action was initiated
   */
  createdAt: any;
  id: string;

  /**
   * The corresponding operation type for the action
   */
  operationType: XGitHubOperationType | null;

  /**
   * The Organization associated with the Audit Entry.
   */
  organization: IXGitHubOrganization | null;

  /**
   * The name of the Organization.
   */
  organizationName: string | null;

  /**
   * The HTTP path for the organization
   */
  organizationResourcePath: any | null;

  /**
   * The HTTP URL for the organization
   */
  organizationUrl: any | null;

  /**
   * The repository associated with the action
   */
  repository: IXGitHubRepository | null;

  /**
   * The name of the repository
   */
  repositoryName: string | null;

  /**
   * The HTTP path for the repository
   */
  repositoryResourcePath: any | null;

  /**
   * The HTTP URL for the repository
   */
  repositoryUrl: any | null;

  /**
   * The user affected by the action
   */
  user: IXGitHubUser | null;

  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin: string | null;

  /**
   * The HTTP path for the user.
   */
  userResourcePath: any | null;

  /**
   * The HTTP URL for the user.
   */
  userUrl: any | null;
}

/**
 * Audit log entry for a repo.config.unlock_anonymous_git_access event.
 */
export interface IXGitHubRepoConfigUnlockAnonymousGitAccessAuditEntry {
  __typename: '_xGitHubRepoConfigUnlockAnonymousGitAccessAuditEntry';

  /**
   * The action name
   */
  action: string;

  /**
   * The user who initiated the action
   */
  actor: _xGitHubAuditEntryActor | null;

  /**
   * The IP address of the actor
   */
  actorIp: string | null;

  /**
   * A readable representation of the actor's location
   */
  actorLocation: IXGitHubActorLocation | null;

  /**
   * The username of the user who initiated the action
   */
  actorLogin: string | null;

  /**
   * The HTTP path for the actor.
   */
  actorResourcePath: any | null;

  /**
   * The HTTP URL for the actor.
   */
  actorUrl: any | null;

  /**
   * The time the action was initiated
   */
  createdAt: any;
  id: string;

  /**
   * The corresponding operation type for the action
   */
  operationType: XGitHubOperationType | null;

  /**
   * The Organization associated with the Audit Entry.
   */
  organization: IXGitHubOrganization | null;

  /**
   * The name of the Organization.
   */
  organizationName: string | null;

  /**
   * The HTTP path for the organization
   */
  organizationResourcePath: any | null;

  /**
   * The HTTP URL for the organization
   */
  organizationUrl: any | null;

  /**
   * The repository associated with the action
   */
  repository: IXGitHubRepository | null;

  /**
   * The name of the repository
   */
  repositoryName: string | null;

  /**
   * The HTTP path for the repository
   */
  repositoryResourcePath: any | null;

  /**
   * The HTTP URL for the repository
   */
  repositoryUrl: any | null;

  /**
   * The user affected by the action
   */
  user: IXGitHubUser | null;

  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin: string | null;

  /**
   * The HTTP path for the user.
   */
  userResourcePath: any | null;

  /**
   * The HTTP URL for the user.
   */
  userUrl: any | null;
}

/**
 * Audit log entry for a repo.create event.
 */
export interface IXGitHubRepoCreateAuditEntry {
  __typename: '_xGitHubRepoCreateAuditEntry';

  /**
   * The action name
   */
  action: string;

  /**
   * The user who initiated the action
   */
  actor: _xGitHubAuditEntryActor | null;

  /**
   * The IP address of the actor
   */
  actorIp: string | null;

  /**
   * A readable representation of the actor's location
   */
  actorLocation: IXGitHubActorLocation | null;

  /**
   * The username of the user who initiated the action
   */
  actorLogin: string | null;

  /**
   * The HTTP path for the actor.
   */
  actorResourcePath: any | null;

  /**
   * The HTTP URL for the actor.
   */
  actorUrl: any | null;

  /**
   * The time the action was initiated
   */
  createdAt: any;

  /**
   * The name of the parent repository for this forked repository.
   */
  forkParentName: string | null;

  /**
   * The name of the root repository for this network.
   */
  forkSourceName: string | null;
  id: string;

  /**
   * The corresponding operation type for the action
   */
  operationType: XGitHubOperationType | null;

  /**
   * The Organization associated with the Audit Entry.
   */
  organization: IXGitHubOrganization | null;

  /**
   * The name of the Organization.
   */
  organizationName: string | null;

  /**
   * The HTTP path for the organization
   */
  organizationResourcePath: any | null;

  /**
   * The HTTP URL for the organization
   */
  organizationUrl: any | null;

  /**
   * The repository associated with the action
   */
  repository: IXGitHubRepository | null;

  /**
   * The name of the repository
   */
  repositoryName: string | null;

  /**
   * The HTTP path for the repository
   */
  repositoryResourcePath: any | null;

  /**
   * The HTTP URL for the repository
   */
  repositoryUrl: any | null;

  /**
   * The user affected by the action
   */
  user: IXGitHubUser | null;

  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin: string | null;

  /**
   * The HTTP path for the user.
   */
  userResourcePath: any | null;

  /**
   * The HTTP URL for the user.
   */
  userUrl: any | null;

  /**
   * The visibility of the repository
   */
  visibility: XGitHubRepoCreateAuditEntryVisibility | null;
}

/**
 * The privacy of a repository
 */
export const enum XGitHubRepoCreateAuditEntryVisibility {
  /**
   * The repository is visible only to users in the same business.
   */
  INTERNAL = 'INTERNAL',

  /**
   * The repository is visible only to those with explicit access.
   */
  PRIVATE = 'PRIVATE',

  /**
   * The repository is visible to everyone.
   */
  PUBLIC = 'PUBLIC',
}

/**
 * Audit log entry for a repo.destroy event.
 */
export interface IXGitHubRepoDestroyAuditEntry {
  __typename: '_xGitHubRepoDestroyAuditEntry';

  /**
   * The action name
   */
  action: string;

  /**
   * The user who initiated the action
   */
  actor: _xGitHubAuditEntryActor | null;

  /**
   * The IP address of the actor
   */
  actorIp: string | null;

  /**
   * A readable representation of the actor's location
   */
  actorLocation: IXGitHubActorLocation | null;

  /**
   * The username of the user who initiated the action
   */
  actorLogin: string | null;

  /**
   * The HTTP path for the actor.
   */
  actorResourcePath: any | null;

  /**
   * The HTTP URL for the actor.
   */
  actorUrl: any | null;

  /**
   * The time the action was initiated
   */
  createdAt: any;
  id: string;

  /**
   * The corresponding operation type for the action
   */
  operationType: XGitHubOperationType | null;

  /**
   * The Organization associated with the Audit Entry.
   */
  organization: IXGitHubOrganization | null;

  /**
   * The name of the Organization.
   */
  organizationName: string | null;

  /**
   * The HTTP path for the organization
   */
  organizationResourcePath: any | null;

  /**
   * The HTTP URL for the organization
   */
  organizationUrl: any | null;

  /**
   * The repository associated with the action
   */
  repository: IXGitHubRepository | null;

  /**
   * The name of the repository
   */
  repositoryName: string | null;

  /**
   * The HTTP path for the repository
   */
  repositoryResourcePath: any | null;

  /**
   * The HTTP URL for the repository
   */
  repositoryUrl: any | null;

  /**
   * The user affected by the action
   */
  user: IXGitHubUser | null;

  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin: string | null;

  /**
   * The HTTP path for the user.
   */
  userResourcePath: any | null;

  /**
   * The HTTP URL for the user.
   */
  userUrl: any | null;

  /**
   * The visibility of the repository
   */
  visibility: XGitHubRepoDestroyAuditEntryVisibility | null;
}

/**
 * The privacy of a repository
 */
export const enum XGitHubRepoDestroyAuditEntryVisibility {
  /**
   * The repository is visible only to users in the same business.
   */
  INTERNAL = 'INTERNAL',

  /**
   * The repository is visible only to those with explicit access.
   */
  PRIVATE = 'PRIVATE',

  /**
   * The repository is visible to everyone.
   */
  PUBLIC = 'PUBLIC',
}

/**
 * Audit log entry for a repo.remove_member event.
 */
export interface IXGitHubRepoRemoveMemberAuditEntry {
  __typename: '_xGitHubRepoRemoveMemberAuditEntry';

  /**
   * The action name
   */
  action: string;

  /**
   * The user who initiated the action
   */
  actor: _xGitHubAuditEntryActor | null;

  /**
   * The IP address of the actor
   */
  actorIp: string | null;

  /**
   * A readable representation of the actor's location
   */
  actorLocation: IXGitHubActorLocation | null;

  /**
   * The username of the user who initiated the action
   */
  actorLogin: string | null;

  /**
   * The HTTP path for the actor.
   */
  actorResourcePath: any | null;

  /**
   * The HTTP URL for the actor.
   */
  actorUrl: any | null;

  /**
   * The time the action was initiated
   */
  createdAt: any;
  id: string;

  /**
   * The corresponding operation type for the action
   */
  operationType: XGitHubOperationType | null;

  /**
   * The Organization associated with the Audit Entry.
   */
  organization: IXGitHubOrganization | null;

  /**
   * The name of the Organization.
   */
  organizationName: string | null;

  /**
   * The HTTP path for the organization
   */
  organizationResourcePath: any | null;

  /**
   * The HTTP URL for the organization
   */
  organizationUrl: any | null;

  /**
   * The repository associated with the action
   */
  repository: IXGitHubRepository | null;

  /**
   * The name of the repository
   */
  repositoryName: string | null;

  /**
   * The HTTP path for the repository
   */
  repositoryResourcePath: any | null;

  /**
   * The HTTP URL for the repository
   */
  repositoryUrl: any | null;

  /**
   * The user affected by the action
   */
  user: IXGitHubUser | null;

  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin: string | null;

  /**
   * The HTTP path for the user.
   */
  userResourcePath: any | null;

  /**
   * The HTTP URL for the user.
   */
  userUrl: any | null;

  /**
   * The visibility of the repository
   */
  visibility: XGitHubRepoRemoveMemberAuditEntryVisibility | null;
}

/**
 * The privacy of a repository
 */
export const enum XGitHubRepoRemoveMemberAuditEntryVisibility {
  /**
   * The repository is visible only to users in the same business.
   */
  INTERNAL = 'INTERNAL',

  /**
   * The repository is visible only to those with explicit access.
   */
  PRIVATE = 'PRIVATE',

  /**
   * The repository is visible to everyone.
   */
  PUBLIC = 'PUBLIC',
}

/**
 * Audit log entry for a repo.remove_topic event.
 */
export interface IXGitHubRepoRemoveTopicAuditEntry {
  __typename: '_xGitHubRepoRemoveTopicAuditEntry';

  /**
   * The action name
   */
  action: string;

  /**
   * The user who initiated the action
   */
  actor: _xGitHubAuditEntryActor | null;

  /**
   * The IP address of the actor
   */
  actorIp: string | null;

  /**
   * A readable representation of the actor's location
   */
  actorLocation: IXGitHubActorLocation | null;

  /**
   * The username of the user who initiated the action
   */
  actorLogin: string | null;

  /**
   * The HTTP path for the actor.
   */
  actorResourcePath: any | null;

  /**
   * The HTTP URL for the actor.
   */
  actorUrl: any | null;

  /**
   * The time the action was initiated
   */
  createdAt: any;
  id: string;

  /**
   * The corresponding operation type for the action
   */
  operationType: XGitHubOperationType | null;

  /**
   * The Organization associated with the Audit Entry.
   */
  organization: IXGitHubOrganization | null;

  /**
   * The name of the Organization.
   */
  organizationName: string | null;

  /**
   * The HTTP path for the organization
   */
  organizationResourcePath: any | null;

  /**
   * The HTTP URL for the organization
   */
  organizationUrl: any | null;

  /**
   * The repository associated with the action
   */
  repository: IXGitHubRepository | null;

  /**
   * The name of the repository
   */
  repositoryName: string | null;

  /**
   * The HTTP path for the repository
   */
  repositoryResourcePath: any | null;

  /**
   * The HTTP URL for the repository
   */
  repositoryUrl: any | null;

  /**
   * The name of the topic added to the repository
   */
  topic: IXGitHubTopic | null;

  /**
   * The name of the topic added to the repository
   */
  topicName: string | null;

  /**
   * The user affected by the action
   */
  user: IXGitHubUser | null;

  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin: string | null;

  /**
   * The HTTP path for the user.
   */
  userResourcePath: any | null;

  /**
   * The HTTP URL for the user.
   */
  userUrl: any | null;
}

/**
 * The reasons a piece of content can be reported or minimized.
 */
export const enum XGitHubReportedContentClassifiers {
  /**
   * A spammy piece of content
   */
  SPAM = 'SPAM',

  /**
   * An abusive or harassing piece of content
   */
  ABUSE = 'ABUSE',

  /**
   * An irrelevant piece of content
   */
  OFF_TOPIC = 'OFF_TOPIC',

  /**
   * An outdated piece of content
   */
  OUTDATED = 'OUTDATED',

  /**
   * A duplicated piece of content
   */
  DUPLICATE = 'DUPLICATE',

  /**
   * The content has been resolved
   */
  RESOLVED = 'RESOLVED',
}

/**
 * A repository contains the content for a project.
 */
export interface IXGitHubRepository {
  __typename: '_xGitHubRepository';

  /**
   * A list of users that can be assigned to issues in this repository.
   */
  assignableUsers: IXGitHubUserConnection;

  /**
   * Whether or not Auto-merge can be enabled on pull requests in this repository.
   */
  autoMergeAllowed: boolean;

  /**
   * A list of branch protection rules for this repository.
   */
  branchProtectionRules: IXGitHubBranchProtectionRuleConnection;

  /**
   * Returns the code of conduct for this repository
   */
  codeOfConduct: IXGitHubCodeOfConduct | null;

  /**
   * A list of collaborators associated with the repository.
   */
  collaborators: IXGitHubRepositoryCollaboratorConnection | null;

  /**
   * A list of commit comments associated with the repository.
   */
  commitComments: IXGitHubCommitCommentConnection;

  /**
   * Returns a list of contact links associated to the repository
   */
  contactLinks: Array<IXGitHubRepositoryContactLink> | null;

  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: any;

  /**
   * Identifies the primary key from the database.
   */
  databaseId: number | null;

  /**
   * The Ref associated with the repository's default branch.
   */
  defaultBranchRef: IXGitHubRef | null;

  /**
   * Whether or not branches are automatically deleted when merged in this repository.
   */
  deleteBranchOnMerge: boolean;

  /**
   * A list of deploy keys that are on this repository.
   */
  deployKeys: IXGitHubDeployKeyConnection;

  /**
   * Deployments associated with the repository
   */
  deployments: IXGitHubDeploymentConnection;

  /**
   * The description of the repository.
   */
  description: string | null;

  /**
   * The description of the repository rendered to HTML.
   */
  descriptionHTML: any;

  /**
   * Returns a single discussion from the current repository by number.
   */
  discussion: IXGitHubDiscussion | null;

  /**
   * A list of discussion categories that are available in the repository.
   */
  discussionCategories: IXGitHubDiscussionCategoryConnection;

  /**
   * A list of discussions that have been opened in the repository.
   */
  discussions: IXGitHubDiscussionConnection;

  /**
   * The number of kilobytes this repository occupies on disk.
   */
  diskUsage: number | null;

  /**
   * Returns a single active environment from the current repository by name.
   */
  environment: IXGitHubEnvironment | null;

  /**
   * A list of environments that are in this repository.
   */
  environments: IXGitHubEnvironmentConnection;

  /**
   * Returns how many forks there are of this repository in the whole network.
   */
  forkCount: number;

  /**
   * Whether this repository allows forks.
   */
  forkingAllowed: boolean;

  /**
   * A list of direct forked repositories.
   */
  forks: IXGitHubRepositoryConnection;

  /**
   * The funding links for this repository
   */
  fundingLinks: Array<IXGitHubFundingLink>;

  /**
   * Indicates if the repository has issues feature enabled.
   */
  hasIssuesEnabled: boolean;

  /**
   * Indicates if the repository has the Projects feature enabled.
   */
  hasProjectsEnabled: boolean;

  /**
   * Indicates if the repository has wiki feature enabled.
   */
  hasWikiEnabled: boolean;

  /**
   * The repository's URL.
   */
  homepageUrl: any | null;
  id: string;

  /**
   * The interaction ability settings for this repository.
   */
  interactionAbility: IXGitHubRepositoryInteractionAbility | null;

  /**
   * Indicates if the repository is unmaintained.
   */
  isArchived: boolean;

  /**
   * Returns true if blank issue creation is allowed
   */
  isBlankIssuesEnabled: boolean;

  /**
   * Returns whether or not this repository disabled.
   */
  isDisabled: boolean;

  /**
   * Returns whether or not this repository is empty.
   */
  isEmpty: boolean;

  /**
   * Identifies if the repository is a fork.
   */
  isFork: boolean;

  /**
   * Indicates if a repository is either owned by an organization, or is a private fork of an organization repository.
   */
  isInOrganization: boolean;

  /**
   * Indicates if the repository has been locked or not.
   */
  isLocked: boolean;

  /**
   * Identifies if the repository is a mirror.
   */
  isMirror: boolean;

  /**
   * Identifies if the repository is private or internal.
   */
  isPrivate: boolean;

  /**
   * Returns true if this repository has a security policy
   */
  isSecurityPolicyEnabled: boolean | null;

  /**
   * Identifies if the repository is a template that can be used to generate new repositories.
   */
  isTemplate: boolean;

  /**
   * Is this repository a user configuration repository?
   */
  isUserConfigurationRepository: boolean;

  /**
   * Returns a single issue from the current repository by number.
   */
  issue: IXGitHubIssue | null;

  /**
   * Returns a single issue-like object from the current repository by number.
   */
  issueOrPullRequest: _xGitHubIssueOrPullRequest | null;

  /**
   * Returns a list of issue templates associated to the repository
   */
  issueTemplates: Array<IXGitHubIssueTemplate> | null;

  /**
   * A list of issues that have been opened in the repository.
   */
  issues: IXGitHubIssueConnection;

  /**
   * Returns a single label by name
   */
  label: IXGitHubLabel | null;

  /**
   * A list of labels associated with the repository.
   */
  labels: IXGitHubLabelConnection | null;

  /**
   * A list containing a breakdown of the language composition of the repository.
   */
  languages: IXGitHubLanguageConnection | null;

  /**
   * Get the latest release for the repository if one exists.
   */
  latestRelease: IXGitHubRelease | null;

  /**
   * The license associated with the repository
   */
  licenseInfo: IXGitHubLicense | null;

  /**
   * The reason the repository has been locked.
   */
  lockReason: XGitHubRepositoryLockReason | null;

  /**
   * A list of Users that can be mentioned in the context of the repository.
   */
  mentionableUsers: IXGitHubUserConnection;

  /**
   * Whether or not PRs are merged with a merge commit on this repository.
   */
  mergeCommitAllowed: boolean;

  /**
   * Returns a single milestone from the current repository by number.
   */
  milestone: IXGitHubMilestone | null;

  /**
   * A list of milestones associated with the repository.
   */
  milestones: IXGitHubMilestoneConnection | null;

  /**
   * The repository's original mirror URL.
   */
  mirrorUrl: any | null;

  /**
   * The name of the repository.
   */
  name: string;

  /**
   * The repository's name with owner.
   */
  nameWithOwner: string;

  /**
   * A Git object in the repository
   */
  object: _xGitHubGitObject | null;

  /**
   * The image used to represent this repository in Open Graph data.
   */
  openGraphImageUrl: any;

  /**
   * The User owner of the repository.
   */
  owner: _xGitHubRepositoryOwner;

  /**
   * A list of packages under the owner.
   */
  packages: IXGitHubPackageConnection;

  /**
   * The repository parent, if this is a fork.
   */
  parent: IXGitHubRepository | null;

  /**
   * A list of discussions that have been pinned in this repository.
   */
  pinnedDiscussions: IXGitHubPinnedDiscussionConnection;

  /**
   * A list of pinned issues for this repository.
   */
  pinnedIssues: IXGitHubPinnedIssueConnection | null;

  /**
   * The primary language of the repository's code.
   */
  primaryLanguage: IXGitHubLanguage | null;

  /**
   * Find project by number.
   */
  project: IXGitHubProject | null;

  /**
   * A list of projects under the owner.
   */
  projects: IXGitHubProjectConnection;

  /**
   * The HTTP path listing the repository's projects
   */
  projectsResourcePath: any;

  /**
   * The HTTP URL listing the repository's projects
   */
  projectsUrl: any;

  /**
   * Returns a single pull request from the current repository by number.
   */
  pullRequest: IXGitHubPullRequest | null;

  /**
   * Returns a list of pull request templates associated to the repository
   */
  pullRequestTemplates: Array<IXGitHubPullRequestTemplate> | null;

  /**
   * A list of pull requests that have been opened in the repository.
   */
  pullRequests: IXGitHubPullRequestConnection;

  /**
   * Identifies when the repository was last pushed to.
   */
  pushedAt: any | null;

  /**
   * Whether or not rebase-merging is enabled on this repository.
   */
  rebaseMergeAllowed: boolean;

  /**
   * Fetch a given ref from the repository
   */
  ref: IXGitHubRef | null;

  /**
   * Fetch a list of refs from the repository
   */
  refs: IXGitHubRefConnection | null;

  /**
   * Lookup a single release given various criteria.
   */
  release: IXGitHubRelease | null;

  /**
   * List of releases which are dependent on this repository.
   */
  releases: IXGitHubReleaseConnection;

  /**
   * A list of applied repository-topic associations for this repository.
   */
  repositoryTopics: IXGitHubRepositoryTopicConnection;

  /**
   * The HTTP path for this repository
   */
  resourcePath: any;

  /**
   * The security policy URL.
   */
  securityPolicyUrl: any | null;

  /**
   * A description of the repository, rendered to HTML without any links in it.
   */
  shortDescriptionHTML: any;

  /**
   * Whether or not squash-merging is enabled on this repository.
   */
  squashMergeAllowed: boolean;

  /**
   * The SSH URL to clone this repository
   */
  sshUrl: any;

  /**
   * Returns a count of how many stargazers there are on this object
   */
  stargazerCount: number;

  /**
   * A list of users who have starred this starrable.
   */
  stargazers: IXGitHubStargazerConnection;

  /**
   * Returns a list of all submodules in this repository parsed from the .gitmodules file as of the default branch's HEAD commit.
   */
  submodules: IXGitHubSubmoduleConnection;

  /**
   * Temporary authentication token for cloning this repository.
   */
  tempCloneToken: string | null;

  /**
   * The repository from which this repository was generated, if any.
   */
  templateRepository: IXGitHubRepository | null;

  /**
   * Identifies the date and time when the object was last updated.
   */
  updatedAt: any;

  /**
   * The HTTP URL for this repository
   */
  url: any;

  /**
   * Whether this repository has a custom image to use with Open Graph as opposed to being represented by the owner's avatar.
   */
  usesCustomOpenGraphImage: boolean;

  /**
   * Indicates whether the viewer has admin permissions on this repository.
   */
  viewerCanAdminister: boolean;

  /**
   * Can the current viewer create new projects on this owner.
   */
  viewerCanCreateProjects: boolean;

  /**
   * Check if the viewer is able to change their subscription status for the repository.
   */
  viewerCanSubscribe: boolean;

  /**
   * Indicates whether the viewer can update the topics of this repository.
   */
  viewerCanUpdateTopics: boolean;

  /**
   * The last commit email for the viewer.
   */
  viewerDefaultCommitEmail: string | null;

  /**
   * The last used merge method by the viewer or the default for the repository.
   */
  viewerDefaultMergeMethod: XGitHubPullRequestMergeMethod;

  /**
   * Returns a boolean indicating whether the viewing user has starred this starrable.
   */
  viewerHasStarred: boolean;

  /**
   * The users permission level on the repository. Will return null if authenticated as an GitHub App.
   */
  viewerPermission: XGitHubRepositoryPermission | null;

  /**
   * A list of emails this viewer can commit with.
   */
  viewerPossibleCommitEmails: Array<string> | null;

  /**
   * Identifies if the viewer is watching, not watching, or ignoring the subscribable entity.
   */
  viewerSubscription: XGitHubSubscriptionState | null;

  /**
   * Indicates the repository's visibility level.
   */
  visibility: XGitHubRepositoryVisibility;

  /**
   * A list of vulnerability alerts that are on this repository.
   */
  vulnerabilityAlerts: IXGitHubRepositoryVulnerabilityAlertConnection | null;

  /**
   * A list of users watching the repository.
   */
  watchers: IXGitHubUserConnection;
}

export interface IAssignableUsersOnXGitHubRepositoryArguments {
  /**
   * Filters users with query on user name and login
   */
  query?: string | null;

  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IBranchProtectionRulesOnXGitHubRepositoryArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface ICollaboratorsOnXGitHubRepositoryArguments {
  /**
   * Collaborators affiliation level with a repository.
   */
  affiliation?: XGitHubCollaboratorAffiliation | null;

  /**
   * Filters users with query on user name and login
   */
  query?: string | null;

  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface ICommitCommentsOnXGitHubRepositoryArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IDeployKeysOnXGitHubRepositoryArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IDeploymentsOnXGitHubRepositoryArguments {
  /**
   * Environments to list deployments for
   */
  environments?: Array<string> | null;

  /**
   * Ordering options for deployments returned from the connection.
   * @default {"field":"CREATED_AT","direction":"ASC"}
   */
  orderBy?: IXGitHubDeploymentOrder | null;

  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IDiscussionOnXGitHubRepositoryArguments {
  /**
   * The number for the discussion to be returned.
   */
  number: number;
}

export interface IDiscussionCategoriesOnXGitHubRepositoryArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IDiscussionsOnXGitHubRepositoryArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Only include discussions that belong to the category with this ID.
   * @default null
   */
  categoryId?: string | null;

  /**
   * Ordering options for discussions returned from the connection.
   * @default {"field":"UPDATED_AT","direction":"DESC"}
   */
  orderBy?: IXGitHubDiscussionOrder | null;
}

export interface IEnvironmentOnXGitHubRepositoryArguments {
  /**
   * The name of the environment to be returned.
   */
  name: string;
}

export interface IEnvironmentsOnXGitHubRepositoryArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IForksOnXGitHubRepositoryArguments {
  /**
   * If non-null, filters repositories according to privacy
   */
  privacy?: XGitHubRepositoryPrivacy | null;

  /**
   * Ordering options for repositories returned from the connection
   */
  orderBy?: IXGitHubRepositoryOrder | null;

  /**
   * Array of viewer's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the current viewer owns.
   */
  affiliations?: Array<XGitHubRepositoryAffiliation | null> | null;

  /**
   * Array of owner's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the organization or user being viewed owns.
   * @default ["OWNER","COLLABORATOR"]
   */
  ownerAffiliations?: Array<XGitHubRepositoryAffiliation | null> | null;

  /**
   * If non-null, filters repositories according to whether they have been locked
   */
  isLocked?: boolean | null;

  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IIssueOnXGitHubRepositoryArguments {
  /**
   * The number for the issue to be returned.
   */
  number: number;
}

export interface IIssueOrPullRequestOnXGitHubRepositoryArguments {
  /**
   * The number for the issue to be returned.
   */
  number: number;
}

export interface IIssuesOnXGitHubRepositoryArguments {
  /**
   * Ordering options for issues returned from the connection.
   */
  orderBy?: IXGitHubIssueOrder | null;

  /**
   * A list of label names to filter the pull requests by.
   */
  labels?: Array<string> | null;

  /**
   * A list of states to filter the issues by.
   */
  states?: Array<XGitHubIssueState> | null;

  /**
   * Filtering options for issues returned from the connection.
   */
  filterBy?: IXGitHubIssueFilters | null;

  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface ILabelOnXGitHubRepositoryArguments {
  /**
   * Label name
   */
  name: string;
}

export interface ILabelsOnXGitHubRepositoryArguments {
  /**
   * Ordering options for labels returned from the connection.
   * @default {"field":"CREATED_AT","direction":"ASC"}
   */
  orderBy?: IXGitHubLabelOrder | null;

  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * If provided, searches labels by name and description.
   */
  query?: string | null;
}

export interface ILanguagesOnXGitHubRepositoryArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Order for connection
   */
  orderBy?: IXGitHubLanguageOrder | null;
}

export interface IMentionableUsersOnXGitHubRepositoryArguments {
  /**
   * Filters users with query on user name and login
   */
  query?: string | null;

  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IMilestoneOnXGitHubRepositoryArguments {
  /**
   * The number for the milestone to be returned.
   */
  number: number;
}

export interface IMilestonesOnXGitHubRepositoryArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Filter by the state of the milestones.
   */
  states?: Array<XGitHubMilestoneState> | null;

  /**
   * Ordering options for milestones.
   */
  orderBy?: IXGitHubMilestoneOrder | null;

  /**
   * Filters milestones with a query on the title
   */
  query?: string | null;
}

export interface IObjectOnXGitHubRepositoryArguments {
  /**
   * The Git object ID
   */
  oid?: any | null;

  /**
   * A Git revision expression suitable for rev-parse
   */
  expression?: string | null;
}

export interface IPackagesOnXGitHubRepositoryArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Find packages by their names.
   */
  names?: Array<string | null> | null;

  /**
   * Find packages in a repository by ID.
   */
  repositoryId?: string | null;

  /**
   * Filter registry package by type.
   */
  packageType?: XGitHubPackageType | null;

  /**
   * Ordering of the returned packages.
   * @default {"field":"CREATED_AT","direction":"DESC"}
   */
  orderBy?: IXGitHubPackageOrder | null;
}

export interface IPinnedDiscussionsOnXGitHubRepositoryArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IPinnedIssuesOnXGitHubRepositoryArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IProjectOnXGitHubRepositoryArguments {
  /**
   * The project number to find.
   */
  number: number;
}

export interface IProjectsOnXGitHubRepositoryArguments {
  /**
   * Ordering options for projects returned from the connection
   */
  orderBy?: IXGitHubProjectOrder | null;

  /**
   * Query to search projects by, currently only searching by name.
   */
  search?: string | null;

  /**
   * A list of states to filter the projects by.
   */
  states?: Array<XGitHubProjectState> | null;

  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IPullRequestOnXGitHubRepositoryArguments {
  /**
   * The number for the pull request to be returned.
   */
  number: number;
}

export interface IPullRequestsOnXGitHubRepositoryArguments {
  /**
   * A list of states to filter the pull requests by.
   */
  states?: Array<XGitHubPullRequestState> | null;

  /**
   * A list of label names to filter the pull requests by.
   */
  labels?: Array<string> | null;

  /**
   * The head ref name to filter the pull requests by.
   */
  headRefName?: string | null;

  /**
   * The base ref name to filter the pull requests by.
   */
  baseRefName?: string | null;

  /**
   * Ordering options for pull requests returned from the connection.
   */
  orderBy?: IXGitHubIssueOrder | null;

  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IRefOnXGitHubRepositoryArguments {
  /**
   * The ref to retrieve. Fully qualified matches are checked in order (`refs/heads/master`) before falling back onto checks for short name matches (`master`).
   */
  qualifiedName: string;
}

export interface IRefsOnXGitHubRepositoryArguments {
  /**
   * Filters refs with query on name
   */
  query?: string | null;

  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * A ref name prefix like `refs/heads/`, `refs/tags/`, etc.
   */
  refPrefix: string;

  /**
   * DEPRECATED: use orderBy. The ordering direction.
   */
  direction?: XGitHubOrderDirection | null;

  /**
   * Ordering options for refs returned from the connection.
   */
  orderBy?: IXGitHubRefOrder | null;
}

export interface IReleaseOnXGitHubRepositoryArguments {
  /**
   * The name of the Tag the Release was created from
   */
  tagName: string;
}

export interface IReleasesOnXGitHubRepositoryArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Order for connection
   */
  orderBy?: IXGitHubReleaseOrder | null;
}

export interface IRepositoryTopicsOnXGitHubRepositoryArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IShortDescriptionHTMLOnXGitHubRepositoryArguments {
  /**
   * How many characters to return.
   * @default 200
   */
  limit?: number | null;
}

export interface IStargazersOnXGitHubRepositoryArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Order for connection
   */
  orderBy?: IXGitHubStarOrder | null;
}

export interface ISubmodulesOnXGitHubRepositoryArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IVulnerabilityAlertsOnXGitHubRepositoryArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IWatchersOnXGitHubRepositoryArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

/**
 * The affiliation of a user to a repository
 */
export const enum XGitHubRepositoryAffiliation {
  /**
   * Repositories that are owned by the authenticated user.
   */
  OWNER = 'OWNER',

  /**
   * Repositories that the user has been added to as a collaborator.
   */
  COLLABORATOR = 'COLLABORATOR',

  /**
   * Repositories that the user has access to through being a member of an organization. This includes every repository on every team that the user is on.
   */
  ORGANIZATION_MEMBER = 'ORGANIZATION_MEMBER',
}

/**
 * Metadata for an audit entry with action repo.*
 */
export type _xGitHubRepositoryAuditEntryData =
  | IXGitHubOrgRestoreMemberMembershipRepositoryAuditEntryData
  | IXGitHubPrivateRepositoryForkingDisableAuditEntry
  | IXGitHubPrivateRepositoryForkingEnableAuditEntry
  | IXGitHubRepoAccessAuditEntry
  | IXGitHubRepoAddMemberAuditEntry
  | IXGitHubRepoAddTopicAuditEntry
  | IXGitHubRepoArchivedAuditEntry
  | IXGitHubRepoChangeMergeSettingAuditEntry
  | IXGitHubRepoConfigDisableAnonymousGitAccessAuditEntry
  | IXGitHubRepoConfigDisableCollaboratorsOnlyAuditEntry
  | IXGitHubRepoConfigDisableContributorsOnlyAuditEntry
  | IXGitHubRepoConfigDisableSockpuppetDisallowedAuditEntry
  | IXGitHubRepoConfigEnableAnonymousGitAccessAuditEntry
  | IXGitHubRepoConfigEnableCollaboratorsOnlyAuditEntry
  | IXGitHubRepoConfigEnableContributorsOnlyAuditEntry
  | IXGitHubRepoConfigEnableSockpuppetDisallowedAuditEntry
  | IXGitHubRepoConfigLockAnonymousGitAccessAuditEntry
  | IXGitHubRepoConfigUnlockAnonymousGitAccessAuditEntry
  | IXGitHubRepoCreateAuditEntry
  | IXGitHubRepoDestroyAuditEntry
  | IXGitHubRepoRemoveMemberAuditEntry
  | IXGitHubRepoRemoveTopicAuditEntry
  | IXGitHubTeamAddRepositoryAuditEntry
  | IXGitHubTeamRemoveRepositoryAuditEntry;

/**
 * Metadata for an audit entry with action repo.*
 */
export interface IXGitHubRepositoryAuditEntryData {
  __typename: '_xGitHubRepositoryAuditEntryData';

  /**
   * The repository associated with the action
   */
  repository: IXGitHubRepository | null;

  /**
   * The name of the repository
   */
  repositoryName: string | null;

  /**
   * The HTTP path for the repository
   */
  repositoryResourcePath: any | null;

  /**
   * The HTTP URL for the repository
   */
  repositoryUrl: any | null;
}

/**
 * The connection type for User.
 */
export interface IXGitHubRepositoryCollaboratorConnection {
  __typename: '_xGitHubRepositoryCollaboratorConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubRepositoryCollaboratorEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitHubUser | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * Represents a user who is a collaborator of a repository.
 */
export interface IXGitHubRepositoryCollaboratorEdge {
  __typename: '_xGitHubRepositoryCollaboratorEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  node: IXGitHubUser;

  /**
   * The permission the user has on the repository.
   */
  permission: XGitHubRepositoryPermission;

  /**
   * A list of sources for the user's access to the repository.
   */
  permissionSources: Array<IXGitHubPermissionSource> | null;
}

/**
 * A list of repositories owned by the subject.
 */
export interface IXGitHubRepositoryConnection {
  __typename: '_xGitHubRepositoryConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubRepositoryEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitHubRepository | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;

  /**
   * The total size in kilobytes of all repositories in the connection.
   */
  totalDiskUsage: number;
}

/**
 * A repository contact link.
 */
export interface IXGitHubRepositoryContactLink {
  __typename: '_xGitHubRepositoryContactLink';

  /**
   * The contact link purpose.
   */
  about: string;

  /**
   * The contact link name.
   */
  name: string;

  /**
   * The contact link URL.
   */
  url: any;
}

/**
 * The reason a repository is listed as 'contributed'.
 */
export const enum XGitHubRepositoryContributionType {
  /**
   * Created a commit
   */
  COMMIT = 'COMMIT',

  /**
   * Created an issue
   */
  ISSUE = 'ISSUE',

  /**
   * Created a pull request
   */
  PULL_REQUEST = 'PULL_REQUEST',

  /**
   * Created the repository
   */
  REPOSITORY = 'REPOSITORY',

  /**
   * Reviewed a pull request
   */
  PULL_REQUEST_REVIEW = 'PULL_REQUEST_REVIEW',
}

/**
 * Represents an author of discussions in repositories.
 */
export type _xGitHubRepositoryDiscussionAuthor =
  | IXGitHubOrganization
  | IXGitHubUser;

/**
 * Represents an author of discussions in repositories.
 */
export interface IXGitHubRepositoryDiscussionAuthor {
  __typename: '_xGitHubRepositoryDiscussionAuthor';

  /**
   * Discussions this user has started.
   */
  repositoryDiscussions: IXGitHubDiscussionConnection;
}

export interface IRepositoryDiscussionsOnXGitHubRepositoryDiscussionAuthorArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Ordering options for discussions returned from the connection.
   * @default {"field":"CREATED_AT","direction":"DESC"}
   */
  orderBy?: IXGitHubDiscussionOrder | null;

  /**
   * Filter discussions to only those in a specific repository.
   */
  repositoryId?: string | null;

  /**
   * Filter discussions to only those that have been answered or not. Defaults to including both answered and unanswered discussions.
   * @default null
   */
  answered?: boolean | null;
}

/**
 * Represents an author of discussion comments in repositories.
 */
export type _xGitHubRepositoryDiscussionCommentAuthor =
  | IXGitHubOrganization
  | IXGitHubUser;

/**
 * Represents an author of discussion comments in repositories.
 */
export interface IXGitHubRepositoryDiscussionCommentAuthor {
  __typename: '_xGitHubRepositoryDiscussionCommentAuthor';

  /**
   * Discussion comments this user has authored.
   */
  repositoryDiscussionComments: IXGitHubDiscussionCommentConnection;
}

export interface IRepositoryDiscussionCommentsOnXGitHubRepositoryDiscussionCommentAuthorArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Filter discussion comments to only those in a specific repository.
   */
  repositoryId?: string | null;

  /**
   * Filter discussion comments to only those that were marked as the answer
   * @default false
   */
  onlyAnswers?: boolean | null;
}

/**
 * An edge in a connection.
 */
export interface IXGitHubRepositoryEdge {
  __typename: '_xGitHubRepositoryEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitHubRepository | null;
}

/**
 * A subset of repository info.
 */
export type _xGitHubRepositoryInfo = IXGitHubRepository;

/**
 * A subset of repository info.
 */
export interface IXGitHubRepositoryInfo {
  __typename: '_xGitHubRepositoryInfo';

  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: any;

  /**
   * The description of the repository.
   */
  description: string | null;

  /**
   * The description of the repository rendered to HTML.
   */
  descriptionHTML: any;

  /**
   * Returns how many forks there are of this repository in the whole network.
   */
  forkCount: number;

  /**
   * Indicates if the repository has issues feature enabled.
   */
  hasIssuesEnabled: boolean;

  /**
   * Indicates if the repository has the Projects feature enabled.
   */
  hasProjectsEnabled: boolean;

  /**
   * Indicates if the repository has wiki feature enabled.
   */
  hasWikiEnabled: boolean;

  /**
   * The repository's URL.
   */
  homepageUrl: any | null;

  /**
   * Indicates if the repository is unmaintained.
   */
  isArchived: boolean;

  /**
   * Identifies if the repository is a fork.
   */
  isFork: boolean;

  /**
   * Indicates if a repository is either owned by an organization, or is a private fork of an organization repository.
   */
  isInOrganization: boolean;

  /**
   * Indicates if the repository has been locked or not.
   */
  isLocked: boolean;

  /**
   * Identifies if the repository is a mirror.
   */
  isMirror: boolean;

  /**
   * Identifies if the repository is private or internal.
   */
  isPrivate: boolean;

  /**
   * Identifies if the repository is a template that can be used to generate new repositories.
   */
  isTemplate: boolean;

  /**
   * The license associated with the repository
   */
  licenseInfo: IXGitHubLicense | null;

  /**
   * The reason the repository has been locked.
   */
  lockReason: XGitHubRepositoryLockReason | null;

  /**
   * The repository's original mirror URL.
   */
  mirrorUrl: any | null;

  /**
   * The name of the repository.
   */
  name: string;

  /**
   * The repository's name with owner.
   */
  nameWithOwner: string;

  /**
   * The image used to represent this repository in Open Graph data.
   */
  openGraphImageUrl: any;

  /**
   * The User owner of the repository.
   */
  owner: _xGitHubRepositoryOwner;

  /**
   * Identifies when the repository was last pushed to.
   */
  pushedAt: any | null;

  /**
   * The HTTP path for this repository
   */
  resourcePath: any;

  /**
   * A description of the repository, rendered to HTML without any links in it.
   */
  shortDescriptionHTML: any;

  /**
   * Identifies the date and time when the object was last updated.
   */
  updatedAt: any;

  /**
   * The HTTP URL for this repository
   */
  url: any;

  /**
   * Whether this repository has a custom image to use with Open Graph as opposed to being represented by the owner's avatar.
   */
  usesCustomOpenGraphImage: boolean;

  /**
   * Indicates the repository's visibility level.
   */
  visibility: XGitHubRepositoryVisibility;
}

export interface IShortDescriptionHTMLOnXGitHubRepositoryInfoArguments {
  /**
   * How many characters to return.
   * @default 200
   */
  limit?: number | null;
}

/**
 * Repository interaction limit that applies to this object.
 */
export interface IXGitHubRepositoryInteractionAbility {
  __typename: '_xGitHubRepositoryInteractionAbility';

  /**
   * The time the currently active limit expires.
   */
  expiresAt: any | null;

  /**
   * The current limit that is enabled on this object.
   */
  limit: XGitHubRepositoryInteractionLimit;

  /**
   * The origin of the currently active interaction limit.
   */
  origin: XGitHubRepositoryInteractionLimitOrigin;
}

/**
 * A repository interaction limit.
 */
export const enum XGitHubRepositoryInteractionLimit {
  /**
   * Users that have recently created their account will be unable to interact with the repository.
   */
  EXISTING_USERS = 'EXISTING_USERS',

  /**
   * Users that have not previously committed to a repository’s default branch will be unable to interact with the repository.
   */
  CONTRIBUTORS_ONLY = 'CONTRIBUTORS_ONLY',

  /**
   * Users that are not collaborators will not be able to interact with the repository.
   */
  COLLABORATORS_ONLY = 'COLLABORATORS_ONLY',

  /**
   * No interaction limits are enabled.
   */
  NO_LIMIT = 'NO_LIMIT',
}

/**
 * The length for a repository interaction limit to be enabled for.
 */
export const enum XGitHubRepositoryInteractionLimitExpiry {
  /**
   * The interaction limit will expire after 1 day.
   */
  ONE_DAY = 'ONE_DAY',

  /**
   * The interaction limit will expire after 3 days.
   */
  THREE_DAYS = 'THREE_DAYS',

  /**
   * The interaction limit will expire after 1 week.
   */
  ONE_WEEK = 'ONE_WEEK',

  /**
   * The interaction limit will expire after 1 month.
   */
  ONE_MONTH = 'ONE_MONTH',

  /**
   * The interaction limit will expire after 6 months.
   */
  SIX_MONTHS = 'SIX_MONTHS',
}

/**
 * Indicates where an interaction limit is configured.
 */
export const enum XGitHubRepositoryInteractionLimitOrigin {
  /**
   * A limit that is configured at the repository level.
   */
  REPOSITORY = 'REPOSITORY',

  /**
   * A limit that is configured at the organization level.
   */
  ORGANIZATION = 'ORGANIZATION',

  /**
   * A limit that is configured at the user-wide level.
   */
  USER = 'USER',
}

/**
 * An invitation for a user to be added to a repository.
 */
export interface IXGitHubRepositoryInvitation {
  __typename: '_xGitHubRepositoryInvitation';

  /**
   * The email address that received the invitation.
   */
  email: string | null;
  id: string;

  /**
   * The user who received the invitation.
   */
  invitee: IXGitHubUser | null;

  /**
   * The user who created the invitation.
   */
  inviter: IXGitHubUser;

  /**
   * The permalink for this repository invitation.
   */
  permalink: any;

  /**
   * The permission granted on this repository by this invitation.
   */
  permission: XGitHubRepositoryPermission;

  /**
   * The Repository the user is invited to.
   */
  repository: _xGitHubRepositoryInfo | null;
}

/**
 * The connection type for RepositoryInvitation.
 */
export interface IXGitHubRepositoryInvitationConnection {
  __typename: '_xGitHubRepositoryInvitationConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubRepositoryInvitationEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitHubRepositoryInvitation | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface IXGitHubRepositoryInvitationEdge {
  __typename: '_xGitHubRepositoryInvitationEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitHubRepositoryInvitation | null;
}

/**
 * Ordering options for repository invitation connections.
 */
export interface IXGitHubRepositoryInvitationOrder {
  /**
   * The field to order repository invitations by.
   */
  field: XGitHubRepositoryInvitationOrderField;

  /**
   * The ordering direction.
   */
  direction: XGitHubOrderDirection;
}

/**
 * Properties by which repository invitation connections can be ordered.
 */
export const enum XGitHubRepositoryInvitationOrderField {
  /**
   * Order repository invitations by creation time
   */
  CREATED_AT = 'CREATED_AT',

  /**
   * Order repository invitations by invitee login
   * @deprecated "`INVITEE_LOGIN` is no longer a valid field value. Repository invitations can now be associated with an email, not only an invitee. Removal on 2020-10-01 UTC."
   */
  INVITEE_LOGIN = 'INVITEE_LOGIN',
}

/**
 * The possible reasons a given repository could be in a locked state.
 */
export const enum XGitHubRepositoryLockReason {
  /**
   * The repository is locked due to a move.
   */
  MOVING = 'MOVING',

  /**
   * The repository is locked due to a billing related reason.
   */
  BILLING = 'BILLING',

  /**
   * The repository is locked due to a rename.
   */
  RENAME = 'RENAME',

  /**
   * The repository is locked due to a migration.
   */
  MIGRATING = 'MIGRATING',
}

/**
 * Represents a object that belongs to a repository.
 */
export type _xGitHubRepositoryNode =
  | IXGitHubCommitComment
  | IXGitHubCommitCommentThread
  | IXGitHubDiscussion
  | IXGitHubDiscussionCategory
  | IXGitHubIssue
  | IXGitHubIssueComment
  | IXGitHubPinnedDiscussion
  | IXGitHubPullRequest
  | IXGitHubPullRequestCommitCommentThread
  | IXGitHubPullRequestReview
  | IXGitHubPullRequestReviewComment
  | IXGitHubRepositoryVulnerabilityAlert;

/**
 * Represents a object that belongs to a repository.
 */
export interface IXGitHubRepositoryNode {
  __typename: '_xGitHubRepositoryNode';

  /**
   * The repository associated with this node.
   */
  repository: IXGitHubRepository;
}

/**
 * Ordering options for repository connections
 */
export interface IXGitHubRepositoryOrder {
  /**
   * The field to order repositories by.
   */
  field: XGitHubRepositoryOrderField;

  /**
   * The ordering direction.
   */
  direction: XGitHubOrderDirection;
}

/**
 * Properties by which repository connections can be ordered.
 */
export const enum XGitHubRepositoryOrderField {
  /**
   * Order repositories by creation time
   */
  CREATED_AT = 'CREATED_AT',

  /**
   * Order repositories by update time
   */
  UPDATED_AT = 'UPDATED_AT',

  /**
   * Order repositories by push time
   */
  PUSHED_AT = 'PUSHED_AT',

  /**
   * Order repositories by name
   */
  NAME = 'NAME',

  /**
   * Order repositories by number of stargazers
   */
  STARGAZERS = 'STARGAZERS',
}

/**
 * Represents an owner of a Repository.
 */
export type _xGitHubRepositoryOwner = IXGitHubOrganization | IXGitHubUser;

/**
 * Represents an owner of a Repository.
 */
export interface IXGitHubRepositoryOwner {
  __typename: '_xGitHubRepositoryOwner';

  /**
   * A URL pointing to the owner's public avatar.
   */
  avatarUrl: any;
  id: string;

  /**
   * The username used to login.
   */
  login: string;

  /**
   * A list of repositories that the user owns.
   */
  repositories: IXGitHubRepositoryConnection;

  /**
   * Find Repository.
   */
  repository: IXGitHubRepository | null;

  /**
   * The HTTP URL for the owner.
   */
  resourcePath: any;

  /**
   * The HTTP URL for the owner.
   */
  url: any;
}

export interface IAvatarUrlOnXGitHubRepositoryOwnerArguments {
  /**
   * The size of the resulting square image.
   */
  size?: number | null;
}

export interface IRepositoriesOnXGitHubRepositoryOwnerArguments {
  /**
   * If non-null, filters repositories according to privacy
   */
  privacy?: XGitHubRepositoryPrivacy | null;

  /**
   * Ordering options for repositories returned from the connection
   */
  orderBy?: IXGitHubRepositoryOrder | null;

  /**
   * Array of viewer's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the current viewer owns.
   */
  affiliations?: Array<XGitHubRepositoryAffiliation | null> | null;

  /**
   * Array of owner's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the organization or user being viewed owns.
   * @default ["OWNER","COLLABORATOR"]
   */
  ownerAffiliations?: Array<XGitHubRepositoryAffiliation | null> | null;

  /**
   * If non-null, filters repositories according to whether they have been locked
   */
  isLocked?: boolean | null;

  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * If non-null, filters repositories according to whether they are forks of another repository
   */
  isFork?: boolean | null;
}

export interface IRepositoryOnXGitHubRepositoryOwnerArguments {
  /**
   * Name of Repository to find.
   */
  name: string;
}

/**
 * The access level to a repository
 */
export const enum XGitHubRepositoryPermission {
  /**
   * Can read, clone, and push to this repository. Can also manage issues, pull requests, and repository settings, including adding collaborators
   */
  ADMIN = 'ADMIN',

  /**
   * Can read, clone, and push to this repository. They can also manage issues, pull requests, and some repository settings
   */
  MAINTAIN = 'MAINTAIN',

  /**
   * Can read, clone, and push to this repository. Can also manage issues and pull requests
   */
  WRITE = 'WRITE',

  /**
   * Can read and clone this repository. Can also manage issues and pull requests
   */
  TRIAGE = 'TRIAGE',

  /**
   * Can read and clone this repository. Can also open and comment on issues and pull requests
   */
  READ = 'READ',
}

/**
 * The privacy of a repository
 */
export const enum XGitHubRepositoryPrivacy {
  /**
   * Public
   */
  PUBLIC = 'PUBLIC',

  /**
   * Private
   */
  PRIVATE = 'PRIVATE',
}

/**
 * A repository-topic connects a repository to a topic.
 */
export interface IXGitHubRepositoryTopic {
  __typename: '_xGitHubRepositoryTopic';
  id: string;

  /**
   * The HTTP path for this repository-topic.
   */
  resourcePath: any;

  /**
   * The topic.
   */
  topic: IXGitHubTopic;

  /**
   * The HTTP URL for this repository-topic.
   */
  url: any;
}

/**
 * The connection type for RepositoryTopic.
 */
export interface IXGitHubRepositoryTopicConnection {
  __typename: '_xGitHubRepositoryTopicConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubRepositoryTopicEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitHubRepositoryTopic | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface IXGitHubRepositoryTopicEdge {
  __typename: '_xGitHubRepositoryTopicEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitHubRepositoryTopic | null;
}

/**
 * The repository's visibility level.
 */
export const enum XGitHubRepositoryVisibility {
  /**
   * The repository is visible only to those with explicit access.
   */
  PRIVATE = 'PRIVATE',

  /**
   * The repository is visible to everyone.
   */
  PUBLIC = 'PUBLIC',

  /**
   * The repository is visible only to users in the same business.
   */
  INTERNAL = 'INTERNAL',
}

/**
 * Audit log entry for a repository_visibility_change.disable event.
 */
export interface IXGitHubRepositoryVisibilityChangeDisableAuditEntry {
  __typename: '_xGitHubRepositoryVisibilityChangeDisableAuditEntry';

  /**
   * The action name
   */
  action: string;

  /**
   * The user who initiated the action
   */
  actor: _xGitHubAuditEntryActor | null;

  /**
   * The IP address of the actor
   */
  actorIp: string | null;

  /**
   * A readable representation of the actor's location
   */
  actorLocation: IXGitHubActorLocation | null;

  /**
   * The username of the user who initiated the action
   */
  actorLogin: string | null;

  /**
   * The HTTP path for the actor.
   */
  actorResourcePath: any | null;

  /**
   * The HTTP URL for the actor.
   */
  actorUrl: any | null;

  /**
   * The time the action was initiated
   */
  createdAt: any;

  /**
   * The HTTP path for this enterprise.
   */
  enterpriseResourcePath: any | null;

  /**
   * The slug of the enterprise.
   */
  enterpriseSlug: string | null;

  /**
   * The HTTP URL for this enterprise.
   */
  enterpriseUrl: any | null;
  id: string;

  /**
   * The corresponding operation type for the action
   */
  operationType: XGitHubOperationType | null;

  /**
   * The Organization associated with the Audit Entry.
   */
  organization: IXGitHubOrganization | null;

  /**
   * The name of the Organization.
   */
  organizationName: string | null;

  /**
   * The HTTP path for the organization
   */
  organizationResourcePath: any | null;

  /**
   * The HTTP URL for the organization
   */
  organizationUrl: any | null;

  /**
   * The user affected by the action
   */
  user: IXGitHubUser | null;

  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin: string | null;

  /**
   * The HTTP path for the user.
   */
  userResourcePath: any | null;

  /**
   * The HTTP URL for the user.
   */
  userUrl: any | null;
}

/**
 * Audit log entry for a repository_visibility_change.enable event.
 */
export interface IXGitHubRepositoryVisibilityChangeEnableAuditEntry {
  __typename: '_xGitHubRepositoryVisibilityChangeEnableAuditEntry';

  /**
   * The action name
   */
  action: string;

  /**
   * The user who initiated the action
   */
  actor: _xGitHubAuditEntryActor | null;

  /**
   * The IP address of the actor
   */
  actorIp: string | null;

  /**
   * A readable representation of the actor's location
   */
  actorLocation: IXGitHubActorLocation | null;

  /**
   * The username of the user who initiated the action
   */
  actorLogin: string | null;

  /**
   * The HTTP path for the actor.
   */
  actorResourcePath: any | null;

  /**
   * The HTTP URL for the actor.
   */
  actorUrl: any | null;

  /**
   * The time the action was initiated
   */
  createdAt: any;

  /**
   * The HTTP path for this enterprise.
   */
  enterpriseResourcePath: any | null;

  /**
   * The slug of the enterprise.
   */
  enterpriseSlug: string | null;

  /**
   * The HTTP URL for this enterprise.
   */
  enterpriseUrl: any | null;
  id: string;

  /**
   * The corresponding operation type for the action
   */
  operationType: XGitHubOperationType | null;

  /**
   * The Organization associated with the Audit Entry.
   */
  organization: IXGitHubOrganization | null;

  /**
   * The name of the Organization.
   */
  organizationName: string | null;

  /**
   * The HTTP path for the organization
   */
  organizationResourcePath: any | null;

  /**
   * The HTTP URL for the organization
   */
  organizationUrl: any | null;

  /**
   * The user affected by the action
   */
  user: IXGitHubUser | null;

  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin: string | null;

  /**
   * The HTTP path for the user.
   */
  userResourcePath: any | null;

  /**
   * The HTTP URL for the user.
   */
  userUrl: any | null;
}

/**
 * A Dependabot alert for a repository with a dependency affected by a security vulnerability.
 */
export interface IXGitHubRepositoryVulnerabilityAlert {
  __typename: '_xGitHubRepositoryVulnerabilityAlert';

  /**
   * When was the alert created?
   */
  createdAt: any;

  /**
   * The reason the alert was dismissed
   */
  dismissReason: string | null;

  /**
   * When was the alert dismissed?
   */
  dismissedAt: any | null;

  /**
   * The user who dismissed the alert
   */
  dismisser: IXGitHubUser | null;
  id: string;

  /**
   * The associated repository
   */
  repository: IXGitHubRepository;

  /**
   * The associated security advisory
   */
  securityAdvisory: IXGitHubSecurityAdvisory | null;

  /**
   * The associated security vulnerability
   */
  securityVulnerability: IXGitHubSecurityVulnerability | null;

  /**
   * The vulnerable manifest filename
   */
  vulnerableManifestFilename: string;

  /**
   * The vulnerable manifest path
   */
  vulnerableManifestPath: string;

  /**
   * The vulnerable requirements
   */
  vulnerableRequirements: string | null;
}

/**
 * The connection type for RepositoryVulnerabilityAlert.
 */
export interface IXGitHubRepositoryVulnerabilityAlertConnection {
  __typename: '_xGitHubRepositoryVulnerabilityAlertConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubRepositoryVulnerabilityAlertEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitHubRepositoryVulnerabilityAlert | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface IXGitHubRepositoryVulnerabilityAlertEdge {
  __typename: '_xGitHubRepositoryVulnerabilityAlertEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitHubRepositoryVulnerabilityAlert | null;
}

/**
 * Autogenerated input type of RequestReviews
 */
export interface IXGitHubRequestReviewsInput {
  /**
   * The Node ID of the pull request to modify.
   */
  pullRequestId: string;

  /**
   * The Node IDs of the user to request.
   */
  userIds?: Array<string> | null;

  /**
   * The Node IDs of the team to request.
   */
  teamIds?: Array<string> | null;

  /**
   * Add users to the set rather than replace.
   */
  union?: boolean | null;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of RequestReviews
 */
export interface IXGitHubRequestReviewsPayload {
  __typename: '_xGitHubRequestReviewsPayload';

  /**
   * Identifies the actor who performed the event.
   */
  actor: _xGitHubActor | null;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The pull request that is getting requests.
   */
  pullRequest: IXGitHubPullRequest | null;

  /**
   * The edge from the pull request to the requested reviewers.
   */
  requestedReviewersEdge: IXGitHubUserEdge | null;
}

/**
 * The possible states that can be requested when creating a check run.
 */
export const enum XGitHubRequestableCheckStatusState {
  /**
   * The check suite or run has been queued.
   */
  QUEUED = 'QUEUED',

  /**
   * The check suite or run is in progress.
   */
  IN_PROGRESS = 'IN_PROGRESS',

  /**
   * The check suite or run has been completed.
   */
  COMPLETED = 'COMPLETED',

  /**
   * The check suite or run is in waiting state.
   */
  WAITING = 'WAITING',

  /**
   * The check suite or run is in pending state.
   */
  PENDING = 'PENDING',
}

/**
 * Types that can be requested reviewers.
 */
export type _xGitHubRequestedReviewer =
  | IXGitHubMannequin
  | IXGitHubTeam
  | IXGitHubUser;

/**
 * Represents a type that can be required by a pull request for merging.
 */
export type _xGitHubRequirableByPullRequest =
  | IXGitHubCheckRun
  | IXGitHubStatusContext;

/**
 * Represents a type that can be required by a pull request for merging.
 */
export interface IXGitHubRequirableByPullRequest {
  __typename: '_xGitHubRequirableByPullRequest';

  /**
   * Whether this is required to pass before merging for a specific pull request.
   */
  isRequired: boolean;
}

export interface IIsRequiredOnXGitHubRequirableByPullRequestArguments {
  /**
   * The id of the pull request this is required for
   */
  pullRequestId?: string | null;

  /**
   * The number of the pull request this is required for
   */
  pullRequestNumber?: number | null;
}

/**
 * Autogenerated input type of RerequestCheckSuite
 */
export interface IXGitHubRerequestCheckSuiteInput {
  /**
   * The Node ID of the repository.
   */
  repositoryId: string;

  /**
   * The Node ID of the check suite.
   */
  checkSuiteId: string;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of RerequestCheckSuite
 */
export interface IXGitHubRerequestCheckSuitePayload {
  __typename: '_xGitHubRerequestCheckSuitePayload';

  /**
   * The requested check suite.
   */
  checkSuite: IXGitHubCheckSuite | null;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;
}

/**
 * Autogenerated input type of ResolveReviewThread
 */
export interface IXGitHubResolveReviewThreadInput {
  /**
   * The ID of the thread to resolve
   */
  threadId: string;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of ResolveReviewThread
 */
export interface IXGitHubResolveReviewThreadPayload {
  __typename: '_xGitHubResolveReviewThreadPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The thread to resolve.
   */
  thread: IXGitHubPullRequestReviewThread | null;
}

/**
 * Represents a private contribution a user made on GitHub.
 */
export interface IXGitHubRestrictedContribution {
  __typename: '_xGitHubRestrictedContribution';

  /**
   * Whether this contribution is associated with a record you do not have access to. For
   * example, your own 'first issue' contribution may have been made on a repository you can no
   * longer access.
   */
  isRestricted: boolean;

  /**
   * When this contribution was made.
   */
  occurredAt: any;

  /**
   * The HTTP path for this contribution.
   */
  resourcePath: any;

  /**
   * The HTTP URL for this contribution.
   */
  url: any;

  /**
   * The user who made this contribution.
   */
  user: IXGitHubUser;
}

/**
 * A team or user who has the ability to dismiss a review on a protected branch.
 */
export interface IXGitHubReviewDismissalAllowance {
  __typename: '_xGitHubReviewDismissalAllowance';

  /**
   * The actor that can dismiss.
   */
  actor: _xGitHubReviewDismissalAllowanceActor | null;

  /**
   * Identifies the branch protection rule associated with the allowed user or team.
   */
  branchProtectionRule: IXGitHubBranchProtectionRule | null;
  id: string;
}

/**
 * Types that can be an actor.
 */
export type _xGitHubReviewDismissalAllowanceActor = IXGitHubTeam | IXGitHubUser;

/**
 * The connection type for ReviewDismissalAllowance.
 */
export interface IXGitHubReviewDismissalAllowanceConnection {
  __typename: '_xGitHubReviewDismissalAllowanceConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubReviewDismissalAllowanceEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitHubReviewDismissalAllowance | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface IXGitHubReviewDismissalAllowanceEdge {
  __typename: '_xGitHubReviewDismissalAllowanceEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitHubReviewDismissalAllowance | null;
}

/**
 * Represents a 'review_dismissed' event on a given issue or pull request.
 */
export interface IXGitHubReviewDismissedEvent {
  __typename: '_xGitHubReviewDismissedEvent';

  /**
   * Identifies the actor who performed the event.
   */
  actor: _xGitHubActor | null;

  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: any;

  /**
   * Identifies the primary key from the database.
   */
  databaseId: number | null;

  /**
   * Identifies the optional message associated with the 'review_dismissed' event.
   */
  dismissalMessage: string | null;

  /**
   * Identifies the optional message associated with the event, rendered to HTML.
   */
  dismissalMessageHTML: string | null;
  id: string;

  /**
   * Identifies the previous state of the review with the 'review_dismissed' event.
   */
  previousReviewState: XGitHubPullRequestReviewState;

  /**
   * PullRequest referenced by event.
   */
  pullRequest: IXGitHubPullRequest;

  /**
   * Identifies the commit which caused the review to become stale.
   */
  pullRequestCommit: IXGitHubPullRequestCommit | null;

  /**
   * The HTTP path for this review dismissed event.
   */
  resourcePath: any;

  /**
   * Identifies the review associated with the 'review_dismissed' event.
   */
  review: IXGitHubPullRequestReview | null;

  /**
   * The HTTP URL for this review dismissed event.
   */
  url: any;
}

/**
 * A request for a user to review a pull request.
 */
export interface IXGitHubReviewRequest {
  __typename: '_xGitHubReviewRequest';

  /**
   * Whether this request was created for a code owner
   */
  asCodeOwner: boolean;

  /**
   * Identifies the primary key from the database.
   */
  databaseId: number | null;
  id: string;

  /**
   * Identifies the pull request associated with this review request.
   */
  pullRequest: IXGitHubPullRequest;

  /**
   * The reviewer that is requested.
   */
  requestedReviewer: _xGitHubRequestedReviewer | null;
}

/**
 * The connection type for ReviewRequest.
 */
export interface IXGitHubReviewRequestConnection {
  __typename: '_xGitHubReviewRequestConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubReviewRequestEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitHubReviewRequest | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface IXGitHubReviewRequestEdge {
  __typename: '_xGitHubReviewRequestEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitHubReviewRequest | null;
}

/**
 * Represents an 'review_request_removed' event on a given pull request.
 */
export interface IXGitHubReviewRequestRemovedEvent {
  __typename: '_xGitHubReviewRequestRemovedEvent';

  /**
   * Identifies the actor who performed the event.
   */
  actor: _xGitHubActor | null;

  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: any;
  id: string;

  /**
   * PullRequest referenced by event.
   */
  pullRequest: IXGitHubPullRequest;

  /**
   * Identifies the reviewer whose review request was removed.
   */
  requestedReviewer: _xGitHubRequestedReviewer | null;
}

/**
 * Represents an 'review_requested' event on a given pull request.
 */
export interface IXGitHubReviewRequestedEvent {
  __typename: '_xGitHubReviewRequestedEvent';

  /**
   * Identifies the actor who performed the event.
   */
  actor: _xGitHubActor | null;

  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: any;
  id: string;

  /**
   * PullRequest referenced by event.
   */
  pullRequest: IXGitHubPullRequest;

  /**
   * Identifies the reviewer whose review was requested.
   */
  requestedReviewer: _xGitHubRequestedReviewer | null;
}

/**
 * A hovercard context with a message describing the current code review state of the pull
 * request.
 */
export interface IXGitHubReviewStatusHovercardContext {
  __typename: '_xGitHubReviewStatusHovercardContext';

  /**
   * A string describing this context
   */
  message: string;

  /**
   * An octicon to accompany this context
   */
  octicon: string;

  /**
   * The current status of the pull request with respect to code review.
   */
  reviewDecision: XGitHubPullRequestReviewDecision | null;
}

/**
 * The possible digest algorithms used to sign SAML requests for an identity provider.
 */
export const enum XGitHubSamlDigestAlgorithm {
  /**
   * SHA1
   */
  SHA1 = 'SHA1',

  /**
   * SHA256
   */
  SHA256 = 'SHA256',

  /**
   * SHA384
   */
  SHA384 = 'SHA384',

  /**
   * SHA512
   */
  SHA512 = 'SHA512',
}

/**
 * The possible signature algorithms used to sign SAML requests for a Identity Provider.
 */
export const enum XGitHubSamlSignatureAlgorithm {
  /**
   * RSA-SHA1
   */
  RSA_SHA1 = 'RSA_SHA1',

  /**
   * RSA-SHA256
   */
  RSA_SHA256 = 'RSA_SHA256',

  /**
   * RSA-SHA384
   */
  RSA_SHA384 = 'RSA_SHA384',

  /**
   * RSA-SHA512
   */
  RSA_SHA512 = 'RSA_SHA512',
}

/**
 * A Saved Reply is text a user can use to reply quickly.
 */
export interface IXGitHubSavedReply {
  __typename: '_xGitHubSavedReply';

  /**
   * The body of the saved reply.
   */
  body: string;

  /**
   * The saved reply body rendered to HTML.
   */
  bodyHTML: any;

  /**
   * Identifies the primary key from the database.
   */
  databaseId: number | null;
  id: string;

  /**
   * The title of the saved reply.
   */
  title: string;

  /**
   * The user that saved this reply.
   */
  user: _xGitHubActor | null;
}

/**
 * The connection type for SavedReply.
 */
export interface IXGitHubSavedReplyConnection {
  __typename: '_xGitHubSavedReplyConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubSavedReplyEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitHubSavedReply | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface IXGitHubSavedReplyEdge {
  __typename: '_xGitHubSavedReplyEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitHubSavedReply | null;
}

/**
 * Ordering options for saved reply connections.
 */
export interface IXGitHubSavedReplyOrder {
  /**
   * The field to order saved replies by.
   */
  field: XGitHubSavedReplyOrderField;

  /**
   * The ordering direction.
   */
  direction: XGitHubOrderDirection;
}

/**
 * Properties by which saved reply connections can be ordered.
 */
export const enum XGitHubSavedReplyOrderField {
  /**
   * Order saved reply by when they were updated.
   */
  UPDATED_AT = 'UPDATED_AT',
}

/**
 * The results of a search.
 */
export type _xGitHubSearchResultItem =
  | IXGitHubApp
  | IXGitHubDiscussion
  | IXGitHubIssue
  | IXGitHubMarketplaceListing
  | IXGitHubOrganization
  | IXGitHubPullRequest
  | IXGitHubRepository
  | IXGitHubUser;

/**
 * A list of results that matched against a search query.
 */
export interface IXGitHubSearchResultItemConnection {
  __typename: '_xGitHubSearchResultItemConnection';

  /**
   * The number of pieces of code that matched the search query.
   */
  codeCount: number;

  /**
   * The number of discussions that matched the search query.
   */
  discussionCount: number;

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubSearchResultItemEdge | null> | null;

  /**
   * The number of issues that matched the search query.
   */
  issueCount: number;

  /**
   * A list of nodes.
   */
  nodes: Array<_xGitHubSearchResultItem | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * The number of repositories that matched the search query.
   */
  repositoryCount: number;

  /**
   * The number of users that matched the search query.
   */
  userCount: number;

  /**
   * The number of wiki pages that matched the search query.
   */
  wikiCount: number;
}

/**
 * An edge in a connection.
 */
export interface IXGitHubSearchResultItemEdge {
  __typename: '_xGitHubSearchResultItemEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: _xGitHubSearchResultItem | null;

  /**
   * Text matches on the result found.
   */
  textMatches: Array<IXGitHubTextMatch | null> | null;
}

/**
 * Represents the individual results of a search.
 */
export const enum XGitHubSearchType {
  /**
   * Returns results matching issues in repositories.
   */
  ISSUE = 'ISSUE',

  /**
   * Returns results matching repositories.
   */
  REPOSITORY = 'REPOSITORY',

  /**
   * Returns results matching users and organizations on GitHub.
   */
  USER = 'USER',

  /**
   * Returns matching discussions in repositories.
   */
  DISCUSSION = 'DISCUSSION',
}

/**
 * A GitHub Security Advisory
 */
export interface IXGitHubSecurityAdvisory {
  __typename: '_xGitHubSecurityAdvisory';

  /**
   * The CVSS associated with this advisory
   */
  cvss: IXGitHubCVSS;

  /**
   * CWEs associated with this Advisory
   */
  cwes: IXGitHubCWEConnection;

  /**
   * Identifies the primary key from the database.
   */
  databaseId: number | null;

  /**
   * This is a long plaintext description of the advisory
   */
  description: string;

  /**
   * The GitHub Security Advisory ID
   */
  ghsaId: string;
  id: string;

  /**
   * A list of identifiers for this advisory
   */
  identifiers: Array<IXGitHubSecurityAdvisoryIdentifier>;

  /**
   * The permalink for the advisory's dependabot alerts page
   */
  notificationsPermalink: any | null;

  /**
   * The organization that originated the advisory
   */
  origin: string;

  /**
   * The permalink for the advisory
   */
  permalink: any | null;

  /**
   * When the advisory was published
   */
  publishedAt: any;

  /**
   * A list of references for this advisory
   */
  references: Array<IXGitHubSecurityAdvisoryReference>;

  /**
   * The severity of the advisory
   */
  severity: XGitHubSecurityAdvisorySeverity;

  /**
   * A short plaintext summary of the advisory
   */
  summary: string;

  /**
   * When the advisory was last updated
   */
  updatedAt: any;

  /**
   * Vulnerabilities associated with this Advisory
   */
  vulnerabilities: IXGitHubSecurityVulnerabilityConnection;

  /**
   * When the advisory was withdrawn, if it has been withdrawn
   */
  withdrawnAt: any | null;
}

export interface ICwesOnXGitHubSecurityAdvisoryArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IVulnerabilitiesOnXGitHubSecurityAdvisoryArguments {
  /**
   * Ordering options for the returned topics.
   * @default {"field":"UPDATED_AT","direction":"DESC"}
   */
  orderBy?: IXGitHubSecurityVulnerabilityOrder | null;

  /**
   * An ecosystem to filter vulnerabilities by.
   */
  ecosystem?: XGitHubSecurityAdvisoryEcosystem | null;

  /**
   * A package name to filter vulnerabilities by.
   */
  package?: string | null;

  /**
   * A list of severities to filter vulnerabilities by.
   */
  severities?: Array<XGitHubSecurityAdvisorySeverity> | null;

  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

/**
 * The connection type for SecurityAdvisory.
 */
export interface IXGitHubSecurityAdvisoryConnection {
  __typename: '_xGitHubSecurityAdvisoryConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubSecurityAdvisoryEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitHubSecurityAdvisory | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * The possible ecosystems of a security vulnerability's package.
 */
export const enum XGitHubSecurityAdvisoryEcosystem {
  /**
   * PHP packages hosted at packagist.org
   */
  COMPOSER = 'COMPOSER',

  /**
   * Go modules
   */
  GO = 'GO',

  /**
   * Java artifacts hosted at the Maven central repository
   */
  MAVEN = 'MAVEN',

  /**
   * JavaScript packages hosted at npmjs.com
   */
  NPM = 'NPM',

  /**
   * .NET packages hosted at the NuGet Gallery
   */
  NUGET = 'NUGET',

  /**
   * Python packages hosted at PyPI.org
   */
  PIP = 'PIP',

  /**
   * Ruby gems hosted at RubyGems.org
   */
  RUBYGEMS = 'RUBYGEMS',
}

/**
 * An edge in a connection.
 */
export interface IXGitHubSecurityAdvisoryEdge {
  __typename: '_xGitHubSecurityAdvisoryEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitHubSecurityAdvisory | null;
}

/**
 * A GitHub Security Advisory Identifier
 */
export interface IXGitHubSecurityAdvisoryIdentifier {
  __typename: '_xGitHubSecurityAdvisoryIdentifier';

  /**
   * The identifier type, e.g. GHSA, CVE
   */
  type: string;

  /**
   * The identifier
   */
  value: string;
}

/**
 * An advisory identifier to filter results on.
 */
export interface IXGitHubSecurityAdvisoryIdentifierFilter {
  /**
   * The identifier type.
   */
  type: XGitHubSecurityAdvisoryIdentifierType;

  /**
   * The identifier string. Supports exact or partial matching.
   */
  value: string;
}

/**
 * Identifier formats available for advisories.
 */
export const enum XGitHubSecurityAdvisoryIdentifierType {
  /**
   * Common Vulnerabilities and Exposures Identifier.
   */
  CVE = 'CVE',

  /**
   * GitHub Security Advisory ID.
   */
  GHSA = 'GHSA',
}

/**
 * Ordering options for security advisory connections
 */
export interface IXGitHubSecurityAdvisoryOrder {
  /**
   * The field to order security advisories by.
   */
  field: XGitHubSecurityAdvisoryOrderField;

  /**
   * The ordering direction.
   */
  direction: XGitHubOrderDirection;
}

/**
 * Properties by which security advisory connections can be ordered.
 */
export const enum XGitHubSecurityAdvisoryOrderField {
  /**
   * Order advisories by publication time
   */
  PUBLISHED_AT = 'PUBLISHED_AT',

  /**
   * Order advisories by update time
   */
  UPDATED_AT = 'UPDATED_AT',
}

/**
 * An individual package
 */
export interface IXGitHubSecurityAdvisoryPackage {
  __typename: '_xGitHubSecurityAdvisoryPackage';

  /**
   * The ecosystem the package belongs to, e.g. RUBYGEMS, NPM
   */
  ecosystem: XGitHubSecurityAdvisoryEcosystem;

  /**
   * The package name
   */
  name: string;
}

/**
 * An individual package version
 */
export interface IXGitHubSecurityAdvisoryPackageVersion {
  __typename: '_xGitHubSecurityAdvisoryPackageVersion';

  /**
   * The package name or version
   */
  identifier: string;
}

/**
 * A GitHub Security Advisory Reference
 */
export interface IXGitHubSecurityAdvisoryReference {
  __typename: '_xGitHubSecurityAdvisoryReference';

  /**
   * A publicly accessible reference
   */
  url: any;
}

/**
 * Severity of the vulnerability.
 */
export const enum XGitHubSecurityAdvisorySeverity {
  /**
   * Low.
   */
  LOW = 'LOW',

  /**
   * Moderate.
   */
  MODERATE = 'MODERATE',

  /**
   * High.
   */
  HIGH = 'HIGH',

  /**
   * Critical.
   */
  CRITICAL = 'CRITICAL',
}

/**
 * An individual vulnerability within an Advisory
 */
export interface IXGitHubSecurityVulnerability {
  __typename: '_xGitHubSecurityVulnerability';

  /**
   * The Advisory associated with this Vulnerability
   */
  advisory: IXGitHubSecurityAdvisory;

  /**
   * The first version containing a fix for the vulnerability
   */
  firstPatchedVersion: IXGitHubSecurityAdvisoryPackageVersion | null;

  /**
   * A description of the vulnerable package
   */
  package: IXGitHubSecurityAdvisoryPackage;

  /**
   * The severity of the vulnerability within this package
   */
  severity: XGitHubSecurityAdvisorySeverity;

  /**
   * When the vulnerability was last updated
   */
  updatedAt: any;

  /**
   * A string that describes the vulnerable package versions.
   * This string follows a basic syntax with a few forms.
   * + `= 0.2.0` denotes a single vulnerable version.
   * + `<= 1.0.8` denotes a version range up to and including the specified version
   * + `< 0.1.11` denotes a version range up to, but excluding, the specified version
   * + `>= 4.3.0, < 4.3.5` denotes a version range with a known minimum and maximum version.
   * + `>= 0.0.1` denotes a version range with a known minimum, but no known maximum
   */
  vulnerableVersionRange: string;
}

/**
 * The connection type for SecurityVulnerability.
 */
export interface IXGitHubSecurityVulnerabilityConnection {
  __typename: '_xGitHubSecurityVulnerabilityConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubSecurityVulnerabilityEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitHubSecurityVulnerability | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface IXGitHubSecurityVulnerabilityEdge {
  __typename: '_xGitHubSecurityVulnerabilityEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitHubSecurityVulnerability | null;
}

/**
 * Ordering options for security vulnerability connections
 */
export interface IXGitHubSecurityVulnerabilityOrder {
  /**
   * The field to order security vulnerabilities by.
   */
  field: XGitHubSecurityVulnerabilityOrderField;

  /**
   * The ordering direction.
   */
  direction: XGitHubOrderDirection;
}

/**
 * Properties by which security vulnerability connections can be ordered.
 */
export const enum XGitHubSecurityVulnerabilityOrderField {
  /**
   * Order vulnerability by update time
   */
  UPDATED_AT = 'UPDATED_AT',
}

/**
 * Autogenerated input type of SetEnterpriseIdentityProvider
 */
export interface IXGitHubSetEnterpriseIdentityProviderInput {
  /**
   * The ID of the enterprise on which to set an identity provider.
   */
  enterpriseId: string;

  /**
   * The URL endpoint for the identity provider's SAML SSO.
   */
  ssoUrl: any;

  /**
   * The Issuer Entity ID for the SAML identity provider
   */
  issuer?: string | null;

  /**
   * The x509 certificate used by the identity provider to sign assertions and responses.
   */
  idpCertificate: string;

  /**
   * The signature algorithm used to sign SAML requests for the identity provider.
   */
  signatureMethod: XGitHubSamlSignatureAlgorithm;

  /**
   * The digest algorithm used to sign SAML requests for the identity provider.
   */
  digestMethod: XGitHubSamlDigestAlgorithm;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of SetEnterpriseIdentityProvider
 */
export interface IXGitHubSetEnterpriseIdentityProviderPayload {
  __typename: '_xGitHubSetEnterpriseIdentityProviderPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The identity provider for the enterprise.
   */
  identityProvider: IXGitHubEnterpriseIdentityProvider | null;
}

/**
 * Autogenerated input type of SetOrganizationInteractionLimit
 */
export interface IXGitHubSetOrganizationInteractionLimitInput {
  /**
   * The ID of the organization to set a limit for.
   */
  organizationId: string;

  /**
   * The limit to set.
   */
  limit: XGitHubRepositoryInteractionLimit;

  /**
   * When this limit should expire.
   */
  expiry?: XGitHubRepositoryInteractionLimitExpiry | null;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of SetOrganizationInteractionLimit
 */
export interface IXGitHubSetOrganizationInteractionLimitPayload {
  __typename: '_xGitHubSetOrganizationInteractionLimitPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The organization that the interaction limit was set for.
   */
  organization: IXGitHubOrganization | null;
}

/**
 * Autogenerated input type of SetRepositoryInteractionLimit
 */
export interface IXGitHubSetRepositoryInteractionLimitInput {
  /**
   * The ID of the repository to set a limit for.
   */
  repositoryId: string;

  /**
   * The limit to set.
   */
  limit: XGitHubRepositoryInteractionLimit;

  /**
   * When this limit should expire.
   */
  expiry?: XGitHubRepositoryInteractionLimitExpiry | null;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of SetRepositoryInteractionLimit
 */
export interface IXGitHubSetRepositoryInteractionLimitPayload {
  __typename: '_xGitHubSetRepositoryInteractionLimitPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The repository that the interaction limit was set for.
   */
  repository: IXGitHubRepository | null;
}

/**
 * Autogenerated input type of SetUserInteractionLimit
 */
export interface IXGitHubSetUserInteractionLimitInput {
  /**
   * The ID of the user to set a limit for.
   */
  userId: string;

  /**
   * The limit to set.
   */
  limit: XGitHubRepositoryInteractionLimit;

  /**
   * When this limit should expire.
   */
  expiry?: XGitHubRepositoryInteractionLimitExpiry | null;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of SetUserInteractionLimit
 */
export interface IXGitHubSetUserInteractionLimitPayload {
  __typename: '_xGitHubSetUserInteractionLimitPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The user that the interaction limit was set for.
   */
  user: IXGitHubUser | null;
}

/**
 * Represents an S/MIME signature on a Commit or Tag.
 */
export interface IXGitHubSmimeSignature {
  __typename: '_xGitHubSmimeSignature';

  /**
   * Email used to sign this object.
   */
  email: string;

  /**
   * True if the signature is valid and verified by GitHub.
   */
  isValid: boolean;

  /**
   * Payload for GPG signing object. Raw ODB object without the signature header.
   */
  payload: string;

  /**
   * ASCII-armored signature header from object.
   */
  signature: string;

  /**
   * GitHub user corresponding to the email signing this commit.
   */
  signer: IXGitHubUser | null;

  /**
   * The state of this signature. `VALID` if signature is valid and verified by GitHub, otherwise represents reason why signature is considered invalid.
   */
  state: XGitHubGitSignatureState;

  /**
   * True if the signature was made with GitHub's signing key.
   */
  wasSignedByGitHub: boolean;
}

/**
 * Entities that can sponsor others via GitHub Sponsors
 */
export type _xGitHubSponsor = IXGitHubOrganization | IXGitHubUser;

/**
 * The connection type for Sponsor.
 */
export interface IXGitHubSponsorConnection {
  __typename: '_xGitHubSponsorConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubSponsorEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<_xGitHubSponsor | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * Represents a user or organization who is sponsoring someone in GitHub Sponsors.
 */
export interface IXGitHubSponsorEdge {
  __typename: '_xGitHubSponsorEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: _xGitHubSponsor | null;
}

/**
 * Ordering options for connections to get sponsor entities for GitHub Sponsors.
 */
export interface IXGitHubSponsorOrder {
  /**
   * The field to order sponsor entities by.
   */
  field: XGitHubSponsorOrderField;

  /**
   * The ordering direction.
   */
  direction: XGitHubOrderDirection;
}

/**
 * Properties by which sponsor connections can be ordered.
 */
export const enum XGitHubSponsorOrderField {
  /**
   * Order sponsorable entities by login (username).
   */
  LOGIN = 'LOGIN',

  /**
   * Order sponsors by their relevance to the viewer.
   */
  RELEVANCE = 'RELEVANCE',
}

/**
 * Entities that can be sponsored through GitHub Sponsors
 */
export type _xGitHubSponsorable = IXGitHubOrganization | IXGitHubUser;

/**
 * Entities that can be sponsored through GitHub Sponsors
 */
export interface IXGitHubSponsorable {
  __typename: '_xGitHubSponsorable';

  /**
   * The estimated next GitHub Sponsors payout for this user/organization in cents (USD).
   */
  estimatedNextSponsorsPayoutInCents: number;

  /**
   * True if this user/organization has a GitHub Sponsors listing.
   */
  hasSponsorsListing: boolean;

  /**
   * Check if the given account is sponsoring this user/organization.
   */
  isSponsoredBy: boolean;

  /**
   * True if the viewer is sponsored by this user/organization.
   */
  isSponsoringViewer: boolean;

  /**
   * The estimated monthly GitHub Sponsors income for this user/organization in cents (USD).
   */
  monthlyEstimatedSponsorsIncomeInCents: number;

  /**
   * List of users and organizations this entity is sponsoring.
   */
  sponsoring: IXGitHubSponsorConnection;

  /**
   * List of sponsors for this user or organization.
   */
  sponsors: IXGitHubSponsorConnection;

  /**
   * Events involving this sponsorable, such as new sponsorships.
   */
  sponsorsActivities: IXGitHubSponsorsActivityConnection;

  /**
   * The GitHub Sponsors listing for this user or organization.
   */
  sponsorsListing: IXGitHubSponsorsListing | null;

  /**
   * The sponsorship from the viewer to this user/organization; that is, the sponsorship where you're the sponsor. Only returns a sponsorship if it is active.
   */
  sponsorshipForViewerAsSponsor: IXGitHubSponsorship | null;

  /**
   * The sponsorship from this user/organization to the viewer; that is, the sponsorship you're receiving. Only returns a sponsorship if it is active.
   */
  sponsorshipForViewerAsSponsorable: IXGitHubSponsorship | null;

  /**
   * List of sponsorship updates sent from this sponsorable to sponsors.
   */
  sponsorshipNewsletters: IXGitHubSponsorshipNewsletterConnection;

  /**
   * This object's sponsorships as the maintainer.
   */
  sponsorshipsAsMaintainer: IXGitHubSponsorshipConnection;

  /**
   * This object's sponsorships as the sponsor.
   */
  sponsorshipsAsSponsor: IXGitHubSponsorshipConnection;

  /**
   * Whether or not the viewer is able to sponsor this user/organization.
   */
  viewerCanSponsor: boolean;

  /**
   * True if the viewer is sponsoring this user/organization.
   */
  viewerIsSponsoring: boolean;
}

export interface IIsSponsoredByOnXGitHubSponsorableArguments {
  /**
   * The target account's login.
   */
  accountLogin: string;
}

export interface ISponsoringOnXGitHubSponsorableArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Ordering options for the users and organizations returned from the connection.
   * @default {"field":"RELEVANCE","direction":"DESC"}
   */
  orderBy?: IXGitHubSponsorOrder | null;
}

export interface ISponsorsOnXGitHubSponsorableArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * If given, will filter for sponsors at the given tier. Will only return sponsors whose tier the viewer is permitted to see.
   */
  tierId?: string | null;

  /**
   * Ordering options for sponsors returned from the connection.
   * @default {"field":"RELEVANCE","direction":"DESC"}
   */
  orderBy?: IXGitHubSponsorOrder | null;
}

export interface ISponsorsActivitiesOnXGitHubSponsorableArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Filter activities returned to only those that occurred in a given time range.
   * @default "MONTH"
   */
  period?: XGitHubSponsorsActivityPeriod | null;

  /**
   * Ordering options for activity returned from the connection.
   * @default {"field":"TIMESTAMP","direction":"DESC"}
   */
  orderBy?: IXGitHubSponsorsActivityOrder | null;
}

export interface ISponsorshipNewslettersOnXGitHubSponsorableArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Ordering options for sponsorship updates returned from the connection.
   * @default {"field":"CREATED_AT","direction":"DESC"}
   */
  orderBy?: IXGitHubSponsorshipNewsletterOrder | null;
}

export interface ISponsorshipsAsMaintainerOnXGitHubSponsorableArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Whether or not to include private sponsorships in the result set
   * @default false
   */
  includePrivate?: boolean | null;

  /**
   * Ordering options for sponsorships returned from this connection. If left blank, the sponsorships will be ordered based on relevancy to the viewer.
   */
  orderBy?: IXGitHubSponsorshipOrder | null;
}

export interface ISponsorshipsAsSponsorOnXGitHubSponsorableArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Ordering options for sponsorships returned from this connection. If left blank, the sponsorships will be ordered based on relevancy to the viewer.
   */
  orderBy?: IXGitHubSponsorshipOrder | null;
}

/**
 * Entities that can be sponsored via GitHub Sponsors
 */
export type _xGitHubSponsorableItem = IXGitHubOrganization | IXGitHubUser;

/**
 * The connection type for SponsorableItem.
 */
export interface IXGitHubSponsorableItemConnection {
  __typename: '_xGitHubSponsorableItemConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubSponsorableItemEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<_xGitHubSponsorableItem | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface IXGitHubSponsorableItemEdge {
  __typename: '_xGitHubSponsorableItemEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: _xGitHubSponsorableItem | null;
}

/**
 * Ordering options for connections to get sponsorable entities for GitHub Sponsors.
 */
export interface IXGitHubSponsorableOrder {
  /**
   * The field to order sponsorable entities by.
   */
  field: XGitHubSponsorableOrderField;

  /**
   * The ordering direction.
   */
  direction: XGitHubOrderDirection;
}

/**
 * Properties by which sponsorable connections can be ordered.
 */
export const enum XGitHubSponsorableOrderField {
  /**
   * Order sponsorable entities by login (username).
   */
  LOGIN = 'LOGIN',
}

/**
 * An event related to sponsorship activity.
 */
export interface IXGitHubSponsorsActivity {
  __typename: '_xGitHubSponsorsActivity';

  /**
   * What action this activity indicates took place.
   */
  action: XGitHubSponsorsActivityAction;
  id: string;

  /**
   * The tier that the sponsorship used to use, for tier change events.
   */
  previousSponsorsTier: IXGitHubSponsorsTier | null;

  /**
   * The user or organization who triggered this activity and was/is sponsoring the sponsorable.
   */
  sponsor: _xGitHubSponsor | null;

  /**
   * The user or organization that is being sponsored, the maintainer.
   */
  sponsorable: _xGitHubSponsorable;

  /**
   * The associated sponsorship tier.
   */
  sponsorsTier: IXGitHubSponsorsTier | null;

  /**
   * The timestamp of this event.
   */
  timestamp: any | null;
}

/**
 * The possible actions that GitHub Sponsors activities can represent.
 */
export const enum XGitHubSponsorsActivityAction {
  /**
   * The activity was starting a sponsorship.
   */
  NEW_SPONSORSHIP = 'NEW_SPONSORSHIP',

  /**
   * The activity was cancelling a sponsorship.
   */
  CANCELLED_SPONSORSHIP = 'CANCELLED_SPONSORSHIP',

  /**
   * The activity was changing the sponsorship tier, either directly by the sponsor or by a scheduled/pending change.
   */
  TIER_CHANGE = 'TIER_CHANGE',

  /**
   * The activity was funds being refunded to the sponsor or GitHub.
   */
  REFUND = 'REFUND',

  /**
   * The activity was scheduling a downgrade or cancellation.
   */
  PENDING_CHANGE = 'PENDING_CHANGE',

  /**
   * The activity was disabling matching for a previously matched sponsorship.
   */
  SPONSOR_MATCH_DISABLED = 'SPONSOR_MATCH_DISABLED',
}

/**
 * The connection type for SponsorsActivity.
 */
export interface IXGitHubSponsorsActivityConnection {
  __typename: '_xGitHubSponsorsActivityConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubSponsorsActivityEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitHubSponsorsActivity | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface IXGitHubSponsorsActivityEdge {
  __typename: '_xGitHubSponsorsActivityEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitHubSponsorsActivity | null;
}

/**
 * Ordering options for GitHub Sponsors activity connections.
 */
export interface IXGitHubSponsorsActivityOrder {
  /**
   * The field to order activity by.
   */
  field: XGitHubSponsorsActivityOrderField;

  /**
   * The ordering direction.
   */
  direction: XGitHubOrderDirection;
}

/**
 * Properties by which GitHub Sponsors activity connections can be ordered.
 */
export const enum XGitHubSponsorsActivityOrderField {
  /**
   * Order activities by when they happened.
   */
  TIMESTAMP = 'TIMESTAMP',
}

/**
 * The possible time periods for which Sponsors activities can be requested.
 */
export const enum XGitHubSponsorsActivityPeriod {
  /**
   * The previous calendar day.
   */
  DAY = 'DAY',

  /**
   * The previous seven days.
   */
  WEEK = 'WEEK',

  /**
   * The previous thirty days.
   */
  MONTH = 'MONTH',

  /**
   * Don't restrict the activity to any date range, include all activity.
   */
  ALL = 'ALL',
}

/**
 * A goal associated with a GitHub Sponsors listing, representing a target the sponsored maintainer would like to attain.
 */
export interface IXGitHubSponsorsGoal {
  __typename: '_xGitHubSponsorsGoal';

  /**
   * A description of the goal from the maintainer.
   */
  description: string | null;

  /**
   * What the objective of this goal is.
   */
  kind: XGitHubSponsorsGoalKind;

  /**
   * The percentage representing how complete this goal is, between 0-100.
   */
  percentComplete: number;

  /**
   * What the goal amount is. Represents an amount in USD for monthly sponsorship amount goals. Represents a count of unique sponsors for total sponsors count goals.
   */
  targetValue: number;

  /**
   * A brief summary of the kind and target value of this goal.
   */
  title: string;
}

/**
 * The different kinds of goals a GitHub Sponsors member can have.
 */
export const enum XGitHubSponsorsGoalKind {
  /**
   * The goal is about reaching a certain number of sponsors.
   */
  TOTAL_SPONSORS_COUNT = 'TOTAL_SPONSORS_COUNT',

  /**
   * The goal is about getting a certain amount in USD from sponsorships each month.
   */
  MONTHLY_SPONSORSHIP_AMOUNT = 'MONTHLY_SPONSORSHIP_AMOUNT',
}

/**
 * A GitHub Sponsors listing.
 */
export interface IXGitHubSponsorsListing {
  __typename: '_xGitHubSponsorsListing';

  /**
   * The current goal the maintainer is trying to reach with GitHub Sponsors, if any.
   */
  activeGoal: IXGitHubSponsorsGoal | null;

  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: any;

  /**
   * The full description of the listing.
   */
  fullDescription: string;

  /**
   * The full description of the listing rendered to HTML.
   */
  fullDescriptionHTML: any;
  id: string;

  /**
   * Whether this listing is publicly visible.
   */
  isPublic: boolean;

  /**
   * The listing's full name.
   */
  name: string;

  /**
   * A future date on which this listing is eligible to receive a payout.
   */
  nextPayoutDate: any | null;

  /**
   * The short description of the listing.
   */
  shortDescription: string;

  /**
   * The short name of the listing.
   */
  slug: string;

  /**
   * The entity this listing represents who can be sponsored on GitHub Sponsors.
   */
  sponsorable: _xGitHubSponsorable;

  /**
   * The published tiers for this GitHub Sponsors listing.
   */
  tiers: IXGitHubSponsorsTierConnection | null;
}

export interface ITiersOnXGitHubSponsorsListingArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Ordering options for Sponsors tiers returned from the connection.
   * @default {"field":"MONTHLY_PRICE_IN_CENTS","direction":"ASC"}
   */
  orderBy?: IXGitHubSponsorsTierOrder | null;
}

/**
 * A GitHub Sponsors tier associated with a GitHub Sponsors listing.
 */
export interface IXGitHubSponsorsTier {
  __typename: '_xGitHubSponsorsTier';

  /**
   * SponsorsTier information only visible to users that can administer the associated Sponsors listing.
   */
  adminInfo: IXGitHubSponsorsTierAdminInfo | null;

  /**
   * Get a different tier for this tier's maintainer that is at the same frequency as this tier but with an equal or lesser cost. Returns the published tier with the monthly price closest to this tier's without going over.
   */
  closestLesserValueTier: IXGitHubSponsorsTier | null;

  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: any;

  /**
   * The description of the tier.
   */
  description: string;

  /**
   * The tier description rendered to HTML
   */
  descriptionHTML: any;
  id: string;

  /**
   * Whether this tier was chosen at checkout time by the sponsor rather than defined ahead of time by the maintainer who manages the Sponsors listing.
   */
  isCustomAmount: boolean;

  /**
   * Whether this tier is only for use with one-time sponsorships.
   */
  isOneTime: boolean;

  /**
   * How much this tier costs per month in cents.
   */
  monthlyPriceInCents: number;

  /**
   * How much this tier costs per month in USD.
   */
  monthlyPriceInDollars: number;

  /**
   * The name of the tier.
   */
  name: string;

  /**
   * The sponsors listing that this tier belongs to.
   */
  sponsorsListing: IXGitHubSponsorsListing;

  /**
   * Identifies the date and time when the object was last updated.
   */
  updatedAt: any;
}

/**
 * SponsorsTier information only visible to users that can administer the associated Sponsors listing.
 */
export interface IXGitHubSponsorsTierAdminInfo {
  __typename: '_xGitHubSponsorsTierAdminInfo';

  /**
   * The sponsorships associated with this tier.
   */
  sponsorships: IXGitHubSponsorshipConnection;
}

export interface ISponsorshipsOnXGitHubSponsorsTierAdminInfoArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Whether or not to include private sponsorships in the result set
   * @default false
   */
  includePrivate?: boolean | null;

  /**
   * Ordering options for sponsorships returned from this connection. If left blank, the sponsorships will be ordered based on relevancy to the viewer.
   */
  orderBy?: IXGitHubSponsorshipOrder | null;
}

/**
 * The connection type for SponsorsTier.
 */
export interface IXGitHubSponsorsTierConnection {
  __typename: '_xGitHubSponsorsTierConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubSponsorsTierEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitHubSponsorsTier | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface IXGitHubSponsorsTierEdge {
  __typename: '_xGitHubSponsorsTierEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitHubSponsorsTier | null;
}

/**
 * Ordering options for Sponsors tiers connections.
 */
export interface IXGitHubSponsorsTierOrder {
  /**
   * The field to order tiers by.
   */
  field: XGitHubSponsorsTierOrderField;

  /**
   * The ordering direction.
   */
  direction: XGitHubOrderDirection;
}

/**
 * Properties by which Sponsors tiers connections can be ordered.
 */
export const enum XGitHubSponsorsTierOrderField {
  /**
   * Order tiers by creation time.
   */
  CREATED_AT = 'CREATED_AT',

  /**
   * Order tiers by their monthly price in cents
   */
  MONTHLY_PRICE_IN_CENTS = 'MONTHLY_PRICE_IN_CENTS',
}

/**
 * A sponsorship relationship between a sponsor and a maintainer
 */
export interface IXGitHubSponsorship {
  __typename: '_xGitHubSponsorship';

  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: any;
  id: string;

  /**
   * Whether this sponsorship represents a one-time payment versus a recurring sponsorship.
   */
  isOneTimePayment: boolean;

  /**
   * Check if the sponsor has chosen to receive sponsorship update emails sent from the sponsorable. Only returns a non-null value when the viewer has permission to know this.
   */
  isSponsorOptedIntoEmail: boolean | null;

  /**
   * The entity that is being sponsored
   * @deprecated "`Sponsorship.maintainer` will be removed. Use `Sponsorship.sponsorable` instead. Removal on 2020-04-01 UTC."
   */
  maintainer: IXGitHubUser;

  /**
   * The privacy level for this sponsorship.
   */
  privacyLevel: XGitHubSponsorshipPrivacy;

  /**
   * The user that is sponsoring. Returns null if the sponsorship is private or if sponsor is not a user.
   * @deprecated "`Sponsorship.sponsor` will be removed. Use `Sponsorship.sponsorEntity` instead. Removal on 2020-10-01 UTC."
   */
  sponsor: IXGitHubUser | null;

  /**
   * The user or organization that is sponsoring, if you have permission to view them.
   */
  sponsorEntity: _xGitHubSponsor | null;

  /**
   * The entity that is being sponsored
   */
  sponsorable: _xGitHubSponsorable;

  /**
   * The associated sponsorship tier
   */
  tier: IXGitHubSponsorsTier | null;

  /**
   * Identifies the date and time when the current tier was chosen for this sponsorship.
   */
  tierSelectedAt: any | null;
}

/**
 * The connection type for Sponsorship.
 */
export interface IXGitHubSponsorshipConnection {
  __typename: '_xGitHubSponsorshipConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubSponsorshipEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitHubSponsorship | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;

  /**
   * The total amount in cents of all recurring sponsorships in the connection whose amount you can view. Does not include one-time sponsorships.
   */
  totalRecurringMonthlyPriceInCents: number;

  /**
   * The total amount in USD of all recurring sponsorships in the connection whose amount you can view. Does not include one-time sponsorships.
   */
  totalRecurringMonthlyPriceInDollars: number;
}

/**
 * An edge in a connection.
 */
export interface IXGitHubSponsorshipEdge {
  __typename: '_xGitHubSponsorshipEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitHubSponsorship | null;
}

/**
 * An update sent to sponsors of a user or organization on GitHub Sponsors.
 */
export interface IXGitHubSponsorshipNewsletter {
  __typename: '_xGitHubSponsorshipNewsletter';

  /**
   * The contents of the newsletter, the message the sponsorable wanted to give.
   */
  body: string;

  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: any;
  id: string;

  /**
   * Indicates if the newsletter has been made available to sponsors.
   */
  isPublished: boolean;

  /**
   * The user or organization this newsletter is from.
   */
  sponsorable: _xGitHubSponsorable;

  /**
   * The subject of the newsletter, what it's about.
   */
  subject: string;

  /**
   * Identifies the date and time when the object was last updated.
   */
  updatedAt: any;
}

/**
 * The connection type for SponsorshipNewsletter.
 */
export interface IXGitHubSponsorshipNewsletterConnection {
  __typename: '_xGitHubSponsorshipNewsletterConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubSponsorshipNewsletterEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitHubSponsorshipNewsletter | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface IXGitHubSponsorshipNewsletterEdge {
  __typename: '_xGitHubSponsorshipNewsletterEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitHubSponsorshipNewsletter | null;
}

/**
 * Ordering options for sponsorship newsletter connections.
 */
export interface IXGitHubSponsorshipNewsletterOrder {
  /**
   * The field to order sponsorship newsletters by.
   */
  field: XGitHubSponsorshipNewsletterOrderField;

  /**
   * The ordering direction.
   */
  direction: XGitHubOrderDirection;
}

/**
 * Properties by which sponsorship update connections can be ordered.
 */
export const enum XGitHubSponsorshipNewsletterOrderField {
  /**
   * Order sponsorship newsletters by when they were created.
   */
  CREATED_AT = 'CREATED_AT',
}

/**
 * Ordering options for sponsorship connections.
 */
export interface IXGitHubSponsorshipOrder {
  /**
   * The field to order sponsorship by.
   */
  field: XGitHubSponsorshipOrderField;

  /**
   * The ordering direction.
   */
  direction: XGitHubOrderDirection;
}

/**
 * Properties by which sponsorship connections can be ordered.
 */
export const enum XGitHubSponsorshipOrderField {
  /**
   * Order sponsorship by creation time.
   */
  CREATED_AT = 'CREATED_AT',
}

/**
 * The privacy of a sponsorship
 */
export const enum XGitHubSponsorshipPrivacy {
  /**
   * Public
   */
  PUBLIC = 'PUBLIC',

  /**
   * Private
   */
  PRIVATE = 'PRIVATE',
}

/**
 * Ways in which star connections can be ordered.
 */
export interface IXGitHubStarOrder {
  /**
   * The field in which to order nodes by.
   */
  field: XGitHubStarOrderField;

  /**
   * The direction in which to order nodes.
   */
  direction: XGitHubOrderDirection;
}

/**
 * Properties by which star connections can be ordered.
 */
export const enum XGitHubStarOrderField {
  /**
   * Allows ordering a list of stars by when they were created.
   */
  STARRED_AT = 'STARRED_AT',
}

/**
 * The connection type for User.
 */
export interface IXGitHubStargazerConnection {
  __typename: '_xGitHubStargazerConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubStargazerEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitHubUser | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * Represents a user that's starred a repository.
 */
export interface IXGitHubStargazerEdge {
  __typename: '_xGitHubStargazerEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  node: IXGitHubUser;

  /**
   * Identifies when the item was starred.
   */
  starredAt: any;
}

/**
 * Things that can be starred.
 */
export type _xGitHubStarrable =
  | IXGitHubGist
  | IXGitHubRepository
  | IXGitHubTopic;

/**
 * Things that can be starred.
 */
export interface IXGitHubStarrable {
  __typename: '_xGitHubStarrable';
  id: string;

  /**
   * Returns a count of how many stargazers there are on this object
   */
  stargazerCount: number;

  /**
   * A list of users who have starred this starrable.
   */
  stargazers: IXGitHubStargazerConnection;

  /**
   * Returns a boolean indicating whether the viewing user has starred this starrable.
   */
  viewerHasStarred: boolean;
}

export interface IStargazersOnXGitHubStarrableArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Order for connection
   */
  orderBy?: IXGitHubStarOrder | null;
}

/**
 * The connection type for Repository.
 */
export interface IXGitHubStarredRepositoryConnection {
  __typename: '_xGitHubStarredRepositoryConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubStarredRepositoryEdge | null> | null;

  /**
   * Is the list of stars for this user truncated? This is true for users that have many stars.
   */
  isOverLimit: boolean;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitHubRepository | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * Represents a starred repository.
 */
export interface IXGitHubStarredRepositoryEdge {
  __typename: '_xGitHubStarredRepositoryEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  node: IXGitHubRepository;

  /**
   * Identifies when the item was starred.
   */
  starredAt: any;
}

/**
 * Represents a commit status.
 */
export interface IXGitHubStatus {
  __typename: '_xGitHubStatus';

  /**
   * A list of status contexts and check runs for this commit.
   */
  combinedContexts: IXGitHubStatusCheckRollupContextConnection;

  /**
   * The commit this status is attached to.
   */
  commit: IXGitHubCommit | null;

  /**
   * Looks up an individual status context by context name.
   */
  context: IXGitHubStatusContext | null;

  /**
   * The individual status contexts for this commit.
   */
  contexts: Array<IXGitHubStatusContext>;
  id: string;

  /**
   * The combined commit status.
   */
  state: XGitHubStatusState;
}

export interface ICombinedContextsOnXGitHubStatusArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IContextOnXGitHubStatusArguments {
  /**
   * The context name.
   */
  name: string;
}

/**
 * Represents the rollup for both the check runs and status for a commit.
 */
export interface IXGitHubStatusCheckRollup {
  __typename: '_xGitHubStatusCheckRollup';

  /**
   * The commit the status and check runs are attached to.
   */
  commit: IXGitHubCommit | null;

  /**
   * A list of status contexts and check runs for this commit.
   */
  contexts: IXGitHubStatusCheckRollupContextConnection;
  id: string;

  /**
   * The combined status for the commit.
   */
  state: XGitHubStatusState;
}

export interface IContextsOnXGitHubStatusCheckRollupArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

/**
 * Types that can be inside a StatusCheckRollup context.
 */
export type _xGitHubStatusCheckRollupContext =
  | IXGitHubCheckRun
  | IXGitHubStatusContext;

/**
 * The connection type for StatusCheckRollupContext.
 */
export interface IXGitHubStatusCheckRollupContextConnection {
  __typename: '_xGitHubStatusCheckRollupContextConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubStatusCheckRollupContextEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<_xGitHubStatusCheckRollupContext | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface IXGitHubStatusCheckRollupContextEdge {
  __typename: '_xGitHubStatusCheckRollupContextEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: _xGitHubStatusCheckRollupContext | null;
}

/**
 * Represents an individual commit status context
 */
export interface IXGitHubStatusContext {
  __typename: '_xGitHubStatusContext';

  /**
   * The avatar of the OAuth application or the user that created the status
   */
  avatarUrl: any | null;

  /**
   * This commit this status context is attached to.
   */
  commit: IXGitHubCommit | null;

  /**
   * The name of this status context.
   */
  context: string;

  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: any;

  /**
   * The actor who created this status context.
   */
  creator: _xGitHubActor | null;

  /**
   * The description for this status context.
   */
  description: string | null;
  id: string;

  /**
   * Whether this is required to pass before merging for a specific pull request.
   */
  isRequired: boolean;

  /**
   * The state of this status context.
   */
  state: XGitHubStatusState;

  /**
   * The URL for this status context.
   */
  targetUrl: any | null;
}

export interface IAvatarUrlOnXGitHubStatusContextArguments {
  /**
   * The size of the resulting square image.
   * @default 40
   */
  size?: number | null;
}

export interface IIsRequiredOnXGitHubStatusContextArguments {
  /**
   * The id of the pull request this is required for
   */
  pullRequestId?: string | null;

  /**
   * The number of the pull request this is required for
   */
  pullRequestNumber?: number | null;
}

/**
 * The possible commit status states.
 */
export const enum XGitHubStatusState {
  /**
   * Status is expected.
   */
  EXPECTED = 'EXPECTED',

  /**
   * Status is errored.
   */
  ERROR = 'ERROR',

  /**
   * Status is failing.
   */
  FAILURE = 'FAILURE',

  /**
   * Status is pending.
   */
  PENDING = 'PENDING',

  /**
   * Status is successful.
   */
  SUCCESS = 'SUCCESS',
}

/**
 * Autogenerated input type of SubmitPullRequestReview
 */
export interface IXGitHubSubmitPullRequestReviewInput {
  /**
   * The Pull Request ID to submit any pending reviews.
   */
  pullRequestId?: string | null;

  /**
   * The Pull Request Review ID to submit.
   */
  pullRequestReviewId?: string | null;

  /**
   * The event to send to the Pull Request Review.
   */
  event: XGitHubPullRequestReviewEvent;

  /**
   * The text field to set on the Pull Request Review.
   */
  body?: string | null;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of SubmitPullRequestReview
 */
export interface IXGitHubSubmitPullRequestReviewPayload {
  __typename: '_xGitHubSubmitPullRequestReviewPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The submitted pull request review.
   */
  pullRequestReview: IXGitHubPullRequestReview | null;
}

/**
 * A pointer to a repository at a specific revision embedded inside another repository.
 */
export interface IXGitHubSubmodule {
  __typename: '_xGitHubSubmodule';

  /**
   * The branch of the upstream submodule for tracking updates
   */
  branch: string | null;

  /**
   * The git URL of the submodule repository
   */
  gitUrl: any;

  /**
   * The name of the submodule in .gitmodules
   */
  name: string;

  /**
   * The path in the superproject that this submodule is located in
   */
  path: string;

  /**
   * The commit revision of the subproject repository being tracked by the submodule
   */
  subprojectCommitOid: any | null;
}

/**
 * The connection type for Submodule.
 */
export interface IXGitHubSubmoduleConnection {
  __typename: '_xGitHubSubmoduleConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubSubmoduleEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitHubSubmodule | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface IXGitHubSubmoduleEdge {
  __typename: '_xGitHubSubmoduleEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitHubSubmodule | null;
}

/**
 * Entities that can be subscribed to for web and email notifications.
 */
export type _xGitHubSubscribable =
  | IXGitHubCommit
  | IXGitHubDiscussion
  | IXGitHubIssue
  | IXGitHubPullRequest
  | IXGitHubRepository
  | IXGitHubTeam
  | IXGitHubTeamDiscussion;

/**
 * Entities that can be subscribed to for web and email notifications.
 */
export interface IXGitHubSubscribable {
  __typename: '_xGitHubSubscribable';
  id: string;

  /**
   * Check if the viewer is able to change their subscription status for the repository.
   */
  viewerCanSubscribe: boolean;

  /**
   * Identifies if the viewer is watching, not watching, or ignoring the subscribable entity.
   */
  viewerSubscription: XGitHubSubscriptionState | null;
}

/**
 * Represents a 'subscribed' event on a given `Subscribable`.
 */
export interface IXGitHubSubscribedEvent {
  __typename: '_xGitHubSubscribedEvent';

  /**
   * Identifies the actor who performed the event.
   */
  actor: _xGitHubActor | null;

  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: any;
  id: string;

  /**
   * Object referenced by event.
   */
  subscribable: _xGitHubSubscribable;
}

/**
 * The possible states of a subscription.
 */
export const enum XGitHubSubscriptionState {
  /**
   * The User is only notified when participating or @mentioned.
   */
  UNSUBSCRIBED = 'UNSUBSCRIBED',

  /**
   * The User is notified of all conversations.
   */
  SUBSCRIBED = 'SUBSCRIBED',

  /**
   * The User is never notified.
   */
  IGNORED = 'IGNORED',
}

/**
 * A suggestion to review a pull request based on a user's commit history and review comments.
 */
export interface IXGitHubSuggestedReviewer {
  __typename: '_xGitHubSuggestedReviewer';

  /**
   * Is this suggestion based on past commits?
   */
  isAuthor: boolean;

  /**
   * Is this suggestion based on past review comments?
   */
  isCommenter: boolean;

  /**
   * Identifies the user suggested to review the pull request.
   */
  reviewer: IXGitHubUser;
}

/**
 * Represents a Git tag.
 */
export interface IXGitHubTag {
  __typename: '_xGitHubTag';

  /**
   * An abbreviated version of the Git object ID
   */
  abbreviatedOid: string;

  /**
   * The HTTP path for this Git object
   */
  commitResourcePath: any;

  /**
   * The HTTP URL for this Git object
   */
  commitUrl: any;
  id: string;

  /**
   * The Git tag message.
   */
  message: string | null;

  /**
   * The Git tag name.
   */
  name: string;

  /**
   * The Git object ID
   */
  oid: any;

  /**
   * The Repository the Git object belongs to
   */
  repository: IXGitHubRepository;

  /**
   * Details about the tag author.
   */
  tagger: IXGitHubGitActor | null;

  /**
   * The Git object the tag points to.
   */
  target: _xGitHubGitObject;
}

/**
 * A team of users in an organization.
 */
export interface IXGitHubTeam {
  __typename: '_xGitHubTeam';

  /**
   * A list of teams that are ancestors of this team.
   */
  ancestors: IXGitHubTeamConnection;

  /**
   * A URL pointing to the team's avatar.
   */
  avatarUrl: any | null;

  /**
   * List of child teams belonging to this team
   */
  childTeams: IXGitHubTeamConnection;

  /**
   * The slug corresponding to the organization and team.
   */
  combinedSlug: string;

  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: any;

  /**
   * Identifies the primary key from the database.
   */
  databaseId: number | null;

  /**
   * The description of the team.
   */
  description: string | null;

  /**
   * Find a team discussion by its number.
   */
  discussion: IXGitHubTeamDiscussion | null;

  /**
   * A list of team discussions.
   */
  discussions: IXGitHubTeamDiscussionConnection;

  /**
   * The HTTP path for team discussions
   */
  discussionsResourcePath: any;

  /**
   * The HTTP URL for team discussions
   */
  discussionsUrl: any;

  /**
   * The HTTP path for editing this team
   */
  editTeamResourcePath: any;

  /**
   * The HTTP URL for editing this team
   */
  editTeamUrl: any;
  id: string;

  /**
   * A list of pending invitations for users to this team
   */
  invitations: IXGitHubOrganizationInvitationConnection | null;

  /**
   * Get the status messages members of this entity have set that are either public or visible only to the organization.
   */
  memberStatuses: IXGitHubUserStatusConnection;

  /**
   * A list of users who are members of this team.
   */
  members: IXGitHubTeamMemberConnection;

  /**
   * The HTTP path for the team' members
   */
  membersResourcePath: any;

  /**
   * The HTTP URL for the team' members
   */
  membersUrl: any;

  /**
   * The name of the team.
   */
  name: string;

  /**
   * The HTTP path creating a new team
   */
  newTeamResourcePath: any;

  /**
   * The HTTP URL creating a new team
   */
  newTeamUrl: any;

  /**
   * The organization that owns this team.
   */
  organization: IXGitHubOrganization;

  /**
   * The parent team of the team.
   */
  parentTeam: IXGitHubTeam | null;

  /**
   * The level of privacy the team has.
   */
  privacy: XGitHubTeamPrivacy;

  /**
   * A list of repositories this team has access to.
   */
  repositories: IXGitHubTeamRepositoryConnection;

  /**
   * The HTTP path for this team's repositories
   */
  repositoriesResourcePath: any;

  /**
   * The HTTP URL for this team's repositories
   */
  repositoriesUrl: any;

  /**
   * The HTTP path for this team
   */
  resourcePath: any;

  /**
   * The slug corresponding to the team.
   */
  slug: string;

  /**
   * The HTTP path for this team's teams
   */
  teamsResourcePath: any;

  /**
   * The HTTP URL for this team's teams
   */
  teamsUrl: any;

  /**
   * Identifies the date and time when the object was last updated.
   */
  updatedAt: any;

  /**
   * The HTTP URL for this team
   */
  url: any;

  /**
   * Team is adminable by the viewer.
   */
  viewerCanAdminister: boolean;

  /**
   * Check if the viewer is able to change their subscription status for the repository.
   */
  viewerCanSubscribe: boolean;

  /**
   * Identifies if the viewer is watching, not watching, or ignoring the subscribable entity.
   */
  viewerSubscription: XGitHubSubscriptionState | null;
}

export interface IAncestorsOnXGitHubTeamArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IAvatarUrlOnXGitHubTeamArguments {
  /**
   * The size in pixels of the resulting square image.
   * @default 400
   */
  size?: number | null;
}

export interface IChildTeamsOnXGitHubTeamArguments {
  /**
   * Order for connection
   */
  orderBy?: IXGitHubTeamOrder | null;

  /**
   * User logins to filter by
   */
  userLogins?: Array<string> | null;

  /**
   * Whether to list immediate child teams or all descendant child teams.
   * @default true
   */
  immediateOnly?: boolean | null;

  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IDiscussionOnXGitHubTeamArguments {
  /**
   * The sequence number of the discussion to find.
   */
  number: number;
}

export interface IDiscussionsOnXGitHubTeamArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * If provided, filters discussions according to whether or not they are pinned.
   */
  isPinned?: boolean | null;

  /**
   * Order for connection
   */
  orderBy?: IXGitHubTeamDiscussionOrder | null;
}

export interface IInvitationsOnXGitHubTeamArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IMemberStatusesOnXGitHubTeamArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Ordering options for user statuses returned from the connection.
   * @default {"field":"UPDATED_AT","direction":"DESC"}
   */
  orderBy?: IXGitHubUserStatusOrder | null;
}

export interface IMembersOnXGitHubTeamArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * The search string to look for.
   */
  query?: string | null;

  /**
   * Filter by membership type
   * @default "ALL"
   */
  membership?: XGitHubTeamMembershipType | null;

  /**
   * Filter by team member role
   */
  role?: XGitHubTeamMemberRole | null;

  /**
   * Order for the connection.
   */
  orderBy?: IXGitHubTeamMemberOrder | null;
}

export interface IRepositoriesOnXGitHubTeamArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * The search string to look for.
   */
  query?: string | null;

  /**
   * Order for the connection.
   */
  orderBy?: IXGitHubTeamRepositoryOrder | null;
}

/**
 * Audit log entry for a team.add_member event.
 */
export interface IXGitHubTeamAddMemberAuditEntry {
  __typename: '_xGitHubTeamAddMemberAuditEntry';

  /**
   * The action name
   */
  action: string;

  /**
   * The user who initiated the action
   */
  actor: _xGitHubAuditEntryActor | null;

  /**
   * The IP address of the actor
   */
  actorIp: string | null;

  /**
   * A readable representation of the actor's location
   */
  actorLocation: IXGitHubActorLocation | null;

  /**
   * The username of the user who initiated the action
   */
  actorLogin: string | null;

  /**
   * The HTTP path for the actor.
   */
  actorResourcePath: any | null;

  /**
   * The HTTP URL for the actor.
   */
  actorUrl: any | null;

  /**
   * The time the action was initiated
   */
  createdAt: any;
  id: string;

  /**
   * Whether the team was mapped to an LDAP Group.
   */
  isLdapMapped: boolean | null;

  /**
   * The corresponding operation type for the action
   */
  operationType: XGitHubOperationType | null;

  /**
   * The Organization associated with the Audit Entry.
   */
  organization: IXGitHubOrganization | null;

  /**
   * The name of the Organization.
   */
  organizationName: string | null;

  /**
   * The HTTP path for the organization
   */
  organizationResourcePath: any | null;

  /**
   * The HTTP URL for the organization
   */
  organizationUrl: any | null;

  /**
   * The team associated with the action
   */
  team: IXGitHubTeam | null;

  /**
   * The name of the team
   */
  teamName: string | null;

  /**
   * The HTTP path for this team
   */
  teamResourcePath: any | null;

  /**
   * The HTTP URL for this team
   */
  teamUrl: any | null;

  /**
   * The user affected by the action
   */
  user: IXGitHubUser | null;

  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin: string | null;

  /**
   * The HTTP path for the user.
   */
  userResourcePath: any | null;

  /**
   * The HTTP URL for the user.
   */
  userUrl: any | null;
}

/**
 * Audit log entry for a team.add_repository event.
 */
export interface IXGitHubTeamAddRepositoryAuditEntry {
  __typename: '_xGitHubTeamAddRepositoryAuditEntry';

  /**
   * The action name
   */
  action: string;

  /**
   * The user who initiated the action
   */
  actor: _xGitHubAuditEntryActor | null;

  /**
   * The IP address of the actor
   */
  actorIp: string | null;

  /**
   * A readable representation of the actor's location
   */
  actorLocation: IXGitHubActorLocation | null;

  /**
   * The username of the user who initiated the action
   */
  actorLogin: string | null;

  /**
   * The HTTP path for the actor.
   */
  actorResourcePath: any | null;

  /**
   * The HTTP URL for the actor.
   */
  actorUrl: any | null;

  /**
   * The time the action was initiated
   */
  createdAt: any;
  id: string;

  /**
   * Whether the team was mapped to an LDAP Group.
   */
  isLdapMapped: boolean | null;

  /**
   * The corresponding operation type for the action
   */
  operationType: XGitHubOperationType | null;

  /**
   * The Organization associated with the Audit Entry.
   */
  organization: IXGitHubOrganization | null;

  /**
   * The name of the Organization.
   */
  organizationName: string | null;

  /**
   * The HTTP path for the organization
   */
  organizationResourcePath: any | null;

  /**
   * The HTTP URL for the organization
   */
  organizationUrl: any | null;

  /**
   * The repository associated with the action
   */
  repository: IXGitHubRepository | null;

  /**
   * The name of the repository
   */
  repositoryName: string | null;

  /**
   * The HTTP path for the repository
   */
  repositoryResourcePath: any | null;

  /**
   * The HTTP URL for the repository
   */
  repositoryUrl: any | null;

  /**
   * The team associated with the action
   */
  team: IXGitHubTeam | null;

  /**
   * The name of the team
   */
  teamName: string | null;

  /**
   * The HTTP path for this team
   */
  teamResourcePath: any | null;

  /**
   * The HTTP URL for this team
   */
  teamUrl: any | null;

  /**
   * The user affected by the action
   */
  user: IXGitHubUser | null;

  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin: string | null;

  /**
   * The HTTP path for the user.
   */
  userResourcePath: any | null;

  /**
   * The HTTP URL for the user.
   */
  userUrl: any | null;
}

/**
 * Metadata for an audit entry with action team.*
 */
export type _xGitHubTeamAuditEntryData =
  | IXGitHubOrgRestoreMemberMembershipTeamAuditEntryData
  | IXGitHubTeamAddMemberAuditEntry
  | IXGitHubTeamAddRepositoryAuditEntry
  | IXGitHubTeamChangeParentTeamAuditEntry
  | IXGitHubTeamRemoveMemberAuditEntry
  | IXGitHubTeamRemoveRepositoryAuditEntry;

/**
 * Metadata for an audit entry with action team.*
 */
export interface IXGitHubTeamAuditEntryData {
  __typename: '_xGitHubTeamAuditEntryData';

  /**
   * The team associated with the action
   */
  team: IXGitHubTeam | null;

  /**
   * The name of the team
   */
  teamName: string | null;

  /**
   * The HTTP path for this team
   */
  teamResourcePath: any | null;

  /**
   * The HTTP URL for this team
   */
  teamUrl: any | null;
}

/**
 * Audit log entry for a team.change_parent_team event.
 */
export interface IXGitHubTeamChangeParentTeamAuditEntry {
  __typename: '_xGitHubTeamChangeParentTeamAuditEntry';

  /**
   * The action name
   */
  action: string;

  /**
   * The user who initiated the action
   */
  actor: _xGitHubAuditEntryActor | null;

  /**
   * The IP address of the actor
   */
  actorIp: string | null;

  /**
   * A readable representation of the actor's location
   */
  actorLocation: IXGitHubActorLocation | null;

  /**
   * The username of the user who initiated the action
   */
  actorLogin: string | null;

  /**
   * The HTTP path for the actor.
   */
  actorResourcePath: any | null;

  /**
   * The HTTP URL for the actor.
   */
  actorUrl: any | null;

  /**
   * The time the action was initiated
   */
  createdAt: any;
  id: string;

  /**
   * Whether the team was mapped to an LDAP Group.
   */
  isLdapMapped: boolean | null;

  /**
   * The corresponding operation type for the action
   */
  operationType: XGitHubOperationType | null;

  /**
   * The Organization associated with the Audit Entry.
   */
  organization: IXGitHubOrganization | null;

  /**
   * The name of the Organization.
   */
  organizationName: string | null;

  /**
   * The HTTP path for the organization
   */
  organizationResourcePath: any | null;

  /**
   * The HTTP URL for the organization
   */
  organizationUrl: any | null;

  /**
   * The new parent team.
   */
  parentTeam: IXGitHubTeam | null;

  /**
   * The name of the new parent team
   */
  parentTeamName: string | null;

  /**
   * The name of the former parent team
   */
  parentTeamNameWas: string | null;

  /**
   * The HTTP path for the parent team
   */
  parentTeamResourcePath: any | null;

  /**
   * The HTTP URL for the parent team
   */
  parentTeamUrl: any | null;

  /**
   * The former parent team.
   */
  parentTeamWas: IXGitHubTeam | null;

  /**
   * The HTTP path for the previous parent team
   */
  parentTeamWasResourcePath: any | null;

  /**
   * The HTTP URL for the previous parent team
   */
  parentTeamWasUrl: any | null;

  /**
   * The team associated with the action
   */
  team: IXGitHubTeam | null;

  /**
   * The name of the team
   */
  teamName: string | null;

  /**
   * The HTTP path for this team
   */
  teamResourcePath: any | null;

  /**
   * The HTTP URL for this team
   */
  teamUrl: any | null;

  /**
   * The user affected by the action
   */
  user: IXGitHubUser | null;

  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin: string | null;

  /**
   * The HTTP path for the user.
   */
  userResourcePath: any | null;

  /**
   * The HTTP URL for the user.
   */
  userUrl: any | null;
}

/**
 * The connection type for Team.
 */
export interface IXGitHubTeamConnection {
  __typename: '_xGitHubTeamConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubTeamEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitHubTeam | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * A team discussion.
 */
export interface IXGitHubTeamDiscussion {
  __typename: '_xGitHubTeamDiscussion';

  /**
   * The actor who authored the comment.
   */
  author: _xGitHubActor | null;

  /**
   * Author's association with the discussion's team.
   */
  authorAssociation: XGitHubCommentAuthorAssociation;

  /**
   * The body as Markdown.
   */
  body: string;

  /**
   * The body rendered to HTML.
   */
  bodyHTML: any;

  /**
   * The body rendered to text.
   */
  bodyText: string;

  /**
   * Identifies the discussion body hash.
   */
  bodyVersion: string;

  /**
   * A list of comments on this discussion.
   */
  comments: IXGitHubTeamDiscussionCommentConnection;

  /**
   * The HTTP path for discussion comments
   */
  commentsResourcePath: any;

  /**
   * The HTTP URL for discussion comments
   */
  commentsUrl: any;

  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: any;

  /**
   * Check if this comment was created via an email reply.
   */
  createdViaEmail: boolean;

  /**
   * Identifies the primary key from the database.
   */
  databaseId: number | null;

  /**
   * The actor who edited the comment.
   */
  editor: _xGitHubActor | null;
  id: string;

  /**
   * Check if this comment was edited and includes an edit with the creation data
   */
  includesCreatedEdit: boolean;

  /**
   * Whether or not the discussion is pinned.
   */
  isPinned: boolean;

  /**
   * Whether or not the discussion is only visible to team members and org admins.
   */
  isPrivate: boolean;

  /**
   * The moment the editor made the last edit
   */
  lastEditedAt: any | null;

  /**
   * Identifies the discussion within its team.
   */
  number: number;

  /**
   * Identifies when the comment was published at.
   */
  publishedAt: any | null;

  /**
   * A list of reactions grouped by content left on the subject.
   */
  reactionGroups: Array<IXGitHubReactionGroup> | null;

  /**
   * A list of Reactions left on the Issue.
   */
  reactions: IXGitHubReactionConnection;

  /**
   * The HTTP path for this discussion
   */
  resourcePath: any;

  /**
   * The team that defines the context of this discussion.
   */
  team: IXGitHubTeam;

  /**
   * The title of the discussion
   */
  title: string;

  /**
   * Identifies the date and time when the object was last updated.
   */
  updatedAt: any;

  /**
   * The HTTP URL for this discussion
   */
  url: any;

  /**
   * A list of edits to this content.
   */
  userContentEdits: IXGitHubUserContentEditConnection | null;

  /**
   * Check if the current viewer can delete this object.
   */
  viewerCanDelete: boolean;

  /**
   * Whether or not the current viewer can pin this discussion.
   */
  viewerCanPin: boolean;

  /**
   * Can user react to this subject
   */
  viewerCanReact: boolean;

  /**
   * Check if the viewer is able to change their subscription status for the repository.
   */
  viewerCanSubscribe: boolean;

  /**
   * Check if the current viewer can update this object.
   */
  viewerCanUpdate: boolean;

  /**
   * Reasons why the current viewer can not update this comment.
   */
  viewerCannotUpdateReasons: Array<XGitHubCommentCannotUpdateReason>;

  /**
   * Did the viewer author this comment.
   */
  viewerDidAuthor: boolean;

  /**
   * Identifies if the viewer is watching, not watching, or ignoring the subscribable entity.
   */
  viewerSubscription: XGitHubSubscriptionState | null;
}

export interface ICommentsOnXGitHubTeamDiscussionArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Order for connection
   */
  orderBy?: IXGitHubTeamDiscussionCommentOrder | null;

  /**
   * When provided, filters the connection such that results begin with the comment with this number.
   */
  fromComment?: number | null;
}

export interface IReactionsOnXGitHubTeamDiscussionArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Allows filtering Reactions by emoji.
   */
  content?: XGitHubReactionContent | null;

  /**
   * Allows specifying the order in which reactions are returned.
   */
  orderBy?: IXGitHubReactionOrder | null;
}

export interface IUserContentEditsOnXGitHubTeamDiscussionArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

/**
 * A comment on a team discussion.
 */
export interface IXGitHubTeamDiscussionComment {
  __typename: '_xGitHubTeamDiscussionComment';

  /**
   * The actor who authored the comment.
   */
  author: _xGitHubActor | null;

  /**
   * Author's association with the comment's team.
   */
  authorAssociation: XGitHubCommentAuthorAssociation;

  /**
   * The body as Markdown.
   */
  body: string;

  /**
   * The body rendered to HTML.
   */
  bodyHTML: any;

  /**
   * The body rendered to text.
   */
  bodyText: string;

  /**
   * The current version of the body content.
   */
  bodyVersion: string;

  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: any;

  /**
   * Check if this comment was created via an email reply.
   */
  createdViaEmail: boolean;

  /**
   * Identifies the primary key from the database.
   */
  databaseId: number | null;

  /**
   * The discussion this comment is about.
   */
  discussion: IXGitHubTeamDiscussion;

  /**
   * The actor who edited the comment.
   */
  editor: _xGitHubActor | null;
  id: string;

  /**
   * Check if this comment was edited and includes an edit with the creation data
   */
  includesCreatedEdit: boolean;

  /**
   * The moment the editor made the last edit
   */
  lastEditedAt: any | null;

  /**
   * Identifies the comment number.
   */
  number: number;

  /**
   * Identifies when the comment was published at.
   */
  publishedAt: any | null;

  /**
   * A list of reactions grouped by content left on the subject.
   */
  reactionGroups: Array<IXGitHubReactionGroup> | null;

  /**
   * A list of Reactions left on the Issue.
   */
  reactions: IXGitHubReactionConnection;

  /**
   * The HTTP path for this comment
   */
  resourcePath: any;

  /**
   * Identifies the date and time when the object was last updated.
   */
  updatedAt: any;

  /**
   * The HTTP URL for this comment
   */
  url: any;

  /**
   * A list of edits to this content.
   */
  userContentEdits: IXGitHubUserContentEditConnection | null;

  /**
   * Check if the current viewer can delete this object.
   */
  viewerCanDelete: boolean;

  /**
   * Can user react to this subject
   */
  viewerCanReact: boolean;

  /**
   * Check if the current viewer can update this object.
   */
  viewerCanUpdate: boolean;

  /**
   * Reasons why the current viewer can not update this comment.
   */
  viewerCannotUpdateReasons: Array<XGitHubCommentCannotUpdateReason>;

  /**
   * Did the viewer author this comment.
   */
  viewerDidAuthor: boolean;
}

export interface IReactionsOnXGitHubTeamDiscussionCommentArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Allows filtering Reactions by emoji.
   */
  content?: XGitHubReactionContent | null;

  /**
   * Allows specifying the order in which reactions are returned.
   */
  orderBy?: IXGitHubReactionOrder | null;
}

export interface IUserContentEditsOnXGitHubTeamDiscussionCommentArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

/**
 * The connection type for TeamDiscussionComment.
 */
export interface IXGitHubTeamDiscussionCommentConnection {
  __typename: '_xGitHubTeamDiscussionCommentConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubTeamDiscussionCommentEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitHubTeamDiscussionComment | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface IXGitHubTeamDiscussionCommentEdge {
  __typename: '_xGitHubTeamDiscussionCommentEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitHubTeamDiscussionComment | null;
}

/**
 * Ways in which team discussion comment connections can be ordered.
 */
export interface IXGitHubTeamDiscussionCommentOrder {
  /**
   * The field by which to order nodes.
   */
  field: XGitHubTeamDiscussionCommentOrderField;

  /**
   * The direction in which to order nodes.
   */
  direction: XGitHubOrderDirection;
}

/**
 * Properties by which team discussion comment connections can be ordered.
 */
export const enum XGitHubTeamDiscussionCommentOrderField {
  /**
   * Allows sequential ordering of team discussion comments (which is equivalent to chronological ordering).
   */
  NUMBER = 'NUMBER',
}

/**
 * The connection type for TeamDiscussion.
 */
export interface IXGitHubTeamDiscussionConnection {
  __typename: '_xGitHubTeamDiscussionConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubTeamDiscussionEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitHubTeamDiscussion | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface IXGitHubTeamDiscussionEdge {
  __typename: '_xGitHubTeamDiscussionEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitHubTeamDiscussion | null;
}

/**
 * Ways in which team discussion connections can be ordered.
 */
export interface IXGitHubTeamDiscussionOrder {
  /**
   * The field by which to order nodes.
   */
  field: XGitHubTeamDiscussionOrderField;

  /**
   * The direction in which to order nodes.
   */
  direction: XGitHubOrderDirection;
}

/**
 * Properties by which team discussion connections can be ordered.
 */
export const enum XGitHubTeamDiscussionOrderField {
  /**
   * Allows chronological ordering of team discussions.
   */
  CREATED_AT = 'CREATED_AT',
}

/**
 * An edge in a connection.
 */
export interface IXGitHubTeamEdge {
  __typename: '_xGitHubTeamEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitHubTeam | null;
}

/**
 * The connection type for User.
 */
export interface IXGitHubTeamMemberConnection {
  __typename: '_xGitHubTeamMemberConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubTeamMemberEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitHubUser | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * Represents a user who is a member of a team.
 */
export interface IXGitHubTeamMemberEdge {
  __typename: '_xGitHubTeamMemberEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The HTTP path to the organization's member access page.
   */
  memberAccessResourcePath: any;

  /**
   * The HTTP URL to the organization's member access page.
   */
  memberAccessUrl: any;
  node: IXGitHubUser;

  /**
   * The role the member has on the team.
   */
  role: XGitHubTeamMemberRole;
}

/**
 * Ordering options for team member connections
 */
export interface IXGitHubTeamMemberOrder {
  /**
   * The field to order team members by.
   */
  field: XGitHubTeamMemberOrderField;

  /**
   * The ordering direction.
   */
  direction: XGitHubOrderDirection;
}

/**
 * Properties by which team member connections can be ordered.
 */
export const enum XGitHubTeamMemberOrderField {
  /**
   * Order team members by login
   */
  LOGIN = 'LOGIN',

  /**
   * Order team members by creation time
   */
  CREATED_AT = 'CREATED_AT',
}

/**
 * The possible team member roles; either 'maintainer' or 'member'.
 */
export const enum XGitHubTeamMemberRole {
  /**
   * A team maintainer has permission to add and remove team members.
   */
  MAINTAINER = 'MAINTAINER',

  /**
   * A team member has no administrative permissions on the team.
   */
  MEMBER = 'MEMBER',
}

/**
 * Defines which types of team members are included in the returned list. Can be one of IMMEDIATE, CHILD_TEAM or ALL.
 */
export const enum XGitHubTeamMembershipType {
  /**
   * Includes only immediate members of the team.
   */
  IMMEDIATE = 'IMMEDIATE',

  /**
   * Includes only child team members for the team.
   */
  CHILD_TEAM = 'CHILD_TEAM',

  /**
   * Includes immediate and child team members for the team.
   */
  ALL = 'ALL',
}

/**
 * Ways in which team connections can be ordered.
 */
export interface IXGitHubTeamOrder {
  /**
   * The field in which to order nodes by.
   */
  field: XGitHubTeamOrderField;

  /**
   * The direction in which to order nodes.
   */
  direction: XGitHubOrderDirection;
}

/**
 * Properties by which team connections can be ordered.
 */
export const enum XGitHubTeamOrderField {
  /**
   * Allows ordering a list of teams by name.
   */
  NAME = 'NAME',
}

/**
 * The possible team privacy values.
 */
export const enum XGitHubTeamPrivacy {
  /**
   * A secret team can only be seen by its members.
   */
  SECRET = 'SECRET',

  /**
   * A visible team can be seen and @mentioned by every member of the organization.
   */
  VISIBLE = 'VISIBLE',
}

/**
 * Audit log entry for a team.remove_member event.
 */
export interface IXGitHubTeamRemoveMemberAuditEntry {
  __typename: '_xGitHubTeamRemoveMemberAuditEntry';

  /**
   * The action name
   */
  action: string;

  /**
   * The user who initiated the action
   */
  actor: _xGitHubAuditEntryActor | null;

  /**
   * The IP address of the actor
   */
  actorIp: string | null;

  /**
   * A readable representation of the actor's location
   */
  actorLocation: IXGitHubActorLocation | null;

  /**
   * The username of the user who initiated the action
   */
  actorLogin: string | null;

  /**
   * The HTTP path for the actor.
   */
  actorResourcePath: any | null;

  /**
   * The HTTP URL for the actor.
   */
  actorUrl: any | null;

  /**
   * The time the action was initiated
   */
  createdAt: any;
  id: string;

  /**
   * Whether the team was mapped to an LDAP Group.
   */
  isLdapMapped: boolean | null;

  /**
   * The corresponding operation type for the action
   */
  operationType: XGitHubOperationType | null;

  /**
   * The Organization associated with the Audit Entry.
   */
  organization: IXGitHubOrganization | null;

  /**
   * The name of the Organization.
   */
  organizationName: string | null;

  /**
   * The HTTP path for the organization
   */
  organizationResourcePath: any | null;

  /**
   * The HTTP URL for the organization
   */
  organizationUrl: any | null;

  /**
   * The team associated with the action
   */
  team: IXGitHubTeam | null;

  /**
   * The name of the team
   */
  teamName: string | null;

  /**
   * The HTTP path for this team
   */
  teamResourcePath: any | null;

  /**
   * The HTTP URL for this team
   */
  teamUrl: any | null;

  /**
   * The user affected by the action
   */
  user: IXGitHubUser | null;

  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin: string | null;

  /**
   * The HTTP path for the user.
   */
  userResourcePath: any | null;

  /**
   * The HTTP URL for the user.
   */
  userUrl: any | null;
}

/**
 * Audit log entry for a team.remove_repository event.
 */
export interface IXGitHubTeamRemoveRepositoryAuditEntry {
  __typename: '_xGitHubTeamRemoveRepositoryAuditEntry';

  /**
   * The action name
   */
  action: string;

  /**
   * The user who initiated the action
   */
  actor: _xGitHubAuditEntryActor | null;

  /**
   * The IP address of the actor
   */
  actorIp: string | null;

  /**
   * A readable representation of the actor's location
   */
  actorLocation: IXGitHubActorLocation | null;

  /**
   * The username of the user who initiated the action
   */
  actorLogin: string | null;

  /**
   * The HTTP path for the actor.
   */
  actorResourcePath: any | null;

  /**
   * The HTTP URL for the actor.
   */
  actorUrl: any | null;

  /**
   * The time the action was initiated
   */
  createdAt: any;
  id: string;

  /**
   * Whether the team was mapped to an LDAP Group.
   */
  isLdapMapped: boolean | null;

  /**
   * The corresponding operation type for the action
   */
  operationType: XGitHubOperationType | null;

  /**
   * The Organization associated with the Audit Entry.
   */
  organization: IXGitHubOrganization | null;

  /**
   * The name of the Organization.
   */
  organizationName: string | null;

  /**
   * The HTTP path for the organization
   */
  organizationResourcePath: any | null;

  /**
   * The HTTP URL for the organization
   */
  organizationUrl: any | null;

  /**
   * The repository associated with the action
   */
  repository: IXGitHubRepository | null;

  /**
   * The name of the repository
   */
  repositoryName: string | null;

  /**
   * The HTTP path for the repository
   */
  repositoryResourcePath: any | null;

  /**
   * The HTTP URL for the repository
   */
  repositoryUrl: any | null;

  /**
   * The team associated with the action
   */
  team: IXGitHubTeam | null;

  /**
   * The name of the team
   */
  teamName: string | null;

  /**
   * The HTTP path for this team
   */
  teamResourcePath: any | null;

  /**
   * The HTTP URL for this team
   */
  teamUrl: any | null;

  /**
   * The user affected by the action
   */
  user: IXGitHubUser | null;

  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin: string | null;

  /**
   * The HTTP path for the user.
   */
  userResourcePath: any | null;

  /**
   * The HTTP URL for the user.
   */
  userUrl: any | null;
}

/**
 * The connection type for Repository.
 */
export interface IXGitHubTeamRepositoryConnection {
  __typename: '_xGitHubTeamRepositoryConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubTeamRepositoryEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitHubRepository | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * Represents a team repository.
 */
export interface IXGitHubTeamRepositoryEdge {
  __typename: '_xGitHubTeamRepositoryEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  node: IXGitHubRepository;

  /**
   * The permission level the team has on the repository
   */
  permission: XGitHubRepositoryPermission;
}

/**
 * Ordering options for team repository connections
 */
export interface IXGitHubTeamRepositoryOrder {
  /**
   * The field to order repositories by.
   */
  field: XGitHubTeamRepositoryOrderField;

  /**
   * The ordering direction.
   */
  direction: XGitHubOrderDirection;
}

/**
 * Properties by which team repository connections can be ordered.
 */
export const enum XGitHubTeamRepositoryOrderField {
  /**
   * Order repositories by creation time
   */
  CREATED_AT = 'CREATED_AT',

  /**
   * Order repositories by update time
   */
  UPDATED_AT = 'UPDATED_AT',

  /**
   * Order repositories by push time
   */
  PUSHED_AT = 'PUSHED_AT',

  /**
   * Order repositories by name
   */
  NAME = 'NAME',

  /**
   * Order repositories by permission
   */
  PERMISSION = 'PERMISSION',

  /**
   * Order repositories by number of stargazers
   */
  STARGAZERS = 'STARGAZERS',
}

/**
 * The role of a user on a team.
 */
export const enum XGitHubTeamRole {
  /**
   * User has admin rights on the team.
   */
  ADMIN = 'ADMIN',

  /**
   * User is a member of the team.
   */
  MEMBER = 'MEMBER',
}

/**
 * A text match within a search result.
 */
export interface IXGitHubTextMatch {
  __typename: '_xGitHubTextMatch';

  /**
   * The specific text fragment within the property matched on.
   */
  fragment: string;

  /**
   * Highlights within the matched fragment.
   */
  highlights: Array<IXGitHubTextMatchHighlight>;

  /**
   * The property matched on.
   */
  property: string;
}

/**
 * Represents a single highlight in a search result match.
 */
export interface IXGitHubTextMatchHighlight {
  __typename: '_xGitHubTextMatchHighlight';

  /**
   * The indice in the fragment where the matched text begins.
   */
  beginIndice: number;

  /**
   * The indice in the fragment where the matched text ends.
   */
  endIndice: number;

  /**
   * The text matched.
   */
  text: string;
}

/**
 * A topic aggregates entities that are related to a subject.
 */
export interface IXGitHubTopic {
  __typename: '_xGitHubTopic';
  id: string;

  /**
   * The topic's name.
   */
  name: string;

  /**
   * A list of related topics, including aliases of this topic, sorted with the most relevant
   * first. Returns up to 10 Topics.
   */
  relatedTopics: Array<IXGitHubTopic>;

  /**
   * Returns a count of how many stargazers there are on this object
   */
  stargazerCount: number;

  /**
   * A list of users who have starred this starrable.
   */
  stargazers: IXGitHubStargazerConnection;

  /**
   * Returns a boolean indicating whether the viewing user has starred this starrable.
   */
  viewerHasStarred: boolean;
}

export interface IRelatedTopicsOnXGitHubTopicArguments {
  /**
   * How many topics to return.
   * @default 3
   */
  first?: number | null;
}

export interface IStargazersOnXGitHubTopicArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Order for connection
   */
  orderBy?: IXGitHubStarOrder | null;
}

/**
 * Metadata for an audit entry with a topic.
 */
export type _xGitHubTopicAuditEntryData =
  | IXGitHubRepoAddTopicAuditEntry
  | IXGitHubRepoRemoveTopicAuditEntry;

/**
 * Metadata for an audit entry with a topic.
 */
export interface IXGitHubTopicAuditEntryData {
  __typename: '_xGitHubTopicAuditEntryData';

  /**
   * The name of the topic added to the repository
   */
  topic: IXGitHubTopic | null;

  /**
   * The name of the topic added to the repository
   */
  topicName: string | null;
}

/**
 * Reason that the suggested topic is declined.
 */
export const enum XGitHubTopicSuggestionDeclineReason {
  /**
   * The suggested topic is not relevant to the repository.
   */
  NOT_RELEVANT = 'NOT_RELEVANT',

  /**
   * The suggested topic is too specific for the repository (e.g. #ruby-on-rails-version-4-2-1).
   */
  TOO_SPECIFIC = 'TOO_SPECIFIC',

  /**
   * The viewer does not like the suggested topic.
   */
  PERSONAL_PREFERENCE = 'PERSONAL_PREFERENCE',

  /**
   * The suggested topic is too general for the repository.
   */
  TOO_GENERAL = 'TOO_GENERAL',
}

/**
 * Autogenerated input type of TransferIssue
 */
export interface IXGitHubTransferIssueInput {
  /**
   * The Node ID of the issue to be transferred
   */
  issueId: string;

  /**
   * The Node ID of the repository the issue should be transferred to
   */
  repositoryId: string;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of TransferIssue
 */
export interface IXGitHubTransferIssuePayload {
  __typename: '_xGitHubTransferIssuePayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The issue that was transferred
   */
  issue: IXGitHubIssue | null;
}

/**
 * Represents a 'transferred' event on a given issue or pull request.
 */
export interface IXGitHubTransferredEvent {
  __typename: '_xGitHubTransferredEvent';

  /**
   * Identifies the actor who performed the event.
   */
  actor: _xGitHubActor | null;

  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: any;

  /**
   * The repository this came from
   */
  fromRepository: IXGitHubRepository | null;
  id: string;

  /**
   * Identifies the issue associated with the event.
   */
  issue: IXGitHubIssue;
}

/**
 * Represents a Git tree.
 */
export interface IXGitHubTree {
  __typename: '_xGitHubTree';

  /**
   * An abbreviated version of the Git object ID
   */
  abbreviatedOid: string;

  /**
   * The HTTP path for this Git object
   */
  commitResourcePath: any;

  /**
   * The HTTP URL for this Git object
   */
  commitUrl: any;

  /**
   * A list of tree entries.
   */
  entries: Array<IXGitHubTreeEntry> | null;
  id: string;

  /**
   * The Git object ID
   */
  oid: any;

  /**
   * The Repository the Git object belongs to
   */
  repository: IXGitHubRepository;
}

/**
 * Represents a Git tree entry.
 */
export interface IXGitHubTreeEntry {
  __typename: '_xGitHubTreeEntry';

  /**
   * The extension of the file
   */
  extension: string | null;

  /**
   * Whether or not this tree entry is generated
   */
  isGenerated: boolean;

  /**
   * Entry file mode.
   */
  mode: number;

  /**
   * Entry file name.
   */
  name: string;

  /**
   * Entry file object.
   */
  object: _xGitHubGitObject | null;

  /**
   * Entry file Git object ID.
   */
  oid: any;

  /**
   * The full path of the file.
   */
  path: string | null;

  /**
   * The Repository the tree entry belongs to
   */
  repository: IXGitHubRepository;

  /**
   * If the TreeEntry is for a directory occupied by a submodule project, this returns the corresponding submodule
   */
  submodule: IXGitHubSubmodule | null;

  /**
   * Entry file type.
   */
  type: string;
}

/**
 * Autogenerated input type of UnarchiveRepository
 */
export interface IXGitHubUnarchiveRepositoryInput {
  /**
   * The ID of the repository to unarchive.
   */
  repositoryId: string;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of UnarchiveRepository
 */
export interface IXGitHubUnarchiveRepositoryPayload {
  __typename: '_xGitHubUnarchiveRepositoryPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The repository that was unarchived.
   */
  repository: IXGitHubRepository | null;
}

/**
 * Represents an 'unassigned' event on any assignable object.
 */
export interface IXGitHubUnassignedEvent {
  __typename: '_xGitHubUnassignedEvent';

  /**
   * Identifies the actor who performed the event.
   */
  actor: _xGitHubActor | null;

  /**
   * Identifies the assignable associated with the event.
   */
  assignable: _xGitHubAssignable;

  /**
   * Identifies the user or mannequin that was unassigned.
   */
  assignee: _xGitHubAssignee | null;

  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: any;
  id: string;

  /**
   * Identifies the subject (user) who was unassigned.
   * @deprecated "Assignees can now be mannequins. Use the `assignee` field instead. Removal on 2020-01-01 UTC."
   */
  user: IXGitHubUser | null;
}

/**
 * Autogenerated input type of UnfollowUser
 */
export interface IXGitHubUnfollowUserInput {
  /**
   * ID of the user to unfollow.
   */
  userId: string;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of UnfollowUser
 */
export interface IXGitHubUnfollowUserPayload {
  __typename: '_xGitHubUnfollowUserPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The user that was unfollowed.
   */
  user: IXGitHubUser | null;
}

/**
 * Represents a type that can be retrieved by a URL.
 */
export type _xGitHubUniformResourceLocatable =
  | IXGitHubBot
  | IXGitHubCheckRun
  | IXGitHubClosedEvent
  | IXGitHubCommit
  | IXGitHubConvertToDraftEvent
  | IXGitHubCrossReferencedEvent
  | IXGitHubGist
  | IXGitHubIssue
  | IXGitHubMannequin
  | IXGitHubMergedEvent
  | IXGitHubMilestone
  | IXGitHubOrganization
  | IXGitHubPullRequest
  | IXGitHubPullRequestCommit
  | IXGitHubReadyForReviewEvent
  | IXGitHubRelease
  | IXGitHubRepository
  | IXGitHubRepositoryTopic
  | IXGitHubReviewDismissedEvent
  | IXGitHubTeamDiscussion
  | IXGitHubTeamDiscussionComment
  | IXGitHubUser;

/**
 * Represents a type that can be retrieved by a URL.
 */
export interface IXGitHubUniformResourceLocatable {
  __typename: '_xGitHubUniformResourceLocatable';

  /**
   * The HTML path to this resource.
   */
  resourcePath: any;

  /**
   * The URL to this resource.
   */
  url: any;
}

/**
 * Represents an unknown signature on a Commit or Tag.
 */
export interface IXGitHubUnknownSignature {
  __typename: '_xGitHubUnknownSignature';

  /**
   * Email used to sign this object.
   */
  email: string;

  /**
   * True if the signature is valid and verified by GitHub.
   */
  isValid: boolean;

  /**
   * Payload for GPG signing object. Raw ODB object without the signature header.
   */
  payload: string;

  /**
   * ASCII-armored signature header from object.
   */
  signature: string;

  /**
   * GitHub user corresponding to the email signing this commit.
   */
  signer: IXGitHubUser | null;

  /**
   * The state of this signature. `VALID` if signature is valid and verified by GitHub, otherwise represents reason why signature is considered invalid.
   */
  state: XGitHubGitSignatureState;

  /**
   * True if the signature was made with GitHub's signing key.
   */
  wasSignedByGitHub: boolean;
}

/**
 * Represents an 'unlabeled' event on a given issue or pull request.
 */
export interface IXGitHubUnlabeledEvent {
  __typename: '_xGitHubUnlabeledEvent';

  /**
   * Identifies the actor who performed the event.
   */
  actor: _xGitHubActor | null;

  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: any;
  id: string;

  /**
   * Identifies the label associated with the 'unlabeled' event.
   */
  label: IXGitHubLabel;

  /**
   * Identifies the `Labelable` associated with the event.
   */
  labelable: _xGitHubLabelable;
}

/**
 * Autogenerated input type of UnlinkRepositoryFromProject
 */
export interface IXGitHubUnlinkRepositoryFromProjectInput {
  /**
   * The ID of the Project linked to the Repository.
   */
  projectId: string;

  /**
   * The ID of the Repository linked to the Project.
   */
  repositoryId: string;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of UnlinkRepositoryFromProject
 */
export interface IXGitHubUnlinkRepositoryFromProjectPayload {
  __typename: '_xGitHubUnlinkRepositoryFromProjectPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The linked Project.
   */
  project: IXGitHubProject | null;

  /**
   * The linked Repository.
   */
  repository: IXGitHubRepository | null;
}

/**
 * Autogenerated input type of UnlockLockable
 */
export interface IXGitHubUnlockLockableInput {
  /**
   * ID of the item to be unlocked.
   */
  lockableId: string;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of UnlockLockable
 */
export interface IXGitHubUnlockLockablePayload {
  __typename: '_xGitHubUnlockLockablePayload';

  /**
   * Identifies the actor who performed the event.
   */
  actor: _xGitHubActor | null;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The item that was unlocked.
   */
  unlockedRecord: _xGitHubLockable | null;
}

/**
 * Represents an 'unlocked' event on a given issue or pull request.
 */
export interface IXGitHubUnlockedEvent {
  __typename: '_xGitHubUnlockedEvent';

  /**
   * Identifies the actor who performed the event.
   */
  actor: _xGitHubActor | null;

  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: any;
  id: string;

  /**
   * Object that was unlocked.
   */
  lockable: _xGitHubLockable;
}

/**
 * Autogenerated input type of UnmarkDiscussionCommentAsAnswer
 */
export interface IXGitHubUnmarkDiscussionCommentAsAnswerInput {
  /**
   * The Node ID of the discussion comment to unmark as an answer.
   */
  id: string;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of UnmarkDiscussionCommentAsAnswer
 */
export interface IXGitHubUnmarkDiscussionCommentAsAnswerPayload {
  __typename: '_xGitHubUnmarkDiscussionCommentAsAnswerPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The discussion that includes the comment.
   */
  discussion: IXGitHubDiscussion | null;
}

/**
 * Autogenerated input type of UnmarkFileAsViewed
 */
export interface IXGitHubUnmarkFileAsViewedInput {
  /**
   * The Node ID of the pull request.
   */
  pullRequestId: string;

  /**
   * The path of the file to mark as unviewed
   */
  path: string;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of UnmarkFileAsViewed
 */
export interface IXGitHubUnmarkFileAsViewedPayload {
  __typename: '_xGitHubUnmarkFileAsViewedPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The updated pull request.
   */
  pullRequest: IXGitHubPullRequest | null;
}

/**
 * Autogenerated input type of UnmarkIssueAsDuplicate
 */
export interface IXGitHubUnmarkIssueAsDuplicateInput {
  /**
   * ID of the issue or pull request currently marked as a duplicate.
   */
  duplicateId: string;

  /**
   * ID of the issue or pull request currently considered canonical/authoritative/original.
   */
  canonicalId: string;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of UnmarkIssueAsDuplicate
 */
export interface IXGitHubUnmarkIssueAsDuplicatePayload {
  __typename: '_xGitHubUnmarkIssueAsDuplicatePayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The issue or pull request that was marked as a duplicate.
   */
  duplicate: _xGitHubIssueOrPullRequest | null;
}

/**
 * Represents an 'unmarked_as_duplicate' event on a given issue or pull request.
 */
export interface IXGitHubUnmarkedAsDuplicateEvent {
  __typename: '_xGitHubUnmarkedAsDuplicateEvent';

  /**
   * Identifies the actor who performed the event.
   */
  actor: _xGitHubActor | null;

  /**
   * The authoritative issue or pull request which has been duplicated by another.
   */
  canonical: _xGitHubIssueOrPullRequest | null;

  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: any;

  /**
   * The issue or pull request which has been marked as a duplicate of another.
   */
  duplicate: _xGitHubIssueOrPullRequest | null;
  id: string;

  /**
   * Canonical and duplicate belong to different repositories.
   */
  isCrossRepository: boolean;
}

/**
 * Autogenerated input type of UnminimizeComment
 */
export interface IXGitHubUnminimizeCommentInput {
  /**
   * The Node ID of the subject to modify.
   */
  subjectId: string;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of UnminimizeComment
 */
export interface IXGitHubUnminimizeCommentPayload {
  __typename: '_xGitHubUnminimizeCommentPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The comment that was unminimized.
   */
  unminimizedComment: _xGitHubMinimizable | null;
}

/**
 * Autogenerated input type of UnpinIssue
 */
export interface IXGitHubUnpinIssueInput {
  /**
   * The ID of the issue to be unpinned
   */
  issueId: string;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of UnpinIssue
 */
export interface IXGitHubUnpinIssuePayload {
  __typename: '_xGitHubUnpinIssuePayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The issue that was unpinned
   */
  issue: IXGitHubIssue | null;
}

/**
 * Represents an 'unpinned' event on a given issue or pull request.
 */
export interface IXGitHubUnpinnedEvent {
  __typename: '_xGitHubUnpinnedEvent';

  /**
   * Identifies the actor who performed the event.
   */
  actor: _xGitHubActor | null;

  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: any;
  id: string;

  /**
   * Identifies the issue associated with the event.
   */
  issue: IXGitHubIssue;
}

/**
 * Autogenerated input type of UnresolveReviewThread
 */
export interface IXGitHubUnresolveReviewThreadInput {
  /**
   * The ID of the thread to unresolve
   */
  threadId: string;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of UnresolveReviewThread
 */
export interface IXGitHubUnresolveReviewThreadPayload {
  __typename: '_xGitHubUnresolveReviewThreadPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The thread to resolve.
   */
  thread: IXGitHubPullRequestReviewThread | null;
}

/**
 * Represents an 'unsubscribed' event on a given `Subscribable`.
 */
export interface IXGitHubUnsubscribedEvent {
  __typename: '_xGitHubUnsubscribedEvent';

  /**
   * Identifies the actor who performed the event.
   */
  actor: _xGitHubActor | null;

  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: any;
  id: string;

  /**
   * Object referenced by event.
   */
  subscribable: _xGitHubSubscribable;
}

/**
 * Entities that can be updated.
 */
export type _xGitHubUpdatable =
  | IXGitHubCommitComment
  | IXGitHubDiscussion
  | IXGitHubDiscussionComment
  | IXGitHubGistComment
  | IXGitHubIssue
  | IXGitHubIssueComment
  | IXGitHubProject
  | IXGitHubPullRequest
  | IXGitHubPullRequestReview
  | IXGitHubPullRequestReviewComment
  | IXGitHubTeamDiscussion
  | IXGitHubTeamDiscussionComment;

/**
 * Entities that can be updated.
 */
export interface IXGitHubUpdatable {
  __typename: '_xGitHubUpdatable';

  /**
   * Check if the current viewer can update this object.
   */
  viewerCanUpdate: boolean;
}

/**
 * Comments that can be updated.
 */
export type _xGitHubUpdatableComment =
  | IXGitHubCommitComment
  | IXGitHubDiscussionComment
  | IXGitHubGistComment
  | IXGitHubIssue
  | IXGitHubIssueComment
  | IXGitHubPullRequest
  | IXGitHubPullRequestReview
  | IXGitHubPullRequestReviewComment
  | IXGitHubTeamDiscussion
  | IXGitHubTeamDiscussionComment;

/**
 * Comments that can be updated.
 */
export interface IXGitHubUpdatableComment {
  __typename: '_xGitHubUpdatableComment';

  /**
   * Reasons why the current viewer can not update this comment.
   */
  viewerCannotUpdateReasons: Array<XGitHubCommentCannotUpdateReason>;
}

/**
 * Autogenerated input type of UpdateBranchProtectionRule
 */
export interface IXGitHubUpdateBranchProtectionRuleInput {
  /**
   * The global relay id of the branch protection rule to be updated.
   */
  branchProtectionRuleId: string;

  /**
   * The glob-like pattern used to determine matching branches.
   */
  pattern?: string | null;

  /**
   * Are approving reviews required to update matching branches.
   */
  requiresApprovingReviews?: boolean | null;

  /**
   * Number of approving reviews required to update matching branches.
   */
  requiredApprovingReviewCount?: number | null;

  /**
   * Are commits required to be signed.
   */
  requiresCommitSignatures?: boolean | null;

  /**
   * Are merge commits prohibited from being pushed to this branch.
   */
  requiresLinearHistory?: boolean | null;

  /**
   * Are force pushes allowed on this branch.
   */
  allowsForcePushes?: boolean | null;

  /**
   * Can this branch be deleted.
   */
  allowsDeletions?: boolean | null;

  /**
   * Can admins overwrite branch protection.
   */
  isAdminEnforced?: boolean | null;

  /**
   * Are status checks required to update matching branches.
   */
  requiresStatusChecks?: boolean | null;

  /**
   * Are branches required to be up to date before merging.
   */
  requiresStrictStatusChecks?: boolean | null;

  /**
   * Are reviews from code owners required to update matching branches.
   */
  requiresCodeOwnerReviews?: boolean | null;

  /**
   * Will new commits pushed to matching branches dismiss pull request review approvals.
   */
  dismissesStaleReviews?: boolean | null;

  /**
   * Is dismissal of pull request reviews restricted.
   */
  restrictsReviewDismissals?: boolean | null;

  /**
   * A list of User or Team IDs allowed to dismiss reviews on pull requests targeting matching branches.
   */
  reviewDismissalActorIds?: Array<string> | null;

  /**
   * Is pushing to matching branches restricted.
   */
  restrictsPushes?: boolean | null;

  /**
   * A list of User, Team or App IDs allowed to push to matching branches.
   */
  pushActorIds?: Array<string> | null;

  /**
   * List of required status check contexts that must pass for commits to be accepted to matching branches.
   */
  requiredStatusCheckContexts?: Array<string> | null;

  /**
   * Are conversations required to be resolved before merging.
   */
  requiresConversationResolution?: boolean | null;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of UpdateBranchProtectionRule
 */
export interface IXGitHubUpdateBranchProtectionRulePayload {
  __typename: '_xGitHubUpdateBranchProtectionRulePayload';

  /**
   * The newly created BranchProtectionRule.
   */
  branchProtectionRule: IXGitHubBranchProtectionRule | null;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;
}

/**
 * Autogenerated input type of UpdateCheckRun
 */
export interface IXGitHubUpdateCheckRunInput {
  /**
   * The node ID of the repository.
   */
  repositoryId: string;

  /**
   * The node of the check.
   */
  checkRunId: string;

  /**
   * The name of the check.
   */
  name?: string | null;

  /**
   * The URL of the integrator's site that has the full details of the check.
   */
  detailsUrl?: any | null;

  /**
   * A reference for the run on the integrator's system.
   */
  externalId?: string | null;

  /**
   * The current status.
   */
  status?: XGitHubRequestableCheckStatusState | null;

  /**
   * The time that the check run began.
   */
  startedAt?: any | null;

  /**
   * The final conclusion of the check.
   */
  conclusion?: XGitHubCheckConclusionState | null;

  /**
   * The time that the check run finished.
   */
  completedAt?: any | null;

  /**
   * Descriptive details about the run.
   */
  output?: IXGitHubCheckRunOutput | null;

  /**
   * Possible further actions the integrator can perform, which a user may trigger.
   */
  actions?: Array<IXGitHubCheckRunAction> | null;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of UpdateCheckRun
 */
export interface IXGitHubUpdateCheckRunPayload {
  __typename: '_xGitHubUpdateCheckRunPayload';

  /**
   * The updated check run.
   */
  checkRun: IXGitHubCheckRun | null;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;
}

/**
 * Autogenerated input type of UpdateCheckSuitePreferences
 */
export interface IXGitHubUpdateCheckSuitePreferencesInput {
  /**
   * The Node ID of the repository.
   */
  repositoryId: string;

  /**
   * The check suite preferences to modify.
   */
  autoTriggerPreferences: Array<IXGitHubCheckSuiteAutoTriggerPreference>;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of UpdateCheckSuitePreferences
 */
export interface IXGitHubUpdateCheckSuitePreferencesPayload {
  __typename: '_xGitHubUpdateCheckSuitePreferencesPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The updated repository.
   */
  repository: IXGitHubRepository | null;
}

/**
 * Autogenerated input type of UpdateDiscussionComment
 */
export interface IXGitHubUpdateDiscussionCommentInput {
  /**
   * The Node ID of the discussion comment to update.
   */
  commentId: string;

  /**
   * The new contents of the comment body.
   */
  body: string;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of UpdateDiscussionComment
 */
export interface IXGitHubUpdateDiscussionCommentPayload {
  __typename: '_xGitHubUpdateDiscussionCommentPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The modified discussion comment.
   */
  comment: IXGitHubDiscussionComment | null;
}

/**
 * Autogenerated input type of UpdateDiscussion
 */
export interface IXGitHubUpdateDiscussionInput {
  /**
   * The Node ID of the discussion to update.
   */
  discussionId: string;

  /**
   * The new discussion title.
   */
  title?: string | null;

  /**
   * The new contents of the discussion body.
   */
  body?: string | null;

  /**
   * The Node ID of a discussion category within the same repository to change this discussion to.
   */
  categoryId?: string | null;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of UpdateDiscussion
 */
export interface IXGitHubUpdateDiscussionPayload {
  __typename: '_xGitHubUpdateDiscussionPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The modified discussion.
   */
  discussion: IXGitHubDiscussion | null;
}

/**
 * Autogenerated input type of UpdateEnterpriseAdministratorRole
 */
export interface IXGitHubUpdateEnterpriseAdministratorRoleInput {
  /**
   * The ID of the Enterprise which the admin belongs to.
   */
  enterpriseId: string;

  /**
   * The login of a administrator whose role is being changed.
   */
  login: string;

  /**
   * The new role for the Enterprise administrator.
   */
  role: XGitHubEnterpriseAdministratorRole;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of UpdateEnterpriseAdministratorRole
 */
export interface IXGitHubUpdateEnterpriseAdministratorRolePayload {
  __typename: '_xGitHubUpdateEnterpriseAdministratorRolePayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * A message confirming the result of changing the administrator's role.
   */
  message: string | null;
}

/**
 * Autogenerated input type of UpdateEnterpriseAllowPrivateRepositoryForkingSetting
 */
export interface IXGitHubUpdateEnterpriseAllowPrivateRepositoryForkingSettingInput {
  /**
   * The ID of the enterprise on which to set the allow private repository forking setting.
   */
  enterpriseId: string;

  /**
   * The value for the allow private repository forking setting on the enterprise.
   */
  settingValue: XGitHubEnterpriseEnabledDisabledSettingValue;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of UpdateEnterpriseAllowPrivateRepositoryForkingSetting
 */
export interface IXGitHubUpdateEnterpriseAllowPrivateRepositoryForkingSettingPayload {
  __typename: '_xGitHubUpdateEnterpriseAllowPrivateRepositoryForkingSettingPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The enterprise with the updated allow private repository forking setting.
   */
  enterprise: IXGitHubEnterprise | null;

  /**
   * A message confirming the result of updating the allow private repository forking setting.
   */
  message: string | null;
}

/**
 * Autogenerated input type of UpdateEnterpriseDefaultRepositoryPermissionSetting
 */
export interface IXGitHubUpdateEnterpriseDefaultRepositoryPermissionSettingInput {
  /**
   * The ID of the enterprise on which to set the base repository permission setting.
   */
  enterpriseId: string;

  /**
   * The value for the base repository permission setting on the enterprise.
   */
  settingValue: XGitHubEnterpriseDefaultRepositoryPermissionSettingValue;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of UpdateEnterpriseDefaultRepositoryPermissionSetting
 */
export interface IXGitHubUpdateEnterpriseDefaultRepositoryPermissionSettingPayload {
  __typename: '_xGitHubUpdateEnterpriseDefaultRepositoryPermissionSettingPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The enterprise with the updated base repository permission setting.
   */
  enterprise: IXGitHubEnterprise | null;

  /**
   * A message confirming the result of updating the base repository permission setting.
   */
  message: string | null;
}

/**
 * Autogenerated input type of UpdateEnterpriseMembersCanChangeRepositoryVisibilitySetting
 */
export interface IXGitHubUpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingInput {
  /**
   * The ID of the enterprise on which to set the members can change repository visibility setting.
   */
  enterpriseId: string;

  /**
   * The value for the members can change repository visibility setting on the enterprise.
   */
  settingValue: XGitHubEnterpriseEnabledDisabledSettingValue;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of UpdateEnterpriseMembersCanChangeRepositoryVisibilitySetting
 */
export interface IXGitHubUpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingPayload {
  __typename: '_xGitHubUpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The enterprise with the updated members can change repository visibility setting.
   */
  enterprise: IXGitHubEnterprise | null;

  /**
   * A message confirming the result of updating the members can change repository visibility setting.
   */
  message: string | null;
}

/**
 * Autogenerated input type of UpdateEnterpriseMembersCanCreateRepositoriesSetting
 */
export interface IXGitHubUpdateEnterpriseMembersCanCreateRepositoriesSettingInput {
  /**
   * The ID of the enterprise on which to set the members can create repositories setting.
   */
  enterpriseId: string;

  /**
   * Value for the members can create repositories setting on the enterprise. This or the granular public/private/internal allowed fields (but not both) must be provided.
   */
  settingValue?: XGitHubEnterpriseMembersCanCreateRepositoriesSettingValue | null;

  /**
   * When false, allow member organizations to set their own repository creation member privileges.
   */
  membersCanCreateRepositoriesPolicyEnabled?: boolean | null;

  /**
   * Allow members to create public repositories. Defaults to current value.
   */
  membersCanCreatePublicRepositories?: boolean | null;

  /**
   * Allow members to create private repositories. Defaults to current value.
   */
  membersCanCreatePrivateRepositories?: boolean | null;

  /**
   * Allow members to create internal repositories. Defaults to current value.
   */
  membersCanCreateInternalRepositories?: boolean | null;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of UpdateEnterpriseMembersCanCreateRepositoriesSetting
 */
export interface IXGitHubUpdateEnterpriseMembersCanCreateRepositoriesSettingPayload {
  __typename: '_xGitHubUpdateEnterpriseMembersCanCreateRepositoriesSettingPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The enterprise with the updated members can create repositories setting.
   */
  enterprise: IXGitHubEnterprise | null;

  /**
   * A message confirming the result of updating the members can create repositories setting.
   */
  message: string | null;
}

/**
 * Autogenerated input type of UpdateEnterpriseMembersCanDeleteIssuesSetting
 */
export interface IXGitHubUpdateEnterpriseMembersCanDeleteIssuesSettingInput {
  /**
   * The ID of the enterprise on which to set the members can delete issues setting.
   */
  enterpriseId: string;

  /**
   * The value for the members can delete issues setting on the enterprise.
   */
  settingValue: XGitHubEnterpriseEnabledDisabledSettingValue;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of UpdateEnterpriseMembersCanDeleteIssuesSetting
 */
export interface IXGitHubUpdateEnterpriseMembersCanDeleteIssuesSettingPayload {
  __typename: '_xGitHubUpdateEnterpriseMembersCanDeleteIssuesSettingPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The enterprise with the updated members can delete issues setting.
   */
  enterprise: IXGitHubEnterprise | null;

  /**
   * A message confirming the result of updating the members can delete issues setting.
   */
  message: string | null;
}

/**
 * Autogenerated input type of UpdateEnterpriseMembersCanDeleteRepositoriesSetting
 */
export interface IXGitHubUpdateEnterpriseMembersCanDeleteRepositoriesSettingInput {
  /**
   * The ID of the enterprise on which to set the members can delete repositories setting.
   */
  enterpriseId: string;

  /**
   * The value for the members can delete repositories setting on the enterprise.
   */
  settingValue: XGitHubEnterpriseEnabledDisabledSettingValue;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of UpdateEnterpriseMembersCanDeleteRepositoriesSetting
 */
export interface IXGitHubUpdateEnterpriseMembersCanDeleteRepositoriesSettingPayload {
  __typename: '_xGitHubUpdateEnterpriseMembersCanDeleteRepositoriesSettingPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The enterprise with the updated members can delete repositories setting.
   */
  enterprise: IXGitHubEnterprise | null;

  /**
   * A message confirming the result of updating the members can delete repositories setting.
   */
  message: string | null;
}

/**
 * Autogenerated input type of UpdateEnterpriseMembersCanInviteCollaboratorsSetting
 */
export interface IXGitHubUpdateEnterpriseMembersCanInviteCollaboratorsSettingInput {
  /**
   * The ID of the enterprise on which to set the members can invite collaborators setting.
   */
  enterpriseId: string;

  /**
   * The value for the members can invite collaborators setting on the enterprise.
   */
  settingValue: XGitHubEnterpriseEnabledDisabledSettingValue;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of UpdateEnterpriseMembersCanInviteCollaboratorsSetting
 */
export interface IXGitHubUpdateEnterpriseMembersCanInviteCollaboratorsSettingPayload {
  __typename: '_xGitHubUpdateEnterpriseMembersCanInviteCollaboratorsSettingPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The enterprise with the updated members can invite collaborators setting.
   */
  enterprise: IXGitHubEnterprise | null;

  /**
   * A message confirming the result of updating the members can invite collaborators setting.
   */
  message: string | null;
}

/**
 * Autogenerated input type of UpdateEnterpriseMembersCanMakePurchasesSetting
 */
export interface IXGitHubUpdateEnterpriseMembersCanMakePurchasesSettingInput {
  /**
   * The ID of the enterprise on which to set the members can make purchases setting.
   */
  enterpriseId: string;

  /**
   * The value for the members can make purchases setting on the enterprise.
   */
  settingValue: XGitHubEnterpriseMembersCanMakePurchasesSettingValue;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of UpdateEnterpriseMembersCanMakePurchasesSetting
 */
export interface IXGitHubUpdateEnterpriseMembersCanMakePurchasesSettingPayload {
  __typename: '_xGitHubUpdateEnterpriseMembersCanMakePurchasesSettingPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The enterprise with the updated members can make purchases setting.
   */
  enterprise: IXGitHubEnterprise | null;

  /**
   * A message confirming the result of updating the members can make purchases setting.
   */
  message: string | null;
}

/**
 * Autogenerated input type of UpdateEnterpriseMembersCanUpdateProtectedBranchesSetting
 */
export interface IXGitHubUpdateEnterpriseMembersCanUpdateProtectedBranchesSettingInput {
  /**
   * The ID of the enterprise on which to set the members can update protected branches setting.
   */
  enterpriseId: string;

  /**
   * The value for the members can update protected branches setting on the enterprise.
   */
  settingValue: XGitHubEnterpriseEnabledDisabledSettingValue;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of UpdateEnterpriseMembersCanUpdateProtectedBranchesSetting
 */
export interface IXGitHubUpdateEnterpriseMembersCanUpdateProtectedBranchesSettingPayload {
  __typename: '_xGitHubUpdateEnterpriseMembersCanUpdateProtectedBranchesSettingPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The enterprise with the updated members can update protected branches setting.
   */
  enterprise: IXGitHubEnterprise | null;

  /**
   * A message confirming the result of updating the members can update protected branches setting.
   */
  message: string | null;
}

/**
 * Autogenerated input type of UpdateEnterpriseMembersCanViewDependencyInsightsSetting
 */
export interface IXGitHubUpdateEnterpriseMembersCanViewDependencyInsightsSettingInput {
  /**
   * The ID of the enterprise on which to set the members can view dependency insights setting.
   */
  enterpriseId: string;

  /**
   * The value for the members can view dependency insights setting on the enterprise.
   */
  settingValue: XGitHubEnterpriseEnabledDisabledSettingValue;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of UpdateEnterpriseMembersCanViewDependencyInsightsSetting
 */
export interface IXGitHubUpdateEnterpriseMembersCanViewDependencyInsightsSettingPayload {
  __typename: '_xGitHubUpdateEnterpriseMembersCanViewDependencyInsightsSettingPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The enterprise with the updated members can view dependency insights setting.
   */
  enterprise: IXGitHubEnterprise | null;

  /**
   * A message confirming the result of updating the members can view dependency insights setting.
   */
  message: string | null;
}

/**
 * Autogenerated input type of UpdateEnterpriseOrganizationProjectsSetting
 */
export interface IXGitHubUpdateEnterpriseOrganizationProjectsSettingInput {
  /**
   * The ID of the enterprise on which to set the organization projects setting.
   */
  enterpriseId: string;

  /**
   * The value for the organization projects setting on the enterprise.
   */
  settingValue: XGitHubEnterpriseEnabledDisabledSettingValue;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of UpdateEnterpriseOrganizationProjectsSetting
 */
export interface IXGitHubUpdateEnterpriseOrganizationProjectsSettingPayload {
  __typename: '_xGitHubUpdateEnterpriseOrganizationProjectsSettingPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The enterprise with the updated organization projects setting.
   */
  enterprise: IXGitHubEnterprise | null;

  /**
   * A message confirming the result of updating the organization projects setting.
   */
  message: string | null;
}

/**
 * Autogenerated input type of UpdateEnterpriseProfile
 */
export interface IXGitHubUpdateEnterpriseProfileInput {
  /**
   * The Enterprise ID to update.
   */
  enterpriseId: string;

  /**
   * The name of the enterprise.
   */
  name?: string | null;

  /**
   * The description of the enterprise.
   */
  description?: string | null;

  /**
   * The URL of the enterprise's website.
   */
  websiteUrl?: string | null;

  /**
   * The location of the enterprise.
   */
  location?: string | null;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of UpdateEnterpriseProfile
 */
export interface IXGitHubUpdateEnterpriseProfilePayload {
  __typename: '_xGitHubUpdateEnterpriseProfilePayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The updated enterprise.
   */
  enterprise: IXGitHubEnterprise | null;
}

/**
 * Autogenerated input type of UpdateEnterpriseRepositoryProjectsSetting
 */
export interface IXGitHubUpdateEnterpriseRepositoryProjectsSettingInput {
  /**
   * The ID of the enterprise on which to set the repository projects setting.
   */
  enterpriseId: string;

  /**
   * The value for the repository projects setting on the enterprise.
   */
  settingValue: XGitHubEnterpriseEnabledDisabledSettingValue;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of UpdateEnterpriseRepositoryProjectsSetting
 */
export interface IXGitHubUpdateEnterpriseRepositoryProjectsSettingPayload {
  __typename: '_xGitHubUpdateEnterpriseRepositoryProjectsSettingPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The enterprise with the updated repository projects setting.
   */
  enterprise: IXGitHubEnterprise | null;

  /**
   * A message confirming the result of updating the repository projects setting.
   */
  message: string | null;
}

/**
 * Autogenerated input type of UpdateEnterpriseTeamDiscussionsSetting
 */
export interface IXGitHubUpdateEnterpriseTeamDiscussionsSettingInput {
  /**
   * The ID of the enterprise on which to set the team discussions setting.
   */
  enterpriseId: string;

  /**
   * The value for the team discussions setting on the enterprise.
   */
  settingValue: XGitHubEnterpriseEnabledDisabledSettingValue;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of UpdateEnterpriseTeamDiscussionsSetting
 */
export interface IXGitHubUpdateEnterpriseTeamDiscussionsSettingPayload {
  __typename: '_xGitHubUpdateEnterpriseTeamDiscussionsSettingPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The enterprise with the updated team discussions setting.
   */
  enterprise: IXGitHubEnterprise | null;

  /**
   * A message confirming the result of updating the team discussions setting.
   */
  message: string | null;
}

/**
 * Autogenerated input type of UpdateEnterpriseTwoFactorAuthenticationRequiredSetting
 */
export interface IXGitHubUpdateEnterpriseTwoFactorAuthenticationRequiredSettingInput {
  /**
   * The ID of the enterprise on which to set the two factor authentication required setting.
   */
  enterpriseId: string;

  /**
   * The value for the two factor authentication required setting on the enterprise.
   */
  settingValue: XGitHubEnterpriseEnabledSettingValue;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of UpdateEnterpriseTwoFactorAuthenticationRequiredSetting
 */
export interface IXGitHubUpdateEnterpriseTwoFactorAuthenticationRequiredSettingPayload {
  __typename: '_xGitHubUpdateEnterpriseTwoFactorAuthenticationRequiredSettingPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The enterprise with the updated two factor authentication required setting.
   */
  enterprise: IXGitHubEnterprise | null;

  /**
   * A message confirming the result of updating the two factor authentication required setting.
   */
  message: string | null;
}

/**
 * Autogenerated input type of UpdateEnvironment
 */
export interface IXGitHubUpdateEnvironmentInput {
  /**
   * The node ID of the environment.
   */
  environmentId: string;

  /**
   * The wait timer in minutes.
   */
  waitTimer?: number | null;

  /**
   * The ids of users or teams that can approve deployments to this environment
   */
  reviewers?: Array<string> | null;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of UpdateEnvironment
 */
export interface IXGitHubUpdateEnvironmentPayload {
  __typename: '_xGitHubUpdateEnvironmentPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The updated environment.
   */
  environment: IXGitHubEnvironment | null;
}

/**
 * Autogenerated input type of UpdateIpAllowListEnabledSetting
 */
export interface IXGitHubUpdateIpAllowListEnabledSettingInput {
  /**
   * The ID of the owner on which to set the IP allow list enabled setting.
   */
  ownerId: string;

  /**
   * The value for the IP allow list enabled setting.
   */
  settingValue: XGitHubIpAllowListEnabledSettingValue;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of UpdateIpAllowListEnabledSetting
 */
export interface IXGitHubUpdateIpAllowListEnabledSettingPayload {
  __typename: '_xGitHubUpdateIpAllowListEnabledSettingPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The IP allow list owner on which the setting was updated.
   */
  owner: _xGitHubIpAllowListOwner | null;
}

/**
 * Autogenerated input type of UpdateIpAllowListEntry
 */
export interface IXGitHubUpdateIpAllowListEntryInput {
  /**
   * The ID of the IP allow list entry to update.
   */
  ipAllowListEntryId: string;

  /**
   * An IP address or range of addresses in CIDR notation.
   */
  allowListValue: string;

  /**
   * An optional name for the IP allow list entry.
   */
  name?: string | null;

  /**
   * Whether the IP allow list entry is active when an IP allow list is enabled.
   */
  isActive: boolean;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of UpdateIpAllowListEntry
 */
export interface IXGitHubUpdateIpAllowListEntryPayload {
  __typename: '_xGitHubUpdateIpAllowListEntryPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The IP allow list entry that was updated.
   */
  ipAllowListEntry: IXGitHubIpAllowListEntry | null;
}

/**
 * Autogenerated input type of UpdateIpAllowListForInstalledAppsEnabledSetting
 */
export interface IXGitHubUpdateIpAllowListForInstalledAppsEnabledSettingInput {
  /**
   * The ID of the owner.
   */
  ownerId: string;

  /**
   * The value for the IP allow list configuration for installed GitHub Apps setting.
   */
  settingValue: XGitHubIpAllowListForInstalledAppsEnabledSettingValue;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of UpdateIpAllowListForInstalledAppsEnabledSetting
 */
export interface IXGitHubUpdateIpAllowListForInstalledAppsEnabledSettingPayload {
  __typename: '_xGitHubUpdateIpAllowListForInstalledAppsEnabledSettingPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The IP allow list owner on which the setting was updated.
   */
  owner: _xGitHubIpAllowListOwner | null;
}

/**
 * Autogenerated input type of UpdateIssueComment
 */
export interface IXGitHubUpdateIssueCommentInput {
  /**
   * The ID of the IssueComment to modify.
   */
  id: string;

  /**
   * The updated text of the comment.
   */
  body: string;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of UpdateIssueComment
 */
export interface IXGitHubUpdateIssueCommentPayload {
  __typename: '_xGitHubUpdateIssueCommentPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The updated comment.
   */
  issueComment: IXGitHubIssueComment | null;
}

/**
 * Autogenerated input type of UpdateIssue
 */
export interface IXGitHubUpdateIssueInput {
  /**
   * The ID of the Issue to modify.
   */
  id: string;

  /**
   * The title for the issue.
   */
  title?: string | null;

  /**
   * The body for the issue description.
   */
  body?: string | null;

  /**
   * An array of Node IDs of users for this issue.
   */
  assigneeIds?: Array<string> | null;

  /**
   * The Node ID of the milestone for this issue.
   */
  milestoneId?: string | null;

  /**
   * An array of Node IDs of labels for this issue.
   */
  labelIds?: Array<string> | null;

  /**
   * The desired issue state.
   */
  state?: XGitHubIssueState | null;

  /**
   * An array of Node IDs for projects associated with this issue.
   */
  projectIds?: Array<string> | null;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of UpdateIssue
 */
export interface IXGitHubUpdateIssuePayload {
  __typename: '_xGitHubUpdateIssuePayload';

  /**
   * Identifies the actor who performed the event.
   */
  actor: _xGitHubActor | null;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The issue.
   */
  issue: IXGitHubIssue | null;
}

/**
 * Autogenerated input type of UpdateLabel
 */
export interface IXGitHubUpdateLabelInput {
  /**
   * The Node ID of the label to be updated.
   */
  id: string;

  /**
   * A 6 character hex code, without the leading #, identifying the updated color of the label.
   */
  color?: string | null;

  /**
   * A brief description of the label, such as its purpose.
   */
  description?: string | null;

  /**
   * The updated name of the label.
   */
  name?: string | null;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of UpdateLabel
 */
export interface IXGitHubUpdateLabelPayload {
  __typename: '_xGitHubUpdateLabelPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The updated label.
   */
  label: IXGitHubLabel | null;
}

/**
 * Autogenerated input type of UpdateNotificationRestrictionSetting
 */
export interface IXGitHubUpdateNotificationRestrictionSettingInput {
  /**
   * The ID of the owner on which to set the restrict notifications setting.
   */
  ownerId: string;

  /**
   * The value for the restrict notifications setting.
   */
  settingValue: XGitHubNotificationRestrictionSettingValue;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of UpdateNotificationRestrictionSetting
 */
export interface IXGitHubUpdateNotificationRestrictionSettingPayload {
  __typename: '_xGitHubUpdateNotificationRestrictionSettingPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The owner on which the setting was updated.
   */
  owner: _xGitHubVerifiableDomainOwner | null;
}

/**
 * Autogenerated input type of UpdateProjectCard
 */
export interface IXGitHubUpdateProjectCardInput {
  /**
   * The ProjectCard ID to update.
   */
  projectCardId: string;

  /**
   * Whether or not the ProjectCard should be archived
   */
  isArchived?: boolean | null;

  /**
   * The note of ProjectCard.
   */
  note?: string | null;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of UpdateProjectCard
 */
export interface IXGitHubUpdateProjectCardPayload {
  __typename: '_xGitHubUpdateProjectCardPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The updated ProjectCard.
   */
  projectCard: IXGitHubProjectCard | null;
}

/**
 * Autogenerated input type of UpdateProjectColumn
 */
export interface IXGitHubUpdateProjectColumnInput {
  /**
   * The ProjectColumn ID to update.
   */
  projectColumnId: string;

  /**
   * The name of project column.
   */
  name: string;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of UpdateProjectColumn
 */
export interface IXGitHubUpdateProjectColumnPayload {
  __typename: '_xGitHubUpdateProjectColumnPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The updated project column.
   */
  projectColumn: IXGitHubProjectColumn | null;
}

/**
 * Autogenerated input type of UpdateProject
 */
export interface IXGitHubUpdateProjectInput {
  /**
   * The Project ID to update.
   */
  projectId: string;

  /**
   * The name of project.
   */
  name?: string | null;

  /**
   * The description of project.
   */
  body?: string | null;

  /**
   * Whether the project is open or closed.
   */
  state?: XGitHubProjectState | null;

  /**
   * Whether the project is public or not.
   */
  public?: boolean | null;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of UpdateProject
 */
export interface IXGitHubUpdateProjectPayload {
  __typename: '_xGitHubUpdateProjectPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The updated project.
   */
  project: IXGitHubProject | null;
}

/**
 * Autogenerated input type of UpdatePullRequest
 */
export interface IXGitHubUpdatePullRequestInput {
  /**
   * The Node ID of the pull request.
   */
  pullRequestId: string;

  /**
   * The name of the branch you want your changes pulled into. This should be an existing branch
   * on the current repository.
   */
  baseRefName?: string | null;

  /**
   * The title of the pull request.
   */
  title?: string | null;

  /**
   * The contents of the pull request.
   */
  body?: string | null;

  /**
   * The target state of the pull request.
   */
  state?: XGitHubPullRequestUpdateState | null;

  /**
   * Indicates whether maintainers can modify the pull request.
   */
  maintainerCanModify?: boolean | null;

  /**
   * An array of Node IDs of users for this pull request.
   */
  assigneeIds?: Array<string> | null;

  /**
   * The Node ID of the milestone for this pull request.
   */
  milestoneId?: string | null;

  /**
   * An array of Node IDs of labels for this pull request.
   */
  labelIds?: Array<string> | null;

  /**
   * An array of Node IDs for projects associated with this pull request.
   */
  projectIds?: Array<string> | null;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of UpdatePullRequest
 */
export interface IXGitHubUpdatePullRequestPayload {
  __typename: '_xGitHubUpdatePullRequestPayload';

  /**
   * Identifies the actor who performed the event.
   */
  actor: _xGitHubActor | null;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The updated pull request.
   */
  pullRequest: IXGitHubPullRequest | null;
}

/**
 * Autogenerated input type of UpdatePullRequestReviewComment
 */
export interface IXGitHubUpdatePullRequestReviewCommentInput {
  /**
   * The Node ID of the comment to modify.
   */
  pullRequestReviewCommentId: string;

  /**
   * The text of the comment.
   */
  body: string;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of UpdatePullRequestReviewComment
 */
export interface IXGitHubUpdatePullRequestReviewCommentPayload {
  __typename: '_xGitHubUpdatePullRequestReviewCommentPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The updated comment.
   */
  pullRequestReviewComment: IXGitHubPullRequestReviewComment | null;
}

/**
 * Autogenerated input type of UpdatePullRequestReview
 */
export interface IXGitHubUpdatePullRequestReviewInput {
  /**
   * The Node ID of the pull request review to modify.
   */
  pullRequestReviewId: string;

  /**
   * The contents of the pull request review body.
   */
  body: string;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of UpdatePullRequestReview
 */
export interface IXGitHubUpdatePullRequestReviewPayload {
  __typename: '_xGitHubUpdatePullRequestReviewPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The updated pull request review.
   */
  pullRequestReview: IXGitHubPullRequestReview | null;
}

/**
 * Autogenerated input type of UpdateRef
 */
export interface IXGitHubUpdateRefInput {
  /**
   * The Node ID of the Ref to be updated.
   */
  refId: string;

  /**
   * The GitObjectID that the Ref shall be updated to target.
   */
  oid: any;

  /**
   * Permit updates of branch Refs that are not fast-forwards?
   * @default false
   */
  force?: boolean | null;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of UpdateRef
 */
export interface IXGitHubUpdateRefPayload {
  __typename: '_xGitHubUpdateRefPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The updated Ref.
   */
  ref: IXGitHubRef | null;
}

/**
 * Autogenerated input type of UpdateRepository
 */
export interface IXGitHubUpdateRepositoryInput {
  /**
   * The ID of the repository to update.
   */
  repositoryId: string;

  /**
   * The new name of the repository.
   */
  name?: string | null;

  /**
   * A new description for the repository. Pass an empty string to erase the existing description.
   */
  description?: string | null;

  /**
   * Whether this repository should be marked as a template such that anyone who can access it can create new repositories with the same files and directory structure.
   */
  template?: boolean | null;

  /**
   * The URL for a web page about this repository. Pass an empty string to erase the existing URL.
   */
  homepageUrl?: any | null;

  /**
   * Indicates if the repository should have the wiki feature enabled.
   */
  hasWikiEnabled?: boolean | null;

  /**
   * Indicates if the repository should have the issues feature enabled.
   */
  hasIssuesEnabled?: boolean | null;

  /**
   * Indicates if the repository should have the project boards feature enabled.
   */
  hasProjectsEnabled?: boolean | null;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of UpdateRepository
 */
export interface IXGitHubUpdateRepositoryPayload {
  __typename: '_xGitHubUpdateRepositoryPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The updated repository.
   */
  repository: IXGitHubRepository | null;
}

/**
 * Autogenerated input type of UpdateSponsorshipPreferences
 */
export interface IXGitHubUpdateSponsorshipPreferencesInput {
  /**
   * The ID of the user or organization who is acting as the sponsor, paying for the sponsorship. Required if sponsorLogin is not given.
   */
  sponsorId?: string | null;

  /**
   * The username of the user or organization who is acting as the sponsor, paying for the sponsorship. Required if sponsorId is not given.
   */
  sponsorLogin?: string | null;

  /**
   * The ID of the user or organization who is receiving the sponsorship. Required if sponsorableLogin is not given.
   */
  sponsorableId?: string | null;

  /**
   * The username of the user or organization who is receiving the sponsorship. Required if sponsorableId is not given.
   */
  sponsorableLogin?: string | null;

  /**
   * Whether the sponsor should receive email updates from the sponsorable.
   * @default true
   */
  receiveEmails?: boolean | null;

  /**
   * Specify whether others should be able to see that the sponsor is sponsoring the sponsorable. Public visibility still does not reveal which tier is used.
   * @default "PUBLIC"
   */
  privacyLevel?: XGitHubSponsorshipPrivacy | null;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of UpdateSponsorshipPreferences
 */
export interface IXGitHubUpdateSponsorshipPreferencesPayload {
  __typename: '_xGitHubUpdateSponsorshipPreferencesPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The sponsorship that was updated.
   */
  sponsorship: IXGitHubSponsorship | null;
}

/**
 * Autogenerated input type of UpdateSubscription
 */
export interface IXGitHubUpdateSubscriptionInput {
  /**
   * The Node ID of the subscribable object to modify.
   */
  subscribableId: string;

  /**
   * The new state of the subscription.
   */
  state: XGitHubSubscriptionState;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of UpdateSubscription
 */
export interface IXGitHubUpdateSubscriptionPayload {
  __typename: '_xGitHubUpdateSubscriptionPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The input subscribable entity.
   */
  subscribable: _xGitHubSubscribable | null;
}

/**
 * Autogenerated input type of UpdateTeamDiscussionComment
 */
export interface IXGitHubUpdateTeamDiscussionCommentInput {
  /**
   * The ID of the comment to modify.
   */
  id: string;

  /**
   * The updated text of the comment.
   */
  body: string;

  /**
   * The current version of the body content.
   */
  bodyVersion?: string | null;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of UpdateTeamDiscussionComment
 */
export interface IXGitHubUpdateTeamDiscussionCommentPayload {
  __typename: '_xGitHubUpdateTeamDiscussionCommentPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The updated comment.
   */
  teamDiscussionComment: IXGitHubTeamDiscussionComment | null;
}

/**
 * Autogenerated input type of UpdateTeamDiscussion
 */
export interface IXGitHubUpdateTeamDiscussionInput {
  /**
   * The Node ID of the discussion to modify.
   */
  id: string;

  /**
   * The updated title of the discussion.
   */
  title?: string | null;

  /**
   * The updated text of the discussion.
   */
  body?: string | null;

  /**
   * The current version of the body content. If provided, this update operation will be rejected if the given version does not match the latest version on the server.
   */
  bodyVersion?: string | null;

  /**
   * If provided, sets the pinned state of the updated discussion.
   */
  pinned?: boolean | null;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of UpdateTeamDiscussion
 */
export interface IXGitHubUpdateTeamDiscussionPayload {
  __typename: '_xGitHubUpdateTeamDiscussionPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The updated discussion.
   */
  teamDiscussion: IXGitHubTeamDiscussion | null;
}

/**
 * Autogenerated input type of UpdateTopics
 */
export interface IXGitHubUpdateTopicsInput {
  /**
   * The Node ID of the repository.
   */
  repositoryId: string;

  /**
   * An array of topic names.
   */
  topicNames: Array<string>;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of UpdateTopics
 */
export interface IXGitHubUpdateTopicsPayload {
  __typename: '_xGitHubUpdateTopicsPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * Names of the provided topics that are not valid.
   */
  invalidTopicNames: Array<string> | null;

  /**
   * The updated repository.
   */
  repository: IXGitHubRepository | null;
}

/**
 * A user is an individual's account on GitHub that owns repositories and can make new content.
 */
export interface IXGitHubUser {
  __typename: '_xGitHubUser';

  /**
   * Determine if this repository owner has any items that can be pinned to their profile.
   */
  anyPinnableItems: boolean;

  /**
   * A URL pointing to the user's public avatar.
   */
  avatarUrl: any;

  /**
   * The user's public profile bio.
   */
  bio: string | null;

  /**
   * The user's public profile bio as HTML.
   */
  bioHTML: any;

  /**
   * Could this user receive email notifications, if the organization had notification restrictions enabled?
   */
  canReceiveOrganizationEmailsWhenNotificationsRestricted: boolean;

  /**
   * A list of commit comments made by this user.
   */
  commitComments: IXGitHubCommitCommentConnection;

  /**
   * The user's public profile company.
   */
  company: string | null;

  /**
   * The user's public profile company as HTML.
   */
  companyHTML: any;

  /**
   * The collection of contributions this user has made to different repositories.
   */
  contributionsCollection: IXGitHubContributionsCollection;

  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: any;

  /**
   * Identifies the primary key from the database.
   */
  databaseId: number | null;

  /**
   * The user's publicly visible profile email.
   */
  email: string;

  /**
   * The estimated next GitHub Sponsors payout for this user/organization in cents (USD).
   */
  estimatedNextSponsorsPayoutInCents: number;

  /**
   * A list of users the given user is followed by.
   */
  followers: IXGitHubFollowerConnection;

  /**
   * A list of users the given user is following.
   */
  following: IXGitHubFollowingConnection;

  /**
   * Find gist by repo name.
   */
  gist: IXGitHubGist | null;

  /**
   * A list of gist comments made by this user.
   */
  gistComments: IXGitHubGistCommentConnection;

  /**
   * A list of the Gists the user has created.
   */
  gists: IXGitHubGistConnection;

  /**
   * True if this user/organization has a GitHub Sponsors listing.
   */
  hasSponsorsListing: boolean;

  /**
   * The hovercard information for this user in a given context
   */
  hovercard: IXGitHubHovercard;
  id: string;

  /**
   * The interaction ability settings for this user.
   */
  interactionAbility: IXGitHubRepositoryInteractionAbility | null;

  /**
   * Whether or not this user is a participant in the GitHub Security Bug Bounty.
   */
  isBountyHunter: boolean;

  /**
   * Whether or not this user is a participant in the GitHub Campus Experts Program.
   */
  isCampusExpert: boolean;

  /**
   * Whether or not this user is a GitHub Developer Program member.
   */
  isDeveloperProgramMember: boolean;

  /**
   * Whether or not this user is a GitHub employee.
   */
  isEmployee: boolean;

  /**
   * Whether or not this user is following the viewer. Inverse of viewer_is_following
   */
  isFollowingViewer: boolean;

  /**
   * Whether or not this user is a member of the GitHub Stars Program.
   */
  isGitHubStar: boolean;

  /**
   * Whether or not the user has marked themselves as for hire.
   */
  isHireable: boolean;

  /**
   * Whether or not this user is a site administrator.
   */
  isSiteAdmin: boolean;

  /**
   * Check if the given account is sponsoring this user/organization.
   */
  isSponsoredBy: boolean;

  /**
   * True if the viewer is sponsored by this user/organization.
   */
  isSponsoringViewer: boolean;

  /**
   * Whether or not this user is the viewing user.
   */
  isViewer: boolean;

  /**
   * A list of issue comments made by this user.
   */
  issueComments: IXGitHubIssueCommentConnection;

  /**
   * A list of issues associated with this user.
   */
  issues: IXGitHubIssueConnection;

  /**
   * Showcases a selection of repositories and gists that the profile owner has either curated or that have been selected automatically based on popularity.
   */
  itemShowcase: IXGitHubProfileItemShowcase;

  /**
   * The user's public profile location.
   */
  location: string | null;

  /**
   * The username used to login.
   */
  login: string;

  /**
   * The estimated monthly GitHub Sponsors income for this user/organization in cents (USD).
   */
  monthlyEstimatedSponsorsIncomeInCents: number;

  /**
   * The user's public profile name.
   */
  name: string | null;

  /**
   * Find an organization by its login that the user belongs to.
   */
  organization: IXGitHubOrganization | null;

  /**
   * Verified email addresses that match verified domains for a specified organization the user is a member of.
   */
  organizationVerifiedDomainEmails: Array<string>;

  /**
   * A list of organizations the user belongs to.
   */
  organizations: IXGitHubOrganizationConnection;

  /**
   * A list of packages under the owner.
   */
  packages: IXGitHubPackageConnection;

  /**
   * A list of repositories and gists this profile owner can pin to their profile.
   */
  pinnableItems: IXGitHubPinnableItemConnection;

  /**
   * A list of repositories and gists this profile owner has pinned to their profile
   */
  pinnedItems: IXGitHubPinnableItemConnection;

  /**
   * Returns how many more items this profile owner can pin to their profile.
   */
  pinnedItemsRemaining: number;

  /**
   * Find project by number.
   */
  project: IXGitHubProject | null;

  /**
   * A list of projects under the owner.
   */
  projects: IXGitHubProjectConnection;

  /**
   * The HTTP path listing user's projects
   */
  projectsResourcePath: any;

  /**
   * The HTTP URL listing user's projects
   */
  projectsUrl: any;

  /**
   * A list of public keys associated with this user.
   */
  publicKeys: IXGitHubPublicKeyConnection;

  /**
   * A list of pull requests associated with this user.
   */
  pullRequests: IXGitHubPullRequestConnection;

  /**
   * A list of repositories that the user owns.
   */
  repositories: IXGitHubRepositoryConnection;

  /**
   * A list of repositories that the user recently contributed to.
   */
  repositoriesContributedTo: IXGitHubRepositoryConnection;

  /**
   * Find Repository.
   */
  repository: IXGitHubRepository | null;

  /**
   * Discussion comments this user has authored.
   */
  repositoryDiscussionComments: IXGitHubDiscussionCommentConnection;

  /**
   * Discussions this user has started.
   */
  repositoryDiscussions: IXGitHubDiscussionConnection;

  /**
   * The HTTP path for this user
   */
  resourcePath: any;

  /**
   * Replies this user has saved
   */
  savedReplies: IXGitHubSavedReplyConnection | null;

  /**
   * List of users and organizations this entity is sponsoring.
   */
  sponsoring: IXGitHubSponsorConnection;

  /**
   * List of sponsors for this user or organization.
   */
  sponsors: IXGitHubSponsorConnection;

  /**
   * Events involving this sponsorable, such as new sponsorships.
   */
  sponsorsActivities: IXGitHubSponsorsActivityConnection;

  /**
   * The GitHub Sponsors listing for this user or organization.
   */
  sponsorsListing: IXGitHubSponsorsListing | null;

  /**
   * The sponsorship from the viewer to this user/organization; that is, the sponsorship where you're the sponsor. Only returns a sponsorship if it is active.
   */
  sponsorshipForViewerAsSponsor: IXGitHubSponsorship | null;

  /**
   * The sponsorship from this user/organization to the viewer; that is, the sponsorship you're receiving. Only returns a sponsorship if it is active.
   */
  sponsorshipForViewerAsSponsorable: IXGitHubSponsorship | null;

  /**
   * List of sponsorship updates sent from this sponsorable to sponsors.
   */
  sponsorshipNewsletters: IXGitHubSponsorshipNewsletterConnection;

  /**
   * This object's sponsorships as the maintainer.
   */
  sponsorshipsAsMaintainer: IXGitHubSponsorshipConnection;

  /**
   * This object's sponsorships as the sponsor.
   */
  sponsorshipsAsSponsor: IXGitHubSponsorshipConnection;

  /**
   * Repositories the user has starred.
   */
  starredRepositories: IXGitHubStarredRepositoryConnection;

  /**
   * The user's description of what they're currently doing.
   */
  status: IXGitHubUserStatus | null;

  /**
   * Repositories the user has contributed to, ordered by contribution rank, plus repositories the user has created
   */
  topRepositories: IXGitHubRepositoryConnection;

  /**
   * The user's Twitter username.
   */
  twitterUsername: string | null;

  /**
   * Identifies the date and time when the object was last updated.
   */
  updatedAt: any;

  /**
   * The HTTP URL for this user
   */
  url: any;

  /**
   * Can the viewer pin repositories and gists to the profile?
   */
  viewerCanChangePinnedItems: boolean;

  /**
   * Can the current viewer create new projects on this owner.
   */
  viewerCanCreateProjects: boolean;

  /**
   * Whether or not the viewer is able to follow the user.
   */
  viewerCanFollow: boolean;

  /**
   * Whether or not the viewer is able to sponsor this user/organization.
   */
  viewerCanSponsor: boolean;

  /**
   * Whether or not this user is followed by the viewer. Inverse of is_following_viewer.
   */
  viewerIsFollowing: boolean;

  /**
   * True if the viewer is sponsoring this user/organization.
   */
  viewerIsSponsoring: boolean;

  /**
   * A list of repositories the given user is watching.
   */
  watching: IXGitHubRepositoryConnection;

  /**
   * A URL pointing to the user's public website/blog.
   */
  websiteUrl: any | null;
}

export interface IAnyPinnableItemsOnXGitHubUserArguments {
  /**
   * Filter to only a particular kind of pinnable item.
   */
  type?: XGitHubPinnableItemType | null;
}

export interface IAvatarUrlOnXGitHubUserArguments {
  /**
   * The size of the resulting square image.
   */
  size?: number | null;
}

export interface ICanReceiveOrganizationEmailsWhenNotificationsRestrictedOnXGitHubUserArguments {
  /**
   * The login of the organization to check.
   */
  login: string;
}

export interface ICommitCommentsOnXGitHubUserArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IContributionsCollectionOnXGitHubUserArguments {
  /**
   * The ID of the organization used to filter contributions.
   */
  organizationID?: string | null;

  /**
   * Only contributions made at this time or later will be counted. If omitted, defaults to a year ago.
   */
  from?: any | null;

  /**
   * Only contributions made before and up to (including) this time will be counted. If omitted, defaults to the current time or one year from the provided from argument.
   */
  to?: any | null;
}

export interface IFollowersOnXGitHubUserArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IFollowingOnXGitHubUserArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IGistOnXGitHubUserArguments {
  /**
   * The gist name to find.
   */
  name: string;
}

export interface IGistCommentsOnXGitHubUserArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IGistsOnXGitHubUserArguments {
  /**
   * Filters Gists according to privacy.
   */
  privacy?: XGitHubGistPrivacy | null;

  /**
   * Ordering options for gists returned from the connection
   */
  orderBy?: IXGitHubGistOrder | null;

  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IHovercardOnXGitHubUserArguments {
  /**
   * The ID of the subject to get the hovercard in the context of
   */
  primarySubjectId?: string | null;
}

export interface IIsSponsoredByOnXGitHubUserArguments {
  /**
   * The target account's login.
   */
  accountLogin: string;
}

export interface IIssueCommentsOnXGitHubUserArguments {
  /**
   * Ordering options for issue comments returned from the connection.
   */
  orderBy?: IXGitHubIssueCommentOrder | null;

  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IIssuesOnXGitHubUserArguments {
  /**
   * Ordering options for issues returned from the connection.
   */
  orderBy?: IXGitHubIssueOrder | null;

  /**
   * A list of label names to filter the pull requests by.
   */
  labels?: Array<string> | null;

  /**
   * A list of states to filter the issues by.
   */
  states?: Array<XGitHubIssueState> | null;

  /**
   * Filtering options for issues returned from the connection.
   */
  filterBy?: IXGitHubIssueFilters | null;

  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IOrganizationOnXGitHubUserArguments {
  /**
   * The login of the organization to find.
   */
  login: string;
}

export interface IOrganizationVerifiedDomainEmailsOnXGitHubUserArguments {
  /**
   * The login of the organization to match verified domains from.
   */
  login: string;
}

export interface IOrganizationsOnXGitHubUserArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IPackagesOnXGitHubUserArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Find packages by their names.
   */
  names?: Array<string | null> | null;

  /**
   * Find packages in a repository by ID.
   */
  repositoryId?: string | null;

  /**
   * Filter registry package by type.
   */
  packageType?: XGitHubPackageType | null;

  /**
   * Ordering of the returned packages.
   * @default {"field":"CREATED_AT","direction":"DESC"}
   */
  orderBy?: IXGitHubPackageOrder | null;
}

export interface IPinnableItemsOnXGitHubUserArguments {
  /**
   * Filter the types of pinnable items that are returned.
   */
  types?: Array<XGitHubPinnableItemType> | null;

  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IPinnedItemsOnXGitHubUserArguments {
  /**
   * Filter the types of pinned items that are returned.
   */
  types?: Array<XGitHubPinnableItemType> | null;

  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IProjectOnXGitHubUserArguments {
  /**
   * The project number to find.
   */
  number: number;
}

export interface IProjectsOnXGitHubUserArguments {
  /**
   * Ordering options for projects returned from the connection
   */
  orderBy?: IXGitHubProjectOrder | null;

  /**
   * Query to search projects by, currently only searching by name.
   */
  search?: string | null;

  /**
   * A list of states to filter the projects by.
   */
  states?: Array<XGitHubProjectState> | null;

  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IPublicKeysOnXGitHubUserArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IPullRequestsOnXGitHubUserArguments {
  /**
   * A list of states to filter the pull requests by.
   */
  states?: Array<XGitHubPullRequestState> | null;

  /**
   * A list of label names to filter the pull requests by.
   */
  labels?: Array<string> | null;

  /**
   * The head ref name to filter the pull requests by.
   */
  headRefName?: string | null;

  /**
   * The base ref name to filter the pull requests by.
   */
  baseRefName?: string | null;

  /**
   * Ordering options for pull requests returned from the connection.
   */
  orderBy?: IXGitHubIssueOrder | null;

  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IRepositoriesOnXGitHubUserArguments {
  /**
   * If non-null, filters repositories according to privacy
   */
  privacy?: XGitHubRepositoryPrivacy | null;

  /**
   * Ordering options for repositories returned from the connection
   */
  orderBy?: IXGitHubRepositoryOrder | null;

  /**
   * Array of viewer's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the current viewer owns.
   */
  affiliations?: Array<XGitHubRepositoryAffiliation | null> | null;

  /**
   * Array of owner's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the organization or user being viewed owns.
   * @default ["OWNER","COLLABORATOR"]
   */
  ownerAffiliations?: Array<XGitHubRepositoryAffiliation | null> | null;

  /**
   * If non-null, filters repositories according to whether they have been locked
   */
  isLocked?: boolean | null;

  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * If non-null, filters repositories according to whether they are forks of another repository
   */
  isFork?: boolean | null;
}

export interface IRepositoriesContributedToOnXGitHubUserArguments {
  /**
   * If non-null, filters repositories according to privacy
   */
  privacy?: XGitHubRepositoryPrivacy | null;

  /**
   * Ordering options for repositories returned from the connection
   */
  orderBy?: IXGitHubRepositoryOrder | null;

  /**
   * If non-null, filters repositories according to whether they have been locked
   */
  isLocked?: boolean | null;

  /**
   * If true, include user repositories
   */
  includeUserRepositories?: boolean | null;

  /**
   * If non-null, include only the specified types of contributions. The GitHub.com UI uses [COMMIT, ISSUE, PULL_REQUEST, REPOSITORY]
   */
  contributionTypes?: Array<XGitHubRepositoryContributionType | null> | null;

  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IRepositoryOnXGitHubUserArguments {
  /**
   * Name of Repository to find.
   */
  name: string;
}

export interface IRepositoryDiscussionCommentsOnXGitHubUserArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Filter discussion comments to only those in a specific repository.
   */
  repositoryId?: string | null;

  /**
   * Filter discussion comments to only those that were marked as the answer
   * @default false
   */
  onlyAnswers?: boolean | null;
}

export interface IRepositoryDiscussionsOnXGitHubUserArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Ordering options for discussions returned from the connection.
   * @default {"field":"CREATED_AT","direction":"DESC"}
   */
  orderBy?: IXGitHubDiscussionOrder | null;

  /**
   * Filter discussions to only those in a specific repository.
   */
  repositoryId?: string | null;

  /**
   * Filter discussions to only those that have been answered or not. Defaults to including both answered and unanswered discussions.
   * @default null
   */
  answered?: boolean | null;
}

export interface ISavedRepliesOnXGitHubUserArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * The field to order saved replies by.
   * @default {"field":"UPDATED_AT","direction":"DESC"}
   */
  orderBy?: IXGitHubSavedReplyOrder | null;
}

export interface ISponsoringOnXGitHubUserArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Ordering options for the users and organizations returned from the connection.
   * @default {"field":"RELEVANCE","direction":"DESC"}
   */
  orderBy?: IXGitHubSponsorOrder | null;
}

export interface ISponsorsOnXGitHubUserArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * If given, will filter for sponsors at the given tier. Will only return sponsors whose tier the viewer is permitted to see.
   */
  tierId?: string | null;

  /**
   * Ordering options for sponsors returned from the connection.
   * @default {"field":"RELEVANCE","direction":"DESC"}
   */
  orderBy?: IXGitHubSponsorOrder | null;
}

export interface ISponsorsActivitiesOnXGitHubUserArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Filter activities returned to only those that occurred in a given time range.
   * @default "MONTH"
   */
  period?: XGitHubSponsorsActivityPeriod | null;

  /**
   * Ordering options for activity returned from the connection.
   * @default {"field":"TIMESTAMP","direction":"DESC"}
   */
  orderBy?: IXGitHubSponsorsActivityOrder | null;
}

export interface ISponsorshipNewslettersOnXGitHubUserArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Ordering options for sponsorship updates returned from the connection.
   * @default {"field":"CREATED_AT","direction":"DESC"}
   */
  orderBy?: IXGitHubSponsorshipNewsletterOrder | null;
}

export interface ISponsorshipsAsMaintainerOnXGitHubUserArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Whether or not to include private sponsorships in the result set
   * @default false
   */
  includePrivate?: boolean | null;

  /**
   * Ordering options for sponsorships returned from this connection. If left blank, the sponsorships will be ordered based on relevancy to the viewer.
   */
  orderBy?: IXGitHubSponsorshipOrder | null;
}

export interface ISponsorshipsAsSponsorOnXGitHubUserArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Ordering options for sponsorships returned from this connection. If left blank, the sponsorships will be ordered based on relevancy to the viewer.
   */
  orderBy?: IXGitHubSponsorshipOrder | null;
}

export interface IStarredRepositoriesOnXGitHubUserArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Filters starred repositories to only return repositories owned by the viewer.
   */
  ownedByViewer?: boolean | null;

  /**
   * Order for connection
   */
  orderBy?: IXGitHubStarOrder | null;
}

export interface ITopRepositoriesOnXGitHubUserArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * Ordering options for repositories returned from the connection
   */
  orderBy: IXGitHubRepositoryOrder;

  /**
   * How far back in time to fetch contributed repositories
   */
  since?: any | null;
}

export interface IWatchingOnXGitHubUserArguments {
  /**
   * If non-null, filters repositories according to privacy
   */
  privacy?: XGitHubRepositoryPrivacy | null;

  /**
   * Ordering options for repositories returned from the connection
   */
  orderBy?: IXGitHubRepositoryOrder | null;

  /**
   * Affiliation options for repositories returned from the connection. If none specified, the results will include repositories for which the current viewer is an owner or collaborator, or member.
   */
  affiliations?: Array<XGitHubRepositoryAffiliation | null> | null;

  /**
   * Array of owner's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the organization or user being viewed owns.
   * @default ["OWNER","COLLABORATOR"]
   */
  ownerAffiliations?: Array<XGitHubRepositoryAffiliation | null> | null;

  /**
   * If non-null, filters repositories according to whether they have been locked
   */
  isLocked?: boolean | null;

  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

/**
 * The possible durations that a user can be blocked for.
 */
export const enum XGitHubUserBlockDuration {
  /**
   * The user was blocked for 1 day
   */
  ONE_DAY = 'ONE_DAY',

  /**
   * The user was blocked for 3 days
   */
  THREE_DAYS = 'THREE_DAYS',

  /**
   * The user was blocked for 7 days
   */
  ONE_WEEK = 'ONE_WEEK',

  /**
   * The user was blocked for 30 days
   */
  ONE_MONTH = 'ONE_MONTH',

  /**
   * The user was blocked permanently
   */
  PERMANENT = 'PERMANENT',
}

/**
 * Represents a 'user_blocked' event on a given user.
 */
export interface IXGitHubUserBlockedEvent {
  __typename: '_xGitHubUserBlockedEvent';

  /**
   * Identifies the actor who performed the event.
   */
  actor: _xGitHubActor | null;

  /**
   * Number of days that the user was blocked for.
   */
  blockDuration: XGitHubUserBlockDuration;

  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: any;
  id: string;

  /**
   * The user who was blocked.
   */
  subject: IXGitHubUser | null;
}

/**
 * The connection type for User.
 */
export interface IXGitHubUserConnection {
  __typename: '_xGitHubUserConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubUserEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitHubUser | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edit on user content
 */
export interface IXGitHubUserContentEdit {
  __typename: '_xGitHubUserContentEdit';

  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: any;

  /**
   * Identifies the date and time when the object was deleted.
   */
  deletedAt: any | null;

  /**
   * The actor who deleted this content
   */
  deletedBy: _xGitHubActor | null;

  /**
   * A summary of the changes for this edit
   */
  diff: string | null;

  /**
   * When this content was edited
   */
  editedAt: any;

  /**
   * The actor who edited this content
   */
  editor: _xGitHubActor | null;
  id: string;

  /**
   * Identifies the date and time when the object was last updated.
   */
  updatedAt: any;
}

/**
 * A list of edits to content.
 */
export interface IXGitHubUserContentEditConnection {
  __typename: '_xGitHubUserContentEditConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubUserContentEditEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitHubUserContentEdit | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface IXGitHubUserContentEditEdge {
  __typename: '_xGitHubUserContentEditEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitHubUserContentEdit | null;
}

/**
 * Represents a user.
 */
export interface IXGitHubUserEdge {
  __typename: '_xGitHubUserEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitHubUser | null;
}

/**
 * Email attributes from External Identity
 */
export interface IXGitHubUserEmailMetadata {
  __typename: '_xGitHubUserEmailMetadata';

  /**
   * Boolean to identify primary emails
   */
  primary: boolean | null;

  /**
   * Type of email
   */
  type: string | null;

  /**
   * Email id
   */
  value: string;
}

/**
 * The user's description of what they're currently doing.
 */
export interface IXGitHubUserStatus {
  __typename: '_xGitHubUserStatus';

  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: any;

  /**
   * An emoji summarizing the user's status.
   */
  emoji: string | null;

  /**
   * The status emoji as HTML.
   */
  emojiHTML: any | null;

  /**
   * If set, the status will not be shown after this date.
   */
  expiresAt: any | null;
  id: string;

  /**
   * Whether this status indicates the user is not fully available on GitHub.
   */
  indicatesLimitedAvailability: boolean;

  /**
   * A brief message describing what the user is doing.
   */
  message: string | null;

  /**
   * The organization whose members can see this status. If null, this status is publicly visible.
   */
  organization: IXGitHubOrganization | null;

  /**
   * Identifies the date and time when the object was last updated.
   */
  updatedAt: any;

  /**
   * The user who has this status.
   */
  user: IXGitHubUser;
}

/**
 * The connection type for UserStatus.
 */
export interface IXGitHubUserStatusConnection {
  __typename: '_xGitHubUserStatusConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubUserStatusEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitHubUserStatus | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface IXGitHubUserStatusEdge {
  __typename: '_xGitHubUserStatusEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitHubUserStatus | null;
}

/**
 * Ordering options for user status connections.
 */
export interface IXGitHubUserStatusOrder {
  /**
   * The field to order user statuses by.
   */
  field: XGitHubUserStatusOrderField;

  /**
   * The ordering direction.
   */
  direction: XGitHubOrderDirection;
}

/**
 * Properties by which user status connections can be ordered.
 */
export const enum XGitHubUserStatusOrderField {
  /**
   * Order user statuses by when they were updated.
   */
  UPDATED_AT = 'UPDATED_AT',
}

/**
 * A domain that can be verified or approved for an organization or an enterprise.
 */
export interface IXGitHubVerifiableDomain {
  __typename: '_xGitHubVerifiableDomain';

  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: any;

  /**
   * Identifies the primary key from the database.
   */
  databaseId: number | null;

  /**
   * The DNS host name that should be used for verification.
   */
  dnsHostName: any | null;

  /**
   * The unicode encoded domain.
   */
  domain: any;

  /**
   * Whether a TXT record for verification with the expected host name was found.
   */
  hasFoundHostName: boolean;

  /**
   * Whether a TXT record for verification with the expected verification token was found.
   */
  hasFoundVerificationToken: boolean;
  id: string;

  /**
   * Whether or not the domain is approved.
   */
  isApproved: boolean;

  /**
   * Whether this domain is required to exist for an organization or enterprise policy to be enforced.
   */
  isRequiredForPolicyEnforcement: boolean;

  /**
   * Whether or not the domain is verified.
   */
  isVerified: boolean;

  /**
   * The owner of the domain.
   */
  owner: _xGitHubVerifiableDomainOwner;

  /**
   * The punycode encoded domain.
   */
  punycodeEncodedDomain: any;

  /**
   * The time that the current verification token will expire.
   */
  tokenExpirationTime: any | null;

  /**
   * Identifies the date and time when the object was last updated.
   */
  updatedAt: any;

  /**
   * The current verification token for the domain.
   */
  verificationToken: string | null;
}

/**
 * The connection type for VerifiableDomain.
 */
export interface IXGitHubVerifiableDomainConnection {
  __typename: '_xGitHubVerifiableDomainConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitHubVerifiableDomainEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitHubVerifiableDomain | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitHubPageInfo;

  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface IXGitHubVerifiableDomainEdge {
  __typename: '_xGitHubVerifiableDomainEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitHubVerifiableDomain | null;
}

/**
 * Ordering options for verifiable domain connections.
 */
export interface IXGitHubVerifiableDomainOrder {
  /**
   * The field to order verifiable domains by.
   */
  field: XGitHubVerifiableDomainOrderField;

  /**
   * The ordering direction.
   */
  direction: XGitHubOrderDirection;
}

/**
 * Properties by which verifiable domain connections can be ordered.
 */
export const enum XGitHubVerifiableDomainOrderField {
  /**
   * Order verifiable domains by the domain name.
   */
  DOMAIN = 'DOMAIN',

  /**
   * Order verifiable domains by their creation date.
   */
  CREATED_AT = 'CREATED_AT',
}

/**
 * Types that can own a verifiable domain.
 */
export type _xGitHubVerifiableDomainOwner =
  | IXGitHubEnterprise
  | IXGitHubOrganization;

/**
 * Autogenerated input type of VerifyVerifiableDomain
 */
export interface IXGitHubVerifyVerifiableDomainInput {
  /**
   * The ID of the verifiable domain to verify.
   */
  id: string;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of VerifyVerifiableDomain
 */
export interface IXGitHubVerifyVerifiableDomainPayload {
  __typename: '_xGitHubVerifyVerifiableDomainPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * The verifiable domain that was verified.
   */
  domain: IXGitHubVerifiableDomain | null;
}

/**
 * A hovercard context with a message describing how the viewer is related.
 */
export interface IXGitHubViewerHovercardContext {
  __typename: '_xGitHubViewerHovercardContext';

  /**
   * A string describing this context
   */
  message: string;

  /**
   * An octicon to accompany this context
   */
  octicon: string;

  /**
   * Identifies the user who is related to this context.
   */
  viewer: IXGitHubUser;
}

/**
 * A subject that may be upvoted.
 */
export type _xGitHubVotable = IXGitHubDiscussion | IXGitHubDiscussionComment;

/**
 * A subject that may be upvoted.
 */
export interface IXGitHubVotable {
  __typename: '_xGitHubVotable';

  /**
   * Number of upvotes that this subject has received.
   */
  upvoteCount: number;

  /**
   * Whether or not the current user can add or remove an upvote on this subject.
   */
  viewerCanUpvote: boolean;

  /**
   * Whether or not the current user has already upvoted this subject.
   */
  viewerHasUpvoted: boolean;
}

/**
 * A workflow contains meta information about an Actions workflow file.
 */
export interface IXGitHubWorkflow {
  __typename: '_xGitHubWorkflow';

  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: any;

  /**
   * Identifies the primary key from the database.
   */
  databaseId: number | null;
  id: string;

  /**
   * The name of the workflow.
   */
  name: string;

  /**
   * Identifies the date and time when the object was last updated.
   */
  updatedAt: any;
}

/**
 * A workflow run.
 */
export interface IXGitHubWorkflowRun {
  __typename: '_xGitHubWorkflowRun';

  /**
   * The check suite this workflow run belongs to.
   */
  checkSuite: IXGitHubCheckSuite;

  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: any;

  /**
   * Identifies the primary key from the database.
   */
  databaseId: number | null;

  /**
   * The log of deployment reviews
   */
  deploymentReviews: IXGitHubDeploymentReviewConnection;
  id: string;

  /**
   * The pending deployment requests of all check runs in this workflow run
   */
  pendingDeploymentRequests: IXGitHubDeploymentRequestConnection;

  /**
   * The HTTP path for this workflow run
   */
  resourcePath: any;

  /**
   * A number that uniquely identifies this workflow run in its parent workflow.
   */
  runNumber: number;

  /**
   * Identifies the date and time when the object was last updated.
   */
  updatedAt: any;

  /**
   * The HTTP URL for this workflow run
   */
  url: any;

  /**
   * The workflow executed in this workflow run.
   */
  workflow: IXGitHubWorkflow;
}

export interface IDeploymentReviewsOnXGitHubWorkflowRunArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IPendingDeploymentRequestsOnXGitHubWorkflowRunArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

/**
 * An integration provider that connects via OAuth1.0
 */
export interface IIntegrationProviderOAuth1 {
  __typename: 'IntegrationProviderOAuth1';

  /**
   * The provider's unique identifier
   */
  id: string;

  /**
   * The team that created the provider. "aGhostTeam" if global
   */
  teamId: string;

  /**
   * The timestamp the provider was created
   */
  createdAt: any;

  /**
   * The timestamp the token was updated at
   */
  updatedAt: any;

  /**
   * The name of the integration service (GitLab, Mattermost, etc)
   */
  service: IntegrationProviderServiceEnum;

  /**
   * The kind of token used by this provider (OAuth2, PAT, Webhook)
   */
  authStrategy: IntegrationProviderAuthStrategyEnum;

  /**
   * The scope this provider configuration was created at (globally, org-wide, or by the team)
   */
  scope: IntegrationProviderScopeEnum;

  /**
   * true if the provider configuration should be used
   */
  isActive: boolean;

  /**
   * The base URL of the OAuth1 server
   */
  serverBaseUrl: any;
}

/**
 * An authentication provider configuration
 */
export type IntegrationProvider =
  | IIntegrationProviderOAuth1
  | IIntegrationProviderOAuth2
  | IIntegrationProviderWebhook;

/**
 * An authentication provider configuration
 */
export interface IIntegrationProvider {
  __typename: 'IntegrationProvider';

  /**
   * The provider's unique identifier
   */
  id: string;

  /**
   * The team that created the provider. "aGhostTeam" if global
   */
  teamId: string;

  /**
   * The timestamp the provider was created
   */
  createdAt: any;

  /**
   * The timestamp the token was updated at
   */
  updatedAt: any;

  /**
   * The name of the integration service (GitLab, Mattermost, etc)
   */
  service: IntegrationProviderServiceEnum;

  /**
   * The kind of token used by this provider (OAuth2, PAT, Webhook)
   */
  authStrategy: IntegrationProviderAuthStrategyEnum;

  /**
   * The scope this provider configuration was created at (globally, org-wide, or by the team)
   */
  scope: IntegrationProviderScopeEnum;

  /**
   * true if the provider configuration should be used
   */
  isActive: boolean;
}

/**
 * The name of the service of the Integration Provider
 */
export const enum IntegrationProviderServiceEnum {
  jira = 'jira',
  github = 'github',
  gitlab = 'gitlab',
  mattermost = 'mattermost',
  jiraServer = 'jiraServer',
}

/**
 * The kind of token provided by the service
 */
export const enum IntegrationProviderAuthStrategyEnum {
  oauth1 = 'oauth1',
  oauth2 = 'oauth2',
  pat = 'pat',
  webhook = 'webhook',
}

/**
 * The scope this provider was created on (globally, org-wide, or on the team)
 */
export const enum IntegrationProviderScopeEnum {
  global = 'global',
  org = 'org',
  team = 'team',
}

/**
 * An integration provider that connects via OAuth2
 */
export interface IIntegrationProviderOAuth2 {
  __typename: 'IntegrationProviderOAuth2';

  /**
   * The provider's unique identifier
   */
  id: string;

  /**
   * The team that created the provider. "aGhostTeam" if global
   */
  teamId: string;

  /**
   * The timestamp the provider was created
   */
  createdAt: any;

  /**
   * The timestamp the token was updated at
   */
  updatedAt: any;

  /**
   * The name of the integration service (GitLab, Mattermost, etc)
   */
  service: IntegrationProviderServiceEnum;

  /**
   * The kind of token used by this provider (OAuth2, PAT, Webhook)
   */
  authStrategy: IntegrationProviderAuthStrategyEnum;

  /**
   * The scope this provider configuration was created at (globally, org-wide, or by the team)
   */
  scope: IntegrationProviderScopeEnum;

  /**
   * true if the provider configuration should be used
   */
  isActive: boolean;

  /**
   * The base URL of the OAuth2 server
   */
  serverBaseUrl: any;

  /**
   * The OAuth2 client id
   */
  clientId: string;
}

/**
 * An integration provider that connects via webhook
 */
export interface IIntegrationProviderWebhook {
  __typename: 'IntegrationProviderWebhook';

  /**
   * The provider's unique identifier
   */
  id: string;

  /**
   * The team that created the provider. "aGhostTeam" if global
   */
  teamId: string;

  /**
   * The timestamp the provider was created
   */
  createdAt: any;

  /**
   * The timestamp the token was updated at
   */
  updatedAt: any;

  /**
   * The name of the integration service (GitLab, Mattermost, etc)
   */
  service: IntegrationProviderServiceEnum;

  /**
   * The kind of token used by this provider (OAuth2, PAT, Webhook)
   */
  authStrategy: IntegrationProviderAuthStrategyEnum;

  /**
   * The scope this provider configuration was created at (globally, org-wide, or by the team)
   */
  scope: IntegrationProviderScopeEnum;

  /**
   * true if the provider configuration should be used
   */
  isActive: boolean;

  /**
   * The webhook URL
   */
  webhookUrl: any;
}

/**
 * An authentication strategy using Google
 */
export interface IAuthIdentityGoogle {
  __typename: 'AuthIdentityGoogle';

  /**
   * true if the email address using this strategy is verified, else false
   */
  isEmailVerified: boolean;
  type: AuthIdentityTypeEnum;

  /**
   * The googleID for this strategy
   */
  id: string;
}

/**
 * An authentication strategy to log in to Parabol
 */
export type AuthIdentity = IAuthIdentityGoogle | IAuthIdentityLocal;

/**
 * An authentication strategy to log in to Parabol
 */
export interface IAuthIdentity {
  __typename: 'AuthIdentity';

  /**
   * true if the email address using this strategy is verified, else false
   */
  isEmailVerified: boolean;
  type: AuthIdentityTypeEnum;
}

/**
 * The types of authentication strategies
 */
export const enum AuthIdentityTypeEnum {
  LOCAL = 'LOCAL',
  GOOGLE = 'GOOGLE',
}

/**
 * An authentication strategy using an email & password
 */
export interface IAuthIdentityLocal {
  __typename: 'AuthIdentityLocal';

  /**
   * true if the email address using this strategy is verified, else false
   */
  isEmailVerified: boolean;
  type: AuthIdentityTypeEnum;
}

/**
 * The meeting phase where all team members check in one-by-one
 */
export interface ICheckInPhase {
  __typename: 'CheckInPhase';

  /**
   * shortid
   */
  id: string;
  meetingId: string;
  teamId: string;

  /**
   * The type of phase
   */
  phaseType: NewMeetingPhaseTypeEnum;
  stages: Array<ICheckInStage>;

  /**
   * The checkIn greeting (fun language)
   */
  checkInGreeting: IMeetingGreeting;

  /**
   * The checkIn question of the week (draft-js format)
   */
  checkInQuestion: string;
}

export type NewMeetingPhase =
  | ICheckInPhase
  | IReflectPhase
  | IDiscussPhase
  | IUpdatesPhase
  | IAgendaItemsPhase
  | IGenericMeetingPhase
  | IEstimatePhase;

export interface INewMeetingPhase {
  __typename: 'NewMeetingPhase';

  /**
   * shortid
   */
  id: string;
  meetingId: string;
  teamId: string;

  /**
   * The type of phase
   */
  phaseType: NewMeetingPhaseTypeEnum;
  stages: Array<NewMeetingStage>;
}

/**
 * The phase of the meeting
 */
export const enum NewMeetingPhaseTypeEnum {
  lobby = 'lobby',
  checkin = 'checkin',
  updates = 'updates',
  firstcall = 'firstcall',
  agendaitems = 'agendaitems',
  lastcall = 'lastcall',
  reflect = 'reflect',
  group = 'group',
  vote = 'vote',
  discuss = 'discuss',
  SUMMARY = 'SUMMARY',
  SCOPE = 'SCOPE',
  ESTIMATE = 'ESTIMATE',
}

/**
 * An instance of a meeting phase item. On the client, this usually represents a single view
 */
export type NewMeetingStage =
  | ICheckInStage
  | IGenericMeetingStage
  | IRetroDiscussStage
  | IUpdatesStage
  | IEstimateStage
  | IAgendaItemsStage;

/**
 * An instance of a meeting phase item. On the client, this usually represents a single view
 */
export interface INewMeetingStage {
  __typename: 'NewMeetingStage';

  /**
   * stageId, shortid
   */
  id: string;

  /**
   * The datetime the stage was completed
   */
  endAt: any | null;

  /**
   * foreign key. try using meeting
   */
  meetingId: string;

  /**
   * The meeting this stage belongs to
   */
  meeting: NewMeeting | null;

  /**
   * true if the facilitator has completed this stage, else false. Should be boolean(endAt)
   */
  isComplete: boolean;

  /**
   * true if any meeting participant can navigate to this stage
   */
  isNavigable: boolean;

  /**
   * true if the facilitator can navigate to this stage
   */
  isNavigableByFacilitator: boolean;

  /**
   * The phase this stage belongs to
   */
  phase: NewMeetingPhase | null;

  /**
   * The type of the phase
   */
  phaseType: NewMeetingPhaseTypeEnum | null;

  /**
   * The datetime the stage was started
   */
  startAt: any | null;

  /**
   * Number of times the facilitator has visited this stage
   */
  viewCount: number | null;

  /**
   * true if a time limit is set, false if end time is set, null if neither is set
   */
  isAsync: boolean | null;

  /**
   * true if the viewer is ready to advance, else false
   */
  isViewerReady: boolean;

  /**
   * the number of meeting members ready to advance, excluding the facilitator
   */
  readyCount: number;

  /**
   * The datetime the phase is scheduled to be finished, null if no time limit or end time is set
   */
  scheduledEndTime: any | null;

  /**
   * The suggested ending datetime for a phase to be completed async, null if not enough data to make a suggestion
   */
  suggestedEndTime: any | null;

  /**
   * The suggested time limit for a phase to be completed together, null if not enough data to make a suggestion
   */
  suggestedTimeLimit: number | null;
  teamId: string;

  /**
   * The number of milliseconds left before the scheduled end time. Useful for unsynced client clocks. null if scheduledEndTime is null
   */
  timeRemaining: number | null;
}

/**
 * A team meeting history for all previous meetings
 */
export type NewMeeting = IActionMeeting | IRetrospectiveMeeting | IPokerMeeting;

/**
 * A team meeting history for all previous meetings
 */
export interface INewMeeting {
  __typename: 'NewMeeting';

  /**
   * The unique meeting id. shortid.
   */
  id: string;

  /**
   * The timestamp the meeting was created
   */
  createdAt: any;

  /**
   * The id of the user that created the meeting
   */
  createdBy: string;

  /**
   * The user that created the meeting
   */
  createdByUser: IUser;

  /**
   * The timestamp the meeting officially ended
   */
  endedAt: any | null;

  /**
   * The location of the facilitator in the meeting
   */
  facilitatorStageId: string;

  /**
   * The userId (or anonymousId) of the most recent facilitator
   */
  facilitatorUserId: string;

  /**
   * The facilitator team member
   */
  facilitator: ITeamMember;

  /**
   * The team members that were active during the time of the meeting
   */
  meetingMembers: Array<MeetingMember>;

  /**
   * The auto-incrementing meeting number for the team
   */
  meetingNumber: number;
  meetingType: MeetingTypeEnum;

  /**
   * The name of the meeting
   */
  name: string;

  /**
   * The organization this meeting belongs to
   */
  organization: IOrganization;

  /**
   * The phases the meeting will go through, including all phase-specific state
   */
  phases: Array<NewMeetingPhase>;

  /**
   * true if should show the org the conversion modal, else false
   */
  showConversionModal: boolean;

  /**
   * The time the meeting summary was emailed to the team
   */
  summarySentAt: any | null;

  /**
   * foreign key for team
   */
  teamId: string;

  /**
   * The team that ran the meeting
   */
  team: ITeam;

  /**
   * The last time a meeting was updated (stage completed, finished, etc)
   */
  updatedAt: any | null;

  /**
   * The meeting member of the viewer
   */
  viewerMeetingMember: MeetingMember | null;
}

/**
 * The user account profile
 */
export interface IUser {
  __typename: 'User';

  /**
   * The userId provided by us
   */
  id: string;
  archivedTasks: ITaskConnection | null;
  archivedTasksCount: number | null;

  /**
   * The assumed company this organizaiton belongs to
   */
  company: ICompany | null;

  /**
   * The timestamp the user was created
   */
  createdAt: any | null;

  /**
   * The user email
   */
  email: any;

  /**
   * Any super power given to the user via a super user
   */
  featureFlags: IUserFeatureFlags;

  /**
   * An array of objects with information about the user's identities.
   *       More than one will exists in case accounts are linked
   */
  identities: Array<AuthIdentity | null> | null;

  /**
   * true if the user is not currently being billed for service. removed on every websocket handshake
   */
  inactive: boolean | null;
  invoiceDetails: IInvoice | null;
  invoices: IInvoiceConnection | null;

  /**
   * true if the user is a billing leader on any organization, else false
   */
  isAnyBillingLeader: boolean;

  /**
   * true if the user is currently online
   */
  isConnected: boolean | null;

  /**
   * true if the user is the first to sign up from their domain, else false
   */
  isPatientZero: boolean;

  /**
   * the reason the user account was removed
   */
  reasonRemoved: string | null;

  /**
   * true if the user was removed from parabol, else false
   */
  isRemoved: boolean;

  /**
   * true if all user sessions are being recorded in LogRocket, else false
   */
  isWatched: boolean;

  /**
   * the endedAt timestamp of the most recent meeting they were a member of
   */
  lastMetAt: any | null;

  /**
   * The number of meetings the user has attended
   */
  meetingCount: number;

  /**
   * The largest number of consecutive months the user has checked into a meeting
   */
  monthlyStreakMax: number;

  /**
   * The number of consecutive 30-day intervals that the user has checked into a meeting as of this moment
   */
  monthlyStreakCurrent: number;

  /**
   * the most important actions for the user to perform
   */
  suggestedActions: Array<SuggestedAction>;

  /**
   * the number of times the user clicked pay later
   */
  payLaterClickCount: number;

  /**
   * The timeline of important events for the viewer
   */
  timeline: ITimelineEventConnection;

  /**
   * the comments and tasks created from the discussion
   */
  discussion: IDiscussion | null;

  /**
   * the ID of the newest feature, null if the user has dismissed it
   */
  newFeatureId: string | null;

  /**
   * The new feature released by Parabol. null if the user already hid it
   */
  newFeature: INewFeatureBroadcast | null;

  /**
   * url of user’s profile picture
   */
  picture: any;

  /**
   * The application-specific name, defaults to email before the tld
   */
  preferredName: string;

  /**
   * url of user’s raster profile picture (if user profile pic is an SVG, raster will be a PNG)
   */
  rasterPicture: any;

  /**
   * The last day the user connected via websocket or navigated to a common area
   */
  lastSeenAt: any;

  /**
   * The paths that the user is currently visiting. This is null if the user is not currently online. A URL can also be null if the socket is not in a meeting, e.g. on the timeline.
   */
  lastSeenAtURLs: Array<string | null> | null;

  /**
   * The meeting member associated with this user, if a meeting is currently in progress
   */
  meetingMember: MeetingMember | null;

  /**
   * A previous meeting that the user was in (present or absent)
   */
  meeting: NewMeeting | null;

  /**
   * A previous meeting that the user was in (present or absent)
   */
  newMeeting: NewMeeting | null;

  /**
   * all the notifications for a single user
   */
  notifications: INotificationConnection;

  /**
   * get a single organization and the count of users by status
   */
  organization: IOrganization | null;

  /**
   * The connection between a user and an organization
   */
  organizationUser: IOrganizationUser | null;

  /**
   * A single user that is connected to a single organization
   */
  organizationUsers: Array<IOrganizationUser>;

  /**
   * Get the list of all organizations a user belongs to
   */
  organizations: Array<IOrganization>;

  /**
   * a string with message stating that the user is over the free tier limit, else null
   */
  overLimitCopy: string | null;

  /**
   * The reflection groups that are similar to the selected reflection in the Spotlight
   */
  similarReflectionGroups: Array<IRetroReflectionGroup>;
  tasks: ITaskConnection;

  /**
   * A query for a team
   */
  team: ITeam | null;

  /**
   * The invitation sent to the user, even if it was sent before they were a user
   */
  teamInvitation: ITeamInvitationPayload;

  /**
   * all the teams the user is on that the viewer can see.
   */
  teams: Array<ITeam>;

  /**
   * The team member associated with this user
   */
  teamMember: ITeamMember | null;

  /**
   * The highest tier of any org the user belongs to
   */
  tier: TierEnum;

  /**
   * all the teams the user is a part of that the viewer can see
   */
  tms: Array<string>;

  /**
   * The timestamp the user was last updated
   */
  updatedAt: any | null;
  userOnTeam: IUser | null;
}

export interface IArchivedTasksOnUserArguments {
  first: number;

  /**
   * the datetime cursor
   */
  after?: any | null;

  /**
   * The unique team ID
   */
  teamId: string;
}

export interface IArchivedTasksCountOnUserArguments {
  /**
   * The unique team ID
   */
  teamId: string;
}

export interface IInvoiceDetailsOnUserArguments {
  /**
   * The id of the invoice
   */
  invoiceId: string;
}

export interface IInvoicesOnUserArguments {
  first: number;

  /**
   * the datetime cursor
   */
  after?: any | null;

  /**
   * The id of the organization
   */
  orgId: string;
}

export interface ITimelineOnUserArguments {
  /**
   * the datetime cursor
   */
  after?: any | null;

  /**
   * the number of timeline events to return
   */
  first: number;
}

export interface IDiscussionOnUserArguments {
  /**
   * The ID of the discussion
   */
  id: string;
}

export interface IMeetingMemberOnUserArguments {
  /**
   * The specific meeting ID
   */
  meetingId: string;
}

export interface IMeetingOnUserArguments {
  /**
   * The meeting ID
   */
  meetingId: string;
}

export interface INewMeetingOnUserArguments {
  /**
   * The meeting ID
   */
  meetingId: string;
}

export interface INotificationsOnUserArguments {
  first: number;
  after?: any | null;
}

export interface IOrganizationOnUserArguments {
  /**
   * the orgId
   */
  orgId: string;
}

export interface IOrganizationUserOnUserArguments {
  /**
   * the orgId
   */
  orgId: string;
}

export interface ISimilarReflectionGroupsOnUserArguments {
  /**
   * The id of the selected reflection group in the Spotlight
   */
  reflectionGroupId: string;

  /**
   * Only return reflection groups that match the search query
   */
  searchQuery: string;
}

export interface ITasksOnUserArguments {
  /**
   * the number of tasks to return
   */
  first: number;

  /**
   * the datetime cursor
   */
  after?: any | null;

  /**
   * a list of user Ids that you want tasks for. if null, will return tasks for all possible team members. An id is null if it is not assigned to anyone.
   */
  userIds?: Array<string | null> | null;

  /**
   * a list of team Ids that you want tasks for. if null, will return tasks for all possible active teams
   */
  teamIds?: Array<string> | null;

  /**
   * true to only return archived tasks; false to return active tasks
   * @default false
   */
  archived?: boolean | null;

  /**
   * filter tasks by the chosen statuses
   */
  statusFilters?: Array<TaskStatusEnum> | null;

  /**
   * only return tasks which match the given filter query
   */
  filterQuery?: string | null;

  /**
   * if true, include unassigned tasks. If false, only return assigned tasks
   * @default false
   */
  includeUnassigned?: boolean | null;
}

export interface ITeamOnUserArguments {
  /**
   * The team ID for the desired team
   */
  teamId: string;
}

export interface ITeamInvitationOnUserArguments {
  /**
   * The meetingId to check for the invitation, if teamId not available (e.g. on a meeting route)
   */
  meetingId?: string | null;

  /**
   * The teamId to check for the invitation
   */
  teamId?: string | null;
}

export interface ITeamMemberOnUserArguments {
  /**
   * The team the user is on
   */
  teamId: string;

  /**
   * If null, defaults to the team member for this user. Else, will grab the team member. Returns null if not on team.
   */
  userId?: string | null;
}

export interface IUserOnTeamOnUserArguments {
  /**
   * The other user
   */
  userId: string;
}

/**
 * A connection to a list of items.
 */
export interface ITaskConnection {
  __typename: 'TaskConnection';

  /**
   * Page info with cursors coerced to ISO8601 dates
   */
  pageInfo: IPageInfoDateCursor | null;

  /**
   * A list of edges.
   */
  edges: Array<ITaskEdge>;
}

/**
 * Information about pagination in a connection.
 */
export interface IPageInfoDateCursor {
  __typename: 'PageInfoDateCursor';

  /**
   * When paginating forwards, are there more items?
   */
  hasNextPage: boolean;

  /**
   * When paginating backwards, are there more items?
   */
  hasPreviousPage: boolean;

  /**
   * When paginating backwards, the cursor to continue.
   */
  startCursor: any | null;

  /**
   * When paginating forwards, the cursor to continue.
   */
  endCursor: any | null;
}

/**
 * An edge in a connection.
 */
export interface ITaskEdge {
  __typename: 'TaskEdge';

  /**
   * The item at the end of the edge
   */
  node: ITask;
  cursor: any | null;
}

/**
 * A long-term task shared across the team, assigned to a single user
 */
export interface ITask {
  __typename: 'Task';

  /**
   * shortid
   */
  id: string;

  /**
   * The rich text body of the item
   */
  content: string;

  /**
   * The timestamp the item was created
   */
  createdAt: any;

  /**
   * The userId that created the item
   */
  createdBy: string;

  /**
   * The user that created the item
   */
  createdByUser: IUser;

  /**
   * the replies to this threadable item
   */
  replies: Array<Threadable>;

  /**
   * The FK of the discussion this task was created in. Null if task was not created in a discussion
   */
  discussionId: string | null;

  /**
   * the parent, if this threadable is a reply, else null
   */
  threadParentId: string | null;

  /**
   * the order of this threadable, relative to threadParentId
   */
  threadSortOrder: number | null;

  /**
   * The timestamp the item was updated
   */
  updatedAt: any;

  /**
   * The agenda item that the task was created in, if any
   */
  agendaItem: IAgendaItem | null;

  /**
   * a user-defined due date
   */
  dueDate: any | null;

  /**
   * A list of the most recent estimates for the task
   */
  estimates: Array<ITaskEstimate>;

  /**
   * a list of users currently editing the task (fed by a subscription, so queries return null)
   */
  editors: Array<ITaskEditorDetails>;

  /**
   * The reference to the single source of truth for this task
   */
  integration: TaskIntegration | null;

  /**
   * A hash of the integrated task
   */
  integrationHash: string | null;

  /**
   * the foreign key for the meeting the task was created in
   */
  meetingId: string | null;

  /**
   * the foreign key for the meeting the task was marked as complete
   */
  doneMeetingId: string | null;

  /**
   * the plain text content of the task
   */
  plaintextContent: string;

  /**
   * the shared sort order for tasks on the team dash & user dash
   */
  sortOrder: number;

  /**
   * The status of the task
   */
  status: TaskStatusEnum;

  /**
   * The tags associated with the task
   */
  tags: Array<string>;

  /**
   * The id of the team (indexed). Needed for subscribing to archived tasks
   */
  teamId: string;

  /**
   * The team this task belongs to
   */
  team: ITeam;

  /**
   * The first block of the content
   */
  title: string;

  /**
   * * The userId, index useful for server-side methods getting all tasks under a user. This can be null if the task is not assigned to anyone.
   */
  userId: string | null;

  /**
   * The user the task is assigned to. Null if it is not assigned to anyone.
   */
  user: IUser | null;

  /**
   * The owner hovers over the task in their solo update of a checkin
   */
  isHighlighted: boolean;
}

export interface IIsHighlightedOnTaskArguments {
  /**
   * Meeting for which the highlight is checked
   */
  meetingId?: string | null;
}

/**
 * An item that can be put in a thread
 */
export type Threadable = ITask | IComment | IPoll;

/**
 * An item that can be put in a thread
 */
export interface IThreadable {
  __typename: 'Threadable';

  /**
   * shortid
   */
  id: string;

  /**
   * The rich text body of the item
   */
  content: string;

  /**
   * The timestamp the item was created
   */
  createdAt: any;

  /**
   * The userId that created the item
   */
  createdBy: string | null;

  /**
   * The user that created the item
   */
  createdByUser: IUser | null;

  /**
   * the replies to this threadable item
   */
  replies: Array<Threadable>;

  /**
   * The FK of the discussion this task was created in. Null if task was not created in a discussion
   */
  discussionId: string | null;

  /**
   * the parent, if this threadable is a reply, else null
   */
  threadParentId: string | null;

  /**
   * the order of this threadable, relative to threadParentId
   */
  threadSortOrder: number | null;

  /**
   * The timestamp the item was updated
   */
  updatedAt: any;
}

/**
 * A request placeholder that will likely turn into 1 or more tasks
 */
export interface IAgendaItem {
  __typename: 'AgendaItem';

  /**
   * The unique agenda item id teamId::shortid
   */
  id: string;

  /**
   * A list of users currently commenting
   * @deprecated "Moved to ThreadConnection. Can remove Jun-01-2021"
   */
  commentors: Array<ICommentorDetails> | null;

  /**
   * The body of the agenda item
   */
  content: string;

  /**
   * The timestamp the agenda item was created
   */
  createdAt: any | null;

  /**
   * true if the agenda item has not been processed or deleted
   */
  isActive: boolean;

  /**
   * True if the agenda item has been pinned
   */
  pinned: boolean | null;

  /**
   * If pinned, this is the unique id of the original agenda item
   */
  pinnedParentId: string | null;

  /**
   * The sort order of the agenda item in the list
   */
  sortOrder: number;

  /**
   * *The team for this agenda item
   */
  teamId: string;

  /**
   * The teamMemberId that created this agenda item
   */
  teamMemberId: string;

  /**
   * The meetingId of the agenda item
   */
  meetingId: string | null;

  /**
   * The timestamp the agenda item was updated
   */
  updatedAt: any | null;

  /**
   * The team member that created the agenda item
   */
  teamMember: ITeamMember;
}

/**
 * The user that is commenting
 */
export interface ICommentorDetails {
  __typename: 'CommentorDetails';

  /**
   * The userId of the person commenting
   */
  id: string;

  /**
   * The preferred name of the user commenting
   */
  preferredName: string;
}

/**
 * A member of a team
 */
export interface ITeamMember {
  __typename: 'TeamMember';

  /**
   * An ID for the teamMember. userId::teamId
   */
  id: string;

  /**
   * All the integrations that the user could possibly use
   */
  allAvailableRepoIntegrations: Array<RepoIntegration>;

  /**
   * The datetime the team member was created
   */
  createdAt: any;

  /**
   * true if the user is a part of the team, false if they no longer are
   */
  isNotRemoved: boolean | null;

  /**
   * Is user a team lead?
   */
  isLead: boolean;

  /**
   * true if the user prefers to not vote during a poker meeting
   */
  isSpectatingPoker: boolean;

  /**
   * the type of drawer that is open in the team dash. Null if the drawer is closed
   */
  openDrawer: TeamDrawer | null;

  /**
   * The user email
   */
  email: any;

  /**
   * url of user’s profile picture
   */
  picture: any;

  /**
   * true if this team member belongs to the user that queried it
   */
  isSelf: boolean;

  /**
   * The integrations that the team member has authorized. accessible by all
   */
  integrations: ITeamMemberIntegrations;

  /**
   * The meeting specifics for the meeting the team member is currently in
   */
  meetingMember: MeetingMember | null;

  /**
   * The name of the assignee
   */
  preferredName: string;

  /**
   * The integrations that the user would probably like to use
   */
  repoIntegrations: IRepoIntegrationQueryPayload;

  /**
   * Tasks owned by the team member
   */
  tasks: ITaskConnection | null;

  /**
   * The team this team member belongs to
   */
  team: ITeam | null;

  /**
   * foreign key to Team table
   */
  teamId: string;

  /**
   * The user for the team member
   */
  user: IUser;

  /**
   * foreign key to User table
   */
  userId: string;
}

export interface IMeetingMemberOnTeamMemberArguments {
  meetingId: string;
}

export interface ITasksOnTeamMemberArguments {
  first?: number | null;

  /**
   * the datetime cursor
   */
  after?: any | null;
}

/**
 * The suggested repos and projects a user can integrate with
 */
export type RepoIntegration = IXGitHubRepository | IJiraRemoteProject;

/**
 * The suggested repos and projects a user can integrate with
 */
export interface IRepoIntegration {
  __typename: 'RepoIntegration';
  id: string;
}

/**
 * The right drawer types available on the team dashboard
 */
export const enum TeamDrawer {
  agenda = 'agenda',
  manageTeam = 'manageTeam',
}

/**
 * All the available integrations available for this team member
 */
export interface ITeamMemberIntegrations {
  __typename: 'TeamMemberIntegrations';

  /**
   * composite
   */
  id: string;

  /**
   * All things associated with an Atlassian integration for a team member
   */
  atlassian: IAtlassianIntegration | null;

  /**
   * All things associated with a Jira Server integration for a team member
   */
  jiraServer: IJiraServerIntegration | null;

  /**
   * All things associated with a GitHub integration for a team member
   */
  github: IGitHubIntegration | null;

  /**
   * All things associated with a GitLab integration for a team member
   */
  gitlab: IGitLabIntegration;

  /**
   * All things associated with a Mattermost integration for a team member
   */
  mattermost: IMattermostIntegration;

  /**
   * All things associated with a slack integration for a team member
   */
  slack: ISlackIntegration | null;
}

/**
 * The atlassian auth + integration helpers for a specific team member
 */
export interface IAtlassianIntegration {
  __typename: 'AtlassianIntegration';

  /**
   * Composite key in atlassiani:teamId:userId format
   */
  id: string;

  /**
   * true if the auth is valid, else false
   */
  isActive: boolean;

  /**
   * The access token to atlassian, useful for 1 hour. null if no access token available or the viewer is not the user
   */
  accessToken: string | null;

  /**
   * *The atlassian account ID
   */
  accountId: string;

  /**
   * The atlassian cloud IDs that the user has granted
   */
  cloudIds: Array<string>;

  /**
   * The timestamp the provider was created
   */
  createdAt: any;

  /**
   * *The team that the token is linked to
   */
  teamId: string;

  /**
   * The timestamp the token was updated at
   */
  updatedAt: any;

  /**
   * The user that the access token is attached to
   */
  userId: string;

  /**
   * A list of issues coming straight from the jira integration for a specific team member
   */
  issues: IJiraIssueConnection;

  /**
   * A list of projects accessible by this team member. empty if viewer is not the user
   */
  projects: Array<IJiraRemoteProject>;

  /**
   * The list of field names that can be used as a
   */
  jiraFields: Array<string>;

  /**
   * the list of suggested search queries, sorted by most recent. Guaranteed to be < 60 days old
   */
  jiraSearchQueries: Array<IJiraSearchQuery>;
}

export interface IIssuesOnAtlassianIntegrationArguments {
  /**
   * @default 100
   */
  first?: number | null;

  /**
   * the datetime cursor
   */
  after?: any | null;

  /**
   * A string of text to search for, or JQL if isJQL is true
   */
  queryString?: string | null;

  /**
   * true if the queryString is JQL, else false
   */
  isJQL: boolean;
  projectKeyFilters?: Array<string> | null;
}

export interface IJiraFieldsOnAtlassianIntegrationArguments {
  /**
   * Filter the fields to single cloudId
   */
  cloudId: string;
}

/**
 * A connection to a list of items.
 */
export interface IJiraIssueConnection {
  __typename: 'JiraIssueConnection';

  /**
   * Page info with cursors coerced to ISO8601 dates
   */
  pageInfo: IPageInfoDateCursor | null;

  /**
   * A list of edges.
   */
  edges: Array<IJiraIssueEdge>;

  /**
   * An error with the connection, if any
   */
  error: IStandardMutationError | null;
}

/**
 * An edge in a connection.
 */
export interface IJiraIssueEdge {
  __typename: 'JiraIssueEdge';

  /**
   * The item at the end of the edge
   */
  node: IJiraIssue;
  cursor: any | null;
}

/**
 * The Jira Issue that comes direct from Jira
 */
export interface IJiraIssue {
  __typename: 'JiraIssue';

  /**
   * GUID cloudId:issueKey
   */
  id: string;

  /**
   * The parabol teamId this issue was fetched for
   */
  teamId: string;

  /**
   * The parabol userId this issue was fetched for
   */
  userId: string;

  /**
   * The ID of the jira cloud where the issue lives
   */
  cloudId: string;

  /**
   * The name of the jira cloud where the issue lives
   */
  cloudName: string;

  /**
   * The url to access the issue
   */
  url: any;

  /**
   * The key of the issue as found in Jira
   */
  issueKey: string;

  /**
   * The key of the project, which is the prefix to the issueKey
   */
  projectKey: string;

  /**
   * The project fetched from jira
   */
  project: IJiraRemoteProject | null;

  /**
   * The plaintext summary of the jira issue
   */
  summary: string;

  /**
   * Field names that exists on the issue and can be used as estimation fields
   */
  possibleEstimationFieldNames: Array<string>;

  /**
   * The stringified ADF of the jira issue description
   */
  description: string;

  /**
   * The description converted into raw HTML
   */
  descriptionHTML: string;
}

export type TaskIntegration = IXGitHubIssue | IJiraIssue;

export interface ITaskIntegration {
  __typename: 'TaskIntegration';
  id: string;
}

/**
 * A project fetched from Jira in real time
 */
export interface IJiraRemoteProject {
  __typename: 'JiraRemoteProject';
  id: string;

  /**
   * The parabol teamId this issue was fetched for
   */
  teamId: string;

  /**
   * The parabol userId this issue was fetched for
   */
  userId: string;
  self: string;

  /**
   * The cloud ID that the project lives on. Does not exist on the Jira object!
   */
  cloudId: string;
  key: string;
  name: string;
  avatar: string;
  avatarUrls: IJiraRemoteAvatarUrls;
  projectCategory: IJiraRemoteProjectCategory;
  simplified: boolean;
  style: string;
}

/**
 * The URLs for avatars. NOTE: If they are custom, an Authorization header is required!
 */
export interface IJiraRemoteAvatarUrls {
  __typename: 'JiraRemoteAvatarUrls';
  x48: string;
  x24: string;
  x16: string;
  x32: string;
}

/**
 * A project category fetched from a JiraRemoteProject
 */
export interface IJiraRemoteProjectCategory {
  __typename: 'JiraRemoteProjectCategory';
  self: string;
  id: string;
  name: string;
  description: string;
}

export interface IStandardMutationError {
  __typename: 'StandardMutationError';

  /**
   * The title of the error
   */
  title: string | null;

  /**
   * The full error
   */
  message: string;
}

/**
 * A jira search query including all filters selected when the query was executed
 */
export interface IJiraSearchQuery {
  __typename: 'JiraSearchQuery';

  /**
   * shortid
   */
  id: string;

  /**
   * The query string, either simple or JQL depending on the isJQL flag
   */
  queryString: string;

  /**
   * true if the queryString is JQL, else false
   */
  isJQL: boolean;

  /**
   * The list of project keys selected as a filter. null if not set
   */
  projectKeyFilters: Array<string>;

  /**
   * the time the search query was last used. Used for sorting
   */
  lastUsedAt: any;
}

/**
 * Jira Server integration data for a given team member
 */
export interface IJiraServerIntegration {
  __typename: 'JiraServerIntegration';

  /**
   * The OAuth1 Authorization for this team member
   */
  auth: ITeamMemberIntegrationAuthOAuth1 | null;

  /**
   * The non-global providers shared with the team or organization
   */
  sharedProviders: Array<IIntegrationProviderOAuth1>;
}

/**
 * An integration token that connects via OAuth1
 */
export interface ITeamMemberIntegrationAuthOAuth1 {
  __typename: 'TeamMemberIntegrationAuthOAuth1';

  /**
   * The token's unique identifier
   */
  id: string;

  /**
   * The team that the token is linked to
   */
  teamId: string;

  /**
   * The timestamp the token was created
   */
  createdAt: any;

  /**
   * The timestamp the token was updated at
   */
  updatedAt: any;

  /**
   * The GQL GUID of the DB providerId foreign key
   */
  providerId: string;

  /**
   * The service this token is associated with, denormalized from the provider
   */
  service: IntegrationProviderServiceEnum;

  /**
   * true if the token configuration should be used
   */
  isActive: boolean;

  /**
   * The provider strategy this token connects to
   */
  provider: IIntegrationProviderOAuth1;
}

/**
 * The auth credentials for a token, specific to a team member
 */
export type TeamMemberIntegrationAuth =
  | ITeamMemberIntegrationAuthOAuth1
  | ITeamMemberIntegrationAuthOAuth2
  | ITeamMemberIntegrationAuthWebhook;

/**
 * The auth credentials for a token, specific to a team member
 */
export interface ITeamMemberIntegrationAuth {
  __typename: 'TeamMemberIntegrationAuth';

  /**
   * The token's unique identifier
   */
  id: string;

  /**
   * The team that the token is linked to
   */
  teamId: string;

  /**
   * The timestamp the token was created
   */
  createdAt: any;

  /**
   * The timestamp the token was updated at
   */
  updatedAt: any;

  /**
   * The GQL GUID of the DB providerId foreign key
   */
  providerId: string;

  /**
   * The service this token is associated with, denormalized from the provider
   */
  service: IntegrationProviderServiceEnum;

  /**
   * true if the token configuration should be used
   */
  isActive: boolean;

  /**
   * The provider to connect to
   */
  provider: IntegrationProvider;
}

/**
 * OAuth token for a team member
 */
export interface IGitHubIntegration {
  __typename: 'GitHubIntegration';

  /**
   * composite key
   */
  id: string;

  /**
   * The access token to github. good forever
   */
  accessToken: string | null;

  /**
   * The timestamp the provider was created
   */
  createdAt: any;

  /**
   * true if an access token exists, else false
   */
  isActive: boolean;

  /**
   * the list of suggested search queries, sorted by most recent. Guaranteed to be < 60 days old
   */
  githubSearchQueries: Array<IGitHubSearchQuery>;

  /**
   * *The GitHub login used for queries
   */
  login: string;

  /**
   * The comma-separated list of scopes requested from GitHub
   */
  scope: string;

  /**
   * *The team that the token is linked to
   */
  teamId: string;

  /**
   * The timestamp the token was updated at
   */
  updatedAt: any;

  /**
   * The user that the access token is attached to
   */
  userId: string;
  api: IXGitHubApi | null;
}

/**
 * A GitHub search query including all filters selected when the query was executed
 */
export interface IGitHubSearchQuery {
  __typename: 'GitHubSearchQuery';

  /**
   * shortid
   */
  id: string;

  /**
   * The query string in GitHub format, including repository filters. e.g. is:issue is:open
   */
  queryString: string;

  /**
   * the time the search query was last used. Used for sorting
   */
  lastUsedAt: any;
}

/**
 * Gitlab integration data for a given team member
 */
export interface IGitLabIntegration {
  __typename: 'GitLabIntegration';

  /**
   * The OAuth2 Authorization for this team member
   */
  auth: ITeamMemberIntegrationAuthOAuth2 | null;

  /**
   * The cloud provider the team member may choose to integrate with. Nullable based on env vars
   */
  cloudProvider: IIntegrationProviderOAuth2 | null;

  /**
   * The non-global providers shared with the team or organization
   */
  sharedProviders: Array<IIntegrationProviderOAuth2>;
  api: IXGitLabApi | null;
}

/**
 * An integration token that connects via OAuth2
 */
export interface ITeamMemberIntegrationAuthOAuth2 {
  __typename: 'TeamMemberIntegrationAuthOAuth2';

  /**
   * The token's unique identifier
   */
  id: string;

  /**
   * The team that the token is linked to
   */
  teamId: string;

  /**
   * The timestamp the token was created
   */
  createdAt: any;

  /**
   * The timestamp the token was updated at
   */
  updatedAt: any;

  /**
   * The GQL GUID of the DB providerId foreign key
   */
  providerId: string;

  /**
   * The service this token is associated with, denormalized from the provider
   */
  service: IntegrationProviderServiceEnum;

  /**
   * true if the token configuration should be used
   */
  isActive: boolean;

  /**
   * The provider strategy this token connects to
   */
  provider: IIntegrationProviderOAuth2;

  /**
   * The token used to connect to the provider
   */
  accessToken: string;

  /**
   * The scopes allowed on the provider
   */
  scopes: string;
}

/**
 * Integration Auth and shared providers available to the team member
 */
export interface IMattermostIntegration {
  __typename: 'MattermostIntegration';

  /**
   * The OAuth2 Authorization for this team member
   */
  auth: ITeamMemberIntegrationAuthWebhook | null;

  /**
   * The non-global providers shared with the team or organization
   */
  sharedProviders: Array<IIntegrationProviderWebhook>;
}

/**
 * An integration authorization that connects via Webhook auth strategy
 */
export interface ITeamMemberIntegrationAuthWebhook {
  __typename: 'TeamMemberIntegrationAuthWebhook';

  /**
   * The token's unique identifier
   */
  id: string;

  /**
   * The team that the token is linked to
   */
  teamId: string;

  /**
   * The timestamp the token was created
   */
  createdAt: any;

  /**
   * The timestamp the token was updated at
   */
  updatedAt: any;

  /**
   * The GQL GUID of the DB providerId foreign key
   */
  providerId: string;

  /**
   * The service this token is associated with, denormalized from the provider
   */
  service: IntegrationProviderServiceEnum;

  /**
   * true if the token configuration should be used
   */
  isActive: boolean;

  /**
   * The provider strategy this token connects to
   */
  provider: IIntegrationProviderWebhook;
}

/**
 * OAuth token for a team member
 */
export interface ISlackIntegration {
  __typename: 'SlackIntegration';

  /**
   * shortid
   */
  id: string;

  /**
   * true if the auth is updated & ready to use for all features, else false
   */
  isActive: boolean;

  /**
   * the parabol bot user id
   */
  botUserId: string | null;

  /**
   * the parabol bot access token, used as primary communication
   */
  botAccessToken: string | null;

  /**
   * The timestamp the provider was created
   */
  createdAt: any;

  /**
   * The default channel to assign to new team notifications
   */
  defaultTeamChannelId: string;

  /**
   * The id of the team in slack
   */
  slackTeamId: string | null;

  /**
   * The name of the team in slack
   */
  slackTeamName: string | null;

  /**
   * The userId in slack
   */
  slackUserId: string;

  /**
   * The name of the user in slack
   */
  slackUserName: string;

  /**
   * *The team that the token is linked to
   */
  teamId: string;

  /**
   * The timestamp the token was updated at
   */
  updatedAt: any;

  /**
   * The id of the user that integrated Slack
   */
  userId: string;

  /**
   * A list of events and the slack channels they get posted to
   */
  notifications: Array<ISlackNotification>;
}

/**
 * an event trigger and slack channel to receive it
 */
export interface ISlackNotification {
  __typename: 'SlackNotification';
  id: string;
  event: SlackNotificationEventEnum;
  eventType: SlackNotificationEventTypeEnum;

  /**
   * null if no notification is to be sent
   */
  channelId: string | null;
  teamId: string;
  userId: string;
}

/**
 * The event that triggers a slack notification
 */
export const enum SlackNotificationEventEnum {
  meetingStart = 'meetingStart',
  meetingEnd = 'meetingEnd',
  MEETING_STAGE_TIME_LIMIT_END = 'MEETING_STAGE_TIME_LIMIT_END',
  MEETING_STAGE_TIME_LIMIT_START = 'MEETING_STAGE_TIME_LIMIT_START',
}

/**
 * The type of event for a slack notification
 */
export const enum SlackNotificationEventTypeEnum {
  /**
   * notification that concerns the whole team
   */
  team = 'team',

  /**
   * notification that concerns a single member on the team
   */
  member = 'member',
}

/**
 * All the user details for a specific meeting
 */
export type MeetingMember =
  | IActionMeetingMember
  | IRetrospectiveMeetingMember
  | IPokerMeetingMember;

/**
 * All the user details for a specific meeting
 */
export interface IMeetingMember {
  __typename: 'MeetingMember';

  /**
   * A composite of userId::meetingId
   */
  id: string;

  /**
   * true if present, false if absent, else null
   * @deprecated "Members are checked in when they enter the meeting now & not created beforehand"
   */
  isCheckedIn: boolean | null;
  meetingId: string;
  meetingType: MeetingTypeEnum;
  teamId: string;
  teamMember: ITeamMember;
  user: IUser;
  userId: string;

  /**
   * The last time a meeting was updated (stage completed, finished, etc)
   */
  updatedAt: any;
}

/**
 * The type of meeting
 */
export const enum MeetingTypeEnum {
  action = 'action',
  retrospective = 'retrospective',
  poker = 'poker',
}

/**
 * The details associated with the possible repo and project integrations
 */
export interface IRepoIntegrationQueryPayload {
  __typename: 'RepoIntegrationQueryPayload';
  error: IStandardMutationError | null;

  /**
   * true if the items returned are a subset of all the possible integration, else false (all possible integrations)
   */
  hasMore: boolean;

  /**
   * All the integrations that are likely to be integrated
   */
  items: Array<RepoIntegration> | null;
}

/**
 * A team
 */
export interface ITeam {
  __typename: 'Team';

  /**
   * A shortid for the team
   */
  id: string;

  /**
   * The datetime the team was created
   */
  createdAt: any;

  /**
   * The userId that created the team. Non-null at v2.22.0+
   */
  createdBy: string | null;

  /**
   * true if the team was created when the account was created, else false
   */
  isOnboardTeam: boolean;

  /**
   * The type of the last meeting run
   */
  lastMeetingType: MeetingTypeEnum;

  /**
   * The HTML message to show if isPaid is false
   */
  lockMessageHTML: string | null;

  /**
   * The hash and expiration for a token that allows anyone with it to join the team
   */
  massInvitation: IMassInvitation;

  /**
   * Integration details that are shared by all team members. Nothing user specific
   */
  integrations: ITeamIntegrations;

  /**
   * true if the underlying org has a validUntil date greater than now. if false, subs do not work
   */
  isPaid: boolean | null;

  /**
   * The name of the team
   */
  name: string;

  /**
   * The organization to which the team belongs
   */
  orgId: string;

  /**
   * Arbitrary tags that the team uses
   */
  tags: Array<string | null> | null;

  /**
   * The datetime the team was last updated
   */
  updatedAt: any | null;

  /**
   * @deprecated "Field no longer needs to exist for now"
   */
  customPhaseItems: Array<IReflectPrompt | null> | null;

  /**
   * The outstanding invitations to join the team
   */
  teamInvitations: Array<ITeamInvitation>;

  /**
   * true if the viewer is the team lead, else false
   */
  isLead: boolean;

  /**
   * The team-specific settings for running all available types of meetings
   */
  meetingSettings: TeamMeetingSettings;

  /**
   * A query for the scale
   */
  scale: ITemplateScale | null;

  /**
   * The list of scales this team can use
   */
  scales: Array<ITemplateScale>;

  /**
   * a list of meetings that are currently in progress
   */
  activeMeetings: Array<NewMeeting>;

  /**
   * The new meeting in progress, if any
   */
  meeting: NewMeeting | null;

  /**
   * The level of access to features on the parabol site
   */
  tier: TierEnum;
  organization: IOrganization;

  /**
   * The agenda items for the upcoming or current meeting
   */
  agendaItems: Array<IAgendaItem>;

  /**
   * All of the tasks for this team
   */
  tasks: ITaskConnection;

  /**
   * All the team members actively associated with the team
   */
  teamMembers: Array<ITeamMember>;

  /**
   * true if the team has been archived
   */
  isArchived: boolean | null;
}

export interface IMassInvitationOnTeamArguments {
  /**
   * the meetingId to optionally direct them to
   */
  meetingId?: string | null;
}

export interface IMeetingSettingsOnTeamArguments {
  /**
   * the type of meeting for the settings
   */
  meetingType: MeetingTypeEnum;
}

export interface IScaleOnTeamArguments {
  /**
   * The scale ID for the desired scale
   */
  scaleId: string;
}

export interface IMeetingOnTeamArguments {
  /**
   * The unique meetingId
   */
  meetingId: string;
}

export interface ITasksOnTeamArguments {
  first?: number | null;

  /**
   * the datetime cursor
   */
  after?: any | null;
}

export interface ITeamMembersOnTeamArguments {
  /**
   * the field to sort the teamMembers by
   */
  sortBy?: string | null;
}

/**
 * An invitation and expiration
 */
export interface IMassInvitation {
  __typename: 'MassInvitation';

  /**
   * the invitation token
   */
  id: string;

  /**
   * the expiration for the token
   */
  expiration: any;
  meetingId: string | null;
}

/**
 * All the available integrations available for this team member
 */
export interface ITeamIntegrations {
  __typename: 'TeamIntegrations';

  /**
   * composite
   */
  id: string;

  /**
   * All things associated with an atlassian integration for a team member
   */
  atlassian: IAtlassianTeamIntegration;
}

/**
 * The atlassian integration details shared across an entire team
 */
export interface IAtlassianTeamIntegration {
  __typename: 'AtlassianTeamIntegration';

  /**
   * shortid
   */
  id: string;

  /**
   * The dimensions and their corresponding Jira fields
   */
  jiraDimensionFields: Array<IJiraDimensionField>;
}

/**
 * Poker dimensions mapped to their corresponding fields in jira
 */
export interface IJiraDimensionField {
  __typename: 'JiraDimensionField';
  id: string;

  /**
   * The atlassian cloud that the field lives in
   */
  cloudId: string;

  /**
   * The name of the associated dimension
   */
  dimensionName: string;

  /**
   * The project under the atlassian cloud the field lives in
   */
  projectKey: string;

  /**
   * The ID referring to the field name
   */
  fieldId: string;

  /**
   * The field name in jira that the estimate is pushed to
   */
  fieldName: string;

  /**
   * the type of field, e.g. number, string, any
   */
  fieldType: string;
}

/**
 * A team-specific reflection prompt. Usually 3 or 4 exist per team, eg Good/Bad/Change, 4Ls, etc.
 */
export interface IReflectPrompt {
  __typename: 'ReflectPrompt';

  /**
   * shortid
   */
  id: string;
  createdAt: any;

  /**
   * foreign key. use the team field
   */
  teamId: string;

  /**
   * The team that owns this reflectPrompt
   */
  team: ITeam | null;
  updatedAt: any;

  /**
   * the order of the items in the template
   */
  sortOrder: number;

  /**
   * FK for template
   */
  templateId: string;

  /**
   * The template that this prompt belongs to
   */
  template: IReflectTemplate;

  /**
   * The question to answer during the phase of the retrospective (eg What went well?)
   */
  question: string;

  /**
   * The description to the question for further context. A long version of the question.
   */
  description: string;

  /**
   * The color used to visually group a phase item.
   */
  groupColor: string;

  /**
   * The datetime that the prompt was removed. Null if it has not been removed.
   */
  removedAt: any | null;
}

/**
 * The team-specific templates for the reflection prompts
 */
export interface IReflectTemplate {
  __typename: 'ReflectTemplate';

  /**
   * shortid
   */
  id: string;
  createdAt: any;

  /**
   * True if template can be used, else false
   */
  isActive: boolean;

  /**
   * The time of the meeting the template was last used
   */
  lastUsedAt: any | null;

  /**
   * The name of the template
   */
  name: string;

  /**
   * *Foreign key. The organization that owns the team that created the template
   */
  orgId: string;

  /**
   * Who can see this template
   */
  scope: SharingScopeEnum;

  /**
   * *Foreign key. The team this template belongs to
   */
  teamId: string;

  /**
   * The team this template belongs to
   */
  team: ITeam;

  /**
   * The type of the template
   */
  type: string;
  updatedAt: any;

  /**
   * The prompts that are part of this template
   */
  prompts: Array<IReflectPrompt>;
}

/**
 * The scope of a shareable item
 */
export const enum SharingScopeEnum {
  TEAM = 'TEAM',
  ORGANIZATION = 'ORGANIZATION',
  PUBLIC = 'PUBLIC',
}

/**
 * An invitation to become a team member
 */
export interface ITeamInvitation {
  __typename: 'TeamInvitation';

  /**
   * The unique invitation Id
   */
  id: string;

  /**
   * null if not accepted, else the datetime the invitation was accepted
   */
  acceptedAt: any | null;

  /**
   * null if not accepted, else the userId that accepted the invitation
   */
  acceptedBy: string | null;

  /**
   * The datetime the invitation was created
   */
  createdAt: any;

  /**
   * The email of the invitee
   */
  email: any;

  /**
   * The datetime the invitation expires. Changes when team is archived.
   */
  expiresAt: any;

  /**
   * The userId of the person that sent the invitation
   */
  invitedBy: string;

  /**
   * The userId of the person that sent the invitation
   */
  inviter: IUser;

  /**
   * the meetingId that the invite was generated for
   */
  meetingId: string | null;

  /**
   * The team invited to
   */
  teamId: string;

  /**
   * 48-byte hex encoded random string
   */
  token: string;
}

/**
 * The team settings for a specific type of meeting
 */
export type TeamMeetingSettings =
  | IPokerMeetingSettings
  | IRetrospectiveMeetingSettings
  | IActionMeetingSettings;

/**
 * The team settings for a specific type of meeting
 */
export interface ITeamMeetingSettings {
  __typename: 'TeamMeetingSettings';
  id: string;

  /**
   * The type of meeting these settings apply to
   */
  meetingType: MeetingTypeEnum;

  /**
   * The broad phase types that will be addressed during the meeting
   */
  phaseTypes: Array<NewMeetingPhaseTypeEnum>;

  /**
   * FK
   */
  teamId: string;

  /**
   * The team these settings belong to
   */
  team: ITeam;
}

/**
 * A team-specific template scale.
 */
export interface ITemplateScale {
  __typename: 'TemplateScale';

  /**
   * shortid
   */
  id: string;
  createdAt: any;

  /**
   * true if the scale is currently used by the team, else false
   */
  isActive: boolean;

  /**
   * True if this is a starter/default scale; false otherwise
   */
  isStarter: boolean;

  /**
   * The datetime that the scale was removed. Null if it has not been removed.
   */
  removedAt: any | null;

  /**
   * foreign key. use the team field
   */
  teamId: string;

  /**
   * The team that owns this template scale
   */
  team: ITeam;
  updatedAt: any;

  /**
   * The title of the scale used in the template
   */
  name: string;

  /**
   * The dimensions currently using this scale
   */
  dimensions: Array<ITemplateDimension>;

  /**
   * The values used in this scale
   */
  values: Array<ITemplateScaleValue>;
}

/**
 * A team-specific template dimension: e.g., effort, importance etc.
 */
export interface ITemplateDimension {
  __typename: 'TemplateDimension';

  /**
   * shortid
   */
  id: string;
  createdAt: any;

  /**
   * true if the dimension is currently used by the team, else false
   */
  isActive: boolean;

  /**
   * The datetime that the dimension was removed. Null if it has not been removed.
   */
  removedAt: any | null;

  /**
   * foreign key. use the team field
   */
  teamId: string;

  /**
   * The team that owns this dimension
   */
  team: ITeam;
  updatedAt: any;

  /**
   * the order of the dimensions in the template
   */
  sortOrder: number;

  /**
   * FK for template
   */
  templateId: string;

  /**
   * The template that this dimension belongs to
   */
  template: IPokerTemplate;

  /**
   * The name of the dimension
   */
  name: string;

  /**
   * The description to the dimension name for further context. A long version of the dimension name.
   */
  description: string;

  /**
   * The scaleId to resolve the selected scale
   */
  scaleId: string;

  /**
   * scale used in this dimension
   */
  selectedScale: ITemplateScale;
}

/**
 * A value for a scale.
 */
export interface ITemplateScaleValue {
  __typename: 'TemplateScaleValue';
  id: string;

  /**
   * The id of the scale this value belongs to
   */
  scaleId: string;

  /**
   * The color used to visually group a scale value
   */
  color: string;

  /**
   * The label for this value, e.g., XS, M, L
   */
  label: string;

  /**
   * the order of the scale value in this scale
   */
  sortOrder: number;
}

/**
 * The pay tier of the team
 */
export const enum TierEnum {
  personal = 'personal',
  pro = 'pro',
  enterprise = 'enterprise',
}

/**
 * An organization
 */
export interface IOrganization {
  __typename: 'Organization';

  /**
   * The unique organization ID
   */
  id: string;

  /**
   * The top level domain this organization is linked to, null if only generic emails used
   */
  activeDomain: string | null;

  /**
   * false if the activeDomain is null or was set automatically via a heuristic, true if set manually
   */
  isActiveDomainTouched: boolean;

  /**
   * The datetime the organization was created
   */
  createdAt: any;

  /**
   * The safe credit card details
   */
  creditCard: ICreditCard | null;

  /**
   * The assumed company this organizaiton belongs to
   */
  company: ICompany | null;

  /**
   * true if the viewer is the billing leader for the org
   */
  isBillingLeader: boolean;

  /**
   * The name of the organization
   */
  name: string;

  /**
   * The org avatar
   */
  picture: any | null;

  /**
   * all the teams the viewer is on in the organization
   */
  teams: Array<ITeam>;

  /**
   * The level of access to features on the parabol site
   */
  tier: TierEnum;

  /**
   * THe datetime the current billing cycle ends
   */
  periodEnd: any | null;

  /**
   * The datetime the current billing cycle starts
   */
  periodStart: any | null;

  /**
   * The total number of retroMeetings given to the team
   * @deprecated "Unlimited retros for all!"
   */
  retroMeetingsOffered: number;

  /**
   * Number of retro meetings that can be run (if not pro)
   * @deprecated "Unlimited retros for all!"
   */
  retroMeetingsRemaining: number;

  /**
   * true if should show the org the conversion modal, else false
   */
  showConversionModal: boolean;

  /**
   * The customerId from stripe
   */
  stripeId: string | null;

  /**
   * The subscriptionId from stripe
   */
  stripeSubscriptionId: string | null;

  /**
   * The last upcoming invoice email that was sent, null if never sent
   */
  upcomingInvoiceEmailSentAt: any | null;

  /**
   * The datetime the organization was last updated
   */
  updatedAt: any | null;
  organizationUsers: IOrganizationUserConnection;

  /**
   * The count of active & inactive users
   */
  orgUserCount: IOrgUserCount;

  /**
   * The leaders of the org
   */
  billingLeaders: Array<IUser>;
}

export interface IOrganizationUsersOnOrganizationArguments {
  after?: string | null;
  first?: number | null;
}

/**
 * A credit card
 */
export interface ICreditCard {
  __typename: 'CreditCard';

  /**
   * The brand of the credit card, as provided by stripe
   */
  brand: string;

  /**
   * The MM/YY string of the expiration date
   */
  expiry: string;

  /**
   * The last 4 digits of a credit card
   */
  last4: string;
}

/**
 * A grouping of organizations. Automatically grouped by top level domain of each
 */
export interface ICompany {
  __typename: 'Company';

  /**
   * the top level domain
   */
  id: string;

  /**
   * the number of active teams across all organizations
   */
  activeTeamCount: number;

  /**
   * the number of active users across all organizations
   */
  activeUserCount: number;

  /**
   * the last time any team in the organization started a meeting, null if no meetings were ever run
   */
  lastMetAt: any | null;

  /**
   * the total number of meetings started across all teams on all organizations
   */
  meetingCount: number;

  /**
   * the longest monthly streak for meeting at least once per month for any team in the company
   */
  monthlyTeamStreakMax: number;

  /**
   * Get the list of all organizations that belong to the company
   */
  organizations: Array<IOrganization>;

  /**
   * The highest tier for any organization within the company
   */
  tier: TierEnum;

  /**
   * the total number of users across all organizations
   */
  userCount: number;
}

/**
 * A connection to a list of items.
 */
export interface IOrganizationUserConnection {
  __typename: 'OrganizationUserConnection';

  /**
   * Information to aid in pagination.
   */
  pageInfo: IPageInfo;

  /**
   * A list of edges.
   */
  edges: Array<IOrganizationUserEdge>;
}

/**
 * Information about pagination in a connection.
 */
export interface IPageInfo {
  __typename: 'PageInfo';

  /**
   * When paginating forwards, are there more items?
   */
  hasNextPage: boolean;

  /**
   * When paginating backwards, are there more items?
   */
  hasPreviousPage: boolean;

  /**
   * When paginating backwards, the cursor to continue.
   */
  startCursor: string | null;

  /**
   * When paginating forwards, the cursor to continue.
   */
  endCursor: string | null;
}

/**
 * An edge in a connection.
 */
export interface IOrganizationUserEdge {
  __typename: 'OrganizationUserEdge';

  /**
   * The item at the end of the edge
   */
  node: IOrganizationUser;

  /**
   * A cursor for use in pagination
   */
  cursor: string;
}

/**
 * organization-specific details about a user
 */
export interface IOrganizationUser {
  __typename: 'OrganizationUser';

  /**
   * orgId::userId
   */
  id: string;

  /**
   * true if the user is paused and the orgs are not being billed, else false
   */
  inactive: boolean;

  /**
   * the datetime the user first joined the org
   */
  joinedAt: any;

  /**
   * The last moment a billing leader can remove the user from the org & receive a refund. Set to the subscription periodEnd
   */
  newUserUntil: any;

  /**
   * FK
   */
  orgId: string;

  /**
   * The user attached to the organization
   */
  organization: IOrganization;

  /**
   * if not a member, the datetime the user was removed from the org
   */
  removedAt: any | null;

  /**
   * role of the user in the org
   */
  role: OrgUserRole | null;

  /**
   * FK
   */
  userId: string;

  /**
   * The user attached to the organization
   */
  user: IUser;

  /**
   * Their level of access to features on the parabol site
   */
  tier: TierEnum | null;
}

/**
 * The role of the org user
 */
export const enum OrgUserRole {
  BILLING_LEADER = 'BILLING_LEADER',
}

export interface IOrgUserCount {
  __typename: 'OrgUserCount';

  /**
   * The number of orgUsers who have an inactive flag
   */
  inactiveUserCount: number;

  /**
   * The number of orgUsers who do not have an inactive flag
   */
  activeUserCount: number;
}

/**
 * An estimate for a Task that was voted on and scored in a poker meeting
 */
export interface ITaskEstimate {
  __typename: 'TaskEstimate';

  /**
   * The ID of the estimate
   */
  id: string;

  /**
   * The timestamp the estimate was created
   */
  createdAt: any;

  /**
   * The source that a change came in through
   */
  changeSource: ChangeSourceEnum;

  /**
   * The name of the estimate dimension
   */
  name: string;

  /**
   * The human-readable label for the estimate
   */
  label: string;

  /**
   * *The taskId that the estimate refers to
   */
  taskId: string;

  /**
   * The userId that added the estimate
   */
  userId: string;

  /**
   * *The meetingId that the estimate occured in, if any
   */
  meetingId: string | null;

  /**
   * The meeting stageId the estimate occurred in, if any
   */
  stageId: string | null;

  /**
   * The discussionId where the estimated was discussed
   */
  discussionId: string | null;

  /**
   * If the task comes from jira, this is the jira field that the estimate refers to
   */
  jiraFieldId: string | null;
}

/**
 * The source that a change to a record came in through
 */
export const enum ChangeSourceEnum {
  meeting = 'meeting',
  task = 'task',
  external = 'external',
}

export interface ITaskEditorDetails {
  __typename: 'TaskEditorDetails';

  /**
   * The userId of the person editing the task
   */
  userId: string;

  /**
   * The name of the userId editing the task
   */
  preferredName: string;
}

/**
 * The status of the task
 */
export const enum TaskStatusEnum {
  active = 'active',
  stuck = 'stuck',
  done = 'done',
  future = 'future',
}

/**
 * The types of flags that give an individual user super powers
 */
export interface IUserFeatureFlags {
  __typename: 'UserFeatureFlags';

  /**
   * true if spotlight is allowed
   */
  spotlight: boolean;

  /**
   * true if standups is allowed
   */
  standups: boolean;

  /**
   * true if gitlab is allowed
   */
  gitlab: boolean;
}

/**
 * A monthly billing invoice for an organization
 */
export interface IInvoice {
  __typename: 'Invoice';

  /**
   * A shortid for the invoice
   */
  id: string;

  /**
   * The tier this invoice pays for
   */
  tier: TierEnum;

  /**
   * The amount the card will be charged (total + startingBalance with a min value of 0)
   */
  amountDue: number;

  /**
   * The datetime the invoice was first generated
   */
  createdAt: any;

  /**
   * The discount coupon information from Stripe, if any discount applied
   */
  coupon: ICoupon | null;

  /**
   * The total amount for the invoice (in USD)
   */
  total: number;

  /**
   * The emails the invoice was sent to
   */
  billingLeaderEmails: Array<any>;

  /**
   * the card used to pay the invoice
   */
  creditCard: ICreditCard | null;

  /**
   * The timestamp for the end of the billing cycle
   */
  endAt: any;

  /**
   * The date the invoice was created
   */
  invoiceDate: any;

  /**
   * An invoice line item for previous month adjustments
   */
  lines: Array<IInvoiceLineItem>;

  /**
   * The details that comprise the charges for next month
   */
  nextPeriodCharges: INextPeriodCharges;

  /**
   * *The organization id to charge
   */
  orgId: string;

  /**
   * The persisted name of the org as it was when invoiced
   */
  orgName: string;

  /**
   * the datetime the invoice was successfully paid
   */
  paidAt: any | null;

  /**
   * The URL to pay via stripe if payment was not collected in app
   */
  payUrl: string | null;

  /**
   * The picture of the organization
   */
  picture: any | null;

  /**
   * The timestamp for the beginning of the billing cycle
   */
  startAt: any;

  /**
   * The balance on the customer account (in cents)
   */
  startingBalance: number;

  /**
   * the status of the invoice. starts as pending, moves to paid or unpaid depending on if the payment succeeded
   */
  status: InvoiceStatusEnum;
}

/**
 * The discount coupon from Stripe, if any
 */
export interface ICoupon {
  __typename: 'Coupon';

  /**
   * The ID of the discount coupon from Stripe
   */
  id: string;

  /**
   * The amount off the invoice, if any
   */
  amountOff: number | null;

  /**
   * The name of the discount coupon from Stripe
   */
  name: string;

  /**
   * The percent off the invoice, if any
   */
  percentOff: number | null;
}

/**
 * A single line item charge on the invoice
 */
export interface IInvoiceLineItem {
  __typename: 'InvoiceLineItem';

  /**
   * The unique line item id
   */
  id: string;

  /**
   * The amount for the line item (in USD)
   */
  amount: number;

  /**
   * A description of the charge. Only present if we have no idea what the charge is
   */
  description: string | null;

  /**
   * Array of user activity line items that roll up to total activity (add/leave/pause/unpause)
   */
  details: Array<IInvoiceLineItemDetails>;

  /**
   * The total number of days that all org users have been inactive during the billing cycle
   */
  quantity: number | null;

  /**
   * The line item type for a monthly billing invoice
   */
  type: InvoiceLineItemEnum;
}

/**
 * The per-user-action line item details,
 */
export interface IInvoiceLineItemDetails {
  __typename: 'InvoiceLineItemDetails';

  /**
   * The unique detailed line item id
   */
  id: string;

  /**
   * The amount for the line item (in USD)
   */
  amount: number;

  /**
   * The email affected by this line item change
   */
  email: any;

  /**
   * End of the event. Only present if a pause action gets matched up with an unpause action
   */
  endAt: any | null;

  /**
   * The parent line item id
   */
  parentId: string;

  /**
   * The timestamp for the beginning of the period of no charge
   */
  startAt: any | null;
}

/**
 * A big picture line item
 */
export const enum InvoiceLineItemEnum {
  ADDED_USERS = 'ADDED_USERS',
  INACTIVITY_ADJUSTMENTS = 'INACTIVITY_ADJUSTMENTS',
  OTHER_ADJUSTMENTS = 'OTHER_ADJUSTMENTS',
  REMOVED_USERS = 'REMOVED_USERS',
}

/**
 * A single line item for the charges for next month
 */
export interface INextPeriodCharges {
  __typename: 'NextPeriodCharges';

  /**
   * The amount for the line item (in USD)
   */
  amount: number;

  /**
   * The datetime the next period will end
   */
  nextPeriodEnd: any;

  /**
   * The total number of days that all org users have been inactive during the billing cycle
   */
  quantity: number;

  /**
   * The per-seat monthly price of the subscription (in dollars), null if invoice is not per-seat
   */
  unitPrice: number | null;

  /**
   * "year" if enterprise, else "month" for pro
   */
  interval: string | null;
}

/**
 * The payment status of the invoice
 */
export const enum InvoiceStatusEnum {
  PENDING = 'PENDING',
  PAID = 'PAID',
  FAILED = 'FAILED',
  UPCOMING = 'UPCOMING',
}

/**
 * A connection to a list of items.
 */
export interface IInvoiceConnection {
  __typename: 'InvoiceConnection';

  /**
   * Page info with cursors coerced to ISO8601 dates
   */
  pageInfo: IPageInfoDateCursor | null;

  /**
   * A list of edges.
   */
  edges: Array<IInvoiceEdge>;
}

/**
 * An edge in a connection.
 */
export interface IInvoiceEdge {
  __typename: 'InvoiceEdge';

  /**
   * The item at the end of the edge
   */
  node: IInvoice;
  cursor: any | null;
}

/**
 * A past event that is important to the viewer
 */
export type SuggestedAction =
  | ISuggestedActionInviteYourTeam
  | ISuggestedActionTryRetroMeeting
  | ISuggestedActionTryActionMeeting
  | ISuggestedActionCreateNewTeam
  | ISuggestedActionTryTheDemo;

/**
 * A past event that is important to the viewer
 */
export interface ISuggestedAction {
  __typename: 'SuggestedAction';

  /**
   * shortid
   */
  id: string;

  /**
   * * The timestamp the action was created at
   */
  createdAt: any;

  /**
   * The priority of the suggested action compared to other suggested actions (smaller number is higher priority)
   */
  priority: number | null;

  /**
   * * The timestamp the action was removed at
   */
  removedAt: any;

  /**
   * The specific type of suggested action
   */
  type: SuggestedActionTypeEnum;

  /**
   * * The userId this action is for
   */
  userId: string;

  /**
   * The user than can see this event
   */
  user: IUser;
}

/**
 * The specific type of the suggested action
 */
export const enum SuggestedActionTypeEnum {
  inviteYourTeam = 'inviteYourTeam',
  tryTheDemo = 'tryTheDemo',
  tryRetroMeeting = 'tryRetroMeeting',
  createNewTeam = 'createNewTeam',
  tryActionMeeting = 'tryActionMeeting',
}

/**
 * A connection to a list of items.
 */
export interface ITimelineEventConnection {
  __typename: 'TimelineEventConnection';

  /**
   * Page info with cursors coerced to ISO8601 dates
   */
  pageInfo: IPageInfoDateCursor | null;

  /**
   * A list of edges.
   */
  edges: Array<ITimelineEventEdge>;
}

/**
 * An edge in a connection.
 */
export interface ITimelineEventEdge {
  __typename: 'TimelineEventEdge';

  /**
   * The item at the end of the edge
   */
  node: TimelineEvent;
  cursor: any | null;
}

/**
 * A past event that is important to the viewer
 */
export type TimelineEvent =
  | ITimelineEventTeamCreated
  | ITimelineEventJoinedParabol
  | ITimelineEventCompletedRetroMeeting
  | ITimelineEventCompletedActionMeeting
  | ITimelineEventPokerComplete;

/**
 * A past event that is important to the viewer
 */
export interface ITimelineEvent {
  __typename: 'TimelineEvent';

  /**
   * shortid
   */
  id: string;

  /**
   * * The timestamp the event was created at
   */
  createdAt: any;

  /**
   * the number of times the user has interacted with (ie clicked) this event
   */
  interactionCount: number;

  /**
   * true if the timeline event is active, false if archived
   */
  isActive: boolean;

  /**
   * The orgId this event is associated with. Null if not traceable to one org
   */
  orgId: string | null;

  /**
   * The organization this event is associated with
   */
  organization: IOrganization | null;

  /**
   * the number of times the user has seen this event
   */
  seenCount: number;

  /**
   * The teamId this event is associated with. Null if not traceable to one team
   */
  teamId: string | null;

  /**
   * The team that can see this event
   */
  team: ITeam | null;

  /**
   * The specific type of event
   */
  type: TimelineEventEnum;

  /**
   * * The userId that can see this event
   */
  userId: string;

  /**
   * The user than can see this event
   */
  user: IUser;
}

/**
 * The specific type of event
 */
export const enum TimelineEventEnum {
  retroComplete = 'retroComplete',
  actionComplete = 'actionComplete',
  joinedParabol = 'joinedParabol',
  createdTeam = 'createdTeam',
  POKER_COMPLETE = 'POKER_COMPLETE',
}

/**
 * A discussion thread
 */
export interface IDiscussion {
  __typename: 'Discussion';
  id: string;
  teamId: string;
  meetingId: string;

  /**
   * time the thread was created
   */
  createdAt: any;

  /**
   * The partial foreign key that references the object that is the topic of the discussion. E.g. AgendaItemId, TaskId, ReflectionGroupId
   */
  discussionTopicId: string;

  /**
   * The partial foregin key that describes the type of object that is the topic of the discussion. E.g. AgendaItem, TaskId, ReflectionGroup, GitHubIssue
   */
  discussionTopicType: DiscussionTopicTypeEnum;

  /**
   * The number of comments contained in the thread
   */
  commentCount: number;

  /**
   * The users writing a comment right now
   */
  commentors: Array<IUser>;

  /**
   * The comments & tasks thread in the discussion
   */
  thread: IThreadableConnection;
}

export interface IThreadOnDiscussionArguments {
  /**
   * How many items to show. optional if only comments are desired
   */
  first?: number | null;

  /**
   * the incrementing sort order in string format
   */
  after?: string | null;
}

/**
 * The topic being discussed
 */
export const enum DiscussionTopicTypeEnum {
  agendaItem = 'agendaItem',
  reflectionGroup = 'reflectionGroup',
  task = 'task',
  githubIssue = 'githubIssue',
  jiraIssue = 'jiraIssue',
}

/**
 * A connection to a list of items.
 */
export interface IThreadableConnection {
  __typename: 'ThreadableConnection';

  /**
   * Page info with strings (sortOrder) as cursors
   */
  pageInfo: IPageInfo | null;

  /**
   * A list of edges.
   */
  edges: Array<IThreadableEdge>;

  /**
   * Any errors that prevented the query from returning the full results
   */
  error: string | null;
}

/**
 * An edge in a connection.
 */
export interface IThreadableEdge {
  __typename: 'ThreadableEdge';

  /**
   * The item at the end of the edge
   */
  node: Threadable;
  cursor: string | null;
}

/**
 * The latest feature released by Parabol
 */
export interface INewFeatureBroadcast {
  __typename: 'NewFeatureBroadcast';
  id: string;

  /**
   * The text of the action button in the snackbar
   */
  actionButtonCopy: string;

  /**
   * The description of the new feature
   */
  snackbarMessage: string;

  /**
   * The permalink to the blog post describing the new feature
   */
  url: string;
}

/**
 * A connection to a list of items.
 */
export interface INotificationConnection {
  __typename: 'NotificationConnection';

  /**
   * Page info with cursors coerced to ISO8601 dates
   */
  pageInfo: IPageInfoDateCursor | null;

  /**
   * A list of edges.
   */
  edges: Array<INotificationEdge>;
}

/**
 * An edge in a connection.
 */
export interface INotificationEdge {
  __typename: 'NotificationEdge';

  /**
   * The item at the end of the edge
   */
  node: Notification;
  cursor: any | null;
}

export type Notification =
  | INotificationTeamInvitation
  | INotifyPromoteToOrgLeader
  | INotifyTeamArchived
  | INotifyTaskInvolves
  | INotifyKickedOut
  | INotificationMeetingStageTimeLimitEnd
  | INotifyPaymentRejected;

export interface INotification {
  __typename: 'Notification';

  /**
   * A shortid for the notification
   */
  id: string;

  /**
   * UNREAD if new, READ if viewer has seen it, CLICKED if viewed clicked it
   */
  status: NotificationStatusEnum;

  /**
   * The datetime to activate the notification & send it to the client
   */
  createdAt: any;
  type: NotificationEnum;

  /**
   * *The userId that should see this notification
   */
  userId: string;
}

/**
 * The status of the notification interaction
 */
export const enum NotificationStatusEnum {
  UNREAD = 'UNREAD',
  READ = 'READ',
  CLICKED = 'CLICKED',
}

/**
 * The kind of notification
 */
export const enum NotificationEnum {
  KICKED_OUT = 'KICKED_OUT',
  PAYMENT_REJECTED = 'PAYMENT_REJECTED',
  PROMOTE_TO_BILLING_LEADER = 'PROMOTE_TO_BILLING_LEADER',
  TEAM_INVITATION = 'TEAM_INVITATION',
  TEAM_ARCHIVED = 'TEAM_ARCHIVED',
  TASK_INVOLVES = 'TASK_INVOLVES',
  MEETING_STAGE_TIME_LIMIT_END = 'MEETING_STAGE_TIME_LIMIT_END',
}

/**
 * A reflection group created during the group phase of a retrospective
 */
export interface IRetroReflectionGroup {
  __typename: 'RetroReflectionGroup';

  /**
   * shortid
   */
  id: string;

  /**
   * A list of users currently commenting
   * @deprecated "Moved to ThreadConnection. Can remove Jun-01-2021"
   */
  commentors: Array<ICommentorDetails> | null;

  /**
   * The timestamp the meeting was created
   */
  createdAt: any;

  /**
   * True if the group has not been removed, else false
   */
  isActive: boolean;

  /**
   * The foreign key to link a reflection group to its meeting
   */
  meetingId: string;

  /**
   * The retrospective meeting this reflection was created in
   */
  meeting: IRetrospectiveMeeting;
  prompt: IReflectPrompt;

  /**
   * The foreign key to link a reflection group to its prompt. Immutable.
   */
  promptId: string;
  reflections: Array<IRetroReflection>;

  /**
   * Our auto-suggested title, to be compared to the actual title for analytics
   */
  smartTitle: string | null;

  /**
   * The sort order of the reflection group
   */
  sortOrder: number;

  /**
   * The team that is running the retro
   */
  team: ITeam | null;

  /**
   * The title of the grouping of the retrospective reflections
   */
  title: string | null;

  /**
   * true if a user wrote the title, else false
   */
  titleIsUserDefined: boolean;

  /**
   * The timestamp the meeting was updated at
   */
  updatedAt: any | null;

  /**
   * A list of voterIds (userIds). Not available to team to preserve anonymity
   */
  voterIds: Array<string>;

  /**
   * The number of votes this group has received
   */
  voteCount: number;

  /**
   * The number of votes the viewer has given this group
   */
  viewerVoteCount: number | null;
}

/**
 * A reflection created during the reflect phase of a retrospective
 */
export interface IRetroReflection {
  __typename: 'RetroReflection';

  /**
   * shortid
   */
  id: string;

  /**
   * All the reactjis for the given reflection
   */
  reactjis: Array<IReactji>;

  /**
   * The ID of the group that the autogrouper assigned the reflection. Error rate = Sum(autoId != Id) / autoId.count()
   */
  autoReflectionGroupId: string | null;

  /**
   * The timestamp the meeting was created
   */
  createdAt: any | null;

  /**
   * The userId that created the reflection (or unique Id if not a team member)
   */
  creatorId: string | null;

  /**
   * an array of all the socketIds that are currently editing the reflection
   */
  editorIds: Array<string>;

  /**
   * True if the reflection was not removed, else false
   */
  isActive: boolean;

  /**
   * true if the viewer (userId) is the creator of the retro reflection, else false
   */
  isViewerCreator: boolean;

  /**
   * The stringified draft-js content
   */
  content: string;

  /**
   * The entities (i.e. nouns) parsed from the content and their respective salience
   */
  entities: Array<IGoogleAnalyzedEntity>;

  /**
   * The foreign key to link a reflection to its meeting
   */
  meetingId: string;

  /**
   * The retrospective meeting this reflection was created in
   */
  meeting: IRetrospectiveMeeting;

  /**
   * The plaintext version of content
   */
  plaintextContent: string;

  /**
   * The foreign key to link a reflection to its prompt. Immutable. For sorting, use prompt on the group.
   */
  promptId: string;
  prompt: IReflectPrompt;

  /**
   * The foreign key to link a reflection to its group
   */
  reflectionGroupId: string;

  /**
   * The group the reflection belongs to, if any
   */
  retroReflectionGroup: IRetroReflectionGroup | null;

  /**
   * The sort order of the reflection in the group (increments starting from 0)
   */
  sortOrder: number;

  /**
   * The team that is running the meeting that contains this reflection
   */
  team: ITeam;

  /**
   * The timestamp the meeting was updated. Used to determine how long it took to write a reflection
   */
  updatedAt: any | null;
}

/**
 * An item that can have reactjis
 */
export type Reactable = IRetroReflection | IComment;

/**
 * An item that can have reactjis
 */
export interface IReactable {
  __typename: 'Reactable';

  /**
   * shortid
   */
  id: string;

  /**
   * All the reactjis for the given reflection
   */
  reactjis: Array<IReactji>;
}

/**
 * An aggregate of reactji metadata
 */
export interface IReactji {
  __typename: 'Reactji';

  /**
   * composite of entity:reactjiId
   */
  id: string;

  /**
   * The number of users who have added this reactji
   */
  count: number;

  /**
   * true if the viewer is included in the count, else false
   */
  isViewerReactji: boolean;
}

export interface IGoogleAnalyzedEntity {
  __typename: 'GoogleAnalyzedEntity';

  /**
   * The lemma (dictionary entry) of the entity name. Fancy way of saying the singular form of the name, if plural.
   */
  lemma: string;

  /**
   * The name of the entity. Usually 1 or 2 words. Always a noun, sometimes a proper noun.
   */
  name: string;

  /**
   * The salience of the entity in the provided text. The salience of all entities always sums to 1
   */
  salience: number;
}

/**
 * The response to a teamInvitation query
 */
export interface ITeamInvitationPayload {
  __typename: 'TeamInvitationPayload';

  /**
   * The team invitation, if any
   */
  teamInvitation: ITeamInvitation | null;

  /**
   * the teamId of the team trying to join
   */
  teamId: string | null;

  /**
   * one of the active meetings trying to join
   */
  meetingId: string | null;
}

/**
 * A stage that focuses on a single team member
 */
export interface ICheckInStage {
  __typename: 'CheckInStage';

  /**
   * stageId, shortid
   */
  id: string;

  /**
   * The datetime the stage was completed
   */
  endAt: any | null;

  /**
   * foreign key. try using meeting
   */
  meetingId: string;

  /**
   * The meeting this stage belongs to
   */
  meeting: NewMeeting | null;

  /**
   * true if the facilitator has completed this stage, else false. Should be boolean(endAt)
   */
  isComplete: boolean;

  /**
   * true if any meeting participant can navigate to this stage
   */
  isNavigable: boolean;

  /**
   * true if the facilitator can navigate to this stage
   */
  isNavigableByFacilitator: boolean;

  /**
   * The phase this stage belongs to
   */
  phase: NewMeetingPhase | null;

  /**
   * The type of the phase
   */
  phaseType: NewMeetingPhaseTypeEnum | null;

  /**
   * The datetime the stage was started
   */
  startAt: any | null;

  /**
   * Number of times the facilitator has visited this stage
   */
  viewCount: number | null;

  /**
   * true if a time limit is set, false if end time is set, null if neither is set
   */
  isAsync: boolean | null;

  /**
   * true if the viewer is ready to advance, else false
   */
  isViewerReady: boolean;

  /**
   * the number of meeting members ready to advance, excluding the facilitator
   */
  readyCount: number;

  /**
   * The datetime the phase is scheduled to be finished, null if no time limit or end time is set
   */
  scheduledEndTime: any | null;

  /**
   * The suggested ending datetime for a phase to be completed async, null if not enough data to make a suggestion
   */
  suggestedEndTime: any | null;

  /**
   * The suggested time limit for a phase to be completed together, null if not enough data to make a suggestion
   */
  suggestedTimeLimit: number | null;
  teamId: string;

  /**
   * The number of milliseconds left before the scheduled end time. Useful for unsynced client clocks. null if scheduledEndTime is null
   */
  timeRemaining: number | null;

  /**
   * The meeting member that is the focus for this phase item
   */
  meetingMember: MeetingMember;

  /**
   * foreign key. use teamMember
   */
  teamMemberId: string;

  /**
   * The team member that is the focus for this phase item
   */
  teamMember: ITeamMember;
}

/**
 * An instance of a meeting phase item. On the client, this usually represents a single view
 */
export type NewMeetingTeamMemberStage = ICheckInStage | IUpdatesStage;

/**
 * An instance of a meeting phase item. On the client, this usually represents a single view
 */
export interface INewMeetingTeamMemberStage {
  __typename: 'NewMeetingTeamMemberStage';

  /**
   * The meeting member that is the focus for this phase item
   */
  meetingMember: MeetingMember;

  /**
   * foreign key. use teamMember
   */
  teamMemberId: string;

  /**
   * The team member that is the focus for this phase item
   */
  teamMember: ITeamMember;
}

export interface IMeetingGreeting {
  __typename: 'MeetingGreeting';

  /**
   * The foreign-language greeting
   */
  content: string;

  /**
   * The source language for the greeting
   */
  language: string;
}

/**
 * The meeting phase where all team members check in one-by-one
 */
export interface IReflectPhase {
  __typename: 'ReflectPhase';

  /**
   * shortid
   */
  id: string;
  meetingId: string;
  teamId: string;

  /**
   * The type of phase
   */
  phaseType: NewMeetingPhaseTypeEnum;
  stages: Array<IGenericMeetingStage>;

  /**
   * foreign key. use focusedPrompt
   */
  focusedPromptId: string | null;

  /**
   * the Prompt that the facilitator wants the group to focus on
   */
  focusedPrompt: IReflectPrompt | null;

  /**
   * The prompts used during the reflect phase
   */
  reflectPrompts: Array<IReflectPrompt>;
}

/**
 * A stage of a meeting that has no extra state. Only used for single-stage phases
 */
export interface IGenericMeetingStage {
  __typename: 'GenericMeetingStage';

  /**
   * stageId, shortid
   */
  id: string;

  /**
   * The datetime the stage was completed
   */
  endAt: any | null;

  /**
   * foreign key. try using meeting
   */
  meetingId: string;

  /**
   * The meeting this stage belongs to
   */
  meeting: NewMeeting | null;

  /**
   * true if the facilitator has completed this stage, else false. Should be boolean(endAt)
   */
  isComplete: boolean;

  /**
   * true if any meeting participant can navigate to this stage
   */
  isNavigable: boolean;

  /**
   * true if the facilitator can navigate to this stage
   */
  isNavigableByFacilitator: boolean;

  /**
   * The phase this stage belongs to
   */
  phase: NewMeetingPhase | null;

  /**
   * The type of the phase
   */
  phaseType: NewMeetingPhaseTypeEnum | null;

  /**
   * The datetime the stage was started
   */
  startAt: any | null;

  /**
   * Number of times the facilitator has visited this stage
   */
  viewCount: number | null;

  /**
   * true if a time limit is set, false if end time is set, null if neither is set
   */
  isAsync: boolean | null;

  /**
   * true if the viewer is ready to advance, else false
   */
  isViewerReady: boolean;

  /**
   * the number of meeting members ready to advance, excluding the facilitator
   */
  readyCount: number;

  /**
   * The datetime the phase is scheduled to be finished, null if no time limit or end time is set
   */
  scheduledEndTime: any | null;

  /**
   * The suggested ending datetime for a phase to be completed async, null if not enough data to make a suggestion
   */
  suggestedEndTime: any | null;

  /**
   * The suggested time limit for a phase to be completed together, null if not enough data to make a suggestion
   */
  suggestedTimeLimit: number | null;
  teamId: string;

  /**
   * The number of milliseconds left before the scheduled end time. Useful for unsynced client clocks. null if scheduledEndTime is null
   */
  timeRemaining: number | null;
}

/**
 * The team-specific templates for sprint poker meeting
 */
export interface IPokerTemplate {
  __typename: 'PokerTemplate';

  /**
   * shortid
   */
  id: string;
  createdAt: any;

  /**
   * True if template can be used, else false
   */
  isActive: boolean;

  /**
   * The time of the meeting the template was last used
   */
  lastUsedAt: any | null;

  /**
   * The name of the template
   */
  name: string;

  /**
   * *Foreign key. The organization that owns the team that created the template
   */
  orgId: string;

  /**
   * Who can see this template
   */
  scope: SharingScopeEnum;

  /**
   * *Foreign key. The team this template belongs to
   */
  teamId: string;

  /**
   * The team this template belongs to
   */
  team: ITeam;

  /**
   * The type of the template
   */
  type: string;
  updatedAt: any;

  /**
   * The dimensions that are part of this template
   */
  dimensions: Array<ITemplateDimension>;

  /**
   * A query for the dimension
   */
  dimension: ITemplateDimension;
}

export interface IDimensionOnPokerTemplateArguments {
  /**
   * The dimension ID for the desired dimension
   */
  dimensionId: string;
}

/**
 * A meeting template that can be shared across team, orgnization and public
 */
export type MeetingTemplate = IReflectTemplate | IPokerTemplate;

/**
 * A meeting template that can be shared across team, orgnization and public
 */
export interface IMeetingTemplate {
  __typename: 'MeetingTemplate';

  /**
   * shortid
   */
  id: string;
  createdAt: any;

  /**
   * True if template can be used, else false
   */
  isActive: boolean;

  /**
   * The time of the meeting the template was last used
   */
  lastUsedAt: any | null;

  /**
   * The name of the template
   */
  name: string;

  /**
   * *Foreign key. The organization that owns the team that created the template
   */
  orgId: string;

  /**
   * Who can see this template
   */
  scope: SharingScopeEnum;

  /**
   * *Foreign key. The team this template belongs to
   */
  teamId: string;

  /**
   * The team this template belongs to
   */
  team: ITeam;

  /**
   * The type of the template
   */
  type: string;
  updatedAt: any;
}

/**
 * The meeting phase where all team members discuss the topics with the most votes
 */
export interface IDiscussPhase {
  __typename: 'DiscussPhase';

  /**
   * shortid
   */
  id: string;
  meetingId: string;
  teamId: string;

  /**
   * The type of phase
   */
  phaseType: NewMeetingPhaseTypeEnum;
  stages: Array<IRetroDiscussStage>;
}

/**
 * The stage where the team discusses a single theme
 */
export interface IRetroDiscussStage {
  __typename: 'RetroDiscussStage';

  /**
   * stageId, shortid
   */
  id: string;

  /**
   * The datetime the stage was completed
   */
  endAt: any | null;

  /**
   * foreign key. try using meeting
   */
  meetingId: string;

  /**
   * The meeting this stage belongs to
   */
  meeting: NewMeeting | null;

  /**
   * true if the facilitator has completed this stage, else false. Should be boolean(endAt)
   */
  isComplete: boolean;

  /**
   * true if any meeting participant can navigate to this stage
   */
  isNavigable: boolean;

  /**
   * true if the facilitator can navigate to this stage
   */
  isNavigableByFacilitator: boolean;

  /**
   * The phase this stage belongs to
   */
  phase: NewMeetingPhase | null;

  /**
   * The type of the phase
   */
  phaseType: NewMeetingPhaseTypeEnum | null;

  /**
   * The datetime the stage was started
   */
  startAt: any | null;

  /**
   * Number of times the facilitator has visited this stage
   */
  viewCount: number | null;

  /**
   * true if a time limit is set, false if end time is set, null if neither is set
   */
  isAsync: boolean | null;

  /**
   * true if the viewer is ready to advance, else false
   */
  isViewerReady: boolean;

  /**
   * the number of meeting members ready to advance, excluding the facilitator
   */
  readyCount: number;

  /**
   * The datetime the phase is scheduled to be finished, null if no time limit or end time is set
   */
  scheduledEndTime: any | null;

  /**
   * The suggested ending datetime for a phase to be completed async, null if not enough data to make a suggestion
   */
  suggestedEndTime: any | null;

  /**
   * The suggested time limit for a phase to be completed together, null if not enough data to make a suggestion
   */
  suggestedTimeLimit: number | null;
  teamId: string;

  /**
   * The number of milliseconds left before the scheduled end time. Useful for unsynced client clocks. null if scheduledEndTime is null
   */
  timeRemaining: number | null;

  /**
   * The ID to find the discussion that goes in the stage
   */
  discussionId: string;

  /**
   * The discussion about the stage or a dummy data when there is no disscussion
   */
  discussion: IDiscussion;

  /**
   * foreign key. use reflectionGroup
   */
  reflectionGroupId: string;

  /**
   * the group that is the focal point of the discussion
   */
  reflectionGroup: IRetroReflectionGroup;

  /**
   * The sort order for reprioritizing discussion topics
   */
  sortOrder: number;
}

/**
 * A meeting stage that includes a discussion thread
 */
export type DiscussionThreadStage =
  | IRetroDiscussStage
  | IEstimateStage
  | IAgendaItemsStage;

/**
 * A meeting stage that includes a discussion thread
 */
export interface IDiscussionThreadStage {
  __typename: 'DiscussionThreadStage';

  /**
   * The ID to find the discussion that goes in the stage
   */
  discussionId: string;

  /**
   * The discussion about the stage
   */
  discussion: IDiscussion;
}

/**
 * The meeting phase where all team members give updates one-by-one
 */
export interface IUpdatesPhase {
  __typename: 'UpdatesPhase';

  /**
   * shortid
   */
  id: string;
  meetingId: string;
  teamId: string;

  /**
   * The type of phase
   */
  phaseType: NewMeetingPhaseTypeEnum;
  stages: Array<IUpdatesStage>;
}

/**
 * A stage that focuses on a single team member
 */
export interface IUpdatesStage {
  __typename: 'UpdatesStage';

  /**
   * stageId, shortid
   */
  id: string;

  /**
   * The datetime the stage was completed
   */
  endAt: any | null;

  /**
   * foreign key. try using meeting
   */
  meetingId: string;

  /**
   * The meeting this stage belongs to
   */
  meeting: NewMeeting | null;

  /**
   * true if the facilitator has completed this stage, else false. Should be boolean(endAt)
   */
  isComplete: boolean;

  /**
   * true if any meeting participant can navigate to this stage
   */
  isNavigable: boolean;

  /**
   * true if the facilitator can navigate to this stage
   */
  isNavigableByFacilitator: boolean;

  /**
   * The phase this stage belongs to
   */
  phase: NewMeetingPhase | null;

  /**
   * The type of the phase
   */
  phaseType: NewMeetingPhaseTypeEnum | null;

  /**
   * The datetime the stage was started
   */
  startAt: any | null;

  /**
   * Number of times the facilitator has visited this stage
   */
  viewCount: number | null;

  /**
   * true if a time limit is set, false if end time is set, null if neither is set
   */
  isAsync: boolean | null;

  /**
   * true if the viewer is ready to advance, else false
   */
  isViewerReady: boolean;

  /**
   * the number of meeting members ready to advance, excluding the facilitator
   */
  readyCount: number;

  /**
   * The datetime the phase is scheduled to be finished, null if no time limit or end time is set
   */
  scheduledEndTime: any | null;

  /**
   * The suggested ending datetime for a phase to be completed async, null if not enough data to make a suggestion
   */
  suggestedEndTime: any | null;

  /**
   * The suggested time limit for a phase to be completed together, null if not enough data to make a suggestion
   */
  suggestedTimeLimit: number | null;
  teamId: string;

  /**
   * The number of milliseconds left before the scheduled end time. Useful for unsynced client clocks. null if scheduledEndTime is null
   */
  timeRemaining: number | null;

  /**
   * The meeting member that is the focus for this phase item
   */
  meetingMember: MeetingMember;

  /**
   * foreign key. use teamMember
   */
  teamMemberId: string;

  /**
   * The team member that is the focus for this phase item
   */
  teamMember: ITeamMember;
}

/**
 * The stage where the team estimates & discusses a single task
 */
export interface IEstimateStage {
  __typename: 'EstimateStage';

  /**
   * stageId, shortid
   */
  id: string;

  /**
   * The datetime the stage was completed
   */
  endAt: any | null;

  /**
   * foreign key. try using meeting
   */
  meetingId: string;

  /**
   * The meeting this stage belongs to
   */
  meeting: NewMeeting | null;

  /**
   * true if the facilitator has completed this stage, else false. Should be boolean(endAt)
   */
  isComplete: boolean;

  /**
   * true if any meeting participant can navigate to this stage
   */
  isNavigable: boolean;

  /**
   * true if the facilitator can navigate to this stage
   */
  isNavigableByFacilitator: boolean;

  /**
   * The phase this stage belongs to
   */
  phase: NewMeetingPhase | null;

  /**
   * The type of the phase
   */
  phaseType: NewMeetingPhaseTypeEnum | null;

  /**
   * The datetime the stage was started
   */
  startAt: any | null;

  /**
   * Number of times the facilitator has visited this stage
   */
  viewCount: number | null;

  /**
   * true if a time limit is set, false if end time is set, null if neither is set
   */
  isAsync: boolean | null;

  /**
   * true if the viewer is ready to advance, else false
   */
  isViewerReady: boolean;

  /**
   * the number of meeting members ready to advance, excluding the facilitator
   */
  readyCount: number;

  /**
   * The datetime the phase is scheduled to be finished, null if no time limit or end time is set
   */
  scheduledEndTime: any | null;

  /**
   * The suggested ending datetime for a phase to be completed async, null if not enough data to make a suggestion
   */
  suggestedEndTime: any | null;

  /**
   * The suggested time limit for a phase to be completed together, null if not enough data to make a suggestion
   */
  suggestedTimeLimit: number | null;
  teamId: string;

  /**
   * The number of milliseconds left before the scheduled end time. Useful for unsynced client clocks. null if scheduledEndTime is null
   */
  timeRemaining: number | null;

  /**
   * The ID to find the discussion that goes in the stage
   */
  discussionId: string;

  /**
   * The discussion about the stage
   */
  discussion: IDiscussion;

  /**
   * The id of the user that added this stage.
   */
  creatorUserId: string;

  /**
   * The ID that points to the issue that exists in parabol
   */
  taskId: string;

  /**
   * The field name used by the service for this dimension
   */
  serviceField: IServiceField;

  /**
   * The sort order for reprioritizing discussion topics
   */
  sortOrder: number;

  /**
   * The immutable index of the dimensionRef tied to this stage
   */
  dimensionRefIdx: number;

  /**
   * The immutable dimension linked to this stage
   */
  dimensionRef: ITemplateDimensionRef;

  /**
   * the final score, as defined by the facilitator
   */
  finalScore: string | null;

  /**
   * the userIds of the team members hovering the deck
   */
  hoveringUserIds: Array<string>;

  /**
   * the users of the team members hovering the deck
   */
  hoveringUsers: Array<IUser>;

  /**
   * all the estimates, 1 per user
   */
  scores: Array<IEstimateUserScore>;

  /**
   * The task referenced in the stage, as it exists in Parabol. null if the task was deleted
   */
  task: ITask | null;

  /**
   * true when the participants are still voting and results are hidden. false when votes are revealed
   */
  isVoting: boolean;
}

/**
 * A field that exists on a 3rd party service
 */
export interface IServiceField {
  __typename: 'ServiceField';

  /**
   * The name of the field as provided by the service
   */
  name: string;

  /**
   * The field type, to be used for validation and analytics
   */
  type: string;
}

/**
 * An immutable TemplateDimension
 */
export interface ITemplateDimensionRef {
  __typename: 'TemplateDimensionRef';
  id: string;

  /**
   * the order of the dimensions in the template
   */
  sortOrder: number;

  /**
   * The name of the dimension
   */
  name: string;

  /**
   * The md5 hash to resolve the immutable selected scale ref
   */
  scaleRefId: string;

  /**
   * scale used in this dimension
   */
  scale: ITemplateScaleRef;
}

/**
 * An immutable version of TemplateScale to be shared across all users
 */
export interface ITemplateScaleRef {
  __typename: 'TemplateScaleRef';

  /**
   * md5 hash
   */
  id: string;
  createdAt: any;

  /**
   * The title of the scale used in the template
   */
  name: string;

  /**
   * The values used in this scale
   */
  values: Array<ITemplateScaleValue>;
}

/**
 * The user and number of points they estimated for dimension (where 1 stage has 1 dimension)
 */
export interface IEstimateUserScore {
  __typename: 'EstimateUserScore';

  /**
   * shortid
   */
  id: string;

  /**
   * The stageId
   */
  stageId: string;

  /**
   * The userId that for this score
   */
  userId: string;

  /**
   * The user that for this score
   */
  user: IUser;

  /**
   * The label that was associated with the score at the time of the vote. Note: It may no longer exist on the dimension
   */
  label: string;
}

/**
 * The meeting phase where all team members discuss the topics with the most votes
 */
export interface IAgendaItemsPhase {
  __typename: 'AgendaItemsPhase';

  /**
   * shortid
   */
  id: string;
  meetingId: string;
  teamId: string;

  /**
   * The type of phase
   */
  phaseType: NewMeetingPhaseTypeEnum;
  stages: Array<IAgendaItemsStage>;
}

/**
 * The stage where the team discusses a single agenda item
 */
export interface IAgendaItemsStage {
  __typename: 'AgendaItemsStage';

  /**
   * stageId, shortid
   */
  id: string;

  /**
   * The datetime the stage was completed
   */
  endAt: any | null;

  /**
   * foreign key. try using meeting
   */
  meetingId: string;

  /**
   * The meeting this stage belongs to
   */
  meeting: NewMeeting | null;

  /**
   * true if the facilitator has completed this stage, else false. Should be boolean(endAt)
   */
  isComplete: boolean;

  /**
   * true if any meeting participant can navigate to this stage
   */
  isNavigable: boolean;

  /**
   * true if the facilitator can navigate to this stage
   */
  isNavigableByFacilitator: boolean;

  /**
   * The phase this stage belongs to
   */
  phase: NewMeetingPhase | null;

  /**
   * The type of the phase
   */
  phaseType: NewMeetingPhaseTypeEnum | null;

  /**
   * The datetime the stage was started
   */
  startAt: any | null;

  /**
   * Number of times the facilitator has visited this stage
   */
  viewCount: number | null;

  /**
   * true if a time limit is set, false if end time is set, null if neither is set
   */
  isAsync: boolean | null;

  /**
   * true if the viewer is ready to advance, else false
   */
  isViewerReady: boolean;

  /**
   * the number of meeting members ready to advance, excluding the facilitator
   */
  readyCount: number;

  /**
   * The datetime the phase is scheduled to be finished, null if no time limit or end time is set
   */
  scheduledEndTime: any | null;

  /**
   * The suggested ending datetime for a phase to be completed async, null if not enough data to make a suggestion
   */
  suggestedEndTime: any | null;

  /**
   * The suggested time limit for a phase to be completed together, null if not enough data to make a suggestion
   */
  suggestedTimeLimit: number | null;
  teamId: string;

  /**
   * The number of milliseconds left before the scheduled end time. Useful for unsynced client clocks. null if scheduledEndTime is null
   */
  timeRemaining: number | null;

  /**
   * The ID to find the discussion that goes in the stage
   */
  discussionId: string;

  /**
   * The discussion about the stage
   */
  discussion: IDiscussion;

  /**
   * The id of the agenda item this relates to
   */
  agendaItemId: string;
  agendaItem: IAgendaItem;
}

/**
 * An all-purpose meeting phase with no extra state
 */
export interface IGenericMeetingPhase {
  __typename: 'GenericMeetingPhase';

  /**
   * shortid
   */
  id: string;
  meetingId: string;
  teamId: string;

  /**
   * The type of phase
   */
  phaseType: NewMeetingPhaseTypeEnum;
  stages: Array<IGenericMeetingStage>;
}

/**
 * The meeting phase where all team members estimate a the point value of a task
 */
export interface IEstimatePhase {
  __typename: 'EstimatePhase';

  /**
   * shortid
   */
  id: string;
  meetingId: string;
  teamId: string;

  /**
   * The type of phase
   */
  phaseType: NewMeetingPhaseTypeEnum;
  stages: Array<IEstimateStage>;
}

/**
 * A notification sent to a user that was invited to a new team
 */
export interface INotificationTeamInvitation {
  __typename: 'NotificationTeamInvitation';

  /**
   * FK
   */
  teamId: string;

  /**
   * FK
   */
  invitationId: string;

  /**
   * The invitation that triggered this notification
   */
  invitation: ITeamInvitation;
  team: ITeam;

  /**
   * A shortid for the notification
   */
  id: string;

  /**
   * UNREAD if new, READ if viewer has seen it, CLICKED if viewed clicked it
   */
  status: NotificationStatusEnum;

  /**
   * The datetime to activate the notification & send it to the client
   */
  createdAt: any;
  type: NotificationEnum;

  /**
   * *The userId that should see this notification
   */
  userId: string;
}

export type TeamNotification =
  | INotificationTeamInvitation
  | INotifyTaskInvolves
  | INotificationMeetingStageTimeLimitEnd;

export interface ITeamNotification {
  __typename: 'TeamNotification';
  id: string | null;
  type: NotificationEnum | null;
}

/**
 * A notification alerting the user that they have been promoted (to team or org leader)
 */
export interface INotifyPromoteToOrgLeader {
  __typename: 'NotifyPromoteToOrgLeader';
  organization: IOrganization;

  /**
   * A shortid for the notification
   */
  id: string;

  /**
   * UNREAD if new, READ if viewer has seen it, CLICKED if viewed clicked it
   */
  status: NotificationStatusEnum;

  /**
   * The datetime to activate the notification & send it to the client
   */
  createdAt: any;
  type: NotificationEnum;

  /**
   * *The userId that should see this notification
   */
  userId: string;
}

/**
 * An action meeting
 */
export interface IActionMeeting {
  __typename: 'ActionMeeting';

  /**
   * The unique meeting id. shortid.
   */
  id: string;

  /**
   * The timestamp the meeting was created
   */
  createdAt: any;

  /**
   * The id of the user that created the meeting
   */
  createdBy: string;

  /**
   * The user that created the meeting
   */
  createdByUser: IUser;

  /**
   * The timestamp the meeting officially ended
   */
  endedAt: any | null;

  /**
   * The location of the facilitator in the meeting
   */
  facilitatorStageId: string;

  /**
   * The userId (or anonymousId) of the most recent facilitator
   */
  facilitatorUserId: string;

  /**
   * The facilitator team member
   */
  facilitator: ITeamMember;

  /**
   * The team members that were active during the time of the meeting
   */
  meetingMembers: Array<IActionMeetingMember>;

  /**
   * The auto-incrementing meeting number for the team
   */
  meetingNumber: number;
  meetingType: MeetingTypeEnum;

  /**
   * The name of the meeting
   */
  name: string;

  /**
   * The organization this meeting belongs to
   */
  organization: IOrganization;

  /**
   * The phases the meeting will go through, including all phase-specific state
   */
  phases: Array<NewMeetingPhase>;

  /**
   * true if should show the org the conversion modal, else false
   */
  showConversionModal: boolean;

  /**
   * The time the meeting summary was emailed to the team
   */
  summarySentAt: any | null;

  /**
   * foreign key for team
   */
  teamId: string;

  /**
   * The team that ran the meeting
   */
  team: ITeam;

  /**
   * The last time a meeting was updated (stage completed, finished, etc)
   */
  updatedAt: any | null;

  /**
   * The action meeting member of the viewer
   */
  viewerMeetingMember: IActionMeetingMember | null;

  /**
   * A single agenda item
   */
  agendaItem: IAgendaItem | null;

  /**
   * The number of agenda items generated in the meeting
   */
  agendaItemCount: number;

  /**
   * All of the agenda items for the meeting
   */
  agendaItems: Array<IAgendaItem>;

  /**
   * The number of comments generated in the meeting
   */
  commentCount: number;

  /**
   * The settings that govern the action meeting
   */
  settings: IActionMeetingSettings;

  /**
   * The number of tasks generated in the meeting
   */
  taskCount: number;

  /**
   * The tasks created within the meeting
   */
  tasks: Array<ITask>;
}

export interface IAgendaItemOnActionMeetingArguments {
  agendaItemId: string;
}

/**
 * All the meeting specifics for a user in a retro meeting
 */
export interface IActionMeetingMember {
  __typename: 'ActionMeetingMember';

  /**
   * A composite of userId::meetingId
   */
  id: string;

  /**
   * true if present, false if absent, else null
   * @deprecated "Members are checked in when they enter the meeting now & not created beforehand"
   */
  isCheckedIn: boolean | null;
  meetingId: string;
  meetingType: MeetingTypeEnum;
  teamId: string;
  teamMember: ITeamMember;
  user: IUser;
  userId: string;

  /**
   * The last time a meeting was updated (stage completed, finished, etc)
   */
  updatedAt: any;

  /**
   * The tasks marked as done in the meeting
   */
  doneTasks: Array<ITask>;

  /**
   * The tasks assigned to members during the meeting
   */
  tasks: Array<ITask>;
}

/**
 * The retro-specific meeting settings
 */
export interface IPokerMeetingSettings {
  __typename: 'PokerMeetingSettings';
  id: string;

  /**
   * The type of meeting these settings apply to
   */
  meetingType: MeetingTypeEnum;

  /**
   * The broad phase types that will be addressed during the meeting
   */
  phaseTypes: Array<NewMeetingPhaseTypeEnum>;

  /**
   * FK
   */
  teamId: string;

  /**
   * The team these settings belong to
   */
  team: ITeam;

  /**
   * FK. The template that will be used to start the poker meeting
   */
  selectedTemplateId: string;

  /**
   * The template that will be used to start the Poker meeting
   */
  selectedTemplate: IPokerTemplate;

  /**
   * The list of templates used to start a Poker meeting
   */
  teamTemplates: Array<IPokerTemplate>;

  /**
   * The list of templates shared across the organization to start a Poker meeting
   */
  organizationTemplates: IPokerTemplateConnection;

  /**
   * The list of templates shared across the organization to start a Poker meeting
   */
  publicTemplates: IPokerTemplateConnection;
}

export interface IOrganizationTemplatesOnPokerMeetingSettingsArguments {
  first: number;

  /**
   * The cursor, which is the templateId
   */
  after?: string | null;
}

export interface IPublicTemplatesOnPokerMeetingSettingsArguments {
  first: number;

  /**
   * The cursor, which is the templateId
   */
  after?: string | null;
}

/**
 * A connection to a list of items.
 */
export interface IPokerTemplateConnection {
  __typename: 'PokerTemplateConnection';

  /**
   * Information to aid in pagination.
   */
  pageInfo: IPageInfo;

  /**
   * A list of edges.
   */
  edges: Array<IPokerTemplateEdge>;
}

/**
 * An edge in a connection.
 */
export interface IPokerTemplateEdge {
  __typename: 'PokerTemplateEdge';

  /**
   * The item at the end of the edge
   */
  node: IPokerTemplate;

  /**
   * A cursor for use in pagination
   */
  cursor: string;
}

/**
 * A retrospective meeting
 */
export interface IRetrospectiveMeeting {
  __typename: 'RetrospectiveMeeting';

  /**
   * The unique meeting id. shortid.
   */
  id: string;

  /**
   * The timestamp the meeting was created
   */
  createdAt: any;

  /**
   * The id of the user that created the meeting
   */
  createdBy: string;

  /**
   * The user that created the meeting
   */
  createdByUser: IUser;

  /**
   * The timestamp the meeting officially ended
   */
  endedAt: any | null;

  /**
   * The location of the facilitator in the meeting
   */
  facilitatorStageId: string;

  /**
   * The userId (or anonymousId) of the most recent facilitator
   */
  facilitatorUserId: string;

  /**
   * The facilitator team member
   */
  facilitator: ITeamMember;

  /**
   * The team members that were active during the time of the meeting
   */
  meetingMembers: Array<IRetrospectiveMeetingMember>;

  /**
   * The auto-incrementing meeting number for the team
   */
  meetingNumber: number;
  meetingType: MeetingTypeEnum;

  /**
   * The name of the meeting
   */
  name: string;

  /**
   * The organization this meeting belongs to
   */
  organization: IOrganization;

  /**
   * The phases the meeting will go through, including all phase-specific state
   */
  phases: Array<NewMeetingPhase>;

  /**
   * true if should show the org the conversion modal, else false
   */
  showConversionModal: boolean;

  /**
   * The time the meeting summary was emailed to the team
   */
  summarySentAt: any | null;
  teamId: string;

  /**
   * The team that ran the meeting
   */
  team: ITeam;

  /**
   * The last time a meeting was updated (stage completed, finished, etc)
   */
  updatedAt: any | null;

  /**
   * The retrospective meeting member of the viewer
   */
  viewerMeetingMember: IRetrospectiveMeetingMember | null;

  /**
   * the threshold used to achieve the autogroup. Useful for model tuning. Serves as a flag if autogroup was used.
   */
  autoGroupThreshold: number | null;

  /**
   * The number of comments generated in the meeting
   */
  commentCount: number;

  /**
   * the number of votes allowed for each participant to cast on a single group
   */
  maxVotesPerGroup: number;

  /**
   * the next smallest distance threshold to guarantee at least 1 more grouping will be achieved
   */
  nextAutoGroupThreshold: number | null;

  /**
   * The number of reflections generated in the meeting
   */
  reflectionCount: number;

  /**
   * a single reflection group
   */
  reflectionGroup: IRetroReflectionGroup | null;

  /**
   * The grouped reflections
   */
  reflectionGroups: Array<IRetroReflectionGroup>;

  /**
   * The settings that govern the retrospective meeting
   */
  settings: IRetrospectiveMeetingSettings;

  /**
   * The number of tasks generated in the meeting
   */
  taskCount: number;

  /**
   * The tasks created within the meeting
   */
  tasks: Array<ITask>;

  /**
   * The ID of the template used for the meeting
   */
  templateId: string;

  /**
   * The number of topics generated in the meeting
   */
  topicCount: number;

  /**
   * the total number of votes allowed for each participant
   */
  totalVotes: number;

  /**
   * The sum total of the votes remaining for the meeting members that are present in the meeting
   */
  votesRemaining: number;
}

export interface IReflectionGroupOnRetrospectiveMeetingArguments {
  reflectionGroupId: string;
}

export interface IReflectionGroupsOnRetrospectiveMeetingArguments {
  sortBy?: ReflectionGroupSortEnum | null;
}

/**
 * sorts for the reflection group. default is sortOrder. sorting by voteCount filters out items without votes.
 */
export const enum ReflectionGroupSortEnum {
  voteCount = 'voteCount',
  stageOrder = 'stageOrder',
}

/**
 * All the meeting specifics for a user in a retro meeting
 */
export interface IRetrospectiveMeetingMember {
  __typename: 'RetrospectiveMeetingMember';

  /**
   * A composite of userId::meetingId
   */
  id: string;

  /**
   * true if present, false if absent, else null
   * @deprecated "Members are checked in when they enter the meeting now & not created beforehand"
   */
  isCheckedIn: boolean | null;
  meetingId: string;
  meetingType: MeetingTypeEnum;
  teamId: string;
  teamMember: ITeamMember;
  user: IUser;
  userId: string;

  /**
   * The last time a meeting was updated (stage completed, finished, etc)
   */
  updatedAt: any;

  /**
   * The tasks assigned to members during the meeting
   */
  tasks: Array<ITask>;
  votesRemaining: number;
}

/**
 * The retro-specific meeting settings
 */
export interface IRetrospectiveMeetingSettings {
  __typename: 'RetrospectiveMeetingSettings';
  id: string;

  /**
   * The type of meeting these settings apply to
   */
  meetingType: MeetingTypeEnum;

  /**
   * The broad phase types that will be addressed during the meeting
   */
  phaseTypes: Array<NewMeetingPhaseTypeEnum>;

  /**
   * FK
   */
  teamId: string;

  /**
   * The team these settings belong to
   */
  team: ITeam;

  /**
   * The total number of votes each team member receives for the voting phase
   */
  totalVotes: number;

  /**
   * The maximum number of votes a team member can vote for a single reflection group
   */
  maxVotesPerGroup: number;

  /**
   * FK. The template that will be used to start the retrospective
   */
  selectedTemplateId: string;

  /**
   * The template that will be used to start the retrospective
   */
  selectedTemplate: IReflectTemplate;

  /**
   * The list of templates used to start a retrospective
   */
  reflectTemplates: Array<IReflectTemplate>;

  /**
   * The list of templates used to start a retrospective
   */
  teamTemplates: Array<IReflectTemplate>;

  /**
   * The list of templates shared across the organization to start a retrospective
   */
  organizationTemplates: IReflectTemplateConnection;

  /**
   * The list of templates shared across the organization to start a retrospective
   */
  publicTemplates: IReflectTemplateConnection;
}

export interface IOrganizationTemplatesOnRetrospectiveMeetingSettingsArguments {
  first: number;

  /**
   * The cursor, which is the templateId
   */
  after?: string | null;
}

export interface IPublicTemplatesOnRetrospectiveMeetingSettingsArguments {
  first: number;

  /**
   * The cursor, which is the templateId
   */
  after?: string | null;
}

/**
 * A connection to a list of items.
 */
export interface IReflectTemplateConnection {
  __typename: 'ReflectTemplateConnection';

  /**
   * Information to aid in pagination.
   */
  pageInfo: IPageInfo;

  /**
   * A list of edges.
   */
  edges: Array<IReflectTemplateEdge>;
}

/**
 * An edge in a connection.
 */
export interface IReflectTemplateEdge {
  __typename: 'ReflectTemplateEdge';

  /**
   * The item at the end of the edge
   */
  node: IReflectTemplate;

  /**
   * A cursor for use in pagination
   */
  cursor: string;
}

/**
 * a suggestion to invite others to your team
 */
export interface ISuggestedActionInviteYourTeam {
  __typename: 'SuggestedActionInviteYourTeam';

  /**
   * shortid
   */
  id: string;

  /**
   * * The timestamp the action was created at
   */
  createdAt: any;

  /**
   * The priority of the suggested action compared to other suggested actions (smaller number is higher priority)
   */
  priority: number | null;

  /**
   * * The timestamp the action was removed at
   */
  removedAt: any;

  /**
   * The specific type of suggested action
   */
  type: SuggestedActionTypeEnum;

  /**
   * * The userId this action is for
   */
  userId: string;

  /**
   * The user than can see this event
   */
  user: IUser;

  /**
   * The teamId that we suggest you should invite people to
   */
  teamId: string;

  /**
   * The team you should invite people to
   */
  team: ITeam;
}

/**
 * a suggestion to try a retro with your team
 */
export interface ISuggestedActionTryRetroMeeting {
  __typename: 'SuggestedActionTryRetroMeeting';

  /**
   * shortid
   */
  id: string;

  /**
   * * The timestamp the action was created at
   */
  createdAt: any;

  /**
   * The priority of the suggested action compared to other suggested actions (smaller number is higher priority)
   */
  priority: number | null;

  /**
   * * The timestamp the action was removed at
   */
  removedAt: any;

  /**
   * The specific type of suggested action
   */
  type: SuggestedActionTypeEnum;

  /**
   * * The userId this action is for
   */
  userId: string;

  /**
   * The user than can see this event
   */
  user: IUser;

  /**
   * fk
   */
  teamId: string;

  /**
   * The team you should run a retro with
   */
  team: ITeam;
}

/**
 * a suggestion to try a retro with your team
 */
export interface ISuggestedActionTryActionMeeting {
  __typename: 'SuggestedActionTryActionMeeting';

  /**
   * shortid
   */
  id: string;

  /**
   * * The timestamp the action was created at
   */
  createdAt: any;

  /**
   * The priority of the suggested action compared to other suggested actions (smaller number is higher priority)
   */
  priority: number | null;

  /**
   * * The timestamp the action was removed at
   */
  removedAt: any;

  /**
   * The specific type of suggested action
   */
  type: SuggestedActionTypeEnum;

  /**
   * * The userId this action is for
   */
  userId: string;

  /**
   * The user than can see this event
   */
  user: IUser;

  /**
   * fk
   */
  teamId: string;

  /**
   * The team you should run an action meeting with
   */
  team: ITeam;
}

/**
 * a suggestion to try a retro with your team
 */
export interface ISuggestedActionCreateNewTeam {
  __typename: 'SuggestedActionCreateNewTeam';

  /**
   * shortid
   */
  id: string;

  /**
   * * The timestamp the action was created at
   */
  createdAt: any;

  /**
   * The priority of the suggested action compared to other suggested actions (smaller number is higher priority)
   */
  priority: number | null;

  /**
   * * The timestamp the action was removed at
   */
  removedAt: any;

  /**
   * The specific type of suggested action
   */
  type: SuggestedActionTypeEnum;

  /**
   * * The userId this action is for
   */
  userId: string;

  /**
   * The user than can see this event
   */
  user: IUser;
}

/**
 * a suggestion to invite others to your team
 */
export interface ISuggestedActionTryTheDemo {
  __typename: 'SuggestedActionTryTheDemo';

  /**
   * shortid
   */
  id: string;

  /**
   * * The timestamp the action was created at
   */
  createdAt: any;

  /**
   * The priority of the suggested action compared to other suggested actions (smaller number is higher priority)
   */
  priority: number | null;

  /**
   * * The timestamp the action was removed at
   */
  removedAt: any;

  /**
   * The specific type of suggested action
   */
  type: SuggestedActionTypeEnum;

  /**
   * * The userId this action is for
   */
  userId: string;

  /**
   * The user than can see this event
   */
  user: IUser;
}

/**
 * An event triggered whenever a team is created
 */
export interface ITimelineEventTeamCreated {
  __typename: 'TimelineEventTeamCreated';

  /**
   * shortid
   */
  id: string;

  /**
   * * The timestamp the event was created at
   */
  createdAt: any;

  /**
   * the number of times the user has interacted with (ie clicked) this event
   */
  interactionCount: number;

  /**
   * true if the timeline event is active, false if archived
   */
  isActive: boolean;

  /**
   * The orgId this event is associated with
   */
  orgId: string;

  /**
   * The organization this event is associated with
   */
  organization: IOrganization | null;

  /**
   * the number of times the user has seen this event
   */
  seenCount: number;

  /**
   * The teamId this event is associated with. Null if not traceable to one team
   */
  teamId: string;

  /**
   * The team that can see this event
   */
  team: ITeam;

  /**
   * The specific type of event
   */
  type: TimelineEventEnum;

  /**
   * * The userId that can see this event
   */
  userId: string;

  /**
   * The user than can see this event
   */
  user: IUser;
}

/**
 * An event for joining the app
 */
export interface ITimelineEventJoinedParabol {
  __typename: 'TimelineEventJoinedParabol';

  /**
   * shortid
   */
  id: string;

  /**
   * * The timestamp the event was created at
   */
  createdAt: any;

  /**
   * the number of times the user has interacted with (ie clicked) this event
   */
  interactionCount: number;

  /**
   * true if the timeline event is active, false if archived
   */
  isActive: boolean;

  /**
   * The orgId this event is associated with. Null if not traceable to one org
   */
  orgId: string | null;

  /**
   * The organization this event is associated with
   */
  organization: IOrganization | null;

  /**
   * the number of times the user has seen this event
   */
  seenCount: number;

  /**
   * The teamId this event is associated with. Null if not traceable to one team
   */
  teamId: string | null;

  /**
   * The team that can see this event
   */
  team: ITeam | null;

  /**
   * The specific type of event
   */
  type: TimelineEventEnum;

  /**
   * * The userId that can see this event
   */
  userId: string;

  /**
   * The user than can see this event
   */
  user: IUser;
}

/**
 * An event for a completed retro meeting
 */
export interface ITimelineEventCompletedRetroMeeting {
  __typename: 'TimelineEventCompletedRetroMeeting';

  /**
   * shortid
   */
  id: string;

  /**
   * * The timestamp the event was created at
   */
  createdAt: any;

  /**
   * the number of times the user has interacted with (ie clicked) this event
   */
  interactionCount: number;

  /**
   * true if the timeline event is active, false if archived
   */
  isActive: boolean;

  /**
   * The orgId this event is associated with
   */
  orgId: string;

  /**
   * The organization this event is associated with
   */
  organization: IOrganization | null;

  /**
   * the number of times the user has seen this event
   */
  seenCount: number;

  /**
   * The teamId this event is associated with
   */
  teamId: string;

  /**
   * The team that can see this event
   */
  team: ITeam;

  /**
   * The specific type of event
   */
  type: TimelineEventEnum;

  /**
   * * The userId that can see this event
   */
  userId: string;

  /**
   * The user than can see this event
   */
  user: IUser;

  /**
   * The meeting that was completed
   */
  meeting: IRetrospectiveMeeting;

  /**
   * The meetingId that was completed
   */
  meetingId: string;
}

/**
 * An event for a completed action meeting
 */
export interface ITimelineEventCompletedActionMeeting {
  __typename: 'TimelineEventCompletedActionMeeting';

  /**
   * shortid
   */
  id: string;

  /**
   * * The timestamp the event was created at
   */
  createdAt: any;

  /**
   * the number of times the user has interacted with (ie clicked) this event
   */
  interactionCount: number;

  /**
   * true if the timeline event is active, false if archived
   */
  isActive: boolean;

  /**
   * The orgId this event is associated with
   */
  orgId: string;

  /**
   * The organization this event is associated with
   */
  organization: IOrganization | null;

  /**
   * the number of times the user has seen this event
   */
  seenCount: number;

  /**
   * The teamId this event is associated with
   */
  teamId: string;

  /**
   * The team that can see this event
   */
  team: ITeam;

  /**
   * The specific type of event
   */
  type: TimelineEventEnum;

  /**
   * * The userId that can see this event
   */
  userId: string;

  /**
   * The user than can see this event
   */
  user: IUser;

  /**
   * The meeting that was completed
   */
  meeting: IActionMeeting;

  /**
   * The meetingId that was completed, null if legacyMeetingId is present
   */
  meetingId: string;
}

/**
 * An event for a completed poker meeting
 */
export interface ITimelineEventPokerComplete {
  __typename: 'TimelineEventPokerComplete';

  /**
   * shortid
   */
  id: string;

  /**
   * * The timestamp the event was created at
   */
  createdAt: any;

  /**
   * the number of times the user has interacted with (ie clicked) this event
   */
  interactionCount: number;

  /**
   * true if the timeline event is active, false if archived
   */
  isActive: boolean;

  /**
   * The orgId this event is associated with
   */
  orgId: string;

  /**
   * The organization this event is associated with
   */
  organization: IOrganization | null;

  /**
   * the number of times the user has seen this event
   */
  seenCount: number;

  /**
   * The teamId this event is associated with
   */
  teamId: string;

  /**
   * The team that can see this event
   */
  team: ITeam;

  /**
   * The specific type of event
   */
  type: TimelineEventEnum;

  /**
   * * The userId that can see this event
   */
  userId: string;

  /**
   * The user than can see this event
   */
  user: IUser;

  /**
   * The meeting that was completed
   */
  meeting: IPokerMeeting;

  /**
   * The meetingId that was completed
   */
  meetingId: string;
}

/**
 * A Poker meeting
 */
export interface IPokerMeeting {
  __typename: 'PokerMeeting';

  /**
   * The unique meeting id. shortid.
   */
  id: string;

  /**
   * The timestamp the meeting was created
   */
  createdAt: any;

  /**
   * The id of the user that created the meeting
   */
  createdBy: string;

  /**
   * The user that created the meeting
   */
  createdByUser: IUser;

  /**
   * The timestamp the meeting officially ended
   */
  endedAt: any | null;

  /**
   * The location of the facilitator in the meeting
   */
  facilitatorStageId: string;

  /**
   * The userId (or anonymousId) of the most recent facilitator
   */
  facilitatorUserId: string;

  /**
   * The facilitator team member
   */
  facilitator: ITeamMember;

  /**
   * The team members that were active during the time of the meeting
   */
  meetingMembers: Array<IPokerMeetingMember>;

  /**
   * The auto-incrementing meeting number for the team
   */
  meetingNumber: number;
  meetingType: MeetingTypeEnum;

  /**
   * The name of the meeting
   */
  name: string;

  /**
   * The organization this meeting belongs to
   */
  organization: IOrganization;

  /**
   * The phases the meeting will go through, including all phase-specific state
   */
  phases: Array<NewMeetingPhase>;

  /**
   * true if should show the org the conversion modal, else false
   */
  showConversionModal: boolean;

  /**
   * The time the meeting summary was emailed to the team
   */
  summarySentAt: any | null;
  teamId: string;

  /**
   * The team that ran the meeting
   */
  team: ITeam;

  /**
   * The last time a meeting was updated (stage completed, finished, etc)
   */
  updatedAt: any | null;

  /**
   * The Poker meeting member of the viewer
   */
  viewerMeetingMember: IPokerMeetingMember | null;

  /**
   * The number of comments generated in the meeting
   */
  commentCount: number;

  /**
   * The number of stories scored during a meeting
   */
  storyCount: number;

  /**
   * The settings that govern the Poker meeting
   */
  settings: IPokerMeetingSettings;

  /**
   * A single story created in a Sprint Poker meeting
   */
  story: ITask | null;

  /**
   * The ID of the template used for the meeting. Note the underlying template could have changed!
   * @deprecated "The underlying template could be mutated. Use templateRefId"
   */
  templateId: string;

  /**
   * The ID of the immutable templateRef used for the meeting
   */
  templateRefId: string;
}

export interface IStoryOnPokerMeetingArguments {
  storyId: string;
}

/**
 * All the meeting specifics for a user in a poker meeting
 */
export interface IPokerMeetingMember {
  __typename: 'PokerMeetingMember';

  /**
   * A composite of userId::meetingId
   */
  id: string;

  /**
   * true if present, false if absent, else null
   * @deprecated "Members are checked in when they enter the meeting now & not created beforehand"
   */
  isCheckedIn: boolean | null;
  meetingId: string;
  meetingType: MeetingTypeEnum;
  teamId: string;
  teamMember: ITeamMember;
  user: IUser;
  userId: string;

  /**
   * The last time a meeting was updated (stage completed, finished, etc)
   */
  updatedAt: any;

  /**
   * true if the user is not voting and does not want their vote to count towards aggregates
   */
  isSpectating: boolean;
}

/**
 * The action-specific meeting settings
 */
export interface IActionMeetingSettings {
  __typename: 'ActionMeetingSettings';
  id: string;

  /**
   * The type of meeting these settings apply to
   */
  meetingType: MeetingTypeEnum;

  /**
   * The broad phase types that will be addressed during the meeting
   */
  phaseTypes: Array<NewMeetingPhaseTypeEnum>;

  /**
   * FK
   */
  teamId: string;

  /**
   * The team these settings belong to
   */
  team: ITeam;
}

/**
 * A comment on a thread
 */
export interface IComment {
  __typename: 'Comment';

  /**
   * shortid
   */
  id: string;

  /**
   * The rich text body of the item, if inactive, a tombstone text
   */
  content: string;

  /**
   * The timestamp the item was created
   */
  createdAt: any;

  /**
   * The userId that created the item, null if anonymous
   */
  createdBy: string | null;

  /**
   * The user that created the item, null if anonymous
   */
  createdByUser: IUser | null;

  /**
   * the replies to this threadable item
   */
  replies: Array<Threadable>;

  /**
   * The FK of the discussion this task was created in. Null if task was not created in a discussion
   */
  discussionId: string | null;

  /**
   * the parent, if this threadable is a reply, else null
   */
  threadParentId: string | null;

  /**
   * the order of this threadable, relative to threadParentId
   */
  threadSortOrder: number | null;

  /**
   * The timestamp the item was updated
   */
  updatedAt: any;

  /**
   * All the reactjis for the given reflection
   */
  reactjis: Array<IReactji>;

  /**
   * true if the agenda item has not been processed or deleted
   */
  isActive: boolean;

  /**
   * true if the comment is anonymous, else false
   */
  isAnonymous: boolean;

  /**
   * true if the viewer wrote this comment, else false
   */
  isViewerComment: boolean;
}

export interface IQuery {
  __typename: 'Query';
  viewer: IUser;
  getDemoEntities: IGetDemoEntitiesPayload;
  massInvitation: IMassInvitationPayload;
  verifiedInvitation: IVerifiedInvitationPayload;
  SAMLIdP: string | null;
}

export interface IGetDemoEntitiesOnQueryArguments {
  /**
   * the reflection bodies to entitize
   */
  text: string;
}

export interface IMassInvitationOnQueryArguments {
  /**
   * The mass invitation token
   */
  token: string;
}

export interface IVerifiedInvitationOnQueryArguments {
  /**
   * The invitation token
   */
  token: string;
}

export interface ISAMLIdPOnQueryArguments {
  /**
   * the email associated with a SAML login
   */
  email: string;

  /**
   * true if the user was invited, else false
   */
  isInvited?: boolean | null;
}

export interface IGetDemoEntitiesPayload {
  __typename: 'GetDemoEntitiesPayload';
  error: IStandardMutationError | null;
  entities: Array<IGoogleAnalyzedEntity> | null;
}

export interface IMassInvitationPayload {
  __typename: 'MassInvitationPayload';
  errorType: TeamInvitationErrorEnum | null;

  /**
   * The name of the person that sent the invitation, present if errorType is expired
   */
  inviterName: string | null;

  /**
   * The teamId from the token
   */
  teamId: string | null;

  /**
   * name of the inviting team, present if invitation exists
   */
  teamName: string | null;
}

/**
 * The reason the invitation failed
 */
export const enum TeamInvitationErrorEnum {
  accepted = 'accepted',
  expired = 'expired',
  notFound = 'notFound',
}

export interface IVerifiedInvitationPayload {
  __typename: 'VerifiedInvitationPayload';
  errorType: TeamInvitationErrorEnum | null;

  /**
   * The name of the person that sent the invitation, present if errorType is expired
   */
  inviterName: string | null;

  /**
   * The email of the person that send the invitation, present if errorType is expired
   */
  inviterEmail: string | null;

  /**
   * true if the mx record is hosted by google, else falsy
   */
  isGoogle: boolean | null;

  /**
   * a string to redirect to the sso IdP, else null
   */
  ssoURL: string | null;

  /**
   * The valid invitation, if any
   */
  teamInvitation: ITeamInvitation | null;

  /**
   * name of the inviting team, present if invitation exists
   */
  teamName: string | null;
  meetingId: string | null;
  meetingName: string | null;
  meetingType: MeetingTypeEnum | null;

  /**
   * The userId of the invitee, if already a parabol user
   */
  userId: string | null;

  /**
   * The invitee, if already a parabol user, present if errorType is null
   */
  user: IUser | null;
}

export interface IMutation {
  __typename: 'Mutation';

  /**
   * Redeem an invitation token for a logged in user
   */
  acceptTeamInvitation: IAcceptTeamInvitationPayload;

  /**
   * Create a new agenda item
   */
  addAgendaItem: IAddAgendaItemPayload | null;
  addAtlassianAuth: IAddAtlassianAuthPayload;

  /**
   * Add a comment to a discussion
   */
  addComment: AddCommentPayload;

  /**
   * Add a new poker template with a default dimension created
   */
  addPokerTemplate: IAddPokerTemplatePayload;

  /**
   * Add a new dimension for the poker template
   */
  addPokerTemplateDimension: IAddPokerTemplateDimensionPayload;

  /**
   * Add a new scale for the poker template
   */
  addPokerTemplateScale: IAddPokerTemplateScalePayload;

  /**
   * Add a new scale value for a scale in a poker template
   */
  addPokerTemplateScaleValue: IAddPokerTemplateScaleValuePayload;

  /**
   * Add or remove a reactji from a reactable
   */
  addReactjiToReactable: AddReactjiToReactablePayload;

  /**
   * Add a new template full of prompts
   */
  addReflectTemplate: IAddReflectTemplatePayload | null;

  /**
   * Add a new template full of prompts
   */
  addReflectTemplatePrompt: IAddReflectTemplatePromptPayload | null;
  addSlackAuth: IAddSlackAuthPayload;

  /**
   * Give someone advanced features in a flag
   */
  addFeatureFlag: IAddFeatureFlagPayload;
  addGitHubAuth: IAddGitHubAuthPayload;

  /**
   * Create a new team and add the first team member
   */
  addOrg: IAddOrgPayload;

  /**
   * Create a new team and add the first team member
   */
  addTeam: IAddTeamPayload;
  archiveOrganization: IArchiveOrganizationPayload;
  archiveTeam: IArchiveTeamPayload;

  /**
   * Archive a timeline event
   */
  archiveTimelineEvent: ArchiveTimelineEventPayload;

  /**
   * Automatically group reflections
   */
  autoGroupReflections: IAutoGroupReflectionsPayload | null;

  /**
   * Change the team a task is associated with. Also copy the viewers integration if necessary.
   */
  changeTaskTeam: IChangeTaskTeamPayload | null;

  /**
   * set the interaction status of a notifcation
   */
  setNotificationStatus: ISetNotificationStatusPayload | null;

  /**
   * for troubleshooting by admins, create a JWT for a given userId
   */
  createImposterToken: ICreateImposterTokenPayload;
  createTaskIntegration: ICreateTaskIntegrationPayload | null;

  /**
   * Create a new mass inivtation and optionally void old ones
   */
  createMassInvitation: CreateMassInvitationPayload;

  /**
   * Generate a new OAuth1 request token and encode it in the authorization URL to start an oauth1 flow
   */
  createOAuth1AuthorizeUrl: ICreateOAuth1AuthorizationURLPayload | null;

  /**
   * Create a new reflection
   */
  createReflection: ICreateReflectionPayload | null;

  /**
   * Create a new task, triggering a CreateCard for other viewers
   */
  createTask: ICreateTaskPayload;

  /**
   * Delete a comment from a discussion
   */
  deleteComment: DeleteCommentPayload;

  /**
   * Delete (not archive!) a task
   */
  deleteTask: IDeleteTaskPayload | null;

  /**
   * Delete a user, removing them from all teams and orgs
   */
  deleteUser: IDeleteUserPayload;

  /**
   * Deny a user from joining via push invitation
   */
  denyPushInvitation: IDenyPushInvitationPayload | null;

  /**
   * Redeem an invitation token for a logged in user
   */
  dismissNewFeature: IDismissNewFeaturePayload;

  /**
   * Dismiss a suggested action
   */
  dismissSuggestedAction: IDismissSuggestedActionPayload;

  /**
   * Downgrade a paid account to the personal service
   */
  downgradeToPersonal: IDowngradeToPersonalPayload | null;

  /**
   * Changes the priority of the discussion topics
   */
  dragDiscussionTopic: IDragDiscussionTopicPayload | null;

  /**
   * Changes the priority of the estimating tasks
   */
  dragEstimatingTask: DragEstimatingTaskPayload;

  /**
   * Send an email to reset a password
   */
  emailPasswordReset: EmailPasswordResetPayload;

  /**
   * Track which users are commenting
   */
  editCommenting: EditCommentingPayload | null;

  /**
   * Finish a sprint poker meeting
   */
  endSprintPoker: EndSprintPokerPayload;

  /**
   * Changes the editing state of a user for a phase item
   */
  editReflection: IEditReflectionPayload | null;

  /**
   * Announce to everyone that you are editing a task
   */
  editTask: IEditTaskPayload | null;

  /**
   * Finish a check-in meeting
   */
  endCheckIn: EndCheckInPayload;

  /**
   * Broadcast that the viewer stopped dragging a reflection
   */
  endDraggingReflection: IEndDraggingReflectionPayload | null;

  /**
   * Finish a retrospective meeting
   */
  endRetrospective: EndRetrospectivePayload;

  /**
   * flag a viewer as ready to advance to the next stage of a meeting
   */
  flagReadyToAdvance: FlagReadyToAdvancePayload;

  /**
   * pauses the subscription for a single user
   */
  inactivateUser: IInactivateUserPayload | null;

  /**
   * Invalidate all sessions by blacklisting all JWTs issued before now
   */
  invalidateSessions: IInvalidateSessionsPayload;

  /**
   * Send a team invitation to an email address
   */
  inviteToTeam: IInviteToTeamPayload;

  /**
   * Sign up or login using Google
   */
  loginWithGoogle: ILoginWithGooglePayload;

  /**
   * Login using an email address and password
   */
  loginWithPassword: ILoginWithPasswordPayload;

  /**
   * Move a template dimension
   */
  movePokerTemplateDimension: IMovePokerTemplateDimensionPayload;

  /**
   * Move a reflect template
   */
  moveReflectTemplatePrompt: IMoveReflectTemplatePromptPayload | null;

  /**
   * Move a team to a different org. Requires billing leader rights on both orgs!
   */
  moveTeamToOrg: string | null;

  /**
   * update a meeting by marking an item complete and setting the facilitator location
   */
  navigateMeeting: INavigateMeetingPayload;

  /**
   * Check a member in as present or absent
   * @deprecated "Members now join lazily and joining means they are present"
   */
  newMeetingCheckIn: INewMeetingCheckInPayload | null;

  /**
   * Increment the count of times the org has clicked pay later
   */
  payLater: IPayLaterPayload;

  /**
   * Add or remove a task and its estimate phase from the meeting
   */
  persistJiraSearchQuery: PersistJiraSearchQueryPayload;

  /**
   * Request to be invited to a team in real time
   */
  pushInvitation: IPushInvitationPayload | null;

  /**
   * Change a facilitator while the meeting is in progress
   */
  promoteNewMeetingFacilitator: IPromoteNewMeetingFacilitatorPayload | null;

  /**
   * Promote another team member to be the leader
   */
  promoteToTeamLead: IPromoteToTeamLeadPayload | null;

  /**
   * Update the description of a reflection prompt
   */
  reflectTemplatePromptUpdateDescription: IReflectTemplatePromptUpdateDescriptionPayload | null;

  /**
   * Update the description of a poker template dimension
   */
  pokerTemplateDimensionUpdateDescription: IPokerTemplateDimensionUpdateDescriptionPayload | null;
  reflectTemplatePromptUpdateGroupColor: IReflectTemplatePromptUpdateGroupColorPayload | null;

  /**
   * Remove an agenda item
   */
  removeAgendaItem: IRemoveAgendaItemPayload | null;

  /**
   * Disconnect a team member from atlassian
   */
  removeAtlassianAuth: IRemoveAtlassianAuthPayload;

  /**
   * Disconnect a team member from GitHub
   */
  removeGitHubAuth: IRemoveGitHubAuthPayload;

  /**
   * Remove a user from an org
   */
  removeOrgUser: IRemoveOrgUserPayload | null;

  /**
   * Remove a poker meeting template
   */
  removePokerTemplate: IRemovePokerTemplatePayload;

  /**
   * Remove a template full of prompts
   */
  removeReflectTemplate: IRemoveReflectTemplatePayload | null;

  /**
   * Remove a prompt from a template
   */
  removeReflectTemplatePrompt: IRemoveReflectTemplatePromptPayload | null;

  /**
   * Remove a dimension from a template
   */
  removePokerTemplateDimension: IRemovePokerTemplateDimensionPayload;

  /**
   * Rename a meeting
   */
  renameMeeting: RenameMeetingPayload;

  /**
   * Rename a meeting template
   */
  renameMeetingTemplate: IRenameMeetingTemplatePayload | null;

  /**
   * Rename a reflect template prompt
   */
  renameReflectTemplatePrompt: IRenameReflectTemplatePromptPayload | null;

  /**
   * Rename a poker template dimension
   */
  renamePokerTemplateDimension: IRenamePokerTemplateDimensionPayload;

  /**
   * Rename a poker template scale
   */
  renamePokerTemplateScale: IRenamePokerTemplateScalePayload;

  /**
   * Remove a scale from a template
   */
  removePokerTemplateScale: IRemovePokerTemplateScalePayload;

  /**
   * Remove a scale value from the scale of a template
   */
  removePokerTemplateScaleValue: IRemovePokerTemplateScaleValuePayload;

  /**
   * Remove a reflection
   */
  removeReflection: IRemoveReflectionPayload | null;

  /**
   * Disconnect a team member from Slack
   */
  removeSlackAuth: IRemoveSlackAuthPayload;

  /**
   * Remove a team member from the team
   */
  removeTeamMember: IRemoveTeamMemberPayload | null;

  /**
   * Reset the password for an account
   */
  resetPassword: IResetPasswordPayload;

  /**
   * Reset a retro meeting to group stage
   */
  resetRetroMeetingToGroupStage: IResetRetroMeetingToGroupStagePayload;

  /**
   * track an event in segment, like when errors are hit
   */
  segmentEventTrack: boolean | null;

  /**
   * Set the selected template for the upcoming retro meeting
   */
  selectTemplate: ISelectTemplatePayload | null;

  /**
   * Share where in the app the viewer is
   */
  setAppLocation: SetAppLocationPayload;

  /**
   * Enabled or disable the icebreaker round
   */
  setCheckInEnabled: ISetCheckInEnabledPayload;

  /**
   * Update the default Slack channel where notifications are sent
   */
  setDefaultSlackChannel: SetDefaultSlackChannelPayload;

  /**
   * Set the role of a user
   */
  setOrgUserRole: SetOrgUserRolePayload | null;

  /**
   * Focus (or unfocus) a phase item
   */
  setPhaseFocus: ISetPhaseFocusPayload | null;

  /**
   * Set or clear a timer for a meeting stage
   */
  setStageTimer: ISetStageTimerPayload;
  setSlackNotification: ISetSlackNotificationPayload;

  /**
   * Sign up using an email address and password
   */
  signUpWithPassword: ISignUpWithPasswordPayload;

  /**
   * Broadcast that the viewer started dragging a reflection
   */
  startDraggingReflection: IStartDraggingReflectionPayload | null;

  /**
   * Start a new meeting
   */
  startCheckIn: StartCheckInPayload;

  /**
   * Start a new meeting
   */
  startRetrospective: StartRetrospectivePayload;

  /**
   * Start a new sprint poker meeting
   */
  startSprintPoker: StartSprintPokerPayload;

  /**
   * Broadcast that the viewer highlights a task
   */
  setTaskHighlight: SetTaskHighlightPayload;

  /**
   * Update an agenda item
   */
  updateAgendaItem: IUpdateAgendaItemPayload | null;

  /**
   * Update the content of a comment
   */
  updateCommentContent: UpdateCommentContentPayload | null;

  /**
   * Update an existing credit card on file
   */
  updateCreditCard: IUpdateCreditCardPayload | null;

  /**
   * Update an with a change in name, avatar
   */
  updateOrg: IUpdateOrgPayload;

  /**
   * Update the scale used for a dimension in a template
   */
  updatePokerTemplateDimensionScale: IUpdatePokerTemplateDimensionScalePayload;

  /**
   * Update the label, numerical value or color of a scale value in a scale
   */
  updatePokerTemplateScaleValue: IUpdatePokerTemplateScaleValuePayload;

  /**
   * Update a Team's Icebreaker in a new meeting
   */
  updateNewCheckInQuestion: IUpdateNewCheckInQuestionPayload | null;

  /**
   * all the info required to provide an accurate display-specific location of where an item is
   */
  updateDragLocation: boolean | null;

  /**
   * Add or remove a task and its estimate phase from the meeting
   */
  updatePokerScope: UpdatePokerScopePayload;

  /**
   * Update the content of a reflection
   */
  updateReflectionContent: IUpdateReflectionContentPayload | null;

  /**
   * Update the title of a reflection group
   */
  updateReflectionGroupTitle: IUpdateReflectionGroupTitlePayload | null;

  /**
   * Change the max votes for participants
   */
  updateRetroMaxVotes: UpdateRetroMaxVotesPayload;

  /**
   * Update a task with a change in content, ownership, or status
   */
  updateTask: IUpdateTaskPayload | null;

  /**
   * Set or unset the due date of a task
   */
  updateTaskDueDate: IUpdateTaskDueDatePayload | null;
  updateTeamName: IUpdateTeamNamePayload | null;

  /**
   * Change the scope of a template
   */
  updateTemplateScope: UpdateTemplateScopePayload;
  updateUserProfile: IUpdateUserProfilePayload | null;

  /**
   * Upgrade an account to the paid service
   */
  upgradeToPro: IUpgradeToProPayload | null;

  /**
   * Upload an image for an org avatar
   */
  uploadOrgImage: IUpdateOrgPayload;

  /**
   * Upload an image for a user avatar
   */
  uploadUserImage: IUpdateUserProfilePayload | null;

  /**
   * Verify an email address and sign in if not already a user
   */
  verifyEmail: IVerifyEmailPayload;

  /**
   * Cast your vote for a reflection group
   */
  voteForReflectionGroup: IVoteForReflectionGroupPayload | null;

  /**
   * Cast a vote for the estimated points for a given dimension
   */
  voteForPokerStory: VoteForPokerStoryPayload;

  /**
   * Progresses the stage dimension to the reveal & discuss step
   */
  pokerRevealVotes: PokerRevealVotesPayload;

  /**
   * Remove all votes, the final vote, and reset the stage
   */
  pokerResetDimension: PokerResetDimensionPayload;
  pokerAnnounceDeckHover: PokerAnnounceDeckHoverPayload;

  /**
   * Move a scale value to an index
   */
  movePokerTemplateScaleValue: MovePokerTemplateScaleValuePayload;

  /**
   * Set the jira field that the poker dimension should map to
   */
  updateJiraDimensionField: UpdateJiraDimensionFieldPayload;

  /**
   * Create a meeting member for a user
   */
  joinMeeting: JoinMeetingPayload;

  /**
   * Adds a missing Jira field to a screen currently assigned to a Jira project
   */
  addMissingJiraField: AddMissingJiraFieldPayload;

  /**
   * Set whether the user is spectating poker meeting
   */
  setPokerSpectate: SetPokerSpectatePayload;
  persistGitHubSearchQuery: PersistGitHubSearchQueryPayload;

  /**
   * Update a task estimate
   */
  setTaskEstimate: SetTaskEstimatePayload;

  /**
   * Show/hide the drawer in the team dashboard
   */
  toggleTeamDrawer: ToggleTeamDrawerPayload;

  /**
   * Update how a parabol dimension maps to a GitHub label
   */
  updateGitHubDimensionField: UpdateGitHubDimensionFieldPayload;
  createPoll: CreatePollPayload;

  /**
   * Add an integration authorization for a specific team member
   */
  addTeamMemberIntegrationAuth: AddTeamMemberIntegrationAuthPayload;

  /**
   * Adds a new Integration Provider configuration
   */
  addIntegrationProvider: AddIntegrationProviderPayload;

  /**
   * Update the Integration Provider settings
   */
  updateIntegrationProvider: UpdateIntegrationProviderPayload;

  /**
   * Remove an Integration Provider, and any associated tokens
   */
  removeIntegrationProvider: RemoveIntegrationProviderPayload;

  /**
   * Remove the integrated auth for a given team member
   */
  removeTeamMemberIntegrationAuth: RemoveTeamMemberIntegrationAuthPayload;
}

export interface IAcceptTeamInvitationOnMutationArguments {
  /**
   * The 48-byte hex encoded invitation token or the 2-part JWT for mass invitation tokens
   */
  invitationToken?: string | null;

  /**
   * the notification clicked to accept, if any
   */
  notificationId?: string | null;
}

export interface IAddAgendaItemOnMutationArguments {
  /**
   * The new task including an id, teamMemberId, and content
   */
  newAgendaItem: ICreateAgendaItemInput;
}

export interface IAddAtlassianAuthOnMutationArguments {
  code: string;
  teamId: string;
}

export interface IAddCommentOnMutationArguments {
  /**
   * A partial new comment
   */
  comment: IAddCommentInput;
}

export interface IAddPokerTemplateOnMutationArguments {
  parentTemplateId?: string | null;
  teamId: string;
}

export interface IAddPokerTemplateDimensionOnMutationArguments {
  templateId: string;
}

export interface IAddPokerTemplateScaleOnMutationArguments {
  parentScaleId?: string | null;
  teamId: string;
}

export interface IAddPokerTemplateScaleValueOnMutationArguments {
  scaleId: string;
  scaleValue: IAddTemplateScaleInput;
}

export interface IAddReactjiToReactableOnMutationArguments {
  /**
   * The id of the reactable
   */
  reactableId: string;

  /**
   * the type of the
   */
  reactableType: ReactableEnum;

  /**
   * the id of the reactji to add
   */
  reactji: string;

  /**
   * If true, remove the reaction, else add it
   */
  isRemove?: boolean | null;

  /**
   * The id of the meeting
   */
  meetingId: string;
}

export interface IAddReflectTemplateOnMutationArguments {
  parentTemplateId?: string | null;
  teamId: string;
}

export interface IAddReflectTemplatePromptOnMutationArguments {
  templateId: string;
}

export interface IAddSlackAuthOnMutationArguments {
  code: string;
  teamId: string;
}

export interface IAddFeatureFlagOnMutationArguments {
  /**
   * a list of the complete or partial email of the person to whom you are giving advanced features.
   *       Matches via a regex to support entire domains
   */
  emails?: Array<string> | null;

  /**
   * grant access to an entire domain. the part of the email after the @
   */
  domain?: string | null;

  /**
   * the flag that you want to give to the user
   */
  flag: UserFlagEnum;
}

export interface IAddGitHubAuthOnMutationArguments {
  code: string;
  teamId: string;
}

export interface IAddOrgOnMutationArguments {
  /**
   * The new team object with exactly 1 team member
   */
  newTeam: INewTeamInput;

  /**
   * The name of the new team
   */
  orgName: string;
}

export interface IAddTeamOnMutationArguments {
  /**
   * The new team object
   */
  newTeam: INewTeamInput;
}

export interface IArchiveOrganizationOnMutationArguments {
  /**
   * The orgId to archive
   */
  orgId: string;
}

export interface IArchiveTeamOnMutationArguments {
  /**
   * The teamId to archive (or delete, if team is unused)
   */
  teamId: string;
}

export interface IArchiveTimelineEventOnMutationArguments {
  /**
   * the id for the timeline event
   */
  timelineEventId: string;
}

export interface IAutoGroupReflectionsOnMutationArguments {
  meetingId: string;

  /**
   * A number from 0 to 1 to determine how tightly to pack the groups. Higher means fewer groups
   */
  groupingThreshold: number;
}

export interface IChangeTaskTeamOnMutationArguments {
  /**
   * The task to change
   */
  taskId: string;

  /**
   * The new team to assign the task to
   */
  teamId: string;
}

export interface ISetNotificationStatusOnMutationArguments {
  /**
   * The id of the notification
   */
  notificationId: string;
  status: NotificationStatusEnum;
}

export interface ICreateImposterTokenOnMutationArguments {
  /**
   * The target userId to impersonate
   */
  userId?: string | null;

  /**
   * The email address of the user to impersonate
   */
  email?: any | null;
}

export interface ICreateTaskIntegrationOnMutationArguments {
  /**
   * Which integration to push the task to
   */
  integrationProviderService: IntegrationProviderServiceEnum;

  /**
   * Jira projectId, GitHub nameWithOwner etc.
   */
  integrationRepoId: string;

  /**
   * The id of the task to convert to an issue
   */
  taskId: string;
}

export interface ICreateMassInvitationOnMutationArguments {
  /**
   * the specific meeting where the invite occurred, if any
   */
  meetingId?: string | null;

  /**
   * The teamId to create the mass invitation for
   */
  teamId: string;

  /**
   * If true, will void all existing mass invitations for the team member
   */
  voidOld?: boolean | null;
}

export interface ICreateOAuth1AuthorizeUrlOnMutationArguments {
  /**
   * Id of the integration provider with OAuth1 auth strategy
   */
  providerId: string;

  /**
   * Id of the team where the integration should be added
   */
  teamId: string;
}

export interface ICreateReflectionOnMutationArguments {
  input: ICreateReflectionInput;
}

export interface ICreateTaskOnMutationArguments {
  /**
   * The new task including an id, status, and type, and teamMemberId
   */
  newTask: ICreateTaskInput;

  /**
   * The part of the site where the creation occurred
   */
  area?: AreaEnum | null;
}

export interface IDeleteCommentOnMutationArguments {
  commentId: string;
  meetingId: string;
}

export interface IDeleteTaskOnMutationArguments {
  /**
   * The taskId to delete
   */
  taskId: string;
}

export interface IDeleteUserOnMutationArguments {
  /**
   * a userId
   */
  userId?: string | null;

  /**
   * the user email
   */
  email?: string | null;

  /**
   * the reason why the user wants to delete their account
   */
  reason?: string | null;
}

export interface IDenyPushInvitationOnMutationArguments {
  teamId: string;
  userId: string;
}

export interface IDismissSuggestedActionOnMutationArguments {
  /**
   * The id of the suggested action to dismiss
   */
  suggestedActionId: string;
}

export interface IDowngradeToPersonalOnMutationArguments {
  /**
   * the org requesting the upgrade
   */
  orgId: string;
}

export interface IDragDiscussionTopicOnMutationArguments {
  meetingId: string;
  stageId: string;
  sortOrder: number;
}

export interface IDragEstimatingTaskOnMutationArguments {
  meetingId: string;
  stageId: string;
  sortOrder: number;
}

export interface IEmailPasswordResetOnMutationArguments {
  /**
   * email to send the password reset code to
   */
  email: string;
}

export interface IEditCommentingOnMutationArguments {
  /**
   * True if the user is commenting, false if the user has stopped commenting
   */
  isCommenting: boolean;
  discussionId: string;
}

export interface IEndSprintPokerOnMutationArguments {
  /**
   * The meeting to end
   */
  meetingId: string;
}

export interface IEditReflectionOnMutationArguments {
  /**
   * Whether a reflectPrompt is being edited or not
   */
  isEditing: boolean;
  meetingId: string;
  promptId: string;
}

export interface IEditTaskOnMutationArguments {
  /**
   * The task id that is being edited
   */
  taskId: string;

  /**
   * true if the editing is starting, false if it is stopping
   */
  isEditing: boolean;
}

export interface IEndCheckInOnMutationArguments {
  /**
   * The meeting to end
   */
  meetingId: string;
}

export interface IEndDraggingReflectionOnMutationArguments {
  reflectionId: string;

  /**
   * if it was a drop (isDragging = false), the type of item it was dropped on. null if there was no valid drop target
   */
  dropTargetType?: DragReflectionDropTargetTypeEnum | null;

  /**
   * if dropTargetType could refer to more than 1 component, this ID defines which one
   */
  dropTargetId?: string | null;

  /**
   * the ID of the drag to connect to the start drag event
   */
  dragId?: string | null;
}

export interface IEndRetrospectiveOnMutationArguments {
  /**
   * The meeting to end
   */
  meetingId: string;
}

export interface IFlagReadyToAdvanceOnMutationArguments {
  meetingId: string;

  /**
   * the stage that the viewer marked as ready
   */
  stageId: string;

  /**
   * true if ready to advance, else false
   */
  isReady: boolean;
}

export interface IInactivateUserOnMutationArguments {
  /**
   * the user to pause
   */
  userId: string;
}

export interface IInviteToTeamOnMutationArguments {
  /**
   * the specific meeting where the invite occurred, if any
   */
  meetingId?: string | null;

  /**
   * The id of the inviting team
   */
  teamId: string;
  invitees: Array<any>;
}

export interface ILoginWithGoogleOnMutationArguments {
  /**
   * The code provided from the OAuth2 flow
   */
  code: string;

  /**
   * optional segment id created before they were a user
   */
  segmentId?: string | null;

  /**
   * if present, the user is also joining a team
   */
  invitationToken?: string | null;
}

export interface ILoginWithPasswordOnMutationArguments {
  email: string;
  password: string;
}

export interface IMovePokerTemplateDimensionOnMutationArguments {
  dimensionId: string;
  sortOrder: number;
}

export interface IMoveReflectTemplatePromptOnMutationArguments {
  promptId: string;
  sortOrder: number;
}

export interface IMoveTeamToOrgOnMutationArguments {
  /**
   * The teamId that you want to move
   */
  teamIds: Array<string>;

  /**
   * The ID of the organization you want to move the team to
   */
  orgId: string;
}

export interface INavigateMeetingOnMutationArguments {
  /**
   * The stage that the facilitator would like to mark as complete
   */
  completedStageId?: string | null;

  /**
   * The stage where the facilitator is
   */
  facilitatorStageId?: string | null;

  /**
   * The meeting ID
   */
  meetingId: string;
}

export interface INewMeetingCheckInOnMutationArguments {
  /**
   * The id of the user being marked present or absent
   */
  userId: string;

  /**
   * the meeting currently in progress
   */
  meetingId: string;

  /**
   * true if the member is present, false if absent, null if undecided
   */
  isCheckedIn?: boolean | null;
}

export interface IPayLaterOnMutationArguments {
  /**
   * the org that has clicked pay later
   */
  meetingId: string;
}

export interface IPersistJiraSearchQueryOnMutationArguments {
  /**
   * the team with the settings we add the query to
   */
  teamId: string;

  /**
   * the jira search query to persist (or remove, if isRemove is true)
   */
  input: IJiraSearchQueryInput;
}

export interface IPushInvitationOnMutationArguments {
  /**
   * the meeting ID the pusher would like to join
   */
  meetingId?: string | null;
  teamId: string;
}

export interface IPromoteNewMeetingFacilitatorOnMutationArguments {
  /**
   * userId of the new facilitator for this meeting
   */
  facilitatorUserId: string;
  meetingId: string;
}

export interface IPromoteToTeamLeadOnMutationArguments {
  /**
   * Team id of the team which is about to get a new team leader
   */
  teamId: string;

  /**
   * Email of the user who will be set as a new team leader
   */
  newTeamLeadEmail: any;
}

export interface IReflectTemplatePromptUpdateDescriptionOnMutationArguments {
  promptId: string;
  description: string;
}

export interface IPokerTemplateDimensionUpdateDescriptionOnMutationArguments {
  dimensionId: string;
  description: string;
}

export interface IReflectTemplatePromptUpdateGroupColorOnMutationArguments {
  promptId: string;
  groupColor: string;
}

export interface IRemoveAgendaItemOnMutationArguments {
  /**
   * The agenda item unique id
   */
  agendaItemId: string;
}

export interface IRemoveAtlassianAuthOnMutationArguments {
  /**
   * the teamId to disconnect from the token
   */
  teamId: string;
}

export interface IRemoveGitHubAuthOnMutationArguments {
  /**
   * the teamId to disconnect from the token
   */
  teamId: string;
}

export interface IRemoveOrgUserOnMutationArguments {
  /**
   * the user to remove
   */
  userId: string;

  /**
   * the org that does not want them anymore
   */
  orgId: string;
}

export interface IRemovePokerTemplateOnMutationArguments {
  templateId: string;
}

export interface IRemoveReflectTemplateOnMutationArguments {
  templateId: string;
}

export interface IRemoveReflectTemplatePromptOnMutationArguments {
  promptId: string;
}

export interface IRemovePokerTemplateDimensionOnMutationArguments {
  dimensionId: string;
}

export interface IRenameMeetingOnMutationArguments {
  /**
   * the new meeting name
   */
  name: string;

  /**
   * the meeting with the new name
   */
  meetingId: string;
}

export interface IRenameMeetingTemplateOnMutationArguments {
  templateId: string;
  name: string;
}

export interface IRenameReflectTemplatePromptOnMutationArguments {
  promptId: string;
  question: string;
}

export interface IRenamePokerTemplateDimensionOnMutationArguments {
  dimensionId: string;
  name: string;
}

export interface IRenamePokerTemplateScaleOnMutationArguments {
  scaleId: string;
  name: string;
}

export interface IRemovePokerTemplateScaleOnMutationArguments {
  scaleId: string;
}

export interface IRemovePokerTemplateScaleValueOnMutationArguments {
  scaleId: string;
  label: string;
}

export interface IRemoveReflectionOnMutationArguments {
  reflectionId: string;
}

export interface IRemoveSlackAuthOnMutationArguments {
  /**
   * the teamId to disconnect from the token
   */
  teamId: string;
}

export interface IRemoveTeamMemberOnMutationArguments {
  /**
   * The teamMemberId of the person who is being removed
   */
  teamMemberId: string;
}

export interface IResetPasswordOnMutationArguments {
  /**
   * the password reset token
   */
  token: string;

  /**
   * The new password for the account
   */
  newPassword: string;
}

export interface IResetRetroMeetingToGroupStageOnMutationArguments {
  meetingId: string;
}

export interface ISegmentEventTrackOnMutationArguments {
  event: string;
  options?: ISegmentEventTrackOptions | null;
}

export interface ISelectTemplateOnMutationArguments {
  selectedTemplateId: string;
  teamId: string;
}

export interface ISetAppLocationOnMutationArguments {
  /**
   * The location the viewer is currently at
   */
  location?: string | null;
}

export interface ISetCheckInEnabledOnMutationArguments {
  settingsId: string;

  /**
   * true to turn icebreaker phase on, false to turn it off
   */
  isEnabled: boolean;
}

export interface ISetDefaultSlackChannelOnMutationArguments {
  slackChannelId: string;
  teamId: string;
}

export interface ISetOrgUserRoleOnMutationArguments {
  /**
   * The org to affect
   */
  orgId: string;

  /**
   * the user who is receiving a role change
   */
  userId: string;

  /**
   * the user’s new role
   */
  role?: string | null;
}

export interface ISetPhaseFocusOnMutationArguments {
  meetingId: string;

  /**
   * The currently focused phase item
   */
  focusedPromptId?: string | null;
}

export interface ISetStageTimerOnMutationArguments {
  /**
   * the id of the meeting
   */
  meetingId: string;

  /**
   * The time the timer is scheduled to go off (based on client clock), null if unsetting the timer
   */
  scheduledEndTime?: any | null;

  /**
   * scheduledEndTime - now. Used to reconcile bad client clocks. Present for time limit, else null
   */
  timeRemaining?: number | null;
}

export interface ISetSlackNotificationOnMutationArguments {
  slackChannelId?: string | null;
  slackNotificationEvents: Array<SlackNotificationEventEnum>;
  teamId: string;
}

export interface ISignUpWithPasswordOnMutationArguments {
  email: string;
  password: string;

  /**
   * optional segment id created before they were a user
   */
  segmentId?: string | null;

  /**
   * used to determine what suggested actions to create
   */
  invitationToken?: string | null;
}

export interface IStartDraggingReflectionOnMutationArguments {
  reflectionId: string;
  dragId: string;
  isSpotlight?: boolean | null;
}

export interface IStartCheckInOnMutationArguments {
  /**
   * The team starting the meeting
   */
  teamId: string;
}

export interface IStartRetrospectiveOnMutationArguments {
  /**
   * The team starting the meeting
   */
  teamId: string;
}

export interface IStartSprintPokerOnMutationArguments {
  /**
   * The team starting the meeting
   */
  teamId: string;
}

export interface ISetTaskHighlightOnMutationArguments {
  taskId: string;
  meetingId: string;
  isHighlighted: boolean;
}

export interface IUpdateAgendaItemOnMutationArguments {
  /**
   * The updated item including an id, content, status, sortOrder
   */
  updatedAgendaItem: IUpdateAgendaItemInput;
}

export interface IUpdateCommentContentOnMutationArguments {
  commentId: string;

  /**
   * A stringified draft-js document containing thoughts
   */
  content: string;
  meetingId: string;
}

export interface IUpdateCreditCardOnMutationArguments {
  /**
   * the org requesting the changed billing
   */
  orgId: string;

  /**
   * The token that came back from stripe
   */
  stripeToken: string;
}

export interface IUpdateOrgOnMutationArguments {
  /**
   * the updated org including the id, and at least one other field
   */
  updatedOrg: IUpdateOrgInput;
}

export interface IUpdatePokerTemplateDimensionScaleOnMutationArguments {
  dimensionId: string;
  scaleId: string;
}

export interface IUpdatePokerTemplateScaleValueOnMutationArguments {
  scaleId: string;
  oldScaleValue: ITemplateScaleInput;
  newScaleValue: ITemplateScaleInput;
}

export interface IUpdateNewCheckInQuestionOnMutationArguments {
  /**
   * ID of the Team which will have its Icebreaker updated
   */
  meetingId: string;

  /**
   * The Team's new Icebreaker
   */
  checkInQuestion: string;
}

export interface IUpdateDragLocationOnMutationArguments {
  input: IUpdateDragLocationInput;
}

export interface IUpdatePokerScopeOnMutationArguments {
  /**
   * the meeting with the estimate phases to modify
   */
  meetingId: string;

  /**
   * The list of items to add/remove to the estimate phase
   */
  updates: Array<IUpdatePokerScopeItemInput>;
}

export interface IUpdateReflectionContentOnMutationArguments {
  reflectionId: string;

  /**
   * A stringified draft-js document containing thoughts
   */
  content: string;
}

export interface IUpdateReflectionGroupTitleOnMutationArguments {
  reflectionGroupId: string;

  /**
   * The new title for the group
   */
  title: string;
}

export interface IUpdateRetroMaxVotesOnMutationArguments {
  /**
   * The total number of votes for each participant
   */
  totalVotes: number;

  /**
   * The total number of votes for each participant to vote on a single topic
   */
  maxVotesPerGroup: number;

  /**
   * the meeting to update
   */
  meetingId: string;
}

export interface IUpdateTaskOnMutationArguments {
  /**
   * The part of the site where the creation occurred
   */
  area?: AreaEnum | null;

  /**
   * the updated task including the id, and at least one other field
   */
  updatedTask: IUpdateTaskInput;
}

export interface IUpdateTaskDueDateOnMutationArguments {
  /**
   * The task id
   */
  taskId: string;

  /**
   * the new due date. if not a valid date, it will unset the due date
   */
  dueDate?: any | null;
}

export interface IUpdateTeamNameOnMutationArguments {
  /**
   * The input object containing the teamId and any modified fields
   */
  updatedTeam: IUpdatedTeamInput;
}

export interface IUpdateTemplateScopeOnMutationArguments {
  /**
   * The id of the template
   */
  templateId: string;

  /**
   * the new scope
   */
  scope: SharingScopeEnum;
}

export interface IUpdateUserProfileOnMutationArguments {
  /**
   * The input object containing the user profile fields that can be changed
   */
  updatedUser: IUpdateUserProfileInput;
}

export interface IUpgradeToProOnMutationArguments {
  /**
   * the org requesting the upgrade
   */
  orgId: string;

  /**
   * The token that came back from stripe
   */
  stripeToken: string;
}

export interface IUploadOrgImageOnMutationArguments {
  /**
   * the org avatar image file
   */
  file: any;

  /**
   * The org id to upload an avatar for
   */
  orgId: string;
}

export interface IUploadUserImageOnMutationArguments {
  /**
   * the user avatar image file
   */
  file: any;
}

export interface IVerifyEmailOnMutationArguments {
  /**
   * The 48-byte url-safe base64 encoded verification token
   */
  verificationToken?: string | null;
}

export interface IVoteForReflectionGroupOnMutationArguments {
  /**
   * true if the user wants to remove one of their votes
   */
  isUnvote?: boolean | null;
  reflectionGroupId: string;
}

export interface IVoteForPokerStoryOnMutationArguments {
  meetingId: string;

  /**
   * The stage that contains the dimension to vote for
   */
  stageId: string;

  /**
   * The label of the scaleValue to vote for. If null, remove the vote
   */
  score?: string | null;
}

export interface IPokerRevealVotesOnMutationArguments {
  meetingId: string;
  stageId: string;
}

export interface IPokerResetDimensionOnMutationArguments {
  meetingId: string;
  stageId: string;
}

export interface IPokerAnnounceDeckHoverOnMutationArguments {
  meetingId: string;
  stageId: string;

  /**
   * true if the viewer has started hovering the deck, else false
   */
  isHover: boolean;
}

export interface IMovePokerTemplateScaleValueOnMutationArguments {
  scaleId: string;

  /**
   * The label of the moving scale value
   */
  label: string;

  /**
   * The index position where the scale value is moving to
   */
  index: number;
}

export interface IUpdateJiraDimensionFieldOnMutationArguments {
  dimensionName: string;

  /**
   * The jira field name that we should push estimates to
   */
  fieldName: string;

  /**
   * The cloudId the field lives on
   */
  cloudId: string;

  /**
   * The project the field lives on
   */
  projectKey: string;

  /**
   * The meeting the update happend in. Returns a meeting object with updated serviceField
   */
  meetingId: string;
}

export interface IJoinMeetingOnMutationArguments {
  meetingId: string;
}

export interface IAddMissingJiraFieldOnMutationArguments {
  meetingId: string;
  stageId: string;
}

export interface ISetPokerSpectateOnMutationArguments {
  meetingId: string;

  /**
   * true if the viewer is spectating poker and does not want to vote. else false
   */
  isSpectating: boolean;
}

export interface IPersistGitHubSearchQueryOnMutationArguments {
  /**
   * the team witht the settings we add the query to
   */
  teamId: string;

  /**
   * The query string as sent to GitHub
   */
  queryString: string;

  /**
   * true if this query should be deleted
   */
  isRemove?: boolean | null;
}

export interface ISetTaskEstimateOnMutationArguments {
  taskEstimate: ITaskEstimateInput;
}

export interface IToggleTeamDrawerOnMutationArguments {
  /**
   * the team to show/hide the drawer for
   */
  teamId: string;

  /**
   * The type of team drawer that the viewer is toggling. Null if closing the drawer.
   */
  teamDrawerType?: TeamDrawer | null;
}

export interface IUpdateGitHubDimensionFieldOnMutationArguments {
  dimensionName: string;

  /**
   * The template string to map to a label
   */
  labelTemplate: string;

  /**
   * The repo the issue lives on
   */
  nameWithOwner: string;

  /**
   * The meeting the update happend in. Returns a meeting object with updated serviceField
   */
  meetingId: string;
}

export interface ICreatePollOnMutationArguments {
  /**
   * The new poll including title and poll options
   */
  newPoll: ICreatePollInput;
}

export interface IAddTeamMemberIntegrationAuthOnMutationArguments {
  providerId: string;
  teamId: string;

  /**
   * The OAuth2 code or personal access token. Null for webhook auth
   */
  oauthCodeOrPat?: string | null;

  /**
   * OAuth1 token verifier
   */
  oauthVerifier?: string | null;

  /**
   * The URL the OAuth2 token will be sent to. Null for webhook auth
   */
  redirectUri?: any | null;
}

export interface IAddIntegrationProviderOnMutationArguments {
  /**
   * The new Integration Provider
   */
  input: IAddIntegrationProviderInput;
}

export interface IUpdateIntegrationProviderOnMutationArguments {
  /**
   * The new Integration Provider
   */
  provider: IUpdateIntegrationProviderInput;
}

export interface IRemoveIntegrationProviderOnMutationArguments {
  /**
   * Id of the Integration Provider to remove
   */
  providerId: string;
}

export interface IRemoveTeamMemberIntegrationAuthOnMutationArguments {
  /**
   * The Integration Provider service name related to the token
   */
  service: IntegrationProviderServiceEnum;

  /**
   * The team id related to the token
   */
  teamId: string;
}

export interface IAcceptTeamInvitationPayload {
  __typename: 'AcceptTeamInvitationPayload';
  error: IStandardMutationError | null;

  /**
   * The new auth token sent to the mutator
   */
  authToken: string | null;

  /**
   * the meetingId to redirect to
   */
  meetingId: string | null;

  /**
   * The team that the invitee will be joining
   */
  team: ITeam | null;

  /**
   * The new team member on the team
   */
  teamMember: ITeamMember | null;
  notifications: INotificationTeamInvitation | null;

  /**
   * For payloads going to the team leader that got new suggested actions
   */
  teamLead: IUser | null;
}

export interface IAddAgendaItemPayload {
  __typename: 'AddAgendaItemPayload';
  error: IStandardMutationError | null;
  agendaItem: IAgendaItem | null;
  meetingId: string | null;

  /**
   * The meeting with the updated agenda item, if any
   */
  meeting: NewMeeting | null;
}

export interface ICreateAgendaItemInput {
  /**
   * The content of the agenda item
   */
  content: string;

  /**
   * True if the agenda item has been pinned
   */
  pinned: boolean;
  teamId: string;

  /**
   * The team member ID of the person creating the agenda item
   */
  teamMemberId: string;

  /**
   * The sort order of the agenda item in the list
   */
  sortOrder?: number | null;

  /**
   * The meeting ID of the agenda item
   */
  meetingId?: string | null;
}

export interface IAddAtlassianAuthPayload {
  __typename: 'AddAtlassianAuthPayload';
  error: IStandardMutationError | null;

  /**
   * The newly created auth
   */
  atlassianIntegration: IAtlassianIntegration | null;
  teamId: string | null;

  /**
   * The team member with the updated atlassianAuth
   */
  teamMember: ITeamMember | null;

  /**
   * The user with updated atlassianAuth
   */
  user: IUser | null;
}

/**
 * Return object for AddCommentPayload
 */
export type AddCommentPayload = IErrorPayload | IAddCommentSuccess;

export interface IErrorPayload {
  __typename: 'ErrorPayload';
  error: IStandardMutationError;
}

export interface IAddCommentSuccess {
  __typename: 'AddCommentSuccess';

  /**
   * the comment just created
   */
  comment: IComment;

  /**
   * The id of the meeting where the comment was added
   */
  meetingId: string;
}

export interface IAddCommentInput {
  /**
   * A stringified draft-js document containing thoughts
   */
  content: string;

  /**
   * true if the comment should be anonymous
   */
  isAnonymous?: boolean | null;

  /**
   * foreign key for the discussion this was created in
   */
  discussionId: string;
  threadSortOrder: number;
  threadParentId?: string | null;
}

export interface IAddPokerTemplatePayload {
  __typename: 'AddPokerTemplatePayload';
  error: IStandardMutationError | null;
  pokerTemplate: IPokerTemplate | null;
}

export interface IAddPokerTemplateDimensionPayload {
  __typename: 'AddPokerTemplateDimensionPayload';
  error: IStandardMutationError | null;
  dimension: ITemplateDimension | null;
}

export interface IAddPokerTemplateScalePayload {
  __typename: 'AddPokerTemplateScalePayload';
  error: IStandardMutationError | null;
  scale: ITemplateScale | null;
}

export interface IAddPokerTemplateScaleValuePayload {
  __typename: 'AddPokerTemplateScaleValuePayload';
  error: IStandardMutationError | null;
  scale: ITemplateScale | null;
}

/**
 * Input for adding a new scale
 */
export interface IAddTemplateScaleInput {
  /**
   * The color used to visually group a scale value
   */
  color: string;

  /**
   * The label for this value, e.g., XS, M, L
   */
  label: string;
}

/**
 * Return object for AddReactjiToReactablePayload
 */
export type AddReactjiToReactablePayload =
  | IErrorPayload
  | IAddReactjiToReactableSuccess;

export interface IAddReactjiToReactableSuccess {
  __typename: 'AddReactjiToReactableSuccess';

  /**
   * the Reactable with the updated list of reactjis
   */
  reactable: Reactable;
}

/**
 * The type of reactable
 */
export const enum ReactableEnum {
  COMMENT = 'COMMENT',
  REFLECTION = 'REFLECTION',
}

export interface IAddReflectTemplatePayload {
  __typename: 'AddReflectTemplatePayload';
  error: IStandardMutationError | null;
  reflectTemplate: IReflectTemplate | null;
}

export interface IAddReflectTemplatePromptPayload {
  __typename: 'AddReflectTemplatePromptPayload';
  error: IStandardMutationError | null;
  prompt: IReflectPrompt | null;
}

export interface IAddSlackAuthPayload {
  __typename: 'AddSlackAuthPayload';
  error: IStandardMutationError | null;

  /**
   * The newly created auth
   */
  slackIntegration: ISlackIntegration | null;

  /**
   * The user with updated slackAuth
   */
  user: IUser | null;
}

export interface IAddFeatureFlagPayload {
  __typename: 'AddFeatureFlagPayload';
  error: IStandardMutationError | null;

  /**
   * the user that was given the super power. Use users instead in GraphiQL since it may affect multiple users
   */
  user: IUser | null;

  /**
   * the users given the super power
   */
  users: Array<IUser | null> | null;
}

/**
 * A flag to give an individual user super powers
 */
export const enum UserFlagEnum {
  spotlight = 'spotlight',
  standups = 'standups',
  gitlab = 'gitlab',
}

export interface IAddGitHubAuthPayload {
  __typename: 'AddGitHubAuthPayload';
  error: IStandardMutationError | null;

  /**
   * The newly created auth
   */
  githubIntegration: IGitHubIntegration | null;

  /**
   * The team member with the updated auth
   */
  teamMember: ITeamMember | null;

  /**
   * The user with updated githubAuth
   */
  user: IUser | null;
}

export interface IAddOrgPayload {
  __typename: 'AddOrgPayload';
  organization: IOrganization | null;
  error: IStandardMutationError | null;

  /**
   * The new auth token sent to the mutator
   */
  authToken: string | null;
  team: ITeam | null;

  /**
   * The teamMember that just created the new team, if this is a creation
   */
  teamMember: ITeamMember | null;

  /**
   * The ID of the suggestion to create a new team
   */
  removedSuggestedActionId: string | null;
}

export interface INewTeamInput {
  /**
   * The name of the team
   */
  name?: string | null;

  /**
   * The unique orginization ID that pays for the team
   */
  orgId?: string | null;
}

export interface IAddTeamPayload {
  __typename: 'AddTeamPayload';
  error: IStandardMutationError | null;

  /**
   * The new auth token sent to the mutator
   */
  authToken: string | null;
  team: ITeam | null;

  /**
   * The teamMember that just created the new team, if this is a creation
   */
  teamMember: ITeamMember | null;

  /**
   * The ID of the suggestion to create a new team
   */
  removedSuggestedActionId: string | null;
}

export interface IArchiveOrganizationPayload {
  __typename: 'ArchiveOrganizationPayload';
  error: IStandardMutationError | null;
  orgId: string | null;
  teams: Array<ITeam> | null;

  /**
   * all the suggested actions that never happened
   */
  removedSuggestedActionIds: Array<string | null> | null;
}

export interface IArchiveTeamPayload {
  __typename: 'ArchiveTeamPayload';
  error: IStandardMutationError | null;
  team: ITeam | null;

  /**
   * A notification explaining that the team was archived and removed from view
   */
  notification: INotifyTeamArchived | null;

  /**
   * all the suggested actions that never happened
   */
  removedSuggestedActionIds: Array<string | null> | null;

  /**
   * A list of the ids of templates created by a team
   */
  teamTemplateIds: Array<string>;
}

/**
 * A notification alerting the user that a team they were on is now archived
 */
export interface INotifyTeamArchived {
  __typename: 'NotifyTeamArchived';

  /**
   * the user that archived the team
   */
  archivor: IUser;
  team: ITeam;

  /**
   * A shortid for the notification
   */
  id: string;

  /**
   * UNREAD if new, READ if viewer has seen it, CLICKED if viewed clicked it
   */
  status: NotificationStatusEnum;

  /**
   * The datetime to activate the notification & send it to the client
   */
  createdAt: any;
  type: NotificationEnum;

  /**
   * *The userId that should see this notification
   */
  userId: string;
}

/**
 * Return object for ArchiveTimelineEventPayload
 */
export type ArchiveTimelineEventPayload =
  | IErrorPayload
  | IArchiveTimelineEventSuccess;

export interface IArchiveTimelineEventSuccess {
  __typename: 'ArchiveTimelineEventSuccess';

  /**
   * the archived timelineEvent
   */
  timelineEvent: TimelineEvent;
}

export interface IAutoGroupReflectionsPayload {
  __typename: 'AutoGroupReflectionsPayload';
  error: IStandardMutationError | null;
  meeting: IRetrospectiveMeeting | null;
  reflections: Array<IRetroReflection | null> | null;
  reflectionGroups: Array<IRetroReflectionGroup | null> | null;
  removedReflectionGroups: Array<IRetroReflectionGroup | null> | null;
}

export interface IChangeTaskTeamPayload {
  __typename: 'ChangeTaskTeamPayload';
  error: IStandardMutationError | null;
  task: ITask | null;

  /**
   * the taskId sent to a user who is not on the new team so they can remove it from their client
   */
  removedTaskId: string | null;
}

export interface ISetNotificationStatusPayload {
  __typename: 'SetNotificationStatusPayload';
  error: IStandardMutationError | null;

  /**
   * The updated notification
   */
  notification: Notification | null;
}

export interface ICreateImposterTokenPayload {
  __typename: 'CreateImposterTokenPayload';
  error: IStandardMutationError | null;

  /**
   * The new JWT
   */
  authToken: string | null;

  /**
   * The user you have assumed
   */
  user: IUser | null;
}

export interface ICreateTaskIntegrationPayload {
  __typename: 'CreateTaskIntegrationPayload';
  error: IStandardMutationError | null;
  task: ITask | null;
}

/**
 * Return object for CreateMassInvitationPayload
 */
export type CreateMassInvitationPayload =
  | IErrorPayload
  | ICreateMassInvitationSuccess;

export interface ICreateMassInvitationSuccess {
  __typename: 'CreateMassInvitationSuccess';

  /**
   * the team with the updated mass inivtation
   */
  team: ITeam;
}

/**
 * Authorization URL constructed after creating a new request token
 */
export interface ICreateOAuth1AuthorizationURLPayload {
  __typename: 'CreateOAuth1AuthorizationURLPayload';
  error: IStandardMutationError | null;

  /**
   * Authorization URL including oauth_token to start authorization flow
   */
  url: string | null;
}

export interface ICreateReflectionPayload {
  __typename: 'CreateReflectionPayload';
  error: IStandardMutationError | null;
  meeting: NewMeeting | null;
  reflectionId: string | null;
  reflection: IRetroReflection | null;

  /**
   * The group automatically created for the reflection
   */
  reflectionGroup: IRetroReflectionGroup | null;

  /**
   * The stages that were unlocked by navigating
   */
  unlockedStages: Array<NewMeetingStage> | null;
}

export interface ICreateReflectionInput {
  /**
   * A stringified draft-js document containing thoughts
   */
  content?: string | null;
  meetingId: string;

  /**
   * The prompt the reflection belongs to
   */
  promptId?: string | null;
  sortOrder: number;
}

export interface ICreateTaskPayload {
  __typename: 'CreateTaskPayload';
  error: IStandardMutationError | null;
  task: ITask | null;
  involvementNotification: INotifyTaskInvolves | null;
}

/**
 * A notification sent to someone who was just added to a team
 */
export interface INotifyTaskInvolves {
  __typename: 'NotifyTaskInvolves';

  /**
   * A shortid for the notification
   */
  id: string;

  /**
   * UNREAD if new, READ if viewer has seen it, CLICKED if viewed clicked it
   */
  status: NotificationStatusEnum;

  /**
   * The datetime to activate the notification & send it to the client
   */
  createdAt: any;
  type: NotificationEnum;

  /**
   * *The userId that should see this notification
   */
  userId: string;

  /**
   * How the user is affiliated with the task
   */
  involvement: TaskInvolvementType;

  /**
   * The taskId that now involves the userId
   */
  taskId: string;

  /**
   * The task that now involves the userId
   */
  task: ITask | null;

  /**
   * The teamMemberId of the person that made the change
   */
  changeAuthorId: string | null;

  /**
   * The TeamMember of the person that made the change
   */
  changeAuthor: ITeamMember;
  teamId: string;

  /**
   * The team the task is on
   */
  team: ITeam;
}

/**
 * How a user is involved with a task (listed in hierarchical order)
 */
export const enum TaskInvolvementType {
  ASSIGNEE = 'ASSIGNEE',
  MENTIONEE = 'MENTIONEE',
}

export interface ICreateTaskInput {
  content?: string | null;
  plaintextContent?: string | null;

  /**
   * foreign key for the meeting this was created in
   */
  meetingId?: string | null;

  /**
   * foreign key for the thread this was created in
   */
  discussionId?: string | null;
  threadSortOrder?: number | null;
  threadParentId?: string | null;
  sortOrder?: number | null;
  status: TaskStatusEnum;

  /**
   * teamId, the team the task is on
   */
  teamId: string;

  /**
   * userId, the owner of the task. This can be null if the task is not assigned to anyone.
   */
  userId?: string | null;
  integration?: ICreateTaskIntegrationInput | null;
}

export interface ICreateTaskIntegrationInput {
  /**
   * The service to push this new task to
   */
  service: TaskServiceEnum;

  /**
   * The key or composite key where the task should live in the service, e.g. nameWithOwner or cloudId:projectKey
   */
  serviceProjectHash: string;
}

/**
 * The list of services for task integrations
 */
export const enum TaskServiceEnum {
  github = 'github',
  jira = 'jira',
  PARABOL = 'PARABOL',
}

/**
 * The part of the site that is calling the mutation
 */
export const enum AreaEnum {
  meeting = 'meeting',
  teamDash = 'teamDash',
  userDash = 'userDash',
}

/**
 * Return object for DeleteCommentPayload
 */
export type DeleteCommentPayload = IErrorPayload | IDeleteCommentSuccess;

export interface IDeleteCommentSuccess {
  __typename: 'DeleteCommentSuccess';
  commentId: string;

  /**
   * the comment just deleted
   */
  comment: IComment;
}

export interface IDeleteTaskPayload {
  __typename: 'DeleteTaskPayload';
  error: IStandardMutationError | null;

  /**
   * The task that was deleted
   */
  task: ITask | null;
}

export interface IDeleteUserPayload {
  __typename: 'DeleteUserPayload';
  error: IStandardMutationError | null;
}

export interface IDenyPushInvitationPayload {
  __typename: 'DenyPushInvitationPayload';
  error: IStandardMutationError | null;
  teamId: string | null;
  userId: string | null;
}

export interface IDismissNewFeaturePayload {
  __typename: 'DismissNewFeaturePayload';
  error: IStandardMutationError | null;
}

export interface IDismissSuggestedActionPayload {
  __typename: 'DismissSuggestedActionPayload';
  error: IStandardMutationError | null;

  /**
   * The user that dismissed the action
   */
  user: IUser | null;

  /**
   * The id of the removed suggested action
   */
  removedSuggestedActionId: string | null;
}

export interface IDowngradeToPersonalPayload {
  __typename: 'DowngradeToPersonalPayload';
  error: IStandardMutationError | null;

  /**
   * The new Personal Org
   */
  organization: IOrganization | null;

  /**
   * The updated teams under the org
   */
  teams: Array<ITeam | null> | null;
}

export interface IDragDiscussionTopicPayload {
  __typename: 'DragDiscussionTopicPayload';
  error: IStandardMutationError | null;
  meeting: NewMeeting | null;
  stage: IRetroDiscussStage | null;
}

/**
 * Return object for DragEstimatingTaskPayload
 */
export type DragEstimatingTaskPayload =
  | IErrorPayload
  | IDragEstimatingTaskSuccess;

export interface IDragEstimatingTaskSuccess {
  __typename: 'DragEstimatingTaskSuccess';
  meetingId: string;
  meeting: IPokerMeeting;
  stageId: string;
  stage: IEstimateStage;
}

/**
 * Return object for EmailPasswordResetPayload
 */
export type EmailPasswordResetPayload =
  | IErrorPayload
  | IEmailPasswordResetSuccess;

export interface IEmailPasswordResetSuccess {
  __typename: 'EmailPasswordResetSuccess';

  /**
   * True if the email password reset was successfully sent
   */
  success: boolean | null;
}

/**
 * Return object for EditCommentingPayload
 */
export type EditCommentingPayload = IErrorPayload | IEditCommentingSuccess;

export interface IEditCommentingSuccess {
  __typename: 'EditCommentingSuccess';

  /**
   * The discussion the comment was created in
   */
  discussionId: string;

  /**
   * The discussion where the commenting state changed
   */
  discussion: IDiscussion;
}

/**
 * Return object for EndSprintPokerPayload
 */
export type EndSprintPokerPayload = IErrorPayload | IEndSprintPokerSuccess;

export interface IEndSprintPokerSuccess {
  __typename: 'EndSprintPokerSuccess';

  /**
   * true if the meeting was killed (ended before reaching last stage)
   */
  isKill: boolean;
  meetingId: string;
  meeting: IPokerMeeting;
  removedTaskIds: Array<string>;
  team: ITeam;
  teamId: string;
}

export interface IEditReflectionPayload {
  __typename: 'EditReflectionPayload';
  error: IStandardMutationError | null;
  promptId: string | null;

  /**
   * The socketId of the client editing the card (uses socketId to maintain anonymity)
   */
  editorId: string | null;

  /**
   * true if the reflection is being edited, else false
   */
  isEditing: boolean | null;
}

export interface IEditTaskPayload {
  __typename: 'EditTaskPayload';
  error: IStandardMutationError | null;
  task: ITask | null;
  editor: IUser | null;

  /**
   * true if the editor is editing, false if they stopped editing
   */
  isEditing: boolean | null;
}

/**
 * Return object for EndCheckInPayload
 */
export type EndCheckInPayload = IErrorPayload | IEndCheckInSuccess;

export interface IEndCheckInSuccess {
  __typename: 'EndCheckInSuccess';

  /**
   * true if the meeting was killed (ended before reaching last stage)
   */
  isKill: boolean;
  team: ITeam;
  meeting: IActionMeeting;

  /**
   * The ID of the suggestion to try a check-in meeting, if tried
   */
  removedSuggestedActionId: string | null;
  removedTaskIds: Array<string> | null;

  /**
   * An event that is important to the viewer, e.g. an ended meeting
   */
  timelineEvent: TimelineEvent;
  updatedTaskIds: Array<string> | null;

  /**
   * Any tasks that were updated during the meeting
   */
  updatedTasks: Array<ITask> | null;
}

export interface IEndDraggingReflectionPayload {
  __typename: 'EndDraggingReflectionPayload';
  error: IStandardMutationError | null;
  dragId: string | null;

  /**
   * The drag as sent from the team member
   */
  remoteDrag: IRemoteReflectionDrag | null;

  /**
   * the type of item the reflection was dropped on
   */
  dropTargetType: DragReflectionDropTargetTypeEnum | null;

  /**
   * The ID that the dragged item was dropped on, if dropTargetType is not specific enough
   */
  dropTargetId: string | null;
  meeting: IRetrospectiveMeeting | null;
  meetingId: string | null;
  reflection: IRetroReflection | null;
  reflectionGroupId: string | null;
  reflectionId: string | null;

  /**
   * foreign key to get user
   */
  userId: string | null;

  /**
   * The group encapsulating the new reflection. A new one was created if one was not provided.
   */
  reflectionGroup: IRetroReflectionGroup | null;

  /**
   * The old group the reflection was in
   */
  oldReflectionGroup: IRetroReflectionGroup | null;
}

/**
 * Info associated with a current drag
 */
export interface IRemoteReflectionDrag {
  __typename: 'RemoteReflectionDrag';
  id: string;

  /**
   * The userId of the person currently dragging the reflection
   */
  dragUserId: string | null;

  /**
   * The name of the dragUser
   */
  dragUserName: string | null;
  isSpotlight: boolean | null;
  clientHeight: number | null;
  clientWidth: number | null;

  /**
   * The primary key of the item being drug
   */
  sourceId: string;

  /**
   * The estimated destination of the item being drug
   */
  targetId: string | null;

  /**
   * horizontal distance from the top left of the target
   */
  targetOffsetX: number | null;

  /**
   * vertical distance from the top left of the target
   */
  targetOffsetY: number | null;

  /**
   * the left of the source, relative to the client window
   */
  clientX: number | null;

  /**
   * the top of the source, relative to the client window
   */
  clientY: number | null;
}

/**
 * The possible places a reflection can be dropped
 */
export const enum DragReflectionDropTargetTypeEnum {
  REFLECTION_GROUP = 'REFLECTION_GROUP',
  REFLECTION_GRID = 'REFLECTION_GRID',
}

/**
 * Return object for EndRetrospectivePayload
 */
export type EndRetrospectivePayload = IErrorPayload | IEndRetrospectiveSuccess;

export interface IEndRetrospectiveSuccess {
  __typename: 'EndRetrospectiveSuccess';

  /**
   * true if the meeting was killed (ended before reaching last stage)
   */
  isKill: boolean;
  team: ITeam;
  meeting: IRetrospectiveMeeting;

  /**
   * The ID of the suggestion to try a retro meeting, if tried
   */
  removedSuggestedActionId: string | null;
  removedTaskIds: Array<string>;

  /**
   * An event that is important to the viewer, e.g. an ended meeting
   */
  timelineEvent: TimelineEvent;
}

/**
 * Return object for FlagReadyToAdvancePayload
 */
export type FlagReadyToAdvancePayload =
  | IErrorPayload
  | IFlagReadyToAdvanceSuccess;

export interface IFlagReadyToAdvanceSuccess {
  __typename: 'FlagReadyToAdvanceSuccess';

  /**
   * the meeting with the updated readyCount
   */
  meeting: NewMeeting;

  /**
   * the stage with the updated readyCount
   */
  stage: NewMeetingStage;
}

export interface IInactivateUserPayload {
  __typename: 'InactivateUserPayload';
  error: IStandardMutationError | null;

  /**
   * The user that has been inactivated
   */
  user: IUser | null;
}

export interface IInvalidateSessionsPayload {
  __typename: 'InvalidateSessionsPayload';
  error: IStandardMutationError | null;

  /**
   * The new, only valid auth token
   */
  authToken: string | null;
}

export interface IInviteToTeamPayload {
  __typename: 'InviteToTeamPayload';
  error: IStandardMutationError | null;

  /**
   * The team the inviter is inviting the invitee to
   */
  team: ITeam | null;

  /**
   * A list of email addresses the invitations were sent to
   */
  invitees: Array<any> | null;

  /**
   * the notification ID if this payload is sent to a subscriber, else null
   */
  teamInvitationNotificationId: string | null;

  /**
   * The notification sent to the invitee if they are a parabol user
   */
  teamInvitationNotification: INotificationTeamInvitation | null;

  /**
   * the `invite your team` suggested action that was removed, if any
   */
  removedSuggestedActionId: string | null;
}

export interface ILoginWithGooglePayload {
  __typename: 'LoginWithGooglePayload';
  error: IStandardMutationError | null;

  /**
   * The new auth token
   */
  authToken: string | null;
  userId: string | null;

  /**
   * the newly created user
   */
  user: IUser | null;
}

export interface ILoginWithPasswordPayload {
  __typename: 'LoginWithPasswordPayload';
  error: IStandardMutationError | null;

  /**
   * The new auth token
   */
  authToken: string | null;
  userId: string | null;

  /**
   * the newly created user
   */
  user: IUser | null;
}

export interface IMovePokerTemplateDimensionPayload {
  __typename: 'MovePokerTemplateDimensionPayload';
  error: IStandardMutationError | null;
  dimension: ITemplateDimension | null;
}

export interface IMoveReflectTemplatePromptPayload {
  __typename: 'MoveReflectTemplatePromptPayload';
  error: IStandardMutationError | null;
  prompt: IReflectPrompt | null;
}

export interface INavigateMeetingPayload {
  __typename: 'NavigateMeetingPayload';
  error: IStandardMutationError | null;
  meeting: NewMeeting | null;

  /**
   * The stage that the facilitator is now on
   */
  facilitatorStage: NewMeetingStage | null;

  /**
   * The stage that the facilitator left
   */
  oldFacilitatorStage: NewMeetingStage | null;

  /**
   * Additional details triggered by completing certain phases
   */
  phaseComplete: IPhaseCompletePayload | null;

  /**
   * The stages that were unlocked by navigating
   */
  unlockedStages: Array<NewMeetingStage> | null;
}

export interface IPhaseCompletePayload {
  __typename: 'PhaseCompletePayload';

  /**
   * payload provided if the retro reflect phase was completed
   */
  reflect: IReflectPhaseCompletePayload | null;

  /**
   * payload provided if the retro grouping phase was completed
   */
  group: IGroupPhaseCompletePayload | null;

  /**
   * payload provided if the retro voting phase was completed
   */
  vote: IVotePhaseCompletePayload | null;
}

export interface IReflectPhaseCompletePayload {
  __typename: 'ReflectPhaseCompletePayload';

  /**
   * a list of empty reflection groups to remove
   */
  emptyReflectionGroupIds: Array<string>;

  /**
   * The grouped reflections
   */
  reflectionGroups: Array<IRetroReflectionGroup>;
}

export interface IGroupPhaseCompletePayload {
  __typename: 'GroupPhaseCompletePayload';

  /**
   * a list of empty reflection groups to remove
   */
  emptyReflectionGroupIds: Array<string>;

  /**
   * the current meeting
   */
  meeting: IRetrospectiveMeeting;

  /**
   * a list of updated reflection groups
   */
  reflectionGroups: Array<IRetroReflectionGroup | null> | null;
}

export interface IVotePhaseCompletePayload {
  __typename: 'VotePhaseCompletePayload';

  /**
   * the current meeting
   */
  meeting: IRetrospectiveMeeting | null;
}

export interface INewMeetingCheckInPayload {
  __typename: 'NewMeetingCheckInPayload';
  error: IStandardMutationError | null;
  meetingMember: MeetingMember | null;
  meeting: NewMeeting | null;
}

export interface IPayLaterPayload {
  __typename: 'PayLaterPayload';
  error: IStandardMutationError | null;

  /**
   * the ids of the meetings that were showing conversion modals
   */
  meetingId: string | null;

  /**
   * the meetings that were showing conversion modals
   */
  meeting: NewMeeting | null;
}

/**
 * Return object for PersistJiraSearchQueryPayload
 */
export type PersistJiraSearchQueryPayload =
  | IErrorPayload
  | IPersistJiraSearchQuerySuccess;

export interface IPersistJiraSearchQuerySuccess {
  __typename: 'PersistJiraSearchQuerySuccess';

  /**
   * The newly created auth
   */
  atlassianIntegration: IAtlassianIntegration | null;
}

export interface IJiraSearchQueryInput {
  /**
   * The query string, either simple or JQL depending on the isJQL flag
   */
  queryString: string;

  /**
   * true if the queryString is JQL, else false
   */
  isJQL: boolean;

  /**
   * The list of project keys selected as a filter. null if not set
   */
  projectKeyFilters?: Array<string> | null;

  /**
   * true if this query should be deleted
   */
  isRemove?: boolean | null;
}

export interface IPushInvitationPayload {
  __typename: 'PushInvitationPayload';
  error: IStandardMutationError | null;
  user: IUser | null;
  meetingId: string | null;
  team: ITeam | null;
}

export interface IPromoteNewMeetingFacilitatorPayload {
  __typename: 'PromoteNewMeetingFacilitatorPayload';
  error: IStandardMutationError | null;

  /**
   * The meeting in progress
   */
  meeting: NewMeeting | null;
  facilitatorStage: NewMeetingStage | null;

  /**
   * The old meeting facilitator
   */
  oldFacilitator: IUser | null;
}

export interface IPromoteToTeamLeadPayload {
  __typename: 'PromoteToTeamLeadPayload';
  error: IStandardMutationError | null;
  team: ITeam | null;
  oldLeader: ITeamMember | null;
  newLeader: ITeamMember | null;
}

export interface IReflectTemplatePromptUpdateDescriptionPayload {
  __typename: 'ReflectTemplatePromptUpdateDescriptionPayload';
  error: IStandardMutationError | null;
  prompt: IReflectPrompt | null;
}

export interface IPokerTemplateDimensionUpdateDescriptionPayload {
  __typename: 'PokerTemplateDimensionUpdateDescriptionPayload';
  error: IStandardMutationError | null;
  dimension: ITemplateDimension | null;
}

export interface IReflectTemplatePromptUpdateGroupColorPayload {
  __typename: 'ReflectTemplatePromptUpdateGroupColorPayload';
  error: IStandardMutationError | null;
  prompt: IReflectPrompt | null;
}

export interface IRemoveAgendaItemPayload {
  __typename: 'RemoveAgendaItemPayload';
  error: IStandardMutationError | null;
  agendaItem: IAgendaItem | null;
  meetingId: string | null;

  /**
   * The meeting with the updated agenda item, if any
   */
  meeting: NewMeeting | null;
}

export interface IRemoveAtlassianAuthPayload {
  __typename: 'RemoveAtlassianAuthPayload';
  error: IStandardMutationError | null;
  teamId: string | null;

  /**
   * The team member with the updated auth
   */
  teamMember: ITeamMember | null;

  /**
   * The user with updated atlassianAuth
   */
  user: IUser | null;
}

export interface IRemoveGitHubAuthPayload {
  __typename: 'RemoveGitHubAuthPayload';
  error: IStandardMutationError | null;
  teamId: string | null;

  /**
   * The team member with the updated auth
   */
  teamMember: ITeamMember | null;

  /**
   * The user with updated githubAuth
   */
  user: IUser | null;
}

export interface IRemoveOrgUserPayload {
  __typename: 'RemoveOrgUserPayload';
  error: IStandardMutationError | null;

  /**
   * The organization the user was removed from
   */
  organization: IOrganization | null;

  /**
   * The teams the user was removed from
   */
  teams: Array<ITeam> | null;

  /**
   * The teamMembers removed
   */
  teamMembers: Array<ITeamMember> | null;

  /**
   * The tasks that were archived or reassigned
   */
  updatedTasks: Array<ITask> | null;

  /**
   * The user removed from the organization
   */
  user: IUser | null;

  /**
   * The notifications for each team the user was kicked out of
   */
  kickOutNotifications: Array<INotifyKickedOut> | null;

  /**
   * The organization member that got removed
   */
  removedOrgMember: IOrganizationUser | null;
  organizationUserId: string | null;
}

/**
 * A notification sent to someone who was just kicked off a team
 */
export interface INotifyKickedOut {
  __typename: 'NotifyKickedOut';

  /**
   * A shortid for the notification
   */
  id: string;

  /**
   * UNREAD if new, READ if viewer has seen it, CLICKED if viewed clicked it
   */
  status: NotificationStatusEnum;

  /**
   * The datetime to activate the notification & send it to the client
   */
  createdAt: any;
  type: NotificationEnum;

  /**
   * *The userId that should see this notification
   */
  userId: string;

  /**
   * the user that evicted recipient
   */
  evictor: IUser;

  /**
   * The name of the team the user is joining
   */
  teamName: string;

  /**
   * The teamId the user was kicked out of
   */
  teamId: string;

  /**
   * The team the task is on
   */
  team: ITeam;
}

export interface IRemovePokerTemplatePayload {
  __typename: 'RemovePokerTemplatePayload';
  error: IStandardMutationError | null;
  pokerTemplate: IPokerTemplate | null;
  pokerMeetingSettings: IPokerMeetingSettings | null;
}

export interface IRemoveReflectTemplatePayload {
  __typename: 'RemoveReflectTemplatePayload';
  error: IStandardMutationError | null;
  reflectTemplate: IReflectTemplate | null;
  retroMeetingSettings: IRetrospectiveMeetingSettings | null;
}

export interface IRemoveReflectTemplatePromptPayload {
  __typename: 'RemoveReflectTemplatePromptPayload';
  error: IStandardMutationError | null;
  reflectTemplate: IReflectTemplate | null;
  prompt: IReflectPrompt | null;
}

export interface IRemovePokerTemplateDimensionPayload {
  __typename: 'RemovePokerTemplateDimensionPayload';
  error: IStandardMutationError | null;
  pokerTemplate: IPokerTemplate | null;
  dimension: ITemplateDimension | null;
}

/**
 * Return object for RenameMeetingPayload
 */
export type RenameMeetingPayload = IErrorPayload | IRenameMeetingSuccess;

export interface IRenameMeetingSuccess {
  __typename: 'RenameMeetingSuccess';

  /**
   * the renamed meeting
   */
  meeting: NewMeeting;
}

export interface IRenameMeetingTemplatePayload {
  __typename: 'RenameMeetingTemplatePayload';
  error: IStandardMutationError | null;
  meetingTemplate: MeetingTemplate | null;
}

export interface IRenameReflectTemplatePromptPayload {
  __typename: 'RenameReflectTemplatePromptPayload';
  error: IStandardMutationError | null;
  prompt: IReflectPrompt | null;
}

export interface IRenamePokerTemplateDimensionPayload {
  __typename: 'RenamePokerTemplateDimensionPayload';
  error: IStandardMutationError | null;
  dimension: ITemplateDimension | null;
}

export interface IRenamePokerTemplateScalePayload {
  __typename: 'RenamePokerTemplateScalePayload';
  error: IStandardMutationError | null;
  scale: ITemplateScale | null;
}

export interface IRemovePokerTemplateScalePayload {
  __typename: 'RemovePokerTemplateScalePayload';
  error: IStandardMutationError | null;
  scale: ITemplateScale | null;

  /**
   * A list of dimensions that were using the archived scale
   */
  dimensions: Array<ITemplateDimension>;
}

export interface IRemovePokerTemplateScaleValuePayload {
  __typename: 'RemovePokerTemplateScaleValuePayload';
  error: IStandardMutationError | null;
  scale: ITemplateScale | null;
}

export interface IRemoveReflectionPayload {
  __typename: 'RemoveReflectionPayload';
  error: IStandardMutationError | null;
  meeting: NewMeeting | null;
  reflection: IRetroReflection | null;

  /**
   * The stages that were unlocked by navigating
   */
  unlockedStages: Array<NewMeetingStage> | null;
}

export interface IRemoveSlackAuthPayload {
  __typename: 'RemoveSlackAuthPayload';
  error: IStandardMutationError | null;

  /**
   * The ID of the authorization removed
   */
  authId: string | null;
  teamId: string | null;

  /**
   * The user with updated slackAuth
   */
  user: IUser | null;
}

export interface IRemoveTeamMemberPayload {
  __typename: 'RemoveTeamMemberPayload';
  error: IStandardMutationError | null;

  /**
   * The team member removed
   */
  teamMember: ITeamMember | null;

  /**
   * The team the team member was removed from
   */
  team: ITeam | null;

  /**
   * The tasks that got reassigned
   */
  updatedTasks: Array<ITask> | null;

  /**
   * The user removed from the team
   */
  user: IUser | null;

  /**
   * A notification if you were kicked out by the team leader
   */
  kickOutNotification: INotifyKickedOut | null;
}

export interface IResetPasswordPayload {
  __typename: 'ResetPasswordPayload';
  error: IStandardMutationError | null;

  /**
   * The new auth token
   */
  authToken: string | null;
  userId: string | null;

  /**
   * the user that changed their password
   */
  user: IUser | null;
}

export interface IResetRetroMeetingToGroupStagePayload {
  __typename: 'ResetRetroMeetingToGroupStagePayload';
  error: IStandardMutationError | null;
  meeting: NewMeeting | null;
}

export interface ISegmentEventTrackOptions {
  teamId?: string | null;
  orgId?: string | null;
  phase?: NewMeetingPhaseTypeEnum | null;
  eventId?: number | null;
  actionType?: string | null;
  spotlightSearchQuery?: string | null;
  meetingId?: string | null;
  reflectionId?: string | null;
  viewerId?: string | null;
  reflectionsCount?: number | null;
}

export interface ISelectTemplatePayload {
  __typename: 'SelectTemplatePayload';
  error: IStandardMutationError | null;
  meetingSettings: TeamMeetingSettings | null;
}

/**
 * Return object for SetAppLocationPayload
 */
export type SetAppLocationPayload = IErrorPayload | ISetAppLocationSuccess;

export interface ISetAppLocationSuccess {
  __typename: 'SetAppLocationSuccess';

  /**
   * the user with the updated location
   */
  user: IUser;
}

export interface ISetCheckInEnabledPayload {
  __typename: 'SetCheckInEnabledPayload';
  error: IStandardMutationError | null;
  settings: TeamMeetingSettings | null;
}

/**
 * Return object for SetDefaultSlackChannelPayload
 */
export type SetDefaultSlackChannelPayload =
  | IErrorPayload
  | ISetDefaultSlackChannelSuccess;

export interface ISetDefaultSlackChannelSuccess {
  __typename: 'SetDefaultSlackChannelSuccess';

  /**
   * The id of the slack channel that is now the default slack channel
   */
  slackChannelId: string;

  /**
   * The team member with the updated slack channel
   */
  teamMember: ITeamMember;
}

export type SetOrgUserRolePayload =
  | ISetOrgUserRoleAddedPayload
  | ISetOrgUserRoleRemovedPayload;

export interface ISetOrgUserRolePayload {
  __typename: 'SetOrgUserRolePayload';
  error: IStandardMutationError | null;
  organization: IOrganization | null;
  updatedOrgMember: IOrganizationUser | null;
}

export interface ISetPhaseFocusPayload {
  __typename: 'SetPhaseFocusPayload';
  error: IStandardMutationError | null;
  meeting: IRetrospectiveMeeting;
  reflectPhase: IReflectPhase;
}

export interface ISetStageTimerPayload {
  __typename: 'SetStageTimerPayload';
  error: IStandardMutationError | null;

  /**
   * The updated stage
   */
  stage: NewMeetingStage | null;
}

export interface ISetSlackNotificationPayload {
  __typename: 'SetSlackNotificationPayload';
  error: IStandardMutationError | null;
  slackNotifications: Array<ISlackNotification> | null;

  /**
   * The user with updated slack notifications
   */
  user: IUser | null;
}

export interface ISignUpWithPasswordPayload {
  __typename: 'SignUpWithPasswordPayload';
  error: IStandardMutationError | null;

  /**
   * The new auth token
   */
  authToken: string | null;
  userId: string | null;

  /**
   * the newly created user
   */
  user: IUser | null;
}

export interface IStartDraggingReflectionPayload {
  __typename: 'StartDraggingReflectionPayload';
  error: IStandardMutationError | null;

  /**
   * The proposed start/end of a drag. Subject to race conditions, it is up to the client to decide to accept or ignore
   */
  remoteDrag: IRemoteReflectionDrag | null;
  meeting: NewMeeting | null;
  meetingId: string | null;
  reflection: IRetroReflection | null;
  reflectionId: string | null;
  teamId: string | null;
}

/**
 * Return object for StartCheckInPayload
 */
export type StartCheckInPayload = IErrorPayload | IStartCheckInSuccess;

export interface IStartCheckInSuccess {
  __typename: 'StartCheckInSuccess';
  meeting: IActionMeeting;
  meetingId: string;
  team: ITeam;
}

/**
 * Return object for StartRetrospectivePayload
 */
export type StartRetrospectivePayload =
  | IErrorPayload
  | IStartRetrospectiveSuccess;

export interface IStartRetrospectiveSuccess {
  __typename: 'StartRetrospectiveSuccess';
  meeting: IRetrospectiveMeeting;
  meetingId: string;
  team: ITeam;
}

/**
 * Return object for StartSprintPokerPayload
 */
export type StartSprintPokerPayload = IErrorPayload | IStartSprintPokerSuccess;

export interface IStartSprintPokerSuccess {
  __typename: 'StartSprintPokerSuccess';
  meetingId: string;
  meeting: IPokerMeeting;
  team: ITeam;
  teamId: string;
}

/**
 * Return object for SetTaskHighlightPayload
 */
export type SetTaskHighlightPayload = IErrorPayload | ISetTaskHighlightSuccess;

export interface ISetTaskHighlightSuccess {
  __typename: 'SetTaskHighlightSuccess';

  /**
   * Meeting where the task is highlighted
   */
  meetingId: string;

  /**
   * Task which highlight changed
   */
  taskId: string;
  task: ITask;
}

export interface IUpdateAgendaItemPayload {
  __typename: 'UpdateAgendaItemPayload';
  agendaItem: IAgendaItem | null;
  meetingId: string | null;

  /**
   * The meeting with the updated agenda item, if any
   */
  meeting: NewMeeting | null;
  error: IStandardMutationError | null;
}

export interface IUpdateAgendaItemInput {
  /**
   * The unique agenda item ID, composed of a teamId::shortid
   */
  id: string;

  /**
   * The content of the agenda item
   */
  content?: string | null;

  /**
   * True if agenda item has been pinned
   */
  pinned?: boolean | null;

  /**
   * True if not processed or deleted
   */
  isActive?: boolean | null;

  /**
   * The sort order of the agenda item in the list
   */
  sortOrder?: number | null;
}

/**
 * Return object for UpdateCommentContentPayload
 */
export type UpdateCommentContentPayload =
  | IErrorPayload
  | IUpdateCommentContentSuccess;

export interface IUpdateCommentContentSuccess {
  __typename: 'UpdateCommentContentSuccess';

  /**
   * the comment with updated content
   */
  comment: IComment;
}

export interface IUpdateCreditCardPayload {
  __typename: 'UpdateCreditCardPayload';
  error: IStandardMutationError | null;

  /**
   * The organization that received the updated credit card
   */
  organization: IOrganization | null;

  /**
   * The teams that are now paid up
   */
  teamsUpdated: Array<ITeam | null> | null;
}

export interface IUpdateOrgPayload {
  __typename: 'UpdateOrgPayload';
  error: IStandardMutationError | null;

  /**
   * The updated org
   */
  organization: IOrganization | null;
}

export interface IUpdateOrgInput {
  /**
   * The unique action ID
   */
  id: string;

  /**
   * The name of the org
   */
  name?: string | null;

  /**
   * The org avatar
   */
  picture?: any | null;
}

export interface IUpdatePokerTemplateDimensionScalePayload {
  __typename: 'UpdatePokerTemplateDimensionScalePayload';
  error: IStandardMutationError | null;
  dimension: ITemplateDimension | null;
}

export interface IUpdatePokerTemplateScaleValuePayload {
  __typename: 'UpdatePokerTemplateScaleValuePayload';
  error: IStandardMutationError | null;
  scale: ITemplateScale | null;
}

/**
 * A value for a scale
 */
export interface ITemplateScaleInput {
  /**
   * The color used to visually group a scale value
   */
  color: string;

  /**
   * The label for this value, e.g., XS, M, L
   */
  label: string;
}

export interface IUpdateNewCheckInQuestionPayload {
  __typename: 'UpdateNewCheckInQuestionPayload';
  error: IStandardMutationError | null;
  meeting: NewMeeting | null;
}

export interface IUpdateDragLocationInput {
  id: string;
  clientHeight: number;
  clientWidth: number;
  meetingId: string;

  /**
   * The primary key of the item being drug
   */
  sourceId: string;

  /**
   * The estimated destination of the item being drug
   */
  targetId?: string | null;

  /**
   * The teamId to broadcast the message to
   */
  teamId: string;

  /**
   * horizontal distance from the top left of the target
   */
  targetOffsetX?: number | null;

  /**
   * vertical distance from the top left of the target
   */
  targetOffsetY?: number | null;

  /**
   * the left of the source, relative to the client window
   */
  clientX?: number | null;

  /**
   * the top of the source, relative to the client window
   */
  clientY?: number | null;
}

/**
 * Return object for UpdatePokerScopePayload
 */
export type UpdatePokerScopePayload = IErrorPayload | IUpdatePokerScopeSuccess;

export interface IUpdatePokerScopeSuccess {
  __typename: 'UpdatePokerScopeSuccess';

  /**
   * The meeting with the updated estimate phases
   */
  meeting: IPokerMeeting;
}

export interface IUpdatePokerScopeItemInput {
  /**
   * The location of the single source of truth (e.g. a jira-integrated parabol task would be "jira")
   */
  service: TaskServiceEnum;

  /**
   * If vanilla parabol task, taskId. If integrated parabol task, integrationHash
   */
  serviceTaskId: string;

  /**
   * The action to perform
   */
  action: AddOrDeleteEnum;
}

/**
 * Option to add or delete
 */
export const enum AddOrDeleteEnum {
  ADD = 'ADD',
  DELETE = 'DELETE',
}

export interface IUpdateReflectionContentPayload {
  __typename: 'UpdateReflectionContentPayload';
  error: IStandardMutationError | null;
  meeting: NewMeeting | null;
  reflection: IRetroReflection | null;
}

export interface IUpdateReflectionGroupTitlePayload {
  __typename: 'UpdateReflectionGroupTitlePayload';
  error: IStandardMutationError | null;
  meeting: NewMeeting | null;
  reflectionGroup: IRetroReflectionGroup | null;
}

/**
 * Return object for UpdateRetroMaxVotesPayload
 */
export type UpdateRetroMaxVotesPayload =
  | IErrorPayload
  | IUpdateRetroMaxVotesSuccess;

export interface IUpdateRetroMaxVotesSuccess {
  __typename: 'UpdateRetroMaxVotesSuccess';

  /**
   * the meeting with the updated max votes
   */
  meeting: IRetrospectiveMeeting;
}

export interface IUpdateTaskPayload {
  __typename: 'UpdateTaskPayload';
  error: IStandardMutationError | null;
  task: ITask | null;

  /**
   * If a task was just turned private, this its ID, else null
   */
  privatizedTaskId: string | null;
  addedNotification: INotifyTaskInvolves | null;
}

export interface IUpdateTaskInput {
  /**
   * The task id
   */
  id: string;
  content?: string | null;
  sortOrder?: number | null;
  status?: TaskStatusEnum | null;

  /**
   * userId, the owner of the task. This can be null if the task is not assigned to anyone.
   */
  userId?: string | null;
}

export interface IUpdateTaskDueDatePayload {
  __typename: 'UpdateTaskDueDatePayload';
  error: IStandardMutationError | null;
  task: ITask | null;
}

export interface IUpdateTeamNamePayload {
  __typename: 'UpdateTeamNamePayload';
  error: IStandardMutationError | null;
  team: ITeam | null;
}

export interface IUpdatedTeamInput {
  id?: string | null;

  /**
   * The name of the team
   */
  name?: string | null;

  /**
   * A link to the team’s profile image.
   */
  picture?: any | null;
}

/**
 * Return object for UpdateTemplateScopePayload
 */
export type UpdateTemplateScopePayload =
  | IErrorPayload
  | IUpdateTemplateScopeSuccess;

export interface IUpdateTemplateScopeSuccess {
  __typename: 'UpdateTemplateScopeSuccess';

  /**
   * the template that was just updated, if downscoped, does not provide whole story
   */
  template: MeetingTemplate;

  /**
   * if downscoping a previously used template, this will be the replacement
   */
  clonedTemplate: MeetingTemplate | null;

  /**
   * The settings that contain the teamTemplates array that was modified
   */
  settings: TeamMeetingSettings;
}

export interface IUpdateUserProfilePayload {
  __typename: 'UpdateUserProfilePayload';
  error: IStandardMutationError | null;
  user: IUser | null;

  /**
   * The updated team member
   */
  teamMembers: Array<ITeamMember> | null;
}

export interface IUpdateUserProfileInput {
  /**
   * A link to the user’s profile image.
   */
  picture?: any | null;

  /**
   * The name, as confirmed by the user
   */
  preferredName?: string | null;
}

export interface IUpgradeToProPayload {
  __typename: 'UpgradeToProPayload';
  error: IStandardMutationError | null;

  /**
   * The new Pro Org
   */
  organization: IOrganization | null;

  /**
   * The updated teams under the org
   */
  teams: Array<ITeam> | null;

  /**
   * the ids of the meetings that were showing conversion modals
   */
  meetingIds: Array<string> | null;

  /**
   * the meetings that were showing conversion modals
   */
  meetings: Array<NewMeeting> | null;
}

export interface IVerifyEmailPayload {
  __typename: 'VerifyEmailPayload';
  error: IStandardMutationError | null;

  /**
   * The new auth token sent to the mutator
   */
  authToken: string | null;
  userId: string | null;
  user: IUser | null;
}

export interface IVoteForReflectionGroupPayload {
  __typename: 'VoteForReflectionGroupPayload';
  error: IStandardMutationError | null;
  meeting: IRetrospectiveMeeting | null;
  meetingMember: IRetrospectiveMeetingMember | null;
  reflectionGroup: IRetroReflectionGroup | null;

  /**
   * The stages that were locked or unlocked by having at least 1 vote
   */
  unlockedStages: Array<NewMeetingStage> | null;
}

/**
 * Return object for VoteForPokerStoryPayload
 */
export type VoteForPokerStoryPayload =
  | IErrorPayload
  | IVoteForPokerStorySuccess;

export interface IVoteForPokerStorySuccess {
  __typename: 'VoteForPokerStorySuccess';

  /**
   * The stage that holds the updated scores
   */
  stage: IEstimateStage;
}

/**
 * Return object for PokerRevealVotesPayload
 */
export type PokerRevealVotesPayload = IErrorPayload | IPokerRevealVotesSuccess;

export interface IPokerRevealVotesSuccess {
  __typename: 'PokerRevealVotesSuccess';

  /**
   * The stage that holds the updated isVoting step
   */
  stage: IEstimateStage;
}

/**
 * Return object for PokerResetDimensionPayload
 */
export type PokerResetDimensionPayload =
  | IErrorPayload
  | IPokerResetDimensionSuccess;

export interface IPokerResetDimensionSuccess {
  __typename: 'PokerResetDimensionSuccess';

  /**
   * The stage that holds the updated isVoting step
   */
  stage: IEstimateStage;
}

/**
 * Return object for PokerAnnounceDeckHoverPayload
 */
export type PokerAnnounceDeckHoverPayload =
  | IErrorPayload
  | IPokerAnnounceDeckHoverSuccess;

export interface IPokerAnnounceDeckHoverSuccess {
  __typename: 'PokerAnnounceDeckHoverSuccess';
  meetingId: string;
  stageId: string;
  userId: string;
  user: IUser;
  isHover: boolean;

  /**
   * The stage that holds the updated scores
   */
  stage: IEstimateStage;
}

/**
 * Return object for MovePokerTemplateScaleValuePayload
 */
export type MovePokerTemplateScaleValuePayload =
  | IErrorPayload
  | IMovePokerTemplateScaleValueSuccess;

export interface IMovePokerTemplateScaleValueSuccess {
  __typename: 'MovePokerTemplateScaleValueSuccess';

  /**
   * The scale after values are moved
   */
  scale: ITemplateScale;
}

/**
 * Return object for UpdateJiraDimensionFieldPayload
 */
export type UpdateJiraDimensionFieldPayload =
  | IErrorPayload
  | IUpdateJiraDimensionFieldSuccess;

export interface IUpdateJiraDimensionFieldSuccess {
  __typename: 'UpdateJiraDimensionFieldSuccess';
  teamId: string;
  meetingId: string | null;
  team: ITeam;

  /**
   * The poker meeting the field was updated from
   */
  meeting: IPokerMeeting | null;
}

/**
 * Return object for JoinMeetingPayload
 */
export type JoinMeetingPayload = IErrorPayload | IJoinMeetingSuccess;

export interface IJoinMeetingSuccess {
  __typename: 'JoinMeetingSuccess';
  meetingId: string;

  /**
   * The meeting with the updated stages, if any
   */
  meeting: NewMeeting;
}

/**
 * Return object for AddMissingJiraFieldPayload
 */
export type AddMissingJiraFieldPayload =
  | IErrorPayload
  | IAddMissingJiraFieldSuccess;

export interface IAddMissingJiraFieldSuccess {
  __typename: 'AddMissingJiraFieldSuccess';

  /**
   * Jira field which was just added to an issue screen
   */
  dimensionField: IJiraDimensionField | null;
}

/**
 * Return object for SetPokerSpectatePayload
 */
export type SetPokerSpectatePayload = IErrorPayload | ISetPokerSpectateSuccess;

export interface ISetPokerSpectateSuccess {
  __typename: 'SetPokerSpectateSuccess';
  meetingId: string;
  userId: string;

  /**
   * The meeting member with the updated isSpectating value
   */
  meetingMember: IPokerMeetingMember;

  /**
   * The stages that were updated if the viewer voted and then changed to spectating
   */
  updatedStages: Array<IEstimateStage>;
}

/**
 * Return object for PersistGitHubSearchQueryPayload
 */
export type PersistGitHubSearchQueryPayload =
  | IErrorPayload
  | IPersistGitHubSearchQuerySuccess;

export interface IPersistGitHubSearchQuerySuccess {
  __typename: 'PersistGitHubSearchQuerySuccess';

  /**
   * The affected teamId
   */
  teamId: string;

  /**
   * The affected userId
   */
  userId: string;

  /**
   * The auth with the updated search queries
   */
  githubIntegration: IGitHubIntegration;
}

/**
 * Return object for SetTaskEstimatePayload
 */
export type SetTaskEstimatePayload = IErrorPayload | ISetTaskEstimateSuccess;

export interface ISetTaskEstimateSuccess {
  __typename: 'SetTaskEstimateSuccess';
  task: ITask;

  /**
   * The stage that holds the updated finalScore, if meetingId was provided
   */
  stage: IEstimateStage | null;
}

export interface ITaskEstimateInput {
  taskId: string;

  /**
   * The new estimate value
   */
  value: string;

  /**
   * The name of the estimate, e.g. Story Points
   */
  dimensionName: string;
  meetingId?: string | null;
}

/**
 * Return object for ToggleTeamDrawerPayload
 */
export type ToggleTeamDrawerPayload = IErrorPayload | IToggleTeamDrawerSuccess;

export interface IToggleTeamDrawerSuccess {
  __typename: 'ToggleTeamDrawerSuccess';
  teamMember: ITeamMember;
}

/**
 * Return object for UpdateGitHubDimensionFieldPayload
 */
export type UpdateGitHubDimensionFieldPayload =
  | IErrorPayload
  | IUpdateGitHubDimensionFieldSuccess;

export interface IUpdateGitHubDimensionFieldSuccess {
  __typename: 'UpdateGitHubDimensionFieldSuccess';
  teamId: string;
  meetingId: string;
  team: ITeam;

  /**
   * The poker meeting the field was updated from
   */
  meeting: IPokerMeeting;
}

/**
 * Return object for CreatePollPayload
 */
export type CreatePollPayload = IErrorPayload | ICreatePollSuccess;

export interface ICreatePollSuccess {
  __typename: 'CreatePollSuccess';

  /**
   * Poll id in a format of `poll:idGeneratedByDatabase`
   */
  pollId: string;

  /**
   * the poll just created
   */
  poll: IPoll;
}

/**
 * A poll created during the meeting
 */
export interface IPoll {
  __typename: 'Poll';

  /**
   * Poll id in a format of `poll:idGeneratedByDatabase`
   */
  id: string;

  /**
   * The rich text body of the item
   */
  content: string;

  /**
   * The timestamp the item was created
   */
  createdAt: any;

  /**
   * The userId that created the item
   */
  createdBy: string | null;

  /**
   * The user that created the item
   */
  createdByUser: IUser;

  /**
   * the replies to this threadable item
   */
  replies: Array<Threadable>;

  /**
   * The FK of the discussion this task was created in. Null if task was not created in a discussion
   */
  discussionId: string | null;

  /**
   * the parent, if this threadable is a reply, else null
   */
  threadParentId: string | null;

  /**
   * the order of this threadable, relative to threadParentId
   */
  threadSortOrder: number | null;

  /**
   * The timestamp the item was updated
   */
  updatedAt: any;

  /**
   * The foreign key for the meeting the poll was created in
   */
  meetingId: string | null;

  /**
   * The id of the team (indexed)
   */
  teamId: string;

  /**
   * The team this poll belongs to
   */
  team: ITeam;

  /**
   * Poll title
   */
  title: string;

  /**
   * A list of all the poll options related to this poll
   */
  options: Array<IPollOption>;
}

/**
 * Poll options for a given poll
 */
export interface IPollOption {
  __typename: 'PollOption';

  /**
   * Poll option id in a format of `pollOption:idGeneratedByDatabase`
   */
  id: string;

  /**
   * The timestamp the item was created
   */
  createdAt: any;

  /**
   * The timestamp the item was updated
   */
  updatedAt: any;

  /**
   * The foreign key of the poll this option belongs to in a format of `poll:idGeneratedByDatabase`
   */
  pollId: string;

  /**
   * The poll this option belongs to
   */
  poll: IPoll;

  /**
   * The ids of the users who voted for this option
   */
  voteUserIds: Array<string>;

  /**
   * Poll option title
   */
  title: string;
}

export interface ICreatePollInput {
  /**
   * Foreign key for the discussion this was created in
   */
  discussionId: string;

  /**
   * The order of this threadable
   */
  threadSortOrder: number;

  /**
   * Poll question
   */
  title: string;

  /**
   * All the poll voting options
   */
  options: Array<IPollOptionInput>;
}

export interface IPollOptionInput {
  /**
   * Poll option title
   */
  title: string;
}

/**
 * Return object for AddTeamMemberIntegrationAuthPayload
 */
export type AddTeamMemberIntegrationAuthPayload =
  | IErrorPayload
  | IAddTeamMemberIntegrationAuthSuccess;

export interface IAddTeamMemberIntegrationAuthSuccess {
  __typename: 'AddTeamMemberIntegrationAuthSuccess';

  /**
   * The auth that was just added
   */
  integrationAuth: TeamMemberIntegrationAuth;

  /**
   * The service this provider is associated with
   */
  service: IntegrationProviderServiceEnum;

  /**
   * The team member with the updated auth
   */
  teamMember: ITeamMember;

  /**
   * The user who updated TeamMemberIntegrationAuth object
   */
  user: IUser;
}

/**
 * Return object for AddIntegrationProviderPayload
 */
export type AddIntegrationProviderPayload =
  | IErrorPayload
  | IAddIntegrationProviderSuccess;

export interface IAddIntegrationProviderSuccess {
  __typename: 'AddIntegrationProviderSuccess';

  /**
   * The provider that was added
   */
  provider: IntegrationProvider;

  /**
   * Id of the team with the updated Integration Provider
   */
  teamId: string;

  /**
   * The team with the updated Integration Provider
   */
  team: ITeam;
}

/**
 * An Integration Provider configuration
 */
export interface IAddIntegrationProviderInput {
  /**
   * The team that the token is linked to
   */
  teamId: string;

  /**
   * The service this provider is associated with
   */
  service: IntegrationProviderServiceEnum;

  /**
   * The kind of token used by this provider
   */
  authStrategy: IntegrationProviderAuthStrategyEnum;

  /**
   * The scope this provider configuration was created at (org-wide, or by the team)
   */
  scope: IntegrationProviderEditableScopeEnum;

  /**
   * Webhook provider metadata, has to be non-null if token type is webhook, refactor once we get https://github.com/graphql/graphql-spec/pull/825
   */
  webhookProviderMetadataInput?: IIntegrationProviderMetadataInputWebhook | null;

  /**
   * OAuth1 provider metadata, has to be non-null if token type is OAuth1, refactor once we get https://github.com/graphql/graphql-spec/pull/825
   */
  oAuth1ProviderMetadataInput?: IIntegrationProviderMetadataInputOAuth1 | null;

  /**
   * OAuth2 provider metadata, has to be non-null if token type is OAuth2, refactor once we get https://github.com/graphql/graphql-spec/pull/825
   */
  oAuth2ProviderMetadataInput?: IIntegrationProviderMetadataInputOAuth2 | null;
}

/**
 * The scope this provider was created on by a user (excluding global scope)
 */
export const enum IntegrationProviderEditableScopeEnum {
  org = 'org',
  team = 'team',
}

/**
 * Webhook provider metadata
 */
export interface IIntegrationProviderMetadataInputWebhook {
  /**
   * Webhook URL to be used by the provider
   */
  webhookUrl: any;
}

/**
 * OAuth1 provider metadata
 */
export interface IIntegrationProviderMetadataInputOAuth1 {
  /**
   * The base URL used to access the provider
   */
  serverBaseUrl: any;

  /**
   * The client key to give to the provider
   */
  consumerKey: string;

  /**
   * Secret or Private key of the generate private/public key pair
   */
  consumerSecret: string;
}

/**
 * OAuth2 provider metadata
 */
export interface IIntegrationProviderMetadataInputOAuth2 {
  /**
   * The base URL used to access the provider
   */
  serverBaseUrl: any;

  /**
   * The client id to give to the provider
   */
  clientId: string;

  /**
   * The client id to give to the provider
   */
  clientSecret: string;
}

/**
 * Return object for UpdateIntegrationProviderPayload
 */
export type UpdateIntegrationProviderPayload =
  | IErrorPayload
  | IUpdateIntegrationProviderSuccess;

export interface IUpdateIntegrationProviderSuccess {
  __typename: 'UpdateIntegrationProviderSuccess';

  /**
   * The provider that was updated
   */
  provider: IntegrationProvider;

  /**
   * The team member with the updated auth
   */
  teamMember: ITeamMember;

  /**
   * The user who updated TeamMemberIntegrationAuth object
   */
  user: IUser;
}

/**
 * An Integration Provider configuration
 */
export interface IUpdateIntegrationProviderInput {
  /**
   * The the id of the Integration Provider to update
   */
  id: string;

  /**
   * The new scope for this provider (org, team)
   */
  scope?: IntegrationProviderEditableScopeEnum | null;

  /**
   * Webhook provider metadata, has to be non-null if token type is webhook, refactor once we get https://github.com/graphql/graphql-spec/pull/825
   */
  webhookProviderMetadataInput?: IIntegrationProviderMetadataInputWebhook | null;

  /**
   * OAuth2 provider metadata, has to be non-null if token type is OAuth2, refactor once we get https://github.com/graphql/graphql-spec/pull/825
   */
  oAuth2ProviderMetadataInput?: IIntegrationProviderMetadataInputOAuth2 | null;
}

/**
 * Return object for RemoveIntegrationProviderPayload
 */
export type RemoveIntegrationProviderPayload =
  | IErrorPayload
  | IRemoveIntegrationProviderSuccess;

export interface IRemoveIntegrationProviderSuccess {
  __typename: 'RemoveIntegrationProviderSuccess';

  /**
   * The team member with the updated auth
   */
  teamMember: ITeamMember;

  /**
   * The user who updated TeamMemberIntegrationAuth object
   */
  user: IUser;
}

/**
 * Return object for RemoveTeamMemberIntegrationAuthPayload
 */
export type RemoveTeamMemberIntegrationAuthPayload =
  | IErrorPayload
  | IRemoveTeamMemberIntegrationAuthSuccess;

export interface IRemoveTeamMemberIntegrationAuthSuccess {
  __typename: 'RemoveTeamMemberIntegrationAuthSuccess';

  /**
   * The team member with the updated auth
   */
  teamMember: ITeamMember;

  /**
   * The user who updated TeamMemberIntegrationAuth object
   */
  user: IUser;
}

export interface ISubscription {
  __typename: 'Subscription';
  meetingSubscription: MeetingSubscriptionPayload;
  notificationSubscription: NotificationSubscriptionPayload;
  organizationSubscription: OrganizationSubscriptionPayload;
  taskSubscription: TaskSubscriptionPayload;
  teamSubscription: TeamSubscriptionPayload;
}

export interface IMeetingSubscriptionOnSubscriptionArguments {
  meetingId: string;
}

export type MeetingSubscriptionPayload =
  | IAddCommentSuccess
  | ICreatePollSuccess
  | IAddReactjiToReflectionSuccess
  | IAddReactjiToReactableSuccess
  | IAutoGroupReflectionsPayload
  | ICreateReflectionPayload
  | IDeleteCommentSuccess
  | IDragDiscussionTopicPayload
  | IDragEstimatingTaskSuccess
  | IEditCommentingSuccess
  | IEditReflectionPayload
  | IEndDraggingReflectionPayload
  | IFlagReadyToAdvanceSuccess
  | INewMeetingCheckInPayload
  | IPromoteNewMeetingFacilitatorPayload
  | IRemoveReflectionPayload
  | IResetRetroMeetingToGroupStagePayload
  | ISetPhaseFocusPayload
  | ISetStageTimerPayload
  | IStartDraggingReflectionPayload
  | ISetTaskHighlightSuccess
  | IUpdateCommentContentSuccess
  | IUpdateDragLocationPayload
  | IUpdateNewCheckInQuestionPayload
  | IUpdateReflectionContentPayload
  | IUpdateReflectionGroupTitlePayload
  | IUpdateRetroMaxVotesSuccess
  | IUpdatePokerScopeSuccess
  | IVoteForReflectionGroupPayload
  | IVoteForPokerStorySuccess
  | IPokerRevealVotesSuccess
  | IPokerResetDimensionSuccess
  | IPokerAnnounceDeckHoverSuccess
  | IJoinMeetingSuccess
  | ISetPokerSpectateSuccess
  | ISetTaskEstimateSuccess;

export interface IAddReactjiToReflectionSuccess {
  __typename: 'AddReactjiToReflectionSuccess';

  /**
   * the reflection with the updated list of reactjis
   */
  reflection: IRetroReflection;
}

export interface IUpdateDragLocationPayload {
  __typename: 'UpdateDragLocationPayload';

  /**
   * The drag as sent from the team member
   */
  remoteDrag: IRemoteReflectionDrag | null;
  userId: string;
}

export type NotificationSubscriptionPayload =
  | IAcceptTeamInvitationPayload
  | IAddFeatureFlagPayload
  | IAddNewFeaturePayload
  | IAddOrgPayload
  | IAddTeamPayload
  | IArchiveTimelineEventSuccess
  | ISetNotificationStatusPayload
  | ICreateTaskPayload
  | IDeleteTaskPayload
  | IDisconnectSocketPayload
  | IEndCheckInSuccess
  | IEndNewMeetingPayload
  | IEndRetrospectiveSuccess
  | IInvalidateSessionsPayload
  | IInviteToTeamPayload
  | IMeetingStageTimeLimitPayload
  | IRemoveOrgUserPayload
  | IStripeFailPaymentPayload
  | IPersistJiraSearchQuerySuccess
  | IUser
  | IAuthTokenPayload
  | IPersistGitHubSearchQuerySuccess
  | IJiraIssue;

export interface IAddNewFeaturePayload {
  __typename: 'AddNewFeaturePayload';

  /**
   * the new feature broadcast
   */
  newFeature: INewFeatureBroadcast | null;
}

export interface IDisconnectSocketPayload {
  __typename: 'DisconnectSocketPayload';

  /**
   * The user that disconnected
   */
  user: IUser | null;
}

export interface IEndNewMeetingPayload {
  __typename: 'EndNewMeetingPayload';
  error: IStandardMutationError | null;

  /**
   * true if the meeting was killed (ended before reaching last stage)
   */
  isKill: boolean | null;
  team: ITeam | null;
  meeting: NewMeeting | null;

  /**
   * The ID of the suggestion to try a retro meeting, if tried
   */
  removedSuggestedActionId: string | null;
  removedTaskIds: Array<string> | null;

  /**
   * An event that is important to the viewer, e.g. an ended meeting
   */
  timelineEvent: TimelineEvent | null;
  updatedTaskIds: Array<string> | null;

  /**
   * Any tasks that were updated during the meeting
   */
  updatedTasks: Array<ITask> | null;
}

export interface IMeetingStageTimeLimitPayload {
  __typename: 'MeetingStageTimeLimitPayload';

  /**
   * The new notification that was just created
   */
  notification: INotificationMeetingStageTimeLimitEnd;
}

/**
 * A notification sent to a facilitator that the stage time limit has ended
 */
export interface INotificationMeetingStageTimeLimitEnd {
  __typename: 'NotificationMeetingStageTimeLimitEnd';

  /**
   * A shortid for the notification
   */
  id: string;

  /**
   * UNREAD if new, READ if viewer has seen it, CLICKED if viewed clicked it
   */
  status: NotificationStatusEnum;

  /**
   * The datetime to activate the notification & send it to the client
   */
  createdAt: any;
  type: NotificationEnum;

  /**
   * *The userId that should see this notification
   */
  userId: string;

  /**
   * FK
   */
  meetingId: string;

  /**
   * The meeting that had the time limit expire
   */
  meeting: NewMeeting;
}

export interface IStripeFailPaymentPayload {
  __typename: 'StripeFailPaymentPayload';
  error: IStandardMutationError | null;
  organization: IOrganization | null;

  /**
   * The notification to a billing leader stating the payment was rejected
   */
  notification: INotifyPaymentRejected;
}

/**
 * A notification sent to a user when their payment has been rejected
 */
export interface INotifyPaymentRejected {
  __typename: 'NotifyPaymentRejected';
  organization: IOrganization;

  /**
   * A shortid for the notification
   */
  id: string;

  /**
   * UNREAD if new, READ if viewer has seen it, CLICKED if viewed clicked it
   */
  status: NotificationStatusEnum;

  /**
   * The datetime to activate the notification & send it to the client
   */
  createdAt: any;
  type: NotificationEnum;

  /**
   * *The userId that should see this notification
   */
  userId: string;
}

/**
 * An auth token provided by Parabol to the client
 */
export interface IAuthTokenPayload {
  __typename: 'AuthTokenPayload';

  /**
   * The encoded JWT
   */
  id: string;
}

export type OrganizationSubscriptionPayload =
  | IAddOrgPayload
  | IArchiveOrganizationPayload
  | IDowngradeToPersonalPayload
  | IPayLaterPayload
  | IRemoveOrgUserPayload
  | ISetOrgUserRoleAddedPayload
  | ISetOrgUserRoleRemovedPayload
  | IUpdateCreditCardPayload
  | IUpdateOrgPayload
  | IUpgradeToProPayload
  | IUpdateTemplateScopeSuccess;

export interface ISetOrgUserRoleAddedPayload {
  __typename: 'SetOrgUserRoleAddedPayload';
  error: IStandardMutationError | null;
  organization: IOrganization | null;
  updatedOrgMember: IOrganizationUser | null;

  /**
   * If promoted, notify them and give them all other admin notifications
   */
  notificationsAdded: Array<Notification | null> | null;
}

export interface ISetOrgUserRoleRemovedPayload {
  __typename: 'SetOrgUserRoleRemovedPayload';
  error: IStandardMutationError | null;
  organization: IOrganization | null;
  updatedOrgMember: IOrganizationUser | null;
}

export type TaskSubscriptionPayload =
  | IChangeTaskTeamPayload
  | ICreateTaskIntegrationPayload
  | ICreateTaskPayload
  | IDeleteTaskPayload
  | IEditTaskPayload
  | IRemoveOrgUserPayload
  | IRemoveTeamMemberPayload
  | IUpdateTaskPayload
  | IUpdateTaskDueDatePayload;

export type TeamSubscriptionPayload =
  | IAcceptTeamInvitationPayload
  | IAddAgendaItemPayload
  | IAddAtlassianAuthPayload
  | IAddGitHubAuthPayload
  | IAddIntegrationProviderSuccess
  | IAddSlackAuthPayload
  | IAddTeamPayload
  | IArchiveTeamPayload
  | IDenyPushInvitationPayload
  | IDowngradeToPersonalPayload
  | IEndCheckInSuccess
  | IEndNewMeetingPayload
  | IEndRetrospectiveSuccess
  | IEndSprintPokerSuccess
  | INavigateMeetingPayload
  | IPushInvitationPayload
  | IPromoteToTeamLeadPayload
  | IRemoveAgendaItemPayload
  | IRemoveOrgUserPayload
  | IRemoveTeamMemberPayload
  | IRenameMeetingSuccess
  | ISelectTemplatePayload
  | IStartCheckInSuccess
  | IStartNewMeetingPayload
  | IStartRetrospectiveSuccess
  | IStartSprintPokerSuccess
  | IUpdateAgendaItemPayload
  | IUpdateCreditCardPayload
  | IUpdateTeamNamePayload
  | IUpgradeToProPayload
  | IAddReflectTemplatePayload
  | IAddPokerTemplatePayload
  | IAddReflectTemplatePromptPayload
  | IAddPokerTemplateDimensionPayload
  | IAddPokerTemplateScalePayload
  | IAddPokerTemplateScaleValuePayload
  | IMoveReflectTemplatePromptPayload
  | IMovePokerTemplateDimensionPayload
  | IReflectTemplatePromptUpdateDescriptionPayload
  | IPokerTemplateDimensionUpdateDescriptionPayload
  | IReflectTemplatePromptUpdateGroupColorPayload
  | IRemoveAtlassianAuthPayload
  | IRemoveGitHubAuthPayload
  | IRemoveSlackAuthPayload
  | IRemoveReflectTemplatePayload
  | IRemovePokerTemplatePayload
  | IRemoveReflectTemplatePromptPayload
  | IRemovePokerTemplateDimensionPayload
  | IRemovePokerTemplateScalePayload
  | IRenameMeetingTemplatePayload
  | IRenamePokerTemplatePayload
  | IRenameReflectTemplatePromptPayload
  | IRenamePokerTemplateDimensionPayload
  | IRenamePokerTemplateScalePayload
  | IRemovePokerTemplateScaleValuePayload
  | ISetCheckInEnabledPayload
  | ISetSlackNotificationPayload
  | IUpdatePokerTemplateDimensionScalePayload
  | IUpdatePokerTemplateScaleValuePayload
  | IUpdateUserProfilePayload
  | IPersistJiraSearchQuerySuccess
  | IMovePokerTemplateScaleValueSuccess
  | IUpdateJiraDimensionFieldSuccess
  | ISetDefaultSlackChannelSuccess
  | ISetAppLocationSuccess
  | IUpdateGitHubDimensionFieldSuccess
  | IUpdateIntegrationProviderSuccess;

export interface IStartNewMeetingPayload {
  __typename: 'StartNewMeetingPayload';
  error: IStandardMutationError | null;
  team: ITeam | null;
  meetingId: string | null;
  meeting: NewMeeting | null;
}

export interface IRenamePokerTemplatePayload {
  __typename: 'RenamePokerTemplatePayload';
  error: IStandardMutationError | null;
  pokerTemplate: IPokerTemplate | null;
}

export interface IXGitHubErrorLocation {
  __typename: '_xGitHubErrorLocation';
  line: number;
  column: number;
}

export interface IXGitHubError {
  __typename: '_xGitHubError';
  message: string;
  locations: Array<IXGitHubErrorLocation> | null;
  path: Array<string> | null;
}

export interface IXGitHubApi {
  __typename: '_xGitHubApi';
  errors: Array<IXGitHubError> | null;
  query: IXGitHubQuery | null;
  mutation: IXGitHubMutation | null;
}

/**
 * Represents the access level of a relationship between a User and object that it is related to
 */
export interface IXGitLabAccessLevel {
  __typename: '_xGitLabAccessLevel';

  /**
   * Integer representation of access level.
   */
  integerValue: number | null;

  /**
   * String representation of access level.
   */
  stringValue: XGitLabAccessLevelEnum | null;
}

/**
 * Access level to a resource
 */
export const enum XGitLabAccessLevelEnum {
  /**
   * No access.
   */
  NO_ACCESS = 'NO_ACCESS',

  /**
   * Minimal access.
   */
  MINIMAL_ACCESS = 'MINIMAL_ACCESS',

  /**
   * Guest access.
   */
  GUEST = 'GUEST',

  /**
   * Reporter access.
   */
  REPORTER = 'REPORTER',

  /**
   * Developer access.
   */
  DEVELOPER = 'DEVELOPER',

  /**
   * Maintainer access.
   */
  MAINTAINER = 'MAINTAINER',

  /**
   * Owner access.
   */
  OWNER = 'OWNER',
}

/**
 * Autogenerated input type of AddProjectToSecurityDashboard
 */
export interface IXGitLabAddProjectToSecurityDashboardInput {
  /**
   * ID of the project to be added to Instance Security Dashboard.
   */
  id: any;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of AddProjectToSecurityDashboard
 */
export interface IXGitLabAddProjectToSecurityDashboardPayload {
  __typename: '_xGitLabAddProjectToSecurityDashboardPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * Errors encountered during execution of the mutation.
   */
  errors: Array<string>;

  /**
   * Project that was added to the Instance Security Dashboard.
   */
  project: IXGitLabProject | null;
}

/**
 * Autogenerated input type of AdminSidekiqQueuesDeleteJobs
 */
export interface IXGitLabAdminSidekiqQueuesDeleteJobsInput {
  /**
   * Delete jobs matching user in the context metadata.
   */
  user?: string | null;

  /**
   * Delete jobs matching project in the context metadata.
   */
  project?: string | null;

  /**
   * Delete jobs matching root_namespace in the context metadata.
   */
  rootNamespace?: string | null;

  /**
   * Delete jobs matching subscription_plan in the context metadata.
   */
  subscriptionPlan?: string | null;

  /**
   * Delete jobs matching caller_id in the context metadata.
   */
  callerId?: string | null;

  /**
   * Delete jobs matching remote_ip in the context metadata.
   */
  remoteIp?: string | null;

  /**
   * Delete jobs matching related_class in the context metadata.
   */
  relatedClass?: string | null;

  /**
   * Delete jobs matching feature_category in the context metadata.
   */
  featureCategory?: string | null;

  /**
   * Delete jobs matching client_id in the context metadata.
   */
  clientId?: string | null;

  /**
   * Delete jobs with the given worker class.
   */
  workerClass?: string | null;

  /**
   * Name of the queue to delete jobs from.
   */
  queueName: string;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of AdminSidekiqQueuesDeleteJobs
 */
export interface IXGitLabAdminSidekiqQueuesDeleteJobsPayload {
  __typename: '_xGitLabAdminSidekiqQueuesDeleteJobsPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * Errors encountered during execution of the mutation.
   */
  errors: Array<string>;

  /**
   * Information about the status of the deletion request.
   */
  result: IXGitLabDeleteJobsResponse | null;
}

/**
 * Configuration details for an Agent
 */
export interface IXGitLabAgentConfiguration {
  __typename: '_xGitLabAgentConfiguration';

  /**
   * Name of the agent.
   */
  agentName: string | null;
}

/**
 * The connection type for AgentConfiguration.
 */
export interface IXGitLabAgentConfigurationConnection {
  __typename: '_xGitLabAgentConfigurationConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitLabAgentConfigurationEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitLabAgentConfiguration | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitLabPageInfo;
}

/**
 * An edge in a connection.
 */
export interface IXGitLabAgentConfigurationEdge {
  __typename: '_xGitLabAgentConfigurationEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitLabAgentConfiguration | null;
}

/**
 * Information about a connected Agent
 */
export interface IXGitLabAgentMetadata {
  __typename: '_xGitLabAgentMetadata';

  /**
   * Agent version commit.
   */
  commit: string | null;

  /**
   * Name of the pod running the Agent.
   */
  podName: string | null;

  /**
   * Namespace of the pod running the Agent.
   */
  podNamespace: string | null;

  /**
   * Agent version tag.
   */
  version: string | null;
}

/**
 * Describes an alert from the project's Alert Management
 */
export interface IXGitLabAlertManagementAlert {
  __typename: '_xGitLabAlertManagementAlert';

  /**
   * Assignees of the alert.
   */
  assignees: IXGitLabUserCoreConnection | null;

  /**
   * Timestamp the alert was created.
   */
  createdAt: any | null;

  /**
   * Description of the alert.
   */
  description: string | null;

  /**
   * Alert details.
   */
  details: any | null;

  /**
   * URL of the alert detail page.
   */
  detailsUrl: string;

  /**
   * All discussions on this noteable.
   */
  discussions: IXGitLabDiscussionConnection;

  /**
   * Timestamp the alert ended.
   */
  endedAt: any | null;

  /**
   * Environment for the alert.
   */
  environment: IXGitLabEnvironment | null;

  /**
   * Number of events of this alert.
   */
  eventCount: number | null;

  /**
   * List of hosts the alert came from.
   */
  hosts: Array<string> | null;

  /**
   * Internal ID of the alert.
   */
  iid: string;

  /**
   * Issue attached to the alert.
   */
  issue: IXGitLabIssue | null;

  /**
   * Internal ID of the GitLab issue attached to the alert. Deprecated in 13.10: Use issue field.
   * @deprecated "Use issue field. Deprecated in 13.10."
   */
  issueIid: string | null;

  /**
   * URL for metrics embed for the alert.
   */
  metricsDashboardUrl: string | null;

  /**
   * Monitoring tool the alert came from.
   */
  monitoringTool: string | null;

  /**
   * All notes on this noteable.
   */
  notes: IXGitLabNoteConnection;

  /**
   * Alert condition for Prometheus.
   */
  prometheusAlert: IXGitLabPrometheusAlert | null;

  /**
   * Runbook for the alert as defined in alert details.
   */
  runbook: string | null;

  /**
   * Service the alert came from.
   */
  service: string | null;

  /**
   * Severity of the alert.
   */
  severity: XGitLabAlertManagementSeverity | null;

  /**
   * Timestamp the alert was raised.
   */
  startedAt: any | null;

  /**
   * Status of the alert.
   */
  status: XGitLabAlertManagementStatus | null;

  /**
   * Title of the alert.
   */
  title: string | null;

  /**
   * To-do items of the current user for the alert.
   */
  todos: IXGitLabTodoConnection | null;

  /**
   * Timestamp the alert was last updated.
   */
  updatedAt: any | null;
}

export interface IAssigneesOnXGitLabAlertManagementAlertArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IDiscussionsOnXGitLabAlertManagementAlertArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface INotesOnXGitLabAlertManagementAlertArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface ITodosOnXGitLabAlertManagementAlertArguments {
  /**
   * Action to be filtered.
   */
  action?: Array<XGitLabTodoActionEnum> | null;

  /**
   * ID of an author.
   */
  authorId?: Array<string> | null;

  /**
   * ID of a project.
   */
  projectId?: Array<string> | null;

  /**
   * ID of a group.
   */
  groupId?: Array<string> | null;

  /**
   * State of the todo.
   */
  state?: Array<XGitLabTodoStateEnum> | null;

  /**
   * Type of the todo.
   */
  type?: Array<XGitLabTodoTargetEnum> | null;

  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

/**
 * The connection type for AlertManagementAlert.
 */
export interface IXGitLabAlertManagementAlertConnection {
  __typename: '_xGitLabAlertManagementAlertConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitLabAlertManagementAlertEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitLabAlertManagementAlert | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitLabPageInfo;
}

/**
 * An edge in a connection.
 */
export interface IXGitLabAlertManagementAlertEdge {
  __typename: '_xGitLabAlertManagementAlertEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitLabAlertManagementAlert | null;
}

/**
 * Values for sorting alerts
 */
export const enum XGitLabAlertManagementAlertSort {
  /**
   * Updated at descending order.
   * @deprecated "This was renamed. Please use `UPDATED_DESC`. Deprecated in 13.5."
   */
  updated_desc = 'updated_desc',

  /**
   * Updated at ascending order.
   * @deprecated "This was renamed. Please use `UPDATED_ASC`. Deprecated in 13.5."
   */
  updated_asc = 'updated_asc',

  /**
   * Created at descending order.
   * @deprecated "This was renamed. Please use `CREATED_DESC`. Deprecated in 13.5."
   */
  created_desc = 'created_desc',

  /**
   * Created at ascending order.
   * @deprecated "This was renamed. Please use `CREATED_ASC`. Deprecated in 13.5."
   */
  created_asc = 'created_asc',

  /**
   * Updated at descending order.
   */
  UPDATED_DESC = 'UPDATED_DESC',

  /**
   * Updated at ascending order.
   */
  UPDATED_ASC = 'UPDATED_ASC',

  /**
   * Created at descending order.
   */
  CREATED_DESC = 'CREATED_DESC',

  /**
   * Created at ascending order.
   */
  CREATED_ASC = 'CREATED_ASC',

  /**
   * Start time by ascending order.
   */
  STARTED_AT_ASC = 'STARTED_AT_ASC',

  /**
   * Start time by descending order.
   */
  STARTED_AT_DESC = 'STARTED_AT_DESC',

  /**
   * End time by ascending order.
   */
  ENDED_AT_ASC = 'ENDED_AT_ASC',

  /**
   * End time by descending order.
   */
  ENDED_AT_DESC = 'ENDED_AT_DESC',

  /**
   * Created time by ascending order.
   */
  CREATED_TIME_ASC = 'CREATED_TIME_ASC',

  /**
   * Created time by descending order.
   */
  CREATED_TIME_DESC = 'CREATED_TIME_DESC',

  /**
   * Created time by ascending order.
   */
  UPDATED_TIME_ASC = 'UPDATED_TIME_ASC',

  /**
   * Created time by descending order.
   */
  UPDATED_TIME_DESC = 'UPDATED_TIME_DESC',

  /**
   * Events count by ascending order.
   */
  EVENT_COUNT_ASC = 'EVENT_COUNT_ASC',

  /**
   * Events count by descending order.
   */
  EVENT_COUNT_DESC = 'EVENT_COUNT_DESC',

  /**
   * Severity from less critical to more critical.
   */
  SEVERITY_ASC = 'SEVERITY_ASC',

  /**
   * Severity from more critical to less critical.
   */
  SEVERITY_DESC = 'SEVERITY_DESC',

  /**
   * Status by order: `Ignored > Resolved > Acknowledged > Triggered`.
   */
  STATUS_ASC = 'STATUS_ASC',

  /**
   * Status by order: `Triggered > Acknowledged > Resolved > Ignored`.
   */
  STATUS_DESC = 'STATUS_DESC',
}

/**
 * Represents total number of alerts for the represented categories
 */
export interface IXGitLabAlertManagementAlertStatusCountsType {
  __typename: '_xGitLabAlertManagementAlertStatusCountsType';

  /**
   * Number of alerts with status ACKNOWLEDGED for the project
   */
  acknowledged: number | null;

  /**
   * Total number of alerts for the project.
   */
  all: number | null;

  /**
   * Number of alerts with status IGNORED for the project
   */
  ignored: number | null;

  /**
   * Number of alerts with status TRIGGERED or ACKNOWLEDGED for the project.
   */
  open: number | null;

  /**
   * Number of alerts with status RESOLVED for the project
   */
  resolved: number | null;

  /**
   * Number of alerts with status TRIGGERED for the project
   */
  triggered: number | null;
}

/**
 * Filters the alerts based on given domain
 */
export const enum XGitLabAlertManagementDomainFilter {
  /**
   * Alerts for operations domain.
   */
  operations = 'operations',

  /**
   * Alerts for threat monitoring domain.
   */
  threat_monitoring = 'threat_monitoring',
}

/**
 * An endpoint and credentials used to accept alerts for a project
 */
export interface IXGitLabAlertManagementHttpIntegration {
  __typename: '_xGitLabAlertManagementHttpIntegration';

  /**
   * Whether the endpoint is currently accepting alerts.
   */
  active: boolean | null;

  /**
   * URL at which Prometheus metrics can be queried to populate the metrics dashboard.
   */
  apiUrl: string | null;

  /**
   * ID of the integration.
   */
  id: string;

  /**
   * Name of the integration.
   */
  name: string | null;

  /**
   * Extract alert fields from payload example for custom mapping.
   */
  payloadAlertFields: Array<IXGitLabAlertManagementPayloadAlertField> | null;

  /**
   * The custom mapping of GitLab alert attributes to fields from the payload_example.
   */
  payloadAttributeMappings: Array<IXGitLabAlertManagementPayloadAlertMappingField> | null;

  /**
   * Example of an alert payload.
   */
  payloadExample: any | null;

  /**
   * Token used to authenticate alert notification requests.
   */
  token: string | null;

  /**
   * Type of integration.
   */
  type: XGitLabAlertManagementIntegrationType;

  /**
   * Endpoint which accepts alert notifications.
   */
  url: string | null;
}

/**
 * The connection type for AlertManagementHttpIntegration.
 */
export interface IXGitLabAlertManagementHttpIntegrationConnection {
  __typename: '_xGitLabAlertManagementHttpIntegrationConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitLabAlertManagementHttpIntegrationEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitLabAlertManagementHttpIntegration | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitLabPageInfo;
}

/**
 * An edge in a connection.
 */
export interface IXGitLabAlertManagementHttpIntegrationEdge {
  __typename: '_xGitLabAlertManagementHttpIntegrationEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitLabAlertManagementHttpIntegration | null;
}

export type _xGitLabAlertManagementIntegration =
  | IXGitLabAlertManagementHttpIntegration
  | IXGitLabAlertManagementPrometheusIntegration;

export interface IXGitLabAlertManagementIntegration {
  __typename: '_xGitLabAlertManagementIntegration';

  /**
   * Whether the endpoint is currently accepting alerts.
   */
  active: boolean | null;

  /**
   * URL at which Prometheus metrics can be queried to populate the metrics dashboard.
   */
  apiUrl: string | null;

  /**
   * ID of the integration.
   */
  id: string;

  /**
   * Name of the integration.
   */
  name: string | null;

  /**
   * Token used to authenticate alert notification requests.
   */
  token: string | null;

  /**
   * Type of integration.
   */
  type: XGitLabAlertManagementIntegrationType;

  /**
   * Endpoint which accepts alert notifications.
   */
  url: string | null;
}

/**
 * The connection type for AlertManagementIntegration.
 */
export interface IXGitLabAlertManagementIntegrationConnection {
  __typename: '_xGitLabAlertManagementIntegrationConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitLabAlertManagementIntegrationEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<_xGitLabAlertManagementIntegration | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitLabPageInfo;
}

/**
 * An edge in a connection.
 */
export interface IXGitLabAlertManagementIntegrationEdge {
  __typename: '_xGitLabAlertManagementIntegrationEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: _xGitLabAlertManagementIntegration | null;
}

/**
 * Values of types of integrations
 */
export const enum XGitLabAlertManagementIntegrationType {
  /**
   * Prometheus integration.
   */
  PROMETHEUS = 'PROMETHEUS',

  /**
   * Integration with any monitoring tool.
   */
  HTTP = 'HTTP',
}

/**
 * Parsed field from an alert used for custom mappings
 */
export interface IXGitLabAlertManagementPayloadAlertField {
  __typename: '_xGitLabAlertManagementPayloadAlertField';

  /**
   * Human-readable label of the payload path.
   */
  label: string | null;

  /**
   * Path to value inside payload JSON.
   */
  path: Array<any> | null;

  /**
   * Type of the parsed value.
   */
  type: XGitLabAlertManagementPayloadAlertFieldType | null;
}

/**
 * Field that are available while modifying the custom mapping attributes for an HTTP integration
 */
export interface IXGitLabAlertManagementPayloadAlertFieldInput {
  /**
   * GitLab alert field name.
   */
  fieldName: XGitLabAlertManagementPayloadAlertFieldName;

  /**
   * Path to value inside payload JSON.
   */
  path: Array<any>;

  /**
   * Human-readable label of the payload path.
   */
  label?: string | null;

  /**
   * Type of the parsed value.
   */
  type: XGitLabAlertManagementPayloadAlertFieldType;
}

/**
 * Values for alert field names used in the custom mapping
 */
export const enum XGitLabAlertManagementPayloadAlertFieldName {
  /**
   * The title of the incident.
   */
  TITLE = 'TITLE',

  /**
   * A high-level summary of the problem.
   */
  DESCRIPTION = 'DESCRIPTION',

  /**
   * The time of the incident.
   */
  START_TIME = 'START_TIME',

  /**
   * The resolved time of the incident.
   */
  END_TIME = 'END_TIME',

  /**
   * The affected service.
   */
  SERVICE = 'SERVICE',

  /**
   * The name of the associated monitoring tool.
   */
  MONITORING_TOOL = 'MONITORING_TOOL',

  /**
   * One or more hosts, as to where this incident occurred.
   */
  HOSTS = 'HOSTS',

  /**
   * The severity of the alert.
   */
  SEVERITY = 'SEVERITY',

  /**
   * The unique identifier of the alert. This can be used to group occurrences of the same alert.
   */
  FINGERPRINT = 'FINGERPRINT',

  /**
   * The name of the associated GitLab environment.
   */
  GITLAB_ENVIRONMENT_NAME = 'GITLAB_ENVIRONMENT_NAME',
}

/**
 * Values for alert field types used in the custom mapping
 */
export const enum XGitLabAlertManagementPayloadAlertFieldType {
  /**
   * Array field type.
   */
  ARRAY = 'ARRAY',

  /**
   * DateTime field type.
   */
  DATETIME = 'DATETIME',

  /**
   * String field type.
   */
  STRING = 'STRING',
}

/**
 * Parsed field (with its name) from an alert used for custom mappings
 */
export interface IXGitLabAlertManagementPayloadAlertMappingField {
  __typename: '_xGitLabAlertManagementPayloadAlertMappingField';

  /**
   * GitLab alert field name.
   */
  fieldName: XGitLabAlertManagementPayloadAlertFieldName | null;

  /**
   * Human-readable label of the payload path.
   */
  label: string | null;

  /**
   * Path to value inside payload JSON.
   */
  path: Array<any> | null;

  /**
   * Type of the parsed value.
   */
  type: XGitLabAlertManagementPayloadAlertFieldType | null;
}

/**
 * An endpoint and credentials used to accept Prometheus alerts for a project
 */
export interface IXGitLabAlertManagementPrometheusIntegration {
  __typename: '_xGitLabAlertManagementPrometheusIntegration';

  /**
   * Whether the endpoint is currently accepting alerts.
   */
  active: boolean | null;

  /**
   * URL at which Prometheus metrics can be queried to populate the metrics dashboard.
   */
  apiUrl: string | null;

  /**
   * ID of the integration.
   */
  id: string;

  /**
   * Name of the integration.
   */
  name: string | null;

  /**
   * Token used to authenticate alert notification requests.
   */
  token: string | null;

  /**
   * Type of integration.
   */
  type: XGitLabAlertManagementIntegrationType;

  /**
   * Endpoint which accepts alert notifications.
   */
  url: string | null;
}

/**
 * Alert severity values
 */
export const enum XGitLabAlertManagementSeverity {
  /**
   * Critical severity
   */
  CRITICAL = 'CRITICAL',

  /**
   * High severity
   */
  HIGH = 'HIGH',

  /**
   * Medium severity
   */
  MEDIUM = 'MEDIUM',

  /**
   * Low severity
   */
  LOW = 'LOW',

  /**
   * Info severity
   */
  INFO = 'INFO',

  /**
   * Unknown severity
   */
  UNKNOWN = 'UNKNOWN',
}

/**
 * Alert status values
 */
export const enum XGitLabAlertManagementStatus {
  /**
   * Investigation has not started.
   */
  TRIGGERED = 'TRIGGERED',

  /**
   * Someone is actively investigating the problem.
   */
  ACKNOWLEDGED = 'ACKNOWLEDGED',

  /**
   * The problem has been addressed.
   */
  RESOLVED = 'RESOLVED',

  /**
   * No action will be taken.
   */
  IGNORED = 'IGNORED',
}

/**
 * Autogenerated input type of AlertSetAssignees
 */
export interface IXGitLabAlertSetAssigneesInput {
  /**
   * Project the alert to mutate is in.
   */
  projectPath: string;

  /**
   * IID of the alert to mutate.
   */
  iid: string;

  /**
   * Usernames to assign to the alert. Replaces existing assignees by default.
   */
  assigneeUsernames: Array<string>;

  /**
   * Operation to perform. Defaults to REPLACE.
   */
  operationMode?: XGitLabMutationOperationMode | null;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of AlertSetAssignees
 */
export interface IXGitLabAlertSetAssigneesPayload {
  __typename: '_xGitLabAlertSetAssigneesPayload';

  /**
   * Alert after mutation.
   */
  alert: IXGitLabAlertManagementAlert | null;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * Errors encountered during execution of the mutation.
   */
  errors: Array<string>;

  /**
   * Issue created after mutation.
   */
  issue: IXGitLabIssue | null;

  /**
   * To-do item after mutation.
   */
  todo: IXGitLabTodo | null;
}

/**
 * Autogenerated input type of AlertTodoCreate
 */
export interface IXGitLabAlertTodoCreateInput {
  /**
   * Project the alert to mutate is in.
   */
  projectPath: string;

  /**
   * IID of the alert to mutate.
   */
  iid: string;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of AlertTodoCreate
 */
export interface IXGitLabAlertTodoCreatePayload {
  __typename: '_xGitLabAlertTodoCreatePayload';

  /**
   * Alert after mutation.
   */
  alert: IXGitLabAlertManagementAlert | null;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * Errors encountered during execution of the mutation.
   */
  errors: Array<string>;

  /**
   * Issue created after mutation.
   */
  issue: IXGitLabIssue | null;

  /**
   * To-do item after mutation.
   */
  todo: IXGitLabTodo | null;
}

/**
 * Data associated with configuring API fuzzing scans in GitLab CI
 */
export interface IXGitLabApiFuzzingCiConfiguration {
  __typename: '_xGitLabApiFuzzingCiConfiguration';

  /**
   * All available scan modes.
   */
  scanModes: Array<XGitLabApiFuzzingScanMode> | null;

  /**
   * All default scan profiles.
   */
  scanProfiles: Array<IXGitLabApiFuzzingScanProfile> | null;
}

/**
 * Autogenerated input type of ApiFuzzingCiConfigurationCreate
 */
export interface IXGitLabApiFuzzingCiConfigurationCreateInput {
  /**
   * Full path of the project.
   */
  projectPath: string;

  /**
   * File path or URL to the file that defines the API surface for scanning. Must
   * be in the format specified by the `scanMode` argument.
   */
  apiSpecificationFile: string;

  /**
   * CI variable containing the password for authenticating with the target API.
   */
  authPassword?: string | null;

  /**
   * CI variable containing the username for authenticating with the target API.
   */
  authUsername?: string | null;

  /**
   * Mode for API fuzzing scans.
   */
  scanMode: XGitLabApiFuzzingScanMode;

  /**
   * Name of a default profile to use for scanning. Ex: Quick-10.
   */
  scanProfile?: string | null;

  /**
   * URL for the target of API fuzzing scans.
   */
  target: string;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of ApiFuzzingCiConfigurationCreate
 */
export interface IXGitLabApiFuzzingCiConfigurationCreatePayload {
  __typename: '_xGitLabApiFuzzingCiConfigurationCreatePayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * A YAML snippet that can be inserted into the project's `.gitlab-ci.yml` to set up API fuzzing scans.
   */
  configurationYaml: string | null;

  /**
   * Errors encountered during execution of the mutation.
   */
  errors: Array<string>;

  /**
   * Location at which the project's `.gitlab-ci.yml` file can be edited in the browser.
   */
  gitlabCiYamlEditPath: string | null;
}

/**
 * All possible ways to specify the API surface for an API fuzzing scan.
 */
export const enum XGitLabApiFuzzingScanMode {
  /**
   * The API surface is specified by a HAR file.
   */
  HAR = 'HAR',

  /**
   * The API surface is specified by a OPENAPI file.
   */
  OPENAPI = 'OPENAPI',

  /**
   * The API surface is specified by a POSTMAN file.
   */
  POSTMAN = 'POSTMAN',
}

/**
 * An API Fuzzing scan profile.
 */
export interface IXGitLabApiFuzzingScanProfile {
  __typename: '_xGitLabApiFuzzingScanProfile';

  /**
   * Short description of the profile.
   */
  description: string | null;

  /**
   * Unique name of the profile.
   */
  name: string | null;

  /**
   * Syntax highlighted HTML representation of the YAML.
   */
  yaml: string | null;
}

/**
 * Describes a rule for who can approve merge requests.
 */
export interface IXGitLabApprovalRule {
  __typename: '_xGitLabApprovalRule';

  /**
   * Number of required approvals.
   */
  approvalsRequired: number | null;

  /**
   * Indicates if the rule is satisfied.
   */
  approved: boolean | null;

  /**
   * List of users defined in the rule that approved the merge request.
   */
  approvedBy: IXGitLabUserCoreConnection | null;

  /**
   * Indicates if the rule contains approvers from a hidden group.
   */
  containsHiddenGroups: boolean | null;

  /**
   * List of all users eligible to approve the merge request (defined explicitly and from associated groups).
   */
  eligibleApprovers: Array<IXGitLabUserCore> | null;

  /**
   * List of groups added as approvers for the rule.
   */
  groups: IXGitLabGroupConnection | null;

  /**
   * ID of the rule.
   */
  id: any;

  /**
   * Name of the rule.
   */
  name: string | null;

  /**
   * Indicates if the rule was overridden for the merge request.
   */
  overridden: boolean | null;

  /**
   * Named section of the Code Owners file that the rule applies to.
   */
  section: string | null;

  /**
   * Source rule used to create the rule.
   */
  sourceRule: IXGitLabApprovalRule | null;

  /**
   * Type of the rule.
   */
  type: XGitLabApprovalRuleType | null;

  /**
   * List of users added as approvers for the rule.
   */
  users: IXGitLabUserCoreConnection | null;
}

export interface IApprovedByOnXGitLabApprovalRuleArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IGroupsOnXGitLabApprovalRuleArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IUsersOnXGitLabApprovalRuleArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

/**
 * The kind of an approval rule.
 */
export const enum XGitLabApprovalRuleType {
  /**
   * A `regular` approval rule.
   */
  REGULAR = 'REGULAR',

  /**
   * A `code_owner` approval rule.
   */
  CODE_OWNER = 'CODE_OWNER',

  /**
   * A `report_approver` approval rule.
   */
  REPORT_APPROVER = 'REPORT_APPROVER',

  /**
   * A `any_approver` approval rule.
   */
  ANY_APPROVER = 'ANY_APPROVER',
}

/**
 * Assignee ID wildcard values
 */
export const enum XGitLabAssigneeWildcardId {
  /**
   * No assignee is assigned.
   */
  NONE = 'NONE',

  /**
   * An assignee is assigned.
   */
  ANY = 'ANY',
}

/**
 * User availability status
 */
export const enum XGitLabAvailabilityEnum {
  /**
   * Not Set
   */
  NOT_SET = 'NOT_SET',

  /**
   * Busy
   */
  BUSY = 'BUSY',
}

/**
 * An emoji awarded by a user
 */
export interface IXGitLabAwardEmoji {
  __typename: '_xGitLabAwardEmoji';

  /**
   * Emoji description.
   */
  description: string;

  /**
   * Emoji as an icon.
   */
  emoji: string;

  /**
   * Emoji name.
   */
  name: string;

  /**
   * Emoji in Unicode.
   */
  unicode: string;

  /**
   * Unicode version for this emoji.
   */
  unicodeVersion: string;

  /**
   * User who awarded the emoji.
   */
  user: IXGitLabUserCore;
}

/**
 * Autogenerated input type of AwardEmojiAdd
 */
export interface IXGitLabAwardEmojiAddInput {
  /**
   * Global ID of the awardable resource.
   */
  awardableId: any;

  /**
   * Emoji name.
   */
  name: string;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of AwardEmojiAdd
 */
export interface IXGitLabAwardEmojiAddPayload {
  __typename: '_xGitLabAwardEmojiAddPayload';

  /**
   * Award emoji after mutation.
   */
  awardEmoji: IXGitLabAwardEmoji | null;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * Errors encountered during execution of the mutation.
   */
  errors: Array<string>;
}

/**
 * The connection type for AwardEmoji.
 */
export interface IXGitLabAwardEmojiConnection {
  __typename: '_xGitLabAwardEmojiConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitLabAwardEmojiEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitLabAwardEmoji | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitLabPageInfo;
}

/**
 * An edge in a connection.
 */
export interface IXGitLabAwardEmojiEdge {
  __typename: '_xGitLabAwardEmojiEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitLabAwardEmoji | null;
}

/**
 * Autogenerated input type of AwardEmojiRemove
 */
export interface IXGitLabAwardEmojiRemoveInput {
  /**
   * Global ID of the awardable resource.
   */
  awardableId: any;

  /**
   * Emoji name.
   */
  name: string;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of AwardEmojiRemove
 */
export interface IXGitLabAwardEmojiRemovePayload {
  __typename: '_xGitLabAwardEmojiRemovePayload';

  /**
   * Award emoji after mutation.
   */
  awardEmoji: IXGitLabAwardEmoji | null;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * Errors encountered during execution of the mutation.
   */
  errors: Array<string>;
}

/**
 * Autogenerated input type of AwardEmojiToggle
 */
export interface IXGitLabAwardEmojiToggleInput {
  /**
   * Global ID of the awardable resource.
   */
  awardableId: any;

  /**
   * Emoji name.
   */
  name: string;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of AwardEmojiToggle
 */
export interface IXGitLabAwardEmojiTogglePayload {
  __typename: '_xGitLabAwardEmojiTogglePayload';

  /**
   * Award emoji after mutation.
   */
  awardEmoji: IXGitLabAwardEmoji | null;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * Errors encountered during execution of the mutation.
   */
  errors: Array<string>;

  /**
   * Indicates the status of the emoji. True if the toggle awarded the emoji, and false if the toggle removed the emoji.
   */
  toggledOn: boolean;
}

export interface IXGitLabBaseService {
  __typename: '_xGitLabBaseService';

  /**
   * Indicates if the service is active.
   */
  active: boolean | null;

  /**
   * Class name of the service.
   */
  type: string | null;
}

export interface IXGitLabBlob {
  __typename: '_xGitLabBlob';

  /**
   * Flat path of the entry.
   */
  flatPath: string;

  /**
   * ID of the entry.
   */
  id: string;

  /**
   * LFS ID of the blob.
   */
  lfsOid: string | null;

  /**
   * Blob mode in numeric format.
   */
  mode: string | null;

  /**
   * Name of the entry.
   */
  name: string;

  /**
   * Path of the entry.
   */
  path: string;

  /**
   * Last commit SHA for the entry.
   */
  sha: string;

  /**
   * Type of tree entry.
   */
  type: XGitLabEntryType;

  /**
   * Web path of the blob.
   */
  webPath: string | null;

  /**
   * Web URL of the blob.
   */
  webUrl: string | null;
}

/**
 * The connection type for Blob.
 */
export interface IXGitLabBlobConnection {
  __typename: '_xGitLabBlobConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitLabBlobEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitLabBlob | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitLabPageInfo;
}

/**
 * An edge in a connection.
 */
export interface IXGitLabBlobEdge {
  __typename: '_xGitLabBlobEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitLabBlob | null;
}

/**
 * Represents how the blob content should be displayed
 */
export interface IXGitLabBlobViewer {
  __typename: '_xGitLabBlobViewer';

  /**
   * Shows whether the blob should be displayed collapsed.
   */
  collapsed: boolean;

  /**
   * Content file type.
   */
  fileType: string;

  /**
   * Shows whether the blob content is loaded asynchronously.
   */
  loadAsync: boolean;

  /**
   * Loading partial name.
   */
  loadingPartialName: string;

  /**
   * Error rendering the blob content.
   */
  renderError: string | null;

  /**
   * Shows whether the blob is too large to be displayed.
   */
  tooLarge: boolean;

  /**
   * Type of blob viewer.
   */
  type: XGitLabBlobViewersType;
}

/**
 * Types of blob viewers
 */
export const enum XGitLabBlobViewersType {
  /**
   * Rich blob viewers type.
   */
  rich = 'rich',

  /**
   * Simple blob viewers type.
   */
  simple = 'simple',

  /**
   * Auxiliary blob viewers type.
   */
  auxiliary = 'auxiliary',
}

/**
 * Represents a project or group issue board
 */
export interface IXGitLabBoard {
  __typename: '_xGitLabBoard';

  /**
   * Board assignee.
   */
  assignee: IXGitLabUserCore | null;

  /**
   * Timestamp of when the board was created.
   */
  createdAt: any;

  /**
   * Epics associated with board issues.
   */
  epics: IXGitLabBoardEpicConnection | null;

  /**
   * Whether or not backlog list is hidden.
   */
  hideBacklogList: boolean | null;

  /**
   * Whether or not closed list is hidden.
   */
  hideClosedList: boolean | null;

  /**
   * ID (global ID) of the board.
   */
  id: string;

  /**
   * Board iteration.
   */
  iteration: IXGitLabIteration | null;

  /**
   * Board iteration cadence.
   */
  iterationCadence: IXGitLabIterationCadence | null;

  /**
   * Labels of the board.
   */
  labels: IXGitLabLabelConnection | null;

  /**
   * Lists of the board.
   */
  lists: IXGitLabBoardListConnection | null;

  /**
   * Board milestone.
   */
  milestone: IXGitLabMilestone | null;

  /**
   * Name of the board.
   */
  name: string | null;

  /**
   * Timestamp of when the board was last updated.
   */
  updatedAt: any;

  /**
   * Web path of the board.
   */
  webPath: string;

  /**
   * Web URL of the board.
   */
  webUrl: string;

  /**
   * Weight of the board.
   */
  weight: number | null;
}

export interface IEpicsOnXGitLabBoardArguments {
  /**
   * Filters applied when selecting issues on the board.
   */
  issueFilters?: IXGitLabBoardIssueInput | null;

  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface ILabelsOnXGitLabBoardArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IListsOnXGitLabBoardArguments {
  /**
   * Find a list by its global ID.
   */
  id?: any | null;

  /**
   * Filters applied when getting issue metadata in the board list.
   */
  issueFilters?: IXGitLabBoardIssueInput | null;

  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

/**
 * The connection type for Board.
 */
export interface IXGitLabBoardConnection {
  __typename: '_xGitLabBoardConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitLabBoardEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitLabBoard | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitLabPageInfo;
}

/**
 * An edge in a connection.
 */
export interface IXGitLabBoardEdge {
  __typename: '_xGitLabBoardEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitLabBoard | null;
}

/**
 * Represents an epic on an issue board
 */
export interface IXGitLabBoardEpic {
  __typename: '_xGitLabBoardEpic';

  /**
   * Ancestors (parents) of the epic.
   */
  ancestors: IXGitLabEpicConnection | null;

  /**
   * Author of the epic.
   */
  author: IXGitLabUserCore;

  /**
   * List of award emojis associated with the epic.
   */
  awardEmoji: IXGitLabAwardEmojiConnection | null;

  /**
   * Children (sub-epics) of the epic.
   */
  children: IXGitLabEpicConnection | null;

  /**
   * Timestamp of when the epic was closed.
   */
  closedAt: any | null;

  /**
   * Indicates if the epic is confidential.
   */
  confidential: boolean | null;

  /**
   * Timestamp of when the epic was created.
   */
  createdAt: any | null;

  /**
   * To-do items for the current user.
   */
  currentUserTodos: IXGitLabTodoConnection;

  /**
   * Number of open and closed descendant epics and issues.
   */
  descendantCounts: IXGitLabEpicDescendantCount | null;

  /**
   * Total weight of open and closed issues in the epic and its descendants.
   */
  descendantWeightSum: IXGitLabEpicDescendantWeights | null;

  /**
   * Description of the epic.
   */
  description: string | null;

  /**
   * The GitLab Flavored Markdown rendering of `description`
   */
  descriptionHtml: string | null;

  /**
   * All discussions on this noteable.
   */
  discussions: IXGitLabDiscussionConnection;

  /**
   * Number of downvotes the epic has received.
   */
  downvotes: number;

  /**
   * Due date of the epic.
   */
  dueDate: any | null;

  /**
   * Fixed due date of the epic.
   */
  dueDateFixed: any | null;

  /**
   * Inherited due date of the epic from milestones.
   */
  dueDateFromMilestones: any | null;

  /**
   * Indicates if the due date has been manually set.
   */
  dueDateIsFixed: boolean | null;

  /**
   * List of events associated with the object.
   */
  events: IXGitLabEventConnection | null;

  /**
   * Group to which the epic belongs.
   */
  group: IXGitLabGroup;

  /**
   * Indicates if the epic has children.
   */
  hasChildren: boolean;

  /**
   * Indicates if the epic has direct issues.
   */
  hasIssues: boolean;

  /**
   * Indicates if the epic has a parent epic.
   */
  hasParent: boolean;

  /**
   * Current health status of the epic.
   */
  healthStatus: IXGitLabEpicHealthStatus | null;

  /**
   * ID of the epic.
   */
  id: string;

  /**
   * Internal ID of the epic.
   */
  iid: string;

  /**
   * A list of issues associated with the epic.
   */
  issues: IXGitLabEpicIssueConnection | null;

  /**
   * Labels assigned to the epic.
   */
  labels: IXGitLabLabelConnection | null;

  /**
   * All notes on this noteable.
   */
  notes: IXGitLabNoteConnection;

  /**
   * Parent epic of the epic.
   */
  parent: IXGitLabEpic | null;

  /**
   * List of participants for the epic.
   */
  participants: IXGitLabUserCoreConnection | null;

  /**
   * Internal reference of the epic. Returned in shortened format by default.
   */
  reference: string;

  /**
   * URI path of the epic-issue relationship.
   */
  relationPath: string | null;

  /**
   * Relative position of the epic in the epic tree.
   */
  relativePosition: number | null;

  /**
   * Start date of the epic.
   */
  startDate: any | null;

  /**
   * Fixed start date of the epic.
   */
  startDateFixed: any | null;

  /**
   * Inherited start date of the epic from milestones.
   */
  startDateFromMilestones: any | null;

  /**
   * Indicates if the start date has been manually set.
   */
  startDateIsFixed: boolean | null;

  /**
   * State of the epic.
   */
  state: XGitLabEpicState;

  /**
   * Indicates the currently logged in user is subscribed to the epic.
   */
  subscribed: boolean;

  /**
   * Title of the epic.
   */
  title: string | null;

  /**
   * The GitLab Flavored Markdown rendering of `title`
   */
  titleHtml: string | null;

  /**
   * Timestamp of when the epic was updated.
   */
  updatedAt: any | null;

  /**
   * Number of upvotes the epic has received.
   */
  upvotes: number;

  /**
   * Number of user discussions in the epic.
   */
  userDiscussionsCount: number;

  /**
   * Number of user notes of the epic.
   */
  userNotesCount: number;

  /**
   * Permissions for the current user on the resource
   */
  userPermissions: IXGitLabEpicPermissions;

  /**
   * User preferences for the epic on the issue board.
   */
  userPreferences: IXGitLabBoardEpicUserPreferences | null;

  /**
   * Web path of the epic.
   */
  webPath: string;

  /**
   * Web URL of the epic.
   */
  webUrl: string;
}

export interface IAncestorsOnXGitLabBoardEpicArguments {
  /**
   * List items overlapping the given timeframe.
   */
  timeframe?: IXGitLabTimeframe | null;

  /**
   * Search query for title or description.
   */
  search?: string | null;

  /**
   * IID of the epic, e.g., "1".
   */
  iid?: string | null;

  /**
   * List of IIDs of epics, e.g., `[1, 2]`.
   */
  iids?: Array<string> | null;

  /**
   * Filter epics by state.
   */
  state?: XGitLabEpicState | null;

  /**
   * Specify the fields to perform the search in. Defaults to `[TITLE, DESCRIPTION]`. Requires the `search` argument.
   */
  in?: Array<XGitLabIssuableSearchableField> | null;

  /**
   * List epics by sort order.
   */
  sort?: XGitLabEpicSort | null;

  /**
   * Filter epics by author.
   */
  authorUsername?: string | null;

  /**
   * Filter epics by labels.
   */
  labelName?: Array<string> | null;

  /**
   * Filter epics by milestone title, computed from epic's issues.
   */
  milestoneTitle?: string | null;

  /**
   * Filter epics by IID for autocomplete.
   */
  iidStartsWith?: string | null;

  /**
   * Include epics from ancestor groups.
   * @default true
   */
  includeAncestorGroups?: boolean | null;

  /**
   * Include epics from descendant groups.
   * @default true
   */
  includeDescendantGroups?: boolean | null;

  /**
   * Filter epics by given confidentiality.
   */
  confidential?: boolean | null;

  /**
   * Filter by reaction emoji applied by the current user.
   */
  myReactionEmoji?: string | null;

  /**
   * Negated epic arguments.
   */
  not?: IXGitLabNegatedEpicFilterInput | null;

  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IAwardEmojiOnXGitLabBoardEpicArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IChildrenOnXGitLabBoardEpicArguments {
  /**
   * List items overlapping the given timeframe.
   */
  timeframe?: IXGitLabTimeframe | null;

  /**
   * Search query for title or description.
   */
  search?: string | null;

  /**
   * IID of the epic, e.g., "1".
   */
  iid?: string | null;

  /**
   * List of IIDs of epics, e.g., `[1, 2]`.
   */
  iids?: Array<string> | null;

  /**
   * Filter epics by state.
   */
  state?: XGitLabEpicState | null;

  /**
   * Specify the fields to perform the search in. Defaults to `[TITLE, DESCRIPTION]`. Requires the `search` argument.
   */
  in?: Array<XGitLabIssuableSearchableField> | null;

  /**
   * List epics by sort order.
   */
  sort?: XGitLabEpicSort | null;

  /**
   * Filter epics by author.
   */
  authorUsername?: string | null;

  /**
   * Filter epics by labels.
   */
  labelName?: Array<string> | null;

  /**
   * Filter epics by milestone title, computed from epic's issues.
   */
  milestoneTitle?: string | null;

  /**
   * Filter epics by IID for autocomplete.
   */
  iidStartsWith?: string | null;

  /**
   * Include epics from ancestor groups.
   * @default false
   */
  includeAncestorGroups?: boolean | null;

  /**
   * Include epics from descendant groups.
   * @default true
   */
  includeDescendantGroups?: boolean | null;

  /**
   * Filter epics by given confidentiality.
   */
  confidential?: boolean | null;

  /**
   * Filter by reaction emoji applied by the current user.
   */
  myReactionEmoji?: string | null;

  /**
   * Negated epic arguments.
   */
  not?: IXGitLabNegatedEpicFilterInput | null;

  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface ICurrentUserTodosOnXGitLabBoardEpicArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * State of the to-do items.
   */
  state?: XGitLabTodoStateEnum | null;
}

export interface IDiscussionsOnXGitLabBoardEpicArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IEventsOnXGitLabBoardEpicArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IIssuesOnXGitLabBoardEpicArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface ILabelsOnXGitLabBoardEpicArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface INotesOnXGitLabBoardEpicArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IParticipantsOnXGitLabBoardEpicArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IReferenceOnXGitLabBoardEpicArguments {
  /**
   * Indicates if the reference should be returned in full.
   * @default false
   */
  full?: boolean | null;
}

/**
 * The connection type for BoardEpic.
 */
export interface IXGitLabBoardEpicConnection {
  __typename: '_xGitLabBoardEpicConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitLabBoardEpicEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitLabBoardEpic | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitLabPageInfo;
}

/**
 * Autogenerated input type of BoardEpicCreate
 */
export interface IXGitLabBoardEpicCreateInput {
  /**
   * Group the epic to create is in.
   */
  groupPath: string;

  /**
   * Global ID of the board that the epic is in.
   */
  boardId: any;

  /**
   * Global ID of the epic board list in which epic will be created.
   */
  listId: any;

  /**
   * Title of the epic.
   */
  title: string;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of BoardEpicCreate
 */
export interface IXGitLabBoardEpicCreatePayload {
  __typename: '_xGitLabBoardEpicCreatePayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * Epic after creation.
   */
  epic: IXGitLabEpic | null;

  /**
   * Errors encountered during execution of the mutation.
   */
  errors: Array<string>;
}

/**
 * An edge in a connection.
 */
export interface IXGitLabBoardEpicEdge {
  __typename: '_xGitLabBoardEpicEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitLabBoardEpic | null;
}

/**
 * Represents user preferences for a board epic
 */
export interface IXGitLabBoardEpicUserPreferences {
  __typename: '_xGitLabBoardEpicUserPreferences';

  /**
   * Indicates epic should be displayed as collapsed.
   */
  collapsed: boolean;
}

export interface IXGitLabBoardIssueInput {
  /**
   * Filter by label name.
   */
  labelName?: Array<string | null> | null;

  /**
   * Filter by author username.
   */
  authorUsername?: string | null;

  /**
   * Filter by reaction emoji applied by the current user. Wildcard values "NONE" and "ANY" are supported.
   */
  myReactionEmoji?: string | null;

  /**
   * List of IIDs of issues. For example `["1", "2"]`.
   */
  iids?: Array<string> | null;

  /**
   * Filter by milestone title.
   */
  milestoneTitle?: string | null;

  /**
   * Filter by assignee username.
   */
  assigneeUsername?: Array<string | null> | null;

  /**
   * Filter by release tag.
   */
  releaseTag?: string | null;

  /**
   * Filter by the given issue types.
   */
  types?: Array<XGitLabIssueType> | null;

  /**
   * Filter by milestone ID wildcard.
   */
  milestoneWildcardId?: XGitLabMilestoneWildcardId | null;

  /**
   * Filter by epic ID. Incompatible with epicWildcardId.
   */
  epicId?: any | null;

  /**
   * Filter by iteration title.
   */
  iterationTitle?: string | null;

  /**
   * Filter by weight.
   */
  weight?: string | null;

  /**
   * Filter by a list of iteration IDs. Incompatible with iterationWildcardId.
   */
  iterationId?: Array<any> | null;

  /**
   * List of negated arguments.
   */
  not?: IXGitLabNegatedBoardIssueInput | null;

  /**
   * Search query for issue title or description.
   */
  search?: string | null;

  /**
   * Filter by assignee wildcard. Incompatible with assigneeUsername.
   */
  assigneeWildcardId?: XGitLabAssigneeWildcardId | null;

  /**
   * Filter by epic ID wildcard. Incompatible with epicId.
   */
  epicWildcardId?: XGitLabEpicWildcardId | null;

  /**
   * Filter by iteration ID wildcard.
   */
  iterationWildcardId?: XGitLabIterationWildcardId | null;

  /**
   * Filter by weight ID wildcard. Incompatible with weight.
   */
  weightWildcardId?: XGitLabWeightWildcardId | null;
}

/**
 * Represents a list for an issue board
 */
export interface IXGitLabBoardList {
  __typename: '_xGitLabBoardList';

  /**
   * Assignee in the list.
   */
  assignee: IXGitLabUserCore | null;

  /**
   * Indicates if the list is collapsed for this user.
   */
  collapsed: boolean | null;

  /**
   * ID (global ID) of the list.
   */
  id: string;

  /**
   * Board issues.
   */
  issues: IXGitLabIssueConnection | null;

  /**
   * Count of issues in the list.
   */
  issuesCount: number | null;

  /**
   * Iteration of the list.
   */
  iteration: IXGitLabIteration | null;

  /**
   * Label of the list.
   */
  label: IXGitLabLabel | null;

  /**
   * Current limit metric for the list.
   */
  limitMetric: XGitLabListLimitMetric | null;

  /**
   * Type of the list.
   */
  listType: string;

  /**
   * Maximum number of issues in the list.
   */
  maxIssueCount: number | null;

  /**
   * Maximum weight of issues in the list.
   */
  maxIssueWeight: number | null;

  /**
   * Milestone of the list.
   */
  milestone: IXGitLabMilestone | null;

  /**
   * Position of list within the board.
   */
  position: number | null;

  /**
   * Title of the list.
   */
  title: string;

  /**
   * Total weight of all issues in the list.
   */
  totalWeight: number | null;
}

export interface IIssuesOnXGitLabBoardListArguments {
  /**
   * Filters applied when selecting issues in the board list.
   */
  filters?: IXGitLabBoardIssueInput | null;

  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

/**
 * The connection type for BoardList.
 */
export interface IXGitLabBoardListConnection {
  __typename: '_xGitLabBoardListConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitLabBoardListEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitLabBoardList | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitLabPageInfo;
}

/**
 * Autogenerated input type of BoardListCreate
 */
export interface IXGitLabBoardListCreateInput {
  /**
   * Create the backlog list.
   */
  backlog?: boolean | null;

  /**
   * Global ID of an existing label.
   */
  labelId?: any | null;

  /**
   * Global ID of the issue board to mutate.
   */
  boardId: any;

  /**
   * Global ID of an existing milestone.
   */
  milestoneId?: any | null;

  /**
   * Global ID of an existing iteration.
   */
  iterationId?: any | null;

  /**
   * Global ID of an existing user.
   */
  assigneeId?: any | null;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of BoardListCreate
 */
export interface IXGitLabBoardListCreatePayload {
  __typename: '_xGitLabBoardListCreatePayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * Errors encountered during execution of the mutation.
   */
  errors: Array<string>;

  /**
   * Issue list in the issue board.
   */
  list: IXGitLabBoardList | null;
}

/**
 * An edge in a connection.
 */
export interface IXGitLabBoardListEdge {
  __typename: '_xGitLabBoardListEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitLabBoardList | null;
}

/**
 * Autogenerated input type of BoardListUpdateLimitMetrics
 */
export interface IXGitLabBoardListUpdateLimitMetricsInput {
  /**
   * Global ID of the list.
   */
  listId: any;

  /**
   * New limit metric type for the list.
   */
  limitMetric?: XGitLabListLimitMetric | null;

  /**
   * New maximum issue count limit.
   */
  maxIssueCount?: number | null;

  /**
   * New maximum issue weight limit.
   */
  maxIssueWeight?: number | null;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of BoardListUpdateLimitMetrics
 */
export interface IXGitLabBoardListUpdateLimitMetricsPayload {
  __typename: '_xGitLabBoardListUpdateLimitMetricsPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * Errors encountered during execution of the mutation.
   */
  errors: Array<string>;

  /**
   * Updated list.
   */
  list: IXGitLabBoardList | null;
}

export interface IXGitLabBranch {
  __typename: '_xGitLabBranch';

  /**
   * Commit for the branch.
   */
  commit: IXGitLabCommit | null;

  /**
   * Name of the branch.
   */
  name: string;
}

/**
 * Autogenerated input type of BulkEnableDevopsAdoptionNamespaces
 */
export interface IXGitLabBulkEnableDevopsAdoptionNamespacesInput {
  /**
   * List of Namespace IDs.
   */
  namespaceIds: Array<any>;

  /**
   * Display namespace ID.
   */
  displayNamespaceId?: any | null;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of BulkEnableDevopsAdoptionNamespaces
 */
export interface IXGitLabBulkEnableDevopsAdoptionNamespacesPayload {
  __typename: '_xGitLabBulkEnableDevopsAdoptionNamespacesPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * Enabled namespaces after mutation.
   */
  enabledNamespaces: Array<IXGitLabDevopsAdoptionEnabledNamespace> | null;

  /**
   * Errors encountered during execution of the mutation.
   */
  errors: Array<string>;
}

/**
 * Represents the total number of issues and their weights for a particular day
 */
export interface IXGitLabBurnupChartDailyTotals {
  __typename: '_xGitLabBurnupChartDailyTotals';

  /**
   * Number of closed issues as of this day.
   */
  completedCount: number;

  /**
   * Total weight of closed issues as of this day.
   */
  completedWeight: number;

  /**
   * Date for burnup totals.
   */
  date: any;

  /**
   * Number of issues as of this day.
   */
  scopeCount: number;

  /**
   * Total weight of issues as of this day.
   */
  scopeWeight: number;
}

export interface IXGitLabCiApplicationSettings {
  __typename: '_xGitLabCiApplicationSettings';

  /**
   * Whether to keep the latest jobs artifacts.
   */
  keepLatestArtifact: boolean | null;
}

export interface IXGitLabCiBuildNeed {
  __typename: '_xGitLabCiBuildNeed';

  /**
   * ID of the job we need to complete.
   */
  id: string;

  /**
   * Name of the job we need to complete.
   */
  name: string | null;
}

/**
 * The connection type for CiBuildNeed.
 */
export interface IXGitLabCiBuildNeedConnection {
  __typename: '_xGitLabCiBuildNeedConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitLabCiBuildNeedEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitLabCiBuildNeed | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitLabPageInfo;
}

/**
 * An edge in a connection.
 */
export interface IXGitLabCiBuildNeedEdge {
  __typename: '_xGitLabCiBuildNeedEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitLabCiBuildNeed | null;
}

/**
 * Autogenerated input type of CiCdSettingsUpdate
 */
export interface IXGitLabCiCdSettingsUpdateInput {
  /**
   * Full Path of the project the settings belong to.
   */
  fullPath: string;

  /**
   * Indicates if the latest artifact should be kept for this project.
   */
  keepLatestArtifact?: boolean | null;

  /**
   * Indicates CI job tokens generated in this project have restricted access to resources.
   */
  jobTokenScopeEnabled?: boolean | null;

  /**
   * Indicates if merge pipelines are enabled for the project.
   */
  mergePipelinesEnabled?: boolean | null;

  /**
   * Indicates if merge trains are enabled for the project.
   */
  mergeTrainsEnabled?: boolean | null;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of CiCdSettingsUpdate
 */
export interface IXGitLabCiCdSettingsUpdatePayload {
  __typename: '_xGitLabCiCdSettingsUpdatePayload';

  /**
   * CI/CD settings after mutation.
   */
  ciCdSettings: IXGitLabProjectCiCdSetting;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * Errors encountered during execution of the mutation.
   */
  errors: Array<string>;
}

export interface IXGitLabCiConfig {
  __typename: '_xGitLabCiConfig';

  /**
   * Linting errors.
   */
  errors: Array<string> | null;

  /**
   * Merged CI configuration YAML.
   */
  mergedYaml: string | null;

  /**
   * Stages of the pipeline.
   */
  stages: IXGitLabCiConfigStageConnection | null;

  /**
   * Status of linting, can be either valid or invalid.
   */
  status: XGitLabCiConfigStatus | null;
}

export interface IStagesOnXGitLabCiConfigArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IXGitLabCiConfigGroup {
  __typename: '_xGitLabCiConfigGroup';

  /**
   * Jobs in group.
   */
  jobs: IXGitLabCiConfigJobConnection | null;

  /**
   * Name of the job group.
   */
  name: string | null;

  /**
   * Size of the job group.
   */
  size: number | null;
}

export interface IJobsOnXGitLabCiConfigGroupArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

/**
 * The connection type for CiConfigGroup.
 */
export interface IXGitLabCiConfigGroupConnection {
  __typename: '_xGitLabCiConfigGroupConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitLabCiConfigGroupEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitLabCiConfigGroup | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitLabPageInfo;
}

/**
 * An edge in a connection.
 */
export interface IXGitLabCiConfigGroupEdge {
  __typename: '_xGitLabCiConfigGroupEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitLabCiConfigGroup | null;
}

export interface IXGitLabCiConfigJob {
  __typename: '_xGitLabCiConfigJob';

  /**
   * Override a set of commands that are executed after the job.
   */
  afterScript: Array<string> | null;

  /**
   * Allow job to fail.
   */
  allowFailure: boolean | null;

  /**
   * Override a set of commands that are executed before the job.
   */
  beforeScript: Array<string> | null;

  /**
   * Name of an environment to which the job deploys.
   */
  environment: string | null;

  /**
   * Limit when jobs are not created.
   */
  except: IXGitLabCiConfigJobRestriction | null;

  /**
   * Name of the job group.
   */
  groupName: string | null;

  /**
   * Name of the job.
   */
  name: string | null;

  /**
   * Builds that must complete before the jobs run.
   */
  needs: IXGitLabCiConfigNeedConnection | null;

  /**
   * Jobs are created when these conditions do not apply.
   */
  only: IXGitLabCiConfigJobRestriction | null;

  /**
   * Shell script that is executed by a runner.
   */
  script: Array<string> | null;

  /**
   * Name of the job stage.
   */
  stage: string | null;

  /**
   * List of tags that are used to select a runner.
   */
  tags: Array<string> | null;

  /**
   * When to run the job.
   */
  when: string | null;
}

export interface INeedsOnXGitLabCiConfigJobArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

/**
 * The connection type for CiConfigJob.
 */
export interface IXGitLabCiConfigJobConnection {
  __typename: '_xGitLabCiConfigJobConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitLabCiConfigJobEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitLabCiConfigJob | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitLabPageInfo;
}

/**
 * An edge in a connection.
 */
export interface IXGitLabCiConfigJobEdge {
  __typename: '_xGitLabCiConfigJobEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitLabCiConfigJob | null;
}

export interface IXGitLabCiConfigJobRestriction {
  __typename: '_xGitLabCiConfigJobRestriction';

  /**
   * Git refs the job restriction applies to.
   */
  refs: Array<string> | null;
}

export interface IXGitLabCiConfigNeed {
  __typename: '_xGitLabCiConfigNeed';

  /**
   * Name of the need.
   */
  name: string | null;
}

/**
 * The connection type for CiConfigNeed.
 */
export interface IXGitLabCiConfigNeedConnection {
  __typename: '_xGitLabCiConfigNeedConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitLabCiConfigNeedEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitLabCiConfigNeed | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitLabPageInfo;
}

/**
 * An edge in a connection.
 */
export interface IXGitLabCiConfigNeedEdge {
  __typename: '_xGitLabCiConfigNeedEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitLabCiConfigNeed | null;
}

export interface IXGitLabCiConfigStage {
  __typename: '_xGitLabCiConfigStage';

  /**
   * Groups of jobs for the stage.
   */
  groups: IXGitLabCiConfigGroupConnection | null;

  /**
   * Name of the stage.
   */
  name: string | null;
}

export interface IGroupsOnXGitLabCiConfigStageArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

/**
 * The connection type for CiConfigStage.
 */
export interface IXGitLabCiConfigStageConnection {
  __typename: '_xGitLabCiConfigStageConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitLabCiConfigStageEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitLabCiConfigStage | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitLabPageInfo;
}

/**
 * An edge in a connection.
 */
export interface IXGitLabCiConfigStageEdge {
  __typename: '_xGitLabCiConfigStageEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitLabCiConfigStage | null;
}

/**
 * Values for YAML processor result
 */
export const enum XGitLabCiConfigStatus {
  /**
   * Configuration file is valid.
   */
  VALID = 'VALID',

  /**
   * Configuration file is not valid.
   */
  INVALID = 'INVALID',
}

export interface IXGitLabCiGroup {
  __typename: '_xGitLabCiGroup';

  /**
   * Detailed status of the group.
   */
  detailedStatus: IXGitLabDetailedStatus | null;

  /**
   * ID for a group.
   */
  id: string;

  /**
   * Jobs in group.
   */
  jobs: IXGitLabCiJobConnection | null;

  /**
   * Name of the job group.
   */
  name: string | null;

  /**
   * Size of the group.
   */
  size: number | null;
}

export interface IJobsOnXGitLabCiGroupArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

/**
 * The connection type for CiGroup.
 */
export interface IXGitLabCiGroupConnection {
  __typename: '_xGitLabCiGroupConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitLabCiGroupEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitLabCiGroup | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitLabPageInfo;
}

/**
 * An edge in a connection.
 */
export interface IXGitLabCiGroupEdge {
  __typename: '_xGitLabCiGroupEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitLabCiGroup | null;
}

export interface IXGitLabCiJob {
  __typename: '_xGitLabCiJob';

  /**
   * Indicates the job is active.
   */
  active: boolean;

  /**
   * Whether the job is allowed to fail.
   */
  allowFailure: boolean;

  /**
   * Artifacts generated by the job.
   */
  artifacts: IXGitLabCiJobArtifactConnection | null;

  /**
   * Indicates the job can be canceled.
   */
  cancelable: boolean;

  /**
   * Path to the commit that triggered the job.
   */
  commitPath: string | null;

  /**
   * Coverage level of the job.
   */
  coverage: number | null;

  /**
   * When the job was created.
   */
  createdAt: any;

  /**
   * Whether the job was created by a tag.
   */
  createdByTag: boolean;

  /**
   * Detailed status of the job.
   */
  detailedStatus: IXGitLabDetailedStatus | null;

  /**
   * Duration of the job in seconds.
   */
  duration: number | null;

  /**
   * When a job has finished running.
   */
  finishedAt: any | null;

  /**
   * ID of the job.
   */
  id: any | null;

  /**
   * Whether the job has a manual action.
   */
  manualJob: boolean | null;

  /**
   * Name of the job.
   */
  name: string | null;

  /**
   * References to builds that must complete before the jobs run.
   */
  needs: IXGitLabCiBuildNeedConnection | null;

  /**
   * Pipeline the job belongs to.
   */
  pipeline: IXGitLabPipeline | null;

  /**
   * Indicates the job can be played.
   */
  playable: boolean;

  /**
   * When the job was enqueued and marked as pending.
   */
  queuedAt: any | null;

  /**
   * How long the job was enqueued before starting.
   */
  queuedDuration: any | null;

  /**
   * Ref name of the job.
   */
  refName: string | null;

  /**
   * Path to the ref.
   */
  refPath: string | null;

  /**
   * Indicates the job can be retried.
   */
  retryable: boolean;

  /**
   * Schedule for the build.
   */
  scheduledAt: any | null;

  /**
   * Type of job scheduling. Value is `dag` if the job uses the `needs` keyword, and `stage` otherwise.
   */
  schedulingType: string | null;

  /**
   * Short SHA1 ID of the commit.
   */
  shortSha: string;

  /**
   * Stage of the job.
   */
  stage: IXGitLabCiStage | null;

  /**
   * When the job was started.
   */
  startedAt: any | null;

  /**
   * Status of the job.
   */
  status: XGitLabCiJobStatus | null;

  /**
   * Indicates the job is stuck.
   */
  stuck: boolean;

  /**
   * Tags for the current job.
   */
  tags: Array<string> | null;

  /**
   * Whether the job was triggered.
   */
  triggered: boolean | null;

  /**
   * Permissions for the current user on the resource
   */
  userPermissions: IXGitLabJobPermissions;
}

export interface IArtifactsOnXGitLabCiJobArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface INeedsOnXGitLabCiJobArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IXGitLabCiJobArtifact {
  __typename: '_xGitLabCiJobArtifact';

  /**
   * URL for downloading the artifact's file.
   */
  downloadPath: string | null;

  /**
   * File type of the artifact.
   */
  fileType: XGitLabJobArtifactFileType | null;
}

/**
 * The connection type for CiJobArtifact.
 */
export interface IXGitLabCiJobArtifactConnection {
  __typename: '_xGitLabCiJobArtifactConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitLabCiJobArtifactEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitLabCiJobArtifact | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitLabPageInfo;
}

/**
 * An edge in a connection.
 */
export interface IXGitLabCiJobArtifactEdge {
  __typename: '_xGitLabCiJobArtifactEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitLabCiJobArtifact | null;
}

/**
 * The connection type for CiJob.
 */
export interface IXGitLabCiJobConnection {
  __typename: '_xGitLabCiJobConnection';

  /**
   * Total count of collection.
   */
  count: number;

  /**
   * A list of edges.
   */
  edges: Array<IXGitLabCiJobEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitLabCiJob | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitLabPageInfo;
}

/**
 * An edge in a connection.
 */
export interface IXGitLabCiJobEdge {
  __typename: '_xGitLabCiJobEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitLabCiJob | null;
}

export const enum XGitLabCiJobStatus {
  /**
   * A job that is created.
   */
  CREATED = 'CREATED',

  /**
   * A job that is waiting for resource.
   */
  WAITING_FOR_RESOURCE = 'WAITING_FOR_RESOURCE',

  /**
   * A job that is preparing.
   */
  PREPARING = 'PREPARING',

  /**
   * A job that is pending.
   */
  PENDING = 'PENDING',

  /**
   * A job that is running.
   */
  RUNNING = 'RUNNING',

  /**
   * A job that is success.
   */
  SUCCESS = 'SUCCESS',

  /**
   * A job that is failed.
   */
  FAILED = 'FAILED',

  /**
   * A job that is canceled.
   */
  CANCELED = 'CANCELED',

  /**
   * A job that is skipped.
   */
  SKIPPED = 'SKIPPED',

  /**
   * A job that is manual.
   */
  MANUAL = 'MANUAL',

  /**
   * A job that is scheduled.
   */
  SCHEDULED = 'SCHEDULED',
}

/**
 * Autogenerated input type of CiJobTokenScopeAddProject
 */
export interface IXGitLabCiJobTokenScopeAddProjectInput {
  /**
   * Project that the CI job token scope belongs to.
   */
  projectPath: string;

  /**
   * Project to be added to the CI job token scope.
   */
  targetProjectPath: string;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of CiJobTokenScopeAddProject
 */
export interface IXGitLabCiJobTokenScopeAddProjectPayload {
  __typename: '_xGitLabCiJobTokenScopeAddProjectPayload';

  /**
   * CI job token's scope of access.
   */
  ciJobTokenScope: IXGitLabCiJobTokenScopeType | null;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * Errors encountered during execution of the mutation.
   */
  errors: Array<string>;
}

/**
 * Autogenerated input type of CiJobTokenScopeRemoveProject
 */
export interface IXGitLabCiJobTokenScopeRemoveProjectInput {
  /**
   * Project that the CI job token scope belongs to.
   */
  projectPath: string;

  /**
   * Project to be removed from the CI job token scope.
   */
  targetProjectPath: string;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of CiJobTokenScopeRemoveProject
 */
export interface IXGitLabCiJobTokenScopeRemoveProjectPayload {
  __typename: '_xGitLabCiJobTokenScopeRemoveProjectPayload';

  /**
   * CI job token's scope of access.
   */
  ciJobTokenScope: IXGitLabCiJobTokenScopeType | null;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * Errors encountered during execution of the mutation.
   */
  errors: Array<string>;
}

export interface IXGitLabCiJobTokenScopeType {
  __typename: '_xGitLabCiJobTokenScopeType';

  /**
   * Allow list of projects that can be accessed by CI Job tokens created by this project.
   */
  projects: IXGitLabProjectConnection;
}

export interface IProjectsOnXGitLabCiJobTokenScopeTypeArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IXGitLabCiMinutesNamespaceMonthlyUsage {
  __typename: '_xGitLabCiMinutesNamespaceMonthlyUsage';

  /**
   * Total number of minutes used by all projects in the namespace.
   */
  minutes: number | null;

  /**
   * Month related to the usage data.
   */
  month: string | null;

  /**
   * CI minutes usage data for projects in the namespace.
   */
  projects: IXGitLabCiMinutesProjectMonthlyUsageConnection | null;
}

export interface IProjectsOnXGitLabCiMinutesNamespaceMonthlyUsageArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

/**
 * The connection type for CiMinutesNamespaceMonthlyUsage.
 */
export interface IXGitLabCiMinutesNamespaceMonthlyUsageConnection {
  __typename: '_xGitLabCiMinutesNamespaceMonthlyUsageConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitLabCiMinutesNamespaceMonthlyUsageEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitLabCiMinutesNamespaceMonthlyUsage | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitLabPageInfo;
}

/**
 * An edge in a connection.
 */
export interface IXGitLabCiMinutesNamespaceMonthlyUsageEdge {
  __typename: '_xGitLabCiMinutesNamespaceMonthlyUsageEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitLabCiMinutesNamespaceMonthlyUsage | null;
}

export interface IXGitLabCiMinutesProjectMonthlyUsage {
  __typename: '_xGitLabCiMinutesProjectMonthlyUsage';

  /**
   * Number of CI minutes used by the project in the month.
   */
  minutes: number | null;

  /**
   * Name of the project.
   */
  name: string | null;
}

/**
 * The connection type for CiMinutesProjectMonthlyUsage.
 */
export interface IXGitLabCiMinutesProjectMonthlyUsageConnection {
  __typename: '_xGitLabCiMinutesProjectMonthlyUsageConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitLabCiMinutesProjectMonthlyUsageEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitLabCiMinutesProjectMonthlyUsage | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitLabPageInfo;
}

/**
 * An edge in a connection.
 */
export interface IXGitLabCiMinutesProjectMonthlyUsageEdge {
  __typename: '_xGitLabCiMinutesProjectMonthlyUsageEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitLabCiMinutesProjectMonthlyUsage | null;
}

export interface IXGitLabCiRunner {
  __typename: '_xGitLabCiRunner';

  /**
   * Access level of the runner.
   */
  accessLevel: XGitLabCiRunnerAccessLevel;

  /**
   * Indicates the runner is allowed to receive jobs.
   */
  active: boolean;

  /**
   * Admin URL of the runner. Only available for adminstrators.
   */
  adminUrl: string | null;

  /**
   * Last contact from the runner.
   */
  contactedAt: any | null;

  /**
   * Description of the runner.
   */
  description: string | null;

  /**
   * ID of the runner.
   */
  id: any;

  /**
   * IP address of the runner.
   */
  ipAddress: string | null;

  /**
   * Number of jobs processed by the runner (limited to 1000, plus one to indicate that more items exist).
   */
  jobCount: number | null;

  /**
   * Indicates the runner is locked.
   */
  locked: boolean | null;

  /**
   * Maximum timeout (in seconds) for jobs processed by the runner.
   */
  maximumTimeout: number | null;

  /**
   * Private projects' "minutes cost factor" associated with the runner (GitLab.com only).
   */
  privateProjectsMinutesCostFactor: number | null;

  /**
   * Number of projects that the runner is associated with.
   */
  projectCount: number | null;

  /**
   * Public projects' "minutes cost factor" associated with the runner (GitLab.com only).
   */
  publicProjectsMinutesCostFactor: number | null;

  /**
   * Revision of the runner.
   */
  revision: string | null;

  /**
   * Indicates the runner is able to run untagged jobs.
   */
  runUntagged: boolean;

  /**
   * Type of the runner.
   */
  runnerType: XGitLabCiRunnerType;

  /**
   * First eight characters of the runner's token used to authenticate new job requests. Used as the runner's unique ID.
   */
  shortSha: string | null;

  /**
   * Status of the runner.
   */
  status: XGitLabCiRunnerStatus;

  /**
   * Tags associated with the runner.
   */
  tagList: Array<string> | null;

  /**
   * Permissions for the current user on the resource
   */
  userPermissions: IXGitLabRunnerPermissions;

  /**
   * Version of the runner.
   */
  version: string | null;
}

export const enum XGitLabCiRunnerAccessLevel {
  /**
   * A runner that is not protected.
   */
  NOT_PROTECTED = 'NOT_PROTECTED',

  /**
   * A runner that is ref protected.
   */
  REF_PROTECTED = 'REF_PROTECTED',
}

/**
 * The connection type for CiRunner.
 */
export interface IXGitLabCiRunnerConnection {
  __typename: '_xGitLabCiRunnerConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitLabCiRunnerEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitLabCiRunner | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitLabPageInfo;
}

/**
 * An edge in a connection.
 */
export interface IXGitLabCiRunnerEdge {
  __typename: '_xGitLabCiRunnerEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitLabCiRunner | null;

  /**
   * Web URL of the runner. The value depends on where you put this field in the query. You can use it for projects or groups.
   */
  webUrl: string | null;
}

/**
 * Values for sorting runners
 */
export const enum XGitLabCiRunnerSort {
  /**
   * Ordered by contacted_at in ascending order.
   */
  CONTACTED_ASC = 'CONTACTED_ASC',

  /**
   * Ordered by contacted_at in descending order.
   */
  CONTACTED_DESC = 'CONTACTED_DESC',

  /**
   * Ordered by created_at in ascending order.
   */
  CREATED_ASC = 'CREATED_ASC',

  /**
   * Ordered by created_at in descending order.
   */
  CREATED_DESC = 'CREATED_DESC',
}

export const enum XGitLabCiRunnerStatus {
  /**
   * A runner that is not paused.
   */
  ACTIVE = 'ACTIVE',

  /**
   * A runner that is paused.
   */
  PAUSED = 'PAUSED',

  /**
   * A runner that contacted this instance within the last 2 hours.
   */
  ONLINE = 'ONLINE',

  /**
   * A runner that has not contacted this instance within the last 2 hours.
   */
  OFFLINE = 'OFFLINE',

  /**
   * A runner that has never contacted this instance.
   */
  NOT_CONNECTED = 'NOT_CONNECTED',
}

export const enum XGitLabCiRunnerType {
  /**
   * A runner that is instance type.
   */
  INSTANCE_TYPE = 'INSTANCE_TYPE',

  /**
   * A runner that is group type.
   */
  GROUP_TYPE = 'GROUP_TYPE',

  /**
   * A runner that is project type.
   */
  PROJECT_TYPE = 'PROJECT_TYPE',
}

export interface IXGitLabCiStage {
  __typename: '_xGitLabCiStage';

  /**
   * Detailed status of the stage.
   */
  detailedStatus: IXGitLabDetailedStatus | null;

  /**
   * Group of jobs for the stage.
   */
  groups: IXGitLabCiGroupConnection | null;

  /**
   * ID of the stage.
   */
  id: string;

  /**
   * Jobs for the stage.
   */
  jobs: IXGitLabCiJobConnection | null;

  /**
   * Name of the stage.
   */
  name: string | null;

  /**
   * Status of the pipeline stage.
   */
  status: string | null;
}

export interface IGroupsOnXGitLabCiStageArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IJobsOnXGitLabCiStageArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

/**
 * The connection type for CiStage.
 */
export interface IXGitLabCiStageConnection {
  __typename: '_xGitLabCiStageConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitLabCiStageEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitLabCiStage | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitLabPageInfo;
}

/**
 * An edge in a connection.
 */
export interface IXGitLabCiStageEdge {
  __typename: '_xGitLabCiStageEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitLabCiStage | null;
}

/**
 * GitLab CI/CD configuration template.
 */
export interface IXGitLabCiTemplate {
  __typename: '_xGitLabCiTemplate';

  /**
   * Contents of the CI template.
   */
  content: string;

  /**
   * Name of the CI template.
   */
  name: string;
}

export interface IXGitLabClusterAgent {
  __typename: '_xGitLabClusterAgent';

  /**
   * Active connections for the cluster agent
   */
  connections: IXGitLabConnectedAgentConnection | null;

  /**
   * Timestamp the cluster agent was created.
   */
  createdAt: any | null;

  /**
   * User object, containing information about the person who created the agent.
   */
  createdByUser: IXGitLabUserCore | null;

  /**
   * ID of the cluster agent.
   */
  id: string;

  /**
   * Name of the cluster agent.
   */
  name: string | null;

  /**
   * Project this cluster agent is associated with.
   */
  project: IXGitLabProject | null;

  /**
   * Tokens associated with the cluster agent.
   */
  tokens: IXGitLabClusterAgentTokenConnection | null;

  /**
   * Timestamp the cluster agent was updated.
   */
  updatedAt: any | null;

  /**
   * Web path of the cluster agent.
   */
  webPath: string | null;
}

export interface IConnectionsOnXGitLabClusterAgentArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface ITokensOnXGitLabClusterAgentArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

/**
 * The connection type for ClusterAgent.
 */
export interface IXGitLabClusterAgentConnection {
  __typename: '_xGitLabClusterAgentConnection';

  /**
   * Total count of collection.
   */
  count: number;

  /**
   * A list of edges.
   */
  edges: Array<IXGitLabClusterAgentEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitLabClusterAgent | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitLabPageInfo;
}

/**
 * Autogenerated input type of ClusterAgentDelete
 */
export interface IXGitLabClusterAgentDeleteInput {
  /**
   * Global ID of the cluster agent that will be deleted.
   */
  id: any;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of ClusterAgentDelete
 */
export interface IXGitLabClusterAgentDeletePayload {
  __typename: '_xGitLabClusterAgentDeletePayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * Errors encountered during execution of the mutation.
   */
  errors: Array<string>;
}

/**
 * An edge in a connection.
 */
export interface IXGitLabClusterAgentEdge {
  __typename: '_xGitLabClusterAgentEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitLabClusterAgent | null;
}

export interface IXGitLabClusterAgentToken {
  __typename: '_xGitLabClusterAgentToken';

  /**
   * Cluster agent this token is associated with.
   */
  clusterAgent: IXGitLabClusterAgent | null;

  /**
   * Timestamp the token was created.
   */
  createdAt: any | null;

  /**
   * User who created the token.
   */
  createdByUser: IXGitLabUserCore | null;

  /**
   * Description of the token.
   */
  description: string | null;

  /**
   * Global ID of the token.
   */
  id: any;

  /**
   * Timestamp the token was last used.
   */
  lastUsedAt: any | null;

  /**
   * Name given to the token.
   */
  name: string | null;
}

/**
 * The connection type for ClusterAgentToken.
 */
export interface IXGitLabClusterAgentTokenConnection {
  __typename: '_xGitLabClusterAgentTokenConnection';

  /**
   * Total count of collection.
   */
  count: number;

  /**
   * A list of edges.
   */
  edges: Array<IXGitLabClusterAgentTokenEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitLabClusterAgentToken | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitLabPageInfo;
}

/**
 * Autogenerated input type of ClusterAgentTokenCreate
 */
export interface IXGitLabClusterAgentTokenCreateInput {
  /**
   * Global ID of the cluster agent that will be associated with the new token.
   */
  clusterAgentId: any;

  /**
   * Description of the token.
   */
  description?: string | null;

  /**
   * Name of the token.
   */
  name: string;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of ClusterAgentTokenCreate
 */
export interface IXGitLabClusterAgentTokenCreatePayload {
  __typename: '_xGitLabClusterAgentTokenCreatePayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * Errors encountered during execution of the mutation.
   */
  errors: Array<string>;

  /**
   * Token secret value. Make sure you save it - you won't be able to access it again.
   */
  secret: string | null;

  /**
   * Token created after mutation.
   */
  token: IXGitLabClusterAgentToken | null;
}

/**
 * Autogenerated input type of ClusterAgentTokenDelete
 */
export interface IXGitLabClusterAgentTokenDeleteInput {
  /**
   * Global ID of the cluster agent token that will be deleted.
   */
  id: any;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of ClusterAgentTokenDelete
 */
export interface IXGitLabClusterAgentTokenDeletePayload {
  __typename: '_xGitLabClusterAgentTokenDeletePayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * Errors encountered during execution of the mutation.
   */
  errors: Array<string>;
}

/**
 * An edge in a connection.
 */
export interface IXGitLabClusterAgentTokenEdge {
  __typename: '_xGitLabClusterAgentTokenEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitLabClusterAgentToken | null;
}

/**
 * Represents the code coverage activity for a group
 */
export interface IXGitLabCodeCoverageActivity {
  __typename: '_xGitLabCodeCoverageActivity';

  /**
   * Average percentage of the different code coverage results available for the group.
   */
  averageCoverage: number | null;

  /**
   * Number of different code coverage results available for the group.
   */
  coverageCount: number | null;

  /**
   * Date when the code coverage was created.
   */
  date: any;

  /**
   * Number of projects with code coverage results for the group.
   */
  projectCount: number | null;
}

/**
 * The connection type for CodeCoverageActivity.
 */
export interface IXGitLabCodeCoverageActivityConnection {
  __typename: '_xGitLabCodeCoverageActivityConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitLabCodeCoverageActivityEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitLabCodeCoverageActivity | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitLabPageInfo;
}

/**
 * An edge in a connection.
 */
export interface IXGitLabCodeCoverageActivityEdge {
  __typename: '_xGitLabCodeCoverageActivityEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitLabCodeCoverageActivity | null;
}

/**
 * Represents the code coverage summary for a project
 */
export interface IXGitLabCodeCoverageSummary {
  __typename: '_xGitLabCodeCoverageSummary';

  /**
   * Average percentage of the different code coverage results available for the project.
   */
  averageCoverage: number | null;

  /**
   * Number of different code coverage results available.
   */
  coverageCount: number | null;

  /**
   * Latest date when the code coverage was created for the project.
   */
  lastUpdatedOn: any | null;
}

/**
 * Represents a code quality degradation on the pipeline.
 */
export interface IXGitLabCodeQualityDegradation {
  __typename: '_xGitLabCodeQualityDegradation';

  /**
   * Description of the code quality degradation.
   */
  description: string;

  /**
   * Unique fingerprint to identify the code quality degradation. For example, an MD5 hash.
   */
  fingerprint: string;

  /**
   * Line on which the code quality degradation occurred.
   */
  line: number;

  /**
   * Relative path to the file containing the code quality degradation.
   */
  path: string;

  /**
   * Status of the degradation (BLOCKER, CRITICAL, MAJOR, MINOR, INFO).
   */
  severity: XGitLabCodeQualityDegradationSeverity;
}

/**
 * The connection type for CodeQualityDegradation.
 */
export interface IXGitLabCodeQualityDegradationConnection {
  __typename: '_xGitLabCodeQualityDegradationConnection';

  /**
   * Total count of collection.
   */
  count: number;

  /**
   * A list of edges.
   */
  edges: Array<IXGitLabCodeQualityDegradationEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitLabCodeQualityDegradation | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitLabPageInfo;
}

/**
 * An edge in a connection.
 */
export interface IXGitLabCodeQualityDegradationEdge {
  __typename: '_xGitLabCodeQualityDegradationEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitLabCodeQualityDegradation | null;
}

export const enum XGitLabCodeQualityDegradationSeverity {
  /**
   * Code Quality degradation has a status of blocker.
   */
  BLOCKER = 'BLOCKER',

  /**
   * Code Quality degradation has a status of critical.
   */
  CRITICAL = 'CRITICAL',

  /**
   * Code Quality degradation has a status of major.
   */
  MAJOR = 'MAJOR',

  /**
   * Code Quality degradation has a status of minor.
   */
  MINOR = 'MINOR',

  /**
   * Code Quality degradation has a status of info.
   */
  INFO = 'INFO',
}

export interface IXGitLabCommit {
  __typename: '_xGitLabCommit';

  /**
   * Author of the commit.
   */
  author: IXGitLabUserCore | null;

  /**
   * Commit authors gravatar.
   */
  authorGravatar: string | null;

  /**
   * Commit authors name.
   */
  authorName: string | null;

  /**
   * Timestamp of when the commit was authored.
   */
  authoredDate: any | null;

  /**
   * Description of the commit message.
   */
  description: string | null;

  /**
   * The GitLab Flavored Markdown rendering of `description`
   */
  descriptionHtml: string | null;

  /**
   * ID (global ID) of the commit.
   */
  id: string;

  /**
   * Raw commit message.
   */
  message: string | null;

  /**
   * Pipelines of the commit ordered latest first.
   */
  pipelines: IXGitLabPipelineConnection | null;

  /**
   * SHA1 ID of the commit.
   */
  sha: string;

  /**
   * Short SHA1 ID of the commit.
   */
  shortId: string;

  /**
   * Rendered HTML of the commit signature.
   */
  signatureHtml: string | null;

  /**
   * Title of the commit message.
   */
  title: string | null;

  /**
   * The GitLab Flavored Markdown rendering of `title`
   */
  titleHtml: string | null;

  /**
   * Web path of the commit.
   */
  webPath: string;

  /**
   * Web URL of the commit.
   */
  webUrl: string;
}

export interface IPipelinesOnXGitLabCommitArguments {
  /**
   * Filter pipelines by their status.
   */
  status?: XGitLabPipelineStatusEnum | null;

  /**
   * Filter pipelines by the ref they are run for.
   */
  ref?: string | null;

  /**
   * Filter pipelines by the sha of the commit they are run for.
   */
  sha?: string | null;

  /**
   * Filter pipelines by their source. Will be ignored if `dast_view_scans` feature flag is disabled.
   */
  source?: string | null;

  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IXGitLabCommitAction {
  /**
   * Action to perform: create, delete, move, update, or chmod.
   */
  action: XGitLabCommitActionMode;

  /**
   * Full path to the file.
   */
  filePath: string;

  /**
   * Content of the file.
   */
  content?: string | null;

  /**
   * Original full path to the file being moved.
   */
  previousPath?: string | null;

  /**
   * Last known file commit ID.
   */
  lastCommitId?: string | null;

  /**
   * Enables/disables the execute flag on the file.
   */
  executeFilemode?: boolean | null;

  /**
   * Encoding of the file. Default is text.
   */
  encoding?: XGitLabCommitEncoding | null;
}

/**
 * Mode of a commit action
 */
export const enum XGitLabCommitActionMode {
  /**
   * Create command.
   */
  CREATE = 'CREATE',

  /**
   * Delete command.
   */
  DELETE = 'DELETE',

  /**
   * Move command.
   */
  MOVE = 'MOVE',

  /**
   * Update command.
   */
  UPDATE = 'UPDATE',

  /**
   * Chmod command.
   */
  CHMOD = 'CHMOD',
}

/**
 * The connection type for Commit.
 */
export interface IXGitLabCommitConnection {
  __typename: '_xGitLabCommitConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitLabCommitEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitLabCommit | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitLabPageInfo;
}

/**
 * Autogenerated input type of CommitCreate
 */
export interface IXGitLabCommitCreateInput {
  /**
   * Project full path the branch is associated with.
   */
  projectPath: string;

  /**
   * Name of the branch to commit into, it can be a new branch.
   */
  branch: string;

  /**
   * If on a new branch, name of the original branch.
   */
  startBranch?: string | null;

  /**
   * Raw commit message.
   */
  message: string;

  /**
   * Array of action hashes to commit as a batch.
   */
  actions: Array<IXGitLabCommitAction>;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of CommitCreate
 */
export interface IXGitLabCommitCreatePayload {
  __typename: '_xGitLabCommitCreatePayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * Commit after mutation.
   */
  commit: IXGitLabCommit | null;

  /**
   * ETag path for the commit's pipeline.
   */
  commitPipelinePath: string | null;

  /**
   * Contents of the commit.
   */
  content: Array<string> | null;

  /**
   * Errors encountered during execution of the mutation.
   */
  errors: Array<string>;
}

/**
 * An edge in a connection.
 */
export interface IXGitLabCommitEdge {
  __typename: '_xGitLabCommitEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitLabCommit | null;
}

export const enum XGitLabCommitEncoding {
  /**
   * Text encoding.
   */
  TEXT = 'TEXT',

  /**
   * Base64 encoding.
   */
  BASE64 = 'BASE64',
}

/**
 * Represents a ComplianceFramework associated with a Project
 */
export interface IXGitLabComplianceFramework {
  __typename: '_xGitLabComplianceFramework';

  /**
   * Hexadecimal representation of compliance framework's label color.
   */
  color: string;

  /**
   * Description of the compliance framework.
   */
  description: string;

  /**
   * Compliance framework ID.
   */
  id: string;

  /**
   * Name of the compliance framework.
   */
  name: string;

  /**
   * Full path of the compliance pipeline configuration stored in a project
   * repository, such as `.gitlab/.compliance-gitlab-ci.yml@compliance/hipaa`
   * **(ULTIMATE)**.
   */
  pipelineConfigurationFullPath: string | null;
}

/**
 * The connection type for ComplianceFramework.
 */
export interface IXGitLabComplianceFrameworkConnection {
  __typename: '_xGitLabComplianceFrameworkConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitLabComplianceFrameworkEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitLabComplianceFramework | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitLabPageInfo;
}

/**
 * An edge in a connection.
 */
export interface IXGitLabComplianceFrameworkEdge {
  __typename: '_xGitLabComplianceFrameworkEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitLabComplianceFramework | null;
}

export interface IXGitLabComplianceFrameworkInput {
  /**
   * New name for the compliance framework.
   */
  name?: string | null;

  /**
   * New description for the compliance framework.
   */
  description?: string | null;

  /**
   * New color representation of the compliance framework in hex format. e.g. #FCA121.
   */
  color?: string | null;

  /**
   * Full path of the compliance pipeline configuration stored in a project
   * repository, such as `.gitlab/.compliance-gitlab-ci.yml@compliance/hipaa`
   * **(ULTIMATE)**.
   */
  pipelineConfigurationFullPath?: string | null;
}

/**
 * Composer metadata
 */
export interface IXGitLabComposerMetadata {
  __typename: '_xGitLabComposerMetadata';

  /**
   * Data of the Composer JSON file.
   */
  composerJson: IXGitLabPackageComposerJsonType;

  /**
   * Target SHA of the package.
   */
  targetSha: string;
}

/**
 * Conan file metadata
 */
export interface IXGitLabConanFileMetadata {
  __typename: '_xGitLabConanFileMetadata';

  /**
   * Type of the Conan file.
   */
  conanFileType: XGitLabConanMetadatumFileTypeEnum;

  /**
   * Reference of the Conan package.
   */
  conanPackageReference: string | null;

  /**
   * Date of creation.
   */
  createdAt: any;

  /**
   * ID of the metadatum.
   */
  id: any;

  /**
   * Revision of the package.
   */
  packageRevision: string | null;

  /**
   * Revision of the Conan recipe.
   */
  recipeRevision: string;

  /**
   * Date of most recent update.
   */
  updatedAt: any;
}

/**
 * Conan metadata
 */
export interface IXGitLabConanMetadata {
  __typename: '_xGitLabConanMetadata';

  /**
   * Date of creation.
   */
  createdAt: any;

  /**
   * ID of the metadatum.
   */
  id: any;

  /**
   * Channel of the Conan package.
   */
  packageChannel: string;

  /**
   * Username of the Conan package.
   */
  packageUsername: string;

  /**
   * Recipe of the Conan package.
   */
  recipe: string;

  /**
   * Recipe path of the Conan package.
   */
  recipePath: string;

  /**
   * Date of most recent update.
   */
  updatedAt: any;
}

/**
 * Conan file types
 */
export const enum XGitLabConanMetadatumFileTypeEnum {
  /**
   * A recipe file type.
   */
  RECIPE_FILE = 'RECIPE_FILE',

  /**
   * A package file type.
   */
  PACKAGE_FILE = 'PACKAGE_FILE',
}

/**
 * Autogenerated input type of ConfigureDependencyScanning
 */
export interface IXGitLabConfigureDependencyScanningInput {
  /**
   * Full path of the project.
   */
  projectPath: string;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of ConfigureDependencyScanning
 */
export interface IXGitLabConfigureDependencyScanningPayload {
  __typename: '_xGitLabConfigureDependencyScanningPayload';

  /**
   * Branch that has the new/modified `.gitlab-ci.yml` file.
   */
  branch: string | null;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * Errors encountered during execution of the mutation.
   */
  errors: Array<string>;

  /**
   * Redirect path to use when the response is successful.
   */
  successPath: string | null;
}

/**
 * Autogenerated input type of ConfigureSast
 */
export interface IXGitLabConfigureSastInput {
  /**
   * Full path of the project.
   */
  projectPath: string;

  /**
   * SAST CI configuration for the project.
   */
  configuration: IXGitLabSastCiConfigurationInput;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of ConfigureSast
 */
export interface IXGitLabConfigureSastPayload {
  __typename: '_xGitLabConfigureSastPayload';

  /**
   * Branch that has the new/modified `.gitlab-ci.yml` file.
   */
  branch: string | null;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * Errors encountered during execution of the mutation.
   */
  errors: Array<string>;

  /**
   * Redirect path to use when the response is successful.
   */
  successPath: string | null;
}

/**
 * Autogenerated input type of ConfigureSecretDetection
 */
export interface IXGitLabConfigureSecretDetectionInput {
  /**
   * Full path of the project.
   */
  projectPath: string;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of ConfigureSecretDetection
 */
export interface IXGitLabConfigureSecretDetectionPayload {
  __typename: '_xGitLabConfigureSecretDetectionPayload';

  /**
   * Branch that has the new/modified `.gitlab-ci.yml` file.
   */
  branch: string | null;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * Errors encountered during execution of the mutation.
   */
  errors: Array<string>;

  /**
   * Redirect path to use when the response is successful.
   */
  successPath: string | null;
}

/**
 * Connection details for an Agent
 */
export interface IXGitLabConnectedAgent {
  __typename: '_xGitLabConnectedAgent';

  /**
   * When the connection was established.
   */
  connectedAt: any | null;

  /**
   * ID of the connection.
   */
  connectionId: any | null;

  /**
   * Information about the Agent.
   */
  metadata: IXGitLabAgentMetadata | null;
}

/**
 * The connection type for ConnectedAgent.
 */
export interface IXGitLabConnectedAgentConnection {
  __typename: '_xGitLabConnectedAgentConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitLabConnectedAgentEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitLabConnectedAgent | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitLabPageInfo;
}

/**
 * An edge in a connection.
 */
export interface IXGitLabConnectedAgentEdge {
  __typename: '_xGitLabConnectedAgentEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitLabConnectedAgent | null;
}

/**
 * A tag expiration policy designed to keep only the images that matter most
 */
export interface IXGitLabContainerExpirationPolicy {
  __typename: '_xGitLabContainerExpirationPolicy';

  /**
   * This container expiration policy schedule.
   */
  cadence: XGitLabContainerExpirationPolicyCadenceEnum;

  /**
   * Timestamp of when the container expiration policy was created.
   */
  createdAt: any;

  /**
   * Indicates whether this container expiration policy is enabled.
   */
  enabled: boolean;

  /**
   * Number of tags to retain.
   */
  keepN: XGitLabContainerExpirationPolicyKeepEnum | null;

  /**
   * Tags with names matching this regex pattern will expire.
   */
  nameRegex: any | null;

  /**
   * Tags with names matching this regex pattern will be preserved.
   */
  nameRegexKeep: any | null;

  /**
   * Next time that this container expiration policy will get executed.
   */
  nextRunAt: any | null;

  /**
   * Tags older that this will expire.
   */
  olderThan: XGitLabContainerExpirationPolicyOlderThanEnum | null;

  /**
   * Timestamp of when the container expiration policy was updated.
   */
  updatedAt: any;
}

export const enum XGitLabContainerExpirationPolicyCadenceEnum {
  /**
   * Every day
   */
  EVERY_DAY = 'EVERY_DAY',

  /**
   * Every week
   */
  EVERY_WEEK = 'EVERY_WEEK',

  /**
   * Every two weeks
   */
  EVERY_TWO_WEEKS = 'EVERY_TWO_WEEKS',

  /**
   * Every month
   */
  EVERY_MONTH = 'EVERY_MONTH',

  /**
   * Every three months
   */
  EVERY_THREE_MONTHS = 'EVERY_THREE_MONTHS',
}

export const enum XGitLabContainerExpirationPolicyKeepEnum {
  /**
   * 1 tag per image name
   */
  ONE_TAG = 'ONE_TAG',

  /**
   * 5 tags per image name
   */
  FIVE_TAGS = 'FIVE_TAGS',

  /**
   * 10 tags per image name
   */
  TEN_TAGS = 'TEN_TAGS',

  /**
   * 25 tags per image name
   */
  TWENTY_FIVE_TAGS = 'TWENTY_FIVE_TAGS',

  /**
   * 50 tags per image name
   */
  FIFTY_TAGS = 'FIFTY_TAGS',

  /**
   * 100 tags per image name
   */
  ONE_HUNDRED_TAGS = 'ONE_HUNDRED_TAGS',
}

export const enum XGitLabContainerExpirationPolicyOlderThanEnum {
  /**
   * 7 days until tags are automatically removed
   */
  SEVEN_DAYS = 'SEVEN_DAYS',

  /**
   * 14 days until tags are automatically removed
   */
  FOURTEEN_DAYS = 'FOURTEEN_DAYS',

  /**
   * 30 days until tags are automatically removed
   */
  THIRTY_DAYS = 'THIRTY_DAYS',

  /**
   * 60 days until tags are automatically removed
   */
  SIXTY_DAYS = 'SIXTY_DAYS',

  /**
   * 90 days until tags are automatically removed
   */
  NINETY_DAYS = 'NINETY_DAYS',
}

/**
 * A container repository
 */
export interface IXGitLabContainerRepository {
  __typename: '_xGitLabContainerRepository';

  /**
   * Can the current user delete the container repository.
   */
  canDelete: boolean;

  /**
   * Timestamp when the container repository was created.
   */
  createdAt: any;

  /**
   * Tags cleanup status for the container repository.
   */
  expirationPolicyCleanupStatus: XGitLabContainerRepositoryCleanupStatus | null;

  /**
   * Timestamp when the cleanup done by the expiration policy was started on the container repository.
   */
  expirationPolicyStartedAt: any | null;

  /**
   * ID of the container repository.
   */
  id: string;

  /**
   * URL of the container repository.
   */
  location: string;

  /**
   * Name of the container repository.
   */
  name: string;

  /**
   * Path of the container repository.
   */
  path: string;

  /**
   * Project of the container registry.
   */
  project: IXGitLabProject;

  /**
   * Status of the container repository.
   */
  status: XGitLabContainerRepositoryStatus | null;

  /**
   * Number of tags associated with this image.
   */
  tagsCount: number;

  /**
   * Timestamp when the container repository was updated.
   */
  updatedAt: any;
}

/**
 * Status of the tags cleanup of a container repository
 */
export const enum XGitLabContainerRepositoryCleanupStatus {
  /**
   * Tags cleanup is not scheduled. This is the default state.
   */
  UNSCHEDULED = 'UNSCHEDULED',

  /**
   * Tags cleanup is scheduled and is going to be executed shortly.
   */
  SCHEDULED = 'SCHEDULED',

  /**
   * Tags cleanup has been partially executed. There are still remaining tags to delete.
   */
  UNFINISHED = 'UNFINISHED',

  /**
   * Tags cleanup is ongoing.
   */
  ONGOING = 'ONGOING',
}

/**
 * The connection type for ContainerRepository.
 */
export interface IXGitLabContainerRepositoryConnection {
  __typename: '_xGitLabContainerRepositoryConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitLabContainerRepositoryEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitLabContainerRepository | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitLabPageInfo;
}

/**
 * Details of a container repository
 */
export interface IXGitLabContainerRepositoryDetails {
  __typename: '_xGitLabContainerRepositoryDetails';

  /**
   * Can the current user delete the container repository.
   */
  canDelete: boolean;

  /**
   * Timestamp when the container repository was created.
   */
  createdAt: any;

  /**
   * Tags cleanup status for the container repository.
   */
  expirationPolicyCleanupStatus: XGitLabContainerRepositoryCleanupStatus | null;

  /**
   * Timestamp when the cleanup done by the expiration policy was started on the container repository.
   */
  expirationPolicyStartedAt: any | null;

  /**
   * ID of the container repository.
   */
  id: string;

  /**
   * URL of the container repository.
   */
  location: string;

  /**
   * Name of the container repository.
   */
  name: string;

  /**
   * Path of the container repository.
   */
  path: string;

  /**
   * Project of the container registry.
   */
  project: IXGitLabProject;

  /**
   * Status of the container repository.
   */
  status: XGitLabContainerRepositoryStatus | null;

  /**
   * Tags of the container repository.
   */
  tags: IXGitLabContainerRepositoryTagConnection | null;

  /**
   * Number of tags associated with this image.
   */
  tagsCount: number;

  /**
   * Timestamp when the container repository was updated.
   */
  updatedAt: any;
}

export interface ITagsOnXGitLabContainerRepositoryDetailsArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

/**
 * An edge in a connection.
 */
export interface IXGitLabContainerRepositoryEdge {
  __typename: '_xGitLabContainerRepositoryEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitLabContainerRepository | null;
}

/**
 * Values for sorting container repositories
 */
export const enum XGitLabContainerRepositorySort {
  /**
   * Updated at descending order.
   * @deprecated "This was renamed. Please use `UPDATED_DESC`. Deprecated in 13.5."
   */
  updated_desc = 'updated_desc',

  /**
   * Updated at ascending order.
   * @deprecated "This was renamed. Please use `UPDATED_ASC`. Deprecated in 13.5."
   */
  updated_asc = 'updated_asc',

  /**
   * Created at descending order.
   * @deprecated "This was renamed. Please use `CREATED_DESC`. Deprecated in 13.5."
   */
  created_desc = 'created_desc',

  /**
   * Created at ascending order.
   * @deprecated "This was renamed. Please use `CREATED_ASC`. Deprecated in 13.5."
   */
  created_asc = 'created_asc',

  /**
   * Updated at descending order.
   */
  UPDATED_DESC = 'UPDATED_DESC',

  /**
   * Updated at ascending order.
   */
  UPDATED_ASC = 'UPDATED_ASC',

  /**
   * Created at descending order.
   */
  CREATED_DESC = 'CREATED_DESC',

  /**
   * Created at ascending order.
   */
  CREATED_ASC = 'CREATED_ASC',

  /**
   * Name by ascending order.
   */
  NAME_ASC = 'NAME_ASC',

  /**
   * Name by descending order.
   */
  NAME_DESC = 'NAME_DESC',
}

/**
 * Status of a container repository
 */
export const enum XGitLabContainerRepositoryStatus {
  /**
   * Delete Scheduled status.
   */
  DELETE_SCHEDULED = 'DELETE_SCHEDULED',

  /**
   * Delete Failed status.
   */
  DELETE_FAILED = 'DELETE_FAILED',
}

/**
 * A tag from a container repository
 */
export interface IXGitLabContainerRepositoryTag {
  __typename: '_xGitLabContainerRepositoryTag';

  /**
   * Can the current user delete this tag.
   */
  canDelete: boolean;

  /**
   * Timestamp when the tag was created.
   */
  createdAt: any | null;

  /**
   * Digest of the tag.
   */
  digest: string | null;

  /**
   * URL of the tag.
   */
  location: string;

  /**
   * Name of the tag.
   */
  name: string;

  /**
   * Path of the tag.
   */
  path: string;

  /**
   * Revision of the tag.
   */
  revision: string | null;

  /**
   * Short revision of the tag.
   */
  shortRevision: string | null;

  /**
   * Size of the tag.
   */
  totalSize: any | null;
}

/**
 * The connection type for ContainerRepositoryTag.
 */
export interface IXGitLabContainerRepositoryTagConnection {
  __typename: '_xGitLabContainerRepositoryTagConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitLabContainerRepositoryTagEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitLabContainerRepositoryTag | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitLabPageInfo;
}

/**
 * An edge in a connection.
 */
export interface IXGitLabContainerRepositoryTagEdge {
  __typename: '_xGitLabContainerRepositoryTagEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitLabContainerRepositoryTag | null;
}

/**
 * Autogenerated input type of CreateAlertIssue
 */
export interface IXGitLabCreateAlertIssueInput {
  /**
   * Project the alert to mutate is in.
   */
  projectPath: string;

  /**
   * IID of the alert to mutate.
   */
  iid: string;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of CreateAlertIssue
 */
export interface IXGitLabCreateAlertIssuePayload {
  __typename: '_xGitLabCreateAlertIssuePayload';

  /**
   * Alert after mutation.
   */
  alert: IXGitLabAlertManagementAlert | null;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * Errors encountered during execution of the mutation.
   */
  errors: Array<string>;

  /**
   * Issue created after mutation.
   */
  issue: IXGitLabIssue | null;

  /**
   * To-do item after mutation.
   */
  todo: IXGitLabTodo | null;
}

/**
 * Autogenerated input type of CreateAnnotation
 */
export interface IXGitLabCreateAnnotationInput {
  /**
   * Global ID of the environment to add an annotation to.
   */
  environmentId?: any | null;

  /**
   * Global ID of the cluster to add an annotation to.
   */
  clusterId?: any | null;

  /**
   * Timestamp indicating starting moment to which the annotation relates.
   */
  startingAt: any;

  /**
   * Timestamp indicating ending moment to which the annotation relates.
   */
  endingAt?: any | null;

  /**
   * Path to a file defining the dashboard on which the annotation should be added.
   */
  dashboardPath: string;

  /**
   * Description of the annotation.
   */
  description: string;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of CreateAnnotation
 */
export interface IXGitLabCreateAnnotationPayload {
  __typename: '_xGitLabCreateAnnotationPayload';

  /**
   * Created annotation.
   */
  annotation: IXGitLabMetricsDashboardAnnotation | null;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * Errors encountered during execution of the mutation.
   */
  errors: Array<string>;
}

/**
 * Autogenerated input type of CreateBoard
 */
export interface IXGitLabCreateBoardInput {
  /**
   * Full path of the project with which the resource is associated.
   */
  projectPath?: string | null;

  /**
   * Full path of the group with which the resource is associated.
   */
  groupPath?: string | null;

  /**
   * Board name.
   */
  name?: string | null;

  /**
   * Whether or not backlog list is hidden.
   */
  hideBacklogList?: boolean | null;

  /**
   * Whether or not closed list is hidden.
   */
  hideClosedList?: boolean | null;

  /**
   * ID of user to be assigned to the board.
   */
  assigneeId?: any | null;

  /**
   * ID of milestone to be assigned to the board.
   */
  milestoneId?: any | null;

  /**
   * ID of iteration to be assigned to the board.
   */
  iterationId?: any | null;

  /**
   * ID of iteration cadence to be assigned to the board.
   */
  iterationCadenceId?: any | null;

  /**
   * Weight value to be assigned to the board.
   */
  weight?: number | null;

  /**
   * Labels of the issue.
   */
  labels?: Array<string> | null;

  /**
   * IDs of labels to be added to the board.
   */
  labelIds?: Array<any> | null;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of CreateBoard
 */
export interface IXGitLabCreateBoardPayload {
  __typename: '_xGitLabCreateBoardPayload';

  /**
   * Board after mutation.
   */
  board: IXGitLabBoard | null;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * Errors encountered during execution of the mutation.
   */
  errors: Array<string>;
}

/**
 * Autogenerated input type of CreateBranch
 */
export interface IXGitLabCreateBranchInput {
  /**
   * Project full path the branch is associated with.
   */
  projectPath: string;

  /**
   * Name of the branch.
   */
  name: string;

  /**
   * Branch name or commit SHA to create branch from.
   */
  ref: string;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of CreateBranch
 */
export interface IXGitLabCreateBranchPayload {
  __typename: '_xGitLabCreateBranchPayload';

  /**
   * Branch after mutation.
   */
  branch: IXGitLabBranch | null;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * Errors encountered during execution of the mutation.
   */
  errors: Array<string>;
}

/**
 * Autogenerated input type of CreateClusterAgent
 */
export interface IXGitLabCreateClusterAgentInput {
  /**
   * Full path of the associated project for this cluster agent.
   */
  projectPath: string;

  /**
   * Name of the cluster agent.
   */
  name: string;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of CreateClusterAgent
 */
export interface IXGitLabCreateClusterAgentPayload {
  __typename: '_xGitLabCreateClusterAgentPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * Cluster agent created after mutation.
   */
  clusterAgent: IXGitLabClusterAgent | null;

  /**
   * Errors encountered during execution of the mutation.
   */
  errors: Array<string>;
}

/**
 * Autogenerated input type of CreateComplianceFramework
 */
export interface IXGitLabCreateComplianceFrameworkInput {
  /**
   * Full path of the namespace to add the compliance framework to.
   */
  namespacePath: string;

  /**
   * Parameters to update the compliance framework with.
   */
  params: IXGitLabComplianceFrameworkInput;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of CreateComplianceFramework
 */
export interface IXGitLabCreateComplianceFrameworkPayload {
  __typename: '_xGitLabCreateComplianceFrameworkPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * Errors encountered during execution of the mutation.
   */
  errors: Array<string>;

  /**
   * Created compliance framework.
   */
  framework: IXGitLabComplianceFramework | null;
}

/**
 * Autogenerated input type of CreateCustomEmoji
 */
export interface IXGitLabCreateCustomEmojiInput {
  /**
   * Namespace full path the emoji is associated with.
   */
  groupPath: string;

  /**
   * Name of the emoji.
   */
  name: string;

  /**
   * Location of the emoji file.
   */
  url: string;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of CreateCustomEmoji
 */
export interface IXGitLabCreateCustomEmojiPayload {
  __typename: '_xGitLabCreateCustomEmojiPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * New custom emoji.
   */
  customEmoji: IXGitLabCustomEmoji | null;

  /**
   * Errors encountered during execution of the mutation.
   */
  errors: Array<string>;
}

/**
 * Autogenerated input type of CreateDiffNote
 */
export interface IXGitLabCreateDiffNoteInput {
  /**
   * Global ID of the resource to add a note to.
   */
  noteableId: any;

  /**
   * Content of the note.
   */
  body: string;

  /**
   * Confidentiality flag of a note. Default is false.
   */
  confidential?: boolean | null;

  /**
   * Position of this note on a diff.
   */
  position: IXGitLabDiffPositionInput;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of CreateDiffNote
 */
export interface IXGitLabCreateDiffNotePayload {
  __typename: '_xGitLabCreateDiffNotePayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * Errors encountered during execution of the mutation.
   */
  errors: Array<string>;

  /**
   * Note after mutation.
   */
  note: IXGitLabNote | null;
}

/**
 * Autogenerated input type of CreateEpic
 */
export interface IXGitLabCreateEpicInput {
  /**
   * Group the epic to mutate is in.
   */
  groupPath: string;

  /**
   * Title of the epic.
   */
  title?: string | null;

  /**
   * Description of the epic.
   */
  description?: string | null;

  /**
   * Indicates if the epic is confidential.
   */
  confidential?: boolean | null;

  /**
   * Start date of the epic.
   */
  startDateFixed?: string | null;

  /**
   * End date of the epic.
   */
  dueDateFixed?: string | null;

  /**
   * Indicates start date should be sourced from start_date_fixed field not the issue milestones.
   */
  startDateIsFixed?: boolean | null;

  /**
   * Indicates end date should be sourced from due_date_fixed field not the issue milestones.
   */
  dueDateIsFixed?: boolean | null;

  /**
   * IDs of labels to be added to the epic.
   */
  addLabelIds?: Array<string> | null;

  /**
   * IDs of labels to be removed from the epic.
   */
  removeLabelIds?: Array<string> | null;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of CreateEpic
 */
export interface IXGitLabCreateEpicPayload {
  __typename: '_xGitLabCreateEpicPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * Created epic.
   */
  epic: IXGitLabEpic | null;

  /**
   * Errors encountered during execution of the mutation.
   */
  errors: Array<string>;
}

/**
 * Autogenerated input type of CreateImageDiffNote
 */
export interface IXGitLabCreateImageDiffNoteInput {
  /**
   * Global ID of the resource to add a note to.
   */
  noteableId: any;

  /**
   * Content of the note.
   */
  body: string;

  /**
   * Confidentiality flag of a note. Default is false.
   */
  confidential?: boolean | null;

  /**
   * Position of this note on a diff.
   */
  position: IXGitLabDiffImagePositionInput;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of CreateImageDiffNote
 */
export interface IXGitLabCreateImageDiffNotePayload {
  __typename: '_xGitLabCreateImageDiffNotePayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * Errors encountered during execution of the mutation.
   */
  errors: Array<string>;

  /**
   * Note after mutation.
   */
  note: IXGitLabNote | null;
}

/**
 * Autogenerated input type of CreateIssue
 */
export interface IXGitLabCreateIssueInput {
  /**
   * Description of the issue.
   */
  description?: string | null;

  /**
   * Due date of the issue.
   */
  dueDate?: any | null;

  /**
   * Indicates the issue is confidential.
   */
  confidential?: boolean | null;

  /**
   * Indicates discussion is locked on the issue.
   */
  locked?: boolean | null;

  /**
   * Type of the issue.
   */
  type?: XGitLabIssueType | null;

  /**
   * Project full path the issue is associated with.
   */
  projectPath: string;

  /**
   * IID (internal ID) of a project issue. Only admins and project owners can modify.
   */
  iid?: number | null;

  /**
   * Title of the issue.
   */
  title: string;

  /**
   * ID of the milestone to assign to the issue. On update milestone will be removed if set to null.
   */
  milestoneId?: any | null;

  /**
   * Labels of the issue.
   */
  labels?: Array<string> | null;

  /**
   * IDs of labels to be added to the issue.
   */
  labelIds?: Array<any> | null;

  /**
   * Timestamp when the issue was created. Available only for admins and project owners.
   */
  createdAt?: any | null;

  /**
   * IID of a merge request for which to resolve discussions.
   */
  mergeRequestToResolveDiscussionsOf?: any | null;

  /**
   * ID of a discussion to resolve. Also pass `merge_request_to_resolve_discussions_of`.
   */
  discussionToResolve?: string | null;

  /**
   * Array of user IDs to assign to the issue.
   */
  assigneeIds?: Array<any> | null;

  /**
   * Desired health status.
   */
  healthStatus?: XGitLabHealthStatus | null;

  /**
   * Weight of the issue.
   */
  weight?: number | null;

  /**
   * ID of an epic to associate the issue with.
   */
  epicId?: any | null;

  /**
   * Global iteration ID. Mutually exlusive argument with `iterationWildcardId`.
   */
  iterationId?: any | null;

  /**
   * Iteration wildcard ID. Supported values are: `CURRENT`. Mutually exclusive
   * argument with `iterationId`. iterationCadenceId also required when this
   * argument is provided.
   */
  iterationWildcardId?: XGitLabIssueCreationIterationWildcardId | null;

  /**
   * Global iteration cadence ID. Required when `iterationWildcardId` is provided.
   */
  iterationCadenceId?: any | null;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of CreateIssue
 */
export interface IXGitLabCreateIssuePayload {
  __typename: '_xGitLabCreateIssuePayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * Errors encountered during execution of the mutation.
   */
  errors: Array<string>;

  /**
   * Issue after mutation.
   */
  issue: IXGitLabIssue | null;
}

/**
 * Autogenerated input type of CreateIteration
 */
export interface IXGitLabCreateIterationInput {
  /**
   * Full path of the project with which the resource is associated.
   */
  projectPath?: string | null;

  /**
   * Full path of the group with which the resource is associated.
   */
  groupPath?: string | null;

  /**
   * Global ID of the iterations cadence to be assigned to newly created iteration.
   */
  iterationsCadenceId?: any | null;

  /**
   * Title of the iteration.
   */
  title?: string | null;

  /**
   * Description of the iteration.
   */
  description?: string | null;

  /**
   * Start date of the iteration.
   */
  startDate?: string | null;

  /**
   * End date of the iteration.
   */
  dueDate?: string | null;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of CreateIteration
 */
export interface IXGitLabCreateIterationPayload {
  __typename: '_xGitLabCreateIterationPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * Errors encountered during execution of the mutation.
   */
  errors: Array<string>;

  /**
   * Created iteration.
   */
  iteration: IXGitLabIteration | null;
}

/**
 * Autogenerated input type of CreateNote
 */
export interface IXGitLabCreateNoteInput {
  /**
   * Global ID of the resource to add a note to.
   */
  noteableId: any;

  /**
   * Content of the note.
   */
  body: string;

  /**
   * Confidentiality flag of a note. Default is false.
   */
  confidential?: boolean | null;

  /**
   * Global ID of the discussion this note is in reply to.
   */
  discussionId?: any | null;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of CreateNote
 */
export interface IXGitLabCreateNotePayload {
  __typename: '_xGitLabCreateNotePayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * Errors encountered during execution of the mutation.
   */
  errors: Array<string>;

  /**
   * Note after mutation.
   */
  note: IXGitLabNote | null;
}

/**
 * Autogenerated input type of CreateRequirement
 */
export interface IXGitLabCreateRequirementInput {
  /**
   * Title of the requirement.
   */
  title?: string | null;

  /**
   * Description of the requirement.
   */
  description?: string | null;

  /**
   * Full project path the requirement is associated with.
   */
  projectPath: string;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of CreateRequirement
 */
export interface IXGitLabCreateRequirementPayload {
  __typename: '_xGitLabCreateRequirementPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * Errors encountered during execution of the mutation.
   */
  errors: Array<string>;

  /**
   * Requirement after mutation.
   */
  requirement: IXGitLabRequirement | null;
}

/**
 * Autogenerated input type of CreateSnippet
 */
export interface IXGitLabCreateSnippetInput {
  /**
   * Title of the snippet.
   */
  title: string;

  /**
   * Description of the snippet.
   */
  description?: string | null;

  /**
   * Visibility level of the snippet.
   */
  visibilityLevel: XGitLabVisibilityLevelsEnum;

  /**
   * Full path of the project the snippet is associated with.
   */
  projectPath?: string | null;

  /**
   * Paths to files uploaded in the snippet description.
   */
  uploadedFiles?: Array<string> | null;

  /**
   * Actions to perform over the snippet repository and blobs.
   */
  blobActions?: Array<IXGitLabSnippetBlobActionInputType> | null;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of CreateSnippet
 */
export interface IXGitLabCreateSnippetPayload {
  __typename: '_xGitLabCreateSnippetPayload';

  /**
   * CAPTCHA site key which must be used to render a challenge for the user to
   * solve to obtain a valid captchaResponse value. Included only when an operation
   * was not completed because "NeedsCaptchaResponse" is true. Deprecated in 13.11:
   * Use spam protection with HTTP headers instead.
   * @deprecated "Use spam protection with HTTP headers instead. Deprecated in 13.11."
   */
  captchaSiteKey: string | null;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * Errors encountered during execution of the mutation.
   */
  errors: Array<string>;

  /**
   * Indicates whether the operation was detected as possible spam and not
   * completed. If CAPTCHA is enabled, the request must be resubmitted with a valid
   * CAPTCHA response and spam_log_id included for the operation to be completed.
   * Included only when an operation was not completed because
   * "NeedsCaptchaResponse" is true. Deprecated in 13.11: Use spam protection with
   * HTTP headers instead.
   * @deprecated "Use spam protection with HTTP headers instead. Deprecated in 13.11."
   */
  needsCaptchaResponse: boolean | null;

  /**
   * Snippet after mutation.
   */
  snippet: IXGitLabSnippet | null;

  /**
   * Indicates whether the operation was detected as definite spam. There is no
   * option to resubmit the request with a CAPTCHA response. Deprecated in 13.11:
   * Use spam protection with HTTP headers instead.
   * @deprecated "Use spam protection with HTTP headers instead. Deprecated in 13.11."
   */
  spam: boolean | null;

  /**
   * Spam log ID which must be passed along with a valid CAPTCHA response for an
   * operation to be completed. Included only when an operation was not completed
   * because "NeedsCaptchaResponse" is true. Deprecated in 13.11: Use spam
   * protection with HTTP headers instead.
   * @deprecated "Use spam protection with HTTP headers instead. Deprecated in 13.11."
   */
  spamLogId: number | null;
}

/**
 * Autogenerated input type of CreateTestCase
 */
export interface IXGitLabCreateTestCaseInput {
  /**
   * Test case title.
   */
  title: string;

  /**
   * Test case description.
   */
  description?: string | null;

  /**
   * IDs of labels to be added to the test case.
   */
  labelIds?: Array<string> | null;

  /**
   * Project full path to create the test case in.
   */
  projectPath: string;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of CreateTestCase
 */
export interface IXGitLabCreateTestCasePayload {
  __typename: '_xGitLabCreateTestCasePayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * Errors encountered during execution of the mutation.
   */
  errors: Array<string>;

  /**
   * Test case created.
   */
  testCase: IXGitLabIssue | null;
}

/**
 * Represents the current license
 */
export interface IXGitLabCurrentLicense {
  __typename: '_xGitLabCurrentLicense';

  /**
   * Date when the license was activated.
   */
  activatedAt: any | null;

  /**
   * Number of billable users on the system.
   */
  billableUsersCount: number | null;

  /**
   * Date, including grace period, when licensed features will be blocked.
   */
  blockChangesAt: any | null;

  /**
   * Company of the licensee.
   */
  company: string | null;

  /**
   * Email of the licensee.
   */
  email: string | null;

  /**
   * Date when the license expires.
   */
  expiresAt: any | null;

  /**
   * ID of the license.
   */
  id: string;

  /**
   * Date when the license was last synced.
   */
  lastSync: any | null;

  /**
   * Highest number of billable users on the system during the term of the current license.
   */
  maximumUserCount: number | null;

  /**
   * Name of the licensee.
   */
  name: string | null;

  /**
   * Name of the subscription plan.
   */
  plan: string;

  /**
   * Date when the license started.
   */
  startsAt: any | null;

  /**
   * Type of the license.
   */
  type: string;

  /**
   * Number of paid users in the license.
   */
  usersInLicenseCount: number | null;

  /**
   * Number of users over the paid users in the license.
   */
  usersOverLicenseCount: number | null;
}

export type _xGitLabCurrentUserTodos =
  | IXGitLabBoardEpic
  | IXGitLabDesign
  | IXGitLabEpic
  | IXGitLabEpicIssue
  | IXGitLabIssue
  | IXGitLabMergeRequest;

export interface IXGitLabCurrentUserTodos {
  __typename: '_xGitLabCurrentUserTodos';

  /**
   * To-do items for the current user.
   */
  currentUserTodos: IXGitLabTodoConnection;
}

export interface ICurrentUserTodosOnXGitLabCurrentUserTodosArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * State of the to-do items.
   */
  state?: XGitLabTodoStateEnum | null;
}

/**
 * A custom emoji uploaded by user
 */
export interface IXGitLabCustomEmoji {
  __typename: '_xGitLabCustomEmoji';

  /**
   * Whether the emoji is an external link.
   */
  external: boolean;

  /**
   * ID of the emoji.
   */
  id: any;

  /**
   * Name of the emoji.
   */
  name: string;

  /**
   * Link to file of the emoji.
   */
  url: string;
}

/**
 * The connection type for CustomEmoji.
 */
export interface IXGitLabCustomEmojiConnection {
  __typename: '_xGitLabCustomEmojiConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitLabCustomEmojiEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitLabCustomEmoji | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitLabPageInfo;
}

/**
 * An edge in a connection.
 */
export interface IXGitLabCustomEmojiEdge {
  __typename: '_xGitLabCustomEmojiEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitLabCustomEmoji | null;
}

export interface IXGitLabCustomerRelationsContact {
  __typename: '_xGitLabCustomerRelationsContact';

  /**
   * Timestamp the contact was created.
   */
  createdAt: any;

  /**
   * Description of or notes for the contact.
   */
  description: string | null;

  /**
   * Email address of the contact.
   */
  email: string | null;

  /**
   * First name of the contact.
   */
  firstName: string;

  /**
   * Internal ID of the contact.
   */
  id: string;

  /**
   * Last name of the contact.
   */
  lastName: string;

  /**
   * Organization of the contact.
   */
  organization: IXGitLabCustomerRelationsOrganization | null;

  /**
   * Phone number of the contact.
   */
  phone: string | null;

  /**
   * Timestamp the contact was last updated.
   */
  updatedAt: any;
}

/**
 * The connection type for CustomerRelationsContact.
 */
export interface IXGitLabCustomerRelationsContactConnection {
  __typename: '_xGitLabCustomerRelationsContactConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitLabCustomerRelationsContactEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitLabCustomerRelationsContact | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitLabPageInfo;
}

/**
 * Autogenerated input type of CustomerRelationsContactCreate
 */
export interface IXGitLabCustomerRelationsContactCreateInput {
  /**
   * Group for the contact.
   */
  groupId: any;

  /**
   * Organization for the contact.
   */
  organizationId?: any | null;

  /**
   * First name of the contact.
   */
  firstName: string;

  /**
   * Last name of the contact.
   */
  lastName: string;

  /**
   * Phone number of the contact.
   */
  phone?: string | null;

  /**
   * Email address of the contact.
   */
  email?: string | null;

  /**
   * Description of or notes for the contact.
   */
  description?: string | null;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of CustomerRelationsContactCreate
 */
export interface IXGitLabCustomerRelationsContactCreatePayload {
  __typename: '_xGitLabCustomerRelationsContactCreatePayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * Contact after the mutation.
   */
  contact: IXGitLabCustomerRelationsContact | null;

  /**
   * Errors encountered during execution of the mutation.
   */
  errors: Array<string>;
}

/**
 * An edge in a connection.
 */
export interface IXGitLabCustomerRelationsContactEdge {
  __typename: '_xGitLabCustomerRelationsContactEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitLabCustomerRelationsContact | null;
}

/**
 * Autogenerated input type of CustomerRelationsContactUpdate
 */
export interface IXGitLabCustomerRelationsContactUpdateInput {
  /**
   * Global ID of the contact.
   */
  id: any;

  /**
   * Organization of the contact.
   */
  organizationId?: any | null;

  /**
   * First name of the contact.
   */
  firstName?: string | null;

  /**
   * Last name of the contact.
   */
  lastName?: string | null;

  /**
   * Phone number of the contact.
   */
  phone?: string | null;

  /**
   * Email address of the contact.
   */
  email?: string | null;

  /**
   * Description of or notes for the contact.
   */
  description?: string | null;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of CustomerRelationsContactUpdate
 */
export interface IXGitLabCustomerRelationsContactUpdatePayload {
  __typename: '_xGitLabCustomerRelationsContactUpdatePayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * Contact after the mutation.
   */
  contact: IXGitLabCustomerRelationsContact | null;

  /**
   * Errors encountered during execution of the mutation.
   */
  errors: Array<string>;
}

export interface IXGitLabCustomerRelationsOrganization {
  __typename: '_xGitLabCustomerRelationsOrganization';

  /**
   * Timestamp the organization was created.
   */
  createdAt: any;

  /**
   * Standard billing rate for the organization.
   */
  defaultRate: number | null;

  /**
   * Description of or notes for the organization.
   */
  description: string | null;

  /**
   * Internal ID of the organization.
   */
  id: string;

  /**
   * Name of the organization.
   */
  name: string;

  /**
   * Timestamp the organization was last updated.
   */
  updatedAt: any;
}

/**
 * The connection type for CustomerRelationsOrganization.
 */
export interface IXGitLabCustomerRelationsOrganizationConnection {
  __typename: '_xGitLabCustomerRelationsOrganizationConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitLabCustomerRelationsOrganizationEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitLabCustomerRelationsOrganization | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitLabPageInfo;
}

/**
 * Autogenerated input type of CustomerRelationsOrganizationCreate
 */
export interface IXGitLabCustomerRelationsOrganizationCreateInput {
  /**
   * Group for the organization.
   */
  groupId: any;

  /**
   * Name of the organization.
   */
  name: string;

  /**
   * Standard billing rate for the organization.
   */
  defaultRate?: number | null;

  /**
   * Description of or notes for the organization.
   */
  description?: string | null;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of CustomerRelationsOrganizationCreate
 */
export interface IXGitLabCustomerRelationsOrganizationCreatePayload {
  __typename: '_xGitLabCustomerRelationsOrganizationCreatePayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * Errors encountered during execution of the mutation.
   */
  errors: Array<string>;

  /**
   * Organization after the mutation.
   */
  organization: IXGitLabCustomerRelationsOrganization | null;
}

/**
 * An edge in a connection.
 */
export interface IXGitLabCustomerRelationsOrganizationEdge {
  __typename: '_xGitLabCustomerRelationsOrganizationEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitLabCustomerRelationsOrganization | null;
}

/**
 * Autogenerated input type of CustomerRelationsOrganizationUpdate
 */
export interface IXGitLabCustomerRelationsOrganizationUpdateInput {
  /**
   * Global ID of the organization.
   */
  id: any;

  /**
   * Name of the organization.
   */
  name?: string | null;

  /**
   * Standard billing rate for the organization.
   */
  defaultRate?: number | null;

  /**
   * Description of or notes for the organization.
   */
  description?: string | null;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of CustomerRelationsOrganizationUpdate
 */
export interface IXGitLabCustomerRelationsOrganizationUpdatePayload {
  __typename: '_xGitLabCustomerRelationsOrganizationUpdatePayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * Errors encountered during execution of the mutation.
   */
  errors: Array<string>;

  /**
   * Organization after the mutation.
   */
  organization: IXGitLabCustomerRelationsOrganization;
}

/**
 * Autogenerated input type of DastOnDemandScanCreate
 */
export interface IXGitLabDastOnDemandScanCreateInput {
  /**
   * Project the site profile belongs to.
   */
  fullPath: string;

  /**
   * ID of the site profile to be used for the scan.
   */
  dastSiteProfileId: any;

  /**
   * ID of the scanner profile to be used for the scan.
   */
  dastScannerProfileId?: any | null;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of DastOnDemandScanCreate
 */
export interface IXGitLabDastOnDemandScanCreatePayload {
  __typename: '_xGitLabDastOnDemandScanCreatePayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * Errors encountered during execution of the mutation.
   */
  errors: Array<string>;

  /**
   * URL of the pipeline that was created.
   */
  pipelineUrl: string | null;
}

/**
 * Represents a DAST Profile
 */
export interface IXGitLabDastProfile {
  __typename: '_xGitLabDastProfile';

  /**
   * Associated branch.
   */
  branch: IXGitLabDastProfileBranch | null;

  /**
   * Associated profile schedule.
   */
  dastProfileSchedule: IXGitLabDastProfileSchedule | null;

  /**
   * Associated scanner profile.
   */
  dastScannerProfile: IXGitLabDastScannerProfile | null;

  /**
   * Associated site profile.
   */
  dastSiteProfile: IXGitLabDastSiteProfile | null;

  /**
   * Description of the scan.
   */
  description: string | null;

  /**
   * Relative web path to the edit page of a profile.
   */
  editPath: string | null;

  /**
   * ID of the profile.
   */
  id: any;

  /**
   * Name of the profile.
   */
  name: string | null;
}

/**
 * Represents a DAST Profile Branch
 */
export interface IXGitLabDastProfileBranch {
  __typename: '_xGitLabDastProfileBranch';

  /**
   * Indicates whether or not the branch exists.
   */
  exists: boolean | null;

  /**
   * Name of the branch.
   */
  name: string | null;
}

/**
 * Represents DAST Profile Cadence.
 */
export interface IXGitLabDastProfileCadence {
  __typename: '_xGitLabDastProfileCadence';

  /**
   * Duration of the DAST profile cadence.
   */
  duration: number | null;

  /**
   * Unit for the duration of DAST profile cadence.
   */
  unit: XGitLabDastProfileCadenceUnit | null;
}

/**
 * Represents DAST Profile Cadence.
 */
export interface IXGitLabDastProfileCadenceInput {
  /**
   * Unit for the duration of DAST Profile Cadence.
   */
  unit?: XGitLabDastProfileCadenceUnit | null;

  /**
   * Duration of the DAST Profile Cadence.
   */
  duration?: number | null;
}

/**
 * Unit for the duration of Dast Profile Cadence.
 */
export const enum XGitLabDastProfileCadenceUnit {
  /**
   * DAST Profile Cadence duration in days.
   */
  DAY = 'DAY',

  /**
   * DAST Profile Cadence duration in weeks.
   */
  WEEK = 'WEEK',

  /**
   * DAST Profile Cadence duration in months.
   */
  MONTH = 'MONTH',

  /**
   * DAST Profile Cadence duration in years.
   */
  YEAR = 'YEAR',
}

/**
 * The connection type for DastProfile.
 */
export interface IXGitLabDastProfileConnection {
  __typename: '_xGitLabDastProfileConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitLabDastProfileEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitLabDastProfile | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitLabPageInfo;
}

/**
 * Autogenerated input type of DastProfileCreate
 */
export interface IXGitLabDastProfileCreateInput {
  /**
   * Project the profile belongs to.
   */
  fullPath: string;

  /**
   * Represents a DAST Profile Schedule.
   */
  dastProfileSchedule?: IXGitLabDastProfileScheduleInput | null;

  /**
   * Name of the profile.
   */
  name: string;

  /**
   * Description of the profile. Defaults to an empty string.
   * @default ""
   */
  description?: string | null;

  /**
   * Associated branch.
   */
  branchName?: string | null;

  /**
   * ID of the site profile to be associated.
   */
  dastSiteProfileId: any;

  /**
   * ID of the scanner profile to be associated.
   */
  dastScannerProfileId: any;

  /**
   * Run scan using profile after creation. Defaults to false.
   * @default false
   */
  runAfterCreate?: boolean | null;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of DastProfileCreate
 */
export interface IXGitLabDastProfileCreatePayload {
  __typename: '_xGitLabDastProfileCreatePayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * Created profile.
   */
  dastProfile: IXGitLabDastProfile | null;

  /**
   * Errors encountered during execution of the mutation.
   */
  errors: Array<string>;

  /**
   * URL of the pipeline that was created. Requires `runAfterCreate` to be set to `true`.
   */
  pipelineUrl: string | null;
}

/**
 * Autogenerated input type of DastProfileDelete
 */
export interface IXGitLabDastProfileDeleteInput {
  /**
   * ID of the profile to be deleted.
   */
  id: any;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of DastProfileDelete
 */
export interface IXGitLabDastProfileDeletePayload {
  __typename: '_xGitLabDastProfileDeletePayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * Errors encountered during execution of the mutation.
   */
  errors: Array<string>;
}

/**
 * An edge in a connection.
 */
export interface IXGitLabDastProfileEdge {
  __typename: '_xGitLabDastProfileEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitLabDastProfile | null;
}

/**
 * Autogenerated input type of DastProfileRun
 */
export interface IXGitLabDastProfileRunInput {
  /**
   * ID of the profile to be used for the scan.
   */
  id: any;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of DastProfileRun
 */
export interface IXGitLabDastProfileRunPayload {
  __typename: '_xGitLabDastProfileRunPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * Errors encountered during execution of the mutation.
   */
  errors: Array<string>;

  /**
   * URL of the pipeline that was created.
   */
  pipelineUrl: string | null;
}

/**
 * Represents a DAST profile schedule.
 */
export interface IXGitLabDastProfileSchedule {
  __typename: '_xGitLabDastProfileSchedule';

  /**
   * Status of the DAST profile schedule.
   */
  active: boolean | null;

  /**
   * Cadence of the DAST profile schedule.
   */
  cadence: IXGitLabDastProfileCadence | null;

  /**
   * ID of the DAST profile schedule.
   */
  id: any;

  /**
   * Next run time of the DAST profile schedule in the given timezone.
   */
  nextRunAt: any | null;

  /**
   * Start time of the DAST profile schedule in the given timezone.
   */
  startsAt: any | null;

  /**
   * Time zone of the start time of the DAST profile schedule.
   */
  timezone: string | null;
}

/**
 * Input type for DAST Profile Schedules
 */
export interface IXGitLabDastProfileScheduleInput {
  /**
   * Status of a Dast Profile Schedule.
   */
  active?: boolean | null;

  /**
   * Start time of a Dast Profile Schedule.
   */
  startsAt?: any | null;

  /**
   * Time Zone for the Start time of a Dast Profile Schedule.
   */
  timezone?: string | null;

  /**
   * Cadence of a Dast Profile Schedule.
   */
  cadence?: IXGitLabDastProfileCadenceInput | null;
}

/**
 * Autogenerated input type of DastProfileUpdate
 */
export interface IXGitLabDastProfileUpdateInput {
  /**
   * ID of the profile to be deleted.
   */
  id: any;

  /**
   * Represents a DAST profile schedule.
   */
  dastProfileSchedule?: IXGitLabDastProfileScheduleInput | null;

  /**
   * Name of the profile.
   */
  name?: string | null;

  /**
   * Description of the profile. Defaults to an empty string.
   * @default ""
   */
  description?: string | null;

  /**
   * Associated branch.
   */
  branchName?: string | null;

  /**
   * ID of the site profile to be associated.
   */
  dastSiteProfileId?: any | null;

  /**
   * ID of the scanner profile to be associated.
   */
  dastScannerProfileId?: any | null;

  /**
   * Run scan using profile after update. Defaults to false.
   * @default false
   */
  runAfterUpdate?: boolean | null;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of DastProfileUpdate
 */
export interface IXGitLabDastProfileUpdatePayload {
  __typename: '_xGitLabDastProfileUpdatePayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * Updated profile.
   */
  dastProfile: IXGitLabDastProfile | null;

  /**
   * Errors encountered during execution of the mutation.
   */
  errors: Array<string>;

  /**
   * The URL of the pipeline that was created. Requires the input argument
   * `runAfterUpdate` to be set to `true` when calling the mutation, otherwise no
   * pipeline will be created.
   */
  pipelineUrl: string | null;
}

/**
 * Represents a DAST scanner profile
 */
export interface IXGitLabDastScannerProfile {
  __typename: '_xGitLabDastScannerProfile';

  /**
   * Relative web path to the edit page of a scanner profile.
   */
  editPath: string | null;

  /**
   * ID of the DAST scanner profile.
   */
  id: any;

  /**
   * Name of the DAST scanner profile.
   */
  profileName: string | null;

  /**
   * List of security policy names that are referencing given project.
   */
  referencedInSecurityPolicies: Array<string> | null;

  /**
   * Indicates the type of DAST scan that will run. Either a Passive Scan or an Active Scan.
   */
  scanType: XGitLabDastScanTypeEnum | null;

  /**
   * Indicates if debug messages should be included in DAST console output. True to include the debug messages.
   */
  showDebugMessages: boolean;

  /**
   * Maximum number of minutes allowed for the spider to traverse the site.
   */
  spiderTimeout: number | null;

  /**
   * Maximum number of seconds allowed for the site under test to respond to a request.
   */
  targetTimeout: number | null;

  /**
   * Indicates if the AJAX spider should be used to crawl the target site. True to
   * run the AJAX spider in addition to the traditional spider, and false to run
   * only the traditional spider.
   */
  useAjaxSpider: boolean;
}

/**
 * The connection type for DastScannerProfile.
 */
export interface IXGitLabDastScannerProfileConnection {
  __typename: '_xGitLabDastScannerProfileConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitLabDastScannerProfileEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitLabDastScannerProfile | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitLabPageInfo;
}

/**
 * Autogenerated input type of DastScannerProfileCreate
 */
export interface IXGitLabDastScannerProfileCreateInput {
  /**
   * Project the scanner profile belongs to.
   */
  fullPath: string;

  /**
   * Name of the scanner profile.
   */
  profileName: string;

  /**
   * Maximum number of minutes allowed for the spider to traverse the site.
   */
  spiderTimeout?: number | null;

  /**
   * Maximum number of seconds allowed for the site under test to respond to a request.
   */
  targetTimeout?: number | null;

  /**
   * Indicates the type of DAST scan that will run. Either a Passive Scan or an Active Scan.
   * @default "PASSIVE"
   */
  scanType?: XGitLabDastScanTypeEnum | null;

  /**
   * Indicates if the AJAX spider should be used to crawl the target site. True to
   * run the AJAX spider in addition to the traditional spider, and false to run
   * only the traditional spider.
   * @default false
   */
  useAjaxSpider?: boolean | null;

  /**
   * Indicates if debug messages should be included in DAST console output. True to include the debug messages.
   * @default false
   */
  showDebugMessages?: boolean | null;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of DastScannerProfileCreate
 */
export interface IXGitLabDastScannerProfileCreatePayload {
  __typename: '_xGitLabDastScannerProfileCreatePayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * Errors encountered during execution of the mutation.
   */
  errors: Array<string>;

  /**
   * ID of the scanner profile.
   */
  id: any | null;
}

/**
 * Autogenerated input type of DastScannerProfileDelete
 */
export interface IXGitLabDastScannerProfileDeleteInput {
  /**
   * ID of the scanner profile to be deleted.
   */
  id: any;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of DastScannerProfileDelete
 */
export interface IXGitLabDastScannerProfileDeletePayload {
  __typename: '_xGitLabDastScannerProfileDeletePayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * Errors encountered during execution of the mutation.
   */
  errors: Array<string>;
}

/**
 * An edge in a connection.
 */
export interface IXGitLabDastScannerProfileEdge {
  __typename: '_xGitLabDastScannerProfileEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitLabDastScannerProfile | null;
}

/**
 * Autogenerated input type of DastScannerProfileUpdate
 */
export interface IXGitLabDastScannerProfileUpdateInput {
  /**
   * ID of the scanner profile to be updated.
   */
  id: any;

  /**
   * Name of the scanner profile.
   */
  profileName: string;

  /**
   * Maximum number of minutes allowed for the spider to traverse the site.
   */
  spiderTimeout: number;

  /**
   * Maximum number of seconds allowed for the site under test to respond to a request.
   */
  targetTimeout: number;

  /**
   * Indicates the type of DAST scan that will run. Either a Passive Scan or an Active Scan.
   */
  scanType?: XGitLabDastScanTypeEnum | null;

  /**
   * Indicates if the AJAX spider should be used to crawl the target site. True to
   * run the AJAX spider in addition to the traditional spider, and false to run
   * only the traditional spider.
   */
  useAjaxSpider?: boolean | null;

  /**
   * Indicates if debug messages should be included in DAST console output. True to include the debug messages.
   */
  showDebugMessages?: boolean | null;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of DastScannerProfileUpdate
 */
export interface IXGitLabDastScannerProfileUpdatePayload {
  __typename: '_xGitLabDastScannerProfileUpdatePayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * Errors encountered during execution of the mutation.
   */
  errors: Array<string>;

  /**
   * ID of the scanner profile.
   */
  id: any | null;
}

export const enum XGitLabDastScanTypeEnum {
  /**
   * Passive DAST scan. This scan will not make active attacks against the target site.
   */
  PASSIVE = 'PASSIVE',

  /**
   * Active DAST scan. This scan will make active attacks against the target site.
   */
  ACTIVE = 'ACTIVE',
}

/**
 * Represents a DAST Site Profile
 */
export interface IXGitLabDastSiteProfile {
  __typename: '_xGitLabDastSiteProfile';

  /**
   * Target authentication details.
   */
  auth: IXGitLabDastSiteProfileAuth | null;

  /**
   * Relative web path to the edit page of a site profile.
   */
  editPath: string | null;

  /**
   * URLs to skip during an authenticated scan.
   */
  excludedUrls: Array<string> | null;

  /**
   * ID of the site profile.
   */
  id: any;

  /**
   * Normalized URL of the target to be scanned.
   */
  normalizedTargetUrl: string | null;

  /**
   * Name of the site profile.
   */
  profileName: string | null;

  /**
   * List of security policy names that are referencing given project.
   */
  referencedInSecurityPolicies: Array<string> | null;

  /**
   * Comma-separated list of request header names and values to be added to every request made by DAST.
   */
  requestHeaders: string | null;

  /**
   * Type of target to be scanned.
   */
  targetType: XGitLabDastTargetTypeEnum | null;

  /**
   * URL of the target to be scanned.
   */
  targetUrl: string | null;

  /**
   * Permissions for the current user on the resource
   */
  userPermissions: IXGitLabDastSiteProfilePermissions;

  /**
   * Current validation status of the site profile.
   */
  validationStatus: XGitLabDastSiteProfileValidationStatusEnum | null;
}

/**
 * Input type for DastSiteProfile authentication
 */
export interface IXGitLabDastSiteProfileAuth {
  __typename: '_xGitLabDastSiteProfileAuth';

  /**
   * Indicates whether authentication is enabled.
   */
  enabled: boolean | null;

  /**
   * Redacted password to authenticate with on the target website.
   */
  password: string | null;

  /**
   * Name of password field at the sign-in HTML form.
   */
  passwordField: string | null;

  /**
   * The URL of the page containing the sign-in HTML form on the target website.
   */
  url: string | null;

  /**
   * Username to authenticate with on the target website.
   */
  username: string | null;

  /**
   * Name of username field at the sign-in HTML form.
   */
  usernameField: string | null;
}

/**
 * Input type for DastSiteProfile authentication
 */
export interface IXGitLabDastSiteProfileAuthInput {
  /**
   * Indicates whether authentication is enabled.
   */
  enabled?: boolean | null;

  /**
   * The URL of the page containing the sign-in HTML form on the target website.
   */
  url?: string | null;

  /**
   * Name of username field at the sign-in HTML form.
   */
  usernameField?: string | null;

  /**
   * Name of password field at the sign-in HTML form.
   */
  passwordField?: string | null;

  /**
   * Username to authenticate with on the target website.
   */
  username?: string | null;

  /**
   * Password to authenticate with on the target website.
   */
  password?: string | null;
}

/**
 * The connection type for DastSiteProfile.
 */
export interface IXGitLabDastSiteProfileConnection {
  __typename: '_xGitLabDastSiteProfileConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitLabDastSiteProfileEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitLabDastSiteProfile | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitLabPageInfo;
}

/**
 * Autogenerated input type of DastSiteProfileCreate
 */
export interface IXGitLabDastSiteProfileCreateInput {
  /**
   * Name of the site profile.
   */
  profileName: string;

  /**
   * URL of the target to be scanned.
   */
  targetUrl?: string | null;

  /**
   * Type of target to be scanned.
   */
  targetType?: XGitLabDastTargetTypeEnum | null;

  /**
   * Comma-separated list of request header names and values to be added to every request made by DAST.
   */
  requestHeaders?: string | null;

  /**
   * Parameters for authentication.
   */
  auth?: IXGitLabDastSiteProfileAuthInput | null;

  /**
   * Project the site profile belongs to.
   */
  fullPath: string;

  /**
   * URLs to skip during an authenticated scan. Defaults to `[]`.
   * @default []
   */
  excludedUrls?: Array<string> | null;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of DastSiteProfileCreate
 */
export interface IXGitLabDastSiteProfileCreatePayload {
  __typename: '_xGitLabDastSiteProfileCreatePayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * Errors encountered during execution of the mutation.
   */
  errors: Array<string>;

  /**
   * ID of the site profile.
   */
  id: any | null;
}

/**
 * Autogenerated input type of DastSiteProfileDelete
 */
export interface IXGitLabDastSiteProfileDeleteInput {
  /**
   * ID of the site profile to be deleted.
   */
  id: any;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of DastSiteProfileDelete
 */
export interface IXGitLabDastSiteProfileDeletePayload {
  __typename: '_xGitLabDastSiteProfileDeletePayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * Errors encountered during execution of the mutation.
   */
  errors: Array<string>;
}

/**
 * An edge in a connection.
 */
export interface IXGitLabDastSiteProfileEdge {
  __typename: '_xGitLabDastSiteProfileEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitLabDastSiteProfile | null;
}

/**
 * Check permissions for the current user on site profile
 */
export interface IXGitLabDastSiteProfilePermissions {
  __typename: '_xGitLabDastSiteProfilePermissions';

  /**
   * Indicates the user can perform `create_on_demand_dast_scan` on this resource
   */
  createOnDemandDastScan: boolean;
}

/**
 * Autogenerated input type of DastSiteProfileUpdate
 */
export interface IXGitLabDastSiteProfileUpdateInput {
  /**
   * Name of the site profile.
   */
  profileName: string;

  /**
   * URL of the target to be scanned.
   */
  targetUrl?: string | null;

  /**
   * Type of target to be scanned.
   */
  targetType?: XGitLabDastTargetTypeEnum | null;

  /**
   * Comma-separated list of request header names and values to be added to every request made by DAST.
   */
  requestHeaders?: string | null;

  /**
   * Parameters for authentication.
   */
  auth?: IXGitLabDastSiteProfileAuthInput | null;

  /**
   * ID of the site profile to be updated.
   */
  id: any;

  /**
   * URLs to skip during an authenticated scan.
   */
  excludedUrls?: Array<string> | null;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of DastSiteProfileUpdate
 */
export interface IXGitLabDastSiteProfileUpdatePayload {
  __typename: '_xGitLabDastSiteProfileUpdatePayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * Errors encountered during execution of the mutation.
   */
  errors: Array<string>;

  /**
   * ID of the site profile.
   */
  id: any | null;
}

export const enum XGitLabDastSiteProfileValidationStatusEnum {
  /**
   * No site validation exists.
   */
  NONE = 'NONE',

  /**
   * Site validation process has not started.
   */
  PENDING_VALIDATION = 'PENDING_VALIDATION',

  /**
   * Site validation process is in progress.
   */
  INPROGRESS_VALIDATION = 'INPROGRESS_VALIDATION',

  /**
   * Site validation process finished successfully.
   */
  PASSED_VALIDATION = 'PASSED_VALIDATION',

  /**
   * Site validation process finished but failed.
   */
  FAILED_VALIDATION = 'FAILED_VALIDATION',
}

/**
 * Autogenerated input type of DastSiteTokenCreate
 */
export interface IXGitLabDastSiteTokenCreateInput {
  /**
   * Project the site token belongs to.
   */
  fullPath: string;

  /**
   * URL of the target to be validated.
   */
  targetUrl?: string | null;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of DastSiteTokenCreate
 */
export interface IXGitLabDastSiteTokenCreatePayload {
  __typename: '_xGitLabDastSiteTokenCreatePayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * Errors encountered during execution of the mutation.
   */
  errors: Array<string>;

  /**
   * ID of the site token.
   */
  id: any | null;

  /**
   * Current validation status of the target.
   */
  status: XGitLabDastSiteProfileValidationStatusEnum | null;

  /**
   * Token string.
   */
  token: string | null;
}

/**
 * Represents a DAST Site Validation
 */
export interface IXGitLabDastSiteValidation {
  __typename: '_xGitLabDastSiteValidation';

  /**
   * Global ID of the site validation.
   */
  id: any;

  /**
   * Normalized URL of the target to be validated.
   */
  normalizedTargetUrl: string | null;

  /**
   * Status of the site validation.
   */
  status: XGitLabDastSiteProfileValidationStatusEnum;
}

/**
 * The connection type for DastSiteValidation.
 */
export interface IXGitLabDastSiteValidationConnection {
  __typename: '_xGitLabDastSiteValidationConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitLabDastSiteValidationEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitLabDastSiteValidation | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitLabPageInfo;
}

/**
 * Autogenerated input type of DastSiteValidationCreate
 */
export interface IXGitLabDastSiteValidationCreateInput {
  /**
   * Project the site profile belongs to.
   */
  fullPath: string;

  /**
   * ID of the site token.
   */
  dastSiteTokenId: any;

  /**
   * Path to be requested during validation.
   */
  validationPath: string;

  /**
   * Validation strategy to be used.
   */
  strategy?: XGitLabDastSiteValidationStrategyEnum | null;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of DastSiteValidationCreate
 */
export interface IXGitLabDastSiteValidationCreatePayload {
  __typename: '_xGitLabDastSiteValidationCreatePayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * Errors encountered during execution of the mutation.
   */
  errors: Array<string>;

  /**
   * ID of the site validation.
   */
  id: any | null;

  /**
   * Current validation status.
   */
  status: XGitLabDastSiteProfileValidationStatusEnum | null;
}

/**
 * An edge in a connection.
 */
export interface IXGitLabDastSiteValidationEdge {
  __typename: '_xGitLabDastSiteValidationEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitLabDastSiteValidation | null;
}

/**
 * Autogenerated input type of DastSiteValidationRevoke
 */
export interface IXGitLabDastSiteValidationRevokeInput {
  /**
   * Project the site validation belongs to.
   */
  fullPath: string;

  /**
   * Normalized URL of the target to be revoked.
   */
  normalizedTargetUrl: string;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of DastSiteValidationRevoke
 */
export interface IXGitLabDastSiteValidationRevokePayload {
  __typename: '_xGitLabDastSiteValidationRevokePayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * Errors encountered during execution of the mutation.
   */
  errors: Array<string>;
}

export const enum XGitLabDastSiteValidationStatusEnum {
  /**
   * Site validation process has not started.
   */
  PENDING_VALIDATION = 'PENDING_VALIDATION',

  /**
   * Site validation process is in progress.
   */
  INPROGRESS_VALIDATION = 'INPROGRESS_VALIDATION',

  /**
   * Site validation process finished successfully.
   */
  PASSED_VALIDATION = 'PASSED_VALIDATION',

  /**
   * Site validation process finished but failed.
   */
  FAILED_VALIDATION = 'FAILED_VALIDATION',
}

export const enum XGitLabDastSiteValidationStrategyEnum {
  /**
   * Text file validation.
   */
  TEXT_FILE = 'TEXT_FILE',

  /**
   * Header validation.
   */
  HEADER = 'HEADER',

  /**
   * Meta tag validation.
   */
  META_TAG = 'META_TAG',
}

export const enum XGitLabDastTargetTypeEnum {
  /**
   * Website target.
   */
  WEBSITE = 'WEBSITE',

  /**
   * API target.
   */
  API = 'API',
}

/**
 * Color of the data visualization palette
 */
export const enum XGitLabDataVisualizationColorEnum {
  /**
   * Blue color
   */
  BLUE = 'BLUE',

  /**
   * Orange color
   */
  ORANGE = 'ORANGE',

  /**
   * Aqua color
   */
  AQUA = 'AQUA',

  /**
   * Green color
   */
  GREEN = 'GREEN',

  /**
   * Magenta color
   */
  MAGENTA = 'MAGENTA',
}

/**
 * Weight of the data visualization palette
 */
export const enum XGitLabDataVisualizationWeightEnum {
  /**
   * 50 weight
   */
  WEIGHT_50 = 'WEIGHT_50',

  /**
   * 100 weight
   */
  WEIGHT_100 = 'WEIGHT_100',

  /**
   * 200 weight
   */
  WEIGHT_200 = 'WEIGHT_200',

  /**
   * 300 weight
   */
  WEIGHT_300 = 'WEIGHT_300',

  /**
   * 400 weight
   */
  WEIGHT_400 = 'WEIGHT_400',

  /**
   * 500 weight
   */
  WEIGHT_500 = 'WEIGHT_500',

  /**
   * 600 weight
   */
  WEIGHT_600 = 'WEIGHT_600',

  /**
   * 700 weight
   */
  WEIGHT_700 = 'WEIGHT_700',

  /**
   * 800 weight
   */
  WEIGHT_800 = 'WEIGHT_800',

  /**
   * 900 weight
   */
  WEIGHT_900 = 'WEIGHT_900',

  /**
   * 950 weight
   */
  WEIGHT_950 = 'WEIGHT_950',
}

/**
 * Autogenerated input type of DeleteAnnotation
 */
export interface IXGitLabDeleteAnnotationInput {
  /**
   * Global ID of the annotation to delete.
   */
  id: any;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of DeleteAnnotation
 */
export interface IXGitLabDeleteAnnotationPayload {
  __typename: '_xGitLabDeleteAnnotationPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * Errors encountered during execution of the mutation.
   */
  errors: Array<string>;
}

/**
 * The response from the AdminSidekiqQueuesDeleteJobs mutation
 */
export interface IXGitLabDeleteJobsResponse {
  __typename: '_xGitLabDeleteJobsResponse';

  /**
   * Whether or not the entire queue was processed in time; if not, retrying the same request is safe.
   */
  completed: boolean | null;

  /**
   * Number of matching jobs deleted.
   */
  deletedJobs: number | null;

  /**
   * Queue size after processing.
   */
  queueSize: number | null;
}

/**
 * Represents metadata associated with a dependency link
 */
export type _xGitLabDependencyLinkMetadata =
  IXGitLabNugetDependencyLinkMetadata;

/**
 * Dependency proxy blob
 */
export interface IXGitLabDependencyProxyBlob {
  __typename: '_xGitLabDependencyProxyBlob';

  /**
   * Date of creation.
   */
  createdAt: any;

  /**
   * Name of the blob.
   */
  fileName: string;

  /**
   * Size of the blob file.
   */
  size: string;

  /**
   * Date of most recent update.
   */
  updatedAt: any;
}

/**
 * The connection type for DependencyProxyBlob.
 */
export interface IXGitLabDependencyProxyBlobConnection {
  __typename: '_xGitLabDependencyProxyBlobConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitLabDependencyProxyBlobEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitLabDependencyProxyBlob | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitLabPageInfo;
}

/**
 * An edge in a connection.
 */
export interface IXGitLabDependencyProxyBlobEdge {
  __typename: '_xGitLabDependencyProxyBlobEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitLabDependencyProxyBlob | null;
}

/**
 * Group-level Dependency Proxy TTL policy settings
 */
export interface IXGitLabDependencyProxyImageTtlGroupPolicy {
  __typename: '_xGitLabDependencyProxyImageTtlGroupPolicy';

  /**
   * Timestamp of creation.
   */
  createdAt: any | null;

  /**
   * Indicates whether the policy is enabled or disabled.
   */
  enabled: boolean;

  /**
   * Number of days to retain a cached image file.
   */
  ttl: number | null;

  /**
   * Timestamp of the most recent update.
   */
  updatedAt: any | null;
}

/**
 * Dependency proxy manifest
 */
export interface IXGitLabDependencyProxyManifest {
  __typename: '_xGitLabDependencyProxyManifest';

  /**
   * Date of creation.
   */
  createdAt: any;

  /**
   * Digest of the manifest.
   */
  digest: string;

  /**
   * Name of the manifest.
   */
  fileName: string;

  /**
   * Name of the image.
   */
  imageName: string;

  /**
   * Size of the manifest file.
   */
  size: string;

  /**
   * Date of most recent update.
   */
  updatedAt: any;
}

/**
 * The connection type for DependencyProxyManifest.
 */
export interface IXGitLabDependencyProxyManifestConnection {
  __typename: '_xGitLabDependencyProxyManifestConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitLabDependencyProxyManifestEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitLabDependencyProxyManifest | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitLabPageInfo;
}

/**
 * An edge in a connection.
 */
export interface IXGitLabDependencyProxyManifestEdge {
  __typename: '_xGitLabDependencyProxyManifestEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitLabDependencyProxyManifest | null;
}

/**
 * Group-level Dependency Proxy settings
 */
export interface IXGitLabDependencyProxySetting {
  __typename: '_xGitLabDependencyProxySetting';

  /**
   * Indicates whether the dependency proxy is enabled for the group.
   */
  enabled: boolean;
}

/**
 * All environment deployment tiers.
 */
export const enum XGitLabDeploymentTier {
  /**
   * Production.
   */
  PRODUCTION = 'PRODUCTION',

  /**
   * Staging.
   */
  STAGING = 'STAGING',

  /**
   * Testing.
   */
  TESTING = 'TESTING',

  /**
   * Development.
   */
  DEVELOPMENT = 'DEVELOPMENT',

  /**
   * Other.
   */
  OTHER = 'OTHER',
}

/**
 * A single design
 */
export interface IXGitLabDesign {
  __typename: '_xGitLabDesign';

  /**
   * To-do items for the current user.
   */
  currentUserTodos: IXGitLabTodoConnection;

  /**
   * Diff refs for this design.
   */
  diffRefs: IXGitLabDiffRefs;

  /**
   * All discussions on this noteable.
   */
  discussions: IXGitLabDiscussionConnection;

  /**
   * How this design was changed in the current version.
   */
  event: XGitLabDesignVersionEvent;

  /**
   * Filename of the design.
   */
  filename: string;

  /**
   * Full path to the design file.
   */
  fullPath: string;

  /**
   * ID of this design.
   */
  id: string;

  /**
   * URL of the full-sized image.
   */
  image: string;

  /**
   * The URL of the design resized to fit within the bounds of 432x230. This will be `null` if the image has not been generated
   */
  imageV432x230: string | null;

  /**
   * Issue the design belongs to.
   */
  issue: IXGitLabIssue;

  /**
   * All notes on this noteable.
   */
  notes: IXGitLabNoteConnection;

  /**
   * Total count of user-created notes for this design.
   */
  notesCount: number;

  /**
   * Project the design belongs to.
   */
  project: IXGitLabProject;

  /**
   * All versions related to this design ordered newest first.
   */
  versions: IXGitLabDesignVersionConnection;
}

export interface ICurrentUserTodosOnXGitLabDesignArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * State of the to-do items.
   */
  state?: XGitLabTodoStateEnum | null;
}

export interface IDiscussionsOnXGitLabDesignArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface INotesOnXGitLabDesignArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IVersionsOnXGitLabDesignArguments {
  /**
   * SHA256 of the most recent acceptable version.
   */
  earlierOrEqualToSha?: string | null;

  /**
   * Global ID of the most recent acceptable version.
   */
  earlierOrEqualToId?: any | null;

  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

/**
 * A design pinned to a specific version. The image field reflects the design as of the associated version
 */
export interface IXGitLabDesignAtVersion {
  __typename: '_xGitLabDesignAtVersion';

  /**
   * Underlying design.
   */
  design: IXGitLabDesign;

  /**
   * Diff refs for this design.
   */
  diffRefs: IXGitLabDiffRefs;

  /**
   * How this design was changed in the current version.
   */
  event: XGitLabDesignVersionEvent;

  /**
   * Filename of the design.
   */
  filename: string;

  /**
   * Full path to the design file.
   */
  fullPath: string;

  /**
   * ID of this design.
   */
  id: string;

  /**
   * URL of the full-sized image.
   */
  image: string;

  /**
   * The URL of the design resized to fit within the bounds of 432x230. This will be `null` if the image has not been generated
   */
  imageV432x230: string | null;

  /**
   * Issue the design belongs to.
   */
  issue: IXGitLabIssue;

  /**
   * Total count of user-created notes for this design.
   */
  notesCount: number;

  /**
   * Project the design belongs to.
   */
  project: IXGitLabProject;

  /**
   * Version this design-at-versions is pinned to.
   */
  version: IXGitLabDesignVersion;
}

/**
 * The connection type for DesignAtVersion.
 */
export interface IXGitLabDesignAtVersionConnection {
  __typename: '_xGitLabDesignAtVersionConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitLabDesignAtVersionEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitLabDesignAtVersion | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitLabPageInfo;
}

/**
 * An edge in a connection.
 */
export interface IXGitLabDesignAtVersionEdge {
  __typename: '_xGitLabDesignAtVersionEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitLabDesignAtVersion | null;
}

/**
 * A collection of designs
 */
export interface IXGitLabDesignCollection {
  __typename: '_xGitLabDesignCollection';

  /**
   * Copy state of the design collection.
   */
  copyState: XGitLabDesignCollectionCopyState | null;

  /**
   * Find a specific design.
   */
  design: IXGitLabDesign | null;

  /**
   * Find a design as of a version.
   */
  designAtVersion: IXGitLabDesignAtVersion | null;

  /**
   * All designs for the design collection.
   */
  designs: IXGitLabDesignConnection;

  /**
   * Issue associated with the design collection.
   */
  issue: IXGitLabIssue;

  /**
   * Project associated with the design collection.
   */
  project: IXGitLabProject;

  /**
   * A specific version.
   */
  version: IXGitLabDesignVersion | null;

  /**
   * All versions related to all designs, ordered newest first.
   */
  versions: IXGitLabDesignVersionConnection;
}

export interface IDesignOnXGitLabDesignCollectionArguments {
  /**
   * Find a design by its ID.
   */
  id?: any | null;

  /**
   * Find a design by its filename.
   */
  filename?: string | null;
}

export interface IDesignAtVersionOnXGitLabDesignCollectionArguments {
  /**
   * Global ID of the design at this version.
   */
  id: any;
}

export interface IDesignsOnXGitLabDesignCollectionArguments {
  /**
   * Filters designs by their ID.
   */
  ids?: Array<any> | null;

  /**
   * Filters designs by their filename.
   */
  filenames?: Array<string> | null;

  /**
   * Filters designs to only those that existed at the version. If argument is
   * omitted or nil then all designs will reflect the latest version
   */
  atVersion?: any | null;

  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IVersionOnXGitLabDesignCollectionArguments {
  /**
   * SHA256 of a specific version.
   */
  sha?: string | null;

  /**
   * Global ID of the version.
   */
  id?: any | null;
}

export interface IVersionsOnXGitLabDesignCollectionArguments {
  /**
   * SHA256 of the most recent acceptable version.
   */
  earlierOrEqualToSha?: string | null;

  /**
   * Global ID of the most recent acceptable version.
   */
  earlierOrEqualToId?: any | null;

  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

/**
 * Copy state of a DesignCollection
 */
export const enum XGitLabDesignCollectionCopyState {
  /**
   * The DesignCollection has no copy in progress
   */
  READY = 'READY',

  /**
   * The DesignCollection is being copied
   */
  IN_PROGRESS = 'IN_PROGRESS',

  /**
   * The DesignCollection encountered an error during a copy
   */
  ERROR = 'ERROR',
}

/**
 * The connection type for Design.
 */
export interface IXGitLabDesignConnection {
  __typename: '_xGitLabDesignConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitLabDesignEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitLabDesign | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitLabPageInfo;
}

/**
 * An edge in a connection.
 */
export interface IXGitLabDesignEdge {
  __typename: '_xGitLabDesignEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitLabDesign | null;
}

export type _xGitLabDesignFields = IXGitLabDesign | IXGitLabDesignAtVersion;

export interface IXGitLabDesignFields {
  __typename: '_xGitLabDesignFields';

  /**
   * Diff refs for this design.
   */
  diffRefs: IXGitLabDiffRefs;

  /**
   * How this design was changed in the current version.
   */
  event: XGitLabDesignVersionEvent;

  /**
   * Filename of the design.
   */
  filename: string;

  /**
   * Full path to the design file.
   */
  fullPath: string;

  /**
   * ID of this design.
   */
  id: string;

  /**
   * URL of the full-sized image.
   */
  image: string;

  /**
   * The URL of the design resized to fit within the bounds of 432x230. This will be `null` if the image has not been generated
   */
  imageV432x230: string | null;

  /**
   * Issue the design belongs to.
   */
  issue: IXGitLabIssue;

  /**
   * Total count of user-created notes for this design.
   */
  notesCount: number;

  /**
   * Project the design belongs to.
   */
  project: IXGitLabProject;
}

export interface IXGitLabDesignManagement {
  __typename: '_xGitLabDesignManagement';

  /**
   * Find a design as of a version.
   */
  designAtVersion: IXGitLabDesignAtVersion | null;

  /**
   * Find a version.
   */
  version: IXGitLabDesignVersion | null;
}

export interface IDesignAtVersionOnXGitLabDesignManagementArguments {
  /**
   * Global ID of the design at this version.
   */
  id: any;
}

export interface IVersionOnXGitLabDesignManagementArguments {
  /**
   * Global ID of the version.
   */
  id: any;
}

/**
 * Autogenerated input type of DesignManagementDelete
 */
export interface IXGitLabDesignManagementDeleteInput {
  /**
   * Project where the issue is to upload designs for.
   */
  projectPath: string;

  /**
   * IID of the issue to modify designs for.
   */
  iid: string;

  /**
   * Filenames of the designs to delete.
   */
  filenames: Array<string>;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of DesignManagementDelete
 */
export interface IXGitLabDesignManagementDeletePayload {
  __typename: '_xGitLabDesignManagementDeletePayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * Errors encountered during execution of the mutation.
   */
  errors: Array<string>;

  /**
   * New version in which the designs are deleted.
   */
  version: IXGitLabDesignVersion | null;
}

/**
 * Autogenerated input type of DesignManagementMove
 */
export interface IXGitLabDesignManagementMoveInput {
  /**
   * ID of the design to move.
   */
  id: any;

  /**
   * ID of the immediately preceding design.
   */
  previous?: any | null;

  /**
   * ID of the immediately following design.
   */
  next?: any | null;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of DesignManagementMove
 */
export interface IXGitLabDesignManagementMovePayload {
  __typename: '_xGitLabDesignManagementMovePayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * Current state of the collection.
   */
  designCollection: IXGitLabDesignCollection | null;

  /**
   * Errors encountered during execution of the mutation.
   */
  errors: Array<string>;
}

/**
 * Autogenerated input type of DesignManagementUpload
 */
export interface IXGitLabDesignManagementUploadInput {
  /**
   * Project where the issue is to upload designs for.
   */
  projectPath: string;

  /**
   * IID of the issue to modify designs for.
   */
  iid: string;

  /**
   * Files to upload.
   */
  files: Array<any>;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of DesignManagementUpload
 */
export interface IXGitLabDesignManagementUploadPayload {
  __typename: '_xGitLabDesignManagementUploadPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * Designs that were uploaded by the mutation.
   */
  designs: Array<IXGitLabDesign>;

  /**
   * Errors encountered during execution of the mutation.
   */
  errors: Array<string>;

  /**
   * Any designs that were skipped from the upload due to there being no change to their content since their last version
   */
  skippedDesigns: Array<IXGitLabDesign>;
}

/**
 * A specific version in which designs were added, modified or deleted
 */
export interface IXGitLabDesignVersion {
  __typename: '_xGitLabDesignVersion';

  /**
   * Author of the version.
   */
  author: IXGitLabUserCore;

  /**
   * Timestamp of when the version was created.
   */
  createdAt: any;

  /**
   * A particular design as of this version, provided it is visible at this version.
   */
  designAtVersion: IXGitLabDesignAtVersion;

  /**
   * All designs that were changed in the version.
   */
  designs: IXGitLabDesignConnection;

  /**
   * All designs that are visible at this version, as of this version.
   */
  designsAtVersion: IXGitLabDesignAtVersionConnection;

  /**
   * ID of the design version.
   */
  id: string;

  /**
   * SHA of the design version.
   */
  sha: string;
}

export interface IDesignAtVersionOnXGitLabDesignVersionArguments {
  /**
   * ID of the DesignAtVersion.
   */
  id?: any | null;

  /**
   * ID of a specific design.
   */
  designId?: any | null;

  /**
   * Filename of a specific design.
   */
  filename?: string | null;
}

export interface IDesignsOnXGitLabDesignVersionArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IDesignsAtVersionOnXGitLabDesignVersionArguments {
  /**
   * Filters designs by their ID.
   */
  ids?: Array<any> | null;

  /**
   * Filters designs by their filename.
   */
  filenames?: Array<string> | null;

  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

/**
 * The connection type for DesignVersion.
 */
export interface IXGitLabDesignVersionConnection {
  __typename: '_xGitLabDesignVersionConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitLabDesignVersionEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitLabDesignVersion | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitLabPageInfo;
}

/**
 * An edge in a connection.
 */
export interface IXGitLabDesignVersionEdge {
  __typename: '_xGitLabDesignVersionEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitLabDesignVersion | null;
}

/**
 * Mutation event of a design within a version
 */
export const enum XGitLabDesignVersionEvent {
  /**
   * No change.
   */
  NONE = 'NONE',

  /**
   * A creation event
   */
  CREATION = 'CREATION',

  /**
   * A modification event
   */
  MODIFICATION = 'MODIFICATION',

  /**
   * A deletion event
   */
  DELETION = 'DELETION',
}

/**
 * Autogenerated input type of DestroyBoard
 */
export interface IXGitLabDestroyBoardInput {
  /**
   * Global ID of the board to destroy.
   */
  id: any;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated input type of DestroyBoardList
 */
export interface IXGitLabDestroyBoardListInput {
  /**
   * Global ID of the list to destroy. Only label lists are accepted.
   */
  listId: any;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of DestroyBoardList
 */
export interface IXGitLabDestroyBoardListPayload {
  __typename: '_xGitLabDestroyBoardListPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * Errors encountered during execution of the mutation.
   */
  errors: Array<string>;

  /**
   * List after mutation.
   */
  list: IXGitLabBoardList | null;
}

/**
 * Autogenerated return type of DestroyBoard
 */
export interface IXGitLabDestroyBoardPayload {
  __typename: '_xGitLabDestroyBoardPayload';

  /**
   * Board after mutation.
   */
  board: IXGitLabBoard | null;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * Errors encountered during execution of the mutation.
   */
  errors: Array<string>;
}

/**
 * Autogenerated input type of DestroyComplianceFramework
 */
export interface IXGitLabDestroyComplianceFrameworkInput {
  /**
   * Global ID of the compliance framework to destroy.
   */
  id: any;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of DestroyComplianceFramework
 */
export interface IXGitLabDestroyComplianceFrameworkPayload {
  __typename: '_xGitLabDestroyComplianceFrameworkPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * Errors encountered during execution of the mutation.
   */
  errors: Array<string>;
}

/**
 * Autogenerated input type of DestroyContainerRepository
 */
export interface IXGitLabDestroyContainerRepositoryInput {
  /**
   * ID of the container repository.
   */
  id: any;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of DestroyContainerRepository
 */
export interface IXGitLabDestroyContainerRepositoryPayload {
  __typename: '_xGitLabDestroyContainerRepositoryPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * Container repository policy after scheduling the deletion.
   */
  containerRepository: IXGitLabContainerRepository;

  /**
   * Errors encountered during execution of the mutation.
   */
  errors: Array<string>;
}

/**
 * Autogenerated input type of DestroyContainerRepositoryTags
 */
export interface IXGitLabDestroyContainerRepositoryTagsInput {
  /**
   * ID of the container repository.
   */
  id: any;

  /**
   * Container repository tag(s) to delete. Total number can't be greater than 20
   */
  tagNames: Array<string>;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of DestroyContainerRepositoryTags
 */
export interface IXGitLabDestroyContainerRepositoryTagsPayload {
  __typename: '_xGitLabDestroyContainerRepositoryTagsPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * Deleted container repository tags.
   */
  deletedTagNames: Array<string>;

  /**
   * Errors encountered during execution of the mutation.
   */
  errors: Array<string>;
}

/**
 * Autogenerated input type of DestroyCustomEmoji
 */
export interface IXGitLabDestroyCustomEmojiInput {
  /**
   * Global ID of the custom emoji to destroy.
   */
  id: any;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of DestroyCustomEmoji
 */
export interface IXGitLabDestroyCustomEmojiPayload {
  __typename: '_xGitLabDestroyCustomEmojiPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * Deleted custom emoji.
   */
  customEmoji: IXGitLabCustomEmoji | null;

  /**
   * Errors encountered during execution of the mutation.
   */
  errors: Array<string>;
}

/**
 * Autogenerated input type of DestroyEpicBoard
 */
export interface IXGitLabDestroyEpicBoardInput {
  /**
   * Global ID of the board to destroy.
   */
  id: any;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of DestroyEpicBoard
 */
export interface IXGitLabDestroyEpicBoardPayload {
  __typename: '_xGitLabDestroyEpicBoardPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * Epic board after mutation.
   */
  epicBoard: IXGitLabEpicBoard | null;

  /**
   * Errors encountered during execution of the mutation.
   */
  errors: Array<string>;
}

/**
 * Autogenerated input type of DestroyNote
 */
export interface IXGitLabDestroyNoteInput {
  /**
   * Global ID of the note to destroy.
   */
  id: any;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of DestroyNote
 */
export interface IXGitLabDestroyNotePayload {
  __typename: '_xGitLabDestroyNotePayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * Errors encountered during execution of the mutation.
   */
  errors: Array<string>;

  /**
   * Note after mutation.
   */
  note: IXGitLabNote | null;
}

/**
 * Autogenerated input type of DestroyPackageFile
 */
export interface IXGitLabDestroyPackageFileInput {
  /**
   * ID of the Package file.
   */
  id: any;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of DestroyPackageFile
 */
export interface IXGitLabDestroyPackageFilePayload {
  __typename: '_xGitLabDestroyPackageFilePayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * Errors encountered during execution of the mutation.
   */
  errors: Array<string>;
}

/**
 * Autogenerated input type of DestroyPackage
 */
export interface IXGitLabDestroyPackageInput {
  /**
   * ID of the Package.
   */
  id: any;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of DestroyPackage
 */
export interface IXGitLabDestroyPackagePayload {
  __typename: '_xGitLabDestroyPackagePayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * Errors encountered during execution of the mutation.
   */
  errors: Array<string>;
}

/**
 * Autogenerated input type of DestroySnippet
 */
export interface IXGitLabDestroySnippetInput {
  /**
   * Global ID of the snippet to destroy.
   */
  id: any;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of DestroySnippet
 */
export interface IXGitLabDestroySnippetPayload {
  __typename: '_xGitLabDestroySnippetPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * Errors encountered during execution of the mutation.
   */
  errors: Array<string>;

  /**
   * Snippet after mutation.
   */
  snippet: IXGitLabSnippet | null;
}

export interface IXGitLabDetailedStatus {
  __typename: '_xGitLabDetailedStatus';

  /**
   * Action information for the status. This includes method, button title, icon, path, and title.
   */
  action: IXGitLabStatusAction | null;

  /**
   * Path of the details for the status.
   */
  detailsPath: string | null;

  /**
   * Favicon of the status.
   */
  favicon: string | null;

  /**
   * Group of the status.
   */
  group: string | null;

  /**
   * Indicates if the status has further details.
   */
  hasDetails: boolean | null;

  /**
   * Icon of the status.
   */
  icon: string | null;

  /**
   * ID for a detailed status.
   */
  id: string;

  /**
   * Label of the status.
   */
  label: string | null;

  /**
   * Text of the status.
   */
  text: string | null;

  /**
   * Tooltip associated with the status.
   */
  tooltip: string | null;
}

/**
 * Enabled namespace for DevopsAdoption
 */
export interface IXGitLabDevopsAdoptionEnabledNamespace {
  __typename: '_xGitLabDevopsAdoptionEnabledNamespace';

  /**
   * Namespace where data should be displayed.
   */
  displayNamespace: IXGitLabNamespace | null;

  /**
   * ID of the enabled namespace.
   */
  id: string;

  /**
   * Metrics snapshot for previous month for the enabled namespace.
   */
  latestSnapshot: IXGitLabDevopsAdoptionSnapshot | null;

  /**
   * Namespace which should be calculated.
   */
  namespace: IXGitLabNamespace | null;

  /**
   * Data snapshots of the namespace.
   */
  snapshots: IXGitLabDevopsAdoptionSnapshotConnection | null;
}

export interface ISnapshotsOnXGitLabDevopsAdoptionEnabledNamespaceArguments {
  /**
   * Filter to snapshots with month end before the provided date.
   */
  endTimeBefore?: any | null;

  /**
   * Filter to snapshots with month end after the provided date.
   */
  endTimeAfter?: any | null;

  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

/**
 * The connection type for DevopsAdoptionEnabledNamespace.
 */
export interface IXGitLabDevopsAdoptionEnabledNamespaceConnection {
  __typename: '_xGitLabDevopsAdoptionEnabledNamespaceConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitLabDevopsAdoptionEnabledNamespaceEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitLabDevopsAdoptionEnabledNamespace | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitLabPageInfo;
}

/**
 * An edge in a connection.
 */
export interface IXGitLabDevopsAdoptionEnabledNamespaceEdge {
  __typename: '_xGitLabDevopsAdoptionEnabledNamespaceEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitLabDevopsAdoptionEnabledNamespace | null;
}

/**
 * Snapshot
 */
export interface IXGitLabDevopsAdoptionSnapshot {
  __typename: '_xGitLabDevopsAdoptionSnapshot';

  /**
   * Total number of projects with existing CODEOWNERS file.
   */
  codeOwnersUsedCount: number | null;

  /**
   * Total number of projects with enabled coverage fuzzing.
   */
  coverageFuzzingEnabledCount: number | null;

  /**
   * Total number of projects with enabled DAST.
   */
  dastEnabledCount: number | null;

  /**
   * Total number of projects with enabled dependency scanning.
   */
  dependencyScanningEnabledCount: number | null;

  /**
   * At least one deployment succeeded.
   */
  deploySucceeded: boolean;

  /**
   * End time for the snapshot where the data points were collected.
   */
  endTime: any;

  /**
   * At least one issue was opened.
   */
  issueOpened: boolean;

  /**
   * At least one merge request was approved.
   */
  mergeRequestApproved: boolean;

  /**
   * At least one merge request was opened.
   */
  mergeRequestOpened: boolean;

  /**
   * At least one pipeline succeeded.
   */
  pipelineSucceeded: boolean;

  /**
   * Time the snapshot was recorded.
   */
  recordedAt: any;

  /**
   * At least one runner was used.
   */
  runnerConfigured: boolean;

  /**
   * Total number of projects with enabled SAST.
   */
  sastEnabledCount: number | null;

  /**
   * At least one security scan succeeded. Deprecated in 14.1: Substituted with specific security metrics. Always false.
   * @deprecated "Substituted with specific security metrics. Always false. Deprecated in 14.1."
   */
  securityScanSucceeded: boolean;

  /**
   * Start time for the snapshot where the data points were collected.
   */
  startTime: any;

  /**
   * Total number of projects.
   */
  totalProjectsCount: number | null;

  /**
   * Total number of projects with vulnerability management used at least once.
   */
  vulnerabilityManagementUsedCount: number | null;
}

/**
 * The connection type for DevopsAdoptionSnapshot.
 */
export interface IXGitLabDevopsAdoptionSnapshotConnection {
  __typename: '_xGitLabDevopsAdoptionSnapshotConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitLabDevopsAdoptionSnapshotEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitLabDevopsAdoptionSnapshot | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitLabPageInfo;
}

/**
 * An edge in a connection.
 */
export interface IXGitLabDevopsAdoptionSnapshotEdge {
  __typename: '_xGitLabDevopsAdoptionSnapshotEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitLabDevopsAdoptionSnapshot | null;
}

export interface IXGitLabDiffImagePositionInput {
  /**
   * SHA of the HEAD at the time the comment was made.
   */
  headSha: string;

  /**
   * Merge base of the branch the comment was made on.
   */
  baseSha?: string | null;

  /**
   * SHA of the branch being compared against.
   */
  startSha: string;

  /**
   * The paths of the file that was changed. Both of the properties of this input
   * are optional, but at least one of them is required
   */
  paths: IXGitLabDiffPathsInput;

  /**
   * X position of the note.
   */
  x: number;

  /**
   * Y position of the note.
   */
  y: number;

  /**
   * Total width of the image.
   */
  width: number;

  /**
   * Total height of the image.
   */
  height: number;
}

export interface IXGitLabDiffPathsInput {
  /**
   * Path of the file on the start SHA.
   */
  oldPath?: string | null;

  /**
   * Path of the file on the HEAD SHA.
   */
  newPath?: string | null;
}

export interface IXGitLabDiffPosition {
  __typename: '_xGitLabDiffPosition';

  /**
   * Information about the branch, HEAD, and base at the time of commenting.
   */
  diffRefs: IXGitLabDiffRefs;

  /**
   * Path of the file that was changed.
   */
  filePath: string;

  /**
   * Total height of the image.
   */
  height: number | null;

  /**
   * Line on HEAD SHA that was changed.
   */
  newLine: number | null;

  /**
   * Path of the file on the HEAD SHA.
   */
  newPath: string | null;

  /**
   * Line on start SHA that was changed.
   */
  oldLine: number | null;

  /**
   * Path of the file on the start SHA.
   */
  oldPath: string | null;

  /**
   * Type of file the position refers to.
   */
  positionType: XGitLabDiffPositionType;

  /**
   * Total width of the image.
   */
  width: number | null;

  /**
   * X position of the note.
   */
  x: number | null;

  /**
   * Y position of the note.
   */
  y: number | null;
}

export interface IXGitLabDiffPositionInput {
  /**
   * SHA of the HEAD at the time the comment was made.
   */
  headSha: string;

  /**
   * Merge base of the branch the comment was made on.
   */
  baseSha?: string | null;

  /**
   * SHA of the branch being compared against.
   */
  startSha: string;

  /**
   * The paths of the file that was changed. Both of the properties of this input
   * are optional, but at least one of them is required
   */
  paths: IXGitLabDiffPathsInput;

  /**
   * Line on start SHA that was changed.
   */
  oldLine?: number | null;

  /**
   * Line on HEAD SHA that was changed.
   */
  newLine?: number | null;
}

/**
 * Type of file the position refers to
 */
export const enum XGitLabDiffPositionType {
  /**
   * Text file.
   */
  text = 'text',

  /**
   * An image.
   */
  image = 'image',
}

export interface IXGitLabDiffRefs {
  __typename: '_xGitLabDiffRefs';

  /**
   * Merge base of the branch the comment was made on.
   */
  baseSha: string | null;

  /**
   * SHA of the HEAD at the time the comment was made.
   */
  headSha: string;

  /**
   * SHA of the branch being compared against.
   */
  startSha: string;
}

/**
 * Changes to a single file
 */
export interface IXGitLabDiffStats {
  __typename: '_xGitLabDiffStats';

  /**
   * Number of lines added to this file.
   */
  additions: number;

  /**
   * Number of lines deleted from this file.
   */
  deletions: number;

  /**
   * File path, relative to repository root.
   */
  path: string;
}

/**
 * Aggregated summary of changes
 */
export interface IXGitLabDiffStatsSummary {
  __typename: '_xGitLabDiffStatsSummary';

  /**
   * Number of lines added.
   */
  additions: number;

  /**
   * Number of lines changed.
   */
  changes: number;

  /**
   * Number of lines deleted.
   */
  deletions: number;

  /**
   * Number of files changed.
   */
  fileCount: number;
}

/**
 * Autogenerated input type of DisableDevopsAdoptionNamespace
 */
export interface IXGitLabDisableDevopsAdoptionNamespaceInput {
  /**
   * One or many IDs of the enabled namespaces to disable.
   */
  id: Array<any>;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of DisableDevopsAdoptionNamespace
 */
export interface IXGitLabDisableDevopsAdoptionNamespacePayload {
  __typename: '_xGitLabDisableDevopsAdoptionNamespacePayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * Errors encountered during execution of the mutation.
   */
  errors: Array<string>;
}

export interface IXGitLabDiscussion {
  __typename: '_xGitLabDiscussion';

  /**
   * Timestamp of the discussion's creation.
   */
  createdAt: any;

  /**
   * ID of this discussion.
   */
  id: any;

  /**
   * Object which the discussion belongs to.
   */
  noteable: _xGitLabNoteableType | null;

  /**
   * All notes in the discussion.
   */
  notes: IXGitLabNoteConnection;

  /**
   * ID used to reply to this discussion.
   */
  replyId: any;

  /**
   * Indicates if the object can be resolved.
   */
  resolvable: boolean;

  /**
   * Indicates if the object is resolved.
   */
  resolved: boolean;

  /**
   * Timestamp of when the object was resolved.
   */
  resolvedAt: any | null;

  /**
   * User who resolved the object.
   */
  resolvedBy: IXGitLabUserCore | null;
}

export interface INotesOnXGitLabDiscussionArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

/**
 * The connection type for Discussion.
 */
export interface IXGitLabDiscussionConnection {
  __typename: '_xGitLabDiscussionConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitLabDiscussionEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitLabDiscussion | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitLabPageInfo;
}

/**
 * An edge in a connection.
 */
export interface IXGitLabDiscussionEdge {
  __typename: '_xGitLabDiscussionEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitLabDiscussion | null;
}

/**
 * Autogenerated input type of DiscussionToggleResolve
 */
export interface IXGitLabDiscussionToggleResolveInput {
  /**
   * Global ID of the discussion.
   */
  id: any;

  /**
   * Will resolve the discussion when true, and unresolve the discussion when false.
   */
  resolve: boolean;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of DiscussionToggleResolve
 */
export interface IXGitLabDiscussionToggleResolvePayload {
  __typename: '_xGitLabDiscussionToggleResolvePayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * Discussion after mutation.
   */
  discussion: IXGitLabDiscussion | null;

  /**
   * Errors encountered during execution of the mutation.
   */
  errors: Array<string>;
}

/**
 * All information related to DORA metrics.
 */
export interface IXGitLabDora {
  __typename: '_xGitLabDora';

  /**
   * DORA metrics for the current group or project.
   */
  metrics: Array<IXGitLabDoraMetric> | null;
}

export interface IMetricsOnXGitLabDoraArguments {
  /**
   * Type of metric to return.
   */
  metric: XGitLabDoraMetricType;

  /**
   * Date range to start from. Default is 3 months ago.
   */
  startDate?: any | null;

  /**
   * Date range to end at. Default is the current date.
   */
  endDate?: any | null;

  /**
   * How the metric should be aggregrated. Defaults to `DAILY`. In the case of
   * `ALL`, the `date` field in the response will be `null`.
   */
  interval?: XGitLabDoraMetricBucketingInterval | null;

  /**
   * Deployment tier of the environments to return. Defaults to `PRODUCTION`.
   */
  environmentTier?: XGitLabDeploymentTier | null;
}

export interface IXGitLabDoraMetric {
  __typename: '_xGitLabDoraMetric';

  /**
   * Date of the data point.
   */
  date: string | null;

  /**
   * Value of the data point.
   */
  value: number | null;
}

/**
 * All possible ways that DORA metrics can be aggregated.
 */
export const enum XGitLabDoraMetricBucketingInterval {
  /**
   * All data points are combined into a single value.
   */
  ALL = 'ALL',

  /**
   * Data points are combined into chunks by month.
   */
  MONTHLY = 'MONTHLY',

  /**
   * Data points are combined into chunks by day.
   */
  DAILY = 'DAILY',
}

/**
 * All supported DORA metric types.
 */
export const enum XGitLabDoraMetricType {
  /**
   * Deployment frequency.
   */
  DEPLOYMENT_FREQUENCY = 'DEPLOYMENT_FREQUENCY',

  /**
   * Lead time for changes.
   */
  LEAD_TIME_FOR_CHANGES = 'LEAD_TIME_FOR_CHANGES',
}

/**
 * Autogenerated input type of EchoCreate
 */
export interface IXGitLabEchoCreateInput {
  /**
   * Errors to return to the user.
   */
  errors?: Array<string> | null;

  /**
   * Messages to return to the user.
   */
  messages?: Array<string> | null;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of EchoCreate
 */
export interface IXGitLabEchoCreatePayload {
  __typename: '_xGitLabEchoCreatePayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * Messages returned to the user.
   */
  echoes: Array<string> | null;

  /**
   * Errors encountered during execution of the mutation.
   */
  errors: Array<string>;
}

/**
 * Autogenerated input type of EnableDevopsAdoptionNamespace
 */
export interface IXGitLabEnableDevopsAdoptionNamespaceInput {
  /**
   * Namespace ID.
   */
  namespaceId: any;

  /**
   * Display namespace ID.
   */
  displayNamespaceId?: any | null;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of EnableDevopsAdoptionNamespace
 */
export interface IXGitLabEnableDevopsAdoptionNamespacePayload {
  __typename: '_xGitLabEnableDevopsAdoptionNamespacePayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * Enabled namespace after mutation.
   */
  enabledNamespace: IXGitLabDevopsAdoptionEnabledNamespace | null;

  /**
   * Errors encountered during execution of the mutation.
   */
  errors: Array<string>;
}

export type _xGitLabEntry =
  | IXGitLabBlob
  | IXGitLabSubmodule
  | IXGitLabTreeEntry;

export interface IXGitLabEntry {
  __typename: '_xGitLabEntry';

  /**
   * Flat path of the entry.
   */
  flatPath: string;

  /**
   * ID of the entry.
   */
  id: string;

  /**
   * Name of the entry.
   */
  name: string;

  /**
   * Path of the entry.
   */
  path: string;

  /**
   * Last commit SHA for the entry.
   */
  sha: string;

  /**
   * Type of tree entry.
   */
  type: XGitLabEntryType;
}

/**
 * Type of a tree entry
 */
export const enum XGitLabEntryType {
  /**
   * Directory tree type.
   */
  tree = 'tree',

  /**
   * File tree type.
   */
  blob = 'blob',

  /**
   * Commit tree type.
   */
  commit = 'commit',
}

/**
 * Describes where code is deployed for a project
 */
export interface IXGitLabEnvironment {
  __typename: '_xGitLabEnvironment';

  /**
   * ID of the environment.
   */
  id: string;

  /**
   * Most severe open alert for the environment. If multiple alerts have equal severity, the most recent is returned.
   */
  latestOpenedMostSevereAlert: IXGitLabAlertManagementAlert | null;

  /**
   * Metrics dashboard schema for the environment.
   */
  metricsDashboard: IXGitLabMetricsDashboard | null;

  /**
   * Human-readable name of the environment.
   */
  name: string;

  /**
   * Path to the environment.
   */
  path: string;

  /**
   * State of the environment, for example: available/stopped.
   */
  state: string;
}

export interface IMetricsDashboardOnXGitLabEnvironmentArguments {
  /**
   * Path to a file which defines a metrics dashboard eg: `"config/prometheus/common_metrics.yml"`.
   */
  path: string;
}

/**
 * The connection type for Environment.
 */
export interface IXGitLabEnvironmentConnection {
  __typename: '_xGitLabEnvironmentConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitLabEnvironmentEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitLabEnvironment | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitLabPageInfo;
}

/**
 * An edge in a connection.
 */
export interface IXGitLabEnvironmentEdge {
  __typename: '_xGitLabEnvironmentEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitLabEnvironment | null;
}

/**
 * Autogenerated input type of EnvironmentsCanaryIngressUpdate
 */
export interface IXGitLabEnvironmentsCanaryIngressUpdateInput {
  /**
   * Global ID of the environment to update.
   */
  id: any;

  /**
   * Weight of the Canary Ingress.
   */
  weight: number;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of EnvironmentsCanaryIngressUpdate
 */
export interface IXGitLabEnvironmentsCanaryIngressUpdatePayload {
  __typename: '_xGitLabEnvironmentsCanaryIngressUpdatePayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * Errors encountered during execution of the mutation.
   */
  errors: Array<string>;
}

/**
 * Represents an epic
 */
export interface IXGitLabEpic {
  __typename: '_xGitLabEpic';

  /**
   * Ancestors (parents) of the epic.
   */
  ancestors: IXGitLabEpicConnection | null;

  /**
   * Author of the epic.
   */
  author: IXGitLabUserCore;

  /**
   * List of award emojis associated with the epic.
   */
  awardEmoji: IXGitLabAwardEmojiConnection | null;

  /**
   * Children (sub-epics) of the epic.
   */
  children: IXGitLabEpicConnection | null;

  /**
   * Timestamp of when the epic was closed.
   */
  closedAt: any | null;

  /**
   * Indicates if the epic is confidential.
   */
  confidential: boolean | null;

  /**
   * Timestamp of when the epic was created.
   */
  createdAt: any | null;

  /**
   * To-do items for the current user.
   */
  currentUserTodos: IXGitLabTodoConnection;

  /**
   * Number of open and closed descendant epics and issues.
   */
  descendantCounts: IXGitLabEpicDescendantCount | null;

  /**
   * Total weight of open and closed issues in the epic and its descendants.
   */
  descendantWeightSum: IXGitLabEpicDescendantWeights | null;

  /**
   * Description of the epic.
   */
  description: string | null;

  /**
   * The GitLab Flavored Markdown rendering of `description`
   */
  descriptionHtml: string | null;

  /**
   * All discussions on this noteable.
   */
  discussions: IXGitLabDiscussionConnection;

  /**
   * Number of downvotes the epic has received.
   */
  downvotes: number;

  /**
   * Due date of the epic.
   */
  dueDate: any | null;

  /**
   * Fixed due date of the epic.
   */
  dueDateFixed: any | null;

  /**
   * Inherited due date of the epic from milestones.
   */
  dueDateFromMilestones: any | null;

  /**
   * Indicates if the due date has been manually set.
   */
  dueDateIsFixed: boolean | null;

  /**
   * List of events associated with the object.
   */
  events: IXGitLabEventConnection | null;

  /**
   * Group to which the epic belongs.
   */
  group: IXGitLabGroup;

  /**
   * Indicates if the epic has children.
   */
  hasChildren: boolean;

  /**
   * Indicates if the epic has direct issues.
   */
  hasIssues: boolean;

  /**
   * Indicates if the epic has a parent epic.
   */
  hasParent: boolean;

  /**
   * Current health status of the epic.
   */
  healthStatus: IXGitLabEpicHealthStatus | null;

  /**
   * ID of the epic.
   */
  id: string;

  /**
   * Internal ID of the epic.
   */
  iid: string;

  /**
   * A list of issues associated with the epic.
   */
  issues: IXGitLabEpicIssueConnection | null;

  /**
   * Labels assigned to the epic.
   */
  labels: IXGitLabLabelConnection | null;

  /**
   * All notes on this noteable.
   */
  notes: IXGitLabNoteConnection;

  /**
   * Parent epic of the epic.
   */
  parent: IXGitLabEpic | null;

  /**
   * List of participants for the epic.
   */
  participants: IXGitLabUserCoreConnection | null;

  /**
   * Internal reference of the epic. Returned in shortened format by default.
   */
  reference: string;

  /**
   * URI path of the epic-issue relationship.
   */
  relationPath: string | null;

  /**
   * Relative position of the epic in the epic tree.
   */
  relativePosition: number | null;

  /**
   * Start date of the epic.
   */
  startDate: any | null;

  /**
   * Fixed start date of the epic.
   */
  startDateFixed: any | null;

  /**
   * Inherited start date of the epic from milestones.
   */
  startDateFromMilestones: any | null;

  /**
   * Indicates if the start date has been manually set.
   */
  startDateIsFixed: boolean | null;

  /**
   * State of the epic.
   */
  state: XGitLabEpicState;

  /**
   * Indicates the currently logged in user is subscribed to the epic.
   */
  subscribed: boolean;

  /**
   * Title of the epic.
   */
  title: string | null;

  /**
   * The GitLab Flavored Markdown rendering of `title`
   */
  titleHtml: string | null;

  /**
   * Timestamp of when the epic was updated.
   */
  updatedAt: any | null;

  /**
   * Number of upvotes the epic has received.
   */
  upvotes: number;

  /**
   * Number of user discussions in the epic.
   */
  userDiscussionsCount: number;

  /**
   * Number of user notes of the epic.
   */
  userNotesCount: number;

  /**
   * Permissions for the current user on the resource
   */
  userPermissions: IXGitLabEpicPermissions;

  /**
   * Web path of the epic.
   */
  webPath: string;

  /**
   * Web URL of the epic.
   */
  webUrl: string;
}

export interface IAncestorsOnXGitLabEpicArguments {
  /**
   * List items overlapping the given timeframe.
   */
  timeframe?: IXGitLabTimeframe | null;

  /**
   * Search query for title or description.
   */
  search?: string | null;

  /**
   * IID of the epic, e.g., "1".
   */
  iid?: string | null;

  /**
   * List of IIDs of epics, e.g., `[1, 2]`.
   */
  iids?: Array<string> | null;

  /**
   * Filter epics by state.
   */
  state?: XGitLabEpicState | null;

  /**
   * Specify the fields to perform the search in. Defaults to `[TITLE, DESCRIPTION]`. Requires the `search` argument.
   */
  in?: Array<XGitLabIssuableSearchableField> | null;

  /**
   * List epics by sort order.
   */
  sort?: XGitLabEpicSort | null;

  /**
   * Filter epics by author.
   */
  authorUsername?: string | null;

  /**
   * Filter epics by labels.
   */
  labelName?: Array<string> | null;

  /**
   * Filter epics by milestone title, computed from epic's issues.
   */
  milestoneTitle?: string | null;

  /**
   * Filter epics by IID for autocomplete.
   */
  iidStartsWith?: string | null;

  /**
   * Include epics from ancestor groups.
   * @default true
   */
  includeAncestorGroups?: boolean | null;

  /**
   * Include epics from descendant groups.
   * @default true
   */
  includeDescendantGroups?: boolean | null;

  /**
   * Filter epics by given confidentiality.
   */
  confidential?: boolean | null;

  /**
   * Filter by reaction emoji applied by the current user.
   */
  myReactionEmoji?: string | null;

  /**
   * Negated epic arguments.
   */
  not?: IXGitLabNegatedEpicFilterInput | null;

  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IAwardEmojiOnXGitLabEpicArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IChildrenOnXGitLabEpicArguments {
  /**
   * List items overlapping the given timeframe.
   */
  timeframe?: IXGitLabTimeframe | null;

  /**
   * Search query for title or description.
   */
  search?: string | null;

  /**
   * IID of the epic, e.g., "1".
   */
  iid?: string | null;

  /**
   * List of IIDs of epics, e.g., `[1, 2]`.
   */
  iids?: Array<string> | null;

  /**
   * Filter epics by state.
   */
  state?: XGitLabEpicState | null;

  /**
   * Specify the fields to perform the search in. Defaults to `[TITLE, DESCRIPTION]`. Requires the `search` argument.
   */
  in?: Array<XGitLabIssuableSearchableField> | null;

  /**
   * List epics by sort order.
   */
  sort?: XGitLabEpicSort | null;

  /**
   * Filter epics by author.
   */
  authorUsername?: string | null;

  /**
   * Filter epics by labels.
   */
  labelName?: Array<string> | null;

  /**
   * Filter epics by milestone title, computed from epic's issues.
   */
  milestoneTitle?: string | null;

  /**
   * Filter epics by IID for autocomplete.
   */
  iidStartsWith?: string | null;

  /**
   * Include epics from ancestor groups.
   * @default false
   */
  includeAncestorGroups?: boolean | null;

  /**
   * Include epics from descendant groups.
   * @default true
   */
  includeDescendantGroups?: boolean | null;

  /**
   * Filter epics by given confidentiality.
   */
  confidential?: boolean | null;

  /**
   * Filter by reaction emoji applied by the current user.
   */
  myReactionEmoji?: string | null;

  /**
   * Negated epic arguments.
   */
  not?: IXGitLabNegatedEpicFilterInput | null;

  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface ICurrentUserTodosOnXGitLabEpicArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * State of the to-do items.
   */
  state?: XGitLabTodoStateEnum | null;
}

export interface IDiscussionsOnXGitLabEpicArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IEventsOnXGitLabEpicArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IIssuesOnXGitLabEpicArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface ILabelsOnXGitLabEpicArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface INotesOnXGitLabEpicArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IParticipantsOnXGitLabEpicArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IReferenceOnXGitLabEpicArguments {
  /**
   * Indicates if the reference should be returned in full.
   * @default false
   */
  full?: boolean | null;
}

/**
 * Autogenerated input type of EpicAddIssue
 */
export interface IXGitLabEpicAddIssueInput {
  /**
   * IID of the epic to mutate.
   */
  iid: string;

  /**
   * Group the epic to mutate belongs to.
   */
  groupPath: string;

  /**
   * Full path of the project the issue belongs to.
   */
  projectPath: string;

  /**
   * IID of the issue to be added.
   */
  issueIid: string;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of EpicAddIssue
 */
export interface IXGitLabEpicAddIssuePayload {
  __typename: '_xGitLabEpicAddIssuePayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * Epic after mutation.
   */
  epic: IXGitLabEpic | null;

  /**
   * Epic-issue relationship.
   */
  epicIssue: IXGitLabEpicIssue | null;

  /**
   * Errors encountered during execution of the mutation.
   */
  errors: Array<string>;
}

/**
 * Represents an epic board
 */
export interface IXGitLabEpicBoard {
  __typename: '_xGitLabEpicBoard';

  /**
   * Whether or not backlog list is hidden.
   */
  hideBacklogList: boolean | null;

  /**
   * Whether or not closed list is hidden.
   */
  hideClosedList: boolean | null;

  /**
   * Global ID of the epic board.
   */
  id: any;

  /**
   * Labels of the board.
   */
  labels: IXGitLabLabelConnection | null;

  /**
   * Epic board lists.
   */
  lists: IXGitLabEpicListConnection | null;

  /**
   * Name of the epic board.
   */
  name: string | null;

  /**
   * Web path of the epic board.
   */
  webPath: string;

  /**
   * Web URL of the epic board.
   */
  webUrl: string;
}

export interface ILabelsOnXGitLabEpicBoardArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IListsOnXGitLabEpicBoardArguments {
  /**
   * Find an epic board list by ID.
   */
  id?: any | null;

  /**
   * Filters applied when getting epic metadata in the epic board list.
   */
  epicFilters?: IXGitLabEpicFilters | null;

  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

/**
 * The connection type for EpicBoard.
 */
export interface IXGitLabEpicBoardConnection {
  __typename: '_xGitLabEpicBoardConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitLabEpicBoardEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitLabEpicBoard | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitLabPageInfo;
}

/**
 * Autogenerated input type of EpicBoardCreate
 */
export interface IXGitLabEpicBoardCreateInput {
  /**
   * Board name.
   */
  name?: string | null;

  /**
   * Whether or not backlog list is hidden.
   */
  hideBacklogList?: boolean | null;

  /**
   * Whether or not closed list is hidden.
   */
  hideClosedList?: boolean | null;

  /**
   * Labels of the issue.
   */
  labels?: Array<string> | null;

  /**
   * IDs of labels to be added to the board.
   */
  labelIds?: Array<any> | null;

  /**
   * Full path of the group with which the resource is associated.
   */
  groupPath?: string | null;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of EpicBoardCreate
 */
export interface IXGitLabEpicBoardCreatePayload {
  __typename: '_xGitLabEpicBoardCreatePayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * Created epic board.
   */
  epicBoard: IXGitLabEpicBoard | null;

  /**
   * Errors encountered during execution of the mutation.
   */
  errors: Array<string>;
}

/**
 * An edge in a connection.
 */
export interface IXGitLabEpicBoardEdge {
  __typename: '_xGitLabEpicBoardEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitLabEpicBoard | null;
}

/**
 * Autogenerated input type of EpicBoardListCreate
 */
export interface IXGitLabEpicBoardListCreateInput {
  /**
   * Create the backlog list.
   */
  backlog?: boolean | null;

  /**
   * Global ID of an existing label.
   */
  labelId?: any | null;

  /**
   * Global ID of the issue board to mutate.
   */
  boardId: any;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of EpicBoardListCreate
 */
export interface IXGitLabEpicBoardListCreatePayload {
  __typename: '_xGitLabEpicBoardListCreatePayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * Errors encountered during execution of the mutation.
   */
  errors: Array<string>;

  /**
   * Epic list in the epic board.
   */
  list: IXGitLabEpicList | null;
}

/**
 * Autogenerated input type of EpicBoardListDestroy
 */
export interface IXGitLabEpicBoardListDestroyInput {
  /**
   * Global ID of the epic board list to destroy.
   */
  listId: any;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of EpicBoardListDestroy
 */
export interface IXGitLabEpicBoardListDestroyPayload {
  __typename: '_xGitLabEpicBoardListDestroyPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * Errors encountered during execution of the mutation.
   */
  errors: Array<string>;

  /**
   * Epic board list. `null` if the board was destroyed successfully.
   */
  list: IXGitLabEpicList | null;
}

/**
 * Autogenerated input type of EpicBoardUpdate
 */
export interface IXGitLabEpicBoardUpdateInput {
  /**
   * Board name.
   */
  name?: string | null;

  /**
   * Whether or not backlog list is hidden.
   */
  hideBacklogList?: boolean | null;

  /**
   * Whether or not closed list is hidden.
   */
  hideClosedList?: boolean | null;

  /**
   * Labels of the issue.
   */
  labels?: Array<string> | null;

  /**
   * IDs of labels to be added to the board.
   */
  labelIds?: Array<any> | null;

  /**
   * Epic board global ID.
   */
  id: any;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of EpicBoardUpdate
 */
export interface IXGitLabEpicBoardUpdatePayload {
  __typename: '_xGitLabEpicBoardUpdatePayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * Updated epic board.
   */
  epicBoard: IXGitLabEpicBoard | null;

  /**
   * Errors encountered during execution of the mutation.
   */
  errors: Array<string>;
}

/**
 * The connection type for Epic.
 */
export interface IXGitLabEpicConnection {
  __typename: '_xGitLabEpicConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitLabEpicEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitLabEpic | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitLabPageInfo;
}

/**
 * Counts of descendent epics
 */
export interface IXGitLabEpicDescendantCount {
  __typename: '_xGitLabEpicDescendantCount';

  /**
   * Number of closed child epics.
   */
  closedEpics: number | null;

  /**
   * Number of closed epic issues.
   */
  closedIssues: number | null;

  /**
   * Number of opened child epics.
   */
  openedEpics: number | null;

  /**
   * Number of opened epic issues.
   */
  openedIssues: number | null;
}

/**
 * Total weight of open and closed descendant issues
 */
export interface IXGitLabEpicDescendantWeights {
  __typename: '_xGitLabEpicDescendantWeights';

  /**
   * Total weight of completed (closed) issues in this epic, including epic descendants.
   */
  closedIssues: number | null;

  /**
   * Total weight of opened issues in this epic, including epic descendants.
   */
  openedIssues: number | null;
}

/**
 * An edge in a connection.
 */
export interface IXGitLabEpicEdge {
  __typename: '_xGitLabEpicEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitLabEpic | null;
}

export interface IXGitLabEpicFilters {
  /**
   * Filter by label name.
   */
  labelName?: Array<string | null> | null;

  /**
   * Filter by author username.
   */
  authorUsername?: string | null;

  /**
   * Filter by reaction emoji applied by the current user. Wildcard values "NONE" and "ANY" are supported.
   */
  myReactionEmoji?: string | null;

  /**
   * Negated epic arguments.
   */
  not?: IXGitLabNegatedEpicBoardIssueInput | null;

  /**
   * Search query for epic title or description.
   */
  search?: string | null;
}

/**
 * Health status of child issues
 */
export interface IXGitLabEpicHealthStatus {
  __typename: '_xGitLabEpicHealthStatus';

  /**
   * Number of issues at risk.
   */
  issuesAtRisk: number | null;

  /**
   * Number of issues that need attention.
   */
  issuesNeedingAttention: number | null;

  /**
   * Number of issues on track.
   */
  issuesOnTrack: number | null;
}

/**
 * Relationship between an epic and an issue
 */
export interface IXGitLabEpicIssue {
  __typename: '_xGitLabEpicIssue';

  /**
   * Alert associated to this issue.
   */
  alertManagementAlert: IXGitLabAlertManagementAlert | null;

  /**
   * Assignees of the issue.
   */
  assignees: IXGitLabUserCoreConnection | null;

  /**
   * User that created the issue.
   */
  author: IXGitLabUserCore;

  /**
   * Indicates the issue is blocked.
   */
  blocked: boolean;

  /**
   * Count of issues blocking this issue.
   */
  blockedByCount: number | null;

  /**
   * Issues blocking this issue.
   */
  blockedByIssues: IXGitLabIssueConnection | null;

  /**
   * Count of issues this issue is blocking.
   */
  blockingCount: number;

  /**
   * Timestamp of when the issue was closed.
   */
  closedAt: any | null;

  /**
   * Indicates the issue is confidential.
   */
  confidential: boolean;

  /**
   * User specific email address for the issue.
   */
  createNoteEmail: string | null;

  /**
   * Timestamp of when the issue was created.
   */
  createdAt: any;

  /**
   * To-do items for the current user.
   */
  currentUserTodos: IXGitLabTodoConnection;

  /**
   * Customer relations contacts of the issue.
   */
  customerRelationsContacts: IXGitLabCustomerRelationsContactConnection | null;

  /**
   * Description of the issue.
   */
  description: string | null;

  /**
   * The GitLab Flavored Markdown rendering of `description`
   */
  descriptionHtml: string | null;

  /**
   * Collection of design images associated with this issue.
   */
  designCollection: IXGitLabDesignCollection | null;

  /**
   * Indicates discussion is locked on the issue.
   */
  discussionLocked: boolean;

  /**
   * All discussions on this noteable.
   */
  discussions: IXGitLabDiscussionConnection;

  /**
   * Number of downvotes the issue has received.
   */
  downvotes: number;

  /**
   * Due date of the issue.
   */
  dueDate: any | null;

  /**
   * Indicates if a project has email notifications disabled: `true` if email notifications are disabled.
   */
  emailsDisabled: boolean;

  /**
   * Epic to which this issue belongs.
   */
  epic: IXGitLabEpic | null;

  /**
   * ID of the epic-issue relation.
   */
  epicIssueId: string;

  /**
   * Current health status.
   */
  healthStatus: XGitLabHealthStatus | null;

  /**
   * Indicates the issue is hidden because the author has been banned. Will always
   * return `null` if `ban_user_feature_flag` feature flag is disabled.
   */
  hidden: boolean | null;

  /**
   * Human-readable time estimate of the issue.
   */
  humanTimeEstimate: string | null;

  /**
   * Human-readable total time reported as spent on the issue.
   */
  humanTotalTimeSpent: string | null;

  /**
   * Global ID of the epic-issue relation.
   */
  id: string | null;

  /**
   * Internal ID of the issue.
   */
  iid: string;

  /**
   * Iteration of the issue.
   */
  iteration: IXGitLabIteration | null;

  /**
   * Labels of the issue.
   */
  labels: IXGitLabLabelConnection | null;

  /**
   * Number of merge requests that close the issue on merge.
   */
  mergeRequestsCount: number;

  /**
   * Metric images associated to the issue.
   */
  metricImages: Array<IXGitLabMetricImage> | null;

  /**
   * Milestone of the issue.
   */
  milestone: IXGitLabMilestone | null;

  /**
   * Indicates if issue got moved from other project.
   */
  moved: boolean | null;

  /**
   * Updated Issue after it got moved to another project.
   */
  movedTo: IXGitLabIssue | null;

  /**
   * All notes on this noteable.
   */
  notes: IXGitLabNoteConnection;

  /**
   * List of participants in the issue.
   */
  participants: IXGitLabUserCoreConnection | null;

  /**
   * ID of the issue project.
   */
  projectId: number;

  /**
   * Internal reference of the issue. Returned in shortened format by default.
   */
  reference: string;

  /**
   * URI path of the epic-issue relation.
   */
  relationPath: string | null;

  /**
   * Relative position of the issue (used for positioning in epic tree and issue boards).
   */
  relativePosition: number | null;

  /**
   * Severity level of the incident.
   */
  severity: XGitLabIssuableSeverity | null;

  /**
   * Timestamp of when the issue SLA expires.
   */
  slaDueAt: any | null;

  /**
   * State of the issue.
   */
  state: XGitLabIssueState;

  /**
   * Indicates whether an issue is published to the status page.
   */
  statusPagePublishedIncident: boolean | null;

  /**
   * Indicates the currently logged in user is subscribed to the issue.
   */
  subscribed: boolean;

  /**
   * Task completion status of the issue.
   */
  taskCompletionStatus: IXGitLabTaskCompletionStatus;

  /**
   * Time estimate of the issue.
   */
  timeEstimate: number;

  /**
   * Timelogs on the issue.
   */
  timelogs: IXGitLabTimelogConnection;

  /**
   * Title of the issue.
   */
  title: string;

  /**
   * The GitLab Flavored Markdown rendering of `title`
   */
  titleHtml: string | null;

  /**
   * Total time reported as spent on the issue.
   */
  totalTimeSpent: number;

  /**
   * Type of the issue.
   */
  type: XGitLabIssueType | null;

  /**
   * Timestamp of when the issue was last updated.
   */
  updatedAt: any;

  /**
   * User that last updated the issue.
   */
  updatedBy: IXGitLabUserCore | null;

  /**
   * Number of upvotes the issue has received.
   */
  upvotes: number;

  /**
   * Number of user discussions in the issue.
   */
  userDiscussionsCount: number;

  /**
   * Number of user notes of the issue.
   */
  userNotesCount: number;

  /**
   * Permissions for the current user on the resource
   */
  userPermissions: IXGitLabIssuePermissions;

  /**
   * Web path of the issue.
   */
  webPath: string;

  /**
   * Web URL of the issue.
   */
  webUrl: string;

  /**
   * Weight of the issue.
   */
  weight: number | null;
}

export interface IAssigneesOnXGitLabEpicIssueArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IBlockedByIssuesOnXGitLabEpicIssueArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface ICurrentUserTodosOnXGitLabEpicIssueArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * State of the to-do items.
   */
  state?: XGitLabTodoStateEnum | null;
}

export interface ICustomerRelationsContactsOnXGitLabEpicIssueArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IDiscussionsOnXGitLabEpicIssueArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface ILabelsOnXGitLabEpicIssueArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface INotesOnXGitLabEpicIssueArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IParticipantsOnXGitLabEpicIssueArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IReferenceOnXGitLabEpicIssueArguments {
  /**
   * Boolean option specifying whether the reference should be returned in full.
   * @default false
   */
  full?: boolean | null;
}

export interface ITimelogsOnXGitLabEpicIssueArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

/**
 * The connection type for EpicIssue.
 */
export interface IXGitLabEpicIssueConnection {
  __typename: '_xGitLabEpicIssueConnection';

  /**
   * Total count of collection.
   */
  count: number;

  /**
   * A list of edges.
   */
  edges: Array<IXGitLabEpicIssueEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitLabEpicIssue | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitLabPageInfo;

  /**
   * Total weight of issues collection.
   */
  weight: number;
}

/**
 * An edge in a connection.
 */
export interface IXGitLabEpicIssueEdge {
  __typename: '_xGitLabEpicIssueEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitLabEpicIssue | null;
}

/**
 * Represents an epic board list
 */
export interface IXGitLabEpicList {
  __typename: '_xGitLabEpicList';

  /**
   * Indicates if this list is collapsed for this user.
   */
  collapsed: boolean | null;

  /**
   * List epics.
   */
  epics: IXGitLabEpicConnection | null;

  /**
   * Count of epics in the list.
   */
  epicsCount: number | null;

  /**
   * Global ID of the board list.
   */
  id: any;

  /**
   * Label of the list.
   */
  label: IXGitLabLabel | null;

  /**
   * Type of the list.
   */
  listType: string;

  /**
   * Position of the list within the board.
   */
  position: number | null;

  /**
   * Title of the list.
   */
  title: string;
}

export interface IEpicsOnXGitLabEpicListArguments {
  /**
   * Filters applied when selecting epics in the board list.
   */
  filters?: IXGitLabEpicFilters | null;

  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

/**
 * The connection type for EpicList.
 */
export interface IXGitLabEpicListConnection {
  __typename: '_xGitLabEpicListConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitLabEpicListEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitLabEpicList | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitLabPageInfo;
}

/**
 * An edge in a connection.
 */
export interface IXGitLabEpicListEdge {
  __typename: '_xGitLabEpicListEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitLabEpicList | null;
}

/**
 * Autogenerated input type of EpicMoveList
 */
export interface IXGitLabEpicMoveListInput {
  /**
   * Global ID of the board that the epic is in.
   */
  boardId: any;

  /**
   * ID of the epic to mutate.
   */
  epicId: any;

  /**
   * ID of the board list that the epic will be moved from. Required if moving between lists.
   */
  fromListId?: any | null;

  /**
   * ID of the list the epic will be in after mutation.
   */
  toListId: any;

  /**
   * ID of epic that should be placed before the current epic.
   */
  moveBeforeId?: any | null;

  /**
   * ID of epic that should be placed after the current epic.
   */
  moveAfterId?: any | null;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of EpicMoveList
 */
export interface IXGitLabEpicMoveListPayload {
  __typename: '_xGitLabEpicMoveListPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * Epic after mutation.
   */
  epic: IXGitLabEpic | null;

  /**
   * Errors encountered during execution of the mutation.
   */
  errors: Array<string>;
}

/**
 * Check permissions for the current user on an epic
 */
export interface IXGitLabEpicPermissions {
  __typename: '_xGitLabEpicPermissions';

  /**
   * Indicates the user can perform `admin_epic` on this resource
   */
  adminEpic: boolean;

  /**
   * Indicates the user can perform `award_emoji` on this resource
   */
  awardEmoji: boolean;

  /**
   * Indicates the user can perform `create_epic` on this resource
   */
  createEpic: boolean;

  /**
   * Indicates the user can perform `create_note` on this resource
   */
  createNote: boolean;

  /**
   * Indicates the user can perform `destroy_epic` on this resource
   */
  destroyEpic: boolean;

  /**
   * Indicates the user can perform `read_epic` on this resource
   */
  readEpic: boolean;

  /**
   * Indicates the user can perform `read_epic_iid` on this resource
   */
  readEpicIid: boolean;

  /**
   * Indicates the user can perform `update_epic` on this resource
   */
  updateEpic: boolean;
}

/**
 * Autogenerated input type of EpicSetSubscription
 */
export interface IXGitLabEpicSetSubscriptionInput {
  /**
   * IID of the epic to mutate.
   */
  iid: string;

  /**
   * Group the epic to mutate belongs to.
   */
  groupPath: string;

  /**
   * Desired state of the subscription.
   */
  subscribedState: boolean;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of EpicSetSubscription
 */
export interface IXGitLabEpicSetSubscriptionPayload {
  __typename: '_xGitLabEpicSetSubscriptionPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * Epic after mutation.
   */
  epic: IXGitLabEpic | null;

  /**
   * Errors encountered during execution of the mutation.
   */
  errors: Array<string>;
}

/**
 * Roadmap sort values
 */
export const enum XGitLabEpicSort {
  /**
   * Start date at descending order.
   * @deprecated "Use START_DATE_DESC. Deprecated in 13.11."
   */
  start_date_desc = 'start_date_desc',

  /**
   * Start date at ascending order.
   * @deprecated "Use START_DATE_ASC. Deprecated in 13.11."
   */
  start_date_asc = 'start_date_asc',

  /**
   * End date at descending order.
   * @deprecated "Use END_DATE_DESC. Deprecated in 13.11."
   */
  end_date_desc = 'end_date_desc',

  /**
   * End date at ascending order.
   * @deprecated "Use END_DATE_ASC. Deprecated in 13.11."
   */
  end_date_asc = 'end_date_asc',

  /**
   * Sort by start date in descending order.
   */
  START_DATE_DESC = 'START_DATE_DESC',

  /**
   * Sort by start date in ascending order.
   */
  START_DATE_ASC = 'START_DATE_ASC',

  /**
   * Sort by end date in descending order.
   */
  END_DATE_DESC = 'END_DATE_DESC',

  /**
   * Sort by end date in ascending order.
   */
  END_DATE_ASC = 'END_DATE_ASC',

  /**
   * Sort by title in descending order.
   */
  TITLE_DESC = 'TITLE_DESC',

  /**
   * Sort by title in ascending order.
   */
  TITLE_ASC = 'TITLE_ASC',
}

/**
 * State of an epic
 */
export const enum XGitLabEpicState {
  /**
   * All epics.
   */
  all = 'all',

  /**
   * Open epics.
   */
  opened = 'opened',

  /**
   * Closed epics.
   */
  closed = 'closed',
}

/**
 * State event of an epic
 */
export const enum XGitLabEpicStateEvent {
  /**
   * Reopen the epic.
   */
  REOPEN = 'REOPEN',

  /**
   * Close the epic.
   */
  CLOSE = 'CLOSE',
}

/**
 * A node of an epic tree.
 */
export interface IXGitLabEpicTreeNodeFieldsInputType {
  /**
   * ID of the epic issue or epic that is being moved.
   */
  id: any;

  /**
   * ID of the epic issue or issue the epic or issue is switched with.
   */
  adjacentReferenceId?: any | null;

  /**
   * Type of switch. Valid values are `after` or `before`.
   */
  relativePosition?: XGitLabMoveType | null;

  /**
   * ID of the new parent epic.
   */
  newParentId?: any | null;
}

/**
 * Autogenerated input type of EpicTreeReorder
 */
export interface IXGitLabEpicTreeReorderInput {
  /**
   * ID of the base epic of the tree.
   */
  baseEpicId: any;

  /**
   * Parameters for updating the tree positions.
   */
  moved: IXGitLabEpicTreeNodeFieldsInputType;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of EpicTreeReorder
 */
export interface IXGitLabEpicTreeReorderPayload {
  __typename: '_xGitLabEpicTreeReorderPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * Errors encountered during execution of the mutation.
   */
  errors: Array<string>;
}

/**
 * Epic ID wildcard values
 */
export const enum XGitLabEpicWildcardId {
  /**
   * No epic is assigned.
   */
  NONE = 'NONE',

  /**
   * Any epic is assigned.
   */
  ANY = 'ANY',
}

/**
 * Autogenerated input type of EscalationPolicyCreate
 */
export interface IXGitLabEscalationPolicyCreateInput {
  /**
   * Project to create the escalation policy for.
   */
  projectPath: string;

  /**
   * Name of the escalation policy.
   */
  name: string;

  /**
   * Description of the escalation policy.
   */
  description?: string | null;

  /**
   * Steps of the escalation policy.
   */
  rules: Array<IXGitLabEscalationRuleInput>;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of EscalationPolicyCreate
 */
export interface IXGitLabEscalationPolicyCreatePayload {
  __typename: '_xGitLabEscalationPolicyCreatePayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * Errors encountered during execution of the mutation.
   */
  errors: Array<string>;

  /**
   * Escalation policy.
   */
  escalationPolicy: IXGitLabEscalationPolicyType | null;
}

/**
 * Autogenerated input type of EscalationPolicyDestroy
 */
export interface IXGitLabEscalationPolicyDestroyInput {
  /**
   * Escalation policy internal ID to remove.
   */
  id: any;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of EscalationPolicyDestroy
 */
export interface IXGitLabEscalationPolicyDestroyPayload {
  __typename: '_xGitLabEscalationPolicyDestroyPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * Errors encountered during execution of the mutation.
   */
  errors: Array<string>;

  /**
   * Escalation policy.
   */
  escalationPolicy: IXGitLabEscalationPolicyType | null;
}

/**
 * Represents an escalation policy
 */
export interface IXGitLabEscalationPolicyType {
  __typename: '_xGitLabEscalationPolicyType';

  /**
   * Description of the escalation policy.
   */
  description: string | null;

  /**
   * ID of the escalation policy.
   */
  id: any | null;

  /**
   * Name of the escalation policy.
   */
  name: string | null;

  /**
   * Steps of the escalation policy.
   */
  rules: Array<IXGitLabEscalationRuleType> | null;
}

/**
 * The connection type for EscalationPolicyType.
 */
export interface IXGitLabEscalationPolicyTypeConnection {
  __typename: '_xGitLabEscalationPolicyTypeConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitLabEscalationPolicyTypeEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitLabEscalationPolicyType | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitLabPageInfo;
}

/**
 * An edge in a connection.
 */
export interface IXGitLabEscalationPolicyTypeEdge {
  __typename: '_xGitLabEscalationPolicyTypeEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitLabEscalationPolicyType | null;
}

/**
 * Autogenerated input type of EscalationPolicyUpdate
 */
export interface IXGitLabEscalationPolicyUpdateInput {
  /**
   * ID of the on-call schedule to create the on-call rotation in.
   */
  id: any;

  /**
   * Name of the escalation policy.
   */
  name?: string | null;

  /**
   * Description of the escalation policy.
   */
  description?: string | null;

  /**
   * Steps of the escalation policy.
   */
  rules?: Array<IXGitLabEscalationRuleInput> | null;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of EscalationPolicyUpdate
 */
export interface IXGitLabEscalationPolicyUpdatePayload {
  __typename: '_xGitLabEscalationPolicyUpdatePayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * Errors encountered during execution of the mutation.
   */
  errors: Array<string>;

  /**
   * Escalation policy.
   */
  escalationPolicy: IXGitLabEscalationPolicyType | null;
}

/**
 * Represents an escalation rule
 */
export interface IXGitLabEscalationRuleInput {
  /**
   * On-call schedule to notify.
   */
  oncallScheduleIid?: string | null;

  /**
   * Username of the user to notify.
   */
  username?: string | null;

  /**
   * Time in seconds before the rule is activated.
   */
  elapsedTimeSeconds: number;

  /**
   * Status required to prevent the rule from activating.
   */
  status: XGitLabEscalationRuleStatus;
}

/**
 * Escalation rule statuses
 */
export const enum XGitLabEscalationRuleStatus {
  /**
   * .
   */
  ACKNOWLEDGED = 'ACKNOWLEDGED',

  /**
   * .
   */
  RESOLVED = 'RESOLVED',
}

/**
 * Represents an escalation rule for an escalation policy
 */
export interface IXGitLabEscalationRuleType {
  __typename: '_xGitLabEscalationRuleType';

  /**
   * Time in seconds before the rule is activated.
   */
  elapsedTimeSeconds: number | null;

  /**
   * ID of the escalation policy.
   */
  id: any | null;

  /**
   * On-call schedule to notify.
   */
  oncallSchedule: IXGitLabIncidentManagementOncallSchedule | null;

  /**
   * Status required to prevent the rule from activating.
   */
  status: XGitLabEscalationRuleStatus | null;

  /**
   * User to notify.
   */
  user: IXGitLabUserCore | null;
}

/**
 * Representing an event
 */
export interface IXGitLabEvent {
  __typename: '_xGitLabEvent';

  /**
   * Action of the event.
   */
  action: XGitLabEventAction;

  /**
   * Author of this event.
   */
  author: IXGitLabUserCore;

  /**
   * When this event was created.
   */
  createdAt: any;

  /**
   * ID of the event.
   */
  id: string;

  /**
   * When this event was updated.
   */
  updatedAt: any;
}

export type _xGitLabEventable = IXGitLabBoardEpic | IXGitLabEpic;

export interface IXGitLabEventable {
  __typename: '_xGitLabEventable';

  /**
   * List of events associated with the object.
   */
  events: IXGitLabEventConnection | null;
}

export interface IEventsOnXGitLabEventableArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

/**
 * Event action
 */
export const enum XGitLabEventAction {
  /**
   * Created action
   */
  CREATED = 'CREATED',

  /**
   * Updated action
   */
  UPDATED = 'UPDATED',

  /**
   * Closed action
   */
  CLOSED = 'CLOSED',

  /**
   * Reopened action
   */
  REOPENED = 'REOPENED',

  /**
   * Pushed action
   */
  PUSHED = 'PUSHED',

  /**
   * Commented action
   */
  COMMENTED = 'COMMENTED',

  /**
   * Merged action
   */
  MERGED = 'MERGED',

  /**
   * Joined action
   */
  JOINED = 'JOINED',

  /**
   * Left action
   */
  LEFT = 'LEFT',

  /**
   * Destroyed action
   */
  DESTROYED = 'DESTROYED',

  /**
   * Expired action
   */
  EXPIRED = 'EXPIRED',

  /**
   * Approved action
   */
  APPROVED = 'APPROVED',
}

/**
 * The connection type for Event.
 */
export interface IXGitLabEventConnection {
  __typename: '_xGitLabEventConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitLabEventEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitLabEvent | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitLabPageInfo;
}

/**
 * An edge in a connection.
 */
export interface IXGitLabEventEdge {
  __typename: '_xGitLabEventEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitLabEvent | null;
}

/**
 * Autogenerated input type of ExportRequirements
 */
export interface IXGitLabExportRequirementsInput {
  /**
   * List requirements by sort order.
   */
  sort?: XGitLabSort | null;

  /**
   * Filter requirements by state.
   */
  state?: XGitLabRequirementState | null;

  /**
   * Search query for requirement title.
   */
  search?: string | null;

  /**
   * Filter requirements by author username.
   */
  authorUsername?: Array<string> | null;

  /**
   * Full project path the requirements are associated with.
   */
  projectPath: string;

  /**
   * List of selected requirements fields to be exported.
   */
  selectedFields?: Array<string> | null;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of ExportRequirements
 */
export interface IXGitLabExportRequirementsPayload {
  __typename: '_xGitLabExportRequirementsPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * Errors encountered during execution of the mutation.
   */
  errors: Array<string>;
}

/**
 * Represents an external resource to send audit events to
 */
export interface IXGitLabExternalAuditEventDestination {
  __typename: '_xGitLabExternalAuditEventDestination';

  /**
   * External destination to send audit events to.
   */
  destinationUrl: string;

  /**
   * Group the destination belongs to.
   */
  group: IXGitLabGroup;

  /**
   * ID of the destination.
   */
  id: string;
}

/**
 * Autogenerated input type of ExternalAuditEventDestinationCreate
 */
export interface IXGitLabExternalAuditEventDestinationCreateInput {
  /**
   * Destination URL.
   */
  destinationUrl: string;

  /**
   * Group path.
   */
  groupPath: string;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of ExternalAuditEventDestinationCreate
 */
export interface IXGitLabExternalAuditEventDestinationCreatePayload {
  __typename: '_xGitLabExternalAuditEventDestinationCreatePayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * Errors encountered during execution of the mutation.
   */
  errors: Array<string>;

  /**
   * Destination created.
   */
  externalAuditEventDestination: IXGitLabExternalAuditEventDestination | null;
}

/**
 * Autogenerated input type of ExternalAuditEventDestinationDestroy
 */
export interface IXGitLabExternalAuditEventDestinationDestroyInput {
  /**
   * ID of external audit event destination to destroy.
   */
  id: any;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of ExternalAuditEventDestinationDestroy
 */
export interface IXGitLabExternalAuditEventDestinationDestroyPayload {
  __typename: '_xGitLabExternalAuditEventDestinationDestroyPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * Errors encountered during execution of the mutation.
   */
  errors: Array<string>;
}

/**
 * Autogenerated input type of ExternalAuditEventDestinationUpdate
 */
export interface IXGitLabExternalAuditEventDestinationUpdateInput {
  /**
   * ID of external audit event destination to destroy.
   */
  id: any;

  /**
   * Destination URL to change.
   */
  destinationUrl?: string | null;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of ExternalAuditEventDestinationUpdate
 */
export interface IXGitLabExternalAuditEventDestinationUpdatePayload {
  __typename: '_xGitLabExternalAuditEventDestinationUpdatePayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * Errors encountered during execution of the mutation.
   */
  errors: Array<string>;

  /**
   * Updated destination.
   */
  externalAuditEventDestination: IXGitLabExternalAuditEventDestination | null;
}

/**
 * Represents an external issue
 */
export interface IXGitLabExternalIssue {
  __typename: '_xGitLabExternalIssue';

  /**
   * Timestamp of when the issue was created.
   */
  createdAt: any | null;

  /**
   * Type of external tracker.
   */
  externalTracker: string | null;

  /**
   * Relative reference of the issue in the external tracker.
   */
  relativeReference: string | null;

  /**
   * Status of the issue in the external tracker.
   */
  status: string | null;

  /**
   * Title of the issue in the external tracker.
   */
  title: string | null;

  /**
   * Timestamp of when the issue was updated.
   */
  updatedAt: any | null;

  /**
   * URL to the issue in the external tracker.
   */
  webUrl: string | null;
}

export interface IXGitLabGeoNode {
  __typename: '_xGitLabGeoNode';

  /**
   * Maximum concurrency of container repository sync for this secondary node.
   */
  containerRepositoriesMaxCapacity: number | null;

  /**
   * Indicates whether this Geo node is enabled.
   */
  enabled: boolean | null;

  /**
   * Maximum concurrency of LFS/attachment backfill for this secondary node.
   */
  filesMaxCapacity: number | null;

  /**
   * Find group wiki repository registries on this Geo node.
   */
  groupWikiRepositoryRegistries: IXGitLabGroupWikiRepositoryRegistryConnection | null;

  /**
   * ID of this GeoNode.
   */
  id: string;

  /**
   * URL defined on the primary node secondary nodes should use to contact it.
   */
  internalUrl: string | null;

  /**
   * Find LFS object registries on this Geo node.
   */
  lfsObjectRegistries: IXGitLabLfsObjectRegistryConnection | null;

  /**
   * Find merge request diff registries on this Geo node.
   */
  mergeRequestDiffRegistries: IXGitLabMergeRequestDiffRegistryConnection | null;

  /**
   * Interval (in days) in which the repository verification is valid. After expiry, it is reverted.
   */
  minimumReverificationInterval: number | null;

  /**
   * Unique identifier for this Geo node.
   */
  name: string | null;

  /**
   * Package file registries of the GeoNode.
   */
  packageFileRegistries: IXGitLabPackageFileRegistryConnection | null;

  /**
   * Find Pages Deployment registries on this Geo node
   */
  pagesDeploymentRegistries: IXGitLabPagesDeploymentRegistryConnection | null;

  /**
   * Find pipeline artifact registries on this Geo node.
   */
  pipelineArtifactRegistries: IXGitLabPipelineArtifactRegistryConnection | null;

  /**
   * Indicates whether this Geo node is the primary.
   */
  primary: boolean | null;

  /**
   * Maximum concurrency of repository backfill for this secondary node.
   */
  reposMaxCapacity: number | null;

  /**
   * Namespaces that should be synced, if `selective_sync_type` == `namespaces`.
   */
  selectiveSyncNamespaces: IXGitLabNamespaceConnection | null;

  /**
   * Repository storages whose projects should be synced, if `selective_sync_type` == `shards`.
   */
  selectiveSyncShards: Array<string> | null;

  /**
   * Indicates if syncing is limited to only specific groups, or shards.
   */
  selectiveSyncType: string | null;

  /**
   * Find snippet repository registries on this Geo node.
   */
  snippetRepositoryRegistries: IXGitLabSnippetRepositoryRegistryConnection | null;

  /**
   * Indicates if this secondary node will replicate blobs in Object Storage.
   */
  syncObjectStorage: boolean | null;

  /**
   * Find terraform state version registries on this Geo node.
   */
  terraformStateVersionRegistries: IXGitLabTerraformStateVersionRegistryConnection | null;

  /**
   * Find Upload registries on this Geo node
   */
  uploadRegistries: IXGitLabUploadRegistryConnection | null;

  /**
   * User-facing URL for this Geo node.
   */
  url: string | null;

  /**
   * Maximum concurrency of repository verification for this secondary node.
   */
  verificationMaxCapacity: number | null;
}

export interface IGroupWikiRepositoryRegistriesOnXGitLabGeoNodeArguments {
  /**
   * Filters registries by their ID.
   */
  ids?: Array<string> | null;

  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface ILfsObjectRegistriesOnXGitLabGeoNodeArguments {
  /**
   * Filters registries by their ID.
   */
  ids?: Array<string> | null;

  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IMergeRequestDiffRegistriesOnXGitLabGeoNodeArguments {
  /**
   * Filters registries by their ID.
   */
  ids?: Array<string> | null;

  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IPackageFileRegistriesOnXGitLabGeoNodeArguments {
  /**
   * Filters registries by their ID.
   */
  ids?: Array<string> | null;

  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IPagesDeploymentRegistriesOnXGitLabGeoNodeArguments {
  /**
   * Filters registries by their ID.
   */
  ids?: Array<string> | null;

  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IPipelineArtifactRegistriesOnXGitLabGeoNodeArguments {
  /**
   * Filters registries by their ID.
   */
  ids?: Array<string> | null;

  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface ISelectiveSyncNamespacesOnXGitLabGeoNodeArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface ISnippetRepositoryRegistriesOnXGitLabGeoNodeArguments {
  /**
   * Filters registries by their ID.
   */
  ids?: Array<string> | null;

  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface ITerraformStateVersionRegistriesOnXGitLabGeoNodeArguments {
  /**
   * Filters registries by their ID.
   */
  ids?: Array<string> | null;

  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IUploadRegistriesOnXGitLabGeoNodeArguments {
  /**
   * Filters registries by their ID.
   */
  ids?: Array<string> | null;

  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

/**
 * Autogenerated input type of GitlabSubscriptionActivate
 */
export interface IXGitLabGitlabSubscriptionActivateInput {
  /**
   * Activation code received after purchasing a GitLab subscription.
   */
  activationCode: string;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of GitlabSubscriptionActivate
 */
export interface IXGitLabGitlabSubscriptionActivatePayload {
  __typename: '_xGitLabGitlabSubscriptionActivatePayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * Errors encountered during execution of the mutation.
   */
  errors: Array<string>;

  /**
   * Current license.
   */
  license: IXGitLabCurrentLicense | null;
}

export interface IXGitLabGrafanaIntegration {
  __typename: '_xGitLabGrafanaIntegration';

  /**
   * Timestamp of the issue's creation.
   */
  createdAt: any;

  /**
   * Indicates whether Grafana integration is enabled.
   */
  enabled: boolean;

  /**
   * URL for the Grafana host for the Grafana integration.
   */
  grafanaUrl: string;

  /**
   * Internal ID of the Grafana integration.
   */
  id: string;

  /**
   * Timestamp of the issue's last activity.
   */
  updatedAt: any;
}

export interface IXGitLabGroup {
  __typename: '_xGitLabGroup';

  /**
   * Size limit for repositories in the namespace in bytes.
   */
  actualRepositorySizeLimit: number | null;

  /**
   * Additional storage purchased for the root namespace in bytes.
   */
  additionalPurchasedStorageSize: number | null;

  /**
   * Indicates whether Auto DevOps is enabled for all projects within this group.
   */
  autoDevopsEnabled: boolean | null;

  /**
   * Avatar URL of the group.
   */
  avatarUrl: string | null;

  /**
   * Number of billable users in the group.
   */
  billableMembersCount: number | null;

  /**
   * A single board of the group.
   */
  board: IXGitLabBoard | null;

  /**
   * Boards of the group.
   */
  boards: IXGitLabBoardConnection | null;

  /**
   * Represents the code coverage activity for this group.
   */
  codeCoverageActivities: IXGitLabCodeCoverageActivityConnection | null;

  /**
   * Compliance frameworks available to projects in this namespace.
   */
  complianceFrameworks: IXGitLabComplianceFrameworkConnection | null;

  /**
   * Find contacts of this group.
   */
  contacts: IXGitLabCustomerRelationsContactConnection | null;

  /**
   * Container repositories of the group.
   */
  containerRepositories: IXGitLabContainerRepositoryConnection | null;

  /**
   * Number of container repositories in the group.
   */
  containerRepositoriesCount: number;

  /**
   * Includes at least one project where the repository size exceeds the limit.
   */
  containsLockedProjects: boolean;

  /**
   * Custom emoji within this namespace. Available only when feature flag
   * `custom_emoji` is enabled. This flag is disabled by default, because the
   * feature is experimental and is subject to change without notice.
   */
  customEmoji: IXGitLabCustomEmojiConnection | null;

  /**
   * Number of dependency proxy blobs cached in the group.
   */
  dependencyProxyBlobCount: number;

  /**
   * Dependency Proxy blobs.
   */
  dependencyProxyBlobs: IXGitLabDependencyProxyBlobConnection | null;

  /**
   * Number of dependency proxy images cached in the group.
   */
  dependencyProxyImageCount: number;

  /**
   * Prefix for pulling images when using the dependency proxy.
   */
  dependencyProxyImagePrefix: string;

  /**
   * Dependency proxy TTL policy for the group.
   */
  dependencyProxyImageTtlPolicy: IXGitLabDependencyProxyImageTtlGroupPolicy | null;

  /**
   * Dependency Proxy manifests.
   */
  dependencyProxyManifests: IXGitLabDependencyProxyManifestConnection | null;

  /**
   * Dependency Proxy settings for the group.
   */
  dependencyProxySetting: IXGitLabDependencyProxySetting | null;

  /**
   * Total size of the dependency proxy cached images.
   */
  dependencyProxyTotalSize: string;

  /**
   * List of descendant groups of this group.
   */
  descendantGroups: IXGitLabGroupConnection | null;

  /**
   * Description of the namespace.
   */
  description: string | null;

  /**
   * The GitLab Flavored Markdown rendering of `description`
   */
  descriptionHtml: string | null;

  /**
   * Group's DORA metrics.
   */
  dora: IXGitLabDora | null;

  /**
   * Indicates if a group has email notifications disabled.
   */
  emailsDisabled: boolean | null;

  /**
   * Find a single epic.
   */
  epic: IXGitLabEpic | null;

  /**
   * Find a single epic board.
   */
  epicBoard: IXGitLabEpicBoard | null;

  /**
   * Find epic boards.
   */
  epicBoards: IXGitLabEpicBoardConnection | null;

  /**
   * Find epics.
   */
  epics: IXGitLabEpicConnection | null;

  /**
   * Indicates if Epics are enabled for namespace
   */
  epicsEnabled: boolean | null;

  /**
   * Full name of the namespace.
   */
  fullName: string;

  /**
   * Full path of the namespace.
   */
  fullPath: string;

  /**
   * A membership of a user within this group.
   */
  groupMembers: IXGitLabGroupMemberConnection | null;

  /**
   * ID of the namespace.
   */
  id: string;

  /**
   * Status of the temporary storage increase.
   */
  isTemporaryStorageIncreaseEnabled: boolean;

  /**
   * Issues for projects in this group.
   */
  issues: IXGitLabIssueConnection | null;

  /**
   * Find iteration cadences.
   */
  iterationCadences: IXGitLabIterationCadenceConnection | null;

  /**
   * Find iterations.
   */
  iterations: IXGitLabIterationConnection | null;

  /**
   * Label available on this group.
   */
  label: IXGitLabLabel | null;

  /**
   * Labels available on this group.
   */
  labels: IXGitLabLabelConnection | null;

  /**
   * Indicates if Large File Storage (LFS) is enabled for namespace.
   */
  lfsEnabled: boolean | null;

  /**
   * Indicates if a group is disabled from getting mentioned.
   */
  mentionsDisabled: boolean | null;

  /**
   * Merge requests for projects in this group.
   */
  mergeRequests: IXGitLabMergeRequestConnection | null;

  /**
   * Milestones of the group.
   */
  milestones: IXGitLabMilestoneConnection | null;

  /**
   * Name of the namespace.
   */
  name: string;

  /**
   * Find organizations of this group.
   */
  organizations: IXGitLabCustomerRelationsOrganizationConnection | null;

  /**
   * Package settings for the namespace.
   */
  packageSettings: IXGitLabPackageSettings | null;

  /**
   * Packages of the group.
   */
  packages: IXGitLabPackageConnection | null;

  /**
   * Parent group.
   */
  parent: IXGitLabGroup | null;

  /**
   * Path of the namespace.
   */
  path: string;

  /**
   * Permission level required to create projects in the group.
   */
  projectCreationLevel: string | null;

  /**
   * Projects within this namespace.
   */
  projects: IXGitLabProjectConnection;

  /**
   * Number of projects in the root namespace where the repository size exceeds the limit.
   */
  repositorySizeExcessProjectCount: number;

  /**
   * Indicates if users can request access to namespace.
   */
  requestAccessEnabled: boolean | null;

  /**
   * Indicates if all users in this group are required to set up two-factor authentication.
   */
  requireTwoFactorAuthentication: boolean | null;

  /**
   * Aggregated storage statistics of the namespace. Only available for root namespaces.
   */
  rootStorageStatistics: IXGitLabRootStorageStatistics | null;

  /**
   * Find runners visible to the current user.
   */
  runners: IXGitLabCiRunnerConnection | null;

  /**
   * Indicates if sharing a project with another group within this group is prevented.
   */
  shareWithGroupLock: boolean | null;

  /**
   * Shared runners availability for the namespace and its descendants.
   */
  sharedRunnersSetting: XGitLabSharedRunnersSetting | null;

  /**
   * Group statistics.
   */
  stats: IXGitLabGroupStats | null;

  /**
   * Total storage limit of the root namespace in bytes.
   */
  storageSizeLimit: number | null;

  /**
   * Permission level required to create subgroups within the group.
   */
  subgroupCreationLevel: string | null;

  /**
   * Date until the temporary storage increase is active.
   */
  temporaryStorageIncreaseEndsOn: any | null;

  /**
   * Time logged on issues and merge requests in the group and its subgroups.
   */
  timelogs: IXGitLabTimelogConnection;

  /**
   * Total repository size of all projects in the root namespace in bytes.
   */
  totalRepositorySize: number | null;

  /**
   * Total excess repository size of all projects in the root namespace in bytes.
   */
  totalRepositorySizeExcess: number | null;

  /**
   * Time before two-factor authentication is enforced.
   */
  twoFactorGracePeriod: number | null;

  /**
   * Permissions for the current user on the resource
   */
  userPermissions: IXGitLabGroupPermissions;

  /**
   * Visibility of the namespace.
   */
  visibility: string | null;

  /**
   * Vulnerabilities reported on the projects in the group and its subgroups.
   */
  vulnerabilities: IXGitLabVulnerabilityConnection | null;

  /**
   * The historical number of vulnerabilities per day for the projects in the group and its subgroups.
   */
  vulnerabilitiesCountByDay: IXGitLabVulnerabilitiesCountByDayConnection | null;

  /**
   * Represents vulnerable project counts for each grade.
   */
  vulnerabilityGrades: Array<IXGitLabVulnerableProjectsByGrade>;

  /**
   * Vulnerability scanners reported on the project vulnerabilities of the group and its subgroups.
   */
  vulnerabilityScanners: IXGitLabVulnerabilityScannerConnection | null;

  /**
   * Counts for each vulnerability severity in the group and its subgroups.
   */
  vulnerabilitySeveritiesCount: IXGitLabVulnerabilitySeveritiesCount | null;

  /**
   * Web URL of the group.
   */
  webUrl: string;
}

export interface IBoardOnXGitLabGroupArguments {
  /**
   * ID of the board.
   */
  id: any;
}

export interface IBoardsOnXGitLabGroupArguments {
  /**
   * Find a board by its ID.
   */
  id?: any | null;

  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface ICodeCoverageActivitiesOnXGitLabGroupArguments {
  /**
   * First day for which to fetch code coverage activity (maximum time window is set to 90 days).
   */
  startDate: any;

  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IComplianceFrameworksOnXGitLabGroupArguments {
  /**
   * Global ID of a specific compliance framework to return.
   */
  id?: any | null;

  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IContactsOnXGitLabGroupArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IContainerRepositoriesOnXGitLabGroupArguments {
  /**
   * Filter the container repositories by their name.
   */
  name?: string | null;

  /**
   * Sort container repositories by this criteria.
   * @default "created_desc"
   */
  sort?: XGitLabContainerRepositorySort | null;

  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface ICustomEmojiOnXGitLabGroupArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IDependencyProxyBlobsOnXGitLabGroupArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IDependencyProxyManifestsOnXGitLabGroupArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IDescendantGroupsOnXGitLabGroupArguments {
  /**
   * List of descendant groups of the parent group.
   * @default true
   */
  includeParentDescendants?: boolean | null;

  /**
   * Limit result to groups owned by authenticated user.
   */
  owned?: boolean | null;

  /**
   * Search query for group name or group full path.
   */
  search?: string | null;

  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IEpicOnXGitLabGroupArguments {
  /**
   * List items overlapping the given timeframe.
   */
  timeframe?: IXGitLabTimeframe | null;

  /**
   * Search query for title or description.
   */
  search?: string | null;

  /**
   * IID of the epic, e.g., "1".
   */
  iid?: string | null;

  /**
   * List of IIDs of epics, e.g., `[1, 2]`.
   */
  iids?: Array<string> | null;

  /**
   * Filter epics by state.
   */
  state?: XGitLabEpicState | null;

  /**
   * Specify the fields to perform the search in. Defaults to `[TITLE, DESCRIPTION]`. Requires the `search` argument.
   */
  in?: Array<XGitLabIssuableSearchableField> | null;

  /**
   * List epics by sort order.
   */
  sort?: XGitLabEpicSort | null;

  /**
   * Filter epics by author.
   */
  authorUsername?: string | null;

  /**
   * Filter epics by labels.
   */
  labelName?: Array<string> | null;

  /**
   * Filter epics by milestone title, computed from epic's issues.
   */
  milestoneTitle?: string | null;

  /**
   * Filter epics by IID for autocomplete.
   */
  iidStartsWith?: string | null;

  /**
   * Include epics from ancestor groups.
   * @default false
   */
  includeAncestorGroups?: boolean | null;

  /**
   * Include epics from descendant groups.
   * @default true
   */
  includeDescendantGroups?: boolean | null;

  /**
   * Filter epics by given confidentiality.
   */
  confidential?: boolean | null;

  /**
   * Filter by reaction emoji applied by the current user.
   */
  myReactionEmoji?: string | null;

  /**
   * Negated epic arguments.
   */
  not?: IXGitLabNegatedEpicFilterInput | null;
}

export interface IEpicBoardOnXGitLabGroupArguments {
  /**
   * Find an epic board by ID.
   */
  id: any;
}

export interface IEpicBoardsOnXGitLabGroupArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IEpicsOnXGitLabGroupArguments {
  /**
   * List items overlapping the given timeframe.
   */
  timeframe?: IXGitLabTimeframe | null;

  /**
   * Search query for title or description.
   */
  search?: string | null;

  /**
   * IID of the epic, e.g., "1".
   */
  iid?: string | null;

  /**
   * List of IIDs of epics, e.g., `[1, 2]`.
   */
  iids?: Array<string> | null;

  /**
   * Filter epics by state.
   */
  state?: XGitLabEpicState | null;

  /**
   * Specify the fields to perform the search in. Defaults to `[TITLE, DESCRIPTION]`. Requires the `search` argument.
   */
  in?: Array<XGitLabIssuableSearchableField> | null;

  /**
   * List epics by sort order.
   */
  sort?: XGitLabEpicSort | null;

  /**
   * Filter epics by author.
   */
  authorUsername?: string | null;

  /**
   * Filter epics by labels.
   */
  labelName?: Array<string> | null;

  /**
   * Filter epics by milestone title, computed from epic's issues.
   */
  milestoneTitle?: string | null;

  /**
   * Filter epics by IID for autocomplete.
   */
  iidStartsWith?: string | null;

  /**
   * Include epics from ancestor groups.
   * @default false
   */
  includeAncestorGroups?: boolean | null;

  /**
   * Include epics from descendant groups.
   * @default true
   */
  includeDescendantGroups?: boolean | null;

  /**
   * Filter epics by given confidentiality.
   */
  confidential?: boolean | null;

  /**
   * Filter by reaction emoji applied by the current user.
   */
  myReactionEmoji?: string | null;

  /**
   * Negated epic arguments.
   */
  not?: IXGitLabNegatedEpicFilterInput | null;

  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IGroupMembersOnXGitLabGroupArguments {
  /**
   * Search query.
   */
  search?: string | null;

  /**
   * Filter members by the given member relations.
   * @default ["DIRECT","INHERITED"]
   */
  relations?: Array<XGitLabGroupMemberRelation> | null;

  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IIssuesOnXGitLabGroupArguments {
  /**
   * Search query for title or description.
   */
  search?: string | null;

  /**
   * IID of the issue. For example, "1".
   */
  iid?: string | null;

  /**
   * List of IIDs of issues. For example, `["1", "2"]`.
   */
  iids?: Array<string> | null;

  /**
   * Labels applied to this issue.
   */
  labelName?: Array<string | null> | null;

  /**
   * Milestone applied to this issue.
   */
  milestoneTitle?: Array<string | null> | null;

  /**
   * Username of the author of the issue.
   */
  authorUsername?: string | null;

  /**
   * Usernames of users assigned to the issue.
   */
  assigneeUsernames?: Array<string> | null;

  /**
   * ID of a user assigned to the issues. Wildcard values "NONE" and "ANY" are supported.
   */
  assigneeId?: string | null;

  /**
   * Issues created before this date.
   */
  createdBefore?: any | null;

  /**
   * Issues created after this date.
   */
  createdAfter?: any | null;

  /**
   * Issues updated before this date.
   */
  updatedBefore?: any | null;

  /**
   * Issues updated after this date.
   */
  updatedAfter?: any | null;

  /**
   * Issues closed before this date.
   */
  closedBefore?: any | null;

  /**
   * Issues closed after this date.
   */
  closedAfter?: any | null;

  /**
   * Filter issues by the given issue types.
   */
  types?: Array<XGitLabIssueType> | null;

  /**
   * Filter issues by milestone ID wildcard.
   */
  milestoneWildcardId?: XGitLabMilestoneWildcardId | null;

  /**
   * Filter by reaction emoji applied by the current user. Wildcard values "NONE" and "ANY" are supported.
   */
  myReactionEmoji?: string | null;

  /**
   * Filter for confidential issues. If "false", excludes confidential issues. If "true", returns only confidential issues.
   */
  confidential?: boolean | null;

  /**
   * Negated arguments.
   */
  not?: IXGitLabNegatedIssueFilterInput | null;

  /**
   * Current state of this issue.
   */
  state?: XGitLabIssuableState | null;

  /**
   * Sort issues by this criteria.
   * @default "created_desc"
   */
  sort?: XGitLabIssueSort | null;

  /**
   * List of iteration Global IDs applied to the issue.
   */
  iterationId?: Array<string | null> | null;

  /**
   * Filter by iteration ID wildcard.
   */
  iterationWildcardId?: XGitLabIterationWildcardId | null;

  /**
   * ID of an epic associated with the issues, "none" and "any" values are supported.
   */
  epicId?: string | null;

  /**
   * Whether to include subepics when filtering issues by epicId.
   */
  includeSubepics?: boolean | null;

  /**
   * Weight applied to the issue, "none" and "any" values are supported.
   */
  weight?: string | null;

  /**
   * Include issues belonging to subgroups
   * @default false
   */
  includeSubgroups?: boolean | null;

  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IIterationCadencesOnXGitLabGroupArguments {
  /**
   * Global ID of the iteration cadence to look up.
   */
  id?: any | null;

  /**
   * Fuzzy search by title.
   */
  title?: string | null;

  /**
   * Duration in weeks of the iterations within this cadence.
   */
  durationInWeeks?: number | null;

  /**
   * Whether the iteration cadence should automatically generate future iterations.
   */
  automatic?: boolean | null;

  /**
   * Whether the iteration cadence is active.
   */
  active?: boolean | null;

  /**
   * Whether to include ancestor groups to search iterations cadences in.
   */
  includeAncestorGroups?: boolean | null;

  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IIterationsOnXGitLabGroupArguments {
  /**
   * List items overlapping the given timeframe.
   */
  timeframe?: IXGitLabTimeframe | null;

  /**
   * Filter iterations by state.
   */
  state?: XGitLabIterationState | null;

  /**
   * Fuzzy search by title.
   */
  title?: string | null;

  /**
   * Global ID of the Iteration to look up.
   */
  id?: string | null;

  /**
   * Internal ID of the Iteration to look up.
   */
  iid?: string | null;

  /**
   * Whether to include ancestor iterations. Defaults to true.
   */
  includeAncestors?: boolean | null;

  /**
   * Global iteration cadence IDs by which to look up the iterations.
   */
  iterationCadenceIds?: Array<any> | null;

  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface ILabelOnXGitLabGroupArguments {
  /**
   * Title of the label.
   */
  title: string;
}

export interface ILabelsOnXGitLabGroupArguments {
  /**
   * Search term to find labels with.
   */
  searchTerm?: string | null;

  /**
   * Include labels from ancestor groups.
   * @default false
   */
  includeAncestorGroups?: boolean | null;

  /**
   * Include labels from descendant groups.
   * @default false
   */
  includeDescendantGroups?: boolean | null;

  /**
   * Include only group level labels.
   * @default false
   */
  onlyGroupLabels?: boolean | null;

  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IMergeRequestsOnXGitLabGroupArguments {
  /**
   * Array of IIDs of merge requests, for example `[1, 2]`.
   */
  iids?: Array<string> | null;

  /**
   * Array of source branch names.
   * All resolved merge requests will have one of these branches as their source.
   */
  sourceBranches?: Array<string> | null;

  /**
   * Array of target branch names.
   * All resolved merge requests will have one of these branches as their target.
   */
  targetBranches?: Array<string> | null;

  /**
   * Merge request state. If provided, all resolved merge requests will have this state.
   */
  state?: XGitLabMergeRequestState | null;

  /**
   * Array of label names. All resolved merge requests will have all of these labels.
   */
  labels?: Array<string> | null;

  /**
   * Merge requests merged after this date.
   */
  mergedAfter?: any | null;

  /**
   * Merge requests merged before this date.
   */
  mergedBefore?: any | null;

  /**
   * Title of the milestone.
   */
  milestoneTitle?: string | null;

  /**
   * Sort merge requests by this criteria.
   * @default "created_desc"
   */
  sort?: XGitLabMergeRequestSort | null;

  /**
   * Merge requests created after this timestamp.
   */
  createdAfter?: any | null;

  /**
   * Merge requests created before this timestamp.
   */
  createdBefore?: any | null;

  /**
   * List of negated arguments.
   * Warning: this argument is experimental and a subject to change in future.
   */
  not?: IXGitLabMergeRequestsResolverNegatedParams | null;

  /**
   * Include merge requests belonging to subgroups
   * @default false
   */
  includeSubgroups?: boolean | null;

  /**
   * Username of the assignee.
   */
  assigneeUsername?: string | null;

  /**
   * Username of the author.
   */
  authorUsername?: string | null;

  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IMilestonesOnXGitLabGroupArguments {
  /**
   * List items overlapping the given timeframe.
   */
  timeframe?: IXGitLabTimeframe | null;

  /**
   * Array of global milestone IDs, e.g., `"gid://gitlab/Milestone/1"`.
   */
  ids?: Array<string> | null;

  /**
   * Filter milestones by state.
   */
  state?: XGitLabMilestoneStateEnum | null;

  /**
   * Title of the milestone.
   */
  title?: string | null;

  /**
   * Search string for the title.
   */
  searchTitle?: string | null;

  /**
   * Date the milestone contains.
   */
  containingDate?: any | null;

  /**
   * Sort milestones by this criteria.
   * @default "DUE_DATE_ASC"
   */
  sort?: XGitLabMilestoneSort | null;

  /**
   * Include milestones from all subgroups and subprojects.
   */
  includeDescendants?: boolean | null;

  /**
   * Include milestones from all parent groups.
   */
  includeAncestors?: boolean | null;

  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IOrganizationsOnXGitLabGroupArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IPackagesOnXGitLabGroupArguments {
  /**
   * Sort packages by this criteria.
   * @default "CREATED_DESC"
   */
  sort?: XGitLabPackageGroupSort | null;

  /**
   * Search a package by name.
   * @default null
   */
  packageName?: string | null;

  /**
   * Filter a package by type.
   * @default null
   */
  packageType?: XGitLabPackageTypeEnum | null;

  /**
   * Filter a package by status.
   * @default null
   */
  status?: XGitLabPackageStatus | null;

  /**
   * Include versionless packages.
   * @default false
   */
  includeVersionless?: boolean | null;

  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IProjectsOnXGitLabGroupArguments {
  /**
   * Include also subgroup projects.
   * @default false
   */
  includeSubgroups?: boolean | null;

  /**
   * Search project with most similar names or paths.
   * @default null
   */
  search?: string | null;

  /**
   * Sort projects by this criteria.
   * @default null
   */
  sort?: XGitLabNamespaceProjectSort | null;

  /**
   * Filter projects by IDs.
   * @default null
   */
  ids?: Array<string> | null;

  /**
   * Returns only the projects which have code coverage.
   * @default false
   */
  hasCodeCoverage?: boolean | null;

  /**
   * Returns only the projects which have vulnerabilities.
   * @default false
   */
  hasVulnerabilities?: boolean | null;

  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IRunnersOnXGitLabGroupArguments {
  /**
   * Filter runners by status.
   */
  status?: XGitLabCiRunnerStatus | null;

  /**
   * Filter runners by type.
   */
  type?: XGitLabCiRunnerType | null;

  /**
   * Filter by tags associated with the runner (comma-separated or array).
   */
  tagList?: Array<string> | null;

  /**
   * Filter by full token or partial text in description field.
   */
  search?: string | null;

  /**
   * Sort order of results.
   */
  sort?: XGitLabCiRunnerSort | null;

  /**
   * Control which runners to include in the results.
   * @default "DESCENDANTS"
   */
  membership?: XGitLabRunnerMembershipFilter | null;

  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface ITimelogsOnXGitLabGroupArguments {
  /**
   * List timelogs within a date range where the logged date is equal to or after startDate.
   */
  startDate?: any | null;

  /**
   * List timelogs within a date range where the logged date is equal to or before endDate.
   */
  endDate?: any | null;

  /**
   * List timelogs within a time range where the logged time is equal to or after startTime.
   */
  startTime?: any | null;

  /**
   * List timelogs within a time range where the logged time is equal to or before endTime.
   */
  endTime?: any | null;

  /**
   * List timelogs for a project.
   */
  projectId?: any | null;

  /**
   * List timelogs for a group.
   */
  groupId?: any | null;

  /**
   * List timelogs for a user.
   */
  username?: string | null;

  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IVulnerabilitiesOnXGitLabGroupArguments {
  /**
   * Filter vulnerabilities by project.
   */
  projectId?: Array<string> | null;

  /**
   * Filter vulnerabilities by report type.
   */
  reportType?: Array<XGitLabVulnerabilityReportType> | null;

  /**
   * Filter vulnerabilities by severity.
   */
  severity?: Array<XGitLabVulnerabilitySeverity> | null;

  /**
   * Filter vulnerabilities by state.
   */
  state?: Array<XGitLabVulnerabilityState> | null;

  /**
   * Filter vulnerabilities by VulnerabilityScanner.externalId.
   */
  scanner?: Array<string> | null;

  /**
   * Filter vulnerabilities by scanner ID.
   */
  scannerId?: Array<any> | null;

  /**
   * List vulnerabilities by sort order.
   * @default "severity_desc"
   */
  sort?: XGitLabVulnerabilitySort | null;

  /**
   * Returns only the vulnerabilities which have been resolved on default branch.
   */
  hasResolution?: boolean | null;

  /**
   * Returns only the vulnerabilities which have linked issues.
   */
  hasIssues?: boolean | null;

  /**
   * Filter vulnerabilities by location image. When this filter is present, the
   * response only matches entries for a `reportType` that includes
   * `container_scanning`, `cluster_image_scanning`.
   */
  image?: Array<string> | null;

  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IVulnerabilitiesCountByDayOnXGitLabGroupArguments {
  /**
   * First day for which to fetch vulnerability history.
   */
  startDate: any;

  /**
   * Last day for which to fetch vulnerability history.
   */
  endDate: any;

  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IVulnerabilityGradesOnXGitLabGroupArguments {
  /**
   * Include grades belonging to subgroups.
   * @default false
   */
  includeSubgroups?: boolean | null;
}

export interface IVulnerabilityScannersOnXGitLabGroupArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IVulnerabilitySeveritiesCountOnXGitLabGroupArguments {
  /**
   * Filter vulnerabilities by project.
   */
  projectId?: Array<string> | null;

  /**
   * Filter vulnerabilities by report type.
   */
  reportType?: Array<XGitLabVulnerabilityReportType> | null;

  /**
   * Filter vulnerabilities by severity.
   */
  severity?: Array<XGitLabVulnerabilitySeverity> | null;

  /**
   * Filter vulnerabilities by state.
   */
  state?: Array<XGitLabVulnerabilityState> | null;

  /**
   * Filter vulnerabilities by scanner.
   */
  scanner?: Array<string> | null;

  /**
   * Filter vulnerabilities by scanner ID.
   */
  scannerId?: Array<any> | null;

  /**
   * Filter vulnerabilities that do or do not have issues.
   */
  hasIssues?: boolean | null;

  /**
   * Filter vulnerabilities that do or do not have a resolution.
   */
  hasResolution?: boolean | null;
}

/**
 * The connection type for Group.
 */
export interface IXGitLabGroupConnection {
  __typename: '_xGitLabGroupConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitLabGroupEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitLabGroup | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitLabPageInfo;
}

/**
 * An edge in a connection.
 */
export interface IXGitLabGroupEdge {
  __typename: '_xGitLabGroupEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitLabGroup | null;
}

/**
 * Represents a Group Membership
 */
export interface IXGitLabGroupMember {
  __typename: '_xGitLabGroupMember';

  /**
   * GitLab::Access level.
   */
  accessLevel: IXGitLabAccessLevel | null;

  /**
   * Date and time the membership was created.
   */
  createdAt: any | null;

  /**
   * User that authorized membership.
   */
  createdBy: IXGitLabUserCore | null;

  /**
   * Date and time the membership expires.
   */
  expiresAt: any | null;

  /**
   * Group that a User is a member of.
   */
  group: IXGitLabGroup | null;

  /**
   * ID of the member.
   */
  id: string;

  /**
   * Date and time the membership was last updated.
   */
  updatedAt: any | null;

  /**
   * User that is associated with the member object.
   */
  user: IXGitLabUserCore | null;

  /**
   * Permissions for the current user on the resource
   */
  userPermissions: IXGitLabGroupPermissions;
}

/**
 * The connection type for GroupMember.
 */
export interface IXGitLabGroupMemberConnection {
  __typename: '_xGitLabGroupMemberConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitLabGroupMemberEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitLabGroupMember | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitLabPageInfo;
}

/**
 * An edge in a connection.
 */
export interface IXGitLabGroupMemberEdge {
  __typename: '_xGitLabGroupMemberEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitLabGroupMember | null;
}

/**
 * Group member relation
 */
export const enum XGitLabGroupMemberRelation {
  /**
   * Members in the group itself.
   */
  DIRECT = 'DIRECT',

  /**
   * Members in the group's ancestor groups.
   */
  INHERITED = 'INHERITED',

  /**
   * Members in the group's subgroups.
   */
  DESCENDANTS = 'DESCENDANTS',
}

/**
 * User permission on groups
 */
export const enum XGitLabGroupPermission {
  /**
   * Groups where the user can create projects.
   */
  CREATE_PROJECTS = 'CREATE_PROJECTS',
}

export interface IXGitLabGroupPermissions {
  __typename: '_xGitLabGroupPermissions';

  /**
   * Indicates the user can perform `create_projects` on this resource
   */
  createProjects: boolean;

  /**
   * Indicates the user can perform `read_group` on this resource
   */
  readGroup: boolean;
}

/**
 * Contains release-related statistics about a group
 */
export interface IXGitLabGroupReleaseStats {
  __typename: '_xGitLabGroupReleaseStats';

  /**
   * Total number of releases in all descendant projects of the group.
   */
  releasesCount: number | null;

  /**
   * Percentage of the group's descendant projects that have at least one release.
   */
  releasesPercentage: number | null;
}

/**
 * Contains statistics about a group
 */
export interface IXGitLabGroupStats {
  __typename: '_xGitLabGroupStats';

  /**
   * Statistics related to releases within the group.
   */
  releaseStats: IXGitLabGroupReleaseStats | null;
}

/**
 * Autogenerated input type of GroupUpdate
 */
export interface IXGitLabGroupUpdateInput {
  /**
   * Full path of the group that will be updated.
   */
  fullPath: string;

  /**
   * Shared runners availability for the namespace and its descendants.
   */
  sharedRunnersSetting: XGitLabSharedRunnersSetting;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of GroupUpdate
 */
export interface IXGitLabGroupUpdatePayload {
  __typename: '_xGitLabGroupUpdatePayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * Errors encountered during execution of the mutation.
   */
  errors: Array<string>;

  /**
   * Group after update.
   */
  group: IXGitLabGroup | null;
}

/**
 * Represents the Geo sync and verification state of a group wiki repository
 */
export interface IXGitLabGroupWikiRepositoryRegistry {
  __typename: '_xGitLabGroupWikiRepositoryRegistry';

  /**
   * Timestamp when the GroupWikiRepositoryRegistry was created
   */
  createdAt: any | null;

  /**
   * ID of the Group Wiki Repository.
   */
  groupWikiRepositoryId: string;

  /**
   * ID of the GroupWikiRepositoryRegistry
   */
  id: string;

  /**
   * Error message during sync of the GroupWikiRepositoryRegistry
   */
  lastSyncFailure: string | null;

  /**
   * Timestamp of the most recent successful sync of the GroupWikiRepositoryRegistry
   */
  lastSyncedAt: any | null;

  /**
   * Timestamp after which the GroupWikiRepositoryRegistry should be resynced
   */
  retryAt: any | null;

  /**
   * Number of consecutive failed sync attempts of the GroupWikiRepositoryRegistry
   */
  retryCount: number | null;

  /**
   * Sync state of the GroupWikiRepositoryRegistry
   */
  state: XGitLabRegistryState | null;
}

/**
 * The connection type for GroupWikiRepositoryRegistry.
 */
export interface IXGitLabGroupWikiRepositoryRegistryConnection {
  __typename: '_xGitLabGroupWikiRepositoryRegistryConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitLabGroupWikiRepositoryRegistryEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitLabGroupWikiRepositoryRegistry | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitLabPageInfo;
}

/**
 * An edge in a connection.
 */
export interface IXGitLabGroupWikiRepositoryRegistryEdge {
  __typename: '_xGitLabGroupWikiRepositoryRegistryEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitLabGroupWikiRepositoryRegistry | null;
}

/**
 * Health status of an issue or epic
 */
export const enum XGitLabHealthStatus {
  /**
   * On track
   */
  onTrack = 'onTrack',

  /**
   * Needs attention
   */
  needsAttention = 'needsAttention',

  /**
   * At risk
   */
  atRisk = 'atRisk',
}

/**
 * Autogenerated input type of HttpIntegrationCreate
 */
export interface IXGitLabHttpIntegrationCreateInput {
  /**
   * Project to create the integration in.
   */
  projectPath: string;

  /**
   * Name of the integration.
   */
  name: string;

  /**
   * Whether the integration is receiving alerts.
   */
  active: boolean;

  /**
   * Example of an alert payload.
   */
  payloadExample?: any | null;

  /**
   * Custom mapping of GitLab alert attributes to fields from the payload example.
   */
  payloadAttributeMappings?: Array<IXGitLabAlertManagementPayloadAlertFieldInput> | null;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of HttpIntegrationCreate
 */
export interface IXGitLabHttpIntegrationCreatePayload {
  __typename: '_xGitLabHttpIntegrationCreatePayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * Errors encountered during execution of the mutation.
   */
  errors: Array<string>;

  /**
   * HTTP integration.
   */
  integration: IXGitLabAlertManagementHttpIntegration | null;
}

/**
 * Autogenerated input type of HttpIntegrationDestroy
 */
export interface IXGitLabHttpIntegrationDestroyInput {
  /**
   * ID of the integration to remove.
   */
  id: any;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of HttpIntegrationDestroy
 */
export interface IXGitLabHttpIntegrationDestroyPayload {
  __typename: '_xGitLabHttpIntegrationDestroyPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * Errors encountered during execution of the mutation.
   */
  errors: Array<string>;

  /**
   * HTTP integration.
   */
  integration: IXGitLabAlertManagementHttpIntegration | null;
}

/**
 * Autogenerated input type of HttpIntegrationResetToken
 */
export interface IXGitLabHttpIntegrationResetTokenInput {
  /**
   * ID of the integration to mutate.
   */
  id: any;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of HttpIntegrationResetToken
 */
export interface IXGitLabHttpIntegrationResetTokenPayload {
  __typename: '_xGitLabHttpIntegrationResetTokenPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * Errors encountered during execution of the mutation.
   */
  errors: Array<string>;

  /**
   * HTTP integration.
   */
  integration: IXGitLabAlertManagementHttpIntegration | null;
}

/**
 * Autogenerated input type of HttpIntegrationUpdate
 */
export interface IXGitLabHttpIntegrationUpdateInput {
  /**
   * ID of the integration to mutate.
   */
  id: any;

  /**
   * Name of the integration.
   */
  name?: string | null;

  /**
   * Whether the integration is receiving alerts.
   */
  active?: boolean | null;

  /**
   * Example of an alert payload.
   */
  payloadExample?: any | null;

  /**
   * Custom mapping of GitLab alert attributes to fields from the payload example.
   */
  payloadAttributeMappings?: Array<IXGitLabAlertManagementPayloadAlertFieldInput> | null;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of HttpIntegrationUpdate
 */
export interface IXGitLabHttpIntegrationUpdatePayload {
  __typename: '_xGitLabHttpIntegrationUpdatePayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * Errors encountered during execution of the mutation.
   */
  errors: Array<string>;

  /**
   * HTTP integration.
   */
  integration: IXGitLabAlertManagementHttpIntegration | null;
}

/**
 * Describes an incident management on-call rotation
 */
export interface IXGitLabIncidentManagementOncallRotation {
  __typename: '_xGitLabIncidentManagementOncallRotation';

  /**
   * Active period for the on-call rotation.
   */
  activePeriod: IXGitLabOncallRotationActivePeriodType | null;

  /**
   * End date and time of the on-call rotation.
   */
  endsAt: any | null;

  /**
   * ID of the on-call rotation.
   */
  id: any;

  /**
   * Length of the on-call schedule, in the units specified by lengthUnit.
   */
  length: number | null;

  /**
   * Unit of the on-call rotation length.
   */
  lengthUnit: XGitLabOncallRotationUnitEnum | null;

  /**
   * Name of the on-call rotation.
   */
  name: string;

  /**
   * Participants of the on-call rotation.
   */
  participants: IXGitLabOncallParticipantTypeConnection | null;

  /**
   * Blocks of time for which a participant is on-call within a given time frame. Time frame cannot exceed one month.
   */
  shifts: IXGitLabIncidentManagementOncallShiftConnection | null;

  /**
   * Start date of the on-call rotation.
   */
  startsAt: any | null;
}

export interface IParticipantsOnXGitLabIncidentManagementOncallRotationArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IShiftsOnXGitLabIncidentManagementOncallRotationArguments {
  /**
   * Start of timeframe to include shifts for.
   */
  startTime: any;

  /**
   * End of timeframe to include shifts for. Cannot exceed one month after start.
   */
  endTime: any;

  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

/**
 * The connection type for IncidentManagementOncallRotation.
 */
export interface IXGitLabIncidentManagementOncallRotationConnection {
  __typename: '_xGitLabIncidentManagementOncallRotationConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitLabIncidentManagementOncallRotationEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitLabIncidentManagementOncallRotation | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitLabPageInfo;
}

/**
 * An edge in a connection.
 */
export interface IXGitLabIncidentManagementOncallRotationEdge {
  __typename: '_xGitLabIncidentManagementOncallRotationEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitLabIncidentManagementOncallRotation | null;
}

/**
 * Describes an incident management on-call schedule
 */
export interface IXGitLabIncidentManagementOncallSchedule {
  __typename: '_xGitLabIncidentManagementOncallSchedule';

  /**
   * Description of the on-call schedule.
   */
  description: string | null;

  /**
   * Internal ID of the on-call schedule.
   */
  iid: string;

  /**
   * Name of the on-call schedule.
   */
  name: string;
  oncallUsers: Array<IXGitLabUserCore> | null;

  /**
   * On-call rotation for the on-call schedule.
   */
  rotation: IXGitLabIncidentManagementOncallRotation | null;

  /**
   * On-call rotations for the on-call schedule.
   */
  rotations: IXGitLabIncidentManagementOncallRotationConnection;

  /**
   * Time zone of the on-call schedule.
   */
  timezone: string;
}

export interface IRotationOnXGitLabIncidentManagementOncallScheduleArguments {
  /**
   * ID of the on-call rotation.
   */
  id: any;
}

export interface IRotationsOnXGitLabIncidentManagementOncallScheduleArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

/**
 * The connection type for IncidentManagementOncallSchedule.
 */
export interface IXGitLabIncidentManagementOncallScheduleConnection {
  __typename: '_xGitLabIncidentManagementOncallScheduleConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitLabIncidentManagementOncallScheduleEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitLabIncidentManagementOncallSchedule | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitLabPageInfo;
}

/**
 * An edge in a connection.
 */
export interface IXGitLabIncidentManagementOncallScheduleEdge {
  __typename: '_xGitLabIncidentManagementOncallScheduleEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitLabIncidentManagementOncallSchedule | null;
}

/**
 * A block of time for which a participant is on-call.
 */
export interface IXGitLabIncidentManagementOncallShift {
  __typename: '_xGitLabIncidentManagementOncallShift';

  /**
   * End time of the on-call shift.
   */
  endsAt: any | null;

  /**
   * Participant assigned to the on-call shift.
   */
  participant: IXGitLabOncallParticipantType | null;

  /**
   * Start time of the on-call shift.
   */
  startsAt: any | null;
}

/**
 * The connection type for IncidentManagementOncallShift.
 */
export interface IXGitLabIncidentManagementOncallShiftConnection {
  __typename: '_xGitLabIncidentManagementOncallShiftConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitLabIncidentManagementOncallShiftEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitLabIncidentManagementOncallShift | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitLabPageInfo;
}

/**
 * An edge in a connection.
 */
export interface IXGitLabIncidentManagementOncallShiftEdge {
  __typename: '_xGitLabIncidentManagementOncallShiftEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitLabIncidentManagementOncallShift | null;
}

export interface IXGitLabInstanceSecurityDashboard {
  __typename: '_xGitLabInstanceSecurityDashboard';

  /**
   * Projects selected in Instance Security Dashboard.
   */
  projects: IXGitLabProjectConnection;

  /**
   * Represents vulnerable project counts for each grade.
   */
  vulnerabilityGrades: Array<IXGitLabVulnerableProjectsByGrade>;

  /**
   * Vulnerability scanners reported on the vulnerabilities from projects selected in Instance Security Dashboard.
   */
  vulnerabilityScanners: IXGitLabVulnerabilityScannerConnection | null;

  /**
   * Counts for each vulnerability severity from projects selected in Instance Security Dashboard.
   */
  vulnerabilitySeveritiesCount: IXGitLabVulnerabilitySeveritiesCount | null;
}

export interface IProjectsOnXGitLabInstanceSecurityDashboardArguments {
  /**
   * Search query for project name, path, or description.
   */
  search?: string | null;

  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IVulnerabilityScannersOnXGitLabInstanceSecurityDashboardArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IVulnerabilitySeveritiesCountOnXGitLabInstanceSecurityDashboardArguments {
  /**
   * Filter vulnerabilities by project.
   */
  projectId?: Array<string> | null;

  /**
   * Filter vulnerabilities by report type.
   */
  reportType?: Array<XGitLabVulnerabilityReportType> | null;

  /**
   * Filter vulnerabilities by severity.
   */
  severity?: Array<XGitLabVulnerabilitySeverity> | null;

  /**
   * Filter vulnerabilities by state.
   */
  state?: Array<XGitLabVulnerabilityState> | null;

  /**
   * Filter vulnerabilities by scanner.
   */
  scanner?: Array<string> | null;

  /**
   * Filter vulnerabilities by scanner ID.
   */
  scannerId?: Array<any> | null;

  /**
   * Filter vulnerabilities that do or do not have issues.
   */
  hasIssues?: boolean | null;

  /**
   * Filter vulnerabilities that do or do not have a resolution.
   */
  hasResolution?: boolean | null;
}

/**
 * Represents an issuable.
 */
export type _xGitLabIssuable =
  | IXGitLabEpic
  | IXGitLabIssue
  | IXGitLabMergeRequest;

/**
 * Fields to perform the search in
 */
export const enum XGitLabIssuableSearchableField {
  /**
   * Search in title field.
   */
  TITLE = 'TITLE',

  /**
   * Search in description field.
   */
  DESCRIPTION = 'DESCRIPTION',
}

/**
 * Incident severity
 */
export const enum XGitLabIssuableSeverity {
  /**
   * Unknown severity
   */
  UNKNOWN = 'UNKNOWN',

  /**
   * Low severity
   */
  LOW = 'LOW',

  /**
   * Medium severity
   */
  MEDIUM = 'MEDIUM',

  /**
   * High severity
   */
  HIGH = 'HIGH',

  /**
   * Critical severity
   */
  CRITICAL = 'CRITICAL',
}

/**
 * State of a GitLab issue or merge request
 */
export const enum XGitLabIssuableState {
  /**
   * In open state.
   */
  opened = 'opened',

  /**
   * In closed state.
   */
  closed = 'closed',

  /**
   * Discussion has been locked.
   */
  locked = 'locked',

  /**
   * All available.
   */
  all = 'all',
}

export interface IXGitLabIssue {
  __typename: '_xGitLabIssue';

  /**
   * Alert associated to this issue.
   */
  alertManagementAlert: IXGitLabAlertManagementAlert | null;

  /**
   * Assignees of the issue.
   */
  assignees: IXGitLabUserCoreConnection | null;

  /**
   * User that created the issue.
   */
  author: IXGitLabUserCore;

  /**
   * Indicates the issue is blocked.
   */
  blocked: boolean;

  /**
   * Count of issues blocking this issue.
   */
  blockedByCount: number | null;

  /**
   * Issues blocking this issue.
   */
  blockedByIssues: IXGitLabIssueConnection | null;

  /**
   * Count of issues this issue is blocking.
   */
  blockingCount: number;

  /**
   * Timestamp of when the issue was closed.
   */
  closedAt: any | null;

  /**
   * Indicates the issue is confidential.
   */
  confidential: boolean;

  /**
   * User specific email address for the issue.
   */
  createNoteEmail: string | null;

  /**
   * Timestamp of when the issue was created.
   */
  createdAt: any;

  /**
   * To-do items for the current user.
   */
  currentUserTodos: IXGitLabTodoConnection;

  /**
   * Customer relations contacts of the issue.
   */
  customerRelationsContacts: IXGitLabCustomerRelationsContactConnection | null;

  /**
   * Description of the issue.
   */
  description: string | null;

  /**
   * The GitLab Flavored Markdown rendering of `description`
   */
  descriptionHtml: string | null;

  /**
   * Collection of design images associated with this issue.
   */
  designCollection: IXGitLabDesignCollection | null;

  /**
   * Indicates discussion is locked on the issue.
   */
  discussionLocked: boolean;

  /**
   * All discussions on this noteable.
   */
  discussions: IXGitLabDiscussionConnection;

  /**
   * Number of downvotes the issue has received.
   */
  downvotes: number;

  /**
   * Due date of the issue.
   */
  dueDate: any | null;

  /**
   * Indicates if a project has email notifications disabled: `true` if email notifications are disabled.
   */
  emailsDisabled: boolean;

  /**
   * Epic to which this issue belongs.
   */
  epic: IXGitLabEpic | null;

  /**
   * Current health status.
   */
  healthStatus: XGitLabHealthStatus | null;

  /**
   * Indicates the issue is hidden because the author has been banned. Will always
   * return `null` if `ban_user_feature_flag` feature flag is disabled.
   */
  hidden: boolean | null;

  /**
   * Human-readable time estimate of the issue.
   */
  humanTimeEstimate: string | null;

  /**
   * Human-readable total time reported as spent on the issue.
   */
  humanTotalTimeSpent: string | null;

  /**
   * ID of the issue.
   */
  id: string;

  /**
   * Internal ID of the issue.
   */
  iid: string;

  /**
   * Iteration of the issue.
   */
  iteration: IXGitLabIteration | null;

  /**
   * Labels of the issue.
   */
  labels: IXGitLabLabelConnection | null;

  /**
   * Number of merge requests that close the issue on merge.
   */
  mergeRequestsCount: number;

  /**
   * Metric images associated to the issue.
   */
  metricImages: Array<IXGitLabMetricImage> | null;

  /**
   * Milestone of the issue.
   */
  milestone: IXGitLabMilestone | null;

  /**
   * Indicates if issue got moved from other project.
   */
  moved: boolean | null;

  /**
   * Updated Issue after it got moved to another project.
   */
  movedTo: IXGitLabIssue | null;

  /**
   * All notes on this noteable.
   */
  notes: IXGitLabNoteConnection;

  /**
   * List of participants in the issue.
   */
  participants: IXGitLabUserCoreConnection | null;

  /**
   * ID of the issue project.
   */
  projectId: number;

  /**
   * Internal reference of the issue. Returned in shortened format by default.
   */
  reference: string;

  /**
   * Relative position of the issue (used for positioning in epic tree and issue boards).
   */
  relativePosition: number | null;

  /**
   * Severity level of the incident.
   */
  severity: XGitLabIssuableSeverity | null;

  /**
   * Timestamp of when the issue SLA expires.
   */
  slaDueAt: any | null;

  /**
   * State of the issue.
   */
  state: XGitLabIssueState;

  /**
   * Indicates whether an issue is published to the status page.
   */
  statusPagePublishedIncident: boolean | null;

  /**
   * Indicates the currently logged in user is subscribed to the issue.
   */
  subscribed: boolean;

  /**
   * Task completion status of the issue.
   */
  taskCompletionStatus: IXGitLabTaskCompletionStatus;

  /**
   * Time estimate of the issue.
   */
  timeEstimate: number;

  /**
   * Timelogs on the issue.
   */
  timelogs: IXGitLabTimelogConnection;

  /**
   * Title of the issue.
   */
  title: string;

  /**
   * The GitLab Flavored Markdown rendering of `title`
   */
  titleHtml: string | null;

  /**
   * Total time reported as spent on the issue.
   */
  totalTimeSpent: number;

  /**
   * Type of the issue.
   */
  type: XGitLabIssueType | null;

  /**
   * Timestamp of when the issue was last updated.
   */
  updatedAt: any;

  /**
   * User that last updated the issue.
   */
  updatedBy: IXGitLabUserCore | null;

  /**
   * Number of upvotes the issue has received.
   */
  upvotes: number;

  /**
   * Number of user discussions in the issue.
   */
  userDiscussionsCount: number;

  /**
   * Number of user notes of the issue.
   */
  userNotesCount: number;

  /**
   * Permissions for the current user on the resource
   */
  userPermissions: IXGitLabIssuePermissions;

  /**
   * Web path of the issue.
   */
  webPath: string;

  /**
   * Web URL of the issue.
   */
  webUrl: string;

  /**
   * Weight of the issue.
   */
  weight: number | null;
}

export interface IAssigneesOnXGitLabIssueArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IBlockedByIssuesOnXGitLabIssueArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface ICurrentUserTodosOnXGitLabIssueArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * State of the to-do items.
   */
  state?: XGitLabTodoStateEnum | null;
}

export interface ICustomerRelationsContactsOnXGitLabIssueArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IDiscussionsOnXGitLabIssueArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface ILabelsOnXGitLabIssueArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface INotesOnXGitLabIssueArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IParticipantsOnXGitLabIssueArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IReferenceOnXGitLabIssueArguments {
  /**
   * Boolean option specifying whether the reference should be returned in full.
   * @default false
   */
  full?: boolean | null;
}

export interface ITimelogsOnXGitLabIssueArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

/**
 * The connection type for Issue.
 */
export interface IXGitLabIssueConnection {
  __typename: '_xGitLabIssueConnection';

  /**
   * Total count of collection.
   */
  count: number;

  /**
   * A list of edges.
   */
  edges: Array<IXGitLabIssueEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitLabIssue | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitLabPageInfo;

  /**
   * Total weight of issues collection.
   */
  weight: number;
}

/**
 * Iteration ID wildcard values for issue creation
 */
export const enum XGitLabIssueCreationIterationWildcardId {
  /**
   * Current iteration.
   */
  CURRENT = 'CURRENT',
}

/**
 * An edge in a connection.
 */
export interface IXGitLabIssueEdge {
  __typename: '_xGitLabIssueEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitLabIssue | null;
}

/**
 * Autogenerated input type of IssueMove
 */
export interface IXGitLabIssueMoveInput {
  /**
   * Project the issue to mutate is in.
   */
  projectPath: string;

  /**
   * IID of the issue to mutate.
   */
  iid: string;

  /**
   * Project to move the issue to.
   */
  targetProjectPath: string;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated input type of IssueMoveList
 */
export interface IXGitLabIssueMoveListInput {
  /**
   * Project the issue to mutate is in.
   */
  projectPath: string;

  /**
   * IID of the issue to mutate.
   */
  iid: string;

  /**
   * Global ID of the board that the issue is in.
   */
  boardId: any;

  /**
   * ID of the board list that the issue will be moved from.
   */
  fromListId?: string | null;

  /**
   * ID of the board list that the issue will be moved to.
   */
  toListId?: string | null;

  /**
   * ID of issue that should be placed before the current issue.
   */
  moveBeforeId?: string | null;

  /**
   * ID of issue that should be placed after the current issue.
   */
  moveAfterId?: string | null;

  /**
   * ID of the parent epic. NULL when removing the association.
   */
  epicId?: any | null;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of IssueMoveList
 */
export interface IXGitLabIssueMoveListPayload {
  __typename: '_xGitLabIssueMoveListPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * Errors encountered during execution of the mutation.
   */
  errors: Array<string>;

  /**
   * Issue after mutation.
   */
  issue: IXGitLabIssue | null;
}

/**
 * Autogenerated return type of IssueMove
 */
export interface IXGitLabIssueMovePayload {
  __typename: '_xGitLabIssueMovePayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * Errors encountered during execution of the mutation.
   */
  errors: Array<string>;

  /**
   * Issue after mutation.
   */
  issue: IXGitLabIssue | null;
}

/**
 * Check permissions for the current user on a issue
 */
export interface IXGitLabIssuePermissions {
  __typename: '_xGitLabIssuePermissions';

  /**
   * Indicates the user can perform `admin_issue` on this resource
   */
  adminIssue: boolean;

  /**
   * Indicates the user can perform `create_design` on this resource
   */
  createDesign: boolean;

  /**
   * Indicates the user can perform `create_note` on this resource
   */
  createNote: boolean;

  /**
   * Indicates the user can perform `destroy_design` on this resource
   */
  destroyDesign: boolean;

  /**
   * Indicates the user can perform `read_design` on this resource
   */
  readDesign: boolean;

  /**
   * Indicates the user can perform `read_issue` on this resource
   */
  readIssue: boolean;

  /**
   * Indicates the user can perform `reopen_issue` on this resource
   */
  reopenIssue: boolean;

  /**
   * Indicates the user can perform `update_issue` on this resource
   */
  updateIssue: boolean;
}

/**
 * Autogenerated input type of IssueSetAssignees
 */
export interface IXGitLabIssueSetAssigneesInput {
  /**
   * Project the issue to mutate is in.
   */
  projectPath: string;

  /**
   * IID of the issue to mutate.
   */
  iid: string;

  /**
   * Usernames to assign to the resource. Replaces existing assignees by default.
   */
  assigneeUsernames: Array<string>;

  /**
   * Operation to perform. Defaults to REPLACE.
   * @default "REPLACE"
   */
  operationMode?: XGitLabMutationOperationMode | null;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of IssueSetAssignees
 */
export interface IXGitLabIssueSetAssigneesPayload {
  __typename: '_xGitLabIssueSetAssigneesPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * Errors encountered during execution of the mutation.
   */
  errors: Array<string>;

  /**
   * Issue after mutation.
   */
  issue: IXGitLabIssue | null;
}

/**
 * Autogenerated input type of IssueSetConfidential
 */
export interface IXGitLabIssueSetConfidentialInput {
  /**
   * Project the issue to mutate is in.
   */
  projectPath: string;

  /**
   * IID of the issue to mutate.
   */
  iid: string;

  /**
   * Whether or not to set the issue as a confidential.
   */
  confidential: boolean;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of IssueSetConfidential
 */
export interface IXGitLabIssueSetConfidentialPayload {
  __typename: '_xGitLabIssueSetConfidentialPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * Errors encountered during execution of the mutation.
   */
  errors: Array<string>;

  /**
   * Issue after mutation.
   */
  issue: IXGitLabIssue | null;
}

/**
 * Autogenerated input type of IssueSetDueDate
 */
export interface IXGitLabIssueSetDueDateInput {
  /**
   * Project the issue to mutate is in.
   */
  projectPath: string;

  /**
   * IID of the issue to mutate.
   */
  iid: string;

  /**
   * Desired due date for the issue. Due date is removed if null.
   */
  dueDate?: any | null;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of IssueSetDueDate
 */
export interface IXGitLabIssueSetDueDatePayload {
  __typename: '_xGitLabIssueSetDueDatePayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * Errors encountered during execution of the mutation.
   */
  errors: Array<string>;

  /**
   * Issue after mutation.
   */
  issue: IXGitLabIssue | null;
}

/**
 * Autogenerated input type of IssueSetEpic
 */
export interface IXGitLabIssueSetEpicInput {
  /**
   * Project the issue to mutate is in.
   */
  projectPath: string;

  /**
   * IID of the issue to mutate.
   */
  iid: string;

  /**
   * Global ID of the epic to be assigned to the issue, epic will be removed if absent or set to null
   */
  epicId?: any | null;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of IssueSetEpic
 */
export interface IXGitLabIssueSetEpicPayload {
  __typename: '_xGitLabIssueSetEpicPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * Errors encountered during execution of the mutation.
   */
  errors: Array<string>;

  /**
   * Issue after mutation.
   */
  issue: IXGitLabIssue | null;
}

/**
 * Autogenerated input type of IssueSetIteration
 */
export interface IXGitLabIssueSetIterationInput {
  /**
   * Project the issue to mutate is in.
   */
  projectPath: string;

  /**
   * IID of the issue to mutate.
   */
  iid: string;

  /**
   * Iteration to assign to the issue.
   */
  iterationId?: any | null;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of IssueSetIteration
 */
export interface IXGitLabIssueSetIterationPayload {
  __typename: '_xGitLabIssueSetIterationPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * Errors encountered during execution of the mutation.
   */
  errors: Array<string>;

  /**
   * Issue after mutation.
   */
  issue: IXGitLabIssue | null;
}

/**
 * Autogenerated input type of IssueSetLocked
 */
export interface IXGitLabIssueSetLockedInput {
  /**
   * Project the issue to mutate is in.
   */
  projectPath: string;

  /**
   * IID of the issue to mutate.
   */
  iid: string;

  /**
   * Whether or not to lock discussion on the issue.
   */
  locked: boolean;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of IssueSetLocked
 */
export interface IXGitLabIssueSetLockedPayload {
  __typename: '_xGitLabIssueSetLockedPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * Errors encountered during execution of the mutation.
   */
  errors: Array<string>;

  /**
   * Issue after mutation.
   */
  issue: IXGitLabIssue | null;
}

/**
 * Autogenerated input type of IssueSetSeverity
 */
export interface IXGitLabIssueSetSeverityInput {
  /**
   * Project the issue to mutate is in.
   */
  projectPath: string;

  /**
   * IID of the issue to mutate.
   */
  iid: string;

  /**
   * Set the incident severity level.
   */
  severity: XGitLabIssuableSeverity;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of IssueSetSeverity
 */
export interface IXGitLabIssueSetSeverityPayload {
  __typename: '_xGitLabIssueSetSeverityPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * Errors encountered during execution of the mutation.
   */
  errors: Array<string>;

  /**
   * Issue after mutation.
   */
  issue: IXGitLabIssue | null;
}

/**
 * Autogenerated input type of IssueSetSubscription
 */
export interface IXGitLabIssueSetSubscriptionInput {
  /**
   * Desired state of the subscription.
   */
  subscribedState: boolean;

  /**
   * Project the issue to mutate is in.
   */
  projectPath: string;

  /**
   * IID of the issue to mutate.
   */
  iid: string;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of IssueSetSubscription
 */
export interface IXGitLabIssueSetSubscriptionPayload {
  __typename: '_xGitLabIssueSetSubscriptionPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * Errors encountered during execution of the mutation.
   */
  errors: Array<string>;

  /**
   * Issue after mutation.
   */
  issue: IXGitLabIssue | null;
}

/**
 * Autogenerated input type of IssueSetWeight
 */
export interface IXGitLabIssueSetWeightInput {
  /**
   * Project the issue to mutate is in.
   */
  projectPath: string;

  /**
   * IID of the issue to mutate.
   */
  iid: string;

  /**
   * The desired weight for the issue. If set to null, weight is removed.
   */
  weight?: number | null;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of IssueSetWeight
 */
export interface IXGitLabIssueSetWeightPayload {
  __typename: '_xGitLabIssueSetWeightPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * Errors encountered during execution of the mutation.
   */
  errors: Array<string>;

  /**
   * Issue after mutation.
   */
  issue: IXGitLabIssue | null;
}

/**
 * Values for sorting issues
 */
export const enum XGitLabIssueSort {
  /**
   * Updated at descending order.
   * @deprecated "This was renamed. Please use `UPDATED_DESC`. Deprecated in 13.5."
   */
  updated_desc = 'updated_desc',

  /**
   * Updated at ascending order.
   * @deprecated "This was renamed. Please use `UPDATED_ASC`. Deprecated in 13.5."
   */
  updated_asc = 'updated_asc',

  /**
   * Created at descending order.
   * @deprecated "This was renamed. Please use `CREATED_DESC`. Deprecated in 13.5."
   */
  created_desc = 'created_desc',

  /**
   * Created at ascending order.
   * @deprecated "This was renamed. Please use `CREATED_ASC`. Deprecated in 13.5."
   */
  created_asc = 'created_asc',

  /**
   * Updated at descending order.
   */
  UPDATED_DESC = 'UPDATED_DESC',

  /**
   * Updated at ascending order.
   */
  UPDATED_ASC = 'UPDATED_ASC',

  /**
   * Created at descending order.
   */
  CREATED_DESC = 'CREATED_DESC',

  /**
   * Created at ascending order.
   */
  CREATED_ASC = 'CREATED_ASC',

  /**
   * Priority by ascending order.
   */
  PRIORITY_ASC = 'PRIORITY_ASC',

  /**
   * Priority by descending order.
   */
  PRIORITY_DESC = 'PRIORITY_DESC',

  /**
   * Label priority by ascending order.
   */
  LABEL_PRIORITY_ASC = 'LABEL_PRIORITY_ASC',

  /**
   * Label priority by descending order.
   */
  LABEL_PRIORITY_DESC = 'LABEL_PRIORITY_DESC',

  /**
   * Milestone due date by ascending order.
   */
  MILESTONE_DUE_ASC = 'MILESTONE_DUE_ASC',

  /**
   * Milestone due date by descending order.
   */
  MILESTONE_DUE_DESC = 'MILESTONE_DUE_DESC',

  /**
   * Due date by ascending order.
   */
  DUE_DATE_ASC = 'DUE_DATE_ASC',

  /**
   * Due date by descending order.
   */
  DUE_DATE_DESC = 'DUE_DATE_DESC',

  /**
   * Relative position by ascending order.
   */
  RELATIVE_POSITION_ASC = 'RELATIVE_POSITION_ASC',

  /**
   * Severity from less critical to more critical.
   */
  SEVERITY_ASC = 'SEVERITY_ASC',

  /**
   * Severity from more critical to less critical.
   */
  SEVERITY_DESC = 'SEVERITY_DESC',

  /**
   * Title by ascending order.
   */
  TITLE_ASC = 'TITLE_ASC',

  /**
   * Title by descending order.
   */
  TITLE_DESC = 'TITLE_DESC',

  /**
   * Number of upvotes (awarded "thumbs up" emoji) by ascending order.
   */
  POPULARITY_ASC = 'POPULARITY_ASC',

  /**
   * Number of upvotes (awarded "thumbs up" emoji) by descending order.
   */
  POPULARITY_DESC = 'POPULARITY_DESC',

  /**
   * Weight by ascending order.
   */
  WEIGHT_ASC = 'WEIGHT_ASC',

  /**
   * Weight by descending order.
   */
  WEIGHT_DESC = 'WEIGHT_DESC',

  /**
   * Published issues shown last.
   */
  PUBLISHED_ASC = 'PUBLISHED_ASC',

  /**
   * Published issues shown first.
   */
  PUBLISHED_DESC = 'PUBLISHED_DESC',

  /**
   * Issues with earliest SLA due time shown first.
   */
  SLA_DUE_AT_ASC = 'SLA_DUE_AT_ASC',

  /**
   * Issues with latest SLA due time shown first.
   */
  SLA_DUE_AT_DESC = 'SLA_DUE_AT_DESC',

  /**
   * Blocking issues count by ascending order.
   */
  BLOCKING_ISSUES_ASC = 'BLOCKING_ISSUES_ASC',

  /**
   * Blocking issues count by descending order.
   */
  BLOCKING_ISSUES_DESC = 'BLOCKING_ISSUES_DESC',
}

/**
 * State of a GitLab issue
 */
export const enum XGitLabIssueState {
  /**
   * In open state.
   */
  opened = 'opened',

  /**
   * In closed state.
   */
  closed = 'closed',

  /**
   * Discussion has been locked.
   */
  locked = 'locked',

  /**
   * All available.
   */
  all = 'all',
}

/**
 * Values for issue state events
 */
export const enum XGitLabIssueStateEvent {
  /**
   * Reopens the issue.
   */
  REOPEN = 'REOPEN',

  /**
   * Closes the issue.
   */
  CLOSE = 'CLOSE',
}

/**
 * Represents total number of issues for the represented statuses
 */
export interface IXGitLabIssueStatusCountsType {
  __typename: '_xGitLabIssueStatusCountsType';

  /**
   * Number of issues with status ALL for the project
   */
  all: number | null;

  /**
   * Number of issues with status CLOSED for the project
   */
  closed: number | null;

  /**
   * Number of issues with status OPENED for the project
   */
  opened: number | null;
}

/**
 * Issue type
 */
export const enum XGitLabIssueType {
  /**
   * Issue issue type
   */
  ISSUE = 'ISSUE',

  /**
   * Incident issue type
   */
  INCIDENT = 'INCIDENT',

  /**
   * Test Case issue type
   */
  TEST_CASE = 'TEST_CASE',

  /**
   * Requirement issue type
   */
  REQUIREMENT = 'REQUIREMENT',
}

/**
 * Represents an iteration object
 */
export interface IXGitLabIteration {
  __typename: '_xGitLabIteration';

  /**
   * Timestamp of iteration creation.
   */
  createdAt: any;

  /**
   * Description of the iteration.
   */
  description: string | null;

  /**
   * The GitLab Flavored Markdown rendering of `description`
   */
  descriptionHtml: string | null;

  /**
   * Timestamp of the iteration due date.
   */
  dueDate: any | null;

  /**
   * ID of the iteration.
   */
  id: string;

  /**
   * Internal ID of the iteration.
   */
  iid: string;

  /**
   * Cadence of the iteration.
   */
  iterationCadence: IXGitLabIterationCadence;

  /**
   * Historically accurate report about the timebox.
   */
  report: IXGitLabTimeboxReport | null;

  /**
   * Web path of the iteration, scoped to the query parent. Only valid for Project parents. Returns null in other contexts.
   */
  scopedPath: string | null;

  /**
   * Web URL of the iteration, scoped to the query parent. Only valid for Project parents. Returns null in other contexts.
   */
  scopedUrl: string | null;

  /**
   * Timestamp of the iteration start date.
   */
  startDate: any | null;

  /**
   * State of the iteration.
   */
  state: XGitLabIterationState;

  /**
   * Title of the iteration.
   */
  title: string;

  /**
   * Timestamp of last iteration update.
   */
  updatedAt: any;

  /**
   * Web path of the iteration.
   */
  webPath: string;

  /**
   * Web URL of the iteration.
   */
  webUrl: string;
}

/**
 * Represents an iteration cadence
 */
export interface IXGitLabIterationCadence {
  __typename: '_xGitLabIterationCadence';

  /**
   * Whether the iteration cadence is active.
   */
  active: boolean | null;

  /**
   * Whether the iteration cadence should automatically generate future iterations.
   */
  automatic: boolean | null;

  /**
   * Description of the iteration cadence. Maximum length is 5000 characters.
   */
  description: string | null;

  /**
   * Duration in weeks of the iterations within this cadence.
   */
  durationInWeeks: number | null;

  /**
   * Global ID of the iteration cadence.
   */
  id: any;

  /**
   * Future iterations to be created when iteration cadence is set to automatic.
   */
  iterationsInAdvance: number | null;

  /**
   * Whether the iteration cadence should roll over issues to the next iteration or not.
   */
  rollOver: boolean;

  /**
   * Timestamp of the iteration cadence start date.
   */
  startDate: any | null;

  /**
   * Title of the iteration cadence.
   */
  title: string;
}

/**
 * The connection type for IterationCadence.
 */
export interface IXGitLabIterationCadenceConnection {
  __typename: '_xGitLabIterationCadenceConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitLabIterationCadenceEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitLabIterationCadence | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitLabPageInfo;
}

/**
 * Autogenerated input type of IterationCadenceCreate
 */
export interface IXGitLabIterationCadenceCreateInput {
  /**
   * Group where the iteration cadence is created.
   */
  groupPath: string;

  /**
   * Title of the iteration cadence.
   */
  title?: string | null;

  /**
   * Duration in weeks of the iterations within this cadence.
   */
  durationInWeeks?: number | null;

  /**
   * Future iterations to be created when iteration cadence is set to automatic.
   */
  iterationsInAdvance?: number | null;

  /**
   * Timestamp of the iteration cadence start date.
   */
  startDate?: any | null;

  /**
   * Whether the iteration cadence should automatically generate future iterations.
   */
  automatic: boolean;

  /**
   * Whether the iteration cadence is active.
   */
  active: boolean;

  /**
   * Whether the iteration cadence should roll over issues to the next iteration or not.
   */
  rollOver?: boolean | null;

  /**
   * Description of the iteration cadence. Maximum length is 5000 characters.
   */
  description?: string | null;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of IterationCadenceCreate
 */
export interface IXGitLabIterationCadenceCreatePayload {
  __typename: '_xGitLabIterationCadenceCreatePayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * Errors encountered during execution of the mutation.
   */
  errors: Array<string>;

  /**
   * Created iteration cadence.
   */
  iterationCadence: IXGitLabIterationCadence | null;
}

/**
 * Autogenerated input type of IterationCadenceDestroy
 */
export interface IXGitLabIterationCadenceDestroyInput {
  /**
   * Global ID of the iteration cadence.
   */
  id: any;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of IterationCadenceDestroy
 */
export interface IXGitLabIterationCadenceDestroyPayload {
  __typename: '_xGitLabIterationCadenceDestroyPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * Errors encountered during execution of the mutation.
   */
  errors: Array<string>;

  /**
   * Group the iteration cadence belongs to.
   */
  group: IXGitLabGroup;
}

/**
 * An edge in a connection.
 */
export interface IXGitLabIterationCadenceEdge {
  __typename: '_xGitLabIterationCadenceEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitLabIterationCadence | null;
}

/**
 * Autogenerated input type of IterationCadenceUpdate
 */
export interface IXGitLabIterationCadenceUpdateInput {
  /**
   * Global ID of the iteration cadence.
   */
  id: any;

  /**
   * Title of the iteration cadence.
   */
  title?: string | null;

  /**
   * Duration in weeks of the iterations within this cadence.
   */
  durationInWeeks?: number | null;

  /**
   * Future iterations to be created when iteration cadence is set to automatic.
   */
  iterationsInAdvance?: number | null;

  /**
   * Timestamp of the iteration cadence start date.
   */
  startDate?: any | null;

  /**
   * Whether the iteration cadence should automatically generate future iterations.
   */
  automatic?: boolean | null;

  /**
   * Whether the iteration cadence is active.
   */
  active?: boolean | null;

  /**
   * Whether the iteration cadence should roll over issues to the next iteration or not.
   */
  rollOver?: boolean | null;

  /**
   * Description of the iteration cadence. Maximum length is 5000 characters.
   */
  description?: string | null;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of IterationCadenceUpdate
 */
export interface IXGitLabIterationCadenceUpdatePayload {
  __typename: '_xGitLabIterationCadenceUpdatePayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * Errors encountered during execution of the mutation.
   */
  errors: Array<string>;

  /**
   * Updated iteration cadence.
   */
  iterationCadence: IXGitLabIterationCadence | null;
}

/**
 * The connection type for Iteration.
 */
export interface IXGitLabIterationConnection {
  __typename: '_xGitLabIterationConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitLabIterationEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitLabIteration | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitLabPageInfo;
}

/**
 * Autogenerated input type of iterationCreate
 */
export interface IXGitLabiterationCreateInput {
  /**
   * Full path of the project with which the resource is associated.
   */
  projectPath?: string | null;

  /**
   * Full path of the group with which the resource is associated.
   */
  groupPath?: string | null;

  /**
   * Global ID of the iterations cadence to be assigned to newly created iteration.
   */
  iterationsCadenceId?: any | null;

  /**
   * Title of the iteration.
   */
  title?: string | null;

  /**
   * Description of the iteration.
   */
  description?: string | null;

  /**
   * Start date of the iteration.
   */
  startDate?: string | null;

  /**
   * End date of the iteration.
   */
  dueDate?: string | null;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of iterationCreate
 */
export interface IXGitLabiterationCreatePayload {
  __typename: '_xGitLabiterationCreatePayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * Errors encountered during execution of the mutation.
   */
  errors: Array<string>;

  /**
   * Created iteration.
   */
  iteration: IXGitLabIteration | null;
}

/**
 * Autogenerated input type of IterationDelete
 */
export interface IXGitLabIterationDeleteInput {
  /**
   * ID of the iteration.
   */
  id: any;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of IterationDelete
 */
export interface IXGitLabIterationDeletePayload {
  __typename: '_xGitLabIterationDeletePayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * Errors encountered during execution of the mutation.
   */
  errors: Array<string>;

  /**
   * Group the iteration belongs to.
   */
  group: IXGitLabGroup;
}

/**
 * An edge in a connection.
 */
export interface IXGitLabIterationEdge {
  __typename: '_xGitLabIterationEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitLabIteration | null;
}

/**
 * State of a GitLab iteration
 */
export const enum XGitLabIterationState {
  /**
   * Upcoming iteration.
   */
  upcoming = 'upcoming',

  /**
   * Started iteration. Deprecated in 14.1: Use current instead.
   * @deprecated "Use current instead. Deprecated in 14.1."
   */
  started = 'started',

  /**
   * Current iteration.
   */
  current = 'current',

  /**
   * Open iteration.
   */
  opened = 'opened',

  /**
   * Closed iteration.
   */
  closed = 'closed',

  /**
   * Any iteration.
   */
  all = 'all',
}

/**
 * Iteration ID wildcard values
 */
export const enum XGitLabIterationWildcardId {
  /**
   * No iteration is assigned.
   */
  NONE = 'NONE',

  /**
   * An iteration is assigned.
   */
  ANY = 'ANY',

  /**
   * Current iteration.
   */
  CURRENT = 'CURRENT',
}

export interface IXGitLabJiraImport {
  __typename: '_xGitLabJiraImport';

  /**
   * Timestamp of when the Jira import was created.
   */
  createdAt: any | null;

  /**
   * Count of issues that failed to import.
   */
  failedToImportCount: number;

  /**
   * Count of issues that were successfully imported.
   */
  importedIssuesCount: number;

  /**
   * Project key for the imported Jira project.
   */
  jiraProjectKey: string;

  /**
   * Timestamp of when the Jira import was scheduled.
   */
  scheduledAt: any | null;

  /**
   * User that started the Jira import.
   */
  scheduledBy: IXGitLabUserCore | null;

  /**
   * Total count of issues that were attempted to import.
   */
  totalIssueCount: number;
}

/**
 * The connection type for JiraImport.
 */
export interface IXGitLabJiraImportConnection {
  __typename: '_xGitLabJiraImportConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitLabJiraImportEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitLabJiraImport | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitLabPageInfo;
}

/**
 * An edge in a connection.
 */
export interface IXGitLabJiraImportEdge {
  __typename: '_xGitLabJiraImportEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitLabJiraImport | null;
}

/**
 * Autogenerated input type of JiraImportStart
 */
export interface IXGitLabJiraImportStartInput {
  /**
   * Project to import the Jira project into.
   */
  projectPath: string;

  /**
   * Project key of the importer Jira project.
   */
  jiraProjectKey: string;

  /**
   * Project name of the importer Jira project.
   */
  jiraProjectName?: string | null;

  /**
   * Mapping of Jira to GitLab users.
   */
  usersMapping?: Array<IXGitLabJiraUsersMappingInputType> | null;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of JiraImportStart
 */
export interface IXGitLabJiraImportStartPayload {
  __typename: '_xGitLabJiraImportStartPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * Errors encountered during execution of the mutation.
   */
  errors: Array<string>;

  /**
   * Jira import data after mutation.
   */
  jiraImport: IXGitLabJiraImport | null;
}

/**
 * Autogenerated input type of JiraImportUsers
 */
export interface IXGitLabJiraImportUsersInput {
  /**
   * Project to import the Jira users into.
   */
  projectPath: string;

  /**
   * Index of the record the import should started at, default 0 (50 records returned).
   */
  startAt?: number | null;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of JiraImportUsers
 */
export interface IXGitLabJiraImportUsersPayload {
  __typename: '_xGitLabJiraImportUsersPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * Errors encountered during execution of the mutation.
   */
  errors: Array<string>;

  /**
   * Users returned from Jira, matched by email and name if possible.
   */
  jiraUsers: Array<IXGitLabJiraUser> | null;
}

export interface IXGitLabJiraProject {
  __typename: '_xGitLabJiraProject';

  /**
   * Key of the Jira project.
   */
  key: string;

  /**
   * Name of the Jira project.
   */
  name: string | null;

  /**
   * ID of the Jira project.
   */
  projectId: number;
}

/**
 * The connection type for JiraProject.
 */
export interface IXGitLabJiraProjectConnection {
  __typename: '_xGitLabJiraProjectConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitLabJiraProjectEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitLabJiraProject | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitLabPageInfo;
}

/**
 * An edge in a connection.
 */
export interface IXGitLabJiraProjectEdge {
  __typename: '_xGitLabJiraProjectEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitLabJiraProject | null;
}

export interface IXGitLabJiraService {
  __typename: '_xGitLabJiraService';

  /**
   * Indicates if the service is active.
   */
  active: boolean | null;

  /**
   * List of all Jira projects fetched through Jira REST API.
   */
  projects: IXGitLabJiraProjectConnection | null;

  /**
   * Class name of the service.
   */
  type: string | null;
}

export interface IProjectsOnXGitLabJiraServiceArguments {
  /**
   * Project name or key.
   */
  name?: string | null;

  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IXGitLabJiraUser {
  __typename: '_xGitLabJiraUser';

  /**
   * ID of the matched GitLab user.
   */
  gitlabId: number | null;

  /**
   * Name of the matched GitLab user.
   */
  gitlabName: string | null;

  /**
   * Username of the matched GitLab user.
   */
  gitlabUsername: string | null;

  /**
   * Account ID of the Jira user.
   */
  jiraAccountId: string;

  /**
   * Display name of the Jira user.
   */
  jiraDisplayName: string;

  /**
   * Email of the Jira user, returned only for users with public emails.
   */
  jiraEmail: string | null;
}

export interface IXGitLabJiraUsersMappingInputType {
  /**
   * Jira account ID of the user.
   */
  jiraAccountId: string;

  /**
   * ID of the GitLab user.
   */
  gitlabId?: number | null;
}

export const enum XGitLabJobArtifactFileType {
  /**
   * ARCHIVE job artifact file type.
   */
  ARCHIVE = 'ARCHIVE',

  /**
   * METADATA job artifact file type.
   */
  METADATA = 'METADATA',

  /**
   * TRACE job artifact file type.
   */
  TRACE = 'TRACE',

  /**
   * JUNIT job artifact file type.
   */
  JUNIT = 'JUNIT',

  /**
   * METRICS job artifact file type.
   */
  METRICS = 'METRICS',

  /**
   * METRICS REFEREE job artifact file type.
   */
  METRICS_REFEREE = 'METRICS_REFEREE',

  /**
   * NETWORK REFEREE job artifact file type.
   */
  NETWORK_REFEREE = 'NETWORK_REFEREE',

  /**
   * DOTENV job artifact file type.
   */
  DOTENV = 'DOTENV',

  /**
   * COBERTURA job artifact file type.
   */
  COBERTURA = 'COBERTURA',

  /**
   * CLUSTER APPLICATIONS job artifact file type.
   */
  CLUSTER_APPLICATIONS = 'CLUSTER_APPLICATIONS',

  /**
   * LSIF job artifact file type.
   */
  LSIF = 'LSIF',

  /**
   * SAST job artifact file type.
   */
  SAST = 'SAST',

  /**
   * SECRET DETECTION job artifact file type.
   */
  SECRET_DETECTION = 'SECRET_DETECTION',

  /**
   * DEPENDENCY SCANNING job artifact file type.
   */
  DEPENDENCY_SCANNING = 'DEPENDENCY_SCANNING',

  /**
   * CONTAINER SCANNING job artifact file type.
   */
  CONTAINER_SCANNING = 'CONTAINER_SCANNING',

  /**
   * CLUSTER IMAGE SCANNING job artifact file type.
   */
  CLUSTER_IMAGE_SCANNING = 'CLUSTER_IMAGE_SCANNING',

  /**
   * DAST job artifact file type.
   */
  DAST = 'DAST',

  /**
   * LICENSE SCANNING job artifact file type.
   */
  LICENSE_SCANNING = 'LICENSE_SCANNING',

  /**
   * ACCESSIBILITY job artifact file type.
   */
  ACCESSIBILITY = 'ACCESSIBILITY',

  /**
   * CODE QUALITY job artifact file type.
   */
  CODEQUALITY = 'CODEQUALITY',

  /**
   * PERFORMANCE job artifact file type.
   */
  PERFORMANCE = 'PERFORMANCE',

  /**
   * BROWSER PERFORMANCE job artifact file type.
   */
  BROWSER_PERFORMANCE = 'BROWSER_PERFORMANCE',

  /**
   * LOAD PERFORMANCE job artifact file type.
   */
  LOAD_PERFORMANCE = 'LOAD_PERFORMANCE',

  /**
   * TERRAFORM job artifact file type.
   */
  TERRAFORM = 'TERRAFORM',

  /**
   * REQUIREMENTS job artifact file type.
   */
  REQUIREMENTS = 'REQUIREMENTS',

  /**
   * COVERAGE FUZZING job artifact file type.
   */
  COVERAGE_FUZZING = 'COVERAGE_FUZZING',

  /**
   * API FUZZING job artifact file type.
   */
  API_FUZZING = 'API_FUZZING',
}

/**
 * Autogenerated input type of JobCancel
 */
export interface IXGitLabJobCancelInput {
  /**
   * ID of the job to mutate.
   */
  id: any;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of JobCancel
 */
export interface IXGitLabJobCancelPayload {
  __typename: '_xGitLabJobCancelPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * Errors encountered during execution of the mutation.
   */
  errors: Array<string>;

  /**
   * Job after the mutation.
   */
  job: IXGitLabCiJob | null;
}

export interface IXGitLabJobPermissions {
  __typename: '_xGitLabJobPermissions';

  /**
   * Indicates the user can perform `read_build` on this resource
   */
  readBuild: boolean;

  /**
   * Indicates the user can perform `read_job_artifacts` on this resource
   */
  readJobArtifacts: boolean;

  /**
   * Indicates the user can perform `update_build` on this resource
   */
  updateBuild: boolean;
}

/**
 * Autogenerated input type of JobPlay
 */
export interface IXGitLabJobPlayInput {
  /**
   * ID of the job to mutate.
   */
  id: any;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of JobPlay
 */
export interface IXGitLabJobPlayPayload {
  __typename: '_xGitLabJobPlayPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * Errors encountered during execution of the mutation.
   */
  errors: Array<string>;

  /**
   * Job after the mutation.
   */
  job: IXGitLabCiJob | null;
}

/**
 * Autogenerated input type of JobRetry
 */
export interface IXGitLabJobRetryInput {
  /**
   * ID of the job to mutate.
   */
  id: any;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of JobRetry
 */
export interface IXGitLabJobRetryPayload {
  __typename: '_xGitLabJobRetryPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * Errors encountered during execution of the mutation.
   */
  errors: Array<string>;

  /**
   * Job after the mutation.
   */
  job: IXGitLabCiJob | null;
}

/**
 * Autogenerated input type of JobUnschedule
 */
export interface IXGitLabJobUnscheduleInput {
  /**
   * ID of the job to mutate.
   */
  id: any;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of JobUnschedule
 */
export interface IXGitLabJobUnschedulePayload {
  __typename: '_xGitLabJobUnschedulePayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * Errors encountered during execution of the mutation.
   */
  errors: Array<string>;

  /**
   * Job after the mutation.
   */
  job: IXGitLabCiJob | null;
}

export interface IXGitLabKas {
  __typename: '_xGitLabKas';

  /**
   * Indicates whether the Kubernetes Agent Server is enabled.
   */
  enabled: boolean;

  /**
   * URL used by the Agents to communicate with KAS.
   */
  externalUrl: string | null;

  /**
   * KAS version.
   */
  version: string | null;
}

export interface IXGitLabLabel {
  __typename: '_xGitLabLabel';

  /**
   * Background color of the label.
   */
  color: string;

  /**
   * When this label was created.
   */
  createdAt: any;

  /**
   * Description of the label (Markdown rendered as HTML for caching).
   */
  description: string | null;

  /**
   * The GitLab Flavored Markdown rendering of `description`
   */
  descriptionHtml: string | null;

  /**
   * Label ID.
   */
  id: string;

  /**
   * Text color of the label.
   */
  textColor: string;

  /**
   * Content of the label.
   */
  title: string;

  /**
   * When this label was last updated.
   */
  updatedAt: any;
}

/**
 * The connection type for Label.
 */
export interface IXGitLabLabelConnection {
  __typename: '_xGitLabLabelConnection';

  /**
   * Total count of collection.
   */
  count: number;

  /**
   * A list of edges.
   */
  edges: Array<IXGitLabLabelEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitLabLabel | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitLabPageInfo;
}

/**
 * Autogenerated input type of LabelCreate
 */
export interface IXGitLabLabelCreateInput {
  /**
   * Full path of the project with which the resource is associated.
   */
  projectPath?: string | null;

  /**
   * Full path of the group with which the resource is associated.
   */
  groupPath?: string | null;

  /**
   * Title of the label.
   */
  title: string;

  /**
   * Description of the label.
   */
  description?: string | null;

  /**
   * The color of the label given in 6-digit hex notation with leading '#' sign
   * (for example, `#FFAABB`) or one of the CSS color names.
   * @default "#6699cc"
   */
  color?: string | null;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of LabelCreate
 */
export interface IXGitLabLabelCreatePayload {
  __typename: '_xGitLabLabelCreatePayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * Errors encountered during execution of the mutation.
   */
  errors: Array<string>;

  /**
   * Label after mutation.
   */
  label: IXGitLabLabel | null;
}

/**
 * An edge in a connection.
 */
export interface IXGitLabLabelEdge {
  __typename: '_xGitLabLabelEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitLabLabel | null;
}

/**
 * Represents the Geo sync and verification state of an LFS object
 */
export interface IXGitLabLfsObjectRegistry {
  __typename: '_xGitLabLfsObjectRegistry';

  /**
   * Timestamp when the LfsObjectRegistry was created
   */
  createdAt: any | null;

  /**
   * ID of the LfsObjectRegistry
   */
  id: string;

  /**
   * Error message during sync of the LfsObjectRegistry
   */
  lastSyncFailure: string | null;

  /**
   * Timestamp of the most recent successful sync of the LfsObjectRegistry
   */
  lastSyncedAt: any | null;

  /**
   * ID of the LFS object.
   */
  lfsObjectId: string;

  /**
   * Timestamp after which the LfsObjectRegistry should be resynced
   */
  retryAt: any | null;

  /**
   * Number of consecutive failed sync attempts of the LfsObjectRegistry
   */
  retryCount: number | null;

  /**
   * Sync state of the LfsObjectRegistry
   */
  state: XGitLabRegistryState | null;
}

/**
 * The connection type for LfsObjectRegistry.
 */
export interface IXGitLabLfsObjectRegistryConnection {
  __typename: '_xGitLabLfsObjectRegistryConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitLabLfsObjectRegistryEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitLabLfsObjectRegistry | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitLabPageInfo;
}

/**
 * An edge in a connection.
 */
export interface IXGitLabLfsObjectRegistryEdge {
  __typename: '_xGitLabLfsObjectRegistryEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitLabLfsObjectRegistry | null;
}

/**
 * Represents an entry from the Cloud License history
 */
export interface IXGitLabLicenseHistoryEntry {
  __typename: '_xGitLabLicenseHistoryEntry';

  /**
   * Date when the license was activated.
   */
  activatedAt: any | null;

  /**
   * Date, including grace period, when licensed features will be blocked.
   */
  blockChangesAt: any | null;

  /**
   * Company of the licensee.
   */
  company: string | null;

  /**
   * Email of the licensee.
   */
  email: string | null;

  /**
   * Date when the license expires.
   */
  expiresAt: any | null;

  /**
   * ID of the license.
   */
  id: string;

  /**
   * Name of the licensee.
   */
  name: string | null;

  /**
   * Name of the subscription plan.
   */
  plan: string;

  /**
   * Date when the license started.
   */
  startsAt: any | null;

  /**
   * Type of the license.
   */
  type: string;

  /**
   * Number of paid users in the license.
   */
  usersInLicenseCount: number | null;
}

/**
 * The connection type for LicenseHistoryEntry.
 */
export interface IXGitLabLicenseHistoryEntryConnection {
  __typename: '_xGitLabLicenseHistoryEntryConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitLabLicenseHistoryEntryEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitLabLicenseHistoryEntry | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitLabPageInfo;
}

/**
 * An edge in a connection.
 */
export interface IXGitLabLicenseHistoryEntryEdge {
  __typename: '_xGitLabLicenseHistoryEntryEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitLabLicenseHistoryEntry | null;
}

/**
 * List limit metric setting
 */
export const enum XGitLabListLimitMetric {
  /**
   * Limit list by number and total weight of issues.
   */
  all_metrics = 'all_metrics',

  /**
   * Limit list by number of issues.
   */
  issue_count = 'issue_count',

  /**
   * Limit list by total weight of issues.
   */
  issue_weights = 'issue_weights',
}

/**
 * Autogenerated input type of MarkAsSpamSnippet
 */
export interface IXGitLabMarkAsSpamSnippetInput {
  /**
   * Global ID of the snippet to update.
   */
  id: any;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of MarkAsSpamSnippet
 */
export interface IXGitLabMarkAsSpamSnippetPayload {
  __typename: '_xGitLabMarkAsSpamSnippetPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * Errors encountered during execution of the mutation.
   */
  errors: Array<string>;

  /**
   * Snippet after mutation.
   */
  snippet: IXGitLabSnippet | null;
}

/**
 * Maven metadata
 */
export interface IXGitLabMavenMetadata {
  __typename: '_xGitLabMavenMetadata';

  /**
   * App group of the Maven package.
   */
  appGroup: string;

  /**
   * App name of the Maven package.
   */
  appName: string;

  /**
   * App version of the Maven package.
   */
  appVersion: string | null;

  /**
   * Date of creation.
   */
  createdAt: any;

  /**
   * ID of the metadatum.
   */
  id: any;

  /**
   * Path of the Maven package.
   */
  path: string;

  /**
   * Date of most recent update.
   */
  updatedAt: any;
}

/**
 * Possible identifier types for a measurement
 */
export const enum XGitLabMeasurementIdentifier {
  /**
   * Project count.
   */
  PROJECTS = 'PROJECTS',

  /**
   * User count.
   */
  USERS = 'USERS',

  /**
   * Issue count.
   */
  ISSUES = 'ISSUES',

  /**
   * Merge request count.
   */
  MERGE_REQUESTS = 'MERGE_REQUESTS',

  /**
   * Group count.
   */
  GROUPS = 'GROUPS',

  /**
   * Pipeline count.
   */
  PIPELINES = 'PIPELINES',

  /**
   * Pipeline count with success status.
   */
  PIPELINES_SUCCEEDED = 'PIPELINES_SUCCEEDED',

  /**
   * Pipeline count with failed status.
   */
  PIPELINES_FAILED = 'PIPELINES_FAILED',

  /**
   * Pipeline count with canceled status.
   */
  PIPELINES_CANCELED = 'PIPELINES_CANCELED',

  /**
   * Pipeline count with skipped status.
   */
  PIPELINES_SKIPPED = 'PIPELINES_SKIPPED',
}

export type _xGitLabMemberInterface =
  | IXGitLabGroupMember
  | IXGitLabProjectMember;

export interface IXGitLabMemberInterface {
  __typename: '_xGitLabMemberInterface';

  /**
   * GitLab::Access level.
   */
  accessLevel: IXGitLabAccessLevel | null;

  /**
   * Date and time the membership was created.
   */
  createdAt: any | null;

  /**
   * User that authorized membership.
   */
  createdBy: IXGitLabUserCore | null;

  /**
   * Date and time the membership expires.
   */
  expiresAt: any | null;

  /**
   * ID of the member.
   */
  id: string;

  /**
   * Date and time the membership was last updated.
   */
  updatedAt: any | null;

  /**
   * User that is associated with the member object.
   */
  user: IXGitLabUserCore | null;
}

/**
 * The connection type for MemberInterface.
 */
export interface IXGitLabMemberInterfaceConnection {
  __typename: '_xGitLabMemberInterfaceConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitLabMemberInterfaceEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<_xGitLabMemberInterface | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitLabPageInfo;
}

/**
 * An edge in a connection.
 */
export interface IXGitLabMemberInterfaceEdge {
  __typename: '_xGitLabMemberInterfaceEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: _xGitLabMemberInterface | null;
}

export interface IXGitLabMergeRequest {
  __typename: '_xGitLabMergeRequest';

  /**
   * Indicates if members of the target project can push to the fork.
   */
  allowCollaboration: boolean | null;

  /**
   * Information relating to rules that must be satisfied to merge this merge request.
   */
  approvalState: IXGitLabMergeRequestApprovalState;

  /**
   * Number of approvals left.
   */
  approvalsLeft: number | null;

  /**
   * Number of approvals required.
   */
  approvalsRequired: number | null;

  /**
   * Indicates if the merge request has all the required approvals. Returns true if no required approvals are configured.
   */
  approved: boolean;

  /**
   * Users who approved the merge request.
   */
  approvedBy: IXGitLabUserCoreConnection | null;

  /**
   * Assignees of the merge request.
   */
  assignees: IXGitLabMergeRequestAssigneeConnection | null;

  /**
   * User who created this merge request.
   */
  author: IXGitLabUserCore | null;

  /**
   * Indicates if auto merge is enabled for the merge request.
   */
  autoMergeEnabled: boolean;

  /**
   * Selected auto merge strategy.
   */
  autoMergeStrategy: string | null;

  /**
   * Array of available auto merge strategies.
   */
  availableAutoMergeStrategies: Array<string> | null;

  /**
   * Number of commits in the merge request.
   */
  commitCount: number | null;

  /**
   * Merge request commits excluding merge commits.
   */
  commitsWithoutMergeCommits: IXGitLabCommitConnection | null;

  /**
   * Indicates if the merge request has conflicts.
   */
  conflicts: boolean;

  /**
   * Timestamp of when the merge request was created.
   */
  createdAt: any;

  /**
   * To-do items for the current user.
   */
  currentUserTodos: IXGitLabTodoConnection;

  /**
   * Default merge commit message of the merge request.
   */
  defaultMergeCommitMessage: string | null;

  /**
   * Default merge commit message of the merge request with description.
   */
  defaultMergeCommitMessageWithDescription: string | null;

  /**
   * Default squash commit message of the merge request.
   */
  defaultSquashCommitMessage: string | null;

  /**
   * Description of the merge request (Markdown rendered as HTML for caching).
   */
  description: string | null;

  /**
   * The GitLab Flavored Markdown rendering of `description`
   */
  descriptionHtml: string | null;

  /**
   * Diff head SHA of the merge request.
   */
  diffHeadSha: string | null;

  /**
   * References of the base SHA, the head SHA, and the start SHA for this merge request.
   */
  diffRefs: IXGitLabDiffRefs | null;

  /**
   * Details about which files were changed in this merge request.
   */
  diffStats: Array<IXGitLabDiffStats> | null;

  /**
   * Summary of which files were changed in this merge request.
   */
  diffStatsSummary: IXGitLabDiffStatsSummary | null;

  /**
   * Indicates if comments on the merge request are locked to members only.
   */
  discussionLocked: boolean;

  /**
   * All discussions on this noteable.
   */
  discussions: IXGitLabDiscussionConnection;

  /**
   * Indicates if the source branch is behind the target branch.
   */
  divergedFromTargetBranch: boolean;

  /**
   * Number of downvotes for the merge request.
   */
  downvotes: number;

  /**
   * Indicates if the merge request is a draft.
   */
  draft: boolean;

  /**
   * Indicates if the project settings will lead to source branch deletion after merge.
   */
  forceRemoveSourceBranch: boolean | null;

  /**
   * Indicates if the merge request has CI.
   */
  hasCi: boolean;

  /**
   * Indicates if the source branch has any security reports.
   */
  hasSecurityReports: boolean;

  /**
   * Pipeline running on the branch HEAD of the merge request.
   */
  headPipeline: IXGitLabPipeline | null;

  /**
   * Human-readable time estimate of the merge request.
   */
  humanTimeEstimate: string | null;

  /**
   * Human-readable total time reported as spent on the merge request.
   */
  humanTotalTimeSpent: string | null;

  /**
   * ID of the merge request.
   */
  id: string;

  /**
   * Internal ID of the merge request.
   */
  iid: string;

  /**
   * Commit SHA of the merge request if merge is in progress.
   */
  inProgressMergeCommitSha: string | null;

  /**
   * Labels of the merge request.
   */
  labels: IXGitLabLabelConnection | null;

  /**
   * SHA of the merge request commit (set once merged).
   */
  mergeCommitSha: string | null;

  /**
   * Error message due to a merge error.
   */
  mergeError: string | null;

  /**
   * Indicates if a merge is currently occurring.
   */
  mergeOngoing: boolean;

  /**
   * Status of the merge request. Deprecated in 14.0: This was renamed.
   * @deprecated "This was renamed. Please use `MergeRequest.mergeStatusEnum`. Deprecated in 14.0."
   */
  mergeStatus: string | null;

  /**
   * Merge status of the merge request.
   */
  mergeStatusEnum: XGitLabMergeStatus | null;

  /**
   * Number of merge requests in the merge train.
   */
  mergeTrainsCount: number | null;

  /**
   * User who merged this merge request.
   */
  mergeUser: IXGitLabUserCore | null;

  /**
   * Indicates if the merge has been set to be merged when its pipeline succeeds (MWPS).
   */
  mergeWhenPipelineSucceeds: boolean | null;

  /**
   * Indicates if the merge request is mergeable.
   */
  mergeable: boolean;

  /**
   * Indicates if all discussions in the merge request have been resolved, allowing the merge request to be merged.
   */
  mergeableDiscussionsState: boolean | null;

  /**
   * Timestamp of when the merge request was merged, null if not merged.
   */
  mergedAt: any | null;

  /**
   * Milestone of the merge request.
   */
  milestone: IXGitLabMilestone | null;

  /**
   * All notes on this noteable.
   */
  notes: IXGitLabNoteConnection;

  /**
   * Participants in the merge request. This includes the author, assignees, reviewers, and users mentioned in notes.
   */
  participants: IXGitLabUserCoreConnection | null;

  /**
   * Pipelines for the merge request. Note: for performance reasons, no more than
   * the most recent 500 pipelines will be returned.
   */
  pipelines: IXGitLabPipelineConnection | null;

  /**
   * Alias for target_project.
   */
  project: IXGitLabProject;

  /**
   * ID of the merge request project.
   */
  projectId: number;

  /**
   * Rebase commit SHA of the merge request.
   */
  rebaseCommitSha: string | null;

  /**
   * Indicates if there is a rebase currently in progress for the merge request.
   */
  rebaseInProgress: boolean;

  /**
   * Internal reference of the merge request. Returned in shortened format by default.
   */
  reference: string;

  /**
   * Users from whom a review has been requested.
   */
  reviewers: IXGitLabMergeRequestReviewerConnection | null;

  /**
   * Indicates if the merge request is created by @GitLab-Security-Bot.
   */
  securityAutoFix: boolean | null;

  /**
   * Indicates if the target branch security reports are out of date.
   */
  securityReportsUpToDateOnTargetBranch: boolean;

  /**
   * Indicates if the merge request will be rebased.
   */
  shouldBeRebased: boolean;

  /**
   * Indicates if the source branch of the merge request will be deleted after merge.
   */
  shouldRemoveSourceBranch: boolean | null;

  /**
   * Source branch of the merge request.
   */
  sourceBranch: string;

  /**
   * Indicates if the source branch of the merge request exists.
   */
  sourceBranchExists: boolean;

  /**
   * Indicates if the source branch is protected.
   */
  sourceBranchProtected: boolean;

  /**
   * Source project of the merge request.
   */
  sourceProject: IXGitLabProject | null;

  /**
   * ID of the merge request source project.
   */
  sourceProjectId: number | null;

  /**
   * Indicates if squash on merge is enabled.
   */
  squash: boolean;

  /**
   * Indicates if squash on merge is enabled.
   */
  squashOnMerge: boolean;

  /**
   * State of the merge request.
   */
  state: XGitLabMergeRequestState;

  /**
   * Indicates if the currently logged in user is subscribed to this merge request.
   */
  subscribed: boolean;

  /**
   * Target branch of the merge request.
   */
  targetBranch: string;

  /**
   * Indicates if the target branch of the merge request exists.
   */
  targetBranchExists: boolean;

  /**
   * Target project of the merge request.
   */
  targetProject: IXGitLabProject;

  /**
   * ID of the merge request target project.
   */
  targetProjectId: number;

  /**
   * Completion status of tasks
   */
  taskCompletionStatus: IXGitLabTaskCompletionStatus;

  /**
   * Time estimate of the merge request.
   */
  timeEstimate: number;

  /**
   * Timelogs on the merge request.
   */
  timelogs: IXGitLabTimelogConnection;

  /**
   * Title of the merge request.
   */
  title: string;

  /**
   * The GitLab Flavored Markdown rendering of `title`
   */
  titleHtml: string | null;

  /**
   * Total time reported as spent on the merge request.
   */
  totalTimeSpent: number;

  /**
   * Timestamp of when the merge request was last updated.
   */
  updatedAt: any;

  /**
   * Number of upvotes for the merge request.
   */
  upvotes: number;

  /**
   * Number of user discussions in the merge request.
   */
  userDiscussionsCount: number | null;

  /**
   * User notes count of the merge request.
   */
  userNotesCount: number | null;

  /**
   * Permissions for the current user on the resource
   */
  userPermissions: IXGitLabMergeRequestPermissions;

  /**
   * Web URL of the merge request.
   */
  webUrl: string | null;

  /**
   * Indicates if the merge request is a draft. Deprecated in 13.12: Use `draft`.
   * @deprecated "Use `draft`. Deprecated in 13.12."
   */
  workInProgress: boolean;
}

export interface IApprovedByOnXGitLabMergeRequestArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IAssigneesOnXGitLabMergeRequestArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface ICommitsWithoutMergeCommitsOnXGitLabMergeRequestArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface ICurrentUserTodosOnXGitLabMergeRequestArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * State of the to-do items.
   */
  state?: XGitLabTodoStateEnum | null;
}

export interface IDiffStatsOnXGitLabMergeRequestArguments {
  /**
   * Specific file path.
   */
  path?: string | null;
}

export interface IDiscussionsOnXGitLabMergeRequestArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface ILabelsOnXGitLabMergeRequestArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface INotesOnXGitLabMergeRequestArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IParticipantsOnXGitLabMergeRequestArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IPipelinesOnXGitLabMergeRequestArguments {
  /**
   * Filter pipelines by their status.
   */
  status?: XGitLabPipelineStatusEnum | null;

  /**
   * Filter pipelines by the ref they are run for.
   */
  ref?: string | null;

  /**
   * Filter pipelines by the sha of the commit they are run for.
   */
  sha?: string | null;

  /**
   * Filter pipelines by their source. Will be ignored if `dast_view_scans` feature flag is disabled.
   */
  source?: string | null;

  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IReferenceOnXGitLabMergeRequestArguments {
  /**
   * Boolean option specifying whether the reference should be returned in full.
   * @default false
   */
  full?: boolean | null;
}

export interface IReviewersOnXGitLabMergeRequestArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface ITimelogsOnXGitLabMergeRequestArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

/**
 * Autogenerated input type of MergeRequestAccept
 */
export interface IXGitLabMergeRequestAcceptInput {
  /**
   * Project the merge request to mutate is in.
   */
  projectPath: string;

  /**
   * IID of the merge request to mutate.
   */
  iid: string;

  /**
   * How to merge this merge request.
   */
  strategy?: XGitLabMergeStrategyEnum | null;

  /**
   * Custom merge commit message.
   */
  commitMessage?: string | null;

  /**
   * Custom squash commit message (if squash is true).
   */
  squashCommitMessage?: string | null;

  /**
   * HEAD SHA at the time when this merge was requested.
   */
  sha: string;

  /**
   * Should the source branch be removed.
   */
  shouldRemoveSourceBranch?: boolean | null;

  /**
   * Squash commits on the source branch before merge.
   * @default false
   */
  squash?: boolean | null;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of MergeRequestAccept
 */
export interface IXGitLabMergeRequestAcceptPayload {
  __typename: '_xGitLabMergeRequestAcceptPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * Errors encountered during execution of the mutation.
   */
  errors: Array<string>;

  /**
   * Merge request after mutation.
   */
  mergeRequest: IXGitLabMergeRequest | null;
}

/**
 * Information relating to rules that must be satisfied to merge this merge request.
 */
export interface IXGitLabMergeRequestApprovalState {
  __typename: '_xGitLabMergeRequestApprovalState';

  /**
   * Indicates if the merge request approval rules are overwritten for the merge request.
   */
  approvalRulesOverwritten: boolean | null;

  /**
   * List of approval rules associated with the merge request.
   */
  rules: Array<IXGitLabApprovalRule> | null;
}

/**
 * A user assigned to a merge request.
 */
export interface IXGitLabMergeRequestAssignee {
  __typename: '_xGitLabMergeRequestAssignee';

  /**
   * Merge requests assigned to the user.
   */
  assignedMergeRequests: IXGitLabMergeRequestConnection | null;

  /**
   * Merge requests authored by the user.
   */
  authoredMergeRequests: IXGitLabMergeRequestConnection | null;

  /**
   * URL of the user's avatar.
   */
  avatarUrl: string | null;

  /**
   * Indicates if the user is a bot.
   */
  bot: boolean;

  /**
   * User callouts that belong to the user.
   */
  callouts: IXGitLabUserCalloutConnection | null;

  /**
   * User email. Deprecated in 13.7: This was renamed.
   * @deprecated "This was renamed. Please use `User.publicEmail`. Deprecated in 13.7."
   */
  email: string | null;

  /**
   * Group count for the user.
   */
  groupCount: number | null;

  /**
   * Group memberships of the user.
   */
  groupMemberships: IXGitLabGroupMemberConnection | null;

  /**
   * Groups where the user has access. Will always return `null` if
   * `paginatable_namespace_drop_down_for_project_creation` feature flag is disabled.
   */
  groups: IXGitLabGroupConnection | null;

  /**
   * ID of the user.
   */
  id: string;

  /**
   * Location of the user.
   */
  location: string | null;

  /**
   * Details of this user's interactions with the merge request.
   */
  mergeRequestInteraction: IXGitLabUserMergeRequestInteraction | null;

  /**
   * Human-readable name of the user.
   */
  name: string;

  /**
   * Personal namespace of the user.
   */
  namespace: IXGitLabNamespace | null;

  /**
   * Project memberships of the user.
   */
  projectMemberships: IXGitLabProjectMemberConnection | null;

  /**
   * User's public email.
   */
  publicEmail: string | null;

  /**
   * Merge requests assigned to the user for review.
   */
  reviewRequestedMergeRequests: IXGitLabMergeRequestConnection | null;

  /**
   * Snippets authored by the user.
   */
  snippets: IXGitLabSnippetConnection | null;

  /**
   * Projects starred by the user.
   */
  starredProjects: IXGitLabProjectConnection | null;

  /**
   * State of the user.
   */
  state: XGitLabUserState;

  /**
   * User status.
   */
  status: IXGitLabUserStatus | null;

  /**
   * Time logged by the user.
   */
  timelogs: IXGitLabTimelogConnection | null;

  /**
   * To-do items of the user.
   */
  todos: IXGitLabTodoConnection | null;

  /**
   * Permissions for the current user on the resource.
   */
  userPermissions: IXGitLabUserPermissions;

  /**
   * Username of the user. Unique within this instance of GitLab.
   */
  username: string;

  /**
   * Web path of the user.
   */
  webPath: string;

  /**
   * Web URL of the user.
   */
  webUrl: string;
}

export interface IAssignedMergeRequestsOnXGitLabMergeRequestAssigneeArguments {
  /**
   * Array of IIDs of merge requests, for example `[1, 2]`.
   */
  iids?: Array<string> | null;

  /**
   * Array of source branch names.
   * All resolved merge requests will have one of these branches as their source.
   */
  sourceBranches?: Array<string> | null;

  /**
   * Array of target branch names.
   * All resolved merge requests will have one of these branches as their target.
   */
  targetBranches?: Array<string> | null;

  /**
   * Merge request state. If provided, all resolved merge requests will have this state.
   */
  state?: XGitLabMergeRequestState | null;

  /**
   * Array of label names. All resolved merge requests will have all of these labels.
   */
  labels?: Array<string> | null;

  /**
   * Merge requests merged after this date.
   */
  mergedAfter?: any | null;

  /**
   * Merge requests merged before this date.
   */
  mergedBefore?: any | null;

  /**
   * Title of the milestone.
   */
  milestoneTitle?: string | null;

  /**
   * Sort merge requests by this criteria.
   * @default "created_desc"
   */
  sort?: XGitLabMergeRequestSort | null;

  /**
   * Merge requests created after this timestamp.
   */
  createdAfter?: any | null;

  /**
   * Merge requests created before this timestamp.
   */
  createdBefore?: any | null;

  /**
   * List of negated arguments.
   * Warning: this argument is experimental and a subject to change in future.
   */
  not?: IXGitLabMergeRequestsResolverNegatedParams | null;

  /**
   * The full-path of the project the authored merge requests should be in.
   * Incompatible with projectId.
   */
  projectPath?: string | null;

  /**
   * The global ID of the project the authored merge requests should be in.
   * Incompatible with projectPath.
   */
  projectId?: any | null;

  /**
   * Username of the author.
   */
  authorUsername?: string | null;

  /**
   * Username of the reviewer.
   */
  reviewerUsername?: string | null;

  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IAuthoredMergeRequestsOnXGitLabMergeRequestAssigneeArguments {
  /**
   * Array of IIDs of merge requests, for example `[1, 2]`.
   */
  iids?: Array<string> | null;

  /**
   * Array of source branch names.
   * All resolved merge requests will have one of these branches as their source.
   */
  sourceBranches?: Array<string> | null;

  /**
   * Array of target branch names.
   * All resolved merge requests will have one of these branches as their target.
   */
  targetBranches?: Array<string> | null;

  /**
   * Merge request state. If provided, all resolved merge requests will have this state.
   */
  state?: XGitLabMergeRequestState | null;

  /**
   * Array of label names. All resolved merge requests will have all of these labels.
   */
  labels?: Array<string> | null;

  /**
   * Merge requests merged after this date.
   */
  mergedAfter?: any | null;

  /**
   * Merge requests merged before this date.
   */
  mergedBefore?: any | null;

  /**
   * Title of the milestone.
   */
  milestoneTitle?: string | null;

  /**
   * Sort merge requests by this criteria.
   * @default "created_desc"
   */
  sort?: XGitLabMergeRequestSort | null;

  /**
   * Merge requests created after this timestamp.
   */
  createdAfter?: any | null;

  /**
   * Merge requests created before this timestamp.
   */
  createdBefore?: any | null;

  /**
   * List of negated arguments.
   * Warning: this argument is experimental and a subject to change in future.
   */
  not?: IXGitLabMergeRequestsResolverNegatedParams | null;

  /**
   * The full-path of the project the authored merge requests should be in.
   * Incompatible with projectId.
   */
  projectPath?: string | null;

  /**
   * The global ID of the project the authored merge requests should be in.
   * Incompatible with projectPath.
   */
  projectId?: any | null;

  /**
   * Username of the assignee.
   */
  assigneeUsername?: string | null;

  /**
   * Username of the reviewer.
   */
  reviewerUsername?: string | null;

  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface ICalloutsOnXGitLabMergeRequestAssigneeArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IGroupMembershipsOnXGitLabMergeRequestAssigneeArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IGroupsOnXGitLabMergeRequestAssigneeArguments {
  /**
   * Search by group name or path.
   */
  search?: string | null;

  /**
   * Filter by permissions the user has on groups.
   */
  permissionScope?: XGitLabGroupPermission | null;

  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IProjectMembershipsOnXGitLabMergeRequestAssigneeArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IReviewRequestedMergeRequestsOnXGitLabMergeRequestAssigneeArguments {
  /**
   * Array of IIDs of merge requests, for example `[1, 2]`.
   */
  iids?: Array<string> | null;

  /**
   * Array of source branch names.
   * All resolved merge requests will have one of these branches as their source.
   */
  sourceBranches?: Array<string> | null;

  /**
   * Array of target branch names.
   * All resolved merge requests will have one of these branches as their target.
   */
  targetBranches?: Array<string> | null;

  /**
   * Merge request state. If provided, all resolved merge requests will have this state.
   */
  state?: XGitLabMergeRequestState | null;

  /**
   * Array of label names. All resolved merge requests will have all of these labels.
   */
  labels?: Array<string> | null;

  /**
   * Merge requests merged after this date.
   */
  mergedAfter?: any | null;

  /**
   * Merge requests merged before this date.
   */
  mergedBefore?: any | null;

  /**
   * Title of the milestone.
   */
  milestoneTitle?: string | null;

  /**
   * Sort merge requests by this criteria.
   * @default "created_desc"
   */
  sort?: XGitLabMergeRequestSort | null;

  /**
   * Merge requests created after this timestamp.
   */
  createdAfter?: any | null;

  /**
   * Merge requests created before this timestamp.
   */
  createdBefore?: any | null;

  /**
   * List of negated arguments.
   * Warning: this argument is experimental and a subject to change in future.
   */
  not?: IXGitLabMergeRequestsResolverNegatedParams | null;

  /**
   * The full-path of the project the authored merge requests should be in.
   * Incompatible with projectId.
   */
  projectPath?: string | null;

  /**
   * The global ID of the project the authored merge requests should be in.
   * Incompatible with projectPath.
   */
  projectId?: any | null;

  /**
   * Username of the author.
   */
  authorUsername?: string | null;

  /**
   * Username of the assignee.
   */
  assigneeUsername?: string | null;

  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface ISnippetsOnXGitLabMergeRequestAssigneeArguments {
  /**
   * Array of global snippet IDs. For example, `gid://gitlab/ProjectSnippet/1`.
   */
  ids?: Array<any> | null;

  /**
   * Visibility of the snippet.
   */
  visibility?: XGitLabVisibilityScopesEnum | null;

  /**
   * Type of snippet.
   */
  type?: XGitLabTypeEnum | null;

  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IStarredProjectsOnXGitLabMergeRequestAssigneeArguments {
  /**
   * Search query.
   */
  search?: string | null;

  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface ITimelogsOnXGitLabMergeRequestAssigneeArguments {
  /**
   * List timelogs within a date range where the logged date is equal to or after startDate.
   */
  startDate?: any | null;

  /**
   * List timelogs within a date range where the logged date is equal to or before endDate.
   */
  endDate?: any | null;

  /**
   * List timelogs within a time range where the logged time is equal to or after startTime.
   */
  startTime?: any | null;

  /**
   * List timelogs within a time range where the logged time is equal to or before endTime.
   */
  endTime?: any | null;

  /**
   * List timelogs for a project.
   */
  projectId?: any | null;

  /**
   * List timelogs for a group.
   */
  groupId?: any | null;

  /**
   * List timelogs for a user.
   */
  username?: string | null;

  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface ITodosOnXGitLabMergeRequestAssigneeArguments {
  /**
   * Action to be filtered.
   */
  action?: Array<XGitLabTodoActionEnum> | null;

  /**
   * ID of an author.
   */
  authorId?: Array<string> | null;

  /**
   * ID of a project.
   */
  projectId?: Array<string> | null;

  /**
   * ID of a group.
   */
  groupId?: Array<string> | null;

  /**
   * State of the todo.
   */
  state?: Array<XGitLabTodoStateEnum> | null;

  /**
   * Type of the todo.
   */
  type?: Array<XGitLabTodoTargetEnum> | null;

  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

/**
 * The connection type for MergeRequestAssignee.
 */
export interface IXGitLabMergeRequestAssigneeConnection {
  __typename: '_xGitLabMergeRequestAssigneeConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitLabMergeRequestAssigneeEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitLabMergeRequestAssignee | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitLabPageInfo;
}

/**
 * An edge in a connection.
 */
export interface IXGitLabMergeRequestAssigneeEdge {
  __typename: '_xGitLabMergeRequestAssigneeEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitLabMergeRequestAssignee | null;
}

/**
 * The connection type for MergeRequest.
 */
export interface IXGitLabMergeRequestConnection {
  __typename: '_xGitLabMergeRequestConnection';

  /**
   * Total count of collection.
   */
  count: number;

  /**
   * A list of edges.
   */
  edges: Array<IXGitLabMergeRequestEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitLabMergeRequest | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitLabPageInfo;

  /**
   * Total sum of time to merge, in seconds, for the collection of merge requests.
   */
  totalTimeToMerge: number | null;
}

/**
 * Autogenerated input type of MergeRequestCreate
 */
export interface IXGitLabMergeRequestCreateInput {
  /**
   * Project full path the merge request is associated with.
   */
  projectPath: string;

  /**
   * Title of the merge request.
   */
  title: string;

  /**
   * Source branch of the merge request.
   */
  sourceBranch: string;

  /**
   * Target branch of the merge request.
   */
  targetBranch: string;

  /**
   * Description of the merge request (Markdown rendered as HTML for caching).
   */
  description?: string | null;

  /**
   * Labels of the merge request.
   */
  labels?: Array<string> | null;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of MergeRequestCreate
 */
export interface IXGitLabMergeRequestCreatePayload {
  __typename: '_xGitLabMergeRequestCreatePayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * Errors encountered during execution of the mutation.
   */
  errors: Array<string>;

  /**
   * Merge request after mutation.
   */
  mergeRequest: IXGitLabMergeRequest | null;
}

/**
 * Represents the Geo sync and verification state of a Merge Request diff
 */
export interface IXGitLabMergeRequestDiffRegistry {
  __typename: '_xGitLabMergeRequestDiffRegistry';

  /**
   * Timestamp when the MergeRequestDiffRegistry was created
   */
  createdAt: any | null;

  /**
   * ID of the MergeRequestDiffRegistry
   */
  id: string;

  /**
   * Error message during sync of the MergeRequestDiffRegistry
   */
  lastSyncFailure: string | null;

  /**
   * Timestamp of the most recent successful sync of the MergeRequestDiffRegistry
   */
  lastSyncedAt: any | null;

  /**
   * ID of the Merge Request diff.
   */
  mergeRequestDiffId: string;

  /**
   * Timestamp after which the MergeRequestDiffRegistry should be resynced
   */
  retryAt: any | null;

  /**
   * Number of consecutive failed sync attempts of the MergeRequestDiffRegistry
   */
  retryCount: number | null;

  /**
   * Sync state of the MergeRequestDiffRegistry
   */
  state: XGitLabRegistryState | null;
}

/**
 * The connection type for MergeRequestDiffRegistry.
 */
export interface IXGitLabMergeRequestDiffRegistryConnection {
  __typename: '_xGitLabMergeRequestDiffRegistryConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitLabMergeRequestDiffRegistryEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitLabMergeRequestDiffRegistry | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitLabPageInfo;
}

/**
 * An edge in a connection.
 */
export interface IXGitLabMergeRequestDiffRegistryEdge {
  __typename: '_xGitLabMergeRequestDiffRegistryEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitLabMergeRequestDiffRegistry | null;
}

/**
 * An edge in a connection.
 */
export interface IXGitLabMergeRequestEdge {
  __typename: '_xGitLabMergeRequestEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitLabMergeRequest | null;
}

/**
 * New state to apply to a merge request.
 */
export const enum XGitLabMergeRequestNewState {
  /**
   * Open the merge request if it is closed.
   */
  OPEN = 'OPEN',

  /**
   * Close the merge request if it is open.
   */
  CLOSED = 'CLOSED',
}

/**
 * Check permissions for the current user on a merge request
 */
export interface IXGitLabMergeRequestPermissions {
  __typename: '_xGitLabMergeRequestPermissions';

  /**
   * Indicates the user can perform `admin_merge_request` on this resource
   */
  adminMergeRequest: boolean;

  /**
   * Indicates the user can perform `can_merge` on this resource
   */
  canMerge: boolean;

  /**
   * Indicates the user can perform `cherry_pick_on_current_merge_request` on this resource
   */
  cherryPickOnCurrentMergeRequest: boolean;

  /**
   * Indicates the user can perform `create_note` on this resource
   */
  createNote: boolean;

  /**
   * Indicates the user can perform `push_to_source_branch` on this resource
   */
  pushToSourceBranch: boolean;

  /**
   * Indicates the user can perform `read_merge_request` on this resource
   */
  readMergeRequest: boolean;

  /**
   * Indicates the user can perform `remove_source_branch` on this resource
   */
  removeSourceBranch: boolean;

  /**
   * Indicates the user can perform `revert_on_current_merge_request` on this resource
   */
  revertOnCurrentMergeRequest: boolean;

  /**
   * Indicates the user can perform `update_merge_request` on this resource
   */
  updateMergeRequest: boolean;
}

/**
 * A user assigned to a merge request as a reviewer.
 */
export interface IXGitLabMergeRequestReviewer {
  __typename: '_xGitLabMergeRequestReviewer';

  /**
   * Merge requests assigned to the user.
   */
  assignedMergeRequests: IXGitLabMergeRequestConnection | null;

  /**
   * Merge requests authored by the user.
   */
  authoredMergeRequests: IXGitLabMergeRequestConnection | null;

  /**
   * URL of the user's avatar.
   */
  avatarUrl: string | null;

  /**
   * Indicates if the user is a bot.
   */
  bot: boolean;

  /**
   * User callouts that belong to the user.
   */
  callouts: IXGitLabUserCalloutConnection | null;

  /**
   * User email. Deprecated in 13.7: This was renamed.
   * @deprecated "This was renamed. Please use `User.publicEmail`. Deprecated in 13.7."
   */
  email: string | null;

  /**
   * Group count for the user.
   */
  groupCount: number | null;

  /**
   * Group memberships of the user.
   */
  groupMemberships: IXGitLabGroupMemberConnection | null;

  /**
   * Groups where the user has access. Will always return `null` if
   * `paginatable_namespace_drop_down_for_project_creation` feature flag is disabled.
   */
  groups: IXGitLabGroupConnection | null;

  /**
   * ID of the user.
   */
  id: string;

  /**
   * Location of the user.
   */
  location: string | null;

  /**
   * Details of this user's interactions with the merge request.
   */
  mergeRequestInteraction: IXGitLabUserMergeRequestInteraction | null;

  /**
   * Human-readable name of the user.
   */
  name: string;

  /**
   * Personal namespace of the user.
   */
  namespace: IXGitLabNamespace | null;

  /**
   * Project memberships of the user.
   */
  projectMemberships: IXGitLabProjectMemberConnection | null;

  /**
   * User's public email.
   */
  publicEmail: string | null;

  /**
   * Merge requests assigned to the user for review.
   */
  reviewRequestedMergeRequests: IXGitLabMergeRequestConnection | null;

  /**
   * Snippets authored by the user.
   */
  snippets: IXGitLabSnippetConnection | null;

  /**
   * Projects starred by the user.
   */
  starredProjects: IXGitLabProjectConnection | null;

  /**
   * State of the user.
   */
  state: XGitLabUserState;

  /**
   * User status.
   */
  status: IXGitLabUserStatus | null;

  /**
   * Time logged by the user.
   */
  timelogs: IXGitLabTimelogConnection | null;

  /**
   * To-do items of the user.
   */
  todos: IXGitLabTodoConnection | null;

  /**
   * Permissions for the current user on the resource.
   */
  userPermissions: IXGitLabUserPermissions;

  /**
   * Username of the user. Unique within this instance of GitLab.
   */
  username: string;

  /**
   * Web path of the user.
   */
  webPath: string;

  /**
   * Web URL of the user.
   */
  webUrl: string;
}

export interface IAssignedMergeRequestsOnXGitLabMergeRequestReviewerArguments {
  /**
   * Array of IIDs of merge requests, for example `[1, 2]`.
   */
  iids?: Array<string> | null;

  /**
   * Array of source branch names.
   * All resolved merge requests will have one of these branches as their source.
   */
  sourceBranches?: Array<string> | null;

  /**
   * Array of target branch names.
   * All resolved merge requests will have one of these branches as their target.
   */
  targetBranches?: Array<string> | null;

  /**
   * Merge request state. If provided, all resolved merge requests will have this state.
   */
  state?: XGitLabMergeRequestState | null;

  /**
   * Array of label names. All resolved merge requests will have all of these labels.
   */
  labels?: Array<string> | null;

  /**
   * Merge requests merged after this date.
   */
  mergedAfter?: any | null;

  /**
   * Merge requests merged before this date.
   */
  mergedBefore?: any | null;

  /**
   * Title of the milestone.
   */
  milestoneTitle?: string | null;

  /**
   * Sort merge requests by this criteria.
   * @default "created_desc"
   */
  sort?: XGitLabMergeRequestSort | null;

  /**
   * Merge requests created after this timestamp.
   */
  createdAfter?: any | null;

  /**
   * Merge requests created before this timestamp.
   */
  createdBefore?: any | null;

  /**
   * List of negated arguments.
   * Warning: this argument is experimental and a subject to change in future.
   */
  not?: IXGitLabMergeRequestsResolverNegatedParams | null;

  /**
   * The full-path of the project the authored merge requests should be in.
   * Incompatible with projectId.
   */
  projectPath?: string | null;

  /**
   * The global ID of the project the authored merge requests should be in.
   * Incompatible with projectPath.
   */
  projectId?: any | null;

  /**
   * Username of the author.
   */
  authorUsername?: string | null;

  /**
   * Username of the reviewer.
   */
  reviewerUsername?: string | null;

  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IAuthoredMergeRequestsOnXGitLabMergeRequestReviewerArguments {
  /**
   * Array of IIDs of merge requests, for example `[1, 2]`.
   */
  iids?: Array<string> | null;

  /**
   * Array of source branch names.
   * All resolved merge requests will have one of these branches as their source.
   */
  sourceBranches?: Array<string> | null;

  /**
   * Array of target branch names.
   * All resolved merge requests will have one of these branches as their target.
   */
  targetBranches?: Array<string> | null;

  /**
   * Merge request state. If provided, all resolved merge requests will have this state.
   */
  state?: XGitLabMergeRequestState | null;

  /**
   * Array of label names. All resolved merge requests will have all of these labels.
   */
  labels?: Array<string> | null;

  /**
   * Merge requests merged after this date.
   */
  mergedAfter?: any | null;

  /**
   * Merge requests merged before this date.
   */
  mergedBefore?: any | null;

  /**
   * Title of the milestone.
   */
  milestoneTitle?: string | null;

  /**
   * Sort merge requests by this criteria.
   * @default "created_desc"
   */
  sort?: XGitLabMergeRequestSort | null;

  /**
   * Merge requests created after this timestamp.
   */
  createdAfter?: any | null;

  /**
   * Merge requests created before this timestamp.
   */
  createdBefore?: any | null;

  /**
   * List of negated arguments.
   * Warning: this argument is experimental and a subject to change in future.
   */
  not?: IXGitLabMergeRequestsResolverNegatedParams | null;

  /**
   * The full-path of the project the authored merge requests should be in.
   * Incompatible with projectId.
   */
  projectPath?: string | null;

  /**
   * The global ID of the project the authored merge requests should be in.
   * Incompatible with projectPath.
   */
  projectId?: any | null;

  /**
   * Username of the assignee.
   */
  assigneeUsername?: string | null;

  /**
   * Username of the reviewer.
   */
  reviewerUsername?: string | null;

  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface ICalloutsOnXGitLabMergeRequestReviewerArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IGroupMembershipsOnXGitLabMergeRequestReviewerArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IGroupsOnXGitLabMergeRequestReviewerArguments {
  /**
   * Search by group name or path.
   */
  search?: string | null;

  /**
   * Filter by permissions the user has on groups.
   */
  permissionScope?: XGitLabGroupPermission | null;

  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IProjectMembershipsOnXGitLabMergeRequestReviewerArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IReviewRequestedMergeRequestsOnXGitLabMergeRequestReviewerArguments {
  /**
   * Array of IIDs of merge requests, for example `[1, 2]`.
   */
  iids?: Array<string> | null;

  /**
   * Array of source branch names.
   * All resolved merge requests will have one of these branches as their source.
   */
  sourceBranches?: Array<string> | null;

  /**
   * Array of target branch names.
   * All resolved merge requests will have one of these branches as their target.
   */
  targetBranches?: Array<string> | null;

  /**
   * Merge request state. If provided, all resolved merge requests will have this state.
   */
  state?: XGitLabMergeRequestState | null;

  /**
   * Array of label names. All resolved merge requests will have all of these labels.
   */
  labels?: Array<string> | null;

  /**
   * Merge requests merged after this date.
   */
  mergedAfter?: any | null;

  /**
   * Merge requests merged before this date.
   */
  mergedBefore?: any | null;

  /**
   * Title of the milestone.
   */
  milestoneTitle?: string | null;

  /**
   * Sort merge requests by this criteria.
   * @default "created_desc"
   */
  sort?: XGitLabMergeRequestSort | null;

  /**
   * Merge requests created after this timestamp.
   */
  createdAfter?: any | null;

  /**
   * Merge requests created before this timestamp.
   */
  createdBefore?: any | null;

  /**
   * List of negated arguments.
   * Warning: this argument is experimental and a subject to change in future.
   */
  not?: IXGitLabMergeRequestsResolverNegatedParams | null;

  /**
   * The full-path of the project the authored merge requests should be in.
   * Incompatible with projectId.
   */
  projectPath?: string | null;

  /**
   * The global ID of the project the authored merge requests should be in.
   * Incompatible with projectPath.
   */
  projectId?: any | null;

  /**
   * Username of the author.
   */
  authorUsername?: string | null;

  /**
   * Username of the assignee.
   */
  assigneeUsername?: string | null;

  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface ISnippetsOnXGitLabMergeRequestReviewerArguments {
  /**
   * Array of global snippet IDs. For example, `gid://gitlab/ProjectSnippet/1`.
   */
  ids?: Array<any> | null;

  /**
   * Visibility of the snippet.
   */
  visibility?: XGitLabVisibilityScopesEnum | null;

  /**
   * Type of snippet.
   */
  type?: XGitLabTypeEnum | null;

  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IStarredProjectsOnXGitLabMergeRequestReviewerArguments {
  /**
   * Search query.
   */
  search?: string | null;

  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface ITimelogsOnXGitLabMergeRequestReviewerArguments {
  /**
   * List timelogs within a date range where the logged date is equal to or after startDate.
   */
  startDate?: any | null;

  /**
   * List timelogs within a date range where the logged date is equal to or before endDate.
   */
  endDate?: any | null;

  /**
   * List timelogs within a time range where the logged time is equal to or after startTime.
   */
  startTime?: any | null;

  /**
   * List timelogs within a time range where the logged time is equal to or before endTime.
   */
  endTime?: any | null;

  /**
   * List timelogs for a project.
   */
  projectId?: any | null;

  /**
   * List timelogs for a group.
   */
  groupId?: any | null;

  /**
   * List timelogs for a user.
   */
  username?: string | null;

  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface ITodosOnXGitLabMergeRequestReviewerArguments {
  /**
   * Action to be filtered.
   */
  action?: Array<XGitLabTodoActionEnum> | null;

  /**
   * ID of an author.
   */
  authorId?: Array<string> | null;

  /**
   * ID of a project.
   */
  projectId?: Array<string> | null;

  /**
   * ID of a group.
   */
  groupId?: Array<string> | null;

  /**
   * State of the todo.
   */
  state?: Array<XGitLabTodoStateEnum> | null;

  /**
   * Type of the todo.
   */
  type?: Array<XGitLabTodoTargetEnum> | null;

  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

/**
 * The connection type for MergeRequestReviewer.
 */
export interface IXGitLabMergeRequestReviewerConnection {
  __typename: '_xGitLabMergeRequestReviewerConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitLabMergeRequestReviewerEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitLabMergeRequestReviewer | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitLabPageInfo;
}

/**
 * An edge in a connection.
 */
export interface IXGitLabMergeRequestReviewerEdge {
  __typename: '_xGitLabMergeRequestReviewerEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitLabMergeRequestReviewer | null;
}

/**
 * Autogenerated input type of MergeRequestReviewerRereview
 */
export interface IXGitLabMergeRequestReviewerRereviewInput {
  /**
   * Project the merge request to mutate is in.
   */
  projectPath: string;

  /**
   * IID of the merge request to mutate.
   */
  iid: string;

  /**
   * User ID for the user that has been requested for a new review.
   */
  userId: any;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of MergeRequestReviewerRereview
 */
export interface IXGitLabMergeRequestReviewerRereviewPayload {
  __typename: '_xGitLabMergeRequestReviewerRereviewPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * Errors encountered during execution of the mutation.
   */
  errors: Array<string>;

  /**
   * Merge request after mutation.
   */
  mergeRequest: IXGitLabMergeRequest | null;
}

/**
 * State of a review of a GitLab merge request.
 */
export const enum XGitLabMergeRequestReviewState {
  /**
   * The merge request is unreviewed.
   */
  UNREVIEWED = 'UNREVIEWED',

  /**
   * The merge request is reviewed.
   */
  REVIEWED = 'REVIEWED',

  /**
   * The merge request is attention_required.
   */
  ATTENTION_REQUIRED = 'ATTENTION_REQUIRED',
}

/**
 * Autogenerated input type of MergeRequestSetAssignees
 */
export interface IXGitLabMergeRequestSetAssigneesInput {
  /**
   * Project the merge request to mutate is in.
   */
  projectPath: string;

  /**
   * IID of the merge request to mutate.
   */
  iid: string;

  /**
   * Usernames to assign to the resource. Replaces existing assignees by default.
   */
  assigneeUsernames: Array<string>;

  /**
   * Operation to perform. Defaults to REPLACE.
   * @default "REPLACE"
   */
  operationMode?: XGitLabMutationOperationMode | null;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of MergeRequestSetAssignees
 */
export interface IXGitLabMergeRequestSetAssigneesPayload {
  __typename: '_xGitLabMergeRequestSetAssigneesPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * Errors encountered during execution of the mutation.
   */
  errors: Array<string>;

  /**
   * Merge request after mutation.
   */
  mergeRequest: IXGitLabMergeRequest | null;
}

/**
 * Autogenerated input type of MergeRequestSetDraft
 */
export interface IXGitLabMergeRequestSetDraftInput {
  /**
   * Project the merge request to mutate is in.
   */
  projectPath: string;

  /**
   * IID of the merge request to mutate.
   */
  iid: string;

  /**
   * Whether or not to set the merge request as a draft.
   */
  draft: boolean;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of MergeRequestSetDraft
 */
export interface IXGitLabMergeRequestSetDraftPayload {
  __typename: '_xGitLabMergeRequestSetDraftPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * Errors encountered during execution of the mutation.
   */
  errors: Array<string>;

  /**
   * Merge request after mutation.
   */
  mergeRequest: IXGitLabMergeRequest | null;
}

/**
 * Autogenerated input type of MergeRequestSetLabels
 */
export interface IXGitLabMergeRequestSetLabelsInput {
  /**
   * Project the merge request to mutate is in.
   */
  projectPath: string;

  /**
   * IID of the merge request to mutate.
   */
  iid: string;

  /**
   * Label IDs to set. Replaces existing labels by default.
   */
  labelIds: Array<any>;

  /**
   * Changes the operation mode. Defaults to REPLACE.
   */
  operationMode?: XGitLabMutationOperationMode | null;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of MergeRequestSetLabels
 */
export interface IXGitLabMergeRequestSetLabelsPayload {
  __typename: '_xGitLabMergeRequestSetLabelsPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * Errors encountered during execution of the mutation.
   */
  errors: Array<string>;

  /**
   * Merge request after mutation.
   */
  mergeRequest: IXGitLabMergeRequest | null;
}

/**
 * Autogenerated input type of MergeRequestSetLocked
 */
export interface IXGitLabMergeRequestSetLockedInput {
  /**
   * Project the merge request to mutate is in.
   */
  projectPath: string;

  /**
   * IID of the merge request to mutate.
   */
  iid: string;

  /**
   * Whether or not to lock the merge request.
   */
  locked: boolean;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of MergeRequestSetLocked
 */
export interface IXGitLabMergeRequestSetLockedPayload {
  __typename: '_xGitLabMergeRequestSetLockedPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * Errors encountered during execution of the mutation.
   */
  errors: Array<string>;

  /**
   * Merge request after mutation.
   */
  mergeRequest: IXGitLabMergeRequest | null;
}

/**
 * Autogenerated input type of MergeRequestSetMilestone
 */
export interface IXGitLabMergeRequestSetMilestoneInput {
  /**
   * Project the merge request to mutate is in.
   */
  projectPath: string;

  /**
   * IID of the merge request to mutate.
   */
  iid: string;

  /**
   * Milestone to assign to the merge request.
   */
  milestoneId?: any | null;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of MergeRequestSetMilestone
 */
export interface IXGitLabMergeRequestSetMilestonePayload {
  __typename: '_xGitLabMergeRequestSetMilestonePayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * Errors encountered during execution of the mutation.
   */
  errors: Array<string>;

  /**
   * Merge request after mutation.
   */
  mergeRequest: IXGitLabMergeRequest | null;
}

/**
 * Autogenerated input type of MergeRequestSetSubscription
 */
export interface IXGitLabMergeRequestSetSubscriptionInput {
  /**
   * Desired state of the subscription.
   */
  subscribedState: boolean;

  /**
   * Project the merge request to mutate is in.
   */
  projectPath: string;

  /**
   * IID of the merge request to mutate.
   */
  iid: string;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of MergeRequestSetSubscription
 */
export interface IXGitLabMergeRequestSetSubscriptionPayload {
  __typename: '_xGitLabMergeRequestSetSubscriptionPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * Errors encountered during execution of the mutation.
   */
  errors: Array<string>;

  /**
   * Merge request after mutation.
   */
  mergeRequest: IXGitLabMergeRequest | null;
}

/**
 * Autogenerated input type of MergeRequestSetWip
 */
export interface IXGitLabMergeRequestSetWipInput {
  /**
   * Project the merge request to mutate is in.
   */
  projectPath: string;

  /**
   * IID of the merge request to mutate.
   */
  iid: string;

  /**
   * Whether or not to set the merge request as a draft.
   */
  wip: boolean;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of MergeRequestSetWip
 */
export interface IXGitLabMergeRequestSetWipPayload {
  __typename: '_xGitLabMergeRequestSetWipPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * Errors encountered during execution of the mutation.
   */
  errors: Array<string>;

  /**
   * Merge request after mutation.
   */
  mergeRequest: IXGitLabMergeRequest | null;
}

/**
 * Values for sorting merge requests
 */
export const enum XGitLabMergeRequestSort {
  /**
   * Updated at descending order.
   * @deprecated "This was renamed. Please use `UPDATED_DESC`. Deprecated in 13.5."
   */
  updated_desc = 'updated_desc',

  /**
   * Updated at ascending order.
   * @deprecated "This was renamed. Please use `UPDATED_ASC`. Deprecated in 13.5."
   */
  updated_asc = 'updated_asc',

  /**
   * Created at descending order.
   * @deprecated "This was renamed. Please use `CREATED_DESC`. Deprecated in 13.5."
   */
  created_desc = 'created_desc',

  /**
   * Created at ascending order.
   * @deprecated "This was renamed. Please use `CREATED_ASC`. Deprecated in 13.5."
   */
  created_asc = 'created_asc',

  /**
   * Updated at descending order.
   */
  UPDATED_DESC = 'UPDATED_DESC',

  /**
   * Updated at ascending order.
   */
  UPDATED_ASC = 'UPDATED_ASC',

  /**
   * Created at descending order.
   */
  CREATED_DESC = 'CREATED_DESC',

  /**
   * Created at ascending order.
   */
  CREATED_ASC = 'CREATED_ASC',

  /**
   * Priority by ascending order.
   */
  PRIORITY_ASC = 'PRIORITY_ASC',

  /**
   * Priority by descending order.
   */
  PRIORITY_DESC = 'PRIORITY_DESC',

  /**
   * Label priority by ascending order.
   */
  LABEL_PRIORITY_ASC = 'LABEL_PRIORITY_ASC',

  /**
   * Label priority by descending order.
   */
  LABEL_PRIORITY_DESC = 'LABEL_PRIORITY_DESC',

  /**
   * Milestone due date by ascending order.
   */
  MILESTONE_DUE_ASC = 'MILESTONE_DUE_ASC',

  /**
   * Milestone due date by descending order.
   */
  MILESTONE_DUE_DESC = 'MILESTONE_DUE_DESC',

  /**
   * Merge time by ascending order.
   */
  MERGED_AT_ASC = 'MERGED_AT_ASC',

  /**
   * Merge time by descending order.
   */
  MERGED_AT_DESC = 'MERGED_AT_DESC',

  /**
   * Closed time by ascending order.
   */
  CLOSED_AT_ASC = 'CLOSED_AT_ASC',

  /**
   * Closed time by descending order.
   */
  CLOSED_AT_DESC = 'CLOSED_AT_DESC',
}

export interface IXGitLabMergeRequestsResolverNegatedParams {
  /**
   * Array of label names. All resolved merge requests will not have these labels.
   */
  labels?: Array<string> | null;

  /**
   * Title of the milestone.
   */
  milestoneTitle?: string | null;
}

/**
 * State of a GitLab merge request
 */
export const enum XGitLabMergeRequestState {
  /**
   * In open state.
   */
  opened = 'opened',

  /**
   * In closed state.
   */
  closed = 'closed',

  /**
   * Discussion has been locked.
   */
  locked = 'locked',

  /**
   * All available.
   */
  all = 'all',

  /**
   * Merge request has been merged.
   */
  merged = 'merged',
}

/**
 * Autogenerated input type of MergeRequestUpdate
 */
export interface IXGitLabMergeRequestUpdateInput {
  /**
   * Project the merge request to mutate is in.
   */
  projectPath: string;

  /**
   * IID of the merge request to mutate.
   */
  iid: string;

  /**
   * Title of the merge request.
   */
  title?: string | null;

  /**
   * Target branch of the merge request.
   */
  targetBranch?: string | null;

  /**
   * Description of the merge request (Markdown rendered as HTML for caching).
   */
  description?: string | null;

  /**
   * Action to perform to change the state.
   */
  state?: XGitLabMergeRequestNewState | null;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of MergeRequestUpdate
 */
export interface IXGitLabMergeRequestUpdatePayload {
  __typename: '_xGitLabMergeRequestUpdatePayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * Errors encountered during execution of the mutation.
   */
  errors: Array<string>;

  /**
   * Merge request after mutation.
   */
  mergeRequest: IXGitLabMergeRequest | null;
}

/**
 * Representation of whether a GitLab merge request can be merged.
 */
export const enum XGitLabMergeStatus {
  /**
   * Merge status has not been checked.
   */
  UNCHECKED = 'UNCHECKED',

  /**
   * Currently checking for mergeability.
   */
  CHECKING = 'CHECKING',

  /**
   * There are no conflicts between the source and target branches.
   */
  CAN_BE_MERGED = 'CAN_BE_MERGED',

  /**
   * There are conflicts between the source and target branches.
   */
  CANNOT_BE_MERGED = 'CANNOT_BE_MERGED',

  /**
   * Currently unchecked. The previous state was `CANNOT_BE_MERGED`.
   */
  CANNOT_BE_MERGED_RECHECK = 'CANNOT_BE_MERGED_RECHECK',
}

export const enum XGitLabMergeStrategyEnum {
  /**
   * Use the merge_train merge strategy.
   */
  MERGE_TRAIN = 'MERGE_TRAIN',

  /**
   * Use the add_to_merge_train_when_pipeline_succeeds merge strategy.
   */
  ADD_TO_MERGE_TRAIN_WHEN_PIPELINE_SUCCEEDS = 'ADD_TO_MERGE_TRAIN_WHEN_PIPELINE_SUCCEEDS',

  /**
   * Use the merge_when_pipeline_succeeds merge strategy.
   */
  MERGE_WHEN_PIPELINE_SUCCEEDS = 'MERGE_WHEN_PIPELINE_SUCCEEDS',
}

export interface IXGitLabMetadata {
  __typename: '_xGitLabMetadata';

  /**
   * Metadata about KAS.
   */
  kas: IXGitLabKas;

  /**
   * Revision.
   */
  revision: string;

  /**
   * Version.
   */
  version: string;
}

/**
 * Represents a metric image upload
 */
export interface IXGitLabMetricImage {
  __typename: '_xGitLabMetricImage';

  /**
   * File name of the metric image.
   */
  fileName: string | null;

  /**
   * File path of the metric image.
   */
  filePath: string | null;

  /**
   * ID of the metric upload.
   */
  id: string;

  /**
   * Internal ID of the metric upload.
   */
  iid: string;

  /**
   * URL of the metric source.
   */
  url: string;
}

export interface IXGitLabMetricsDashboard {
  __typename: '_xGitLabMetricsDashboard';

  /**
   * Annotations added to the dashboard.
   */
  annotations: IXGitLabMetricsDashboardAnnotationConnection | null;

  /**
   * Path to a file with the dashboard definition.
   */
  path: string | null;

  /**
   * Dashboard schema validation warnings.
   */
  schemaValidationWarnings: Array<string> | null;
}

export interface IAnnotationsOnXGitLabMetricsDashboardArguments {
  /**
   * Timestamp marking date and time from which annotations need to be fetched.
   */
  from: any;

  /**
   * Timestamp marking date and time to which annotations need to be fetched.
   */
  to?: any | null;

  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IXGitLabMetricsDashboardAnnotation {
  __typename: '_xGitLabMetricsDashboardAnnotation';

  /**
   * Description of the annotation.
   */
  description: string | null;

  /**
   * Timestamp marking end of annotated time span.
   */
  endingAt: any | null;

  /**
   * ID of the annotation.
   */
  id: string;

  /**
   * ID of a dashboard panel to which the annotation should be scoped.
   */
  panelId: string | null;

  /**
   * Timestamp marking start of annotated time span.
   */
  startingAt: any | null;
}

/**
 * The connection type for MetricsDashboardAnnotation.
 */
export interface IXGitLabMetricsDashboardAnnotationConnection {
  __typename: '_xGitLabMetricsDashboardAnnotationConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitLabMetricsDashboardAnnotationEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitLabMetricsDashboardAnnotation | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitLabPageInfo;
}

/**
 * An edge in a connection.
 */
export interface IXGitLabMetricsDashboardAnnotationEdge {
  __typename: '_xGitLabMetricsDashboardAnnotationEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitLabMetricsDashboardAnnotation | null;
}

/**
 * Represents a milestone
 */
export interface IXGitLabMilestone {
  __typename: '_xGitLabMilestone';

  /**
   * Timestamp of milestone creation.
   */
  createdAt: any;

  /**
   * Description of the milestone.
   */
  description: string | null;

  /**
   * Timestamp of the milestone due date.
   */
  dueDate: any | null;

  /**
   * Expired state of the milestone (a milestone is expired when the due date is
   * past the current date). Defaults to `false` when due date has not been set.
   */
  expired: boolean;

  /**
   * Indicates if milestone is at group level.
   */
  groupMilestone: boolean;

  /**
   * ID of the milestone.
   */
  id: string;

  /**
   * Internal ID of the milestone.
   */
  iid: string;

  /**
   * Indicates if milestone is at project level.
   */
  projectMilestone: boolean;

  /**
   * Historically accurate report about the timebox.
   */
  report: IXGitLabTimeboxReport | null;

  /**
   * Timestamp of the milestone start date.
   */
  startDate: any | null;

  /**
   * State of the milestone.
   */
  state: XGitLabMilestoneStateEnum;

  /**
   * Milestone statistics.
   */
  stats: IXGitLabMilestoneStats | null;

  /**
   * Indicates if milestone is at subgroup level.
   */
  subgroupMilestone: boolean;

  /**
   * Title of the milestone.
   */
  title: string;

  /**
   * Timestamp of last milestone update.
   */
  updatedAt: any;

  /**
   * Web path of the milestone.
   */
  webPath: string;
}

/**
 * The connection type for Milestone.
 */
export interface IXGitLabMilestoneConnection {
  __typename: '_xGitLabMilestoneConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitLabMilestoneEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitLabMilestone | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitLabPageInfo;
}

/**
 * An edge in a connection.
 */
export interface IXGitLabMilestoneEdge {
  __typename: '_xGitLabMilestoneEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitLabMilestone | null;
}

/**
 * Values for sorting milestones
 */
export const enum XGitLabMilestoneSort {
  /**
   * Updated at descending order.
   * @deprecated "This was renamed. Please use `UPDATED_DESC`. Deprecated in 13.5."
   */
  updated_desc = 'updated_desc',

  /**
   * Updated at ascending order.
   * @deprecated "This was renamed. Please use `UPDATED_ASC`. Deprecated in 13.5."
   */
  updated_asc = 'updated_asc',

  /**
   * Created at descending order.
   * @deprecated "This was renamed. Please use `CREATED_DESC`. Deprecated in 13.5."
   */
  created_desc = 'created_desc',

  /**
   * Created at ascending order.
   * @deprecated "This was renamed. Please use `CREATED_ASC`. Deprecated in 13.5."
   */
  created_asc = 'created_asc',

  /**
   * Updated at descending order.
   */
  UPDATED_DESC = 'UPDATED_DESC',

  /**
   * Updated at ascending order.
   */
  UPDATED_ASC = 'UPDATED_ASC',

  /**
   * Created at descending order.
   */
  CREATED_DESC = 'CREATED_DESC',

  /**
   * Created at ascending order.
   */
  CREATED_ASC = 'CREATED_ASC',

  /**
   * Milestone due date by ascending order.
   */
  DUE_DATE_ASC = 'DUE_DATE_ASC',

  /**
   * Milestone due date by descending order.
   */
  DUE_DATE_DESC = 'DUE_DATE_DESC',

  /**
   * Group milestones in this order: non-expired milestones with due dates,
   * non-expired milestones without due dates and expired milestones then sort by
   * due date in ascending order.
   */
  EXPIRED_LAST_DUE_DATE_ASC = 'EXPIRED_LAST_DUE_DATE_ASC',

  /**
   * Group milestones in this order: non-expired milestones with due dates,
   * non-expired milestones without due dates and expired milestones then sort by
   * due date in descending order.
   */
  EXPIRED_LAST_DUE_DATE_DESC = 'EXPIRED_LAST_DUE_DATE_DESC',
}

/**
 * Current state of milestone
 */
export const enum XGitLabMilestoneStateEnum {
  /**
   * Milestone is currently active.
   */
  active = 'active',

  /**
   * Milestone is closed.
   */
  closed = 'closed',
}

/**
 * Contains statistics about a milestone
 */
export interface IXGitLabMilestoneStats {
  __typename: '_xGitLabMilestoneStats';

  /**
   * Number of closed issues associated with the milestone.
   */
  closedIssuesCount: number | null;

  /**
   * Total number of issues associated with the milestone.
   */
  totalIssuesCount: number | null;
}

/**
 * Milestone ID wildcard values
 */
export const enum XGitLabMilestoneWildcardId {
  /**
   * No milestone is assigned.
   */
  NONE = 'NONE',

  /**
   * Milestone is assigned.
   */
  ANY = 'ANY',

  /**
   * Milestone assigned is open and started (start date <= today).
   */
  STARTED = 'STARTED',

  /**
   * Milestone assigned is due in the future (due date > today).
   */
  UPCOMING = 'UPCOMING',
}

/**
 * The position to which the adjacent object should be moved
 */
export const enum XGitLabMoveType {
  /**
   * Adjacent object is moved before the object that is being moved.
   */
  before = 'before',

  /**
   * Adjacent object is moved after the object that is being moved.
   */
  after = 'after',
}

export interface IXGitLabMutation {
  __typename: '_xGitLabMutation';
  addProjectToSecurityDashboard: IXGitLabAddProjectToSecurityDashboardPayload | null;
  adminSidekiqQueuesDeleteJobs: IXGitLabAdminSidekiqQueuesDeleteJobsPayload | null;
  alertSetAssignees: IXGitLabAlertSetAssigneesPayload | null;
  alertTodoCreate: IXGitLabAlertTodoCreatePayload | null;
  apiFuzzingCiConfigurationCreate: IXGitLabApiFuzzingCiConfigurationCreatePayload | null;
  awardEmojiAdd: IXGitLabAwardEmojiAddPayload | null;
  awardEmojiRemove: IXGitLabAwardEmojiRemovePayload | null;
  awardEmojiToggle: IXGitLabAwardEmojiTogglePayload | null;
  boardEpicCreate: IXGitLabBoardEpicCreatePayload | null;
  boardListCreate: IXGitLabBoardListCreatePayload | null;
  boardListUpdateLimitMetrics: IXGitLabBoardListUpdateLimitMetricsPayload | null;

  /**
   * **BETA** This endpoint is subject to change without notice.
   */
  bulkEnableDevopsAdoptionNamespaces: IXGitLabBulkEnableDevopsAdoptionNamespacesPayload | null;
  ciCdSettingsUpdate: IXGitLabCiCdSettingsUpdatePayload | null;
  ciJobTokenScopeAddProject: IXGitLabCiJobTokenScopeAddProjectPayload | null;
  ciJobTokenScopeRemoveProject: IXGitLabCiJobTokenScopeRemoveProjectPayload | null;
  clusterAgentDelete: IXGitLabClusterAgentDeletePayload | null;
  clusterAgentTokenCreate: IXGitLabClusterAgentTokenCreatePayload | null;
  clusterAgentTokenDelete: IXGitLabClusterAgentTokenDeletePayload | null;
  commitCreate: IXGitLabCommitCreatePayload | null;

  /**
   * Configure Dependency Scanning for a project by enabling Dependency Scanning in a new or modified
   * `.gitlab-ci.yml` file in a new branch. The new branch and a URL to
   * create a Merge Request are a part of the response.
   */
  configureDependencyScanning: IXGitLabConfigureDependencyScanningPayload | null;

  /**
   * Configure SAST for a project by enabling SAST in a new or modified
   * `.gitlab-ci.yml` file in a new branch. The new branch and a URL to
   * create a Merge Request are a part of the response.
   */
  configureSast: IXGitLabConfigureSastPayload | null;

  /**
   * Configure Secret Detection for a project by enabling Secret Detection
   * in a new or modified `.gitlab-ci.yml` file in a new branch. The new
   * branch and a URL to create a Merge Request are a part of the
   * response.
   */
  configureSecretDetection: IXGitLabConfigureSecretDetectionPayload | null;
  createAlertIssue: IXGitLabCreateAlertIssuePayload | null;
  createAnnotation: IXGitLabCreateAnnotationPayload | null;
  createBoard: IXGitLabCreateBoardPayload | null;
  createBranch: IXGitLabCreateBranchPayload | null;
  createClusterAgent: IXGitLabCreateClusterAgentPayload | null;
  createComplianceFramework: IXGitLabCreateComplianceFrameworkPayload | null;

  /**
   *  Available only when feature flag `custom_emoji` is enabled. This flag is
   * disabled by default, because the feature is experimental and is subject to
   * change without notice.
   */
  createCustomEmoji: IXGitLabCreateCustomEmojiPayload | null;
  createDiffNote: IXGitLabCreateDiffNotePayload | null;
  createEpic: IXGitLabCreateEpicPayload | null;
  createImageDiffNote: IXGitLabCreateImageDiffNotePayload | null;
  createIssue: IXGitLabCreateIssuePayload | null;

  /**
   * @deprecated "Use iterationCreate. Deprecated in 14.0."
   */
  createIteration: IXGitLabCreateIterationPayload | null;
  createNote: IXGitLabCreateNotePayload | null;
  createRequirement: IXGitLabCreateRequirementPayload | null;
  createSnippet: IXGitLabCreateSnippetPayload | null;
  createTestCase: IXGitLabCreateTestCasePayload | null;
  customerRelationsContactCreate: IXGitLabCustomerRelationsContactCreatePayload | null;
  customerRelationsContactUpdate: IXGitLabCustomerRelationsContactUpdatePayload | null;
  customerRelationsOrganizationCreate: IXGitLabCustomerRelationsOrganizationCreatePayload | null;
  customerRelationsOrganizationUpdate: IXGitLabCustomerRelationsOrganizationUpdatePayload | null;
  dastOnDemandScanCreate: IXGitLabDastOnDemandScanCreatePayload | null;
  dastProfileCreate: IXGitLabDastProfileCreatePayload | null;
  dastProfileDelete: IXGitLabDastProfileDeletePayload | null;
  dastProfileRun: IXGitLabDastProfileRunPayload | null;
  dastProfileUpdate: IXGitLabDastProfileUpdatePayload | null;
  dastScannerProfileCreate: IXGitLabDastScannerProfileCreatePayload | null;
  dastScannerProfileDelete: IXGitLabDastScannerProfileDeletePayload | null;
  dastScannerProfileUpdate: IXGitLabDastScannerProfileUpdatePayload | null;
  dastSiteProfileCreate: IXGitLabDastSiteProfileCreatePayload | null;
  dastSiteProfileDelete: IXGitLabDastSiteProfileDeletePayload | null;
  dastSiteProfileUpdate: IXGitLabDastSiteProfileUpdatePayload | null;
  dastSiteTokenCreate: IXGitLabDastSiteTokenCreatePayload | null;
  dastSiteValidationCreate: IXGitLabDastSiteValidationCreatePayload | null;
  dastSiteValidationRevoke: IXGitLabDastSiteValidationRevokePayload | null;
  deleteAnnotation: IXGitLabDeleteAnnotationPayload | null;
  designManagementDelete: IXGitLabDesignManagementDeletePayload | null;
  designManagementMove: IXGitLabDesignManagementMovePayload | null;
  designManagementUpload: IXGitLabDesignManagementUploadPayload | null;
  destroyBoard: IXGitLabDestroyBoardPayload | null;
  destroyBoardList: IXGitLabDestroyBoardListPayload | null;
  destroyComplianceFramework: IXGitLabDestroyComplianceFrameworkPayload | null;
  destroyContainerRepository: IXGitLabDestroyContainerRepositoryPayload | null;
  destroyContainerRepositoryTags: IXGitLabDestroyContainerRepositoryTagsPayload | null;

  /**
   *  Available only when feature flag `custom_emoji` is enabled. This flag is
   * disabled by default, because the feature is experimental and is subject to
   * change without notice.
   */
  destroyCustomEmoji: IXGitLabDestroyCustomEmojiPayload | null;
  destroyEpicBoard: IXGitLabDestroyEpicBoardPayload | null;
  destroyNote: IXGitLabDestroyNotePayload | null;
  destroyPackage: IXGitLabDestroyPackagePayload | null;
  destroyPackageFile: IXGitLabDestroyPackageFilePayload | null;
  destroySnippet: IXGitLabDestroySnippetPayload | null;

  /**
   * **BETA** This endpoint is subject to change without notice.
   */
  disableDevopsAdoptionNamespace: IXGitLabDisableDevopsAdoptionNamespacePayload | null;

  /**
   * Toggles the resolved state of a discussion
   */
  discussionToggleResolve: IXGitLabDiscussionToggleResolvePayload | null;

  /**
   * A mutation that does not perform any changes.
   *
   * This is expected to be used for testing of endpoints, to verify
   * that a user has mutation access.
   */
  echoCreate: IXGitLabEchoCreatePayload | null;

  /**
   * **BETA** This endpoint is subject to change without notice.
   */
  enableDevopsAdoptionNamespace: IXGitLabEnableDevopsAdoptionNamespacePayload | null;
  environmentsCanaryIngressUpdate: IXGitLabEnvironmentsCanaryIngressUpdatePayload | null;
  epicAddIssue: IXGitLabEpicAddIssuePayload | null;
  epicBoardCreate: IXGitLabEpicBoardCreatePayload | null;
  epicBoardListCreate: IXGitLabEpicBoardListCreatePayload | null;

  /**
   * Destroys an epic board list.
   */
  epicBoardListDestroy: IXGitLabEpicBoardListDestroyPayload | null;
  epicBoardUpdate: IXGitLabEpicBoardUpdatePayload | null;
  epicMoveList: IXGitLabEpicMoveListPayload | null;
  epicSetSubscription: IXGitLabEpicSetSubscriptionPayload | null;
  epicTreeReorder: IXGitLabEpicTreeReorderPayload | null;
  escalationPolicyCreate: IXGitLabEscalationPolicyCreatePayload | null;
  escalationPolicyDestroy: IXGitLabEscalationPolicyDestroyPayload | null;
  escalationPolicyUpdate: IXGitLabEscalationPolicyUpdatePayload | null;
  exportRequirements: IXGitLabExportRequirementsPayload | null;
  externalAuditEventDestinationCreate: IXGitLabExternalAuditEventDestinationCreatePayload | null;
  externalAuditEventDestinationDestroy: IXGitLabExternalAuditEventDestinationDestroyPayload | null;
  externalAuditEventDestinationUpdate: IXGitLabExternalAuditEventDestinationUpdatePayload | null;
  gitlabSubscriptionActivate: IXGitLabGitlabSubscriptionActivatePayload | null;
  groupUpdate: IXGitLabGroupUpdatePayload | null;
  httpIntegrationCreate: IXGitLabHttpIntegrationCreatePayload | null;
  httpIntegrationDestroy: IXGitLabHttpIntegrationDestroyPayload | null;
  httpIntegrationResetToken: IXGitLabHttpIntegrationResetTokenPayload | null;
  httpIntegrationUpdate: IXGitLabHttpIntegrationUpdatePayload | null;
  issueMove: IXGitLabIssueMovePayload | null;
  issueMoveList: IXGitLabIssueMoveListPayload | null;
  issueSetAssignees: IXGitLabIssueSetAssigneesPayload | null;
  issueSetConfidential: IXGitLabIssueSetConfidentialPayload | null;
  issueSetDueDate: IXGitLabIssueSetDueDatePayload | null;
  issueSetEpic: IXGitLabIssueSetEpicPayload | null;
  issueSetIteration: IXGitLabIssueSetIterationPayload | null;
  issueSetLocked: IXGitLabIssueSetLockedPayload | null;
  issueSetSeverity: IXGitLabIssueSetSeverityPayload | null;
  issueSetSubscription: IXGitLabIssueSetSubscriptionPayload | null;
  issueSetWeight: IXGitLabIssueSetWeightPayload | null;
  iterationCadenceCreate: IXGitLabIterationCadenceCreatePayload | null;
  iterationCadenceDestroy: IXGitLabIterationCadenceDestroyPayload | null;
  iterationCadenceUpdate: IXGitLabIterationCadenceUpdatePayload | null;
  iterationCreate: IXGitLabiterationCreatePayload | null;
  iterationDelete: IXGitLabIterationDeletePayload | null;
  jiraImportStart: IXGitLabJiraImportStartPayload | null;
  jiraImportUsers: IXGitLabJiraImportUsersPayload | null;
  jobCancel: IXGitLabJobCancelPayload | null;
  jobPlay: IXGitLabJobPlayPayload | null;
  jobRetry: IXGitLabJobRetryPayload | null;
  jobUnschedule: IXGitLabJobUnschedulePayload | null;
  labelCreate: IXGitLabLabelCreatePayload | null;
  markAsSpamSnippet: IXGitLabMarkAsSpamSnippetPayload | null;

  /**
   * Accepts a merge request.
   * When accepted, the source branch will be merged into the target branch, either
   * immediately if possible, or using one of the automatic merge strategies.
   */
  mergeRequestAccept: IXGitLabMergeRequestAcceptPayload | null;
  mergeRequestCreate: IXGitLabMergeRequestCreatePayload | null;
  mergeRequestReviewerRereview: IXGitLabMergeRequestReviewerRereviewPayload | null;
  mergeRequestSetAssignees: IXGitLabMergeRequestSetAssigneesPayload | null;
  mergeRequestSetDraft: IXGitLabMergeRequestSetDraftPayload | null;
  mergeRequestSetLabels: IXGitLabMergeRequestSetLabelsPayload | null;
  mergeRequestSetLocked: IXGitLabMergeRequestSetLockedPayload | null;
  mergeRequestSetMilestone: IXGitLabMergeRequestSetMilestonePayload | null;
  mergeRequestSetSubscription: IXGitLabMergeRequestSetSubscriptionPayload | null;

  /**
   * @deprecated "Use mergeRequestSetDraft. Deprecated in 13.12."
   */
  mergeRequestSetWip: IXGitLabMergeRequestSetWipPayload | null;

  /**
   * Update attributes of a merge request
   */
  mergeRequestUpdate: IXGitLabMergeRequestUpdatePayload | null;
  namespaceIncreaseStorageTemporarily: IXGitLabNamespaceIncreaseStorageTemporarilyPayload | null;
  oncallRotationCreate: IXGitLabOncallRotationCreatePayload | null;
  oncallRotationDestroy: IXGitLabOncallRotationDestroyPayload | null;
  oncallRotationUpdate: IXGitLabOncallRotationUpdatePayload | null;
  oncallScheduleCreate: IXGitLabOncallScheduleCreatePayload | null;
  oncallScheduleDestroy: IXGitLabOncallScheduleDestroyPayload | null;
  oncallScheduleUpdate: IXGitLabOncallScheduleUpdatePayload | null;
  pipelineCancel: IXGitLabPipelineCancelPayload | null;
  pipelineDestroy: IXGitLabPipelineDestroyPayload | null;
  pipelineRetry: IXGitLabPipelineRetryPayload | null;

  /**
   * Assign (or unset) a compliance framework to a project.
   */
  projectSetComplianceFramework: IXGitLabProjectSetComplianceFrameworkPayload | null;
  projectSetLocked: IXGitLabProjectSetLockedPayload | null;
  prometheusIntegrationCreate: IXGitLabPrometheusIntegrationCreatePayload | null;
  prometheusIntegrationResetToken: IXGitLabPrometheusIntegrationResetTokenPayload | null;
  prometheusIntegrationUpdate: IXGitLabPrometheusIntegrationUpdatePayload | null;
  promoteToEpic: IXGitLabPromoteToEpicPayload | null;
  releaseAssetLinkCreate: IXGitLabReleaseAssetLinkCreatePayload | null;
  releaseAssetLinkDelete: IXGitLabReleaseAssetLinkDeletePayload | null;
  releaseAssetLinkUpdate: IXGitLabReleaseAssetLinkUpdatePayload | null;
  releaseCreate: IXGitLabReleaseCreatePayload | null;
  releaseDelete: IXGitLabReleaseDeletePayload | null;
  releaseUpdate: IXGitLabReleaseUpdatePayload | null;
  removeProjectFromSecurityDashboard: IXGitLabRemoveProjectFromSecurityDashboardPayload | null;

  /**
   * Repositions a DiffNote on an image (a `Note` where the `position.positionType` is `"image"`)
   */
  repositionImageDiffNote: IXGitLabRepositionImageDiffNotePayload | null;
  runnerDelete: IXGitLabRunnerDeletePayload | null;
  runnerUpdate: IXGitLabRunnerUpdatePayload | null;
  runnersRegistrationTokenReset: IXGitLabRunnersRegistrationTokenResetPayload | null;

  /**
   * Commits the `policy_yaml` content to the assigned security policy project for the given project(`project_path`)
   */
  scanExecutionPolicyCommit: IXGitLabScanExecutionPolicyCommitPayload | null;

  /**
   * Assigns the specified project(`security_policy_project_id`) as security policy
   * project for the given project(`project_path`). If the project already has a
   * security policy project, this reassigns the project's security policy project
   * with the given `security_policy_project_id`
   */
  securityPolicyProjectAssign: IXGitLabSecurityPolicyProjectAssignPayload | null;

  /**
   * Creates and assigns a security policy project for the given project(`project_path`)
   */
  securityPolicyProjectCreate: IXGitLabSecurityPolicyProjectCreatePayload | null;

  /**
   * Unassigns the security policy project for the given project(`project_path`).
   */
  securityPolicyProjectUnassign: IXGitLabSecurityPolicyProjectUnassignPayload | null;
  terraformStateDelete: IXGitLabTerraformStateDeletePayload | null;
  terraformStateLock: IXGitLabTerraformStateLockPayload | null;
  terraformStateUnlock: IXGitLabTerraformStateUnlockPayload | null;
  todoCreate: IXGitLabTodoCreatePayload | null;
  todoMarkDone: IXGitLabTodoMarkDonePayload | null;
  todoRestore: IXGitLabTodoRestorePayload | null;
  todoRestoreMany: IXGitLabTodoRestoreManyPayload | null;
  todosMarkAllDone: IXGitLabTodosMarkAllDonePayload | null;
  updateAlertStatus: IXGitLabUpdateAlertStatusPayload | null;
  updateBoard: IXGitLabUpdateBoardPayload | null;
  updateBoardEpicUserPreferences: IXGitLabUpdateBoardEpicUserPreferencesPayload | null;
  updateBoardList: IXGitLabUpdateBoardListPayload | null;
  updateComplianceFramework: IXGitLabUpdateComplianceFrameworkPayload | null;
  updateContainerExpirationPolicy: IXGitLabUpdateContainerExpirationPolicyPayload | null;
  updateDependencyProxyImageTtlGroupPolicy: IXGitLabUpdateDependencyProxyImageTtlGroupPolicyPayload | null;
  updateDependencyProxySettings: IXGitLabUpdateDependencyProxySettingsPayload | null;
  updateEpic: IXGitLabUpdateEpicPayload | null;
  updateEpicBoardList: IXGitLabUpdateEpicBoardListPayload | null;

  /**
   * Updates a DiffNote on an image (a `Note` where the `position.positionType` is `"image"`).
   * If the body of the Note contains only quick actions,
   * the Note will be destroyed during the update, and no Note will be
   * returned.
   */
  updateImageDiffNote: IXGitLabUpdateImageDiffNotePayload | null;
  updateIssue: IXGitLabUpdateIssuePayload | null;
  updateIteration: IXGitLabUpdateIterationPayload | null;
  updateNamespacePackageSettings: IXGitLabUpdateNamespacePackageSettingsPayload | null;

  /**
   * Updates a Note.
   * If the body of the Note contains only quick actions,
   * the Note will be destroyed during the update, and no Note will be
   * returned.
   */
  updateNote: IXGitLabUpdateNotePayload | null;
  updateRequirement: IXGitLabUpdateRequirementPayload | null;
  updateSnippet: IXGitLabUpdateSnippetPayload | null;
  userCalloutCreate: IXGitLabUserCalloutCreatePayload | null;
  vulnerabilityConfirm: IXGitLabVulnerabilityConfirmPayload | null;
  vulnerabilityCreate: IXGitLabVulnerabilityCreatePayload | null;
  vulnerabilityDismiss: IXGitLabVulnerabilityDismissPayload | null;
  vulnerabilityExternalIssueLinkCreate: IXGitLabVulnerabilityExternalIssueLinkCreatePayload | null;
  vulnerabilityExternalIssueLinkDestroy: IXGitLabVulnerabilityExternalIssueLinkDestroyPayload | null;
  vulnerabilityResolve: IXGitLabVulnerabilityResolvePayload | null;
  vulnerabilityRevertToDetected: IXGitLabVulnerabilityRevertToDetectedPayload | null;
}

export interface IAddProjectToSecurityDashboardOnXGitLabMutationArguments {
  /**
   * Parameters for AddProjectToSecurityDashboard
   */
  input: IXGitLabAddProjectToSecurityDashboardInput;
}

export interface IAdminSidekiqQueuesDeleteJobsOnXGitLabMutationArguments {
  /**
   * Parameters for AdminSidekiqQueuesDeleteJobs
   */
  input: IXGitLabAdminSidekiqQueuesDeleteJobsInput;
}

export interface IAlertSetAssigneesOnXGitLabMutationArguments {
  /**
   * Parameters for AlertSetAssignees
   */
  input: IXGitLabAlertSetAssigneesInput;
}

export interface IAlertTodoCreateOnXGitLabMutationArguments {
  /**
   * Parameters for AlertTodoCreate
   */
  input: IXGitLabAlertTodoCreateInput;
}

export interface IApiFuzzingCiConfigurationCreateOnXGitLabMutationArguments {
  /**
   * Parameters for ApiFuzzingCiConfigurationCreate
   */
  input: IXGitLabApiFuzzingCiConfigurationCreateInput;
}

export interface IAwardEmojiAddOnXGitLabMutationArguments {
  /**
   * Parameters for AwardEmojiAdd
   */
  input: IXGitLabAwardEmojiAddInput;
}

export interface IAwardEmojiRemoveOnXGitLabMutationArguments {
  /**
   * Parameters for AwardEmojiRemove
   */
  input: IXGitLabAwardEmojiRemoveInput;
}

export interface IAwardEmojiToggleOnXGitLabMutationArguments {
  /**
   * Parameters for AwardEmojiToggle
   */
  input: IXGitLabAwardEmojiToggleInput;
}

export interface IBoardEpicCreateOnXGitLabMutationArguments {
  /**
   * Parameters for BoardEpicCreate
   */
  input: IXGitLabBoardEpicCreateInput;
}

export interface IBoardListCreateOnXGitLabMutationArguments {
  /**
   * Parameters for BoardListCreate
   */
  input: IXGitLabBoardListCreateInput;
}

export interface IBoardListUpdateLimitMetricsOnXGitLabMutationArguments {
  /**
   * Parameters for BoardListUpdateLimitMetrics
   */
  input: IXGitLabBoardListUpdateLimitMetricsInput;
}

export interface IBulkEnableDevopsAdoptionNamespacesOnXGitLabMutationArguments {
  /**
   * Parameters for BulkEnableDevopsAdoptionNamespaces
   */
  input: IXGitLabBulkEnableDevopsAdoptionNamespacesInput;
}

export interface ICiCdSettingsUpdateOnXGitLabMutationArguments {
  /**
   * Parameters for CiCdSettingsUpdate
   */
  input: IXGitLabCiCdSettingsUpdateInput;
}

export interface ICiJobTokenScopeAddProjectOnXGitLabMutationArguments {
  /**
   * Parameters for CiJobTokenScopeAddProject
   */
  input: IXGitLabCiJobTokenScopeAddProjectInput;
}

export interface ICiJobTokenScopeRemoveProjectOnXGitLabMutationArguments {
  /**
   * Parameters for CiJobTokenScopeRemoveProject
   */
  input: IXGitLabCiJobTokenScopeRemoveProjectInput;
}

export interface IClusterAgentDeleteOnXGitLabMutationArguments {
  /**
   * Parameters for ClusterAgentDelete
   */
  input: IXGitLabClusterAgentDeleteInput;
}

export interface IClusterAgentTokenCreateOnXGitLabMutationArguments {
  /**
   * Parameters for ClusterAgentTokenCreate
   */
  input: IXGitLabClusterAgentTokenCreateInput;
}

export interface IClusterAgentTokenDeleteOnXGitLabMutationArguments {
  /**
   * Parameters for ClusterAgentTokenDelete
   */
  input: IXGitLabClusterAgentTokenDeleteInput;
}

export interface ICommitCreateOnXGitLabMutationArguments {
  /**
   * Parameters for CommitCreate
   */
  input: IXGitLabCommitCreateInput;
}

export interface IConfigureDependencyScanningOnXGitLabMutationArguments {
  /**
   * Parameters for ConfigureDependencyScanning
   */
  input: IXGitLabConfigureDependencyScanningInput;
}

export interface IConfigureSastOnXGitLabMutationArguments {
  /**
   * Parameters for ConfigureSast
   */
  input: IXGitLabConfigureSastInput;
}

export interface IConfigureSecretDetectionOnXGitLabMutationArguments {
  /**
   * Parameters for ConfigureSecretDetection
   */
  input: IXGitLabConfigureSecretDetectionInput;
}

export interface ICreateAlertIssueOnXGitLabMutationArguments {
  /**
   * Parameters for CreateAlertIssue
   */
  input: IXGitLabCreateAlertIssueInput;
}

export interface ICreateAnnotationOnXGitLabMutationArguments {
  /**
   * Parameters for CreateAnnotation
   */
  input: IXGitLabCreateAnnotationInput;
}

export interface ICreateBoardOnXGitLabMutationArguments {
  /**
   * Parameters for CreateBoard
   */
  input: IXGitLabCreateBoardInput;
}

export interface ICreateBranchOnXGitLabMutationArguments {
  /**
   * Parameters for CreateBranch
   */
  input: IXGitLabCreateBranchInput;
}

export interface ICreateClusterAgentOnXGitLabMutationArguments {
  /**
   * Parameters for CreateClusterAgent
   */
  input: IXGitLabCreateClusterAgentInput;
}

export interface ICreateComplianceFrameworkOnXGitLabMutationArguments {
  /**
   * Parameters for CreateComplianceFramework
   */
  input: IXGitLabCreateComplianceFrameworkInput;
}

export interface ICreateCustomEmojiOnXGitLabMutationArguments {
  /**
   * Parameters for CreateCustomEmoji
   */
  input: IXGitLabCreateCustomEmojiInput;
}

export interface ICreateDiffNoteOnXGitLabMutationArguments {
  /**
   * Parameters for CreateDiffNote
   */
  input: IXGitLabCreateDiffNoteInput;
}

export interface ICreateEpicOnXGitLabMutationArguments {
  /**
   * Parameters for CreateEpic
   */
  input: IXGitLabCreateEpicInput;
}

export interface ICreateImageDiffNoteOnXGitLabMutationArguments {
  /**
   * Parameters for CreateImageDiffNote
   */
  input: IXGitLabCreateImageDiffNoteInput;
}

export interface ICreateIssueOnXGitLabMutationArguments {
  /**
   * Parameters for CreateIssue
   */
  input: IXGitLabCreateIssueInput;
}

export interface ICreateIterationOnXGitLabMutationArguments {
  /**
   * Parameters for CreateIteration
   */
  input: IXGitLabCreateIterationInput;
}

export interface ICreateNoteOnXGitLabMutationArguments {
  /**
   * Parameters for CreateNote
   */
  input: IXGitLabCreateNoteInput;
}

export interface ICreateRequirementOnXGitLabMutationArguments {
  /**
   * Parameters for CreateRequirement
   */
  input: IXGitLabCreateRequirementInput;
}

export interface ICreateSnippetOnXGitLabMutationArguments {
  /**
   * Parameters for CreateSnippet
   */
  input: IXGitLabCreateSnippetInput;
}

export interface ICreateTestCaseOnXGitLabMutationArguments {
  /**
   * Parameters for CreateTestCase
   */
  input: IXGitLabCreateTestCaseInput;
}

export interface ICustomerRelationsContactCreateOnXGitLabMutationArguments {
  /**
   * Parameters for CustomerRelationsContactCreate
   */
  input: IXGitLabCustomerRelationsContactCreateInput;
}

export interface ICustomerRelationsContactUpdateOnXGitLabMutationArguments {
  /**
   * Parameters for CustomerRelationsContactUpdate
   */
  input: IXGitLabCustomerRelationsContactUpdateInput;
}

export interface ICustomerRelationsOrganizationCreateOnXGitLabMutationArguments {
  /**
   * Parameters for CustomerRelationsOrganizationCreate
   */
  input: IXGitLabCustomerRelationsOrganizationCreateInput;
}

export interface ICustomerRelationsOrganizationUpdateOnXGitLabMutationArguments {
  /**
   * Parameters for CustomerRelationsOrganizationUpdate
   */
  input: IXGitLabCustomerRelationsOrganizationUpdateInput;
}

export interface IDastOnDemandScanCreateOnXGitLabMutationArguments {
  /**
   * Parameters for DastOnDemandScanCreate
   */
  input: IXGitLabDastOnDemandScanCreateInput;
}

export interface IDastProfileCreateOnXGitLabMutationArguments {
  /**
   * Parameters for DastProfileCreate
   */
  input: IXGitLabDastProfileCreateInput;
}

export interface IDastProfileDeleteOnXGitLabMutationArguments {
  /**
   * Parameters for DastProfileDelete
   */
  input: IXGitLabDastProfileDeleteInput;
}

export interface IDastProfileRunOnXGitLabMutationArguments {
  /**
   * Parameters for DastProfileRun
   */
  input: IXGitLabDastProfileRunInput;
}

export interface IDastProfileUpdateOnXGitLabMutationArguments {
  /**
   * Parameters for DastProfileUpdate
   */
  input: IXGitLabDastProfileUpdateInput;
}

export interface IDastScannerProfileCreateOnXGitLabMutationArguments {
  /**
   * Parameters for DastScannerProfileCreate
   */
  input: IXGitLabDastScannerProfileCreateInput;
}

export interface IDastScannerProfileDeleteOnXGitLabMutationArguments {
  /**
   * Parameters for DastScannerProfileDelete
   */
  input: IXGitLabDastScannerProfileDeleteInput;
}

export interface IDastScannerProfileUpdateOnXGitLabMutationArguments {
  /**
   * Parameters for DastScannerProfileUpdate
   */
  input: IXGitLabDastScannerProfileUpdateInput;
}

export interface IDastSiteProfileCreateOnXGitLabMutationArguments {
  /**
   * Parameters for DastSiteProfileCreate
   */
  input: IXGitLabDastSiteProfileCreateInput;
}

export interface IDastSiteProfileDeleteOnXGitLabMutationArguments {
  /**
   * Parameters for DastSiteProfileDelete
   */
  input: IXGitLabDastSiteProfileDeleteInput;
}

export interface IDastSiteProfileUpdateOnXGitLabMutationArguments {
  /**
   * Parameters for DastSiteProfileUpdate
   */
  input: IXGitLabDastSiteProfileUpdateInput;
}

export interface IDastSiteTokenCreateOnXGitLabMutationArguments {
  /**
   * Parameters for DastSiteTokenCreate
   */
  input: IXGitLabDastSiteTokenCreateInput;
}

export interface IDastSiteValidationCreateOnXGitLabMutationArguments {
  /**
   * Parameters for DastSiteValidationCreate
   */
  input: IXGitLabDastSiteValidationCreateInput;
}

export interface IDastSiteValidationRevokeOnXGitLabMutationArguments {
  /**
   * Parameters for DastSiteValidationRevoke
   */
  input: IXGitLabDastSiteValidationRevokeInput;
}

export interface IDeleteAnnotationOnXGitLabMutationArguments {
  /**
   * Parameters for DeleteAnnotation
   */
  input: IXGitLabDeleteAnnotationInput;
}

export interface IDesignManagementDeleteOnXGitLabMutationArguments {
  /**
   * Parameters for DesignManagementDelete
   */
  input: IXGitLabDesignManagementDeleteInput;
}

export interface IDesignManagementMoveOnXGitLabMutationArguments {
  /**
   * Parameters for DesignManagementMove
   */
  input: IXGitLabDesignManagementMoveInput;
}

export interface IDesignManagementUploadOnXGitLabMutationArguments {
  /**
   * Parameters for DesignManagementUpload
   */
  input: IXGitLabDesignManagementUploadInput;
}

export interface IDestroyBoardOnXGitLabMutationArguments {
  /**
   * Parameters for DestroyBoard
   */
  input: IXGitLabDestroyBoardInput;
}

export interface IDestroyBoardListOnXGitLabMutationArguments {
  /**
   * Parameters for DestroyBoardList
   */
  input: IXGitLabDestroyBoardListInput;
}

export interface IDestroyComplianceFrameworkOnXGitLabMutationArguments {
  /**
   * Parameters for DestroyComplianceFramework
   */
  input: IXGitLabDestroyComplianceFrameworkInput;
}

export interface IDestroyContainerRepositoryOnXGitLabMutationArguments {
  /**
   * Parameters for DestroyContainerRepository
   */
  input: IXGitLabDestroyContainerRepositoryInput;
}

export interface IDestroyContainerRepositoryTagsOnXGitLabMutationArguments {
  /**
   * Parameters for DestroyContainerRepositoryTags
   */
  input: IXGitLabDestroyContainerRepositoryTagsInput;
}

export interface IDestroyCustomEmojiOnXGitLabMutationArguments {
  /**
   * Parameters for DestroyCustomEmoji
   */
  input: IXGitLabDestroyCustomEmojiInput;
}

export interface IDestroyEpicBoardOnXGitLabMutationArguments {
  /**
   * Parameters for DestroyEpicBoard
   */
  input: IXGitLabDestroyEpicBoardInput;
}

export interface IDestroyNoteOnXGitLabMutationArguments {
  /**
   * Parameters for DestroyNote
   */
  input: IXGitLabDestroyNoteInput;
}

export interface IDestroyPackageOnXGitLabMutationArguments {
  /**
   * Parameters for DestroyPackage
   */
  input: IXGitLabDestroyPackageInput;
}

export interface IDestroyPackageFileOnXGitLabMutationArguments {
  /**
   * Parameters for DestroyPackageFile
   */
  input: IXGitLabDestroyPackageFileInput;
}

export interface IDestroySnippetOnXGitLabMutationArguments {
  /**
   * Parameters for DestroySnippet
   */
  input: IXGitLabDestroySnippetInput;
}

export interface IDisableDevopsAdoptionNamespaceOnXGitLabMutationArguments {
  /**
   * Parameters for DisableDevopsAdoptionNamespace
   */
  input: IXGitLabDisableDevopsAdoptionNamespaceInput;
}

export interface IDiscussionToggleResolveOnXGitLabMutationArguments {
  /**
   * Parameters for DiscussionToggleResolve
   */
  input: IXGitLabDiscussionToggleResolveInput;
}

export interface IEchoCreateOnXGitLabMutationArguments {
  /**
   * Parameters for EchoCreate
   */
  input: IXGitLabEchoCreateInput;
}

export interface IEnableDevopsAdoptionNamespaceOnXGitLabMutationArguments {
  /**
   * Parameters for EnableDevopsAdoptionNamespace
   */
  input: IXGitLabEnableDevopsAdoptionNamespaceInput;
}

export interface IEnvironmentsCanaryIngressUpdateOnXGitLabMutationArguments {
  /**
   * Parameters for EnvironmentsCanaryIngressUpdate
   */
  input: IXGitLabEnvironmentsCanaryIngressUpdateInput;
}

export interface IEpicAddIssueOnXGitLabMutationArguments {
  /**
   * Parameters for EpicAddIssue
   */
  input: IXGitLabEpicAddIssueInput;
}

export interface IEpicBoardCreateOnXGitLabMutationArguments {
  /**
   * Parameters for EpicBoardCreate
   */
  input: IXGitLabEpicBoardCreateInput;
}

export interface IEpicBoardListCreateOnXGitLabMutationArguments {
  /**
   * Parameters for EpicBoardListCreate
   */
  input: IXGitLabEpicBoardListCreateInput;
}

export interface IEpicBoardListDestroyOnXGitLabMutationArguments {
  /**
   * Parameters for EpicBoardListDestroy
   */
  input: IXGitLabEpicBoardListDestroyInput;
}

export interface IEpicBoardUpdateOnXGitLabMutationArguments {
  /**
   * Parameters for EpicBoardUpdate
   */
  input: IXGitLabEpicBoardUpdateInput;
}

export interface IEpicMoveListOnXGitLabMutationArguments {
  /**
   * Parameters for EpicMoveList
   */
  input: IXGitLabEpicMoveListInput;
}

export interface IEpicSetSubscriptionOnXGitLabMutationArguments {
  /**
   * Parameters for EpicSetSubscription
   */
  input: IXGitLabEpicSetSubscriptionInput;
}

export interface IEpicTreeReorderOnXGitLabMutationArguments {
  /**
   * Parameters for EpicTreeReorder
   */
  input: IXGitLabEpicTreeReorderInput;
}

export interface IEscalationPolicyCreateOnXGitLabMutationArguments {
  /**
   * Parameters for EscalationPolicyCreate
   */
  input: IXGitLabEscalationPolicyCreateInput;
}

export interface IEscalationPolicyDestroyOnXGitLabMutationArguments {
  /**
   * Parameters for EscalationPolicyDestroy
   */
  input: IXGitLabEscalationPolicyDestroyInput;
}

export interface IEscalationPolicyUpdateOnXGitLabMutationArguments {
  /**
   * Parameters for EscalationPolicyUpdate
   */
  input: IXGitLabEscalationPolicyUpdateInput;
}

export interface IExportRequirementsOnXGitLabMutationArguments {
  /**
   * Parameters for ExportRequirements
   */
  input: IXGitLabExportRequirementsInput;
}

export interface IExternalAuditEventDestinationCreateOnXGitLabMutationArguments {
  /**
   * Parameters for ExternalAuditEventDestinationCreate
   */
  input: IXGitLabExternalAuditEventDestinationCreateInput;
}

export interface IExternalAuditEventDestinationDestroyOnXGitLabMutationArguments {
  /**
   * Parameters for ExternalAuditEventDestinationDestroy
   */
  input: IXGitLabExternalAuditEventDestinationDestroyInput;
}

export interface IExternalAuditEventDestinationUpdateOnXGitLabMutationArguments {
  /**
   * Parameters for ExternalAuditEventDestinationUpdate
   */
  input: IXGitLabExternalAuditEventDestinationUpdateInput;
}

export interface IGitlabSubscriptionActivateOnXGitLabMutationArguments {
  /**
   * Parameters for GitlabSubscriptionActivate
   */
  input: IXGitLabGitlabSubscriptionActivateInput;
}

export interface IGroupUpdateOnXGitLabMutationArguments {
  /**
   * Parameters for GroupUpdate
   */
  input: IXGitLabGroupUpdateInput;
}

export interface IHttpIntegrationCreateOnXGitLabMutationArguments {
  /**
   * Parameters for HttpIntegrationCreate
   */
  input: IXGitLabHttpIntegrationCreateInput;
}

export interface IHttpIntegrationDestroyOnXGitLabMutationArguments {
  /**
   * Parameters for HttpIntegrationDestroy
   */
  input: IXGitLabHttpIntegrationDestroyInput;
}

export interface IHttpIntegrationResetTokenOnXGitLabMutationArguments {
  /**
   * Parameters for HttpIntegrationResetToken
   */
  input: IXGitLabHttpIntegrationResetTokenInput;
}

export interface IHttpIntegrationUpdateOnXGitLabMutationArguments {
  /**
   * Parameters for HttpIntegrationUpdate
   */
  input: IXGitLabHttpIntegrationUpdateInput;
}

export interface IIssueMoveOnXGitLabMutationArguments {
  /**
   * Parameters for IssueMove
   */
  input: IXGitLabIssueMoveInput;
}

export interface IIssueMoveListOnXGitLabMutationArguments {
  /**
   * Parameters for IssueMoveList
   */
  input: IXGitLabIssueMoveListInput;
}

export interface IIssueSetAssigneesOnXGitLabMutationArguments {
  /**
   * Parameters for IssueSetAssignees
   */
  input: IXGitLabIssueSetAssigneesInput;
}

export interface IIssueSetConfidentialOnXGitLabMutationArguments {
  /**
   * Parameters for IssueSetConfidential
   */
  input: IXGitLabIssueSetConfidentialInput;
}

export interface IIssueSetDueDateOnXGitLabMutationArguments {
  /**
   * Parameters for IssueSetDueDate
   */
  input: IXGitLabIssueSetDueDateInput;
}

export interface IIssueSetEpicOnXGitLabMutationArguments {
  /**
   * Parameters for IssueSetEpic
   */
  input: IXGitLabIssueSetEpicInput;
}

export interface IIssueSetIterationOnXGitLabMutationArguments {
  /**
   * Parameters for IssueSetIteration
   */
  input: IXGitLabIssueSetIterationInput;
}

export interface IIssueSetLockedOnXGitLabMutationArguments {
  /**
   * Parameters for IssueSetLocked
   */
  input: IXGitLabIssueSetLockedInput;
}

export interface IIssueSetSeverityOnXGitLabMutationArguments {
  /**
   * Parameters for IssueSetSeverity
   */
  input: IXGitLabIssueSetSeverityInput;
}

export interface IIssueSetSubscriptionOnXGitLabMutationArguments {
  /**
   * Parameters for IssueSetSubscription
   */
  input: IXGitLabIssueSetSubscriptionInput;
}

export interface IIssueSetWeightOnXGitLabMutationArguments {
  /**
   * Parameters for IssueSetWeight
   */
  input: IXGitLabIssueSetWeightInput;
}

export interface IIterationCadenceCreateOnXGitLabMutationArguments {
  /**
   * Parameters for IterationCadenceCreate
   */
  input: IXGitLabIterationCadenceCreateInput;
}

export interface IIterationCadenceDestroyOnXGitLabMutationArguments {
  /**
   * Parameters for IterationCadenceDestroy
   */
  input: IXGitLabIterationCadenceDestroyInput;
}

export interface IIterationCadenceUpdateOnXGitLabMutationArguments {
  /**
   * Parameters for IterationCadenceUpdate
   */
  input: IXGitLabIterationCadenceUpdateInput;
}

export interface IIterationCreateOnXGitLabMutationArguments {
  /**
   * Parameters for iterationCreate
   */
  input: IXGitLabiterationCreateInput;
}

export interface IIterationDeleteOnXGitLabMutationArguments {
  /**
   * Parameters for IterationDelete
   */
  input: IXGitLabIterationDeleteInput;
}

export interface IJiraImportStartOnXGitLabMutationArguments {
  /**
   * Parameters for JiraImportStart
   */
  input: IXGitLabJiraImportStartInput;
}

export interface IJiraImportUsersOnXGitLabMutationArguments {
  /**
   * Parameters for JiraImportUsers
   */
  input: IXGitLabJiraImportUsersInput;
}

export interface IJobCancelOnXGitLabMutationArguments {
  /**
   * Parameters for JobCancel
   */
  input: IXGitLabJobCancelInput;
}

export interface IJobPlayOnXGitLabMutationArguments {
  /**
   * Parameters for JobPlay
   */
  input: IXGitLabJobPlayInput;
}

export interface IJobRetryOnXGitLabMutationArguments {
  /**
   * Parameters for JobRetry
   */
  input: IXGitLabJobRetryInput;
}

export interface IJobUnscheduleOnXGitLabMutationArguments {
  /**
   * Parameters for JobUnschedule
   */
  input: IXGitLabJobUnscheduleInput;
}

export interface ILabelCreateOnXGitLabMutationArguments {
  /**
   * Parameters for LabelCreate
   */
  input: IXGitLabLabelCreateInput;
}

export interface IMarkAsSpamSnippetOnXGitLabMutationArguments {
  /**
   * Parameters for MarkAsSpamSnippet
   */
  input: IXGitLabMarkAsSpamSnippetInput;
}

export interface IMergeRequestAcceptOnXGitLabMutationArguments {
  /**
   * Parameters for MergeRequestAccept
   */
  input: IXGitLabMergeRequestAcceptInput;
}

export interface IMergeRequestCreateOnXGitLabMutationArguments {
  /**
   * Parameters for MergeRequestCreate
   */
  input: IXGitLabMergeRequestCreateInput;
}

export interface IMergeRequestReviewerRereviewOnXGitLabMutationArguments {
  /**
   * Parameters for MergeRequestReviewerRereview
   */
  input: IXGitLabMergeRequestReviewerRereviewInput;
}

export interface IMergeRequestSetAssigneesOnXGitLabMutationArguments {
  /**
   * Parameters for MergeRequestSetAssignees
   */
  input: IXGitLabMergeRequestSetAssigneesInput;
}

export interface IMergeRequestSetDraftOnXGitLabMutationArguments {
  /**
   * Parameters for MergeRequestSetDraft
   */
  input: IXGitLabMergeRequestSetDraftInput;
}

export interface IMergeRequestSetLabelsOnXGitLabMutationArguments {
  /**
   * Parameters for MergeRequestSetLabels
   */
  input: IXGitLabMergeRequestSetLabelsInput;
}

export interface IMergeRequestSetLockedOnXGitLabMutationArguments {
  /**
   * Parameters for MergeRequestSetLocked
   */
  input: IXGitLabMergeRequestSetLockedInput;
}

export interface IMergeRequestSetMilestoneOnXGitLabMutationArguments {
  /**
   * Parameters for MergeRequestSetMilestone
   */
  input: IXGitLabMergeRequestSetMilestoneInput;
}

export interface IMergeRequestSetSubscriptionOnXGitLabMutationArguments {
  /**
   * Parameters for MergeRequestSetSubscription
   */
  input: IXGitLabMergeRequestSetSubscriptionInput;
}

export interface IMergeRequestSetWipOnXGitLabMutationArguments {
  /**
   * Parameters for MergeRequestSetWip
   */
  input: IXGitLabMergeRequestSetWipInput;
}

export interface IMergeRequestUpdateOnXGitLabMutationArguments {
  /**
   * Parameters for MergeRequestUpdate
   */
  input: IXGitLabMergeRequestUpdateInput;
}

export interface INamespaceIncreaseStorageTemporarilyOnXGitLabMutationArguments {
  /**
   * Parameters for NamespaceIncreaseStorageTemporarily
   */
  input: IXGitLabNamespaceIncreaseStorageTemporarilyInput;
}

export interface IOncallRotationCreateOnXGitLabMutationArguments {
  /**
   * Parameters for OncallRotationCreate
   */
  input: IXGitLabOncallRotationCreateInput;
}

export interface IOncallRotationDestroyOnXGitLabMutationArguments {
  /**
   * Parameters for OncallRotationDestroy
   */
  input: IXGitLabOncallRotationDestroyInput;
}

export interface IOncallRotationUpdateOnXGitLabMutationArguments {
  /**
   * Parameters for OncallRotationUpdate
   */
  input: IXGitLabOncallRotationUpdateInput;
}

export interface IOncallScheduleCreateOnXGitLabMutationArguments {
  /**
   * Parameters for OncallScheduleCreate
   */
  input: IXGitLabOncallScheduleCreateInput;
}

export interface IOncallScheduleDestroyOnXGitLabMutationArguments {
  /**
   * Parameters for OncallScheduleDestroy
   */
  input: IXGitLabOncallScheduleDestroyInput;
}

export interface IOncallScheduleUpdateOnXGitLabMutationArguments {
  /**
   * Parameters for OncallScheduleUpdate
   */
  input: IXGitLabOncallScheduleUpdateInput;
}

export interface IPipelineCancelOnXGitLabMutationArguments {
  /**
   * Parameters for PipelineCancel
   */
  input: IXGitLabPipelineCancelInput;
}

export interface IPipelineDestroyOnXGitLabMutationArguments {
  /**
   * Parameters for PipelineDestroy
   */
  input: IXGitLabPipelineDestroyInput;
}

export interface IPipelineRetryOnXGitLabMutationArguments {
  /**
   * Parameters for PipelineRetry
   */
  input: IXGitLabPipelineRetryInput;
}

export interface IProjectSetComplianceFrameworkOnXGitLabMutationArguments {
  /**
   * Parameters for ProjectSetComplianceFramework
   */
  input: IXGitLabProjectSetComplianceFrameworkInput;
}

export interface IProjectSetLockedOnXGitLabMutationArguments {
  /**
   * Parameters for ProjectSetLocked
   */
  input: IXGitLabProjectSetLockedInput;
}

export interface IPrometheusIntegrationCreateOnXGitLabMutationArguments {
  /**
   * Parameters for PrometheusIntegrationCreate
   */
  input: IXGitLabPrometheusIntegrationCreateInput;
}

export interface IPrometheusIntegrationResetTokenOnXGitLabMutationArguments {
  /**
   * Parameters for PrometheusIntegrationResetToken
   */
  input: IXGitLabPrometheusIntegrationResetTokenInput;
}

export interface IPrometheusIntegrationUpdateOnXGitLabMutationArguments {
  /**
   * Parameters for PrometheusIntegrationUpdate
   */
  input: IXGitLabPrometheusIntegrationUpdateInput;
}

export interface IPromoteToEpicOnXGitLabMutationArguments {
  /**
   * Parameters for PromoteToEpic
   */
  input: IXGitLabPromoteToEpicInput;
}

export interface IReleaseAssetLinkCreateOnXGitLabMutationArguments {
  /**
   * Parameters for ReleaseAssetLinkCreate
   */
  input: IXGitLabReleaseAssetLinkCreateInput;
}

export interface IReleaseAssetLinkDeleteOnXGitLabMutationArguments {
  /**
   * Parameters for ReleaseAssetLinkDelete
   */
  input: IXGitLabReleaseAssetLinkDeleteInput;
}

export interface IReleaseAssetLinkUpdateOnXGitLabMutationArguments {
  /**
   * Parameters for ReleaseAssetLinkUpdate
   */
  input: IXGitLabReleaseAssetLinkUpdateInput;
}

export interface IReleaseCreateOnXGitLabMutationArguments {
  /**
   * Parameters for ReleaseCreate
   */
  input: IXGitLabReleaseCreateInput;
}

export interface IReleaseDeleteOnXGitLabMutationArguments {
  /**
   * Parameters for ReleaseDelete
   */
  input: IXGitLabReleaseDeleteInput;
}

export interface IReleaseUpdateOnXGitLabMutationArguments {
  /**
   * Parameters for ReleaseUpdate
   */
  input: IXGitLabReleaseUpdateInput;
}

export interface IRemoveProjectFromSecurityDashboardOnXGitLabMutationArguments {
  /**
   * Parameters for RemoveProjectFromSecurityDashboard
   */
  input: IXGitLabRemoveProjectFromSecurityDashboardInput;
}

export interface IRepositionImageDiffNoteOnXGitLabMutationArguments {
  /**
   * Parameters for RepositionImageDiffNote
   */
  input: IXGitLabRepositionImageDiffNoteInput;
}

export interface IRunnerDeleteOnXGitLabMutationArguments {
  /**
   * Parameters for RunnerDelete
   */
  input: IXGitLabRunnerDeleteInput;
}

export interface IRunnerUpdateOnXGitLabMutationArguments {
  /**
   * Parameters for RunnerUpdate
   */
  input: IXGitLabRunnerUpdateInput;
}

export interface IRunnersRegistrationTokenResetOnXGitLabMutationArguments {
  /**
   * Parameters for RunnersRegistrationTokenReset
   */
  input: IXGitLabRunnersRegistrationTokenResetInput;
}

export interface IScanExecutionPolicyCommitOnXGitLabMutationArguments {
  /**
   * Parameters for ScanExecutionPolicyCommit
   */
  input: IXGitLabScanExecutionPolicyCommitInput;
}

export interface ISecurityPolicyProjectAssignOnXGitLabMutationArguments {
  /**
   * Parameters for SecurityPolicyProjectAssign
   */
  input: IXGitLabSecurityPolicyProjectAssignInput;
}

export interface ISecurityPolicyProjectCreateOnXGitLabMutationArguments {
  /**
   * Parameters for SecurityPolicyProjectCreate
   */
  input: IXGitLabSecurityPolicyProjectCreateInput;
}

export interface ISecurityPolicyProjectUnassignOnXGitLabMutationArguments {
  /**
   * Parameters for SecurityPolicyProjectUnassign
   */
  input: IXGitLabSecurityPolicyProjectUnassignInput;
}

export interface ITerraformStateDeleteOnXGitLabMutationArguments {
  /**
   * Parameters for TerraformStateDelete
   */
  input: IXGitLabTerraformStateDeleteInput;
}

export interface ITerraformStateLockOnXGitLabMutationArguments {
  /**
   * Parameters for TerraformStateLock
   */
  input: IXGitLabTerraformStateLockInput;
}

export interface ITerraformStateUnlockOnXGitLabMutationArguments {
  /**
   * Parameters for TerraformStateUnlock
   */
  input: IXGitLabTerraformStateUnlockInput;
}

export interface ITodoCreateOnXGitLabMutationArguments {
  /**
   * Parameters for TodoCreate
   */
  input: IXGitLabTodoCreateInput;
}

export interface ITodoMarkDoneOnXGitLabMutationArguments {
  /**
   * Parameters for TodoMarkDone
   */
  input: IXGitLabTodoMarkDoneInput;
}

export interface ITodoRestoreOnXGitLabMutationArguments {
  /**
   * Parameters for TodoRestore
   */
  input: IXGitLabTodoRestoreInput;
}

export interface ITodoRestoreManyOnXGitLabMutationArguments {
  /**
   * Parameters for TodoRestoreMany
   */
  input: IXGitLabTodoRestoreManyInput;
}

export interface ITodosMarkAllDoneOnXGitLabMutationArguments {
  /**
   * Parameters for TodosMarkAllDone
   */
  input: IXGitLabTodosMarkAllDoneInput;
}

export interface IUpdateAlertStatusOnXGitLabMutationArguments {
  /**
   * Parameters for UpdateAlertStatus
   */
  input: IXGitLabUpdateAlertStatusInput;
}

export interface IUpdateBoardOnXGitLabMutationArguments {
  /**
   * Parameters for UpdateBoard
   */
  input: IXGitLabUpdateBoardInput;
}

export interface IUpdateBoardEpicUserPreferencesOnXGitLabMutationArguments {
  /**
   * Parameters for UpdateBoardEpicUserPreferences
   */
  input: IXGitLabUpdateBoardEpicUserPreferencesInput;
}

export interface IUpdateBoardListOnXGitLabMutationArguments {
  /**
   * Parameters for UpdateBoardList
   */
  input: IXGitLabUpdateBoardListInput;
}

export interface IUpdateComplianceFrameworkOnXGitLabMutationArguments {
  /**
   * Parameters for UpdateComplianceFramework
   */
  input: IXGitLabUpdateComplianceFrameworkInput;
}

export interface IUpdateContainerExpirationPolicyOnXGitLabMutationArguments {
  /**
   * Parameters for UpdateContainerExpirationPolicy
   */
  input: IXGitLabUpdateContainerExpirationPolicyInput;
}

export interface IUpdateDependencyProxyImageTtlGroupPolicyOnXGitLabMutationArguments {
  /**
   * Parameters for UpdateDependencyProxyImageTtlGroupPolicy
   */
  input: IXGitLabUpdateDependencyProxyImageTtlGroupPolicyInput;
}

export interface IUpdateDependencyProxySettingsOnXGitLabMutationArguments {
  /**
   * Parameters for UpdateDependencyProxySettings
   */
  input: IXGitLabUpdateDependencyProxySettingsInput;
}

export interface IUpdateEpicOnXGitLabMutationArguments {
  /**
   * Parameters for UpdateEpic
   */
  input: IXGitLabUpdateEpicInput;
}

export interface IUpdateEpicBoardListOnXGitLabMutationArguments {
  /**
   * Parameters for UpdateEpicBoardList
   */
  input: IXGitLabUpdateEpicBoardListInput;
}

export interface IUpdateImageDiffNoteOnXGitLabMutationArguments {
  /**
   * Parameters for UpdateImageDiffNote
   */
  input: IXGitLabUpdateImageDiffNoteInput;
}

export interface IUpdateIssueOnXGitLabMutationArguments {
  /**
   * Parameters for UpdateIssue
   */
  input: IXGitLabUpdateIssueInput;
}

export interface IUpdateIterationOnXGitLabMutationArguments {
  /**
   * Parameters for UpdateIteration
   */
  input: IXGitLabUpdateIterationInput;
}

export interface IUpdateNamespacePackageSettingsOnXGitLabMutationArguments {
  /**
   * Parameters for UpdateNamespacePackageSettings
   */
  input: IXGitLabUpdateNamespacePackageSettingsInput;
}

export interface IUpdateNoteOnXGitLabMutationArguments {
  /**
   * Parameters for UpdateNote
   */
  input: IXGitLabUpdateNoteInput;
}

export interface IUpdateRequirementOnXGitLabMutationArguments {
  /**
   * Parameters for UpdateRequirement
   */
  input: IXGitLabUpdateRequirementInput;
}

export interface IUpdateSnippetOnXGitLabMutationArguments {
  /**
   * Parameters for UpdateSnippet
   */
  input: IXGitLabUpdateSnippetInput;
}

export interface IUserCalloutCreateOnXGitLabMutationArguments {
  /**
   * Parameters for UserCalloutCreate
   */
  input: IXGitLabUserCalloutCreateInput;
}

export interface IVulnerabilityConfirmOnXGitLabMutationArguments {
  /**
   * Parameters for VulnerabilityConfirm
   */
  input: IXGitLabVulnerabilityConfirmInput;
}

export interface IVulnerabilityCreateOnXGitLabMutationArguments {
  /**
   * Parameters for VulnerabilityCreate
   */
  input: IXGitLabVulnerabilityCreateInput;
}

export interface IVulnerabilityDismissOnXGitLabMutationArguments {
  /**
   * Parameters for VulnerabilityDismiss
   */
  input: IXGitLabVulnerabilityDismissInput;
}

export interface IVulnerabilityExternalIssueLinkCreateOnXGitLabMutationArguments {
  /**
   * Parameters for VulnerabilityExternalIssueLinkCreate
   */
  input: IXGitLabVulnerabilityExternalIssueLinkCreateInput;
}

export interface IVulnerabilityExternalIssueLinkDestroyOnXGitLabMutationArguments {
  /**
   * Parameters for VulnerabilityExternalIssueLinkDestroy
   */
  input: IXGitLabVulnerabilityExternalIssueLinkDestroyInput;
}

export interface IVulnerabilityResolveOnXGitLabMutationArguments {
  /**
   * Parameters for VulnerabilityResolve
   */
  input: IXGitLabVulnerabilityResolveInput;
}

export interface IVulnerabilityRevertToDetectedOnXGitLabMutationArguments {
  /**
   * Parameters for VulnerabilityRevertToDetected
   */
  input: IXGitLabVulnerabilityRevertToDetectedInput;
}

/**
 * Different toggles for changing mutator behavior
 */
export const enum XGitLabMutationOperationMode {
  /**
   * Performs a replace operation.
   */
  REPLACE = 'REPLACE',

  /**
   * Performs an append operation.
   */
  APPEND = 'APPEND',

  /**
   * Performs a removal operation.
   */
  REMOVE = 'REMOVE',
}

export interface IXGitLabNamespace {
  __typename: '_xGitLabNamespace';

  /**
   * Size limit for repositories in the namespace in bytes.
   */
  actualRepositorySizeLimit: number | null;

  /**
   * Additional storage purchased for the root namespace in bytes.
   */
  additionalPurchasedStorageSize: number | null;

  /**
   * Compliance frameworks available to projects in this namespace.
   */
  complianceFrameworks: IXGitLabComplianceFrameworkConnection | null;

  /**
   * Includes at least one project where the repository size exceeds the limit.
   */
  containsLockedProjects: boolean;

  /**
   * Description of the namespace.
   */
  description: string | null;

  /**
   * The GitLab Flavored Markdown rendering of `description`
   */
  descriptionHtml: string | null;

  /**
   * Full name of the namespace.
   */
  fullName: string;

  /**
   * Full path of the namespace.
   */
  fullPath: string;

  /**
   * ID of the namespace.
   */
  id: string;

  /**
   * Status of the temporary storage increase.
   */
  isTemporaryStorageIncreaseEnabled: boolean;

  /**
   * Indicates if Large File Storage (LFS) is enabled for namespace.
   */
  lfsEnabled: boolean | null;

  /**
   * Name of the namespace.
   */
  name: string;

  /**
   * Package settings for the namespace.
   */
  packageSettings: IXGitLabPackageSettings | null;

  /**
   * Path of the namespace.
   */
  path: string;

  /**
   * Projects within this namespace.
   */
  projects: IXGitLabProjectConnection;

  /**
   * Number of projects in the root namespace where the repository size exceeds the limit.
   */
  repositorySizeExcessProjectCount: number;

  /**
   * Indicates if users can request access to namespace.
   */
  requestAccessEnabled: boolean | null;

  /**
   * Aggregated storage statistics of the namespace. Only available for root namespaces.
   */
  rootStorageStatistics: IXGitLabRootStorageStatistics | null;

  /**
   * Shared runners availability for the namespace and its descendants.
   */
  sharedRunnersSetting: XGitLabSharedRunnersSetting | null;

  /**
   * Total storage limit of the root namespace in bytes.
   */
  storageSizeLimit: number | null;

  /**
   * Date until the temporary storage increase is active.
   */
  temporaryStorageIncreaseEndsOn: any | null;

  /**
   * Total repository size of all projects in the root namespace in bytes.
   */
  totalRepositorySize: number | null;

  /**
   * Total excess repository size of all projects in the root namespace in bytes.
   */
  totalRepositorySizeExcess: number | null;

  /**
   * Visibility of the namespace.
   */
  visibility: string | null;
}

export interface IComplianceFrameworksOnXGitLabNamespaceArguments {
  /**
   * Global ID of a specific compliance framework to return.
   */
  id?: any | null;

  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IProjectsOnXGitLabNamespaceArguments {
  /**
   * Include also subgroup projects.
   * @default false
   */
  includeSubgroups?: boolean | null;

  /**
   * Search project with most similar names or paths.
   * @default null
   */
  search?: string | null;

  /**
   * Sort projects by this criteria.
   * @default null
   */
  sort?: XGitLabNamespaceProjectSort | null;

  /**
   * Filter projects by IDs.
   * @default null
   */
  ids?: Array<string> | null;

  /**
   * Returns only the projects which have code coverage.
   * @default false
   */
  hasCodeCoverage?: boolean | null;

  /**
   * Returns only the projects which have vulnerabilities.
   * @default false
   */
  hasVulnerabilities?: boolean | null;

  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

/**
 * The connection type for Namespace.
 */
export interface IXGitLabNamespaceConnection {
  __typename: '_xGitLabNamespaceConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitLabNamespaceEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitLabNamespace | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitLabPageInfo;
}

/**
 * An edge in a connection.
 */
export interface IXGitLabNamespaceEdge {
  __typename: '_xGitLabNamespaceEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitLabNamespace | null;
}

/**
 * Autogenerated input type of NamespaceIncreaseStorageTemporarily
 */
export interface IXGitLabNamespaceIncreaseStorageTemporarilyInput {
  /**
   * Global ID of the namespace to mutate.
   */
  id: any;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of NamespaceIncreaseStorageTemporarily
 */
export interface IXGitLabNamespaceIncreaseStorageTemporarilyPayload {
  __typename: '_xGitLabNamespaceIncreaseStorageTemporarilyPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * Errors encountered during execution of the mutation.
   */
  errors: Array<string>;

  /**
   * Namespace after mutation.
   */
  namespace: IXGitLabNamespace | null;
}

/**
 * Values for sorting projects
 */
export const enum XGitLabNamespaceProjectSort {
  /**
   * Most similar to the search query.
   */
  SIMILARITY = 'SIMILARITY',

  /**
   * Sort by storage size.
   */
  STORAGE = 'STORAGE',
}

export interface IXGitLabNegatedBoardIssueInput {
  /**
   * Filter by label name.
   */
  labelName?: Array<string | null> | null;

  /**
   * Filter by author username.
   */
  authorUsername?: string | null;

  /**
   * Filter by reaction emoji applied by the current user. Wildcard values "NONE" and "ANY" are supported.
   */
  myReactionEmoji?: string | null;

  /**
   * List of IIDs of issues. For example `["1", "2"]`.
   */
  iids?: Array<string> | null;

  /**
   * Filter by milestone title.
   */
  milestoneTitle?: string | null;

  /**
   * Filter by assignee username.
   */
  assigneeUsername?: Array<string | null> | null;

  /**
   * Filter by release tag.
   */
  releaseTag?: string | null;

  /**
   * Filter by the given issue types.
   */
  types?: Array<XGitLabIssueType> | null;

  /**
   * Filter by milestone ID wildcard.
   */
  milestoneWildcardId?: XGitLabMilestoneWildcardId | null;

  /**
   * Filter by epic ID. Incompatible with epicWildcardId.
   */
  epicId?: any | null;

  /**
   * Filter by iteration title.
   */
  iterationTitle?: string | null;

  /**
   * Filter by weight.
   */
  weight?: string | null;

  /**
   * Filter by a list of iteration IDs. Incompatible with iterationWildcardId.
   */
  iterationId?: Array<any> | null;

  /**
   * Filter by iteration ID wildcard.
   */
  iterationWildcardId?: XGitLabNegatedIterationWildcardId | null;
}

export interface IXGitLabNegatedEpicBoardIssueInput {
  /**
   * Filter by label name.
   */
  labelName?: Array<string | null> | null;

  /**
   * Filter by author username.
   */
  authorUsername?: string | null;

  /**
   * Filter by reaction emoji applied by the current user. Wildcard values "NONE" and "ANY" are supported.
   */
  myReactionEmoji?: string | null;
}

export interface IXGitLabNegatedEpicFilterInput {
  /**
   * Filter by label name.
   */
  labelName?: Array<string | null> | null;

  /**
   * Filter by author username.
   */
  authorUsername?: string | null;

  /**
   * Filter by reaction emoji applied by the current user.
   */
  myReactionEmoji?: string | null;
}

export interface IXGitLabNegatedIssueFilterInput {
  /**
   * List of IIDs of issues to exclude. For example, `[1, 2]`.
   */
  iids?: Array<string> | null;

  /**
   * Labels not applied to this issue.
   */
  labelName?: Array<string> | null;

  /**
   * Milestone not applied to this issue.
   */
  milestoneTitle?: Array<string> | null;

  /**
   * Release tag not associated with the issue's milestone. Ignored when parent is a group.
   */
  releaseTag?: Array<string> | null;

  /**
   * Username of a user who didn't author the issue.
   */
  authorUsername?: string | null;

  /**
   * Usernames of users not assigned to the issue.
   */
  assigneeUsernames?: Array<string> | null;

  /**
   * ID of a user not assigned to the issues.
   */
  assigneeId?: string | null;

  /**
   * Filter by negated milestone wildcard values.
   */
  milestoneWildcardId?: XGitLabNegatedMilestoneWildcardId | null;

  /**
   * Filter by reaction emoji applied by the current user.
   */
  myReactionEmoji?: string | null;

  /**
   * Filters out issues by the given issue types.
   */
  types?: Array<XGitLabIssueType> | null;

  /**
   * ID of an epic not associated with the issues.
   */
  epicId?: string | null;

  /**
   * Weight not applied to the issue.
   */
  weight?: string | null;

  /**
   * List of iteration Global IDs not applied to the issue.
   */
  iterationId?: Array<string> | null;

  /**
   * Filter by negated iteration ID wildcard.
   */
  iterationWildcardId?: XGitLabIterationWildcardId | null;
}

/**
 * Negated Iteration ID wildcard values
 */
export const enum XGitLabNegatedIterationWildcardId {
  /**
   * Current iteration.
   */
  CURRENT = 'CURRENT',
}

/**
 * Negated Milestone ID wildcard values
 */
export const enum XGitLabNegatedMilestoneWildcardId {
  /**
   * Milestone assigned is open and yet to be started (start date > today).
   */
  STARTED = 'STARTED',

  /**
   * Milestone assigned is open but due in the past (due date <= today).
   */
  UPCOMING = 'UPCOMING',
}

/**
 * Represents the network policy
 */
export interface IXGitLabNetworkPolicy {
  __typename: '_xGitLabNetworkPolicy';

  /**
   * Indicates whether this policy is enabled.
   */
  enabled: boolean;

  /**
   * Environments where this policy is applied.
   */
  environments: IXGitLabEnvironmentConnection | null;

  /**
   * Indicates whether this policy is created from AutoDevops.
   */
  fromAutoDevops: boolean;

  /**
   * Kind of the policy.
   */
  kind: XGitLabNetworkPolicyKind;

  /**
   * Name of the policy.
   */
  name: string;

  /**
   * Namespace of the policy.
   */
  namespace: string;

  /**
   * Timestamp of when the policy YAML was last updated.
   */
  updatedAt: any;

  /**
   * YAML definition of the policy.
   */
  yaml: string;
}

export interface IEnvironmentsOnXGitLabNetworkPolicyArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

/**
 * The connection type for NetworkPolicy.
 */
export interface IXGitLabNetworkPolicyConnection {
  __typename: '_xGitLabNetworkPolicyConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitLabNetworkPolicyEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitLabNetworkPolicy | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitLabPageInfo;
}

/**
 * An edge in a connection.
 */
export interface IXGitLabNetworkPolicyEdge {
  __typename: '_xGitLabNetworkPolicyEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitLabNetworkPolicy | null;
}

/**
 * Kind of the network policy
 */
export const enum XGitLabNetworkPolicyKind {
  /**
   * Policy kind of Cilium Network Policy.
   */
  CiliumNetworkPolicy = 'CiliumNetworkPolicy',

  /**
   * Policy kind of Network Policy.
   */
  NetworkPolicy = 'NetworkPolicy',
}

export interface IXGitLabNote {
  __typename: '_xGitLabNote';

  /**
   * User who wrote this note.
   */
  author: IXGitLabUserCore;

  /**
   * Content of the note.
   */
  body: string;

  /**
   * The GitLab Flavored Markdown rendering of `note`
   */
  bodyHtml: string | null;

  /**
   * Indicates if this note is confidential.
   */
  confidential: boolean | null;

  /**
   * Timestamp of the note creation.
   */
  createdAt: any;

  /**
   * Discussion this note is a part of.
   */
  discussion: IXGitLabDiscussion | null;

  /**
   * ID of the note.
   */
  id: any;

  /**
   * Position of this note on a diff.
   */
  position: IXGitLabDiffPosition | null;

  /**
   * Project associated with the note.
   */
  project: IXGitLabProject | null;

  /**
   * Indicates if the object can be resolved.
   */
  resolvable: boolean;

  /**
   * Indicates if the object is resolved.
   */
  resolved: boolean;

  /**
   * Timestamp of when the object was resolved.
   */
  resolvedAt: any | null;

  /**
   * User who resolved the object.
   */
  resolvedBy: IXGitLabUserCore | null;

  /**
   * Indicates whether this note was created by the system or by a user.
   */
  system: boolean;

  /**
   * Name of the icon corresponding to a system note.
   */
  systemNoteIconName: string | null;

  /**
   * Timestamp of the note's last activity.
   */
  updatedAt: any;

  /**
   * URL to view this Note in the Web UI.
   */
  url: string | null;

  /**
   * Permissions for the current user on the resource
   */
  userPermissions: IXGitLabNotePermissions;
}

export type _xGitLabNoteableInterface =
  | IXGitLabAlertManagementAlert
  | IXGitLabBoardEpic
  | IXGitLabDesign
  | IXGitLabEpic
  | IXGitLabEpicIssue
  | IXGitLabIssue
  | IXGitLabMergeRequest
  | IXGitLabSnippet
  | IXGitLabVulnerability;

export interface IXGitLabNoteableInterface {
  __typename: '_xGitLabNoteableInterface';

  /**
   * All discussions on this noteable.
   */
  discussions: IXGitLabDiscussionConnection;

  /**
   * All notes on this noteable.
   */
  notes: IXGitLabNoteConnection;
}

export interface IDiscussionsOnXGitLabNoteableInterfaceArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface INotesOnXGitLabNoteableInterfaceArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

/**
 * Represents an object that supports notes.
 */
export type _xGitLabNoteableType =
  | IXGitLabDesign
  | IXGitLabIssue
  | IXGitLabMergeRequest;

/**
 * The connection type for Note.
 */
export interface IXGitLabNoteConnection {
  __typename: '_xGitLabNoteConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitLabNoteEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitLabNote | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitLabPageInfo;
}

/**
 * An edge in a connection.
 */
export interface IXGitLabNoteEdge {
  __typename: '_xGitLabNoteEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitLabNote | null;
}

export interface IXGitLabNotePermissions {
  __typename: '_xGitLabNotePermissions';

  /**
   * Indicates the user can perform `admin_note` on this resource
   */
  adminNote: boolean;

  /**
   * Indicates the user can perform `award_emoji` on this resource
   */
  awardEmoji: boolean;

  /**
   * Indicates the user can perform `create_note` on this resource
   */
  createNote: boolean;

  /**
   * Indicates the user can perform `read_note` on this resource
   */
  readNote: boolean;

  /**
   * Indicates the user can perform `reposition_note` on this resource
   */
  repositionNote: boolean;

  /**
   * Indicates the user can perform `resolve_note` on this resource
   */
  resolveNote: boolean;
}

/**
 * Nuget dependency link metadata
 */
export interface IXGitLabNugetDependencyLinkMetadata {
  __typename: '_xGitLabNugetDependencyLinkMetadata';

  /**
   * ID of the metadatum.
   */
  id: any;

  /**
   * Target framework of the dependency link package.
   */
  targetFramework: string;
}

/**
 * Nuget metadata
 */
export interface IXGitLabNugetMetadata {
  __typename: '_xGitLabNugetMetadata';

  /**
   * Icon URL of the Nuget package.
   */
  iconUrl: string | null;

  /**
   * ID of the metadatum.
   */
  id: any;

  /**
   * License URL of the Nuget package.
   */
  licenseUrl: string | null;

  /**
   * Project URL of the Nuget package.
   */
  projectUrl: string | null;
}

/**
 * The rotation participant and color palette
 */
export interface IXGitLabOncallParticipantType {
  __typename: '_xGitLabOncallParticipantType';

  /**
   * Color palette to assign to the on-call user. For example "blue".
   */
  colorPalette: string | null;

  /**
   * Color weight to assign to for the on-call user, for example "500". Max 4 chars. For easy identification of the user.
   */
  colorWeight: string | null;

  /**
   * ID of the on-call participant.
   */
  id: any;

  /**
   * User who is participating.
   */
  user: IXGitLabUserCore;
}

/**
 * The connection type for OncallParticipantType.
 */
export interface IXGitLabOncallParticipantTypeConnection {
  __typename: '_xGitLabOncallParticipantTypeConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitLabOncallParticipantTypeEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitLabOncallParticipantType | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitLabPageInfo;
}

/**
 * An edge in a connection.
 */
export interface IXGitLabOncallParticipantTypeEdge {
  __typename: '_xGitLabOncallParticipantTypeEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitLabOncallParticipantType | null;
}

/**
 * Active period time range for on-call rotation
 */
export interface IXGitLabOncallRotationActivePeriodInputType {
  /**
   * Start of the rotation active period in 24 hour format. For example, "18:30".
   */
  startTime: string;

  /**
   * End of the rotation active period in 24 hour format. For example, "18:30".
   */
  endTime: string;
}

/**
 * Active period time range for on-call rotation
 */
export interface IXGitLabOncallRotationActivePeriodType {
  __typename: '_xGitLabOncallRotationActivePeriodType';

  /**
   * End of the rotation active period.
   */
  endTime: string | null;

  /**
   * Start of the rotation active period.
   */
  startTime: string | null;
}

/**
 * Autogenerated input type of OncallRotationCreate
 */
export interface IXGitLabOncallRotationCreateInput {
  /**
   * Project to create the on-call schedule in.
   */
  projectPath: string;

  /**
   * IID of the on-call schedule to create the on-call rotation in.
   */
  scheduleIid: string;

  /**
   * Name of the on-call rotation.
   */
  name: string;

  /**
   * Start date and time of the on-call rotation, in the timezone of the on-call schedule.
   */
  startsAt: IXGitLabOncallRotationDateInputType;

  /**
   * End date and time of the on-call rotation, in the timezone of the on-call schedule.
   */
  endsAt?: IXGitLabOncallRotationDateInputType | null;

  /**
   * Rotation length of the on-call rotation.
   */
  rotationLength: IXGitLabOncallRotationLengthInputType;

  /**
   * Active period of time that the on-call rotation should take place.
   */
  activePeriod?: IXGitLabOncallRotationActivePeriodInputType | null;

  /**
   * Usernames of users participating in the on-call rotation. A maximum limit of 100 participants applies.
   */
  participants: Array<IXGitLabOncallUserInputType>;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of OncallRotationCreate
 */
export interface IXGitLabOncallRotationCreatePayload {
  __typename: '_xGitLabOncallRotationCreatePayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * Errors encountered during execution of the mutation.
   */
  errors: Array<string>;

  /**
   * On-call rotation.
   */
  oncallRotation: IXGitLabIncidentManagementOncallRotation | null;
}

/**
 * Date input type for on-call rotation
 */
export interface IXGitLabOncallRotationDateInputType {
  /**
   * Date component of the date in YYYY-MM-DD format.
   */
  date: string;

  /**
   * Time component of the date in 24hr HH:MM format.
   */
  time: string;
}

/**
 * Autogenerated input type of OncallRotationDestroy
 */
export interface IXGitLabOncallRotationDestroyInput {
  /**
   * Project to remove the on-call schedule from.
   */
  projectPath: string;

  /**
   * IID of the on-call schedule to the on-call rotation belongs to.
   */
  scheduleIid: string;

  /**
   * ID of the on-call rotation to remove.
   */
  id: any;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of OncallRotationDestroy
 */
export interface IXGitLabOncallRotationDestroyPayload {
  __typename: '_xGitLabOncallRotationDestroyPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * Errors encountered during execution of the mutation.
   */
  errors: Array<string>;

  /**
   * On-call rotation.
   */
  oncallRotation: IXGitLabIncidentManagementOncallRotation | null;
}

/**
 * The rotation length of the on-call rotation
 */
export interface IXGitLabOncallRotationLengthInputType {
  /**
   * Rotation length of the on-call rotation.
   */
  length: number;

  /**
   * Unit of the rotation length of the on-call rotation.
   */
  unit: XGitLabOncallRotationUnitEnum;
}

/**
 * Rotation length unit of an on-call rotation
 */
export const enum XGitLabOncallRotationUnitEnum {
  /**
   * Hours
   */
  HOURS = 'HOURS',

  /**
   * Days
   */
  DAYS = 'DAYS',

  /**
   * Weeks
   */
  WEEKS = 'WEEKS',
}

/**
 * Autogenerated input type of OncallRotationUpdate
 */
export interface IXGitLabOncallRotationUpdateInput {
  /**
   * ID of the on-call schedule to create the on-call rotation in.
   */
  id: any;

  /**
   * Name of the on-call rotation.
   */
  name?: string | null;

  /**
   * Start date and time of the on-call rotation, in the timezone of the on-call schedule.
   */
  startsAt?: IXGitLabOncallRotationDateInputType | null;

  /**
   * End date and time of the on-call rotation, in the timezone of the on-call schedule.
   */
  endsAt?: IXGitLabOncallRotationDateInputType | null;

  /**
   * Rotation length of the on-call rotation.
   */
  rotationLength?: IXGitLabOncallRotationLengthInputType | null;

  /**
   * Active period of time that the on-call rotation should take place.
   */
  activePeriod?: IXGitLabOncallRotationActivePeriodInputType | null;

  /**
   * Usernames of users participating in the on-call rotation. A maximum limit of 100 participants applies.
   */
  participants?: Array<IXGitLabOncallUserInputType> | null;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of OncallRotationUpdate
 */
export interface IXGitLabOncallRotationUpdatePayload {
  __typename: '_xGitLabOncallRotationUpdatePayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * Errors encountered during execution of the mutation.
   */
  errors: Array<string>;

  /**
   * On-call rotation.
   */
  oncallRotation: IXGitLabIncidentManagementOncallRotation | null;
}

/**
 * Autogenerated input type of OncallScheduleCreate
 */
export interface IXGitLabOncallScheduleCreateInput {
  /**
   * Project to create the on-call schedule in.
   */
  projectPath: string;

  /**
   * Name of the on-call schedule.
   */
  name: string;

  /**
   * Description of the on-call schedule.
   */
  description?: string | null;

  /**
   * Timezone of the on-call schedule.
   */
  timezone: string;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of OncallScheduleCreate
 */
export interface IXGitLabOncallScheduleCreatePayload {
  __typename: '_xGitLabOncallScheduleCreatePayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * Errors encountered during execution of the mutation.
   */
  errors: Array<string>;

  /**
   * On-call schedule.
   */
  oncallSchedule: IXGitLabIncidentManagementOncallSchedule | null;
}

/**
 * Autogenerated input type of OncallScheduleDestroy
 */
export interface IXGitLabOncallScheduleDestroyInput {
  /**
   * Project to remove the on-call schedule from.
   */
  projectPath: string;

  /**
   * On-call schedule internal ID to remove.
   */
  iid: string;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of OncallScheduleDestroy
 */
export interface IXGitLabOncallScheduleDestroyPayload {
  __typename: '_xGitLabOncallScheduleDestroyPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * Errors encountered during execution of the mutation.
   */
  errors: Array<string>;

  /**
   * On-call schedule.
   */
  oncallSchedule: IXGitLabIncidentManagementOncallSchedule | null;
}

/**
 * Autogenerated input type of OncallScheduleUpdate
 */
export interface IXGitLabOncallScheduleUpdateInput {
  /**
   * Project to update the on-call schedule in.
   */
  projectPath: string;

  /**
   * On-call schedule internal ID to update.
   */
  iid: string;

  /**
   * Name of the on-call schedule.
   */
  name?: string | null;

  /**
   * Description of the on-call schedule.
   */
  description?: string | null;

  /**
   * Timezone of the on-call schedule.
   */
  timezone?: string | null;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of OncallScheduleUpdate
 */
export interface IXGitLabOncallScheduleUpdatePayload {
  __typename: '_xGitLabOncallScheduleUpdatePayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * Errors encountered during execution of the mutation.
   */
  errors: Array<string>;

  /**
   * On-call schedule.
   */
  oncallSchedule: IXGitLabIncidentManagementOncallSchedule | null;
}

/**
 * The rotation user and color palette
 */
export interface IXGitLabOncallUserInputType {
  /**
   * Username of the user to participate in the on-call rotation. For example, `"user_one"`.
   */
  username: string;

  /**
   * Value of DataVisualizationColorEnum. The color from the palette to assign to the on-call user.
   */
  colorPalette?: XGitLabDataVisualizationColorEnum | null;

  /**
   * Color weight to assign to for the on-call user. To view on-call schedules in
   * GitLab, do not provide a value below 500. A value between 500 and 950 ensures
   * sufficient contrast.
   */
  colorWeight?: XGitLabDataVisualizationWeightEnum | null;
}

/**
 * Represents a package in the Package Registry. Note that this type is in beta and susceptible to changes
 */
export interface IXGitLabPackage {
  __typename: '_xGitLabPackage';

  /**
   * Whether the user can destroy the package.
   */
  canDestroy: boolean;

  /**
   * Date of creation.
   */
  createdAt: any;

  /**
   * ID of the package.
   */
  id: any;

  /**
   * Package metadata.
   */
  metadata: _xGitLabPackageMetadata | null;

  /**
   * Name of the package.
   */
  name: string;

  /**
   * Package type.
   */
  packageType: XGitLabPackageTypeEnum;

  /**
   * Pipelines that built the package.
   */
  pipelines: IXGitLabPipelineConnection | null;

  /**
   * Project where the package is stored.
   */
  project: IXGitLabProject;

  /**
   * Package status.
   */
  status: XGitLabPackageStatus;

  /**
   * Package tags.
   */
  tags: IXGitLabPackageTagConnection | null;

  /**
   * Date of most recent update.
   */
  updatedAt: any;

  /**
   * Version string.
   */
  version: string | null;

  /**
   * Other versions of the package. Deprecated in 13.11: This field is now only returned in the PackageDetailsType.
   * @deprecated "This field is now only returned in the PackageDetailsType. Deprecated in 13.11."
   */
  versions: IXGitLabPackageConnection | null;
}

export interface IPipelinesOnXGitLabPackageArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface ITagsOnXGitLabPackageArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IVersionsOnXGitLabPackageArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

/**
 * Represents a composer JSON file
 */
export interface IXGitLabPackageComposerJsonType {
  __typename: '_xGitLabPackageComposerJsonType';

  /**
   * License set in the Composer JSON file.
   */
  license: string | null;

  /**
   * Name set in the Composer JSON file.
   */
  name: string | null;

  /**
   * Type set in the Composer JSON file.
   */
  type: string | null;

  /**
   * Version set in the Composer JSON file.
   */
  version: string | null;
}

/**
 * The connection type for Package.
 */
export interface IXGitLabPackageConnection {
  __typename: '_xGitLabPackageConnection';

  /**
   * Total count of collection.
   */
  count: number;

  /**
   * A list of edges.
   */
  edges: Array<IXGitLabPackageEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitLabPackage | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitLabPageInfo;
}

/**
 * Represents a package dependency.
 */
export interface IXGitLabPackageDependency {
  __typename: '_xGitLabPackageDependency';

  /**
   * ID of the dependency.
   */
  id: any;

  /**
   * Name of the dependency.
   */
  name: string;

  /**
   * Version pattern of the dependency.
   */
  versionPattern: string;
}

/**
 * Represents a package dependency link
 */
export interface IXGitLabPackageDependencyLink {
  __typename: '_xGitLabPackageDependencyLink';

  /**
   * Dependency.
   */
  dependency: IXGitLabPackageDependency | null;

  /**
   * Dependency type.
   */
  dependencyType: XGitLabPackageDependencyType;

  /**
   * ID of the dependency link.
   */
  id: any;

  /**
   * Dependency link metadata.
   */
  metadata: _xGitLabDependencyLinkMetadata | null;
}

/**
 * The connection type for PackageDependencyLink.
 */
export interface IXGitLabPackageDependencyLinkConnection {
  __typename: '_xGitLabPackageDependencyLinkConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitLabPackageDependencyLinkEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitLabPackageDependencyLink | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitLabPageInfo;
}

/**
 * An edge in a connection.
 */
export interface IXGitLabPackageDependencyLinkEdge {
  __typename: '_xGitLabPackageDependencyLinkEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitLabPackageDependencyLink | null;
}

export const enum XGitLabPackageDependencyType {
  /**
   * dependencies dependency type
   */
  DEPENDENCIES = 'DEPENDENCIES',

  /**
   * devDependencies dependency type
   */
  DEV_DEPENDENCIES = 'DEV_DEPENDENCIES',

  /**
   * bundleDependencies dependency type
   */
  BUNDLE_DEPENDENCIES = 'BUNDLE_DEPENDENCIES',

  /**
   * peerDependencies dependency type
   */
  PEER_DEPENDENCIES = 'PEER_DEPENDENCIES',
}

/**
 * Represents a package details in the Package Registry. Note that this type is in beta and susceptible to changes
 */
export interface IXGitLabPackageDetailsType {
  __typename: '_xGitLabPackageDetailsType';

  /**
   * Whether the user can destroy the package.
   */
  canDestroy: boolean;

  /**
   * Date of creation.
   */
  createdAt: any;

  /**
   * Dependency link.
   */
  dependencyLinks: IXGitLabPackageDependencyLinkConnection | null;

  /**
   * ID of the package.
   */
  id: any;

  /**
   * Package metadata.
   */
  metadata: _xGitLabPackageMetadata | null;

  /**
   * Name of the package.
   */
  name: string;

  /**
   * Package files.
   */
  packageFiles: IXGitLabPackageFileConnection | null;

  /**
   * Package type.
   */
  packageType: XGitLabPackageTypeEnum;

  /**
   * Pipelines that built the package.
   */
  pipelines: IXGitLabPipelineConnection | null;

  /**
   * Project where the package is stored.
   */
  project: IXGitLabProject;

  /**
   * Package status.
   */
  status: XGitLabPackageStatus;

  /**
   * Package tags.
   */
  tags: IXGitLabPackageTagConnection | null;

  /**
   * Date of most recent update.
   */
  updatedAt: any;

  /**
   * Version string.
   */
  version: string | null;

  /**
   * Other versions of the package.
   */
  versions: IXGitLabPackageConnection | null;
}

export interface IDependencyLinksOnXGitLabPackageDetailsTypeArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IPackageFilesOnXGitLabPackageDetailsTypeArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IPipelinesOnXGitLabPackageDetailsTypeArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface ITagsOnXGitLabPackageDetailsTypeArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IVersionsOnXGitLabPackageDetailsTypeArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

/**
 * An edge in a connection.
 */
export interface IXGitLabPackageEdge {
  __typename: '_xGitLabPackageEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitLabPackage | null;
}

/**
 * Represents a package file
 */
export interface IXGitLabPackageFile {
  __typename: '_xGitLabPackageFile';

  /**
   * Created date.
   */
  createdAt: any;

  /**
   * Download path of the package file.
   */
  downloadPath: string;

  /**
   * Md5 of the package file.
   */
  fileMd5: string | null;

  /**
   * File metadata.
   */
  fileMetadata: _xGitLabPackageFileMetadata | null;

  /**
   * Name of the package file.
   */
  fileName: string;

  /**
   * Sha1 of the package file.
   */
  fileSha1: string | null;

  /**
   * Sha256 of the package file.
   */
  fileSha256: string | null;

  /**
   * ID of the file.
   */
  id: any;

  /**
   * Size of the package file.
   */
  size: string;

  /**
   * Updated date.
   */
  updatedAt: any;
}

/**
 * The connection type for PackageFile.
 */
export interface IXGitLabPackageFileConnection {
  __typename: '_xGitLabPackageFileConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitLabPackageFileEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitLabPackageFile | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitLabPageInfo;
}

/**
 * An edge in a connection.
 */
export interface IXGitLabPackageFileEdge {
  __typename: '_xGitLabPackageFileEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitLabPackageFile | null;
}

/**
 * Represents metadata associated with a Package file
 */
export type _xGitLabPackageFileMetadata = IXGitLabConanFileMetadata;

/**
 * Represents metadata associated with a Package file
 */
export interface IXGitLabPackageFileMetadata {
  __typename: '_xGitLabPackageFileMetadata';

  /**
   * Date of creation.
   */
  createdAt: any;

  /**
   * Date of most recent update.
   */
  updatedAt: any;
}

/**
 * Represents the Geo sync and verification state of a package file
 */
export interface IXGitLabPackageFileRegistry {
  __typename: '_xGitLabPackageFileRegistry';

  /**
   * Timestamp when the PackageFileRegistry was created
   */
  createdAt: any | null;

  /**
   * ID of the PackageFileRegistry
   */
  id: string;

  /**
   * Error message during sync of the PackageFileRegistry
   */
  lastSyncFailure: string | null;

  /**
   * Timestamp of the most recent successful sync of the PackageFileRegistry
   */
  lastSyncedAt: any | null;

  /**
   * ID of the PackageFile.
   */
  packageFileId: string;

  /**
   * Timestamp after which the PackageFileRegistry should be resynced
   */
  retryAt: any | null;

  /**
   * Number of consecutive failed sync attempts of the PackageFileRegistry
   */
  retryCount: number | null;

  /**
   * Sync state of the PackageFileRegistry
   */
  state: XGitLabRegistryState | null;
}

/**
 * The connection type for PackageFileRegistry.
 */
export interface IXGitLabPackageFileRegistryConnection {
  __typename: '_xGitLabPackageFileRegistryConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitLabPackageFileRegistryEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitLabPackageFileRegistry | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitLabPageInfo;
}

/**
 * An edge in a connection.
 */
export interface IXGitLabPackageFileRegistryEdge {
  __typename: '_xGitLabPackageFileRegistryEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitLabPackageFileRegistry | null;
}

/**
 * Values for sorting group packages
 */
export const enum XGitLabPackageGroupSort {
  /**
   * Ordered by created_at in descending order.
   */
  CREATED_DESC = 'CREATED_DESC',

  /**
   * Ordered by created_at in ascending order.
   */
  CREATED_ASC = 'CREATED_ASC',

  /**
   * Ordered by name in descending order.
   */
  NAME_DESC = 'NAME_DESC',

  /**
   * Ordered by name in ascending order.
   */
  NAME_ASC = 'NAME_ASC',

  /**
   * Ordered by version in descending order.
   */
  VERSION_DESC = 'VERSION_DESC',

  /**
   * Ordered by version in ascending order.
   */
  VERSION_ASC = 'VERSION_ASC',

  /**
   * Ordered by type in descending order.
   */
  TYPE_DESC = 'TYPE_DESC',

  /**
   * Ordered by type in ascending order.
   */
  TYPE_ASC = 'TYPE_ASC',

  /**
   * Ordered by project path in descending order.
   */
  PROJECT_PATH_DESC = 'PROJECT_PATH_DESC',

  /**
   * Ordered by project path in ascending order.
   */
  PROJECT_PATH_ASC = 'PROJECT_PATH_ASC',
}

/**
 * Represents metadata associated with a Package
 */
export type _xGitLabPackageMetadata =
  | IXGitLabComposerMetadata
  | IXGitLabConanMetadata
  | IXGitLabMavenMetadata
  | IXGitLabNugetMetadata
  | IXGitLabPypiMetadata;

/**
 * Namespace-level Package Registry settings
 */
export interface IXGitLabPackageSettings {
  __typename: '_xGitLabPackageSettings';

  /**
   * When generic_duplicates_allowed is false, you can publish duplicate packages
   * with names that match this regex. Otherwise, this setting has no effect.
   */
  genericDuplicateExceptionRegex: any | null;

  /**
   * Indicates whether duplicate generic packages are allowed for this namespace.
   */
  genericDuplicatesAllowed: boolean;

  /**
   * When maven_duplicates_allowed is false, you can publish duplicate packages
   * with names that match this regex. Otherwise, this setting has no effect.
   */
  mavenDuplicateExceptionRegex: any | null;

  /**
   * Indicates whether duplicate Maven packages are allowed for this namespace.
   */
  mavenDuplicatesAllowed: boolean;
}

/**
 * Values for sorting package
 */
export const enum XGitLabPackageSort {
  /**
   * Ordered by created_at in descending order.
   */
  CREATED_DESC = 'CREATED_DESC',

  /**
   * Ordered by created_at in ascending order.
   */
  CREATED_ASC = 'CREATED_ASC',

  /**
   * Ordered by name in descending order.
   */
  NAME_DESC = 'NAME_DESC',

  /**
   * Ordered by name in ascending order.
   */
  NAME_ASC = 'NAME_ASC',

  /**
   * Ordered by version in descending order.
   */
  VERSION_DESC = 'VERSION_DESC',

  /**
   * Ordered by version in ascending order.
   */
  VERSION_ASC = 'VERSION_ASC',

  /**
   * Ordered by type in descending order.
   */
  TYPE_DESC = 'TYPE_DESC',

  /**
   * Ordered by type in ascending order.
   */
  TYPE_ASC = 'TYPE_ASC',
}

export const enum XGitLabPackageStatus {
  /**
   * Packages with a default status
   */
  DEFAULT = 'DEFAULT',

  /**
   * Packages with a hidden status
   */
  HIDDEN = 'HIDDEN',

  /**
   * Packages with a processing status
   */
  PROCESSING = 'PROCESSING',

  /**
   * Packages with a error status
   */
  ERROR = 'ERROR',
}

/**
 * Represents a package tag
 */
export interface IXGitLabPackageTag {
  __typename: '_xGitLabPackageTag';

  /**
   * Created date.
   */
  createdAt: any;

  /**
   * ID of the tag.
   */
  id: string;

  /**
   * Name of the tag.
   */
  name: string;

  /**
   * Updated date.
   */
  updatedAt: any;
}

/**
 * The connection type for PackageTag.
 */
export interface IXGitLabPackageTagConnection {
  __typename: '_xGitLabPackageTagConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitLabPackageTagEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitLabPackageTag | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitLabPageInfo;
}

/**
 * An edge in a connection.
 */
export interface IXGitLabPackageTagEdge {
  __typename: '_xGitLabPackageTagEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitLabPackageTag | null;
}

export const enum XGitLabPackageTypeEnum {
  /**
   * Packages from the Maven package manager
   */
  MAVEN = 'MAVEN',

  /**
   * Packages from the npm package manager
   */
  NPM = 'NPM',

  /**
   * Packages from the Conan package manager
   */
  CONAN = 'CONAN',

  /**
   * Packages from the Nuget package manager
   */
  NUGET = 'NUGET',

  /**
   * Packages from the PyPI package manager
   */
  PYPI = 'PYPI',

  /**
   * Packages from the Composer package manager
   */
  COMPOSER = 'COMPOSER',

  /**
   * Packages from the Generic package manager
   */
  GENERIC = 'GENERIC',

  /**
   * Packages from the Golang package manager
   */
  GOLANG = 'GOLANG',

  /**
   * Packages from the Debian package manager
   */
  DEBIAN = 'DEBIAN',

  /**
   * Packages from the Rubygems package manager
   */
  RUBYGEMS = 'RUBYGEMS',

  /**
   * Packages from the Helm package manager
   */
  HELM = 'HELM',

  /**
   * Packages from the Terraform Module package manager
   */
  TERRAFORM_MODULE = 'TERRAFORM_MODULE',
}

/**
 * Information about pagination in a connection.
 */
export interface IXGitLabPageInfo {
  __typename: '_xGitLabPageInfo';

  /**
   * When paginating forwards, the cursor to continue.
   */
  endCursor: string | null;

  /**
   * When paginating forwards, are there more items?
   */
  hasNextPage: boolean;

  /**
   * When paginating backwards, are there more items?
   */
  hasPreviousPage: boolean;

  /**
   * When paginating backwards, the cursor to continue.
   */
  startCursor: string | null;
}

/**
 * Represents the Geo replication and verification state of a pages_deployment
 */
export interface IXGitLabPagesDeploymentRegistry {
  __typename: '_xGitLabPagesDeploymentRegistry';

  /**
   * Timestamp when the PagesDeploymentRegistry was created
   */
  createdAt: any | null;

  /**
   * ID of the PagesDeploymentRegistry
   */
  id: string;

  /**
   * Error message during sync of the PagesDeploymentRegistry
   */
  lastSyncFailure: string | null;

  /**
   * Timestamp of the most recent successful sync of the PagesDeploymentRegistry
   */
  lastSyncedAt: any | null;

  /**
   * ID of the Pages Deployment.
   */
  pagesDeploymentId: string;

  /**
   * Timestamp after which the PagesDeploymentRegistry should be resynced
   */
  retryAt: any | null;

  /**
   * Number of consecutive failed sync attempts of the PagesDeploymentRegistry
   */
  retryCount: number | null;

  /**
   * Sync state of the PagesDeploymentRegistry
   */
  state: XGitLabRegistryState | null;
}

/**
 * The connection type for PagesDeploymentRegistry.
 */
export interface IXGitLabPagesDeploymentRegistryConnection {
  __typename: '_xGitLabPagesDeploymentRegistryConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitLabPagesDeploymentRegistryEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitLabPagesDeploymentRegistry | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitLabPageInfo;
}

/**
 * An edge in a connection.
 */
export interface IXGitLabPagesDeploymentRegistryEdge {
  __typename: '_xGitLabPagesDeploymentRegistryEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitLabPagesDeploymentRegistry | null;
}

/**
 * Represents a file or directory in the project repository that has been locked.
 */
export interface IXGitLabPathLock {
  __typename: '_xGitLabPathLock';

  /**
   * ID of the path lock.
   */
  id: any;

  /**
   * Locked path.
   */
  path: string | null;

  /**
   * User that has locked this path.
   */
  user: IXGitLabUserCore | null;
}

/**
 * The connection type for PathLock.
 */
export interface IXGitLabPathLockConnection {
  __typename: '_xGitLabPathLockConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitLabPathLockEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitLabPathLock | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitLabPageInfo;
}

/**
 * An edge in a connection.
 */
export interface IXGitLabPathLockEdge {
  __typename: '_xGitLabPathLockEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitLabPathLock | null;
}

export interface IXGitLabPipeline {
  __typename: '_xGitLabPipeline';

  /**
   * Indicates if the pipeline is active.
   */
  active: boolean;

  /**
   * Base SHA of the source branch.
   */
  beforeSha: string | null;

  /**
   * Specifies if a pipeline can be canceled.
   */
  cancelable: boolean;

  /**
   * Code Quality degradations reported on the pipeline.
   */
  codeQualityReports: IXGitLabCodeQualityDegradationConnection | null;

  /**
   * Path to the commit that triggered the pipeline.
   */
  commitPath: string | null;

  /**
   * Timestamp of the pipeline's commit.
   */
  committedAt: any | null;

  /**
   * Indicates if a pipeline is complete.
   */
  complete: boolean;

  /**
   * Configuration source of the pipeline (UNKNOWN_SOURCE, REPOSITORY_SOURCE,
   * AUTO_DEVOPS_SOURCE, WEBIDE_SOURCE, REMOTE_SOURCE, EXTERNAL_PROJECT_SOURCE,
   * BRIDGE_SOURCE, PARAMETER_SOURCE, COMPLIANCE_SOURCE)
   */
  configSource: XGitLabPipelineConfigSourceEnum | null;

  /**
   * Coverage percentage.
   */
  coverage: number | null;

  /**
   * Timestamp of the pipeline's creation.
   */
  createdAt: any;

  /**
   * DAST profile associated with the pipeline. Returns `null`if `dast_view_scans` feature flag is disabled.
   */
  dastProfile: IXGitLabDastProfile | null;

  /**
   * Detailed status of the pipeline.
   */
  detailedStatus: IXGitLabDetailedStatus;

  /**
   * Pipelines this pipeline will trigger.
   */
  downstream: IXGitLabPipelineConnection | null;

  /**
   * Duration of the pipeline in seconds.
   */
  duration: number | null;

  /**
   * Timestamp of the pipeline's completion.
   */
  finishedAt: any | null;

  /**
   * ID of the pipeline.
   */
  id: string;

  /**
   * Internal ID of the pipeline.
   */
  iid: string;

  /**
   * Specific job in this pipeline, either by name or ID.
   */
  job: IXGitLabCiJob | null;

  /**
   * Jobs belonging to the pipeline.
   */
  jobs: IXGitLabCiJobConnection | null;

  /**
   * Relative path to the pipeline's page.
   */
  path: string | null;

  /**
   * Project the pipeline belongs to.
   */
  project: IXGitLabProject | null;

  /**
   * How long the pipeline was queued before starting.
   */
  queuedDuration: any | null;

  /**
   * Reference to the branch from which the pipeline was triggered.
   */
  ref: string | null;

  /**
   * Specifies if a pipeline can be retried.
   */
  retryable: boolean;

  /**
   * Vulnerability findings reported on the pipeline.
   */
  securityReportFindings: IXGitLabPipelineSecurityReportFindingConnection | null;

  /**
   * Vulnerability and scanned resource counts for each security scanner of the pipeline.
   */
  securityReportSummary: IXGitLabSecurityReportSummary | null;

  /**
   * SHA of the pipeline's commit.
   */
  sha: string;

  /**
   * Job where pipeline was triggered from.
   */
  sourceJob: IXGitLabCiJob | null;

  /**
   * Stages of the pipeline.
   */
  stages: IXGitLabCiStageConnection | null;

  /**
   * Timestamp when the pipeline was started.
   */
  startedAt: any | null;

  /**
   * Status of the pipeline (CREATED, WAITING_FOR_RESOURCE, PREPARING, PENDING,
   * RUNNING, FAILED, SUCCESS, CANCELED, SKIPPED, MANUAL, SCHEDULED)
   */
  status: XGitLabPipelineStatusEnum;

  /**
   * Summary of the test report generated by the pipeline.
   */
  testReportSummary: IXGitLabTestReportSummary;

  /**
   * A specific test suite in a pipeline test report.
   */
  testSuite: IXGitLabTestSuite | null;

  /**
   * Timestamp of the pipeline's last activity.
   */
  updatedAt: any;

  /**
   * Pipeline that triggered the pipeline.
   */
  upstream: IXGitLabPipeline | null;

  /**
   * Pipeline user.
   */
  user: IXGitLabUserCore | null;

  /**
   * Permissions for the current user on the resource
   */
  userPermissions: IXGitLabPipelinePermissions;

  /**
   * Indicates if the pipeline has jobs with `needs` dependencies.
   */
  usesNeeds: boolean | null;

  /**
   * Indicates if a pipeline has warnings.
   */
  warnings: boolean;
}

export interface ICodeQualityReportsOnXGitLabPipelineArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IDownstreamOnXGitLabPipelineArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IJobOnXGitLabPipelineArguments {
  /**
   * ID of the job.
   */
  id?: any | null;

  /**
   * Name of the job.
   */
  name?: string | null;
}

export interface IJobsOnXGitLabPipelineArguments {
  /**
   * Filter jobs by the type of security report they produce.
   */
  securityReportTypes?: Array<XGitLabSecurityReportTypeEnum> | null;

  /**
   * Filter jobs by status.
   */
  statuses?: Array<XGitLabCiJobStatus> | null;

  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface ISecurityReportFindingsOnXGitLabPipelineArguments {
  /**
   * Filter vulnerability findings by report type.
   */
  reportType?: Array<string> | null;

  /**
   * Filter vulnerability findings by severity.
   */
  severity?: Array<string> | null;

  /**
   * Filter vulnerability findings by Scanner.externalId.
   */
  scanner?: Array<string> | null;

  /**
   * Filter vulnerability findings by state.
   */
  state?: Array<XGitLabVulnerabilityState> | null;

  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IStagesOnXGitLabPipelineArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface ITestSuiteOnXGitLabPipelineArguments {
  /**
   * IDs of the builds used to run the test suite.
   */
  buildIds: Array<string>;
}

export interface IXGitLabPipelineAnalytics {
  __typename: '_xGitLabPipelineAnalytics';

  /**
   * Labels for the monthly pipeline count.
   */
  monthPipelinesLabels: Array<string> | null;

  /**
   * Total monthly successful pipeline count.
   */
  monthPipelinesSuccessful: Array<number> | null;

  /**
   * Total monthly pipeline count.
   */
  monthPipelinesTotals: Array<number> | null;

  /**
   * Pipeline times labels.
   */
  pipelineTimesLabels: Array<string> | null;

  /**
   * Pipeline times.
   */
  pipelineTimesValues: Array<number> | null;

  /**
   * Labels for the weekly pipeline count.
   */
  weekPipelinesLabels: Array<string> | null;

  /**
   * Total weekly successful pipeline count.
   */
  weekPipelinesSuccessful: Array<number> | null;

  /**
   * Total weekly pipeline count.
   */
  weekPipelinesTotals: Array<number> | null;

  /**
   * Labels for the yearly pipeline count.
   */
  yearPipelinesLabels: Array<string> | null;

  /**
   * Total yearly successful pipeline count.
   */
  yearPipelinesSuccessful: Array<number> | null;

  /**
   * Total yearly pipeline count.
   */
  yearPipelinesTotals: Array<number> | null;
}

/**
 * Represents the Geo sync and verification state of a pipeline artifact
 */
export interface IXGitLabPipelineArtifactRegistry {
  __typename: '_xGitLabPipelineArtifactRegistry';

  /**
   * Timestamp when the PipelineArtifactRegistry was created
   */
  createdAt: any | null;

  /**
   * ID of the PipelineArtifactRegistry
   */
  id: string;

  /**
   * Error message during sync of the PipelineArtifactRegistry
   */
  lastSyncFailure: string | null;

  /**
   * Timestamp of the most recent successful sync of the PipelineArtifactRegistry
   */
  lastSyncedAt: any | null;

  /**
   * ID of the pipeline artifact.
   */
  pipelineArtifactId: string;

  /**
   * Timestamp after which the PipelineArtifactRegistry should be resynced
   */
  retryAt: any | null;

  /**
   * Number of consecutive failed sync attempts of the PipelineArtifactRegistry
   */
  retryCount: number | null;

  /**
   * Sync state of the PipelineArtifactRegistry
   */
  state: XGitLabRegistryState | null;
}

/**
 * The connection type for PipelineArtifactRegistry.
 */
export interface IXGitLabPipelineArtifactRegistryConnection {
  __typename: '_xGitLabPipelineArtifactRegistryConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitLabPipelineArtifactRegistryEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitLabPipelineArtifactRegistry | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitLabPageInfo;
}

/**
 * An edge in a connection.
 */
export interface IXGitLabPipelineArtifactRegistryEdge {
  __typename: '_xGitLabPipelineArtifactRegistryEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitLabPipelineArtifactRegistry | null;
}

/**
 * Autogenerated input type of PipelineCancel
 */
export interface IXGitLabPipelineCancelInput {
  /**
   * ID of the pipeline to mutate.
   */
  id: any;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of PipelineCancel
 */
export interface IXGitLabPipelineCancelPayload {
  __typename: '_xGitLabPipelineCancelPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * Errors encountered during execution of the mutation.
   */
  errors: Array<string>;
}

export const enum XGitLabPipelineConfigSourceEnum {
  /**
   * Unknown source.
   */
  UNKNOWN_SOURCE = 'UNKNOWN_SOURCE',

  /**
   * Repository source.
   */
  REPOSITORY_SOURCE = 'REPOSITORY_SOURCE',

  /**
   * Auto DevOps source.
   */
  AUTO_DEVOPS_SOURCE = 'AUTO_DEVOPS_SOURCE',

  /**
   * Webide source.
   */
  WEBIDE_SOURCE = 'WEBIDE_SOURCE',

  /**
   * Remote source.
   */
  REMOTE_SOURCE = 'REMOTE_SOURCE',

  /**
   * External project source.
   */
  EXTERNAL_PROJECT_SOURCE = 'EXTERNAL_PROJECT_SOURCE',

  /**
   * Bridge source.
   */
  BRIDGE_SOURCE = 'BRIDGE_SOURCE',

  /**
   * Parameter source.
   */
  PARAMETER_SOURCE = 'PARAMETER_SOURCE',

  /**
   * Compliance source.
   */
  COMPLIANCE_SOURCE = 'COMPLIANCE_SOURCE',
}

/**
 * The connection type for Pipeline.
 */
export interface IXGitLabPipelineConnection {
  __typename: '_xGitLabPipelineConnection';

  /**
   * Total count of collection.
   */
  count: number;

  /**
   * A list of edges.
   */
  edges: Array<IXGitLabPipelineEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitLabPipeline | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitLabPageInfo;
}

/**
 * Autogenerated input type of PipelineDestroy
 */
export interface IXGitLabPipelineDestroyInput {
  /**
   * ID of the pipeline to mutate.
   */
  id: any;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of PipelineDestroy
 */
export interface IXGitLabPipelineDestroyPayload {
  __typename: '_xGitLabPipelineDestroyPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * Errors encountered during execution of the mutation.
   */
  errors: Array<string>;
}

/**
 * An edge in a connection.
 */
export interface IXGitLabPipelineEdge {
  __typename: '_xGitLabPipelineEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitLabPipeline | null;
}

export interface IXGitLabPipelinePermissions {
  __typename: '_xGitLabPipelinePermissions';

  /**
   * Indicates the user can perform `admin_pipeline` on this resource
   */
  adminPipeline: boolean;

  /**
   * Indicates the user can perform `destroy_pipeline` on this resource
   */
  destroyPipeline: boolean;

  /**
   * Indicates the user can perform `update_pipeline` on this resource
   */
  updatePipeline: boolean;
}

/**
 * Autogenerated input type of PipelineRetry
 */
export interface IXGitLabPipelineRetryInput {
  /**
   * ID of the pipeline to mutate.
   */
  id: any;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of PipelineRetry
 */
export interface IXGitLabPipelineRetryPayload {
  __typename: '_xGitLabPipelineRetryPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * Errors encountered during execution of the mutation.
   */
  errors: Array<string>;

  /**
   * Pipeline after mutation.
   */
  pipeline: IXGitLabPipeline | null;
}

/**
 * Represents vulnerability finding of a security report on the pipeline.
 */
export interface IXGitLabPipelineSecurityReportFinding {
  __typename: '_xGitLabPipelineSecurityReportFinding';

  /**
   * Type of the security report that found the vulnerability.
   */
  confidence: string | null;

  /**
   * Description of the vulnerability finding.
   */
  description: string | null;

  /**
   * Indicates whether the vulnerability is a false positive.
   */
  falsePositive: boolean | null;

  /**
   * Identifiers of the vulnerabilit finding.
   */
  identifiers: Array<IXGitLabVulnerabilityIdentifier>;

  /**
   * Location metadata for the vulnerability. Its fields depend on the type of security scan that found the vulnerability.
   */
  location: _xGitLabVulnerabilityLocation | null;

  /**
   * Name of the vulnerability finding.
   */
  name: string | null;

  /**
   * Project on which the vulnerability finding was found.
   */
  project: IXGitLabProject | null;

  /**
   * Name of the vulnerability finding.
   */
  projectFingerprint: string | null;

  /**
   * Type of the security report that found the vulnerability finding.
   */
  reportType: XGitLabVulnerabilityReportType | null;

  /**
   * Scanner metadata for the vulnerability.
   */
  scanner: IXGitLabVulnerabilityScanner | null;

  /**
   * Severity of the vulnerability finding.
   */
  severity: XGitLabVulnerabilitySeverity | null;

  /**
   * URL to the vulnerability's details page.
   */
  solution: string | null;

  /**
   * Finding status.
   */
  state: XGitLabVulnerabilityState | null;

  /**
   * Name of the vulnerability finding.
   */
  uuid: string | null;
}

/**
 * The connection type for PipelineSecurityReportFinding.
 */
export interface IXGitLabPipelineSecurityReportFindingConnection {
  __typename: '_xGitLabPipelineSecurityReportFindingConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitLabPipelineSecurityReportFindingEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitLabPipelineSecurityReportFinding | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitLabPageInfo;
}

/**
 * An edge in a connection.
 */
export interface IXGitLabPipelineSecurityReportFindingEdge {
  __typename: '_xGitLabPipelineSecurityReportFindingEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitLabPipelineSecurityReportFinding | null;
}

export const enum XGitLabPipelineStatusEnum {
  /**
   * Pipeline has been created.
   */
  CREATED = 'CREATED',

  /**
   * A resource (for example, a runner) that the pipeline requires to run is unavailable.
   */
  WAITING_FOR_RESOURCE = 'WAITING_FOR_RESOURCE',

  /**
   * Pipeline is preparing to run.
   */
  PREPARING = 'PREPARING',

  /**
   * Pipeline has not started running yet.
   */
  PENDING = 'PENDING',

  /**
   * Pipeline is running.
   */
  RUNNING = 'RUNNING',

  /**
   * At least one stage of the pipeline failed.
   */
  FAILED = 'FAILED',

  /**
   * Pipeline completed successfully.
   */
  SUCCESS = 'SUCCESS',

  /**
   * Pipeline was canceled before completion.
   */
  CANCELED = 'CANCELED',

  /**
   * Pipeline was skipped.
   */
  SKIPPED = 'SKIPPED',

  /**
   * Pipeline needs to be manually started.
   */
  MANUAL = 'MANUAL',

  /**
   * Pipeline is scheduled to run.
   */
  SCHEDULED = 'SCHEDULED',
}

export interface IXGitLabProject {
  __typename: '_xGitLabProject';

  /**
   * Size limit for the repository in bytes.
   */
  actualRepositorySizeLimit: number | null;

  /**
   * Agent configurations defined by the project
   */
  agentConfigurations: IXGitLabAgentConfigurationConnection | null;

  /**
   * A single Alert Management alert of the project.
   */
  alertManagementAlert: IXGitLabAlertManagementAlert | null;

  /**
   * Counts of alerts by status for the project.
   */
  alertManagementAlertStatusCounts: IXGitLabAlertManagementAlertStatusCountsType | null;

  /**
   * Alert Management alerts of the project.
   */
  alertManagementAlerts: IXGitLabAlertManagementAlertConnection | null;

  /**
   * HTTP Integrations which can receive alerts for the project.
   */
  alertManagementHttpIntegrations: IXGitLabAlertManagementHttpIntegrationConnection | null;

  /**
   * Integrations which can receive alerts for the project.
   */
  alertManagementIntegrations: IXGitLabAlertManagementIntegrationConnection | null;

  /**
   * Extract alert fields from payload for custom mapping.
   */
  alertManagementPayloadFields: Array<IXGitLabAlertManagementPayloadAlertField> | null;

  /**
   * If `only_allow_merge_if_pipeline_succeeds` is true, indicates if merge
   * requests of the project can also be merged with skipped jobs.
   */
  allowMergeOnSkippedPipeline: boolean | null;

  /**
   * API fuzzing configuration for the project.
   */
  apiFuzzingCiConfiguration: IXGitLabApiFuzzingCiConfiguration | null;

  /**
   * Indicates the archived status of the project.
   */
  archived: boolean | null;

  /**
   * Indicates if issues referenced by merge requests and commits within the default branch are closed automatically.
   */
  autocloseReferencedIssues: boolean | null;

  /**
   * URL to avatar image file of the project.
   */
  avatarUrl: string | null;

  /**
   * A single board of the project.
   */
  board: IXGitLabBoard | null;

  /**
   * Boards of the project.
   */
  boards: IXGitLabBoardConnection | null;

  /**
   * CI/CD settings for the project.
   */
  ciCdSettings: IXGitLabProjectCiCdSetting | null;

  /**
   * The CI Job Tokens scope of access.
   */
  ciJobTokenScope: IXGitLabCiJobTokenScopeType | null;

  /**
   * Find a single CI/CD template by name.
   */
  ciTemplate: IXGitLabCiTemplate | null;

  /**
   * Find a single cluster agent by name.
   */
  clusterAgent: IXGitLabClusterAgent | null;

  /**
   * Cluster agents associated with the project.
   */
  clusterAgents: IXGitLabClusterAgentConnection | null;

  /**
   * Code coverage summary associated with the project.
   */
  codeCoverageSummary: IXGitLabCodeCoverageSummary | null;

  /**
   * Compliance frameworks associated with the project.
   */
  complianceFrameworks: IXGitLabComplianceFrameworkConnection | null;

  /**
   * Container expiration policy of the project.
   */
  containerExpirationPolicy: IXGitLabContainerExpirationPolicy | null;

  /**
   * Indicates if Container Registry is enabled for the current user
   */
  containerRegistryEnabled: boolean | null;

  /**
   * Container repositories of the project.
   */
  containerRepositories: IXGitLabContainerRepositoryConnection | null;

  /**
   * Number of container repositories in the project.
   */
  containerRepositoriesCount: number;

  /**
   * Timestamp of the project creation.
   */
  createdAt: any | null;

  /**
   * DAST Profile associated with the project.
   */
  dastProfile: IXGitLabDastProfile | null;

  /**
   * DAST Profiles associated with the project.
   */
  dastProfiles: IXGitLabDastProfileConnection | null;

  /**
   * DAST scanner profiles associated with the project.
   */
  dastScannerProfiles: IXGitLabDastScannerProfileConnection | null;

  /**
   * DAST Site Profile associated with the project.
   */
  dastSiteProfile: IXGitLabDastSiteProfile | null;

  /**
   * DAST Site Profiles associated with the project.
   */
  dastSiteProfiles: IXGitLabDastSiteProfileConnection | null;

  /**
   * DAST Site Validations associated with the project.
   */
  dastSiteValidations: IXGitLabDastSiteValidationConnection | null;

  /**
   * Short description of the project.
   */
  description: string | null;

  /**
   * The GitLab Flavored Markdown rendering of `description`
   */
  descriptionHtml: string | null;

  /**
   * Project's DORA metrics.
   */
  dora: IXGitLabDora | null;

  /**
   * A single environment of the project.
   */
  environment: IXGitLabEnvironment | null;

  /**
   * Environments of the project.
   */
  environments: IXGitLabEnvironmentConnection | null;

  /**
   * Number of times the project has been forked.
   */
  forksCount: number;

  /**
   * Full path of the project.
   */
  fullPath: string;

  /**
   * Grafana integration details for the project.
   */
  grafanaIntegration: IXGitLabGrafanaIntegration | null;

  /**
   * Group of the project.
   */
  group: IXGitLabGroup | null;

  /**
   * URL to connect to the project via HTTPS.
   */
  httpUrlToRepo: string | null;

  /**
   * ID of the project.
   */
  id: string;

  /**
   * Status of import background job of the project.
   */
  importStatus: string | null;

  /**
   * Incident Management escalation policies of the project.
   */
  incidentManagementEscalationPolicies: IXGitLabEscalationPolicyTypeConnection | null;

  /**
   * Incident Management escalation policy of the project.
   */
  incidentManagementEscalationPolicy: IXGitLabEscalationPolicyType | null;

  /**
   * Incident Management On-call schedules of the project.
   */
  incidentManagementOncallSchedules: IXGitLabIncidentManagementOncallScheduleConnection | null;

  /**
   * A single issue of the project.
   */
  issue: IXGitLabIssue | null;

  /**
   * Counts of issues by status for the project.
   */
  issueStatusCounts: IXGitLabIssueStatusCountsType | null;

  /**
   * Issues of the project.
   */
  issues: IXGitLabIssueConnection | null;

  /**
   * Indicates if Issues are enabled for the current user
   */
  issuesEnabled: boolean | null;

  /**
   * Find iteration cadences.
   */
  iterationCadences: IXGitLabIterationCadenceConnection | null;

  /**
   * Find iterations.
   */
  iterations: IXGitLabIterationConnection | null;

  /**
   * Status of Jira import background job of the project.
   */
  jiraImportStatus: string | null;

  /**
   * Jira imports into the project.
   */
  jiraImports: IXGitLabJiraImportConnection | null;

  /**
   * Jobs of a project. This field can only be resolved for one project in any single request.
   */
  jobs: IXGitLabCiJobConnection | null;

  /**
   * Indicates if CI/CD pipeline jobs are enabled for the current user.
   */
  jobsEnabled: boolean | null;

  /**
   * Label available on this project.
   */
  label: IXGitLabLabel | null;

  /**
   * Labels available on this project.
   */
  labels: IXGitLabLabelConnection | null;

  /**
   * Timestamp of the project last activity.
   */
  lastActivityAt: any | null;

  /**
   * Indicates if the project has Large File Storage (LFS) enabled.
   */
  lfsEnabled: boolean | null;

  /**
   * A single merge request of the project.
   */
  mergeRequest: IXGitLabMergeRequest | null;

  /**
   * Merge requests of the project.
   */
  mergeRequests: IXGitLabMergeRequestConnection | null;

  /**
   * Indicates if Merge Requests are enabled for the current user
   */
  mergeRequestsEnabled: boolean | null;

  /**
   * Indicates if no merge commits should be created and all merges should instead
   * be fast-forwarded, which means that merging is only allowed if the branch
   * could be fast-forwarded.
   */
  mergeRequestsFfOnlyEnabled: boolean | null;

  /**
   * Milestones of the project.
   */
  milestones: IXGitLabMilestoneConnection | null;

  /**
   * Name of the project (without namespace).
   */
  name: string;

  /**
   * Full name of the project with its namespace.
   */
  nameWithNamespace: string;

  /**
   * Namespace of the project.
   */
  namespace: IXGitLabNamespace | null;

  /**
   * Network Policies of the project
   */
  networkPolicies: IXGitLabNetworkPolicyConnection | null;

  /**
   * Indicates if merge requests of the project can only be merged when all the discussions are resolved.
   */
  onlyAllowMergeIfAllDiscussionsAreResolved: boolean | null;

  /**
   * Indicates if merge requests of the project can only be merged with successful jobs.
   */
  onlyAllowMergeIfPipelineSucceeds: boolean | null;

  /**
   * Number of open issues for the project.
   */
  openIssuesCount: number | null;

  /**
   * Packages of the project.
   */
  packages: IXGitLabPackageConnection | null;

  /**
   * Path of the project.
   */
  path: string;

  /**
   * The project's path locks.
   */
  pathLocks: IXGitLabPathLockConnection | null;

  /**
   * Build pipeline of the project.
   */
  pipeline: IXGitLabPipeline | null;

  /**
   * Pipeline analytics.
   */
  pipelineAnalytics: IXGitLabPipelineAnalytics | null;

  /**
   * Build pipelines of the project.
   */
  pipelines: IXGitLabPipelineConnection | null;

  /**
   * Indicates if a link to create or view a merge request should display after a
   * push to Git repositories of the project from the command line.
   */
  printingMergeRequestLinkEnabled: boolean | null;

  /**
   * Members of the project.
   */
  projectMembers: IXGitLabMemberInterfaceConnection | null;

  /**
   * Indicates if there is public access to pipelines and job details of the project, including output logs and artifacts.
   */
  publicJobs: boolean | null;

  /**
   * Project's push rules settings.
   */
  pushRules: IXGitLabPushRules | null;

  /**
   * A single release of the project.
   */
  release: IXGitLabRelease | null;

  /**
   * Releases of the project.
   */
  releases: IXGitLabReleaseConnection | null;

  /**
   * Indicates if `Delete source branch` option should be enabled by default for all new merge requests of the project.
   */
  removeSourceBranchAfterMerge: boolean | null;

  /**
   * Git repository of the project.
   */
  repository: IXGitLabRepository | null;

  /**
   * Size of repository that exceeds the limit in bytes.
   */
  repositorySizeExcess: number | null;

  /**
   * Indicates if users can request member access to the project.
   */
  requestAccessEnabled: boolean | null;

  /**
   * Find a single requirement.
   */
  requirement: IXGitLabRequirement | null;

  /**
   * Number of requirements for the project by their state.
   */
  requirementStatesCount: IXGitLabRequirementStatesCount | null;

  /**
   * Find requirements.
   */
  requirements: IXGitLabRequirementConnection | null;

  /**
   * SAST CI configuration for the project.
   */
  sastCiConfiguration: IXGitLabSastCiConfiguration | null;

  /**
   * Scan Execution Policies of the project
   */
  scanExecutionPolicies: IXGitLabScanExecutionPolicyConnection | null;

  /**
   * Path to project's security dashboard.
   */
  securityDashboardPath: string | null;

  /**
   * Information about security analyzers used in the project.
   */
  securityScanners: IXGitLabSecurityScanners | null;

  /**
   * Detailed version of a Sentry error on the project.
   */
  sentryDetailedError: IXGitLabSentryDetailedError | null;

  /**
   * Paginated collection of Sentry errors on the project.
   */
  sentryErrors: IXGitLabSentryErrorCollection | null;

  /**
   * E-mail address of the service desk.
   */
  serviceDeskAddress: string | null;

  /**
   * Indicates if the project has service desk enabled.
   */
  serviceDeskEnabled: boolean | null;

  /**
   * Project services.
   */
  services: IXGitLabServiceConnection | null;

  /**
   * Indicates if shared runners are enabled for the project.
   */
  sharedRunnersEnabled: boolean | null;

  /**
   * Snippets of the project.
   */
  snippets: IXGitLabSnippetConnection | null;

  /**
   * Indicates if Snippets are enabled for the current user
   */
  snippetsEnabled: boolean | null;

  /**
   * Indicates if `squashReadOnly` is enabled.
   */
  squashReadOnly: boolean;

  /**
   * URL to connect to the project via SSH.
   */
  sshUrlToRepo: string | null;

  /**
   * Number of times the project has been starred.
   */
  starCount: number;

  /**
   * Statistics of the project.
   */
  statistics: IXGitLabProjectStatistics | null;

  /**
   * Commit message used to apply merge request suggestions.
   */
  suggestionCommitMessage: string | null;

  /**
   * List of project topics (not Git tags). Deprecated in 13.12: Use `topics`.
   * @deprecated "Use `topics`. Deprecated in 13.12."
   */
  tagList: string | null;

  /**
   * Find a single Terraform state by name.
   */
  terraformState: IXGitLabTerraformState | null;

  /**
   * Terraform states associated with the project.
   */
  terraformStates: IXGitLabTerraformStateConnection | null;

  /**
   * Time logged on issues and merge requests in the project.
   */
  timelogs: IXGitLabTimelogConnection | null;

  /**
   * List of project topics.
   */
  topics: Array<string> | null;

  /**
   * Permissions for the current user on the resource
   */
  userPermissions: IXGitLabProjectPermissions;

  /**
   * Visibility of the project.
   */
  visibility: string | null;

  /**
   * Vulnerabilities reported on the project.
   */
  vulnerabilities: IXGitLabVulnerabilityConnection | null;

  /**
   * The historical number of vulnerabilities per day for the project.
   */
  vulnerabilitiesCountByDay: IXGitLabVulnerabilitiesCountByDayConnection | null;

  /**
   * Vulnerability scanners reported on the project vulnerabilities.
   */
  vulnerabilityScanners: IXGitLabVulnerabilityScannerConnection | null;

  /**
   * Counts for each vulnerability severity in the project.
   */
  vulnerabilitySeveritiesCount: IXGitLabVulnerabilitySeveritiesCount | null;

  /**
   * Web URL of the project.
   */
  webUrl: string | null;

  /**
   * Indicates if Wikis are enabled for the current user
   */
  wikiEnabled: boolean | null;
}

export interface IAgentConfigurationsOnXGitLabProjectArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IAlertManagementAlertOnXGitLabProjectArguments {
  /**
   * IID of the alert. For example, "1".
   */
  iid?: string | null;

  /**
   * Alerts with the specified statues. For example, `[TRIGGERED]`.
   */
  statuses?: Array<XGitLabAlertManagementStatus> | null;

  /**
   * Sort alerts by this criteria.
   */
  sort?: XGitLabAlertManagementAlertSort | null;

  /**
   * Filter query for given domain.
   * @default "operations"
   */
  domain: XGitLabAlertManagementDomainFilter;

  /**
   * Search query for title, description, service, or monitoring_tool.
   */
  search?: string | null;

  /**
   * Username of a user assigned to the issue.
   */
  assigneeUsername?: string | null;
}

export interface IAlertManagementAlertStatusCountsOnXGitLabProjectArguments {
  /**
   * Search query for title, description, service, or monitoring_tool.
   */
  search?: string | null;

  /**
   * Username of a user assigned to the issue.
   */
  assigneeUsername?: string | null;
}

export interface IAlertManagementAlertsOnXGitLabProjectArguments {
  /**
   * IID of the alert. For example, "1".
   */
  iid?: string | null;

  /**
   * Alerts with the specified statues. For example, `[TRIGGERED]`.
   */
  statuses?: Array<XGitLabAlertManagementStatus> | null;

  /**
   * Sort alerts by this criteria.
   */
  sort?: XGitLabAlertManagementAlertSort | null;

  /**
   * Filter query for given domain.
   * @default "operations"
   */
  domain: XGitLabAlertManagementDomainFilter;

  /**
   * Search query for title, description, service, or monitoring_tool.
   */
  search?: string | null;

  /**
   * Username of a user assigned to the issue.
   */
  assigneeUsername?: string | null;

  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IAlertManagementHttpIntegrationsOnXGitLabProjectArguments {
  /**
   * ID of the integration.
   */
  id?: any | null;

  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IAlertManagementIntegrationsOnXGitLabProjectArguments {
  /**
   * ID of the integration.
   */
  id?: any | null;

  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IAlertManagementPayloadFieldsOnXGitLabProjectArguments {
  /**
   * Sample payload for extracting alert fields for custom mappings.
   */
  payloadExample: string;
}

export interface IBoardOnXGitLabProjectArguments {
  /**
   * ID of the board.
   */
  id: any;
}

export interface IBoardsOnXGitLabProjectArguments {
  /**
   * Find a board by its ID.
   */
  id?: any | null;

  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface ICiTemplateOnXGitLabProjectArguments {
  /**
   * Name of the CI/CD template to search for.  Template must be formatted as `Name.gitlab-ci.yml`.
   */
  name: string;
}

export interface IClusterAgentOnXGitLabProjectArguments {
  /**
   * Name of the cluster agent.
   */
  name: string;
}

export interface IClusterAgentsOnXGitLabProjectArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IComplianceFrameworksOnXGitLabProjectArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IContainerRepositoriesOnXGitLabProjectArguments {
  /**
   * Filter the container repositories by their name.
   */
  name?: string | null;

  /**
   * Sort container repositories by this criteria.
   * @default "created_desc"
   */
  sort?: XGitLabContainerRepositorySort | null;

  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IDastProfileOnXGitLabProjectArguments {
  /**
   * ID of the DAST Profile.
   */
  id: any;
}

export interface IDastProfilesOnXGitLabProjectArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IDastScannerProfilesOnXGitLabProjectArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IDastSiteProfileOnXGitLabProjectArguments {
  /**
   * ID of the site profile.
   */
  id: any;
}

export interface IDastSiteProfilesOnXGitLabProjectArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IDastSiteValidationsOnXGitLabProjectArguments {
  /**
   * Normalized URL of the target to be scanned.
   */
  normalizedTargetUrls?: Array<string> | null;

  /**
   * Status of the site validation.
   */
  status?: XGitLabDastSiteValidationStatusEnum | null;

  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IEnvironmentOnXGitLabProjectArguments {
  /**
   * Name of the environment.
   */
  name?: string | null;

  /**
   * Search query for environment name.
   */
  search?: string | null;

  /**
   * States of environments that should be included in result.
   */
  states?: Array<string> | null;
}

export interface IEnvironmentsOnXGitLabProjectArguments {
  /**
   * Name of the environment.
   */
  name?: string | null;

  /**
   * Search query for environment name.
   */
  search?: string | null;

  /**
   * States of environments that should be included in result.
   */
  states?: Array<string> | null;

  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IIncidentManagementEscalationPoliciesOnXGitLabProjectArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IIncidentManagementEscalationPolicyOnXGitLabProjectArguments {
  /**
   * ID of the escalation policy.
   */
  id: any;
}

export interface IIncidentManagementOncallSchedulesOnXGitLabProjectArguments {
  /**
   * IIDs of on-call schedules.
   */
  iids?: Array<string> | null;

  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IIssueOnXGitLabProjectArguments {
  /**
   * Search query for title or description.
   */
  search?: string | null;

  /**
   * IID of the issue. For example, "1".
   */
  iid?: string | null;

  /**
   * List of IIDs of issues. For example, `["1", "2"]`.
   */
  iids?: Array<string> | null;

  /**
   * Labels applied to this issue.
   */
  labelName?: Array<string | null> | null;

  /**
   * Milestone applied to this issue.
   */
  milestoneTitle?: Array<string | null> | null;

  /**
   * Username of the author of the issue.
   */
  authorUsername?: string | null;

  /**
   * Usernames of users assigned to the issue.
   */
  assigneeUsernames?: Array<string> | null;

  /**
   * ID of a user assigned to the issues. Wildcard values "NONE" and "ANY" are supported.
   */
  assigneeId?: string | null;

  /**
   * Issues created before this date.
   */
  createdBefore?: any | null;

  /**
   * Issues created after this date.
   */
  createdAfter?: any | null;

  /**
   * Issues updated before this date.
   */
  updatedBefore?: any | null;

  /**
   * Issues updated after this date.
   */
  updatedAfter?: any | null;

  /**
   * Issues closed before this date.
   */
  closedBefore?: any | null;

  /**
   * Issues closed after this date.
   */
  closedAfter?: any | null;

  /**
   * Filter issues by the given issue types.
   */
  types?: Array<XGitLabIssueType> | null;

  /**
   * Filter issues by milestone ID wildcard.
   */
  milestoneWildcardId?: XGitLabMilestoneWildcardId | null;

  /**
   * Filter by reaction emoji applied by the current user. Wildcard values "NONE" and "ANY" are supported.
   */
  myReactionEmoji?: string | null;

  /**
   * Filter for confidential issues. If "false", excludes confidential issues. If "true", returns only confidential issues.
   */
  confidential?: boolean | null;

  /**
   * Negated arguments.
   */
  not?: IXGitLabNegatedIssueFilterInput | null;

  /**
   * Current state of this issue.
   */
  state?: XGitLabIssuableState | null;

  /**
   * Sort issues by this criteria.
   * @default "created_desc"
   */
  sort?: XGitLabIssueSort | null;

  /**
   * List of iteration Global IDs applied to the issue.
   */
  iterationId?: Array<string | null> | null;

  /**
   * Filter by iteration ID wildcard.
   */
  iterationWildcardId?: XGitLabIterationWildcardId | null;

  /**
   * ID of an epic associated with the issues, "none" and "any" values are supported.
   */
  epicId?: string | null;

  /**
   * Whether to include subepics when filtering issues by epicId.
   */
  includeSubepics?: boolean | null;

  /**
   * Weight applied to the issue, "none" and "any" values are supported.
   */
  weight?: string | null;

  /**
   * Release tag associated with the issue's milestone.
   */
  releaseTag?: Array<string> | null;

  /**
   * Filter issues by release tag ID wildcard.
   */
  releaseTagWildcardId?: XGitLabReleaseTagWildcardId | null;
}

export interface IIssueStatusCountsOnXGitLabProjectArguments {
  /**
   * Search query for title or description.
   */
  search?: string | null;

  /**
   * IID of the issue. For example, "1".
   */
  iid?: string | null;

  /**
   * List of IIDs of issues. For example, `["1", "2"]`.
   */
  iids?: Array<string> | null;

  /**
   * Labels applied to this issue.
   */
  labelName?: Array<string | null> | null;

  /**
   * Milestone applied to this issue.
   */
  milestoneTitle?: Array<string | null> | null;

  /**
   * Username of the author of the issue.
   */
  authorUsername?: string | null;

  /**
   * Usernames of users assigned to the issue.
   */
  assigneeUsernames?: Array<string> | null;

  /**
   * ID of a user assigned to the issues. Wildcard values "NONE" and "ANY" are supported.
   */
  assigneeId?: string | null;

  /**
   * Issues created before this date.
   */
  createdBefore?: any | null;

  /**
   * Issues created after this date.
   */
  createdAfter?: any | null;

  /**
   * Issues updated before this date.
   */
  updatedBefore?: any | null;

  /**
   * Issues updated after this date.
   */
  updatedAfter?: any | null;

  /**
   * Issues closed before this date.
   */
  closedBefore?: any | null;

  /**
   * Issues closed after this date.
   */
  closedAfter?: any | null;

  /**
   * Filter issues by the given issue types.
   */
  types?: Array<XGitLabIssueType> | null;

  /**
   * Filter issues by milestone ID wildcard.
   */
  milestoneWildcardId?: XGitLabMilestoneWildcardId | null;

  /**
   * Filter by reaction emoji applied by the current user. Wildcard values "NONE" and "ANY" are supported.
   */
  myReactionEmoji?: string | null;

  /**
   * Filter for confidential issues. If "false", excludes confidential issues. If "true", returns only confidential issues.
   */
  confidential?: boolean | null;

  /**
   * Negated arguments.
   */
  not?: IXGitLabNegatedIssueFilterInput | null;

  /**
   * Release tag associated with the issue's milestone.
   */
  releaseTag?: Array<string> | null;

  /**
   * Filter issues by release tag ID wildcard.
   */
  releaseTagWildcardId?: XGitLabReleaseTagWildcardId | null;
}

export interface IIssuesOnXGitLabProjectArguments {
  /**
   * Search query for title or description.
   */
  search?: string | null;

  /**
   * IID of the issue. For example, "1".
   */
  iid?: string | null;

  /**
   * List of IIDs of issues. For example, `["1", "2"]`.
   */
  iids?: Array<string> | null;

  /**
   * Labels applied to this issue.
   */
  labelName?: Array<string | null> | null;

  /**
   * Milestone applied to this issue.
   */
  milestoneTitle?: Array<string | null> | null;

  /**
   * Username of the author of the issue.
   */
  authorUsername?: string | null;

  /**
   * Usernames of users assigned to the issue.
   */
  assigneeUsernames?: Array<string> | null;

  /**
   * ID of a user assigned to the issues. Wildcard values "NONE" and "ANY" are supported.
   */
  assigneeId?: string | null;

  /**
   * Issues created before this date.
   */
  createdBefore?: any | null;

  /**
   * Issues created after this date.
   */
  createdAfter?: any | null;

  /**
   * Issues updated before this date.
   */
  updatedBefore?: any | null;

  /**
   * Issues updated after this date.
   */
  updatedAfter?: any | null;

  /**
   * Issues closed before this date.
   */
  closedBefore?: any | null;

  /**
   * Issues closed after this date.
   */
  closedAfter?: any | null;

  /**
   * Filter issues by the given issue types.
   */
  types?: Array<XGitLabIssueType> | null;

  /**
   * Filter issues by milestone ID wildcard.
   */
  milestoneWildcardId?: XGitLabMilestoneWildcardId | null;

  /**
   * Filter by reaction emoji applied by the current user. Wildcard values "NONE" and "ANY" are supported.
   */
  myReactionEmoji?: string | null;

  /**
   * Filter for confidential issues. If "false", excludes confidential issues. If "true", returns only confidential issues.
   */
  confidential?: boolean | null;

  /**
   * Negated arguments.
   */
  not?: IXGitLabNegatedIssueFilterInput | null;

  /**
   * Current state of this issue.
   */
  state?: XGitLabIssuableState | null;

  /**
   * Sort issues by this criteria.
   * @default "created_desc"
   */
  sort?: XGitLabIssueSort | null;

  /**
   * List of iteration Global IDs applied to the issue.
   */
  iterationId?: Array<string | null> | null;

  /**
   * Filter by iteration ID wildcard.
   */
  iterationWildcardId?: XGitLabIterationWildcardId | null;

  /**
   * ID of an epic associated with the issues, "none" and "any" values are supported.
   */
  epicId?: string | null;

  /**
   * Whether to include subepics when filtering issues by epicId.
   */
  includeSubepics?: boolean | null;

  /**
   * Weight applied to the issue, "none" and "any" values are supported.
   */
  weight?: string | null;

  /**
   * Release tag associated with the issue's milestone.
   */
  releaseTag?: Array<string> | null;

  /**
   * Filter issues by release tag ID wildcard.
   */
  releaseTagWildcardId?: XGitLabReleaseTagWildcardId | null;

  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IIterationCadencesOnXGitLabProjectArguments {
  /**
   * Global ID of the iteration cadence to look up.
   */
  id?: any | null;

  /**
   * Fuzzy search by title.
   */
  title?: string | null;

  /**
   * Duration in weeks of the iterations within this cadence.
   */
  durationInWeeks?: number | null;

  /**
   * Whether the iteration cadence should automatically generate future iterations.
   */
  automatic?: boolean | null;

  /**
   * Whether the iteration cadence is active.
   */
  active?: boolean | null;

  /**
   * Whether to include ancestor groups to search iterations cadences in.
   */
  includeAncestorGroups?: boolean | null;

  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IIterationsOnXGitLabProjectArguments {
  /**
   * List items overlapping the given timeframe.
   */
  timeframe?: IXGitLabTimeframe | null;

  /**
   * Filter iterations by state.
   */
  state?: XGitLabIterationState | null;

  /**
   * Fuzzy search by title.
   */
  title?: string | null;

  /**
   * Global ID of the Iteration to look up.
   */
  id?: string | null;

  /**
   * Internal ID of the Iteration to look up.
   */
  iid?: string | null;

  /**
   * Whether to include ancestor iterations. Defaults to true.
   */
  includeAncestors?: boolean | null;

  /**
   * Global iteration cadence IDs by which to look up the iterations.
   */
  iterationCadenceIds?: Array<any> | null;

  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IJiraImportsOnXGitLabProjectArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IJobsOnXGitLabProjectArguments {
  /**
   * Filter jobs by status.
   */
  statuses?: Array<XGitLabCiJobStatus> | null;

  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface ILabelOnXGitLabProjectArguments {
  /**
   * Title of the label.
   */
  title: string;
}

export interface ILabelsOnXGitLabProjectArguments {
  /**
   * Search term to find labels with.
   */
  searchTerm?: string | null;

  /**
   * Include labels from ancestor groups.
   * @default false
   */
  includeAncestorGroups?: boolean | null;

  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IMergeRequestOnXGitLabProjectArguments {
  /**
   * IID of the merge request, for example `1`.
   */
  iid: string;
}

export interface IMergeRequestsOnXGitLabProjectArguments {
  /**
   * Array of IIDs of merge requests, for example `[1, 2]`.
   */
  iids?: Array<string> | null;

  /**
   * Array of source branch names.
   * All resolved merge requests will have one of these branches as their source.
   */
  sourceBranches?: Array<string> | null;

  /**
   * Array of target branch names.
   * All resolved merge requests will have one of these branches as their target.
   */
  targetBranches?: Array<string> | null;

  /**
   * Merge request state. If provided, all resolved merge requests will have this state.
   */
  state?: XGitLabMergeRequestState | null;

  /**
   * Array of label names. All resolved merge requests will have all of these labels.
   */
  labels?: Array<string> | null;

  /**
   * Merge requests merged after this date.
   */
  mergedAfter?: any | null;

  /**
   * Merge requests merged before this date.
   */
  mergedBefore?: any | null;

  /**
   * Title of the milestone.
   */
  milestoneTitle?: string | null;

  /**
   * Sort merge requests by this criteria.
   * @default "created_desc"
   */
  sort?: XGitLabMergeRequestSort | null;

  /**
   * Merge requests created after this timestamp.
   */
  createdAfter?: any | null;

  /**
   * Merge requests created before this timestamp.
   */
  createdBefore?: any | null;

  /**
   * List of negated arguments.
   * Warning: this argument is experimental and a subject to change in future.
   */
  not?: IXGitLabMergeRequestsResolverNegatedParams | null;

  /**
   * Username of the assignee.
   */
  assigneeUsername?: string | null;

  /**
   * Username of the author.
   */
  authorUsername?: string | null;

  /**
   * Username of the reviewer.
   */
  reviewerUsername?: string | null;

  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IMilestonesOnXGitLabProjectArguments {
  /**
   * List items overlapping the given timeframe.
   */
  timeframe?: IXGitLabTimeframe | null;

  /**
   * Array of global milestone IDs, e.g., `"gid://gitlab/Milestone/1"`.
   */
  ids?: Array<string> | null;

  /**
   * Filter milestones by state.
   */
  state?: XGitLabMilestoneStateEnum | null;

  /**
   * Title of the milestone.
   */
  title?: string | null;

  /**
   * Search string for the title.
   */
  searchTitle?: string | null;

  /**
   * Date the milestone contains.
   */
  containingDate?: any | null;

  /**
   * Sort milestones by this criteria.
   * @default "DUE_DATE_ASC"
   */
  sort?: XGitLabMilestoneSort | null;

  /**
   * Also return milestones in the project's parent group and its ancestors.
   */
  includeAncestors?: boolean | null;

  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface INetworkPoliciesOnXGitLabProjectArguments {
  /**
   * Global ID of the environment to filter policies.
   */
  environmentId?: any | null;

  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IPackagesOnXGitLabProjectArguments {
  /**
   * Sort packages by this criteria.
   * @default "CREATED_DESC"
   */
  sort?: XGitLabPackageSort | null;

  /**
   * Search a package by name.
   * @default null
   */
  packageName?: string | null;

  /**
   * Filter a package by type.
   * @default null
   */
  packageType?: XGitLabPackageTypeEnum | null;

  /**
   * Filter a package by status.
   * @default null
   */
  status?: XGitLabPackageStatus | null;

  /**
   * Include versionless packages.
   * @default false
   */
  includeVersionless?: boolean | null;

  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IPathLocksOnXGitLabProjectArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IPipelineOnXGitLabProjectArguments {
  /**
   * IID of the Pipeline. For example, "1".
   */
  iid?: string | null;

  /**
   * SHA of the Pipeline. For example, "dyd0f15ay83993f5ab66k927w28673882x99100b".
   */
  sha?: string | null;
}

export interface IPipelinesOnXGitLabProjectArguments {
  /**
   * Filter pipelines by their status.
   */
  status?: XGitLabPipelineStatusEnum | null;

  /**
   * Filter pipelines by the ref they are run for.
   */
  ref?: string | null;

  /**
   * Filter pipelines by the sha of the commit they are run for.
   */
  sha?: string | null;

  /**
   * Filter pipelines by their source. Will be ignored if `dast_view_scans` feature flag is disabled.
   */
  source?: string | null;

  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IProjectMembersOnXGitLabProjectArguments {
  /**
   * Search query.
   */
  search?: string | null;

  /**
   * Filter members by the given member relations.
   * @default ["DIRECT","INHERITED"]
   */
  relations?: Array<XGitLabProjectMemberRelation> | null;

  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IReleaseOnXGitLabProjectArguments {
  /**
   * Name of the tag associated to the release.
   */
  tagName: string;
}

export interface IReleasesOnXGitLabProjectArguments {
  /**
   * Sort releases by this criteria.
   * @default "RELEASED_AT_DESC"
   */
  sort?: XGitLabReleaseSort | null;

  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IRequirementOnXGitLabProjectArguments {
  /**
   * List requirements by sort order.
   */
  sort?: XGitLabSort | null;

  /**
   * Filter requirements by state.
   */
  state?: XGitLabRequirementState | null;

  /**
   * Search query for requirement title.
   */
  search?: string | null;

  /**
   * Filter requirements by author username.
   */
  authorUsername?: Array<string> | null;

  /**
   * IID of the requirement, e.g., "1".
   */
  iid?: string | null;

  /**
   * List of IIDs of requirements, e.g., `[1, 2]`.
   */
  iids?: Array<string> | null;

  /**
   * State of latest requirement test report.
   */
  lastTestReportState?: XGitLabRequirementStatusFilter | null;
}

export interface IRequirementsOnXGitLabProjectArguments {
  /**
   * List requirements by sort order.
   */
  sort?: XGitLabSort | null;

  /**
   * Filter requirements by state.
   */
  state?: XGitLabRequirementState | null;

  /**
   * Search query for requirement title.
   */
  search?: string | null;

  /**
   * Filter requirements by author username.
   */
  authorUsername?: Array<string> | null;

  /**
   * IID of the requirement, e.g., "1".
   */
  iid?: string | null;

  /**
   * List of IIDs of requirements, e.g., `[1, 2]`.
   */
  iids?: Array<string> | null;

  /**
   * State of latest requirement test report.
   */
  lastTestReportState?: XGitLabRequirementStatusFilter | null;

  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IScanExecutionPoliciesOnXGitLabProjectArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface ISentryDetailedErrorOnXGitLabProjectArguments {
  /**
   * ID of the Sentry issue.
   */
  id: any;
}

export interface IServicesOnXGitLabProjectArguments {
  /**
   * Indicates if the integration is active.
   */
  active?: boolean | null;

  /**
   * Type of integration.
   */
  type?: XGitLabServiceType | null;

  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface ISnippetsOnXGitLabProjectArguments {
  /**
   * Array of global snippet IDs. For example, `gid://gitlab/ProjectSnippet/1`.
   */
  ids?: Array<any> | null;

  /**
   * Visibility of the snippet.
   */
  visibility?: XGitLabVisibilityScopesEnum | null;

  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface ITerraformStateOnXGitLabProjectArguments {
  /**
   * Name of the Terraform state.
   */
  name: string;
}

export interface ITerraformStatesOnXGitLabProjectArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface ITimelogsOnXGitLabProjectArguments {
  /**
   * List timelogs within a date range where the logged date is equal to or after startDate.
   */
  startDate?: any | null;

  /**
   * List timelogs within a date range where the logged date is equal to or before endDate.
   */
  endDate?: any | null;

  /**
   * List timelogs within a time range where the logged time is equal to or after startTime.
   */
  startTime?: any | null;

  /**
   * List timelogs within a time range where the logged time is equal to or before endTime.
   */
  endTime?: any | null;

  /**
   * List timelogs for a project.
   */
  projectId?: any | null;

  /**
   * List timelogs for a group.
   */
  groupId?: any | null;

  /**
   * List timelogs for a user.
   */
  username?: string | null;

  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IVulnerabilitiesOnXGitLabProjectArguments {
  /**
   * Filter vulnerabilities by project.
   */
  projectId?: Array<string> | null;

  /**
   * Filter vulnerabilities by report type.
   */
  reportType?: Array<XGitLabVulnerabilityReportType> | null;

  /**
   * Filter vulnerabilities by severity.
   */
  severity?: Array<XGitLabVulnerabilitySeverity> | null;

  /**
   * Filter vulnerabilities by state.
   */
  state?: Array<XGitLabVulnerabilityState> | null;

  /**
   * Filter vulnerabilities by VulnerabilityScanner.externalId.
   */
  scanner?: Array<string> | null;

  /**
   * Filter vulnerabilities by scanner ID.
   */
  scannerId?: Array<any> | null;

  /**
   * List vulnerabilities by sort order.
   * @default "severity_desc"
   */
  sort?: XGitLabVulnerabilitySort | null;

  /**
   * Returns only the vulnerabilities which have been resolved on default branch.
   */
  hasResolution?: boolean | null;

  /**
   * Returns only the vulnerabilities which have linked issues.
   */
  hasIssues?: boolean | null;

  /**
   * Filter vulnerabilities by location image. When this filter is present, the
   * response only matches entries for a `reportType` that includes
   * `container_scanning`, `cluster_image_scanning`.
   */
  image?: Array<string> | null;

  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IVulnerabilitiesCountByDayOnXGitLabProjectArguments {
  /**
   * First day for which to fetch vulnerability history.
   */
  startDate: any;

  /**
   * Last day for which to fetch vulnerability history.
   */
  endDate: any;

  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IVulnerabilityScannersOnXGitLabProjectArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IVulnerabilitySeveritiesCountOnXGitLabProjectArguments {
  /**
   * Filter vulnerabilities by project.
   */
  projectId?: Array<string> | null;

  /**
   * Filter vulnerabilities by report type.
   */
  reportType?: Array<XGitLabVulnerabilityReportType> | null;

  /**
   * Filter vulnerabilities by severity.
   */
  severity?: Array<XGitLabVulnerabilitySeverity> | null;

  /**
   * Filter vulnerabilities by state.
   */
  state?: Array<XGitLabVulnerabilityState> | null;

  /**
   * Filter vulnerabilities by scanner.
   */
  scanner?: Array<string> | null;

  /**
   * Filter vulnerabilities by scanner ID.
   */
  scannerId?: Array<any> | null;

  /**
   * Filter vulnerabilities that do or do not have issues.
   */
  hasIssues?: boolean | null;

  /**
   * Filter vulnerabilities that do or do not have a resolution.
   */
  hasResolution?: boolean | null;
}

export interface IXGitLabProjectCiCdSetting {
  __typename: '_xGitLabProjectCiCdSetting';

  /**
   * Indicates CI job tokens generated in this project have restricted access to resources.
   */
  jobTokenScopeEnabled: boolean | null;

  /**
   * Whether to keep the latest builds artifacts.
   */
  keepLatestArtifact: boolean | null;

  /**
   * Whether merge pipelines are enabled.
   */
  mergePipelinesEnabled: boolean | null;

  /**
   * Whether merge trains are enabled.
   */
  mergeTrainsEnabled: boolean | null;

  /**
   * Project the CI/CD settings belong to.
   */
  project: IXGitLabProject | null;
}

/**
 * The connection type for Project.
 */
export interface IXGitLabProjectConnection {
  __typename: '_xGitLabProjectConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitLabProjectEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitLabProject | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitLabPageInfo;
}

/**
 * An edge in a connection.
 */
export interface IXGitLabProjectEdge {
  __typename: '_xGitLabProjectEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitLabProject | null;
}

/**
 * Represents a Project Membership
 */
export interface IXGitLabProjectMember {
  __typename: '_xGitLabProjectMember';

  /**
   * GitLab::Access level.
   */
  accessLevel: IXGitLabAccessLevel | null;

  /**
   * Date and time the membership was created.
   */
  createdAt: any | null;

  /**
   * User that authorized membership.
   */
  createdBy: IXGitLabUserCore | null;

  /**
   * Date and time the membership expires.
   */
  expiresAt: any | null;

  /**
   * ID of the member.
   */
  id: string;

  /**
   * Project that User is a member of.
   */
  project: IXGitLabProject | null;

  /**
   * Date and time the membership was last updated.
   */
  updatedAt: any | null;

  /**
   * User that is associated with the member object.
   */
  user: IXGitLabUserCore | null;

  /**
   * Permissions for the current user on the resource
   */
  userPermissions: IXGitLabProjectPermissions;
}

/**
 * The connection type for ProjectMember.
 */
export interface IXGitLabProjectMemberConnection {
  __typename: '_xGitLabProjectMemberConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitLabProjectMemberEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitLabProjectMember | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitLabPageInfo;
}

/**
 * An edge in a connection.
 */
export interface IXGitLabProjectMemberEdge {
  __typename: '_xGitLabProjectMemberEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitLabProjectMember | null;
}

/**
 * Project member relation
 */
export const enum XGitLabProjectMemberRelation {
  /**
   * Direct members
   */
  DIRECT = 'DIRECT',

  /**
   * Inherited members
   */
  INHERITED = 'INHERITED',

  /**
   * Descendants members
   */
  DESCENDANTS = 'DESCENDANTS',

  /**
   * Invited Groups members
   */
  INVITED_GROUPS = 'INVITED_GROUPS',
}

export interface IXGitLabProjectPermissions {
  __typename: '_xGitLabProjectPermissions';

  /**
   * Indicates the user can perform `admin_operations` on this resource
   */
  adminOperations: boolean;

  /**
   * Indicates the user can perform `admin_path_locks` on this resource
   */
  adminPathLocks: boolean;

  /**
   * Indicates the user can perform `admin_project` on this resource
   */
  adminProject: boolean;

  /**
   * Indicates the user can perform `admin_remote_mirror` on this resource
   */
  adminRemoteMirror: boolean;

  /**
   * Indicates the user can perform `admin_wiki` on this resource
   */
  adminWiki: boolean;

  /**
   * Indicates the user can perform `archive_project` on this resource
   */
  archiveProject: boolean;

  /**
   * Indicates the user can perform `change_namespace` on this resource
   */
  changeNamespace: boolean;

  /**
   * Indicates the user can perform `change_visibility_level` on this resource
   */
  changeVisibilityLevel: boolean;

  /**
   * Indicates the user can perform `create_deployment` on this resource
   */
  createDeployment: boolean;

  /**
   * Indicates the user can perform `create_design` on this resource
   */
  createDesign: boolean;

  /**
   * Indicates the user can perform `create_issue` on this resource
   */
  createIssue: boolean;

  /**
   * Indicates the user can perform `create_label` on this resource
   */
  createLabel: boolean;

  /**
   * Indicates the user can perform `create_merge_request_from` on this resource
   */
  createMergeRequestFrom: boolean;

  /**
   * Indicates the user can perform `create_merge_request_in` on this resource
   */
  createMergeRequestIn: boolean;

  /**
   * Indicates the user can perform `create_pages` on this resource
   */
  createPages: boolean;

  /**
   * Indicates the user can perform `create_pipeline` on this resource
   */
  createPipeline: boolean;

  /**
   * Indicates the user can perform `create_pipeline_schedule` on this resource
   */
  createPipelineSchedule: boolean;

  /**
   * Indicates the user can perform `create_snippet` on this resource
   */
  createSnippet: boolean;

  /**
   * Indicates the user can perform `create_wiki` on this resource
   */
  createWiki: boolean;

  /**
   * Indicates the user can perform `destroy_design` on this resource
   */
  destroyDesign: boolean;

  /**
   * Indicates the user can perform `destroy_pages` on this resource
   */
  destroyPages: boolean;

  /**
   * Indicates the user can perform `destroy_wiki` on this resource
   */
  destroyWiki: boolean;

  /**
   * Indicates the user can perform `download_code` on this resource
   */
  downloadCode: boolean;

  /**
   * Indicates the user can perform `download_wiki_code` on this resource
   */
  downloadWikiCode: boolean;

  /**
   * Indicates the user can perform `fork_project` on this resource
   */
  forkProject: boolean;

  /**
   * Indicates the user can perform `push_code` on this resource
   */
  pushCode: boolean;

  /**
   * Indicates the user can perform `push_to_delete_protected_branch` on this resource
   */
  pushToDeleteProtectedBranch: boolean;

  /**
   * Indicates the user can perform `read_commit_status` on this resource
   */
  readCommitStatus: boolean;

  /**
   * Indicates the user can perform `read_cycle_analytics` on this resource
   */
  readCycleAnalytics: boolean;

  /**
   * Indicates the user can perform `read_design` on this resource
   */
  readDesign: boolean;

  /**
   * Indicates the user can perform `read_merge_request` on this resource
   */
  readMergeRequest: boolean;

  /**
   * Indicates the user can perform `read_pages_content` on this resource
   */
  readPagesContent: boolean;

  /**
   * Indicates the user can perform `read_project` on this resource
   */
  readProject: boolean;

  /**
   * Indicates the user can perform `read_project_member` on this resource
   */
  readProjectMember: boolean;

  /**
   * Indicates the user can perform `read_wiki` on this resource
   */
  readWiki: boolean;

  /**
   * Indicates the user can perform `remove_fork_project` on this resource
   */
  removeForkProject: boolean;

  /**
   * Indicates the user can perform `remove_pages` on this resource
   */
  removePages: boolean;

  /**
   * Indicates the user can perform `remove_project` on this resource
   */
  removeProject: boolean;

  /**
   * Indicates the user can perform `rename_project` on this resource
   */
  renameProject: boolean;

  /**
   * Indicates the user can perform `request_access` on this resource
   */
  requestAccess: boolean;

  /**
   * Indicates the user can perform `update_pages` on this resource
   */
  updatePages: boolean;

  /**
   * Indicates the user can perform `update_wiki` on this resource
   */
  updateWiki: boolean;

  /**
   * Indicates the user can perform `upload_file` on this resource
   */
  uploadFile: boolean;
}

/**
 * Autogenerated input type of ProjectSetComplianceFramework
 */
export interface IXGitLabProjectSetComplianceFrameworkInput {
  /**
   * ID of the project to change the compliance framework of.
   */
  projectId: any;

  /**
   * ID of the compliance framework to assign to the project.
   */
  complianceFrameworkId?: any | null;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of ProjectSetComplianceFramework
 */
export interface IXGitLabProjectSetComplianceFrameworkPayload {
  __typename: '_xGitLabProjectSetComplianceFrameworkPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * Errors encountered during execution of the mutation.
   */
  errors: Array<string>;

  /**
   * Project after mutation.
   */
  project: IXGitLabProject | null;
}

/**
 * Autogenerated input type of ProjectSetLocked
 */
export interface IXGitLabProjectSetLockedInput {
  /**
   * Full path of the project to mutate.
   */
  projectPath: string;

  /**
   * Full path to the file.
   */
  filePath: string;

  /**
   * Whether or not to lock the file path.
   */
  lock: boolean;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of ProjectSetLocked
 */
export interface IXGitLabProjectSetLockedPayload {
  __typename: '_xGitLabProjectSetLockedPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * Errors encountered during execution of the mutation.
   */
  errors: Array<string>;

  /**
   * Project after mutation.
   */
  project: IXGitLabProject | null;
}

export interface IXGitLabProjectStatistics {
  __typename: '_xGitLabProjectStatistics';

  /**
   * Build artifacts size of the project in bytes.
   */
  buildArtifactsSize: number;

  /**
   * Commit count of the project.
   */
  commitCount: number;

  /**
   * Large File Storage (LFS) object size of the project in bytes.
   */
  lfsObjectsSize: number;

  /**
   * Packages size of the project in bytes.
   */
  packagesSize: number;

  /**
   * CI Pipeline artifacts size in bytes.
   */
  pipelineArtifactsSize: number | null;

  /**
   * Repository size of the project in bytes.
   */
  repositorySize: number;

  /**
   * Snippets size of the project in bytes.
   */
  snippetsSize: number | null;

  /**
   * Storage size of the project in bytes.
   */
  storageSize: number;

  /**
   * Uploads size of the project in bytes.
   */
  uploadsSize: number | null;

  /**
   * Wiki size of the project in bytes.
   */
  wikiSize: number | null;
}

/**
 * The alert condition for Prometheus
 */
export interface IXGitLabPrometheusAlert {
  __typename: '_xGitLabPrometheusAlert';

  /**
   * Human-readable text of the alert condition.
   */
  humanizedText: string;

  /**
   * ID of the alert condition.
   */
  id: string;
}

/**
 * Autogenerated input type of PrometheusIntegrationCreate
 */
export interface IXGitLabPrometheusIntegrationCreateInput {
  /**
   * Project to create the integration in.
   */
  projectPath: string;

  /**
   * Whether the integration is receiving alerts.
   */
  active: boolean;

  /**
   * Endpoint at which Prometheus can be queried.
   */
  apiUrl: string;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of PrometheusIntegrationCreate
 */
export interface IXGitLabPrometheusIntegrationCreatePayload {
  __typename: '_xGitLabPrometheusIntegrationCreatePayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * Errors encountered during execution of the mutation.
   */
  errors: Array<string>;

  /**
   * Newly created integration.
   */
  integration: IXGitLabAlertManagementPrometheusIntegration | null;
}

/**
 * Autogenerated input type of PrometheusIntegrationResetToken
 */
export interface IXGitLabPrometheusIntegrationResetTokenInput {
  /**
   * ID of the integration to mutate.
   */
  id: any;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of PrometheusIntegrationResetToken
 */
export interface IXGitLabPrometheusIntegrationResetTokenPayload {
  __typename: '_xGitLabPrometheusIntegrationResetTokenPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * Errors encountered during execution of the mutation.
   */
  errors: Array<string>;

  /**
   * Newly created integration.
   */
  integration: IXGitLabAlertManagementPrometheusIntegration | null;
}

/**
 * Autogenerated input type of PrometheusIntegrationUpdate
 */
export interface IXGitLabPrometheusIntegrationUpdateInput {
  /**
   * ID of the integration to mutate.
   */
  id: any;

  /**
   * Whether the integration is receiving alerts.
   */
  active?: boolean | null;

  /**
   * Endpoint at which Prometheus can be queried.
   */
  apiUrl?: string | null;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of PrometheusIntegrationUpdate
 */
export interface IXGitLabPrometheusIntegrationUpdatePayload {
  __typename: '_xGitLabPrometheusIntegrationUpdatePayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * Errors encountered during execution of the mutation.
   */
  errors: Array<string>;

  /**
   * Newly created integration.
   */
  integration: IXGitLabAlertManagementPrometheusIntegration | null;
}

/**
 * Autogenerated input type of PromoteToEpic
 */
export interface IXGitLabPromoteToEpicInput {
  /**
   * Project the issue to mutate is in.
   */
  projectPath: string;

  /**
   * IID of the issue to mutate.
   */
  iid: string;

  /**
   * Group the promoted epic will belong to.
   */
  groupPath?: string | null;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of PromoteToEpic
 */
export interface IXGitLabPromoteToEpicPayload {
  __typename: '_xGitLabPromoteToEpicPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * Epic after issue promotion.
   */
  epic: IXGitLabEpic | null;

  /**
   * Errors encountered during execution of the mutation.
   */
  errors: Array<string>;

  /**
   * Issue after mutation.
   */
  issue: IXGitLabIssue | null;
}

/**
 * Represents rules that commit pushes must follow.
 */
export interface IXGitLabPushRules {
  __typename: '_xGitLabPushRules';

  /**
   * Indicates whether commits not signed through GPG will be rejected.
   */
  rejectUnsignedCommits: boolean;
}

/**
 * Pypi metadata
 */
export interface IXGitLabPypiMetadata {
  __typename: '_xGitLabPypiMetadata';

  /**
   * ID of the metadatum.
   */
  id: any;

  /**
   * Required Python version of the Pypi package.
   */
  requiredPython: string | null;
}

export interface IXGitLabQuery {
  __typename: '_xGitLabQuery';

  /**
   * Find an issue board list.
   */
  boardList: IXGitLabBoardList | null;

  /**
   * CI related settings that apply to the entire instance.
   */
  ciApplicationSettings: IXGitLabCiApplicationSettings | null;

  /**
   * Linted and processed contents of a CI config.
   * Should not be requested more than once per request.
   */
  ciConfig: IXGitLabCiConfig | null;

  /**
   * Monthly CI minutes usage data for the current user.
   */
  ciMinutesUsage: IXGitLabCiMinutesNamespaceMonthlyUsageConnection | null;

  /**
   * Find a container repository.
   */
  containerRepository: IXGitLabContainerRepositoryDetails | null;

  /**
   * Fields related to the current license.
   */
  currentLicense: IXGitLabCurrentLicense | null;

  /**
   * Get information about current user.
   */
  currentUser: IXGitLabUserCore | null;

  /**
   * Fields related to design management.
   */
  designManagement: IXGitLabDesignManagement;

  /**
   * Get configured DevOps adoption namespaces. **BETA** This endpoint is subject to change without notice.
   */
  devopsAdoptionEnabledNamespaces: IXGitLabDevopsAdoptionEnabledNamespaceConnection | null;

  /**
   * Testing endpoint to validate the API with
   */
  echo: string;

  /**
   * Find a Geo node.
   */
  geoNode: IXGitLabGeoNode | null;

  /**
   * Find a group.
   */
  group: IXGitLabGroup | null;

  /**
   * Fields related to Instance Security Dashboard.
   */
  instanceSecurityDashboard: IXGitLabInstanceSecurityDashboard | null;

  /**
   * Get statistics on the instance. Deprecated in 13.10: This was renamed.
   * @deprecated "This was renamed. Please use `Query.usageTrendsMeasurements`. Deprecated in 13.10."
   */
  instanceStatisticsMeasurements: IXGitLabUsageTrendsMeasurementConnection | null;

  /**
   * Find an issue.
   */
  issue: IXGitLabIssue | null;

  /**
   * Find an iteration.
   */
  iteration: IXGitLabIteration | null;

  /**
   * Fields related to entries in the license history.
   */
  licenseHistoryEntries: IXGitLabLicenseHistoryEntryConnection | null;

  /**
   * Find a merge request.
   */
  mergeRequest: IXGitLabMergeRequest | null;

  /**
   * Metadata about GitLab.
   */
  metadata: IXGitLabMetadata | null;

  /**
   * Find a milestone.
   */
  milestone: IXGitLabMilestone | null;

  /**
   * Find a namespace.
   */
  namespace: IXGitLabNamespace | null;

  /**
   * Find a package.
   */
  package: IXGitLabPackageDetailsType | null;

  /**
   * Find a project.
   */
  project: IXGitLabProject | null;

  /**
   * Find projects visible to the current user.
   */
  projects: IXGitLabProjectConnection | null;

  /**
   * Information about the complexity of the GraphQL query.
   */
  queryComplexity: IXGitLabQueryComplexity | null;

  /**
   * Find a runner.
   */
  runner: IXGitLabCiRunner | null;

  /**
   * Supported runner platforms.
   */
  runnerPlatforms: IXGitLabRunnerPlatformConnection | null;

  /**
   * Runner setup instructions.
   */
  runnerSetup: IXGitLabRunnerSetup | null;

  /**
   * Find runners visible to the current user.
   */
  runners: IXGitLabCiRunnerConnection | null;

  /**
   * Find Snippets visible to the current user.
   */
  snippets: IXGitLabSnippetConnection | null;

  /**
   * Find timelogs visible to the current user.
   */
  timelogs: IXGitLabTimelogConnection | null;

  /**
   * Get statistics on the instance.
   */
  usageTrendsMeasurements: IXGitLabUsageTrendsMeasurementConnection | null;

  /**
   * Find a user.
   */
  user: IXGitLabUserCore | null;

  /**
   * Find users.
   */
  users: IXGitLabUserCoreConnection | null;

  /**
   * Vulnerabilities reported on projects on the current user's instance security dashboard.
   */
  vulnerabilities: IXGitLabVulnerabilityConnection | null;

  /**
   * The historical number of vulnerabilities per day for the projects on the current user's instance security dashboard.
   */
  vulnerabilitiesCountByDay: IXGitLabVulnerabilitiesCountByDayConnection | null;

  /**
   * Find a vulnerability.
   */
  vulnerability: IXGitLabVulnerability | null;
}

export interface IBoardListOnXGitLabQueryArguments {
  /**
   * Global ID of the list.
   */
  id: any;

  /**
   * Filters applied when getting issue metadata in the board list.
   */
  issueFilters?: IXGitLabBoardIssueInput | null;
}

export interface ICiConfigOnXGitLabQueryArguments {
  /**
   * Project of the CI config.
   */
  projectPath: string;

  /**
   * Sha for the pipeline.
   */
  sha?: string | null;

  /**
   * Contents of `.gitlab-ci.yml`.
   */
  content: string;

  /**
   * Run pipeline creation simulation, or only do static check.
   */
  dryRun?: boolean | null;
}

export interface ICiMinutesUsageOnXGitLabQueryArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IContainerRepositoryOnXGitLabQueryArguments {
  /**
   * Global ID of the container repository.
   */
  id: any;
}

export interface IDevopsAdoptionEnabledNamespacesOnXGitLabQueryArguments {
  /**
   * Filter by display namespace.
   */
  displayNamespaceId?: any | null;

  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IEchoOnXGitLabQueryArguments {
  /**
   * Text to echo back.
   */
  text: string;
}

export interface IGeoNodeOnXGitLabQueryArguments {
  /**
   * Name of the Geo node. Defaults to the current Geo node name.
   */
  name?: string | null;
}

export interface IGroupOnXGitLabQueryArguments {
  /**
   * Full path of the project, group, or namespace. For example, `gitlab-org/gitlab-foss`.
   */
  fullPath: string;
}

export interface IInstanceStatisticsMeasurementsOnXGitLabQueryArguments {
  /**
   * Type of measurement or statistics to retrieve.
   */
  identifier: XGitLabMeasurementIdentifier;

  /**
   * Measurement recorded after this date.
   */
  recordedAfter?: any | null;

  /**
   * Measurement recorded before this date.
   */
  recordedBefore?: any | null;

  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IIssueOnXGitLabQueryArguments {
  /**
   * Global ID of the issue.
   */
  id: any;
}

export interface IIterationOnXGitLabQueryArguments {
  /**
   * Find an iteration by its ID.
   */
  id: any;
}

export interface ILicenseHistoryEntriesOnXGitLabQueryArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IMergeRequestOnXGitLabQueryArguments {
  /**
   * Global ID of the merge request.
   */
  id: any;
}

export interface IMilestoneOnXGitLabQueryArguments {
  /**
   * Find a milestone by its ID.
   */
  id: any;
}

export interface INamespaceOnXGitLabQueryArguments {
  /**
   * Full path of the project, group, or namespace. For example, `gitlab-org/gitlab-foss`.
   */
  fullPath: string;
}

export interface IPackageOnXGitLabQueryArguments {
  /**
   * Global ID of the package.
   */
  id: any;
}

export interface IProjectOnXGitLabQueryArguments {
  /**
   * Full path of the project, group, or namespace. For example, `gitlab-org/gitlab-foss`.
   */
  fullPath: string;
}

export interface IProjectsOnXGitLabQueryArguments {
  /**
   * Limit projects that the current user is a member of.
   */
  membership?: boolean | null;

  /**
   * Search query for project name, path, or description.
   */
  search?: string | null;

  /**
   * Filter projects by IDs.
   */
  ids?: Array<string> | null;

  /**
   * Include namespace in project search.
   */
  searchNamespaces?: boolean | null;

  /**
   * Sort order of results.
   */
  sort?: string | null;

  /**
   * Filters projects by topics.
   */
  topics?: Array<string> | null;

  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IRunnerOnXGitLabQueryArguments {
  /**
   * Runner ID.
   */
  id: any;
}

export interface IRunnerPlatformsOnXGitLabQueryArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IRunnerSetupOnXGitLabQueryArguments {
  /**
   * Platform to generate the instructions for.
   */
  platform: string;

  /**
   * Architecture to generate the instructions for.
   */
  architecture: string;
}

export interface IRunnersOnXGitLabQueryArguments {
  /**
   * Filter runners by status.
   */
  status?: XGitLabCiRunnerStatus | null;

  /**
   * Filter runners by type.
   */
  type?: XGitLabCiRunnerType | null;

  /**
   * Filter by tags associated with the runner (comma-separated or array).
   */
  tagList?: Array<string> | null;

  /**
   * Filter by full token or partial text in description field.
   */
  search?: string | null;

  /**
   * Sort order of results.
   */
  sort?: XGitLabCiRunnerSort | null;

  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface ISnippetsOnXGitLabQueryArguments {
  /**
   * Array of global snippet IDs. For example, `gid://gitlab/ProjectSnippet/1`.
   */
  ids?: Array<any> | null;

  /**
   * Visibility of the snippet.
   */
  visibility?: XGitLabVisibilityScopesEnum | null;

  /**
   * ID of an author.
   */
  authorId?: any | null;

  /**
   * ID of a project.
   */
  projectId?: any | null;

  /**
   * Type of snippet.
   */
  type?: XGitLabTypeEnum | null;

  /**
   * Explore personal snippets.
   */
  explore?: boolean | null;

  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface ITimelogsOnXGitLabQueryArguments {
  /**
   * List timelogs within a date range where the logged date is equal to or after startDate.
   */
  startDate?: any | null;

  /**
   * List timelogs within a date range where the logged date is equal to or before endDate.
   */
  endDate?: any | null;

  /**
   * List timelogs within a time range where the logged time is equal to or after startTime.
   */
  startTime?: any | null;

  /**
   * List timelogs within a time range where the logged time is equal to or before endTime.
   */
  endTime?: any | null;

  /**
   * List timelogs for a project.
   */
  projectId?: any | null;

  /**
   * List timelogs for a group.
   */
  groupId?: any | null;

  /**
   * List timelogs for a user.
   */
  username?: string | null;

  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IUsageTrendsMeasurementsOnXGitLabQueryArguments {
  /**
   * Type of measurement or statistics to retrieve.
   */
  identifier: XGitLabMeasurementIdentifier;

  /**
   * Measurement recorded after this date.
   */
  recordedAfter?: any | null;

  /**
   * Measurement recorded before this date.
   */
  recordedBefore?: any | null;

  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IUserOnXGitLabQueryArguments {
  /**
   * ID of the User.
   */
  id?: any | null;

  /**
   * Username of the User.
   */
  username?: string | null;
}

export interface IUsersOnXGitLabQueryArguments {
  /**
   * List of user Global IDs.
   */
  ids?: Array<string> | null;

  /**
   * List of usernames.
   */
  usernames?: Array<string> | null;

  /**
   * Sort users by this criteria.
   * @default "created_desc"
   */
  sort?: XGitLabSort | null;

  /**
   * Query to search users by name, username, or primary email.
   */
  search?: string | null;

  /**
   * Return only admin users.
   * @default false
   */
  admins?: boolean | null;

  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IVulnerabilitiesOnXGitLabQueryArguments {
  /**
   * Filter vulnerabilities by project.
   */
  projectId?: Array<string> | null;

  /**
   * Filter vulnerabilities by report type.
   */
  reportType?: Array<XGitLabVulnerabilityReportType> | null;

  /**
   * Filter vulnerabilities by severity.
   */
  severity?: Array<XGitLabVulnerabilitySeverity> | null;

  /**
   * Filter vulnerabilities by state.
   */
  state?: Array<XGitLabVulnerabilityState> | null;

  /**
   * Filter vulnerabilities by VulnerabilityScanner.externalId.
   */
  scanner?: Array<string> | null;

  /**
   * Filter vulnerabilities by scanner ID.
   */
  scannerId?: Array<any> | null;

  /**
   * List vulnerabilities by sort order.
   * @default "severity_desc"
   */
  sort?: XGitLabVulnerabilitySort | null;

  /**
   * Returns only the vulnerabilities which have been resolved on default branch.
   */
  hasResolution?: boolean | null;

  /**
   * Returns only the vulnerabilities which have linked issues.
   */
  hasIssues?: boolean | null;

  /**
   * Filter vulnerabilities by location image. When this filter is present, the
   * response only matches entries for a `reportType` that includes
   * `container_scanning`, `cluster_image_scanning`.
   */
  image?: Array<string> | null;

  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IVulnerabilitiesCountByDayOnXGitLabQueryArguments {
  /**
   * First day for which to fetch vulnerability history.
   */
  startDate: any;

  /**
   * Last day for which to fetch vulnerability history.
   */
  endDate: any;

  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IVulnerabilityOnXGitLabQueryArguments {
  /**
   * Global ID of the Vulnerability.
   */
  id: any;
}

export interface IXGitLabQueryComplexity {
  __typename: '_xGitLabQueryComplexity';

  /**
   * GraphQL query complexity limit.
   */
  limit: number | null;

  /**
   * GraphQL query complexity score.
   */
  score: number | null;
}

/**
 * Recent failure history of a test case.
 */
export interface IXGitLabRecentFailures {
  __typename: '_xGitLabRecentFailures';

  /**
   * Name of the base branch of the project.
   */
  baseBranch: string | null;

  /**
   * Number of times the test case has failed in the past 14 days.
   */
  count: number | null;
}

/**
 * State of a Geo registry
 */
export const enum XGitLabRegistryState {
  /**
   * Registry waiting to be synced.
   */
  PENDING = 'PENDING',

  /**
   * Registry currently syncing.
   */
  STARTED = 'STARTED',

  /**
   * Registry that is synced.
   */
  SYNCED = 'SYNCED',

  /**
   * Registry that failed to sync.
   */
  FAILED = 'FAILED',
}

/**
 * Represents a release
 */
export interface IXGitLabRelease {
  __typename: '_xGitLabRelease';

  /**
   * Assets of the release.
   */
  assets: IXGitLabReleaseAssets | null;

  /**
   * User that created the release.
   */
  author: IXGitLabUserCore | null;

  /**
   * Commit associated with the release.
   */
  commit: IXGitLabCommit | null;

  /**
   * Timestamp of when the release was created.
   */
  createdAt: any | null;

  /**
   * Description (also known as "release notes") of the release.
   */
  description: string | null;

  /**
   * The GitLab Flavored Markdown rendering of `description`
   */
  descriptionHtml: string | null;

  /**
   * Evidence for the release.
   */
  evidences: IXGitLabReleaseEvidenceConnection | null;

  /**
   * Links of the release.
   */
  links: IXGitLabReleaseLinks | null;

  /**
   * Milestones associated to the release.
   */
  milestones: IXGitLabMilestoneConnection | null;

  /**
   * Name of the release.
   */
  name: string | null;

  /**
   * Timestamp of when the release was released.
   */
  releasedAt: any | null;

  /**
   * Name of the tag associated with the release.
   */
  tagName: string | null;

  /**
   * Relative web path to the tag associated with the release.
   */
  tagPath: string | null;

  /**
   * Indicates the release is an upcoming release.
   */
  upcomingRelease: boolean | null;
}

export interface IEvidencesOnXGitLabReleaseArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IMilestonesOnXGitLabReleaseArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

/**
 * Represents an asset link associated with a release
 */
export interface IXGitLabReleaseAssetLink {
  __typename: '_xGitLabReleaseAssetLink';

  /**
   * Relative path for the direct asset link.
   */
  directAssetPath: string | null;

  /**
   * Direct asset URL of the link.
   */
  directAssetUrl: string | null;

  /**
   * Indicates the link points to an external resource.
   */
  external: boolean | null;

  /**
   * ID of the link.
   */
  id: string;

  /**
   * Type of the link: `other`, `runbook`, `image`, `package`; defaults to `other`.
   */
  linkType: XGitLabReleaseAssetLinkType | null;

  /**
   * Name of the link.
   */
  name: string | null;

  /**
   * URL of the link.
   */
  url: string | null;
}

/**
 * The connection type for ReleaseAssetLink.
 */
export interface IXGitLabReleaseAssetLinkConnection {
  __typename: '_xGitLabReleaseAssetLinkConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitLabReleaseAssetLinkEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitLabReleaseAssetLink | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitLabPageInfo;
}

/**
 * Autogenerated input type of ReleaseAssetLinkCreate
 */
export interface IXGitLabReleaseAssetLinkCreateInput {
  /**
   * Name of the asset link.
   */
  name: string;

  /**
   * URL of the asset link.
   */
  url: string;

  /**
   * Relative path for a direct asset link.
   */
  directAssetPath?: string | null;

  /**
   * Type of the asset link.
   * @default "OTHER"
   */
  linkType?: XGitLabReleaseAssetLinkType | null;

  /**
   * Full path of the project the asset link is associated with.
   */
  projectPath: string;

  /**
   * Name of the associated release's tag.
   */
  tagName: string;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of ReleaseAssetLinkCreate
 */
export interface IXGitLabReleaseAssetLinkCreatePayload {
  __typename: '_xGitLabReleaseAssetLinkCreatePayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * Errors encountered during execution of the mutation.
   */
  errors: Array<string>;

  /**
   * Asset link after mutation.
   */
  link: IXGitLabReleaseAssetLink | null;
}

/**
 * Autogenerated input type of ReleaseAssetLinkDelete
 */
export interface IXGitLabReleaseAssetLinkDeleteInput {
  /**
   * ID of the release asset link to delete.
   */
  id: any;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of ReleaseAssetLinkDelete
 */
export interface IXGitLabReleaseAssetLinkDeletePayload {
  __typename: '_xGitLabReleaseAssetLinkDeletePayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * Errors encountered during execution of the mutation.
   */
  errors: Array<string>;

  /**
   * Deleted release asset link.
   */
  link: IXGitLabReleaseAssetLink | null;
}

/**
 * An edge in a connection.
 */
export interface IXGitLabReleaseAssetLinkEdge {
  __typename: '_xGitLabReleaseAssetLinkEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitLabReleaseAssetLink | null;
}

/**
 * Fields that are available when modifying a release asset link
 */
export interface IXGitLabReleaseAssetLinkInput {
  /**
   * Name of the asset link.
   */
  name: string;

  /**
   * URL of the asset link.
   */
  url: string;

  /**
   * Relative path for a direct asset link.
   */
  directAssetPath?: string | null;

  /**
   * Type of the asset link.
   * @default "OTHER"
   */
  linkType?: XGitLabReleaseAssetLinkType | null;
}

/**
 * Type of the link: `other`, `runbook`, `image`, `package`
 */
export const enum XGitLabReleaseAssetLinkType {
  /**
   * Other link type
   */
  OTHER = 'OTHER',

  /**
   * Runbook link type
   */
  RUNBOOK = 'RUNBOOK',

  /**
   * Package link type
   */
  PACKAGE = 'PACKAGE',

  /**
   * Image link type
   */
  IMAGE = 'IMAGE',
}

/**
 * Autogenerated input type of ReleaseAssetLinkUpdate
 */
export interface IXGitLabReleaseAssetLinkUpdateInput {
  /**
   * ID of the release asset link to update.
   */
  id: any;

  /**
   * Name of the asset link.
   */
  name?: string | null;

  /**
   * URL of the asset link.
   */
  url?: string | null;

  /**
   * Relative path for a direct asset link.
   */
  directAssetPath?: string | null;

  /**
   * Type of the asset link.
   */
  linkType?: XGitLabReleaseAssetLinkType | null;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of ReleaseAssetLinkUpdate
 */
export interface IXGitLabReleaseAssetLinkUpdatePayload {
  __typename: '_xGitLabReleaseAssetLinkUpdatePayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * Errors encountered during execution of the mutation.
   */
  errors: Array<string>;

  /**
   * Asset link after mutation.
   */
  link: IXGitLabReleaseAssetLink | null;
}

/**
 * A container for all assets associated with a release
 */
export interface IXGitLabReleaseAssets {
  __typename: '_xGitLabReleaseAssets';

  /**
   * Number of assets of the release.
   */
  count: number | null;

  /**
   * Asset links of the release.
   */
  links: IXGitLabReleaseAssetLinkConnection | null;

  /**
   * Sources of the release.
   */
  sources: IXGitLabReleaseSourceConnection | null;
}

export interface ILinksOnXGitLabReleaseAssetsArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface ISourcesOnXGitLabReleaseAssetsArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

/**
 * Fields that are available when modifying release assets
 */
export interface IXGitLabReleaseAssetsInput {
  /**
   * List of asset links to associate to the release.
   */
  links?: Array<IXGitLabReleaseAssetLinkInput> | null;
}

/**
 * The connection type for Release.
 */
export interface IXGitLabReleaseConnection {
  __typename: '_xGitLabReleaseConnection';

  /**
   * Total count of collection.
   */
  count: number;

  /**
   * A list of edges.
   */
  edges: Array<IXGitLabReleaseEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitLabRelease | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitLabPageInfo;
}

/**
 * Autogenerated input type of ReleaseCreate
 */
export interface IXGitLabReleaseCreateInput {
  /**
   * Full path of the project the release is associated with.
   */
  projectPath: string;

  /**
   * Name of the tag to associate with the release.
   */
  tagName: string;

  /**
   * Commit SHA or branch name to use if creating a new tag.
   */
  ref?: string | null;

  /**
   * Name of the release.
   */
  name?: string | null;

  /**
   * Description (also known as "release notes") of the release.
   */
  description?: string | null;

  /**
   * Date and time for the release. Defaults to the current date and time.
   */
  releasedAt?: any | null;

  /**
   * Title of each milestone the release is associated with. GitLab Premium customers can specify group milestones.
   */
  milestones?: Array<string> | null;

  /**
   * Assets associated to the release.
   */
  assets?: IXGitLabReleaseAssetsInput | null;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of ReleaseCreate
 */
export interface IXGitLabReleaseCreatePayload {
  __typename: '_xGitLabReleaseCreatePayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * Errors encountered during execution of the mutation.
   */
  errors: Array<string>;

  /**
   * Release after mutation.
   */
  release: IXGitLabRelease | null;
}

/**
 * Autogenerated input type of ReleaseDelete
 */
export interface IXGitLabReleaseDeleteInput {
  /**
   * Full path of the project the release is associated with.
   */
  projectPath: string;

  /**
   * Name of the tag associated with the release to delete.
   */
  tagName: string;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of ReleaseDelete
 */
export interface IXGitLabReleaseDeletePayload {
  __typename: '_xGitLabReleaseDeletePayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * Errors encountered during execution of the mutation.
   */
  errors: Array<string>;

  /**
   * Deleted release.
   */
  release: IXGitLabRelease | null;
}

/**
 * An edge in a connection.
 */
export interface IXGitLabReleaseEdge {
  __typename: '_xGitLabReleaseEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitLabRelease | null;
}

/**
 * Evidence for a release
 */
export interface IXGitLabReleaseEvidence {
  __typename: '_xGitLabReleaseEvidence';

  /**
   * Timestamp when the evidence was collected.
   */
  collectedAt: any | null;

  /**
   * URL from where the evidence can be downloaded.
   */
  filepath: string | null;

  /**
   * ID of the evidence.
   */
  id: string;

  /**
   * SHA1 ID of the evidence hash.
   */
  sha: string | null;
}

/**
 * The connection type for ReleaseEvidence.
 */
export interface IXGitLabReleaseEvidenceConnection {
  __typename: '_xGitLabReleaseEvidenceConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitLabReleaseEvidenceEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitLabReleaseEvidence | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitLabPageInfo;
}

/**
 * An edge in a connection.
 */
export interface IXGitLabReleaseEvidenceEdge {
  __typename: '_xGitLabReleaseEvidenceEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitLabReleaseEvidence | null;
}

export interface IXGitLabReleaseLinks {
  __typename: '_xGitLabReleaseLinks';

  /**
   * HTTP URL of the issues page, filtered by this release and `state=closed`.
   */
  closedIssuesUrl: string | null;

  /**
   * HTTP URL of the merge request page , filtered by this release and `state=closed`.
   */
  closedMergeRequestsUrl: string | null;

  /**
   * HTTP URL of the release's edit page.
   */
  editUrl: string | null;

  /**
   * HTTP URL of the merge request page , filtered by this release and `state=merged`.
   */
  mergedMergeRequestsUrl: string | null;

  /**
   * HTTP URL of the issues page, filtered by this release and `state=open`.
   */
  openedIssuesUrl: string | null;

  /**
   * HTTP URL of the merge request page, filtered by this release and `state=open`.
   */
  openedMergeRequestsUrl: string | null;

  /**
   * HTTP URL of the release.
   */
  selfUrl: string | null;
}

/**
 * Values for sorting releases
 */
export const enum XGitLabReleaseSort {
  /**
   * Created at descending order.
   */
  CREATED_DESC = 'CREATED_DESC',

  /**
   * Created at ascending order.
   */
  CREATED_ASC = 'CREATED_ASC',

  /**
   * Released at by descending order.
   */
  RELEASED_AT_DESC = 'RELEASED_AT_DESC',

  /**
   * Released at by ascending order.
   */
  RELEASED_AT_ASC = 'RELEASED_AT_ASC',
}

/**
 * Represents the source code attached to a release in a particular format
 */
export interface IXGitLabReleaseSource {
  __typename: '_xGitLabReleaseSource';

  /**
   * Format of the source.
   */
  format: string | null;

  /**
   * Download URL of the source.
   */
  url: string | null;
}

/**
 * The connection type for ReleaseSource.
 */
export interface IXGitLabReleaseSourceConnection {
  __typename: '_xGitLabReleaseSourceConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitLabReleaseSourceEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitLabReleaseSource | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitLabPageInfo;
}

/**
 * An edge in a connection.
 */
export interface IXGitLabReleaseSourceEdge {
  __typename: '_xGitLabReleaseSourceEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitLabReleaseSource | null;
}

/**
 * Release tag ID wildcard values
 */
export const enum XGitLabReleaseTagWildcardId {
  /**
   * No release tag is assigned.
   */
  NONE = 'NONE',

  /**
   * Release tag is assigned.
   */
  ANY = 'ANY',
}

/**
 * Autogenerated input type of ReleaseUpdate
 */
export interface IXGitLabReleaseUpdateInput {
  /**
   * Full path of the project the release is associated with.
   */
  projectPath: string;

  /**
   * Name of the tag associated with the release.
   */
  tagName: string;

  /**
   * Name of the release.
   */
  name?: string | null;

  /**
   * Description (release notes) of the release.
   */
  description?: string | null;

  /**
   * Release date.
   */
  releasedAt?: any | null;

  /**
   * Title of each milestone the release is associated with. GitLab Premium customers can specify group milestones.
   */
  milestones?: Array<string> | null;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of ReleaseUpdate
 */
export interface IXGitLabReleaseUpdatePayload {
  __typename: '_xGitLabReleaseUpdatePayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * Errors encountered during execution of the mutation.
   */
  errors: Array<string>;

  /**
   * Release after mutation.
   */
  release: IXGitLabRelease | null;
}

/**
 * Autogenerated input type of RemoveProjectFromSecurityDashboard
 */
export interface IXGitLabRemoveProjectFromSecurityDashboardInput {
  /**
   * ID of the project to remove from the Instance Security Dashboard.
   */
  id: any;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of RemoveProjectFromSecurityDashboard
 */
export interface IXGitLabRemoveProjectFromSecurityDashboardPayload {
  __typename: '_xGitLabRemoveProjectFromSecurityDashboardPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * Errors encountered during execution of the mutation.
   */
  errors: Array<string>;
}

/**
 * Autogenerated input type of RepositionImageDiffNote
 */
export interface IXGitLabRepositionImageDiffNoteInput {
  /**
   * Global ID of the DiffNote to update.
   */
  id: any;

  /**
   * Position of this note on a diff.
   */
  position: IXGitLabUpdateDiffImagePositionInput;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of RepositionImageDiffNote
 */
export interface IXGitLabRepositionImageDiffNotePayload {
  __typename: '_xGitLabRepositionImageDiffNotePayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * Errors encountered during execution of the mutation.
   */
  errors: Array<string>;

  /**
   * Note after mutation.
   */
  note: IXGitLabNote | null;
}

export interface IXGitLabRepository {
  __typename: '_xGitLabRepository';

  /**
   * Blobs contained within the repository
   */
  blobs: IXGitLabRepositoryBlobConnection | null;

  /**
   * Names of branches available in this repository that match the search pattern.
   */
  branchNames: Array<string> | null;

  /**
   * Shows a disk path of the repository.
   */
  diskPath: string | null;

  /**
   * Indicates repository has no visible content.
   */
  empty: boolean;

  /**
   * Indicates a corresponding Git repository exists on disk.
   */
  exists: boolean;

  /**
   * Paginated tree of the repository. Available only when feature flag
   * `paginated_tree_graphql_query` is enabled. This flag is enabled by default.
   */
  paginatedTree: IXGitLabTreeConnection | null;

  /**
   * Default branch of the repository.
   */
  rootRef: string | null;

  /**
   * Tree of the repository.
   */
  tree: IXGitLabTree | null;
}

export interface IBlobsOnXGitLabRepositoryArguments {
  /**
   * Array of desired blob paths.
   */
  paths: Array<string>;

  /**
   * Commit ref to get the blobs from. Default value is HEAD.
   * @default null
   */
  ref?: string | null;

  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IBranchNamesOnXGitLabRepositoryArguments {
  /**
   * Pattern to search for branch names by.
   */
  searchPattern: string;

  /**
   * Number of branch names to skip.
   */
  offset: number;

  /**
   * Number of branch names to return.
   */
  limit: number;
}

export interface IPaginatedTreeOnXGitLabRepositoryArguments {
  /**
   * Path to get the tree for. Default value is the root of the repository.
   * @default ""
   */
  path?: string | null;

  /**
   * Commit ref to get the tree for. Default value is HEAD.
   * @default "head"
   */
  ref?: string | null;

  /**
   * Used to get a recursive tree. Default is false.
   * @default false
   */
  recursive?: boolean | null;

  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface ITreeOnXGitLabRepositoryArguments {
  /**
   * Path to get the tree for. Default value is the root of the repository.
   * @default ""
   */
  path?: string | null;

  /**
   * Commit ref to get the tree for. Default value is HEAD.
   * @default "head"
   */
  ref?: string | null;

  /**
   * Used to get a recursive tree. Default is false.
   * @default false
   */
  recursive?: boolean | null;
}

export interface IXGitLabRepositoryBlob {
  __typename: '_xGitLabRepositoryBlob';

  /**
   * Whether the current user can modify the blob.
   */
  canModifyBlob: boolean | null;

  /**
   * Web path to edit the blob in the old-style editor.
   */
  editBlobPath: string | null;

  /**
   * Web path to download the raw blob via external storage, if enabled.
   */
  externalStorageUrl: string | null;

  /**
   * Expected format of the blob based on the extension.
   */
  fileType: string | null;

  /**
   * Web path to edit this blob using a forked project.
   */
  forkAndEditPath: string | null;

  /**
   * ID of the blob.
   */
  id: string;

  /**
   * Web path to edit this blob in the Web IDE.
   */
  ideEditPath: string | null;

  /**
   * Web path to edit this blob in the Web IDE using a forked project.
   */
  ideForkAndEditPath: string | null;

  /**
   * LFS OID of the blob.
   */
  lfsOid: string | null;

  /**
   * Blob mode.
   */
  mode: string | null;

  /**
   * Blob name.
   */
  name: string | null;

  /**
   * OID of the blob.
   */
  oid: string;

  /**
   * Path of the blob.
   */
  path: string;

  /**
   * Blob plain highlighted data.
   */
  plainData: string | null;

  /**
   * Raw content of the blob.
   */
  rawBlob: string | null;

  /**
   * Web path to download the raw blob.
   */
  rawPath: string | null;

  /**
   * Size (in bytes) of the blob, or the blob target if stored externally.
   */
  rawSize: number | null;

  /**
   * Raw content of the blob, if the blob is text data.
   */
  rawTextBlob: string | null;

  /**
   * Web path to replace the blob content.
   */
  replacePath: string | null;

  /**
   * Blob content rich viewer.
   */
  richViewer: IXGitLabBlobViewer | null;

  /**
   * Blob content simple viewer.
   */
  simpleViewer: IXGitLabBlobViewer;

  /**
   * Size (in bytes) of the blob.
   */
  size: number | null;

  /**
   * Whether the blob's content is stored externally (for instance, in LFS).
   */
  storedExternally: boolean | null;

  /**
   * Web path of the blob.
   */
  webPath: string | null;
}

/**
 * The connection type for RepositoryBlob.
 */
export interface IXGitLabRepositoryBlobConnection {
  __typename: '_xGitLabRepositoryBlobConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitLabRepositoryBlobEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitLabRepositoryBlob | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitLabPageInfo;
}

/**
 * An edge in a connection.
 */
export interface IXGitLabRepositoryBlobEdge {
  __typename: '_xGitLabRepositoryBlobEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitLabRepositoryBlob | null;
}

/**
 * Represents a requirement
 */
export interface IXGitLabRequirement {
  __typename: '_xGitLabRequirement';

  /**
   * Author of the requirement.
   */
  author: IXGitLabUserCore;

  /**
   * Timestamp of when the requirement was created.
   */
  createdAt: any;

  /**
   * Description of the requirement.
   */
  description: string | null;

  /**
   * The GitLab Flavored Markdown rendering of `description`
   */
  descriptionHtml: string | null;

  /**
   * ID of the requirement.
   */
  id: string;

  /**
   * Internal ID of the requirement.
   */
  iid: string;

  /**
   * Indicates if latest test report was created by user.
   */
  lastTestReportManuallyCreated: boolean | null;

  /**
   * Latest requirement test report state.
   */
  lastTestReportState: XGitLabTestReportState | null;

  /**
   * Project to which the requirement belongs.
   */
  project: IXGitLabProject;

  /**
   * State of the requirement.
   */
  state: XGitLabRequirementState;

  /**
   * Test reports of the requirement.
   */
  testReports: IXGitLabTestReportConnection | null;

  /**
   * Title of the requirement.
   */
  title: string | null;

  /**
   * The GitLab Flavored Markdown rendering of `title`
   */
  titleHtml: string | null;

  /**
   * Timestamp of when the requirement was last updated.
   */
  updatedAt: any;

  /**
   * Permissions for the current user on the resource
   */
  userPermissions: IXGitLabRequirementPermissions;
}

export interface ITestReportsOnXGitLabRequirementArguments {
  /**
   * List test reports by sort order.
   */
  sort?: XGitLabSort | null;

  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

/**
 * The connection type for Requirement.
 */
export interface IXGitLabRequirementConnection {
  __typename: '_xGitLabRequirementConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitLabRequirementEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitLabRequirement | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitLabPageInfo;
}

/**
 * An edge in a connection.
 */
export interface IXGitLabRequirementEdge {
  __typename: '_xGitLabRequirementEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitLabRequirement | null;
}

/**
 * Check permissions for the current user on a requirement
 */
export interface IXGitLabRequirementPermissions {
  __typename: '_xGitLabRequirementPermissions';

  /**
   * Indicates the user can perform `admin_requirement` on this resource
   */
  adminRequirement: boolean;

  /**
   * Indicates the user can perform `create_requirement` on this resource
   */
  createRequirement: boolean;

  /**
   * Indicates the user can perform `destroy_requirement` on this resource
   */
  destroyRequirement: boolean;

  /**
   * Indicates the user can perform `read_requirement` on this resource
   */
  readRequirement: boolean;

  /**
   * Indicates the user can perform `update_requirement` on this resource
   */
  updateRequirement: boolean;
}

/**
 * State of a requirement
 */
export const enum XGitLabRequirementState {
  /**
   * Open requirement.
   */
  OPENED = 'OPENED',

  /**
   * Archived requirement.
   */
  ARCHIVED = 'ARCHIVED',
}

/**
 * Counts of requirements by their state
 */
export interface IXGitLabRequirementStatesCount {
  __typename: '_xGitLabRequirementStatesCount';

  /**
   * Number of archived requirements.
   */
  archived: number | null;

  /**
   * Number of opened requirements.
   */
  opened: number | null;
}

/**
 * Status of a requirement based on last test report
 */
export const enum XGitLabRequirementStatusFilter {
  /**
   * Passed test report.
   */
  PASSED = 'PASSED',

  /**
   * Failed test report.
   */
  FAILED = 'FAILED',

  /**
   * Requirements without any test report.
   */
  MISSING = 'MISSING',
}

export type _xGitLabResolvableInterface = IXGitLabDiscussion | IXGitLabNote;

export interface IXGitLabResolvableInterface {
  __typename: '_xGitLabResolvableInterface';

  /**
   * Indicates if the object can be resolved.
   */
  resolvable: boolean;

  /**
   * Indicates if the object is resolved.
   */
  resolved: boolean;

  /**
   * Timestamp of when the object was resolved.
   */
  resolvedAt: any | null;

  /**
   * User who resolved the object.
   */
  resolvedBy: IXGitLabUserCore | null;
}

export interface IXGitLabRootStorageStatistics {
  __typename: '_xGitLabRootStorageStatistics';

  /**
   * CI artifacts size in bytes.
   */
  buildArtifactsSize: number;

  /**
   * LFS objects size in bytes.
   */
  lfsObjectsSize: number;

  /**
   * Packages size in bytes.
   */
  packagesSize: number;

  /**
   * CI pipeline artifacts size in bytes.
   */
  pipelineArtifactsSize: number;

  /**
   * Git repository size in bytes.
   */
  repositorySize: number;

  /**
   * Snippets size in bytes.
   */
  snippetsSize: number;

  /**
   * Total storage in bytes.
   */
  storageSize: number;

  /**
   * Uploads size in bytes.
   */
  uploadsSize: number;

  /**
   * Wiki size in bytes.
   */
  wikiSize: number;
}

export interface IXGitLabRunnerArchitecture {
  __typename: '_xGitLabRunnerArchitecture';

  /**
   * Download location for the runner for the platform architecture.
   */
  downloadLocation: string;

  /**
   * Name of the runner platform architecture.
   */
  name: string;
}

/**
 * The connection type for RunnerArchitecture.
 */
export interface IXGitLabRunnerArchitectureConnection {
  __typename: '_xGitLabRunnerArchitectureConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitLabRunnerArchitectureEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitLabRunnerArchitecture | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitLabPageInfo;
}

/**
 * An edge in a connection.
 */
export interface IXGitLabRunnerArchitectureEdge {
  __typename: '_xGitLabRunnerArchitectureEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitLabRunnerArchitecture | null;
}

/**
 * Autogenerated input type of RunnerDelete
 */
export interface IXGitLabRunnerDeleteInput {
  /**
   * ID of the runner to delete.
   */
  id: any;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of RunnerDelete
 */
export interface IXGitLabRunnerDeletePayload {
  __typename: '_xGitLabRunnerDeletePayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * Errors encountered during execution of the mutation.
   */
  errors: Array<string>;
}

/**
 * Values for filtering runners in namespaces.
 */
export const enum XGitLabRunnerMembershipFilter {
  /**
   * Include runners that have a direct relationship.
   */
  DIRECT = 'DIRECT',

  /**
   * Include runners that have either a direct relationship or a relationship with
   * descendants. These can be project runners or group runners (in the case where
   * group is queried).
   */
  DESCENDANTS = 'DESCENDANTS',
}

export interface IXGitLabRunnerPermissions {
  __typename: '_xGitLabRunnerPermissions';

  /**
   * Indicates the user can perform `delete_runner` on this resource
   */
  deleteRunner: boolean;

  /**
   * Indicates the user can perform `read_runner` on this resource
   */
  readRunner: boolean;

  /**
   * Indicates the user can perform `update_runner` on this resource
   */
  updateRunner: boolean;
}

export interface IXGitLabRunnerPlatform {
  __typename: '_xGitLabRunnerPlatform';

  /**
   * Runner architectures supported for the platform.
   */
  architectures: IXGitLabRunnerArchitectureConnection | null;

  /**
   * Human readable name of the runner platform.
   */
  humanReadableName: string;

  /**
   * Name slug of the runner platform.
   */
  name: string;
}

export interface IArchitecturesOnXGitLabRunnerPlatformArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

/**
 * The connection type for RunnerPlatform.
 */
export interface IXGitLabRunnerPlatformConnection {
  __typename: '_xGitLabRunnerPlatformConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitLabRunnerPlatformEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitLabRunnerPlatform | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitLabPageInfo;
}

/**
 * An edge in a connection.
 */
export interface IXGitLabRunnerPlatformEdge {
  __typename: '_xGitLabRunnerPlatformEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitLabRunnerPlatform | null;
}

export interface IXGitLabRunnerSetup {
  __typename: '_xGitLabRunnerSetup';

  /**
   * Instructions for installing the runner on the specified architecture.
   */
  installInstructions: string;

  /**
   * Instructions for registering the runner. The actual registration tokens are
   * not included in the commands. Instead, a placeholder `$REGISTRATION_TOKEN` is shown.
   */
  registerInstructions: string | null;
}

/**
 * Autogenerated input type of RunnersRegistrationTokenReset
 */
export interface IXGitLabRunnersRegistrationTokenResetInput {
  /**
   * Scope of the object to reset the token for.
   */
  type: XGitLabCiRunnerType;

  /**
   * ID of the project or group to reset the token for. Omit if resetting instance runner token.
   */
  id?: string | null;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of RunnersRegistrationTokenReset
 */
export interface IXGitLabRunnersRegistrationTokenResetPayload {
  __typename: '_xGitLabRunnersRegistrationTokenResetPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * Errors encountered during execution of the mutation.
   */
  errors: Array<string>;

  /**
   * Runner token after mutation.
   */
  token: string | null;
}

/**
 * Autogenerated input type of RunnerUpdate
 */
export interface IXGitLabRunnerUpdateInput {
  /**
   * ID of the runner to update.
   */
  id: any;

  /**
   * Description of the runner.
   */
  description?: string | null;

  /**
   * Maximum timeout (in seconds) for jobs processed by the runner.
   */
  maximumTimeout?: number | null;

  /**
   * Access level of the runner.
   */
  accessLevel?: XGitLabCiRunnerAccessLevel | null;

  /**
   * Indicates the runner is allowed to receive jobs.
   */
  active?: boolean | null;

  /**
   * Indicates the runner is locked.
   */
  locked?: boolean | null;

  /**
   * Indicates the runner is able to run untagged jobs.
   */
  runUntagged?: boolean | null;

  /**
   * Tags associated with the runner.
   */
  tagList?: Array<string> | null;

  /**
   * Public projects' "minutes cost factor" associated with the runner (GitLab.com only).
   */
  publicProjectsMinutesCostFactor?: number | null;

  /**
   * Private projects' "minutes cost factor" associated with the runner (GitLab.com only).
   */
  privateProjectsMinutesCostFactor?: number | null;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of RunnerUpdate
 */
export interface IXGitLabRunnerUpdatePayload {
  __typename: '_xGitLabRunnerUpdatePayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * Errors encountered during execution of the mutation.
   */
  errors: Array<string>;

  /**
   * Runner after mutation.
   */
  runner: IXGitLabCiRunner | null;
}

/**
 * Represents a CI configuration of SAST
 */
export interface IXGitLabSastCiConfiguration {
  __typename: '_xGitLabSastCiConfiguration';

  /**
   * List of analyzers entities attached to SAST configuration.
   */
  analyzers: IXGitLabSastCiConfigurationAnalyzersEntityConnection | null;

  /**
   * List of global entities related to SAST configuration.
   */
  global: IXGitLabSastCiConfigurationEntityConnection | null;

  /**
   * List of pipeline entities related to SAST configuration.
   */
  pipeline: IXGitLabSastCiConfigurationEntityConnection | null;
}

export interface IAnalyzersOnXGitLabSastCiConfigurationArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IGlobalOnXGitLabSastCiConfigurationArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IPipelineOnXGitLabSastCiConfigurationArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

/**
 * Represents an analyzer entity in SAST CI configuration
 */
export interface IXGitLabSastCiConfigurationAnalyzersEntity {
  __typename: '_xGitLabSastCiConfigurationAnalyzersEntity';

  /**
   * Analyzer description that is displayed on the form.
   */
  description: string | null;

  /**
   * Indicates whether an analyzer is enabled.
   */
  enabled: boolean | null;

  /**
   * Analyzer label used in the config UI.
   */
  label: string | null;

  /**
   * Name of the analyzer.
   */
  name: string | null;

  /**
   * List of supported variables.
   */
  variables: IXGitLabSastCiConfigurationEntityConnection | null;
}

export interface IVariablesOnXGitLabSastCiConfigurationAnalyzersEntityArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

/**
 * The connection type for SastCiConfigurationAnalyzersEntity.
 */
export interface IXGitLabSastCiConfigurationAnalyzersEntityConnection {
  __typename: '_xGitLabSastCiConfigurationAnalyzersEntityConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitLabSastCiConfigurationAnalyzersEntityEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitLabSastCiConfigurationAnalyzersEntity | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitLabPageInfo;
}

/**
 * An edge in a connection.
 */
export interface IXGitLabSastCiConfigurationAnalyzersEntityEdge {
  __typename: '_xGitLabSastCiConfigurationAnalyzersEntityEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitLabSastCiConfigurationAnalyzersEntity | null;
}

/**
 * Represents the analyzers entity in SAST CI configuration
 */
export interface IXGitLabSastCiConfigurationAnalyzersEntityInput {
  /**
   * Name of analyzer.
   */
  name: string;

  /**
   * State of the analyzer.
   */
  enabled: boolean;

  /**
   * List of variables for the analyzer.
   */
  variables?: Array<IXGitLabSastCiConfigurationEntityInput> | null;
}

/**
 * Represents an entity in SAST CI configuration
 */
export interface IXGitLabSastCiConfigurationEntity {
  __typename: '_xGitLabSastCiConfigurationEntity';

  /**
   * Default value that is used if value is empty.
   */
  defaultValue: string | null;

  /**
   * Entity description that is displayed on the form.
   */
  description: string | null;

  /**
   * CI keyword of entity.
   */
  field: string | null;

  /**
   * Label for entity used in the form.
   */
  label: string | null;

  /**
   * Different possible values of the field.
   */
  options: IXGitLabSastCiConfigurationOptionsEntityConnection | null;

  /**
   * Size of the UI component.
   */
  size: XGitLabSastUiComponentSize | null;

  /**
   * Type of the field value.
   */
  type: string | null;

  /**
   * Current value of the entity.
   */
  value: string | null;
}

export interface IOptionsOnXGitLabSastCiConfigurationEntityArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

/**
 * The connection type for SastCiConfigurationEntity.
 */
export interface IXGitLabSastCiConfigurationEntityConnection {
  __typename: '_xGitLabSastCiConfigurationEntityConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitLabSastCiConfigurationEntityEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitLabSastCiConfigurationEntity | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitLabPageInfo;
}

/**
 * An edge in a connection.
 */
export interface IXGitLabSastCiConfigurationEntityEdge {
  __typename: '_xGitLabSastCiConfigurationEntityEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitLabSastCiConfigurationEntity | null;
}

/**
 * Represents an entity in SAST CI configuration
 */
export interface IXGitLabSastCiConfigurationEntityInput {
  /**
   * CI keyword of entity.
   */
  field: string;

  /**
   * Default value that is used if value is empty.
   */
  defaultValue: string;

  /**
   * Current value of the entity.
   */
  value: string;
}

/**
 * Represents a CI configuration of SAST
 */
export interface IXGitLabSastCiConfigurationInput {
  /**
   * List of global entities related to SAST configuration.
   */
  global?: Array<IXGitLabSastCiConfigurationEntityInput> | null;

  /**
   * List of pipeline entities related to SAST configuration.
   */
  pipeline?: Array<IXGitLabSastCiConfigurationEntityInput> | null;

  /**
   * List of analyzers and related variables for the SAST configuration.
   */
  analyzers?: Array<IXGitLabSastCiConfigurationAnalyzersEntityInput> | null;
}

/**
 * Represents an entity for options in SAST CI configuration
 */
export interface IXGitLabSastCiConfigurationOptionsEntity {
  __typename: '_xGitLabSastCiConfigurationOptionsEntity';

  /**
   * Label of option entity.
   */
  label: string | null;

  /**
   * Value of option entity.
   */
  value: string | null;
}

/**
 * The connection type for SastCiConfigurationOptionsEntity.
 */
export interface IXGitLabSastCiConfigurationOptionsEntityConnection {
  __typename: '_xGitLabSastCiConfigurationOptionsEntityConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitLabSastCiConfigurationOptionsEntityEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitLabSastCiConfigurationOptionsEntity | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitLabPageInfo;
}

/**
 * An edge in a connection.
 */
export interface IXGitLabSastCiConfigurationOptionsEntityEdge {
  __typename: '_xGitLabSastCiConfigurationOptionsEntityEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitLabSastCiConfigurationOptionsEntity | null;
}

/**
 * Size of UI component in SAST configuration page
 */
export const enum XGitLabSastUiComponentSize {
  /**
   * Size of UI component in SAST configuration page is small.
   */
  SMALL = 'SMALL',

  /**
   * Size of UI component in SAST configuration page is medium.
   */
  MEDIUM = 'MEDIUM',

  /**
   * Size of UI component in SAST configuration page is large.
   */
  LARGE = 'LARGE',
}

/**
 * Represents the security scan information
 */
export interface IXGitLabScan {
  __typename: '_xGitLabScan';

  /**
   * List of errors.
   */
  errors: Array<string>;

  /**
   * Name of the scan.
   */
  name: string;
}

/**
 * The connection type for Scan.
 */
export interface IXGitLabScanConnection {
  __typename: '_xGitLabScanConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitLabScanEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitLabScan | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitLabPageInfo;
}

/**
 * An edge in a connection.
 */
export interface IXGitLabScanEdge {
  __typename: '_xGitLabScanEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitLabScan | null;
}

/**
 * Represents the scan execution policy
 */
export interface IXGitLabScanExecutionPolicy {
  __typename: '_xGitLabScanExecutionPolicy';

  /**
   * Description of the policy.
   */
  description: string;

  /**
   * Indicates whether this policy is enabled.
   */
  enabled: boolean;

  /**
   * Name of the policy.
   */
  name: string;

  /**
   * Timestamp of when the policy YAML was last updated.
   */
  updatedAt: any;

  /**
   * YAML definition of the policy.
   */
  yaml: string;
}

/**
 * Autogenerated input type of ScanExecutionPolicyCommit
 */
export interface IXGitLabScanExecutionPolicyCommitInput {
  /**
   * Full path of the project.
   */
  projectPath: string;

  /**
   * YAML snippet of the policy.
   */
  policyYaml: string;

  /**
   * Changes the operation mode.
   */
  operationMode: XGitLabMutationOperationMode;

  /**
   * Name of the policy. If the name is null, the `name` field from `policy_yaml` is used.
   */
  name?: string | null;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of ScanExecutionPolicyCommit
 */
export interface IXGitLabScanExecutionPolicyCommitPayload {
  __typename: '_xGitLabScanExecutionPolicyCommitPayload';

  /**
   * Name of the branch to which the policy changes are committed.
   */
  branch: string | null;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * Errors encountered during execution of the mutation.
   */
  errors: Array<string>;
}

/**
 * The connection type for ScanExecutionPolicy.
 */
export interface IXGitLabScanExecutionPolicyConnection {
  __typename: '_xGitLabScanExecutionPolicyConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitLabScanExecutionPolicyEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitLabScanExecutionPolicy | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitLabPageInfo;
}

/**
 * An edge in a connection.
 */
export interface IXGitLabScanExecutionPolicyEdge {
  __typename: '_xGitLabScanExecutionPolicyEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitLabScanExecutionPolicy | null;
}

/**
 * Represents a resource scanned by a security scan
 */
export interface IXGitLabScannedResource {
  __typename: '_xGitLabScannedResource';

  /**
   * HTTP request method used to access the URL.
   */
  requestMethod: string | null;

  /**
   * URL scanned by the scanner.
   */
  url: string | null;
}

/**
 * The connection type for ScannedResource.
 */
export interface IXGitLabScannedResourceConnection {
  __typename: '_xGitLabScannedResourceConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitLabScannedResourceEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitLabScannedResource | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitLabPageInfo;
}

/**
 * An edge in a connection.
 */
export interface IXGitLabScannedResourceEdge {
  __typename: '_xGitLabScannedResourceEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitLabScannedResource | null;
}

/**
 * Autogenerated input type of SecurityPolicyProjectAssign
 */
export interface IXGitLabSecurityPolicyProjectAssignInput {
  /**
   * Full path of the project.
   */
  projectPath: string;

  /**
   * ID of the security policy project.
   */
  securityPolicyProjectId: any;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of SecurityPolicyProjectAssign
 */
export interface IXGitLabSecurityPolicyProjectAssignPayload {
  __typename: '_xGitLabSecurityPolicyProjectAssignPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * Errors encountered during execution of the mutation.
   */
  errors: Array<string>;
}

/**
 * Autogenerated input type of SecurityPolicyProjectCreate
 */
export interface IXGitLabSecurityPolicyProjectCreateInput {
  /**
   * Full path of the project.
   */
  projectPath: string;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of SecurityPolicyProjectCreate
 */
export interface IXGitLabSecurityPolicyProjectCreatePayload {
  __typename: '_xGitLabSecurityPolicyProjectCreatePayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * Errors encountered during execution of the mutation.
   */
  errors: Array<string>;

  /**
   * Security Policy Project that was created.
   */
  project: IXGitLabProject | null;
}

/**
 * Autogenerated input type of SecurityPolicyProjectUnassign
 */
export interface IXGitLabSecurityPolicyProjectUnassignInput {
  /**
   * Full path of the project.
   */
  projectPath: string;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of SecurityPolicyProjectUnassign
 */
export interface IXGitLabSecurityPolicyProjectUnassignPayload {
  __typename: '_xGitLabSecurityPolicyProjectUnassignPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * Errors encountered during execution of the mutation.
   */
  errors: Array<string>;
}

/**
 * Represents summary of a security report
 */
export interface IXGitLabSecurityReportSummary {
  __typename: '_xGitLabSecurityReportSummary';

  /**
   * Aggregated counts for the `api_fuzzing` scan
   */
  apiFuzzing: IXGitLabSecurityReportSummarySection | null;

  /**
   * Aggregated counts for the `cluster_image_scanning` scan
   */
  clusterImageScanning: IXGitLabSecurityReportSummarySection | null;

  /**
   * Aggregated counts for the `container_scanning` scan
   */
  containerScanning: IXGitLabSecurityReportSummarySection | null;

  /**
   * Aggregated counts for the `coverage_fuzzing` scan
   */
  coverageFuzzing: IXGitLabSecurityReportSummarySection | null;

  /**
   * Aggregated counts for the `dast` scan
   */
  dast: IXGitLabSecurityReportSummarySection | null;

  /**
   * Aggregated counts for the `dependency_scanning` scan
   */
  dependencyScanning: IXGitLabSecurityReportSummarySection | null;

  /**
   * Aggregated counts for the `generic` scan
   */
  generic: IXGitLabSecurityReportSummarySection | null;

  /**
   * Aggregated counts for the `sast` scan
   */
  sast: IXGitLabSecurityReportSummarySection | null;

  /**
   * Aggregated counts for the `secret_detection` scan
   */
  secretDetection: IXGitLabSecurityReportSummarySection | null;
}

/**
 * Represents a section of a summary of a security report
 */
export interface IXGitLabSecurityReportSummarySection {
  __typename: '_xGitLabSecurityReportSummarySection';

  /**
   * List of the first 20 scanned resources.
   */
  scannedResources: IXGitLabScannedResourceConnection | null;

  /**
   * Total number of scanned resources.
   */
  scannedResourcesCount: number | null;

  /**
   * Path to download all the scanned resources in CSV format.
   */
  scannedResourcesCsvPath: string | null;

  /**
   * List of security scans ran for the type.
   */
  scans: IXGitLabScanConnection;

  /**
   * Total number of vulnerabilities.
   */
  vulnerabilitiesCount: number | null;
}

export interface IScannedResourcesOnXGitLabSecurityReportSummarySectionArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IScansOnXGitLabSecurityReportSummarySectionArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export const enum XGitLabSecurityReportTypeEnum {
  /**
   * SAST scan report
   */
  SAST = 'SAST',

  /**
   * DAST scan report
   */
  DAST = 'DAST',

  /**
   * DEPENDENCY SCANNING scan report
   */
  DEPENDENCY_SCANNING = 'DEPENDENCY_SCANNING',

  /**
   * CONTAINER SCANNING scan report
   */
  CONTAINER_SCANNING = 'CONTAINER_SCANNING',

  /**
   * SECRET DETECTION scan report
   */
  SECRET_DETECTION = 'SECRET_DETECTION',

  /**
   * COVERAGE FUZZING scan report
   */
  COVERAGE_FUZZING = 'COVERAGE_FUZZING',

  /**
   * API FUZZING scan report
   */
  API_FUZZING = 'API_FUZZING',

  /**
   * CLUSTER IMAGE SCANNING scan report
   */
  CLUSTER_IMAGE_SCANNING = 'CLUSTER_IMAGE_SCANNING',
}

/**
 * Represents a list of security scanners
 */
export interface IXGitLabSecurityScanners {
  __typename: '_xGitLabSecurityScanners';

  /**
   * List of analyzers which are available for the project.
   */
  available: Array<XGitLabSecurityScannerType> | null;

  /**
   * List of analyzers which are enabled for the project.
   */
  enabled: Array<XGitLabSecurityScannerType> | null;

  /**
   * List of analyzers which ran successfully in the latest pipeline.
   */
  pipelineRun: Array<XGitLabSecurityScannerType> | null;
}

/**
 * The type of the security scanner
 */
export const enum XGitLabSecurityScannerType {
  /**
   * SAST scanner
   */
  SAST = 'SAST',

  /**
   * DAST scanner
   */
  DAST = 'DAST',

  /**
   * Dependency Scanning scanner
   */
  DEPENDENCY_SCANNING = 'DEPENDENCY_SCANNING',

  /**
   * Container Scanning scanner
   */
  CONTAINER_SCANNING = 'CONTAINER_SCANNING',

  /**
   * Secret Detection scanner
   */
  SECRET_DETECTION = 'SECRET_DETECTION',

  /**
   * Coverage Fuzzing scanner
   */
  COVERAGE_FUZZING = 'COVERAGE_FUZZING',

  /**
   * API Fuzzing scanner
   */
  API_FUZZING = 'API_FUZZING',

  /**
   * Cluster Image Scanning scanner
   */
  CLUSTER_IMAGE_SCANNING = 'CLUSTER_IMAGE_SCANNING',
}

/**
 * A Sentry error
 */
export interface IXGitLabSentryDetailedError {
  __typename: '_xGitLabSentryDetailedError';

  /**
   * Count of occurrences.
   */
  count: number;

  /**
   * Culprit of the error.
   */
  culprit: string;

  /**
   * External Base URL of the Sentry Instance.
   */
  externalBaseUrl: string;

  /**
   * External URL of the error.
   */
  externalUrl: string;

  /**
   * Commit the error was first seen.
   */
  firstReleaseLastCommit: string | null;

  /**
   * Release short version the error was first seen.
   */
  firstReleaseShortVersion: string | null;

  /**
   * Release version the error was first seen.
   */
  firstReleaseVersion: string | null;

  /**
   * Timestamp when the error was first seen.
   */
  firstSeen: any;

  /**
   * Last 24hr stats of the error.
   */
  frequency: Array<IXGitLabSentryErrorFrequency>;

  /**
   * GitLab commit SHA attributed to the Error based on the release version.
   */
  gitlabCommit: string | null;

  /**
   * Path to the GitLab page for the GitLab commit attributed to the error.
   */
  gitlabCommitPath: string | null;

  /**
   * URL of GitLab Issue.
   */
  gitlabIssuePath: string | null;

  /**
   * ID (global ID) of the error.
   */
  id: string;

  /**
   * Error tracking backend.
   */
  integrated: boolean | null;

  /**
   * Commit the error was last seen.
   */
  lastReleaseLastCommit: string | null;

  /**
   * Release short version the error was last seen.
   */
  lastReleaseShortVersion: string | null;

  /**
   * Release version the error was last seen.
   */
  lastReleaseVersion: string | null;

  /**
   * Timestamp when the error was last seen.
   */
  lastSeen: any;

  /**
   * Sentry metadata message of the error.
   */
  message: string | null;

  /**
   * ID (Sentry ID) of the error.
   */
  sentryId: string;

  /**
   * ID of the project (Sentry project).
   */
  sentryProjectId: string;

  /**
   * Name of the project affected by the error.
   */
  sentryProjectName: string;

  /**
   * Slug of the project affected by the error.
   */
  sentryProjectSlug: string;

  /**
   * Short ID (Sentry ID) of the error.
   */
  shortId: string;

  /**
   * Status of the error.
   */
  status: XGitLabSentryErrorStatus;

  /**
   * Tags associated with the Sentry Error.
   */
  tags: IXGitLabSentryErrorTags;

  /**
   * Title of the error.
   */
  title: string;

  /**
   * Type of the error.
   */
  type: string;

  /**
   * Count of users affected by the error.
   */
  userCount: number;
}

/**
 * A Sentry error. A simplified version of SentryDetailedError
 */
export interface IXGitLabSentryError {
  __typename: '_xGitLabSentryError';

  /**
   * Count of occurrences.
   */
  count: number;

  /**
   * Culprit of the error.
   */
  culprit: string;

  /**
   * External URL of the error.
   */
  externalUrl: string;

  /**
   * Timestamp when the error was first seen.
   */
  firstSeen: any;

  /**
   * Last 24hr stats of the error.
   */
  frequency: Array<IXGitLabSentryErrorFrequency>;

  /**
   * ID (global ID) of the error.
   */
  id: string;

  /**
   * Timestamp when the error was last seen.
   */
  lastSeen: any;

  /**
   * Sentry metadata message of the error.
   */
  message: string | null;

  /**
   * ID (Sentry ID) of the error.
   */
  sentryId: string;

  /**
   * ID of the project (Sentry project).
   */
  sentryProjectId: string;

  /**
   * Name of the project affected by the error.
   */
  sentryProjectName: string;

  /**
   * Slug of the project affected by the error.
   */
  sentryProjectSlug: string;

  /**
   * Short ID (Sentry ID) of the error.
   */
  shortId: string;

  /**
   * Status of the error.
   */
  status: XGitLabSentryErrorStatus;

  /**
   * Title of the error.
   */
  title: string;

  /**
   * Type of the error.
   */
  type: string;

  /**
   * Count of users affected by the error.
   */
  userCount: number;
}

/**
 * An object containing a collection of Sentry errors, and a detailed error
 */
export interface IXGitLabSentryErrorCollection {
  __typename: '_xGitLabSentryErrorCollection';

  /**
   * Detailed version of a Sentry error on the project.
   */
  detailedError: IXGitLabSentryDetailedError | null;

  /**
   * Stack Trace of Sentry Error.
   */
  errorStackTrace: IXGitLabSentryErrorStackTrace | null;

  /**
   * Collection of Sentry Errors.
   */
  errors: IXGitLabSentryErrorConnection | null;

  /**
   * External URL for Sentry.
   */
  externalUrl: string | null;
}

export interface IDetailedErrorOnXGitLabSentryErrorCollectionArguments {
  /**
   * ID of the Sentry issue.
   */
  id: any;
}

export interface IErrorStackTraceOnXGitLabSentryErrorCollectionArguments {
  /**
   * ID of the Sentry issue.
   */
  id: any;
}

export interface IErrorsOnXGitLabSentryErrorCollectionArguments {
  /**
   * Search query for the Sentry error details.
   */
  searchTerm?: string | null;

  /**
   * Attribute to sort on. Options are frequency, first_seen, last_seen. last_seen is default.
   */
  sort?: string | null;

  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

/**
 * The connection type for SentryError.
 */
export interface IXGitLabSentryErrorConnection {
  __typename: '_xGitLabSentryErrorConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitLabSentryErrorEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitLabSentryError | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitLabPageInfo;
}

/**
 * An edge in a connection.
 */
export interface IXGitLabSentryErrorEdge {
  __typename: '_xGitLabSentryErrorEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitLabSentryError | null;
}

export interface IXGitLabSentryErrorFrequency {
  __typename: '_xGitLabSentryErrorFrequency';

  /**
   * Count of errors received since the previously recorded time.
   */
  count: number;

  /**
   * Time the error frequency stats were recorded.
   */
  time: any;
}

/**
 * An object containing a stack trace entry for a Sentry error
 */
export interface IXGitLabSentryErrorStackTrace {
  __typename: '_xGitLabSentryErrorStackTrace';

  /**
   * Time the stack trace was received by Sentry.
   */
  dateReceived: string;

  /**
   * ID of the Sentry error.
   */
  issueId: string;

  /**
   * Stack trace entries for the Sentry error.
   */
  stackTraceEntries: Array<IXGitLabSentryErrorStackTraceEntry>;
}

/**
 * An object context for a Sentry error stack trace
 */
export interface IXGitLabSentryErrorStackTraceContext {
  __typename: '_xGitLabSentryErrorStackTraceContext';

  /**
   * Code number of the context.
   */
  code: string;

  /**
   * Line number of the context.
   */
  line: number;
}

/**
 * An object containing a stack trace entry for a Sentry error
 */
export interface IXGitLabSentryErrorStackTraceEntry {
  __typename: '_xGitLabSentryErrorStackTraceEntry';

  /**
   * Function in which the Sentry error occurred.
   */
  col: string | null;

  /**
   * File in which the Sentry error occurred.
   */
  fileName: string | null;

  /**
   * Function in which the Sentry error occurred.
   */
  function: string | null;

  /**
   * Function in which the Sentry error occurred.
   */
  line: string | null;

  /**
   * Context of the Sentry error.
   */
  traceContext: Array<IXGitLabSentryErrorStackTraceContext> | null;
}

/**
 * State of a Sentry error
 */
export const enum XGitLabSentryErrorStatus {
  /**
   * Error has been resolved.
   */
  RESOLVED = 'RESOLVED',

  /**
   * Error has been ignored until next release.
   */
  RESOLVED_IN_NEXT_RELEASE = 'RESOLVED_IN_NEXT_RELEASE',

  /**
   * Error is unresolved.
   */
  UNRESOLVED = 'UNRESOLVED',

  /**
   * Error has been ignored.
   */
  IGNORED = 'IGNORED',
}

/**
 * State of a Sentry error
 */
export interface IXGitLabSentryErrorTags {
  __typename: '_xGitLabSentryErrorTags';

  /**
   * Severity level of the Sentry Error.
   */
  level: string | null;

  /**
   * Logger of the Sentry Error.
   */
  logger: string | null;
}

export type _xGitLabService = IXGitLabBaseService | IXGitLabJiraService;

export interface IXGitLabService {
  __typename: '_xGitLabService';

  /**
   * Indicates if the service is active.
   */
  active: boolean | null;

  /**
   * Class name of the service.
   */
  type: string | null;
}

/**
 * The connection type for Service.
 */
export interface IXGitLabServiceConnection {
  __typename: '_xGitLabServiceConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitLabServiceEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<_xGitLabService | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitLabPageInfo;
}

/**
 * An edge in a connection.
 */
export interface IXGitLabServiceEdge {
  __typename: '_xGitLabServiceEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: _xGitLabService | null;
}

export const enum XGitLabServiceType {
  /**
   * AsanaService type
   */
  ASANA_SERVICE = 'ASANA_SERVICE',

  /**
   * AssemblaService type
   */
  ASSEMBLA_SERVICE = 'ASSEMBLA_SERVICE',

  /**
   * BambooService type
   */
  BAMBOO_SERVICE = 'BAMBOO_SERVICE',

  /**
   * BugzillaService type
   */
  BUGZILLA_SERVICE = 'BUGZILLA_SERVICE',

  /**
   * BuildkiteService type
   */
  BUILDKITE_SERVICE = 'BUILDKITE_SERVICE',

  /**
   * CampfireService type
   */
  CAMPFIRE_SERVICE = 'CAMPFIRE_SERVICE',

  /**
   * ConfluenceService type
   */
  CONFLUENCE_SERVICE = 'CONFLUENCE_SERVICE',

  /**
   * CustomIssueTrackerService type
   */
  CUSTOM_ISSUE_TRACKER_SERVICE = 'CUSTOM_ISSUE_TRACKER_SERVICE',

  /**
   * DatadogService type
   */
  DATADOG_SERVICE = 'DATADOG_SERVICE',

  /**
   * DiscordService type
   */
  DISCORD_SERVICE = 'DISCORD_SERVICE',

  /**
   * DroneCiService type
   */
  DRONE_CI_SERVICE = 'DRONE_CI_SERVICE',

  /**
   * EmailsOnPushService type
   */
  EMAILS_ON_PUSH_SERVICE = 'EMAILS_ON_PUSH_SERVICE',

  /**
   * EwmService type
   */
  EWM_SERVICE = 'EWM_SERVICE',

  /**
   * ExternalWikiService type
   */
  EXTERNAL_WIKI_SERVICE = 'EXTERNAL_WIKI_SERVICE',

  /**
   * FlowdockService type
   */
  FLOWDOCK_SERVICE = 'FLOWDOCK_SERVICE',

  /**
   * GithubService type
   */
  GITHUB_SERVICE = 'GITHUB_SERVICE',

  /**
   * GitlabSlackApplicationService type
   */
  GITLAB_SLACK_APPLICATION_SERVICE = 'GITLAB_SLACK_APPLICATION_SERVICE',

  /**
   * HangoutsChatService type
   */
  HANGOUTS_CHAT_SERVICE = 'HANGOUTS_CHAT_SERVICE',

  /**
   * IrkerService type
   */
  IRKER_SERVICE = 'IRKER_SERVICE',

  /**
   * JenkinsService type
   */
  JENKINS_SERVICE = 'JENKINS_SERVICE',

  /**
   * JiraService type
   */
  JIRA_SERVICE = 'JIRA_SERVICE',

  /**
   * MattermostService type
   */
  MATTERMOST_SERVICE = 'MATTERMOST_SERVICE',

  /**
   * MattermostSlashCommandsService type
   */
  MATTERMOST_SLASH_COMMANDS_SERVICE = 'MATTERMOST_SLASH_COMMANDS_SERVICE',

  /**
   * MicrosoftTeamsService type
   */
  MICROSOFT_TEAMS_SERVICE = 'MICROSOFT_TEAMS_SERVICE',

  /**
   * PackagistService type
   */
  PACKAGIST_SERVICE = 'PACKAGIST_SERVICE',

  /**
   * PipelinesEmailService type
   */
  PIPELINES_EMAIL_SERVICE = 'PIPELINES_EMAIL_SERVICE',

  /**
   * PivotaltrackerService type
   */
  PIVOTALTRACKER_SERVICE = 'PIVOTALTRACKER_SERVICE',

  /**
   * PrometheusService type
   */
  PROMETHEUS_SERVICE = 'PROMETHEUS_SERVICE',

  /**
   * PushoverService type
   */
  PUSHOVER_SERVICE = 'PUSHOVER_SERVICE',

  /**
   * RedmineService type
   */
  REDMINE_SERVICE = 'REDMINE_SERVICE',

  /**
   * SlackService type
   */
  SLACK_SERVICE = 'SLACK_SERVICE',

  /**
   * SlackSlashCommandsService type
   */
  SLACK_SLASH_COMMANDS_SERVICE = 'SLACK_SLASH_COMMANDS_SERVICE',

  /**
   * TeamcityService type
   */
  TEAMCITY_SERVICE = 'TEAMCITY_SERVICE',

  /**
   * UnifyCircuitService type
   */
  UNIFY_CIRCUIT_SERVICE = 'UNIFY_CIRCUIT_SERVICE',

  /**
   * WebexTeamsService type
   */
  WEBEX_TEAMS_SERVICE = 'WEBEX_TEAMS_SERVICE',

  /**
   * YoutrackService type
   */
  YOUTRACK_SERVICE = 'YOUTRACK_SERVICE',

  /**
   * ZentaoService type
   */
  ZENTAO_SERVICE = 'ZENTAO_SERVICE',
}

export const enum XGitLabSharedRunnersSetting {
  /**
   * Sharing of runners is disabled and unoverridable.
   */
  DISABLED_AND_UNOVERRIDABLE = 'DISABLED_AND_UNOVERRIDABLE',

  /**
   * Sharing of runners is disabled with override.
   */
  DISABLED_WITH_OVERRIDE = 'DISABLED_WITH_OVERRIDE',

  /**
   * Sharing of runners is enabled.
   */
  ENABLED = 'ENABLED',
}

/**
 * Represents a snippet entry
 */
export interface IXGitLabSnippet {
  __typename: '_xGitLabSnippet';

  /**
   * Owner of the snippet.
   */
  author: IXGitLabUserCore | null;

  /**
   * Snippet blobs.
   */
  blobs: IXGitLabSnippetBlobConnection | null;

  /**
   * Timestamp this snippet was created.
   */
  createdAt: any;

  /**
   * Description of the snippet.
   */
  description: string | null;

  /**
   * The GitLab Flavored Markdown rendering of `description`
   */
  descriptionHtml: string | null;

  /**
   * All discussions on this noteable.
   */
  discussions: IXGitLabDiscussionConnection;

  /**
   * File Name of the snippet.
   */
  fileName: string | null;

  /**
   * HTTP URL to the snippet repository.
   */
  httpUrlToRepo: string | null;

  /**
   * ID of the snippet.
   */
  id: any;

  /**
   * All notes on this noteable.
   */
  notes: IXGitLabNoteConnection;

  /**
   * Project the snippet is associated with.
   */
  project: IXGitLabProject | null;

  /**
   * Raw URL of the snippet.
   */
  rawUrl: string;

  /**
   * SSH URL to the snippet repository.
   */
  sshUrlToRepo: string | null;

  /**
   * Title of the snippet.
   */
  title: string;

  /**
   * Timestamp this snippet was updated.
   */
  updatedAt: any;

  /**
   * Permissions for the current user on the resource
   */
  userPermissions: IXGitLabSnippetPermissions;

  /**
   * Visibility Level of the snippet.
   */
  visibilityLevel: XGitLabVisibilityLevelsEnum;

  /**
   * Web URL of the snippet.
   */
  webUrl: string;
}

export interface IBlobsOnXGitLabSnippetArguments {
  /**
   * Paths of the blobs.
   */
  paths?: Array<string> | null;

  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IDiscussionsOnXGitLabSnippetArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface INotesOnXGitLabSnippetArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

/**
 * Represents the snippet blob
 */
export interface IXGitLabSnippetBlob {
  __typename: '_xGitLabSnippetBlob';

  /**
   * Shows whether the blob is binary.
   */
  binary: boolean;

  /**
   * Blob external storage.
   */
  externalStorage: string | null;

  /**
   * Blob mode.
   */
  mode: string | null;

  /**
   * Blob name.
   */
  name: string | null;

  /**
   * Blob path.
   */
  path: string | null;

  /**
   * Blob plain highlighted data.
   */
  plainData: string | null;

  /**
   * Blob raw content endpoint path.
   */
  rawPath: string;

  /**
   * Raw content of the blob, if the blob is text data.
   */
  rawPlainData: string | null;

  /**
   * Shows whether the blob is rendered as text.
   */
  renderedAsText: boolean;

  /**
   * Blob highlighted data.
   */
  richData: string | null;

  /**
   * Blob content rich viewer.
   */
  richViewer: IXGitLabSnippetBlobViewer | null;

  /**
   * Blob content simple viewer.
   */
  simpleViewer: IXGitLabSnippetBlobViewer;

  /**
   * Blob size.
   */
  size: number;
}

/**
 * Type of a snippet blob input action
 */
export const enum XGitLabSnippetBlobActionEnum {
  /**
   * Create a snippet blob.
   */
  create = 'create',

  /**
   * Update a snippet blob.
   */
  update = 'update',

  /**
   * Delete a snippet blob.
   */
  delete = 'delete',

  /**
   * Move a snippet blob.
   */
  move = 'move',
}

/**
 * Represents an action to perform over a snippet file
 */
export interface IXGitLabSnippetBlobActionInputType {
  /**
   * Type of input action.
   */
  action: XGitLabSnippetBlobActionEnum;

  /**
   * Previous path of the snippet file.
   */
  previousPath?: string | null;

  /**
   * Path of the snippet file.
   */
  filePath: string;

  /**
   * Snippet file content.
   */
  content?: string | null;
}

/**
 * The connection type for SnippetBlob.
 */
export interface IXGitLabSnippetBlobConnection {
  __typename: '_xGitLabSnippetBlobConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitLabSnippetBlobEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitLabSnippetBlob | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitLabPageInfo;
}

/**
 * An edge in a connection.
 */
export interface IXGitLabSnippetBlobEdge {
  __typename: '_xGitLabSnippetBlobEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitLabSnippetBlob | null;
}

/**
 * Represents how the blob content should be displayed
 */
export interface IXGitLabSnippetBlobViewer {
  __typename: '_xGitLabSnippetBlobViewer';

  /**
   * Shows whether the blob should be displayed collapsed.
   */
  collapsed: boolean;

  /**
   * Content file type.
   */
  fileType: string;

  /**
   * Shows whether the blob content is loaded asynchronously.
   */
  loadAsync: boolean;

  /**
   * Loading partial name.
   */
  loadingPartialName: string;

  /**
   * Error rendering the blob content.
   */
  renderError: string | null;

  /**
   * Shows whether the blob is too large to be displayed.
   */
  tooLarge: boolean;

  /**
   * Type of blob viewer.
   */
  type: XGitLabBlobViewersType;
}

/**
 * The connection type for Snippet.
 */
export interface IXGitLabSnippetConnection {
  __typename: '_xGitLabSnippetConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitLabSnippetEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitLabSnippet | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitLabPageInfo;
}

/**
 * An edge in a connection.
 */
export interface IXGitLabSnippetEdge {
  __typename: '_xGitLabSnippetEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitLabSnippet | null;
}

export interface IXGitLabSnippetPermissions {
  __typename: '_xGitLabSnippetPermissions';

  /**
   * Indicates the user can perform `admin_snippet` on this resource
   */
  adminSnippet: boolean;

  /**
   * Indicates the user can perform `award_emoji` on this resource
   */
  awardEmoji: boolean;

  /**
   * Indicates the user can perform `create_note` on this resource
   */
  createNote: boolean;

  /**
   * Indicates the user can perform `read_snippet` on this resource
   */
  readSnippet: boolean;

  /**
   * Indicates the user can perform `report_snippet` on this resource
   */
  reportSnippet: boolean;

  /**
   * Indicates the user can perform `update_snippet` on this resource
   */
  updateSnippet: boolean;
}

/**
 * Represents the Geo sync and verification state of a snippet repository
 */
export interface IXGitLabSnippetRepositoryRegistry {
  __typename: '_xGitLabSnippetRepositoryRegistry';

  /**
   * Timestamp when the SnippetRepositoryRegistry was created
   */
  createdAt: any | null;

  /**
   * ID of the SnippetRepositoryRegistry
   */
  id: string;

  /**
   * Error message during sync of the SnippetRepositoryRegistry
   */
  lastSyncFailure: string | null;

  /**
   * Timestamp of the most recent successful sync of the SnippetRepositoryRegistry
   */
  lastSyncedAt: any | null;

  /**
   * Timestamp after which the SnippetRepositoryRegistry should be resynced
   */
  retryAt: any | null;

  /**
   * Number of consecutive failed sync attempts of the SnippetRepositoryRegistry
   */
  retryCount: number | null;

  /**
   * ID of the Snippet Repository.
   */
  snippetRepositoryId: string;

  /**
   * Sync state of the SnippetRepositoryRegistry
   */
  state: XGitLabRegistryState | null;
}

/**
 * The connection type for SnippetRepositoryRegistry.
 */
export interface IXGitLabSnippetRepositoryRegistryConnection {
  __typename: '_xGitLabSnippetRepositoryRegistryConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitLabSnippetRepositoryRegistryEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitLabSnippetRepositoryRegistry | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitLabPageInfo;
}

/**
 * An edge in a connection.
 */
export interface IXGitLabSnippetRepositoryRegistryEdge {
  __typename: '_xGitLabSnippetRepositoryRegistryEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitLabSnippetRepositoryRegistry | null;
}

/**
 * Common sort values
 */
export const enum XGitLabSort {
  /**
   * Updated at descending order.
   * @deprecated "This was renamed. Please use `UPDATED_DESC`. Deprecated in 13.5."
   */
  updated_desc = 'updated_desc',

  /**
   * Updated at ascending order.
   * @deprecated "This was renamed. Please use `UPDATED_ASC`. Deprecated in 13.5."
   */
  updated_asc = 'updated_asc',

  /**
   * Created at descending order.
   * @deprecated "This was renamed. Please use `CREATED_DESC`. Deprecated in 13.5."
   */
  created_desc = 'created_desc',

  /**
   * Created at ascending order.
   * @deprecated "This was renamed. Please use `CREATED_ASC`. Deprecated in 13.5."
   */
  created_asc = 'created_asc',

  /**
   * Updated at descending order.
   */
  UPDATED_DESC = 'UPDATED_DESC',

  /**
   * Updated at ascending order.
   */
  UPDATED_ASC = 'UPDATED_ASC',

  /**
   * Created at descending order.
   */
  CREATED_DESC = 'CREATED_DESC',

  /**
   * Created at ascending order.
   */
  CREATED_ASC = 'CREATED_ASC',
}

export interface IXGitLabStatusAction {
  __typename: '_xGitLabStatusAction';

  /**
   * Title for the button, for example: Retry this job.
   */
  buttonTitle: string | null;

  /**
   * Icon used in the action button.
   */
  icon: string | null;

  /**
   * ID for a status action.
   */
  id: string;

  /**
   * Method for the action, for example: :post.
   */
  method: string | null;

  /**
   * Path for the action.
   */
  path: string | null;

  /**
   * Title for the action, for example: Retry.
   */
  title: string | null;
}

export interface IXGitLabSubmodule {
  __typename: '_xGitLabSubmodule';

  /**
   * Flat path of the entry.
   */
  flatPath: string;

  /**
   * ID of the entry.
   */
  id: string;

  /**
   * Name of the entry.
   */
  name: string;

  /**
   * Path of the entry.
   */
  path: string;

  /**
   * Last commit SHA for the entry.
   */
  sha: string;

  /**
   * Tree URL for the sub-module.
   */
  treeUrl: string | null;

  /**
   * Type of tree entry.
   */
  type: XGitLabEntryType;

  /**
   * Web URL for the sub-module.
   */
  webUrl: string | null;
}

/**
 * The connection type for Submodule.
 */
export interface IXGitLabSubmoduleConnection {
  __typename: '_xGitLabSubmoduleConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitLabSubmoduleEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitLabSubmodule | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitLabPageInfo;
}

/**
 * An edge in a connection.
 */
export interface IXGitLabSubmoduleEdge {
  __typename: '_xGitLabSubmoduleEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitLabSubmodule | null;
}

export interface IXGitLabSubscription {
  __typename: '_xGitLabSubscription';

  /**
   * Triggered when the assignees of an issuable are updated.
   */
  issuableAssigneesUpdated: _xGitLabIssuable | null;
}

export interface IIssuableAssigneesUpdatedOnXGitLabSubscriptionArguments {
  /**
   * ID of the issuable.
   */
  issuableId: any;
}

/**
 * Completion status of tasks
 */
export interface IXGitLabTaskCompletionStatus {
  __typename: '_xGitLabTaskCompletionStatus';

  /**
   * Number of completed tasks.
   */
  completedCount: number;

  /**
   * Number of total tasks.
   */
  count: number;
}

export interface IXGitLabTerraformState {
  __typename: '_xGitLabTerraformState';

  /**
   * Timestamp the Terraform state was created.
   */
  createdAt: any;

  /**
   * ID of the Terraform state.
   */
  id: string;

  /**
   * Latest version of the Terraform state.
   */
  latestVersion: IXGitLabTerraformStateVersion | null;

  /**
   * Timestamp the Terraform state was locked.
   */
  lockedAt: any | null;

  /**
   * User currently holding a lock on the Terraform state.
   */
  lockedByUser: IXGitLabUserCore | null;

  /**
   * Name of the Terraform state.
   */
  name: string;

  /**
   * Timestamp the Terraform state was updated.
   */
  updatedAt: any;
}

/**
 * The connection type for TerraformState.
 */
export interface IXGitLabTerraformStateConnection {
  __typename: '_xGitLabTerraformStateConnection';

  /**
   * Total count of collection.
   */
  count: number;

  /**
   * A list of edges.
   */
  edges: Array<IXGitLabTerraformStateEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitLabTerraformState | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitLabPageInfo;
}

/**
 * Autogenerated input type of TerraformStateDelete
 */
export interface IXGitLabTerraformStateDeleteInput {
  /**
   * Global ID of the Terraform state.
   */
  id: any;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of TerraformStateDelete
 */
export interface IXGitLabTerraformStateDeletePayload {
  __typename: '_xGitLabTerraformStateDeletePayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * Errors encountered during execution of the mutation.
   */
  errors: Array<string>;
}

/**
 * An edge in a connection.
 */
export interface IXGitLabTerraformStateEdge {
  __typename: '_xGitLabTerraformStateEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitLabTerraformState | null;
}

/**
 * Autogenerated input type of TerraformStateLock
 */
export interface IXGitLabTerraformStateLockInput {
  /**
   * Global ID of the Terraform state.
   */
  id: any;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of TerraformStateLock
 */
export interface IXGitLabTerraformStateLockPayload {
  __typename: '_xGitLabTerraformStateLockPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * Errors encountered during execution of the mutation.
   */
  errors: Array<string>;
}

/**
 * Autogenerated input type of TerraformStateUnlock
 */
export interface IXGitLabTerraformStateUnlockInput {
  /**
   * Global ID of the Terraform state.
   */
  id: any;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of TerraformStateUnlock
 */
export interface IXGitLabTerraformStateUnlockPayload {
  __typename: '_xGitLabTerraformStateUnlockPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * Errors encountered during execution of the mutation.
   */
  errors: Array<string>;
}

export interface IXGitLabTerraformStateVersion {
  __typename: '_xGitLabTerraformStateVersion';

  /**
   * Timestamp the version was created.
   */
  createdAt: any;

  /**
   * User that created this version.
   */
  createdByUser: IXGitLabUserCore | null;

  /**
   * URL for downloading the version's JSON file.
   */
  downloadPath: string | null;

  /**
   * ID of the Terraform state version.
   */
  id: string;

  /**
   * Job that created this version.
   */
  job: IXGitLabCiJob | null;

  /**
   * Serial number of the version.
   */
  serial: number | null;

  /**
   * Timestamp the version was updated.
   */
  updatedAt: any;
}

/**
 * Represents the Geo sync and verification state of a terraform state version
 */
export interface IXGitLabTerraformStateVersionRegistry {
  __typename: '_xGitLabTerraformStateVersionRegistry';

  /**
   * Timestamp when the TerraformStateVersionRegistry was created
   */
  createdAt: any | null;

  /**
   * ID of the TerraformStateVersionRegistry
   */
  id: string;

  /**
   * Error message during sync of the TerraformStateVersionRegistry
   */
  lastSyncFailure: string | null;

  /**
   * Timestamp of the most recent successful sync of the TerraformStateVersionRegistry
   */
  lastSyncedAt: any | null;

  /**
   * Timestamp after which the TerraformStateVersionRegistry should be resynced
   */
  retryAt: any | null;

  /**
   * Number of consecutive failed sync attempts of the TerraformStateVersionRegistry
   */
  retryCount: number | null;

  /**
   * Sync state of the TerraformStateVersionRegistry
   */
  state: XGitLabRegistryState | null;

  /**
   * ID of the terraform state version.
   */
  terraformStateVersionId: string;
}

/**
 * The connection type for TerraformStateVersionRegistry.
 */
export interface IXGitLabTerraformStateVersionRegistryConnection {
  __typename: '_xGitLabTerraformStateVersionRegistryConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitLabTerraformStateVersionRegistryEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitLabTerraformStateVersionRegistry | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitLabPageInfo;
}

/**
 * An edge in a connection.
 */
export interface IXGitLabTerraformStateVersionRegistryEdge {
  __typename: '_xGitLabTerraformStateVersionRegistryEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitLabTerraformStateVersionRegistry | null;
}

/**
 * Test case in pipeline test report.
 */
export interface IXGitLabTestCase {
  __typename: '_xGitLabTestCase';

  /**
   * URL of the test case attachment file.
   */
  attachmentUrl: string | null;

  /**
   * Classname of the test case.
   */
  classname: string | null;

  /**
   * Test case execution time in seconds.
   */
  executionTime: number | null;

  /**
   * Path to the file of the test case.
   */
  file: string | null;

  /**
   * Name of the test case.
   */
  name: string | null;

  /**
   * Recent failure history of the test case on the base branch.
   */
  recentFailures: IXGitLabRecentFailures | null;

  /**
   * Stack trace of the test case.
   */
  stackTrace: string | null;

  /**
   * Status of the test case (error, failed, success, skipped).
   */
  status: XGitLabTestCaseStatus | null;

  /**
   * System output of the test case.
   */
  systemOutput: string | null;
}

/**
 * The connection type for TestCase.
 */
export interface IXGitLabTestCaseConnection {
  __typename: '_xGitLabTestCaseConnection';

  /**
   * Total count of collection.
   */
  count: number;

  /**
   * A list of edges.
   */
  edges: Array<IXGitLabTestCaseEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitLabTestCase | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitLabPageInfo;
}

/**
 * An edge in a connection.
 */
export interface IXGitLabTestCaseEdge {
  __typename: '_xGitLabTestCaseEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitLabTestCase | null;
}

export const enum XGitLabTestCaseStatus {
  /**
   * Test case that has a status of error.
   */
  error = 'error',

  /**
   * Test case that has a status of failed.
   */
  failed = 'failed',

  /**
   * Test case that has a status of success.
   */
  success = 'success',

  /**
   * Test case that has a status of skipped.
   */
  skipped = 'skipped',
}

/**
 * Represents a requirement test report
 */
export interface IXGitLabTestReport {
  __typename: '_xGitLabTestReport';

  /**
   * Author of the test report.
   */
  author: IXGitLabUserCore | null;

  /**
   * Timestamp of when the test report was created.
   */
  createdAt: any;

  /**
   * ID of the test report.
   */
  id: string;

  /**
   * State of the test report.
   */
  state: XGitLabTestReportState;
}

/**
 * The connection type for TestReport.
 */
export interface IXGitLabTestReportConnection {
  __typename: '_xGitLabTestReportConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitLabTestReportEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitLabTestReport | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitLabPageInfo;
}

/**
 * An edge in a connection.
 */
export interface IXGitLabTestReportEdge {
  __typename: '_xGitLabTestReportEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitLabTestReport | null;
}

/**
 * State of a test report
 */
export const enum XGitLabTestReportState {
  /**
   * Passed test report.
   */
  PASSED = 'PASSED',

  /**
   * Failed test report.
   */
  FAILED = 'FAILED',
}

/**
 * Test report for a pipeline
 */
export interface IXGitLabTestReportSummary {
  __typename: '_xGitLabTestReportSummary';

  /**
   * Test suites belonging to a pipeline test report.
   */
  testSuites: IXGitLabTestSuiteSummaryConnection;

  /**
   * Total report statistics for a pipeline test report.
   */
  total: IXGitLabTestReportTotal;
}

export interface ITestSuitesOnXGitLabTestReportSummaryArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

/**
 * Total test report statistics.
 */
export interface IXGitLabTestReportTotal {
  __typename: '_xGitLabTestReportTotal';

  /**
   * Total number of the test cases.
   */
  count: number | null;

  /**
   * Total number of test cases that had an error.
   */
  error: number | null;

  /**
   * Total number of test cases that failed.
   */
  failed: number | null;

  /**
   * Total number of test cases that were skipped.
   */
  skipped: number | null;

  /**
   * Total number of test cases that succeeded.
   */
  success: number | null;

  /**
   * Test suite error message.
   */
  suiteError: string | null;

  /**
   * Total duration of the tests.
   */
  time: number | null;
}

/**
 * Test suite in a pipeline test report.
 */
export interface IXGitLabTestSuite {
  __typename: '_xGitLabTestSuite';

  /**
   * Total number of test cases that had an error.
   */
  errorCount: number | null;

  /**
   * Total number of test cases that failed in the test suite.
   */
  failedCount: number | null;

  /**
   * Name of the test suite.
   */
  name: string | null;

  /**
   * Total number of test cases that were skipped in the test suite.
   */
  skippedCount: number | null;

  /**
   * Total number of test cases that succeeded in the test suite.
   */
  successCount: number | null;

  /**
   * Test suite error message.
   */
  suiteError: string | null;

  /**
   * Test cases in the test suite.
   */
  testCases: IXGitLabTestCaseConnection | null;

  /**
   * Total number of the test cases in the test suite.
   */
  totalCount: number | null;

  /**
   * Total duration of the tests in the test suite.
   */
  totalTime: number | null;
}

export interface ITestCasesOnXGitLabTestSuiteArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

/**
 * Test suite summary in a pipeline test report.
 */
export interface IXGitLabTestSuiteSummary {
  __typename: '_xGitLabTestSuiteSummary';

  /**
   * IDs of the builds used to run the test suite.
   */
  buildIds: Array<string> | null;

  /**
   * Total number of test cases that had an error.
   */
  errorCount: number | null;

  /**
   * Total number of test cases that failed in the test suite.
   */
  failedCount: number | null;

  /**
   * Name of the test suite.
   */
  name: string | null;

  /**
   * Total number of test cases that were skipped in the test suite.
   */
  skippedCount: number | null;

  /**
   * Total number of test cases that succeeded in the test suite.
   */
  successCount: number | null;

  /**
   * Test suite error message.
   */
  suiteError: string | null;

  /**
   * Total number of the test cases in the test suite.
   */
  totalCount: number | null;

  /**
   * Total duration of the tests in the test suite.
   */
  totalTime: number | null;
}

/**
 * The connection type for TestSuiteSummary.
 */
export interface IXGitLabTestSuiteSummaryConnection {
  __typename: '_xGitLabTestSuiteSummaryConnection';

  /**
   * Total count of collection.
   */
  count: number;

  /**
   * A list of edges.
   */
  edges: Array<IXGitLabTestSuiteSummaryEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitLabTestSuiteSummary | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitLabPageInfo;
}

/**
 * An edge in a connection.
 */
export interface IXGitLabTestSuiteSummaryEdge {
  __typename: '_xGitLabTestSuiteSummaryEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitLabTestSuiteSummary | null;
}

/**
 * Represents measured stats metrics for timeboxes
 */
export interface IXGitLabTimeboxMetrics {
  __typename: '_xGitLabTimeboxMetrics';

  /**
   * Count metric.
   */
  count: number;

  /**
   * Weight metric.
   */
  weight: number;
}

/**
 * Represents a historically accurate report about the timebox
 */
export interface IXGitLabTimeboxReport {
  __typename: '_xGitLabTimeboxReport';

  /**
   * Daily scope and completed totals for burnup charts.
   */
  burnupTimeSeries: Array<IXGitLabBurnupChartDailyTotals> | null;

  /**
   * Represents the time report stats for the timebox.
   */
  stats: IXGitLabTimeReportStats | null;
}

export type _xGitLabTimeboxReportInterface =
  | IXGitLabIteration
  | IXGitLabMilestone;

export interface IXGitLabTimeboxReportInterface {
  __typename: '_xGitLabTimeboxReportInterface';

  /**
   * Historically accurate report about the timebox.
   */
  report: IXGitLabTimeboxReport | null;
}

/**
 * A time-frame defined as a closed inclusive range of two dates
 */
export interface IXGitLabTimeframe {
  /**
   * Start of the range.
   */
  start: any;

  /**
   * End of the range.
   */
  end: any;
}

export interface IXGitLabTimelog {
  __typename: '_xGitLabTimelog';

  /**
   * Issue that logged time was added to.
   */
  issue: IXGitLabIssue | null;

  /**
   * Merge request that logged time was added to.
   */
  mergeRequest: IXGitLabMergeRequest | null;

  /**
   * Note where the quick action was executed to add the logged time.
   */
  note: IXGitLabNote | null;

  /**
   * Timestamp of when the time tracked was spent at.
   */
  spentAt: any | null;

  /**
   * Summary of how the time was spent.
   */
  summary: string | null;

  /**
   * Time spent displayed in seconds.
   */
  timeSpent: number;

  /**
   * User that logged the time.
   */
  user: IXGitLabUserCore;
}

/**
 * The connection type for Timelog.
 */
export interface IXGitLabTimelogConnection {
  __typename: '_xGitLabTimelogConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitLabTimelogEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitLabTimelog | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitLabPageInfo;
}

/**
 * An edge in a connection.
 */
export interface IXGitLabTimelogEdge {
  __typename: '_xGitLabTimelogEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitLabTimelog | null;
}

/**
 * Represents the time report stats for timeboxes
 */
export interface IXGitLabTimeReportStats {
  __typename: '_xGitLabTimeReportStats';

  /**
   * Completed issues metrics.
   */
  complete: IXGitLabTimeboxMetrics | null;

  /**
   * Incomplete issues metrics.
   */
  incomplete: IXGitLabTimeboxMetrics | null;

  /**
   * Total issues metrics.
   */
  total: IXGitLabTimeboxMetrics | null;
}

/**
 * Representing a to-do entry
 */
export interface IXGitLabTodo {
  __typename: '_xGitLabTodo';

  /**
   * Action of the to-do item.
   */
  action: XGitLabTodoActionEnum;

  /**
   * Author of this to-do item.
   */
  author: IXGitLabUserCore;

  /**
   * Body of the to-do item.
   */
  body: string;

  /**
   * Timestamp this to-do item was created.
   */
  createdAt: any;

  /**
   * Group this to-do item is associated with.
   */
  group: IXGitLabGroup | null;

  /**
   * ID of the to-do item.
   */
  id: string;

  /**
   * Project this to-do item is associated with.
   */
  project: IXGitLabProject | null;

  /**
   * State of the to-do item.
   */
  state: XGitLabTodoStateEnum;

  /**
   * Target type of the to-do item.
   */
  targetType: XGitLabTodoTargetEnum;
}

export const enum XGitLabTodoActionEnum {
  /**
   * User was assigned.
   */
  assigned = 'assigned',

  /**
   * User was mentioned.
   */
  mentioned = 'mentioned',

  /**
   * Build triggered by the user failed.
   */
  build_failed = 'build_failed',

  /**
   * User added a TODO.
   */
  marked = 'marked',

  /**
   * User was set as an approver.
   */
  approval_required = 'approval_required',

  /**
   * Merge request authored by the user could not be merged.
   */
  unmergeable = 'unmergeable',

  /**
   * User was directly addressed.
   */
  directly_addressed = 'directly_addressed',

  /**
   * Merge request authored by the user was removed from the merge train.
   */
  merge_train_removed = 'merge_train_removed',

  /**
   * Review was requested from the user.
   */
  review_requested = 'review_requested',
}

/**
 * The connection type for Todo.
 */
export interface IXGitLabTodoConnection {
  __typename: '_xGitLabTodoConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitLabTodoEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitLabTodo | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitLabPageInfo;
}

/**
 * Autogenerated input type of TodoCreate
 */
export interface IXGitLabTodoCreateInput {
  /**
   * Global ID of the to-do item's parent. Issues, merge requests, designs, and epics are supported.
   */
  targetId: any;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of TodoCreate
 */
export interface IXGitLabTodoCreatePayload {
  __typename: '_xGitLabTodoCreatePayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * Errors encountered during execution of the mutation.
   */
  errors: Array<string>;

  /**
   * To-do item created.
   */
  todo: IXGitLabTodo | null;
}

/**
 * An edge in a connection.
 */
export interface IXGitLabTodoEdge {
  __typename: '_xGitLabTodoEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitLabTodo | null;
}

/**
 * Autogenerated input type of TodoMarkDone
 */
export interface IXGitLabTodoMarkDoneInput {
  /**
   * Global ID of the to-do item to mark as done.
   */
  id: any;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of TodoMarkDone
 */
export interface IXGitLabTodoMarkDonePayload {
  __typename: '_xGitLabTodoMarkDonePayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * Errors encountered during execution of the mutation.
   */
  errors: Array<string>;

  /**
   * Requested to-do item.
   */
  todo: IXGitLabTodo;
}

/**
 * Autogenerated input type of TodoRestore
 */
export interface IXGitLabTodoRestoreInput {
  /**
   * Global ID of the to-do item to restore.
   */
  id: any;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated input type of TodoRestoreMany
 */
export interface IXGitLabTodoRestoreManyInput {
  /**
   * Global IDs of the to-do items to restore (a maximum of 50 is supported at once).
   */
  ids: Array<any>;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of TodoRestoreMany
 */
export interface IXGitLabTodoRestoreManyPayload {
  __typename: '_xGitLabTodoRestoreManyPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * Errors encountered during execution of the mutation.
   */
  errors: Array<string>;

  /**
   * Updated to-do items.
   */
  todos: Array<IXGitLabTodo>;
}

/**
 * Autogenerated return type of TodoRestore
 */
export interface IXGitLabTodoRestorePayload {
  __typename: '_xGitLabTodoRestorePayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * Errors encountered during execution of the mutation.
   */
  errors: Array<string>;

  /**
   * Requested to-do item.
   */
  todo: IXGitLabTodo;
}

/**
 * Autogenerated input type of TodosMarkAllDone
 */
export interface IXGitLabTodosMarkAllDoneInput {
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of TodosMarkAllDone
 */
export interface IXGitLabTodosMarkAllDonePayload {
  __typename: '_xGitLabTodosMarkAllDonePayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * Errors encountered during execution of the mutation.
   */
  errors: Array<string>;

  /**
   * Updated to-do items.
   */
  todos: Array<IXGitLabTodo>;
}

export const enum XGitLabTodoStateEnum {
  /**
   * State of the todo is pending.
   */
  pending = 'pending',

  /**
   * State of the todo is done.
   */
  done = 'done',
}

export const enum XGitLabTodoTargetEnum {
  /**
   * Commit.
   */
  COMMIT = 'COMMIT',

  /**
   * Issue.
   */
  ISSUE = 'ISSUE',

  /**
   * Merge request.
   */
  MERGEREQUEST = 'MERGEREQUEST',

  /**
   * Design.
   */
  DESIGN = 'DESIGN',

  /**
   * Alert.
   */
  ALERT = 'ALERT',

  /**
   * An Epic.
   */
  EPIC = 'EPIC',
}

export interface IXGitLabTree {
  __typename: '_xGitLabTree';

  /**
   * Blobs of the tree.
   */
  blobs: IXGitLabBlobConnection;

  /**
   * Last commit for the tree.
   */
  lastCommit: IXGitLabCommit | null;

  /**
   * Sub-modules of the tree.
   */
  submodules: IXGitLabSubmoduleConnection;

  /**
   * Trees of the tree.
   */
  trees: IXGitLabTreeEntryConnection;
}

export interface IBlobsOnXGitLabTreeArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface ISubmodulesOnXGitLabTreeArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface ITreesOnXGitLabTreeArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

/**
 * The connection type for Tree.
 */
export interface IXGitLabTreeConnection {
  __typename: '_xGitLabTreeConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitLabTreeEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitLabTree | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitLabPageInfo;
}

/**
 * An edge in a connection.
 */
export interface IXGitLabTreeEdge {
  __typename: '_xGitLabTreeEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitLabTree | null;
}

/**
 * Represents a directory
 */
export interface IXGitLabTreeEntry {
  __typename: '_xGitLabTreeEntry';

  /**
   * Flat path of the entry.
   */
  flatPath: string;

  /**
   * ID of the entry.
   */
  id: string;

  /**
   * Name of the entry.
   */
  name: string;

  /**
   * Path of the entry.
   */
  path: string;

  /**
   * Last commit SHA for the entry.
   */
  sha: string;

  /**
   * Type of tree entry.
   */
  type: XGitLabEntryType;

  /**
   * Web path for the tree entry (directory).
   */
  webPath: string | null;

  /**
   * Web URL for the tree entry (directory).
   */
  webUrl: string | null;
}

/**
 * The connection type for TreeEntry.
 */
export interface IXGitLabTreeEntryConnection {
  __typename: '_xGitLabTreeEntryConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitLabTreeEntryEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitLabTreeEntry | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitLabPageInfo;
}

/**
 * An edge in a connection.
 */
export interface IXGitLabTreeEntryEdge {
  __typename: '_xGitLabTreeEntryEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitLabTreeEntry | null;
}

export const enum XGitLabTypeEnum {
  /**
   * Snippet created independent of any project.
   */
  personal = 'personal',

  /**
   * Snippet related to a specific project.
   */
  project = 'project',
}

/**
 * Autogenerated input type of UpdateAlertStatus
 */
export interface IXGitLabUpdateAlertStatusInput {
  /**
   * Project the alert to mutate is in.
   */
  projectPath: string;

  /**
   * IID of the alert to mutate.
   */
  iid: string;

  /**
   * Status to set the alert.
   */
  status: XGitLabAlertManagementStatus;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of UpdateAlertStatus
 */
export interface IXGitLabUpdateAlertStatusPayload {
  __typename: '_xGitLabUpdateAlertStatusPayload';

  /**
   * Alert after mutation.
   */
  alert: IXGitLabAlertManagementAlert | null;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * Errors encountered during execution of the mutation.
   */
  errors: Array<string>;

  /**
   * Issue created after mutation.
   */
  issue: IXGitLabIssue | null;

  /**
   * To-do item after mutation.
   */
  todo: IXGitLabTodo | null;
}

/**
 * Autogenerated input type of UpdateBoardEpicUserPreferences
 */
export interface IXGitLabUpdateBoardEpicUserPreferencesInput {
  /**
   * Board global ID.
   */
  boardId: any;

  /**
   * ID of an epic to set preferences for.
   */
  epicId: any;

  /**
   * Whether the epic should be collapsed in the board.
   */
  collapsed: boolean;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of UpdateBoardEpicUserPreferences
 */
export interface IXGitLabUpdateBoardEpicUserPreferencesPayload {
  __typename: '_xGitLabUpdateBoardEpicUserPreferencesPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * User preferences for the epic in the board after mutation.
   */
  epicUserPreferences: IXGitLabBoardEpicUserPreferences | null;

  /**
   * Errors encountered during execution of the mutation.
   */
  errors: Array<string>;
}

/**
 * Autogenerated input type of UpdateBoard
 */
export interface IXGitLabUpdateBoardInput {
  /**
   * Board name.
   */
  name?: string | null;

  /**
   * Whether or not backlog list is hidden.
   */
  hideBacklogList?: boolean | null;

  /**
   * Whether or not closed list is hidden.
   */
  hideClosedList?: boolean | null;

  /**
   * Board global ID.
   */
  id: any;

  /**
   * ID of user to be assigned to the board.
   */
  assigneeId?: any | null;

  /**
   * ID of milestone to be assigned to the board.
   */
  milestoneId?: any | null;

  /**
   * ID of iteration to be assigned to the board.
   */
  iterationId?: any | null;

  /**
   * ID of iteration cadence to be assigned to the board.
   */
  iterationCadenceId?: any | null;

  /**
   * Weight value to be assigned to the board.
   */
  weight?: number | null;

  /**
   * Labels of the issue.
   */
  labels?: Array<string> | null;

  /**
   * IDs of labels to be added to the board.
   */
  labelIds?: Array<any> | null;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated input type of UpdateBoardList
 */
export interface IXGitLabUpdateBoardListInput {
  /**
   * Position of list within the board.
   */
  position?: number | null;

  /**
   * Indicates if the list is collapsed for this user.
   */
  collapsed?: boolean | null;

  /**
   * Global ID of the list.
   */
  listId: any;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of UpdateBoardList
 */
export interface IXGitLabUpdateBoardListPayload {
  __typename: '_xGitLabUpdateBoardListPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * Errors encountered during execution of the mutation.
   */
  errors: Array<string>;

  /**
   * Mutated list.
   */
  list: IXGitLabBoardList | null;
}

/**
 * Autogenerated return type of UpdateBoard
 */
export interface IXGitLabUpdateBoardPayload {
  __typename: '_xGitLabUpdateBoardPayload';

  /**
   * Board after mutation.
   */
  board: IXGitLabBoard | null;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * Errors encountered during execution of the mutation.
   */
  errors: Array<string>;
}

/**
 * Autogenerated input type of UpdateComplianceFramework
 */
export interface IXGitLabUpdateComplianceFrameworkInput {
  /**
   * Global ID of the compliance framework to update.
   */
  id: any;

  /**
   * Parameters to update the compliance framework with.
   */
  params: IXGitLabComplianceFrameworkInput;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of UpdateComplianceFramework
 */
export interface IXGitLabUpdateComplianceFrameworkPayload {
  __typename: '_xGitLabUpdateComplianceFrameworkPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * Compliance framework after mutation.
   */
  complianceFramework: IXGitLabComplianceFramework | null;

  /**
   * Errors encountered during execution of the mutation.
   */
  errors: Array<string>;
}

/**
 * Autogenerated input type of UpdateContainerExpirationPolicy
 */
export interface IXGitLabUpdateContainerExpirationPolicyInput {
  /**
   * Project path where the container expiration policy is located.
   */
  projectPath: string;

  /**
   * Indicates whether this container expiration policy is enabled.
   */
  enabled?: boolean | null;

  /**
   * This container expiration policy schedule.
   */
  cadence?: XGitLabContainerExpirationPolicyCadenceEnum | null;

  /**
   * Tags older that this will expire.
   */
  olderThan?: XGitLabContainerExpirationPolicyOlderThanEnum | null;

  /**
   * Number of tags to retain.
   */
  keepN?: XGitLabContainerExpirationPolicyKeepEnum | null;

  /**
   * Tags with names matching this regex pattern will expire.
   */
  nameRegex?: any | null;

  /**
   * Tags with names matching this regex pattern will be preserved.
   */
  nameRegexKeep?: any | null;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of UpdateContainerExpirationPolicy
 */
export interface IXGitLabUpdateContainerExpirationPolicyPayload {
  __typename: '_xGitLabUpdateContainerExpirationPolicyPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * Container expiration policy after mutation.
   */
  containerExpirationPolicy: IXGitLabContainerExpirationPolicy | null;

  /**
   * Errors encountered during execution of the mutation.
   */
  errors: Array<string>;
}

/**
 * Autogenerated input type of UpdateDependencyProxyImageTtlGroupPolicy
 */
export interface IXGitLabUpdateDependencyProxyImageTtlGroupPolicyInput {
  /**
   * Group path for the group dependency proxy image TTL policy.
   */
  groupPath: string;

  /**
   * Indicates whether the policy is enabled or disabled.
   */
  enabled?: boolean | null;

  /**
   * Number of days to retain a cached image file.
   */
  ttl?: number | null;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of UpdateDependencyProxyImageTtlGroupPolicy
 */
export interface IXGitLabUpdateDependencyProxyImageTtlGroupPolicyPayload {
  __typename: '_xGitLabUpdateDependencyProxyImageTtlGroupPolicyPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * Group image TTL policy after mutation.
   */
  dependencyProxyImageTtlPolicy: IXGitLabDependencyProxyImageTtlGroupPolicy | null;

  /**
   * Errors encountered during execution of the mutation.
   */
  errors: Array<string>;
}

/**
 * Autogenerated input type of UpdateDependencyProxySettings
 */
export interface IXGitLabUpdateDependencyProxySettingsInput {
  /**
   * Group path for the group dependency proxy.
   */
  groupPath: string;

  /**
   * Indicates whether the policy is enabled or disabled.
   */
  enabled?: boolean | null;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of UpdateDependencyProxySettings
 */
export interface IXGitLabUpdateDependencyProxySettingsPayload {
  __typename: '_xGitLabUpdateDependencyProxySettingsPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * Group dependency proxy settings after mutation.
   */
  dependencyProxySetting: IXGitLabDependencyProxySetting | null;

  /**
   * Errors encountered during execution of the mutation.
   */
  errors: Array<string>;
}

export interface IXGitLabUpdateDiffImagePositionInput {
  /**
   * X position of the note.
   */
  x?: number | null;

  /**
   * Y position of the note.
   */
  y?: number | null;

  /**
   * Total width of the image.
   */
  width?: number | null;

  /**
   * Total height of the image.
   */
  height?: number | null;
}

/**
 * Autogenerated input type of UpdateEpicBoardList
 */
export interface IXGitLabUpdateEpicBoardListInput {
  /**
   * Position of list within the board.
   */
  position?: number | null;

  /**
   * Indicates if the list is collapsed for this user.
   */
  collapsed?: boolean | null;

  /**
   * Global ID of the epic list.
   */
  listId: any;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of UpdateEpicBoardList
 */
export interface IXGitLabUpdateEpicBoardListPayload {
  __typename: '_xGitLabUpdateEpicBoardListPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * Errors encountered during execution of the mutation.
   */
  errors: Array<string>;

  /**
   * Mutated epic list.
   */
  list: IXGitLabEpicList | null;
}

/**
 * Autogenerated input type of UpdateEpic
 */
export interface IXGitLabUpdateEpicInput {
  /**
   * IID of the epic to mutate.
   */
  iid: string;

  /**
   * Group the epic to mutate is in.
   */
  groupPath: string;

  /**
   * Title of the epic.
   */
  title?: string | null;

  /**
   * Description of the epic.
   */
  description?: string | null;

  /**
   * Indicates if the epic is confidential.
   */
  confidential?: boolean | null;

  /**
   * Start date of the epic.
   */
  startDateFixed?: string | null;

  /**
   * End date of the epic.
   */
  dueDateFixed?: string | null;

  /**
   * Indicates start date should be sourced from start_date_fixed field not the issue milestones.
   */
  startDateIsFixed?: boolean | null;

  /**
   * Indicates end date should be sourced from due_date_fixed field not the issue milestones.
   */
  dueDateIsFixed?: boolean | null;

  /**
   * IDs of labels to be added to the epic.
   */
  addLabelIds?: Array<string> | null;

  /**
   * IDs of labels to be removed from the epic.
   */
  removeLabelIds?: Array<string> | null;

  /**
   * State event for the epic.
   */
  stateEvent?: XGitLabEpicStateEvent | null;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of UpdateEpic
 */
export interface IXGitLabUpdateEpicPayload {
  __typename: '_xGitLabUpdateEpicPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * Epic after mutation.
   */
  epic: IXGitLabEpic | null;

  /**
   * Errors encountered during execution of the mutation.
   */
  errors: Array<string>;
}

/**
 * Autogenerated input type of UpdateImageDiffNote
 */
export interface IXGitLabUpdateImageDiffNoteInput {
  /**
   * Global ID of the note to update.
   */
  id: any;

  /**
   * Content of the note.
   */
  body?: string | null;

  /**
   * Position of this note on a diff.
   */
  position?: IXGitLabUpdateDiffImagePositionInput | null;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of UpdateImageDiffNote
 */
export interface IXGitLabUpdateImageDiffNotePayload {
  __typename: '_xGitLabUpdateImageDiffNotePayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * Errors encountered during execution of the mutation.
   */
  errors: Array<string>;

  /**
   * Note after mutation.
   */
  note: IXGitLabNote | null;
}

/**
 * Autogenerated input type of UpdateIssue
 */
export interface IXGitLabUpdateIssueInput {
  /**
   * Project the issue to mutate is in.
   */
  projectPath: string;

  /**
   * IID of the issue to mutate.
   */
  iid: string;

  /**
   * Description of the issue.
   */
  description?: string | null;

  /**
   * Due date of the issue.
   */
  dueDate?: any | null;

  /**
   * Indicates the issue is confidential.
   */
  confidential?: boolean | null;

  /**
   * Indicates discussion is locked on the issue.
   */
  locked?: boolean | null;

  /**
   * Type of the issue.
   */
  type?: XGitLabIssueType | null;

  /**
   * Title of the issue.
   */
  title?: string | null;

  /**
   * ID of the milestone to assign to the issue. On update milestone will be removed if set to null.
   */
  milestoneId?: string | null;

  /**
   * IDs of labels to be added to the issue.
   */
  addLabelIds?: Array<string> | null;

  /**
   * IDs of labels to be removed from the issue.
   */
  removeLabelIds?: Array<string> | null;

  /**
   * IDs of labels to be set. Replaces existing issue labels.
   */
  labelIds?: Array<string> | null;

  /**
   * Close or reopen an issue.
   */
  stateEvent?: XGitLabIssueStateEvent | null;

  /**
   * Desired health status.
   */
  healthStatus?: XGitLabHealthStatus | null;

  /**
   * Weight of the issue.
   */
  weight?: number | null;

  /**
   * ID of the parent epic. NULL when removing the association.
   */
  epicId?: any | null;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of UpdateIssue
 */
export interface IXGitLabUpdateIssuePayload {
  __typename: '_xGitLabUpdateIssuePayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * Errors encountered during execution of the mutation.
   */
  errors: Array<string>;

  /**
   * Issue after mutation.
   */
  issue: IXGitLabIssue | null;
}

/**
 * Autogenerated input type of UpdateIteration
 */
export interface IXGitLabUpdateIterationInput {
  /**
   * Group of the iteration.
   */
  groupPath: string;

  /**
   * Global ID of the iteration.
   */
  id: string;

  /**
   * Title of the iteration.
   */
  title?: string | null;

  /**
   * Description of the iteration.
   */
  description?: string | null;

  /**
   * Start date of the iteration.
   */
  startDate?: string | null;

  /**
   * End date of the iteration.
   */
  dueDate?: string | null;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of UpdateIteration
 */
export interface IXGitLabUpdateIterationPayload {
  __typename: '_xGitLabUpdateIterationPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * Errors encountered during execution of the mutation.
   */
  errors: Array<string>;

  /**
   * Updated iteration.
   */
  iteration: IXGitLabIteration | null;
}

/**
 * Autogenerated input type of UpdateNamespacePackageSettings
 */
export interface IXGitLabUpdateNamespacePackageSettingsInput {
  /**
   * Namespace path where the namespace package setting is located.
   */
  namespacePath: string;

  /**
   * Indicates whether duplicate Maven packages are allowed for this namespace.
   */
  mavenDuplicatesAllowed?: boolean | null;

  /**
   * When maven_duplicates_allowed is false, you can publish duplicate packages
   * with names that match this regex. Otherwise, this setting has no effect.
   */
  mavenDuplicateExceptionRegex?: any | null;

  /**
   * Indicates whether duplicate generic packages are allowed for this namespace.
   */
  genericDuplicatesAllowed?: boolean | null;

  /**
   * When generic_duplicates_allowed is false, you can publish duplicate packages
   * with names that match this regex. Otherwise, this setting has no effect.
   */
  genericDuplicateExceptionRegex?: any | null;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of UpdateNamespacePackageSettings
 */
export interface IXGitLabUpdateNamespacePackageSettingsPayload {
  __typename: '_xGitLabUpdateNamespacePackageSettingsPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * Errors encountered during execution of the mutation.
   */
  errors: Array<string>;

  /**
   * Namespace package setting after mutation.
   */
  packageSettings: IXGitLabPackageSettings | null;
}

/**
 * Autogenerated input type of UpdateNote
 */
export interface IXGitLabUpdateNoteInput {
  /**
   * Global ID of the note to update.
   */
  id: any;

  /**
   * Content of the note.
   */
  body?: string | null;

  /**
   * Confidentiality flag of a note. Default is false.
   */
  confidential?: boolean | null;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of UpdateNote
 */
export interface IXGitLabUpdateNotePayload {
  __typename: '_xGitLabUpdateNotePayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * Errors encountered during execution of the mutation.
   */
  errors: Array<string>;

  /**
   * Note after mutation.
   */
  note: IXGitLabNote | null;
}

/**
 * Autogenerated input type of UpdateRequirement
 */
export interface IXGitLabUpdateRequirementInput {
  /**
   * Title of the requirement.
   */
  title?: string | null;

  /**
   * Description of the requirement.
   */
  description?: string | null;

  /**
   * Full project path the requirement is associated with.
   */
  projectPath: string;

  /**
   * State of the requirement.
   */
  state?: XGitLabRequirementState | null;

  /**
   * IID of the requirement to update.
   */
  iid: string;

  /**
   * Creates a test report for the requirement with the given state.
   */
  lastTestReportState?: XGitLabTestReportState | null;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of UpdateRequirement
 */
export interface IXGitLabUpdateRequirementPayload {
  __typename: '_xGitLabUpdateRequirementPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * Errors encountered during execution of the mutation.
   */
  errors: Array<string>;

  /**
   * Requirement after mutation.
   */
  requirement: IXGitLabRequirement | null;
}

/**
 * Autogenerated input type of UpdateSnippet
 */
export interface IXGitLabUpdateSnippetInput {
  /**
   * Global ID of the snippet to update.
   */
  id: any;

  /**
   * Title of the snippet.
   */
  title?: string | null;

  /**
   * Description of the snippet.
   */
  description?: string | null;

  /**
   * Visibility level of the snippet.
   */
  visibilityLevel?: XGitLabVisibilityLevelsEnum | null;

  /**
   * Actions to perform over the snippet repository and blobs.
   */
  blobActions?: Array<IXGitLabSnippetBlobActionInputType> | null;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of UpdateSnippet
 */
export interface IXGitLabUpdateSnippetPayload {
  __typename: '_xGitLabUpdateSnippetPayload';

  /**
   * CAPTCHA site key which must be used to render a challenge for the user to
   * solve to obtain a valid captchaResponse value. Included only when an operation
   * was not completed because "NeedsCaptchaResponse" is true. Deprecated in 13.11:
   * Use spam protection with HTTP headers instead.
   * @deprecated "Use spam protection with HTTP headers instead. Deprecated in 13.11."
   */
  captchaSiteKey: string | null;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * Errors encountered during execution of the mutation.
   */
  errors: Array<string>;

  /**
   * Indicates whether the operation was detected as possible spam and not
   * completed. If CAPTCHA is enabled, the request must be resubmitted with a valid
   * CAPTCHA response and spam_log_id included for the operation to be completed.
   * Included only when an operation was not completed because
   * "NeedsCaptchaResponse" is true. Deprecated in 13.11: Use spam protection with
   * HTTP headers instead.
   * @deprecated "Use spam protection with HTTP headers instead. Deprecated in 13.11."
   */
  needsCaptchaResponse: boolean | null;

  /**
   * Snippet after mutation.
   */
  snippet: IXGitLabSnippet | null;

  /**
   * Indicates whether the operation was detected as definite spam. There is no
   * option to resubmit the request with a CAPTCHA response. Deprecated in 13.11:
   * Use spam protection with HTTP headers instead.
   * @deprecated "Use spam protection with HTTP headers instead. Deprecated in 13.11."
   */
  spam: boolean | null;

  /**
   * Spam log ID which must be passed along with a valid CAPTCHA response for an
   * operation to be completed. Included only when an operation was not completed
   * because "NeedsCaptchaResponse" is true. Deprecated in 13.11: Use spam
   * protection with HTTP headers instead.
   * @deprecated "Use spam protection with HTTP headers instead. Deprecated in 13.11."
   */
  spamLogId: number | null;
}

/**
 * Represents the Geo replication and verification state of an upload.
 */
export interface IXGitLabUploadRegistry {
  __typename: '_xGitLabUploadRegistry';

  /**
   * Timestamp when the UploadRegistry was created
   */
  createdAt: any | null;

  /**
   * ID of the Upload.
   */
  fileId: string;

  /**
   * ID of the UploadRegistry
   */
  id: string;

  /**
   * Error message during sync of the UploadRegistry
   */
  lastSyncFailure: string | null;

  /**
   * Timestamp of the most recent successful sync of the UploadRegistry
   */
  lastSyncedAt: any | null;

  /**
   * Timestamp after which the UploadRegistry should be resynced
   */
  retryAt: any | null;

  /**
   * Number of consecutive failed sync attempts of the UploadRegistry
   */
  retryCount: number | null;

  /**
   * Sync state of the UploadRegistry
   */
  state: XGitLabRegistryState | null;
}

/**
 * The connection type for UploadRegistry.
 */
export interface IXGitLabUploadRegistryConnection {
  __typename: '_xGitLabUploadRegistryConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitLabUploadRegistryEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitLabUploadRegistry | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitLabPageInfo;
}

/**
 * An edge in a connection.
 */
export interface IXGitLabUploadRegistryEdge {
  __typename: '_xGitLabUploadRegistryEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitLabUploadRegistry | null;
}

/**
 * Represents a recorded measurement (object count) for the Admins
 */
export interface IXGitLabUsageTrendsMeasurement {
  __typename: '_xGitLabUsageTrendsMeasurement';

  /**
   * Object count.
   */
  count: number;

  /**
   * Type of objects being measured.
   */
  identifier: XGitLabMeasurementIdentifier;

  /**
   * Time the measurement was recorded.
   */
  recordedAt: any | null;
}

/**
 * The connection type for UsageTrendsMeasurement.
 */
export interface IXGitLabUsageTrendsMeasurementConnection {
  __typename: '_xGitLabUsageTrendsMeasurementConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitLabUsageTrendsMeasurementEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitLabUsageTrendsMeasurement | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitLabPageInfo;
}

/**
 * An edge in a connection.
 */
export interface IXGitLabUsageTrendsMeasurementEdge {
  __typename: '_xGitLabUsageTrendsMeasurementEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitLabUsageTrendsMeasurement | null;
}

/**
 * Representation of a GitLab user.
 */
export type _xGitLabUser =
  | IXGitLabMergeRequestAssignee
  | IXGitLabMergeRequestReviewer
  | IXGitLabUserCore;

/**
 * Representation of a GitLab user.
 */
export interface IXGitLabUser {
  __typename: '_xGitLabUser';

  /**
   * Merge requests assigned to the user.
   */
  assignedMergeRequests: IXGitLabMergeRequestConnection | null;

  /**
   * Merge requests authored by the user.
   */
  authoredMergeRequests: IXGitLabMergeRequestConnection | null;

  /**
   * URL of the user's avatar.
   */
  avatarUrl: string | null;

  /**
   * Indicates if the user is a bot.
   */
  bot: boolean;

  /**
   * User callouts that belong to the user.
   */
  callouts: IXGitLabUserCalloutConnection | null;

  /**
   * User email. Deprecated in 13.7: This was renamed.
   * @deprecated "This was renamed. Please use `User.publicEmail`. Deprecated in 13.7."
   */
  email: string | null;

  /**
   * Group count for the user.
   */
  groupCount: number | null;

  /**
   * Group memberships of the user.
   */
  groupMemberships: IXGitLabGroupMemberConnection | null;

  /**
   * Groups where the user has access. Will always return `null` if
   * `paginatable_namespace_drop_down_for_project_creation` feature flag is disabled.
   */
  groups: IXGitLabGroupConnection | null;

  /**
   * ID of the user.
   */
  id: string;

  /**
   * Location of the user.
   */
  location: string | null;

  /**
   * Human-readable name of the user.
   */
  name: string;

  /**
   * Personal namespace of the user.
   */
  namespace: IXGitLabNamespace | null;

  /**
   * Project memberships of the user.
   */
  projectMemberships: IXGitLabProjectMemberConnection | null;

  /**
   * User's public email.
   */
  publicEmail: string | null;

  /**
   * Merge requests assigned to the user for review.
   */
  reviewRequestedMergeRequests: IXGitLabMergeRequestConnection | null;

  /**
   * Snippets authored by the user.
   */
  snippets: IXGitLabSnippetConnection | null;

  /**
   * Projects starred by the user.
   */
  starredProjects: IXGitLabProjectConnection | null;

  /**
   * State of the user.
   */
  state: XGitLabUserState;

  /**
   * User status.
   */
  status: IXGitLabUserStatus | null;

  /**
   * Time logged by the user.
   */
  timelogs: IXGitLabTimelogConnection | null;

  /**
   * To-do items of the user.
   */
  todos: IXGitLabTodoConnection | null;

  /**
   * Permissions for the current user on the resource.
   */
  userPermissions: IXGitLabUserPermissions;

  /**
   * Username of the user. Unique within this instance of GitLab.
   */
  username: string;

  /**
   * Web path of the user.
   */
  webPath: string;

  /**
   * Web URL of the user.
   */
  webUrl: string;
}

export interface IAssignedMergeRequestsOnXGitLabUserArguments {
  /**
   * Array of IIDs of merge requests, for example `[1, 2]`.
   */
  iids?: Array<string> | null;

  /**
   * Array of source branch names.
   * All resolved merge requests will have one of these branches as their source.
   */
  sourceBranches?: Array<string> | null;

  /**
   * Array of target branch names.
   * All resolved merge requests will have one of these branches as their target.
   */
  targetBranches?: Array<string> | null;

  /**
   * Merge request state. If provided, all resolved merge requests will have this state.
   */
  state?: XGitLabMergeRequestState | null;

  /**
   * Array of label names. All resolved merge requests will have all of these labels.
   */
  labels?: Array<string> | null;

  /**
   * Merge requests merged after this date.
   */
  mergedAfter?: any | null;

  /**
   * Merge requests merged before this date.
   */
  mergedBefore?: any | null;

  /**
   * Title of the milestone.
   */
  milestoneTitle?: string | null;

  /**
   * Sort merge requests by this criteria.
   * @default "created_desc"
   */
  sort?: XGitLabMergeRequestSort | null;

  /**
   * Merge requests created after this timestamp.
   */
  createdAfter?: any | null;

  /**
   * Merge requests created before this timestamp.
   */
  createdBefore?: any | null;

  /**
   * List of negated arguments.
   * Warning: this argument is experimental and a subject to change in future.
   */
  not?: IXGitLabMergeRequestsResolverNegatedParams | null;

  /**
   * The full-path of the project the authored merge requests should be in.
   * Incompatible with projectId.
   */
  projectPath?: string | null;

  /**
   * The global ID of the project the authored merge requests should be in.
   * Incompatible with projectPath.
   */
  projectId?: any | null;

  /**
   * Username of the author.
   */
  authorUsername?: string | null;

  /**
   * Username of the reviewer.
   */
  reviewerUsername?: string | null;

  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IAuthoredMergeRequestsOnXGitLabUserArguments {
  /**
   * Array of IIDs of merge requests, for example `[1, 2]`.
   */
  iids?: Array<string> | null;

  /**
   * Array of source branch names.
   * All resolved merge requests will have one of these branches as their source.
   */
  sourceBranches?: Array<string> | null;

  /**
   * Array of target branch names.
   * All resolved merge requests will have one of these branches as their target.
   */
  targetBranches?: Array<string> | null;

  /**
   * Merge request state. If provided, all resolved merge requests will have this state.
   */
  state?: XGitLabMergeRequestState | null;

  /**
   * Array of label names. All resolved merge requests will have all of these labels.
   */
  labels?: Array<string> | null;

  /**
   * Merge requests merged after this date.
   */
  mergedAfter?: any | null;

  /**
   * Merge requests merged before this date.
   */
  mergedBefore?: any | null;

  /**
   * Title of the milestone.
   */
  milestoneTitle?: string | null;

  /**
   * Sort merge requests by this criteria.
   * @default "created_desc"
   */
  sort?: XGitLabMergeRequestSort | null;

  /**
   * Merge requests created after this timestamp.
   */
  createdAfter?: any | null;

  /**
   * Merge requests created before this timestamp.
   */
  createdBefore?: any | null;

  /**
   * List of negated arguments.
   * Warning: this argument is experimental and a subject to change in future.
   */
  not?: IXGitLabMergeRequestsResolverNegatedParams | null;

  /**
   * The full-path of the project the authored merge requests should be in.
   * Incompatible with projectId.
   */
  projectPath?: string | null;

  /**
   * The global ID of the project the authored merge requests should be in.
   * Incompatible with projectPath.
   */
  projectId?: any | null;

  /**
   * Username of the assignee.
   */
  assigneeUsername?: string | null;

  /**
   * Username of the reviewer.
   */
  reviewerUsername?: string | null;

  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface ICalloutsOnXGitLabUserArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IGroupMembershipsOnXGitLabUserArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IGroupsOnXGitLabUserArguments {
  /**
   * Search by group name or path.
   */
  search?: string | null;

  /**
   * Filter by permissions the user has on groups.
   */
  permissionScope?: XGitLabGroupPermission | null;

  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IProjectMembershipsOnXGitLabUserArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IReviewRequestedMergeRequestsOnXGitLabUserArguments {
  /**
   * Array of IIDs of merge requests, for example `[1, 2]`.
   */
  iids?: Array<string> | null;

  /**
   * Array of source branch names.
   * All resolved merge requests will have one of these branches as their source.
   */
  sourceBranches?: Array<string> | null;

  /**
   * Array of target branch names.
   * All resolved merge requests will have one of these branches as their target.
   */
  targetBranches?: Array<string> | null;

  /**
   * Merge request state. If provided, all resolved merge requests will have this state.
   */
  state?: XGitLabMergeRequestState | null;

  /**
   * Array of label names. All resolved merge requests will have all of these labels.
   */
  labels?: Array<string> | null;

  /**
   * Merge requests merged after this date.
   */
  mergedAfter?: any | null;

  /**
   * Merge requests merged before this date.
   */
  mergedBefore?: any | null;

  /**
   * Title of the milestone.
   */
  milestoneTitle?: string | null;

  /**
   * Sort merge requests by this criteria.
   * @default "created_desc"
   */
  sort?: XGitLabMergeRequestSort | null;

  /**
   * Merge requests created after this timestamp.
   */
  createdAfter?: any | null;

  /**
   * Merge requests created before this timestamp.
   */
  createdBefore?: any | null;

  /**
   * List of negated arguments.
   * Warning: this argument is experimental and a subject to change in future.
   */
  not?: IXGitLabMergeRequestsResolverNegatedParams | null;

  /**
   * The full-path of the project the authored merge requests should be in.
   * Incompatible with projectId.
   */
  projectPath?: string | null;

  /**
   * The global ID of the project the authored merge requests should be in.
   * Incompatible with projectPath.
   */
  projectId?: any | null;

  /**
   * Username of the author.
   */
  authorUsername?: string | null;

  /**
   * Username of the assignee.
   */
  assigneeUsername?: string | null;

  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface ISnippetsOnXGitLabUserArguments {
  /**
   * Array of global snippet IDs. For example, `gid://gitlab/ProjectSnippet/1`.
   */
  ids?: Array<any> | null;

  /**
   * Visibility of the snippet.
   */
  visibility?: XGitLabVisibilityScopesEnum | null;

  /**
   * Type of snippet.
   */
  type?: XGitLabTypeEnum | null;

  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IStarredProjectsOnXGitLabUserArguments {
  /**
   * Search query.
   */
  search?: string | null;

  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface ITimelogsOnXGitLabUserArguments {
  /**
   * List timelogs within a date range where the logged date is equal to or after startDate.
   */
  startDate?: any | null;

  /**
   * List timelogs within a date range where the logged date is equal to or before endDate.
   */
  endDate?: any | null;

  /**
   * List timelogs within a time range where the logged time is equal to or after startTime.
   */
  startTime?: any | null;

  /**
   * List timelogs within a time range where the logged time is equal to or before endTime.
   */
  endTime?: any | null;

  /**
   * List timelogs for a project.
   */
  projectId?: any | null;

  /**
   * List timelogs for a group.
   */
  groupId?: any | null;

  /**
   * List timelogs for a user.
   */
  username?: string | null;

  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface ITodosOnXGitLabUserArguments {
  /**
   * Action to be filtered.
   */
  action?: Array<XGitLabTodoActionEnum> | null;

  /**
   * ID of an author.
   */
  authorId?: Array<string> | null;

  /**
   * ID of a project.
   */
  projectId?: Array<string> | null;

  /**
   * ID of a group.
   */
  groupId?: Array<string> | null;

  /**
   * State of the todo.
   */
  state?: Array<XGitLabTodoStateEnum> | null;

  /**
   * Type of the todo.
   */
  type?: Array<XGitLabTodoTargetEnum> | null;

  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IXGitLabUserCallout {
  __typename: '_xGitLabUserCallout';

  /**
   * Date when the callout was dismissed.
   */
  dismissedAt: any | null;

  /**
   * Name of the feature that the callout is for.
   */
  featureName: XGitLabUserCalloutFeatureNameEnum | null;
}

/**
 * The connection type for UserCallout.
 */
export interface IXGitLabUserCalloutConnection {
  __typename: '_xGitLabUserCalloutConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitLabUserCalloutEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitLabUserCallout | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitLabPageInfo;
}

/**
 * Autogenerated input type of UserCalloutCreate
 */
export interface IXGitLabUserCalloutCreateInput {
  /**
   * Feature name you want to dismiss the callout for.
   */
  featureName: string;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of UserCalloutCreate
 */
export interface IXGitLabUserCalloutCreatePayload {
  __typename: '_xGitLabUserCalloutCreatePayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * Errors encountered during execution of the mutation.
   */
  errors: Array<string>;

  /**
   * User callout dismissed.
   */
  userCallout: IXGitLabUserCallout;
}

/**
 * An edge in a connection.
 */
export interface IXGitLabUserCalloutEdge {
  __typename: '_xGitLabUserCalloutEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitLabUserCallout | null;
}

/**
 * Name of the feature that the callout is for.
 */
export const enum XGitLabUserCalloutFeatureNameEnum {
  /**
   * Callout feature name for gke_cluster_integration.
   */
  GKE_CLUSTER_INTEGRATION = 'GKE_CLUSTER_INTEGRATION',

  /**
   * Callout feature name for gcp_signup_offer.
   */
  GCP_SIGNUP_OFFER = 'GCP_SIGNUP_OFFER',

  /**
   * Callout feature name for cluster_security_warning.
   */
  CLUSTER_SECURITY_WARNING = 'CLUSTER_SECURITY_WARNING',

  /**
   * Callout feature name for ultimate_trial.
   */
  ULTIMATE_TRIAL = 'ULTIMATE_TRIAL',

  /**
   * Callout feature name for geo_enable_hashed_storage.
   */
  GEO_ENABLE_HASHED_STORAGE = 'GEO_ENABLE_HASHED_STORAGE',

  /**
   * Callout feature name for geo_migrate_hashed_storage.
   */
  GEO_MIGRATE_HASHED_STORAGE = 'GEO_MIGRATE_HASHED_STORAGE',

  /**
   * Callout feature name for canary_deployment.
   */
  CANARY_DEPLOYMENT = 'CANARY_DEPLOYMENT',

  /**
   * Callout feature name for gold_trial_billings.
   */
  GOLD_TRIAL_BILLINGS = 'GOLD_TRIAL_BILLINGS',

  /**
   * Callout feature name for suggest_popover_dismissed.
   */
  SUGGEST_POPOVER_DISMISSED = 'SUGGEST_POPOVER_DISMISSED',

  /**
   * Callout feature name for tabs_position_highlight.
   */
  TABS_POSITION_HIGHLIGHT = 'TABS_POSITION_HIGHLIGHT',

  /**
   * Callout feature name for threat_monitoring_info.
   */
  THREAT_MONITORING_INFO = 'THREAT_MONITORING_INFO',

  /**
   * Callout feature name for two_factor_auth_recovery_settings_check.
   */
  TWO_FACTOR_AUTH_RECOVERY_SETTINGS_CHECK = 'TWO_FACTOR_AUTH_RECOVERY_SETTINGS_CHECK',

  /**
   * Callout feature name for web_ide_alert_dismissed.
   */
  WEB_IDE_ALERT_DISMISSED = 'WEB_IDE_ALERT_DISMISSED',

  /**
   * Callout feature name for active_user_count_threshold.
   */
  ACTIVE_USER_COUNT_THRESHOLD = 'ACTIVE_USER_COUNT_THRESHOLD',

  /**
   * Callout feature name for buy_pipeline_minutes_notification_dot.
   */
  BUY_PIPELINE_MINUTES_NOTIFICATION_DOT = 'BUY_PIPELINE_MINUTES_NOTIFICATION_DOT',

  /**
   * Callout feature name for personal_access_token_expiry.
   */
  PERSONAL_ACCESS_TOKEN_EXPIRY = 'PERSONAL_ACCESS_TOKEN_EXPIRY',

  /**
   * Callout feature name for suggest_pipeline.
   */
  SUGGEST_PIPELINE = 'SUGGEST_PIPELINE',

  /**
   * Callout feature name for customize_homepage.
   */
  CUSTOMIZE_HOMEPAGE = 'CUSTOMIZE_HOMEPAGE',

  /**
   * Callout feature name for feature_flags_new_version.
   */
  FEATURE_FLAGS_NEW_VERSION = 'FEATURE_FLAGS_NEW_VERSION',

  /**
   * Callout feature name for registration_enabled_callout.
   */
  REGISTRATION_ENABLED_CALLOUT = 'REGISTRATION_ENABLED_CALLOUT',

  /**
   * Callout feature name for new_user_signups_cap_reached.
   */
  NEW_USER_SIGNUPS_CAP_REACHED = 'NEW_USER_SIGNUPS_CAP_REACHED',

  /**
   * Callout feature name for unfinished_tag_cleanup_callout.
   */
  UNFINISHED_TAG_CLEANUP_CALLOUT = 'UNFINISHED_TAG_CLEANUP_CALLOUT',

  /**
   * Callout feature name for eoa_bronze_plan_banner.
   */
  EOA_BRONZE_PLAN_BANNER = 'EOA_BRONZE_PLAN_BANNER',

  /**
   * Callout feature name for pipeline_needs_banner.
   */
  PIPELINE_NEEDS_BANNER = 'PIPELINE_NEEDS_BANNER',

  /**
   * Callout feature name for pipeline_needs_hover_tip.
   */
  PIPELINE_NEEDS_HOVER_TIP = 'PIPELINE_NEEDS_HOVER_TIP',

  /**
   * Callout feature name for web_ide_ci_environments_guidance.
   */
  WEB_IDE_CI_ENVIRONMENTS_GUIDANCE = 'WEB_IDE_CI_ENVIRONMENTS_GUIDANCE',

  /**
   * Callout feature name for security_configuration_upgrade_banner.
   */
  SECURITY_CONFIGURATION_UPGRADE_BANNER = 'SECURITY_CONFIGURATION_UPGRADE_BANNER',

  /**
   * Callout feature name for cloud_licensing_subscription_activation_banner.
   */
  CLOUD_LICENSING_SUBSCRIPTION_ACTIVATION_BANNER = 'CLOUD_LICENSING_SUBSCRIPTION_ACTIVATION_BANNER',

  /**
   * Callout feature name for trial_status_reminder_d14.
   */
  TRIAL_STATUS_REMINDER_D14 = 'TRIAL_STATUS_REMINDER_D14',

  /**
   * Callout feature name for trial_status_reminder_d3.
   */
  TRIAL_STATUS_REMINDER_D3 = 'TRIAL_STATUS_REMINDER_D3',

  /**
   * Callout feature name for security_configuration_devops_alert.
   */
  SECURITY_CONFIGURATION_DEVOPS_ALERT = 'SECURITY_CONFIGURATION_DEVOPS_ALERT',

  /**
   * Callout feature name for profile_personal_access_token_expiry.
   */
  PROFILE_PERSONAL_ACCESS_TOKEN_EXPIRY = 'PROFILE_PERSONAL_ACCESS_TOKEN_EXPIRY',

  /**
   * Callout feature name for terraform_notification_dismissed.
   */
  TERRAFORM_NOTIFICATION_DISMISSED = 'TERRAFORM_NOTIFICATION_DISMISSED',

  /**
   * Callout feature name for security_newsletter_callout.
   */
  SECURITY_NEWSLETTER_CALLOUT = 'SECURITY_NEWSLETTER_CALLOUT',
}

/**
 * Core represention of a GitLab user.
 */
export interface IXGitLabUserCore {
  __typename: '_xGitLabUserCore';

  /**
   * Merge requests assigned to the user.
   */
  assignedMergeRequests: IXGitLabMergeRequestConnection | null;

  /**
   * Merge requests authored by the user.
   */
  authoredMergeRequests: IXGitLabMergeRequestConnection | null;

  /**
   * URL of the user's avatar.
   */
  avatarUrl: string | null;

  /**
   * Indicates if the user is a bot.
   */
  bot: boolean;

  /**
   * User callouts that belong to the user.
   */
  callouts: IXGitLabUserCalloutConnection | null;

  /**
   * User email. Deprecated in 13.7: This was renamed.
   * @deprecated "This was renamed. Please use `User.publicEmail`. Deprecated in 13.7."
   */
  email: string | null;

  /**
   * Group count for the user.
   */
  groupCount: number | null;

  /**
   * Group memberships of the user.
   */
  groupMemberships: IXGitLabGroupMemberConnection | null;

  /**
   * Groups where the user has access. Will always return `null` if
   * `paginatable_namespace_drop_down_for_project_creation` feature flag is disabled.
   */
  groups: IXGitLabGroupConnection | null;

  /**
   * ID of the user.
   */
  id: string;

  /**
   * Location of the user.
   */
  location: string | null;

  /**
   * Human-readable name of the user.
   */
  name: string;

  /**
   * Personal namespace of the user.
   */
  namespace: IXGitLabNamespace | null;

  /**
   * Project memberships of the user.
   */
  projectMemberships: IXGitLabProjectMemberConnection | null;

  /**
   * User's public email.
   */
  publicEmail: string | null;

  /**
   * Merge requests assigned to the user for review.
   */
  reviewRequestedMergeRequests: IXGitLabMergeRequestConnection | null;

  /**
   * Snippets authored by the user.
   */
  snippets: IXGitLabSnippetConnection | null;

  /**
   * Projects starred by the user.
   */
  starredProjects: IXGitLabProjectConnection | null;

  /**
   * State of the user.
   */
  state: XGitLabUserState;

  /**
   * User status.
   */
  status: IXGitLabUserStatus | null;

  /**
   * Time logged by the user.
   */
  timelogs: IXGitLabTimelogConnection | null;

  /**
   * To-do items of the user.
   */
  todos: IXGitLabTodoConnection | null;

  /**
   * Permissions for the current user on the resource.
   */
  userPermissions: IXGitLabUserPermissions;

  /**
   * Username of the user. Unique within this instance of GitLab.
   */
  username: string;

  /**
   * Web path of the user.
   */
  webPath: string;

  /**
   * Web URL of the user.
   */
  webUrl: string;
}

export interface IAssignedMergeRequestsOnXGitLabUserCoreArguments {
  /**
   * Array of IIDs of merge requests, for example `[1, 2]`.
   */
  iids?: Array<string> | null;

  /**
   * Array of source branch names.
   * All resolved merge requests will have one of these branches as their source.
   */
  sourceBranches?: Array<string> | null;

  /**
   * Array of target branch names.
   * All resolved merge requests will have one of these branches as their target.
   */
  targetBranches?: Array<string> | null;

  /**
   * Merge request state. If provided, all resolved merge requests will have this state.
   */
  state?: XGitLabMergeRequestState | null;

  /**
   * Array of label names. All resolved merge requests will have all of these labels.
   */
  labels?: Array<string> | null;

  /**
   * Merge requests merged after this date.
   */
  mergedAfter?: any | null;

  /**
   * Merge requests merged before this date.
   */
  mergedBefore?: any | null;

  /**
   * Title of the milestone.
   */
  milestoneTitle?: string | null;

  /**
   * Sort merge requests by this criteria.
   * @default "created_desc"
   */
  sort?: XGitLabMergeRequestSort | null;

  /**
   * Merge requests created after this timestamp.
   */
  createdAfter?: any | null;

  /**
   * Merge requests created before this timestamp.
   */
  createdBefore?: any | null;

  /**
   * List of negated arguments.
   * Warning: this argument is experimental and a subject to change in future.
   */
  not?: IXGitLabMergeRequestsResolverNegatedParams | null;

  /**
   * The full-path of the project the authored merge requests should be in.
   * Incompatible with projectId.
   */
  projectPath?: string | null;

  /**
   * The global ID of the project the authored merge requests should be in.
   * Incompatible with projectPath.
   */
  projectId?: any | null;

  /**
   * Username of the author.
   */
  authorUsername?: string | null;

  /**
   * Username of the reviewer.
   */
  reviewerUsername?: string | null;

  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IAuthoredMergeRequestsOnXGitLabUserCoreArguments {
  /**
   * Array of IIDs of merge requests, for example `[1, 2]`.
   */
  iids?: Array<string> | null;

  /**
   * Array of source branch names.
   * All resolved merge requests will have one of these branches as their source.
   */
  sourceBranches?: Array<string> | null;

  /**
   * Array of target branch names.
   * All resolved merge requests will have one of these branches as their target.
   */
  targetBranches?: Array<string> | null;

  /**
   * Merge request state. If provided, all resolved merge requests will have this state.
   */
  state?: XGitLabMergeRequestState | null;

  /**
   * Array of label names. All resolved merge requests will have all of these labels.
   */
  labels?: Array<string> | null;

  /**
   * Merge requests merged after this date.
   */
  mergedAfter?: any | null;

  /**
   * Merge requests merged before this date.
   */
  mergedBefore?: any | null;

  /**
   * Title of the milestone.
   */
  milestoneTitle?: string | null;

  /**
   * Sort merge requests by this criteria.
   * @default "created_desc"
   */
  sort?: XGitLabMergeRequestSort | null;

  /**
   * Merge requests created after this timestamp.
   */
  createdAfter?: any | null;

  /**
   * Merge requests created before this timestamp.
   */
  createdBefore?: any | null;

  /**
   * List of negated arguments.
   * Warning: this argument is experimental and a subject to change in future.
   */
  not?: IXGitLabMergeRequestsResolverNegatedParams | null;

  /**
   * The full-path of the project the authored merge requests should be in.
   * Incompatible with projectId.
   */
  projectPath?: string | null;

  /**
   * The global ID of the project the authored merge requests should be in.
   * Incompatible with projectPath.
   */
  projectId?: any | null;

  /**
   * Username of the assignee.
   */
  assigneeUsername?: string | null;

  /**
   * Username of the reviewer.
   */
  reviewerUsername?: string | null;

  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface ICalloutsOnXGitLabUserCoreArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IGroupMembershipsOnXGitLabUserCoreArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IGroupsOnXGitLabUserCoreArguments {
  /**
   * Search by group name or path.
   */
  search?: string | null;

  /**
   * Filter by permissions the user has on groups.
   */
  permissionScope?: XGitLabGroupPermission | null;

  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IProjectMembershipsOnXGitLabUserCoreArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IReviewRequestedMergeRequestsOnXGitLabUserCoreArguments {
  /**
   * Array of IIDs of merge requests, for example `[1, 2]`.
   */
  iids?: Array<string> | null;

  /**
   * Array of source branch names.
   * All resolved merge requests will have one of these branches as their source.
   */
  sourceBranches?: Array<string> | null;

  /**
   * Array of target branch names.
   * All resolved merge requests will have one of these branches as their target.
   */
  targetBranches?: Array<string> | null;

  /**
   * Merge request state. If provided, all resolved merge requests will have this state.
   */
  state?: XGitLabMergeRequestState | null;

  /**
   * Array of label names. All resolved merge requests will have all of these labels.
   */
  labels?: Array<string> | null;

  /**
   * Merge requests merged after this date.
   */
  mergedAfter?: any | null;

  /**
   * Merge requests merged before this date.
   */
  mergedBefore?: any | null;

  /**
   * Title of the milestone.
   */
  milestoneTitle?: string | null;

  /**
   * Sort merge requests by this criteria.
   * @default "created_desc"
   */
  sort?: XGitLabMergeRequestSort | null;

  /**
   * Merge requests created after this timestamp.
   */
  createdAfter?: any | null;

  /**
   * Merge requests created before this timestamp.
   */
  createdBefore?: any | null;

  /**
   * List of negated arguments.
   * Warning: this argument is experimental and a subject to change in future.
   */
  not?: IXGitLabMergeRequestsResolverNegatedParams | null;

  /**
   * The full-path of the project the authored merge requests should be in.
   * Incompatible with projectId.
   */
  projectPath?: string | null;

  /**
   * The global ID of the project the authored merge requests should be in.
   * Incompatible with projectPath.
   */
  projectId?: any | null;

  /**
   * Username of the author.
   */
  authorUsername?: string | null;

  /**
   * Username of the assignee.
   */
  assigneeUsername?: string | null;

  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface ISnippetsOnXGitLabUserCoreArguments {
  /**
   * Array of global snippet IDs. For example, `gid://gitlab/ProjectSnippet/1`.
   */
  ids?: Array<any> | null;

  /**
   * Visibility of the snippet.
   */
  visibility?: XGitLabVisibilityScopesEnum | null;

  /**
   * Type of snippet.
   */
  type?: XGitLabTypeEnum | null;

  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IStarredProjectsOnXGitLabUserCoreArguments {
  /**
   * Search query.
   */
  search?: string | null;

  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface ITimelogsOnXGitLabUserCoreArguments {
  /**
   * List timelogs within a date range where the logged date is equal to or after startDate.
   */
  startDate?: any | null;

  /**
   * List timelogs within a date range where the logged date is equal to or before endDate.
   */
  endDate?: any | null;

  /**
   * List timelogs within a time range where the logged time is equal to or after startTime.
   */
  startTime?: any | null;

  /**
   * List timelogs within a time range where the logged time is equal to or before endTime.
   */
  endTime?: any | null;

  /**
   * List timelogs for a project.
   */
  projectId?: any | null;

  /**
   * List timelogs for a group.
   */
  groupId?: any | null;

  /**
   * List timelogs for a user.
   */
  username?: string | null;

  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface ITodosOnXGitLabUserCoreArguments {
  /**
   * Action to be filtered.
   */
  action?: Array<XGitLabTodoActionEnum> | null;

  /**
   * ID of an author.
   */
  authorId?: Array<string> | null;

  /**
   * ID of a project.
   */
  projectId?: Array<string> | null;

  /**
   * ID of a group.
   */
  groupId?: Array<string> | null;

  /**
   * State of the todo.
   */
  state?: Array<XGitLabTodoStateEnum> | null;

  /**
   * Type of the todo.
   */
  type?: Array<XGitLabTodoTargetEnum> | null;

  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

/**
 * The connection type for UserCore.
 */
export interface IXGitLabUserCoreConnection {
  __typename: '_xGitLabUserCoreConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitLabUserCoreEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitLabUserCore | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitLabPageInfo;
}

/**
 * An edge in a connection.
 */
export interface IXGitLabUserCoreEdge {
  __typename: '_xGitLabUserCoreEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitLabUserCore | null;
}

/**
 * Information about a merge request given a specific user.
 *
 * This object has two parts to its state: a `User` and a `MergeRequest`. All
 * fields relate to interactions between the two entities.
 */
export interface IXGitLabUserMergeRequestInteraction {
  __typename: '_xGitLabUserMergeRequestInteraction';

  /**
   * Approval rules that apply to this user for this merge request.
   */
  applicableApprovalRules: Array<IXGitLabApprovalRule> | null;

  /**
   * Whether this user has approved this merge request.
   */
  approved: boolean;

  /**
   * Whether this user can merge this merge request.
   */
  canMerge: boolean;

  /**
   * Whether this user can update this merge request.
   */
  canUpdate: boolean;

  /**
   * State of the review by this user.
   */
  reviewState: XGitLabMergeRequestReviewState | null;

  /**
   * Whether this user has provided a review for this merge request.
   */
  reviewed: boolean;
}

export interface IXGitLabUserPermissions {
  __typename: '_xGitLabUserPermissions';

  /**
   * Indicates the user can perform `create_snippet` on this resource
   */
  createSnippet: boolean;
}

/**
 * Possible states of a user
 */
export const enum XGitLabUserState {
  /**
   * User is active and is able to use the system.
   */
  active = 'active',

  /**
   * User has been blocked and is prevented from using the system.
   */
  blocked = 'blocked',

  /**
   * User is no longer active and is unable to use the system.
   */
  deactivated = 'deactivated',
}

export interface IXGitLabUserStatus {
  __typename: '_xGitLabUserStatus';

  /**
   * User availability status.
   */
  availability: XGitLabAvailabilityEnum;

  /**
   * String representation of emoji.
   */
  emoji: string | null;

  /**
   * User status message.
   */
  message: string | null;

  /**
   * HTML of the user status message
   */
  messageHtml: string | null;
}

export const enum XGitLabVisibilityLevelsEnum {
  /**
   * Private visibility level.
   */
  private = 'private',

  /**
   * Internal visibility level.
   */
  internal = 'internal',

  /**
   * Public visibility level.
   */
  public = 'public',
}

export const enum XGitLabVisibilityScopesEnum {
  /**
   * Snippet is visible only to the snippet creator.
   */
  private = 'private',

  /**
   * Snippet is visible for any logged in user except external users.
   */
  internal = 'internal',

  /**
   * Snippet can be accessed without any authentication.
   */
  public = 'public',
}

/**
 * Represents the count of vulnerabilities by severity on a particular day. This data is retained for 365 days
 */
export interface IXGitLabVulnerabilitiesCountByDay {
  __typename: '_xGitLabVulnerabilitiesCountByDay';

  /**
   * Total number of vulnerabilities on a particular day with critical severity
   */
  critical: number;

  /**
   * Date for the count.
   */
  date: any;

  /**
   * Total number of vulnerabilities on a particular day with high severity
   */
  high: number;

  /**
   * Total number of vulnerabilities on a particular day with info severity
   */
  info: number;

  /**
   * Total number of vulnerabilities on a particular day with low severity
   */
  low: number;

  /**
   * Total number of vulnerabilities on a particular day with medium severity
   */
  medium: number;

  /**
   * Total number of vulnerabilities on a particular day.
   */
  total: number;

  /**
   * Total number of vulnerabilities on a particular day with unknown severity
   */
  unknown: number;
}

/**
 * The connection type for VulnerabilitiesCountByDay.
 */
export interface IXGitLabVulnerabilitiesCountByDayConnection {
  __typename: '_xGitLabVulnerabilitiesCountByDayConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitLabVulnerabilitiesCountByDayEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitLabVulnerabilitiesCountByDay | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitLabPageInfo;
}

/**
 * An edge in a connection.
 */
export interface IXGitLabVulnerabilitiesCountByDayEdge {
  __typename: '_xGitLabVulnerabilitiesCountByDayEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitLabVulnerabilitiesCountByDay | null;
}

/**
 * Represents a vulnerability
 */
export interface IXGitLabVulnerability {
  __typename: '_xGitLabVulnerability';

  /**
   * Timestamp of when the vulnerability state was changed to confirmed.
   */
  confirmedAt: any | null;

  /**
   * User that confirmed the vulnerability.
   */
  confirmedBy: IXGitLabUserCore | null;

  /**
   * Description of the vulnerability.
   */
  description: string | null;

  /**
   * Details of the vulnerability.
   */
  details: Array<_xGitLabVulnerabilityDetail>;

  /**
   * Timestamp of when the vulnerability was first detected.
   */
  detectedAt: any;

  /**
   * All discussions on this noteable.
   */
  discussions: IXGitLabDiscussionConnection;

  /**
   * Timestamp of when the vulnerability state was changed to dismissed.
   */
  dismissedAt: any | null;

  /**
   * User that dismissed the vulnerability.
   */
  dismissedBy: IXGitLabUserCore | null;

  /**
   * List of external issue links related to the vulnerability.
   */
  externalIssueLinks: IXGitLabVulnerabilityExternalIssueLinkConnection;

  /**
   * Indicates whether the vulnerability is a false positive.
   */
  falsePositive: boolean | null;

  /**
   * Indicates whether there is a solution available for this vulnerability.
   */
  hasSolutions: boolean | null;

  /**
   * GraphQL ID of the vulnerability.
   */
  id: string;

  /**
   * Identifiers of the vulnerability.
   */
  identifiers: Array<IXGitLabVulnerabilityIdentifier>;

  /**
   * List of issue links related to the vulnerability.
   */
  issueLinks: IXGitLabVulnerabilityIssueLinkConnection;

  /**
   * List of links associated with the vulnerability.
   */
  links: Array<IXGitLabVulnerabilityLink>;

  /**
   * Location metadata for the vulnerability. Its fields depend on the type of security scan that found the vulnerability.
   */
  location: _xGitLabVulnerabilityLocation | null;

  /**
   * Merge request that fixes the vulnerability.
   */
  mergeRequest: IXGitLabMergeRequest | null;

  /**
   * Short text description of the vulnerability. This may include the finding's specific information.
   */
  message: string | null;

  /**
   * All notes on this noteable.
   */
  notes: IXGitLabNoteConnection;

  /**
   * Primary identifier of the vulnerability.
   */
  primaryIdentifier: IXGitLabVulnerabilityIdentifier | null;

  /**
   * Project on which the vulnerability was found.
   */
  project: IXGitLabProject | null;

  /**
   * Type of the security report that found the vulnerability (SAST,
   * DEPENDENCY_SCANNING, CONTAINER_SCANNING, DAST, SECRET_DETECTION,
   * COVERAGE_FUZZING, API_FUZZING, CLUSTER_IMAGE_SCANNING, GENERIC). `Scan Type` in the UI.
   */
  reportType: XGitLabVulnerabilityReportType | null;

  /**
   * Timestamp of when the vulnerability state was changed to resolved.
   */
  resolvedAt: any | null;

  /**
   * User that resolved the vulnerability.
   */
  resolvedBy: IXGitLabUserCore | null;

  /**
   * Indicates whether the vulnerability is fixed on the default branch or not.
   */
  resolvedOnDefaultBranch: boolean;

  /**
   * Scanner metadata for the vulnerability.
   */
  scanner: IXGitLabVulnerabilityScanner | null;

  /**
   * Severity of the vulnerability (INFO, UNKNOWN, LOW, MEDIUM, HIGH, CRITICAL)
   */
  severity: XGitLabVulnerabilitySeverity | null;

  /**
   * State of the vulnerability (DETECTED, CONFIRMED, RESOLVED, DISMISSED)
   */
  state: XGitLabVulnerabilityState | null;

  /**
   * Title of the vulnerability.
   */
  title: string | null;

  /**
   * Number of user notes attached to the vulnerability.
   */
  userNotesCount: number;

  /**
   * Permissions for the current user on the resource
   */
  userPermissions: IXGitLabVulnerabilityPermissions;

  /**
   * URL to the vulnerability's details page.
   */
  vulnerabilityPath: string | null;
}

export interface IDiscussionsOnXGitLabVulnerabilityArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IExternalIssueLinksOnXGitLabVulnerabilityArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface IIssueLinksOnXGitLabVulnerabilityArguments {
  /**
   * Filter issue links by link type.
   */
  linkType?: XGitLabVulnerabilityIssueLinkType | null;

  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

export interface INotesOnXGitLabVulnerabilityArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

/**
 * Confidence that a given vulnerability is present in the codebase.
 */
export const enum XGitLabVulnerabilityConfidence {
  /**
   * Ignore confidence
   */
  IGNORE = 'IGNORE',

  /**
   * Unknown confidence
   */
  UNKNOWN = 'UNKNOWN',

  /**
   * Experimental confidence
   */
  EXPERIMENTAL = 'EXPERIMENTAL',

  /**
   * Low confidence
   */
  LOW = 'LOW',

  /**
   * Medium confidence
   */
  MEDIUM = 'MEDIUM',

  /**
   * High confidence
   */
  HIGH = 'HIGH',

  /**
   * Confirmed confidence
   */
  CONFIRMED = 'CONFIRMED',
}

/**
 * Autogenerated input type of VulnerabilityConfirm
 */
export interface IXGitLabVulnerabilityConfirmInput {
  /**
   * ID of the vulnerability to be confirmed.
   */
  id: any;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of VulnerabilityConfirm
 */
export interface IXGitLabVulnerabilityConfirmPayload {
  __typename: '_xGitLabVulnerabilityConfirmPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * Errors encountered during execution of the mutation.
   */
  errors: Array<string>;

  /**
   * Vulnerability after state change.
   */
  vulnerability: IXGitLabVulnerability | null;
}

/**
 * The connection type for Vulnerability.
 */
export interface IXGitLabVulnerabilityConnection {
  __typename: '_xGitLabVulnerabilityConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitLabVulnerabilityEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitLabVulnerability | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitLabPageInfo;
}

/**
 * Autogenerated input type of VulnerabilityCreate
 */
export interface IXGitLabVulnerabilityCreateInput {
  /**
   * ID of the project to attach the vulnerability to.
   */
  project: any;

  /**
   * Name of the vulnerability.
   */
  name: string;

  /**
   * Long text section that describes the vulnerability in more detail.
   */
  description: string;

  /**
   * Information about the scanner used to discover the vulnerability.
   */
  scanner: IXGitLabVulnerabilityScannerInput;

  /**
   * Array of CVE or CWE identifiers for the vulnerability.
   */
  identifiers: Array<IXGitLabVulnerabilityIdentifierInput>;

  /**
   * State of the vulnerability (defaults to `detected`).
   * @default "DETECTED"
   */
  state?: XGitLabVulnerabilityState | null;

  /**
   * Severity of the vulnerability (defaults to `unknown`).
   * @default "UNKNOWN"
   */
  severity?: XGitLabVulnerabilitySeverity | null;

  /**
   * Confidence of the vulnerability (defaults to `unknown`).
   * @default "UNKNOWN"
   */
  confidence?: XGitLabVulnerabilityConfidence | null;

  /**
   * Instructions for how to fix the vulnerability.
   */
  solution?: string | null;

  /**
   * Short text section that describes the vulnerability. This may include the finding's specific information.
   */
  message?: string | null;

  /**
   * Timestamp of when the vulnerability was first detected (defaults to creation time).
   */
  detectedAt?: any | null;

  /**
   * Timestamp of when the vulnerability state changed to confirmed (defaults to creation time if status is `confirmed`).
   */
  confirmedAt?: any | null;

  /**
   * Timestamp of when the vulnerability state changed to resolved (defaults to creation time if status is `resolved`).
   */
  resolvedAt?: any | null;

  /**
   * Timestamp of when the vulnerability state changed to dismissed (defaults to creation time if status is `dismissed`).
   */
  dismissedAt?: any | null;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of VulnerabilityCreate
 */
export interface IXGitLabVulnerabilityCreatePayload {
  __typename: '_xGitLabVulnerabilityCreatePayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * Errors encountered during execution of the mutation.
   */
  errors: Array<string>;

  /**
   * Vulnerability created.
   */
  vulnerability: IXGitLabVulnerability | null;
}

/**
 * Represents a vulnerability detail field. The fields with data will depend on the vulnerability detail type
 */
export type _xGitLabVulnerabilityDetail =
  | IXGitLabVulnerabilityDetailBase
  | IXGitLabVulnerabilityDetailBoolean
  | IXGitLabVulnerabilityDetailCode
  | IXGitLabVulnerabilityDetailCommit
  | IXGitLabVulnerabilityDetailDiff
  | IXGitLabVulnerabilityDetailFileLocation
  | IXGitLabVulnerabilityDetailInt
  | IXGitLabVulnerabilityDetailList
  | IXGitLabVulnerabilityDetailMarkdown
  | IXGitLabVulnerabilityDetailModuleLocation
  | IXGitLabVulnerabilityDetailTable
  | IXGitLabVulnerabilityDetailText
  | IXGitLabVulnerabilityDetailUrl;

/**
 * Represents the vulnerability details base
 */
export interface IXGitLabVulnerabilityDetailBase {
  __typename: '_xGitLabVulnerabilityDetailBase';

  /**
   * Description of the field.
   */
  description: string | null;

  /**
   * Name of the field.
   */
  fieldName: string | null;

  /**
   * Name of the field.
   */
  name: string | null;
}

/**
 * Represents the vulnerability details boolean value
 */
export interface IXGitLabVulnerabilityDetailBoolean {
  __typename: '_xGitLabVulnerabilityDetailBoolean';

  /**
   * Description of the field.
   */
  description: string | null;

  /**
   * Name of the field.
   */
  fieldName: string | null;

  /**
   * Name of the field.
   */
  name: string | null;

  /**
   * Value of the field.
   */
  value: boolean;
}

/**
 * Represents the vulnerability details code field
 */
export interface IXGitLabVulnerabilityDetailCode {
  __typename: '_xGitLabVulnerabilityDetailCode';

  /**
   * Description of the field.
   */
  description: string | null;

  /**
   * Name of the field.
   */
  fieldName: string | null;

  /**
   * Language of the code.
   */
  lang: string | null;

  /**
   * Name of the field.
   */
  name: string | null;

  /**
   * Source code.
   */
  value: string;
}

/**
 * Represents the vulnerability details commit field
 */
export interface IXGitLabVulnerabilityDetailCommit {
  __typename: '_xGitLabVulnerabilityDetailCommit';

  /**
   * Description of the field.
   */
  description: string | null;

  /**
   * Name of the field.
   */
  fieldName: string | null;

  /**
   * Name of the field.
   */
  name: string | null;

  /**
   * Commit SHA value.
   */
  value: string;
}

/**
 * Represents the vulnerability details diff field
 */
export interface IXGitLabVulnerabilityDetailDiff {
  __typename: '_xGitLabVulnerabilityDetailDiff';

  /**
   * Value of the field after the change.
   */
  after: string;

  /**
   * Value of the field before the change.
   */
  before: string;

  /**
   * Description of the field.
   */
  description: string | null;

  /**
   * Name of the field.
   */
  fieldName: string | null;

  /**
   * Name of the field.
   */
  name: string | null;
}

/**
 * Represents the vulnerability details location within a file in the project
 */
export interface IXGitLabVulnerabilityDetailFileLocation {
  __typename: '_xGitLabVulnerabilityDetailFileLocation';

  /**
   * Description of the field.
   */
  description: string | null;

  /**
   * Name of the field.
   */
  fieldName: string | null;

  /**
   * File name.
   */
  fileName: string;

  /**
   * End line number of the file location.
   */
  lineEnd: number;

  /**
   * Start line number of the file location.
   */
  lineStart: number;

  /**
   * Name of the field.
   */
  name: string | null;
}

/**
 * Represents the vulnerability details integer value
 */
export interface IXGitLabVulnerabilityDetailInt {
  __typename: '_xGitLabVulnerabilityDetailInt';

  /**
   * Description of the field.
   */
  description: string | null;

  /**
   * Name of the field.
   */
  fieldName: string | null;

  /**
   * Name of the field.
   */
  name: string | null;

  /**
   * Value of the field.
   */
  value: number;
}

/**
 * Represents the vulnerability details list value
 */
export interface IXGitLabVulnerabilityDetailList {
  __typename: '_xGitLabVulnerabilityDetailList';

  /**
   * Description of the field.
   */
  description: string | null;

  /**
   * Name of the field.
   */
  fieldName: string | null;

  /**
   * List of details.
   */
  items: Array<_xGitLabVulnerabilityDetail>;

  /**
   * Name of the field.
   */
  name: string | null;
}

/**
 * Represents the vulnerability details Markdown field
 */
export interface IXGitLabVulnerabilityDetailMarkdown {
  __typename: '_xGitLabVulnerabilityDetailMarkdown';

  /**
   * Description of the field.
   */
  description: string | null;

  /**
   * Name of the field.
   */
  fieldName: string | null;

  /**
   * Name of the field.
   */
  name: string | null;

  /**
   * Value of the Markdown field.
   */
  value: string;
}

/**
 * Represents the vulnerability details location within a file in the project
 */
export interface IXGitLabVulnerabilityDetailModuleLocation {
  __typename: '_xGitLabVulnerabilityDetailModuleLocation';

  /**
   * Description of the field.
   */
  description: string | null;

  /**
   * Name of the field.
   */
  fieldName: string | null;

  /**
   * Module name.
   */
  moduleName: string;

  /**
   * Name of the field.
   */
  name: string | null;

  /**
   * Offset of the module location.
   */
  offset: number;
}

/**
 * Represents the vulnerability details table value
 */
export interface IXGitLabVulnerabilityDetailTable {
  __typename: '_xGitLabVulnerabilityDetailTable';

  /**
   * Description of the field.
   */
  description: string | null;

  /**
   * Name of the field.
   */
  fieldName: string | null;

  /**
   * Table headers.
   */
  headers: Array<_xGitLabVulnerabilityDetail>;

  /**
   * Name of the field.
   */
  name: string | null;

  /**
   * Table rows.
   */
  rows: Array<_xGitLabVulnerabilityDetail>;
}

/**
 * Represents the vulnerability details text field
 */
export interface IXGitLabVulnerabilityDetailText {
  __typename: '_xGitLabVulnerabilityDetailText';

  /**
   * Description of the field.
   */
  description: string | null;

  /**
   * Name of the field.
   */
  fieldName: string | null;

  /**
   * Name of the field.
   */
  name: string | null;

  /**
   * Value of the text field.
   */
  value: string;
}

/**
 * Represents the vulnerability details URL field
 */
export interface IXGitLabVulnerabilityDetailUrl {
  __typename: '_xGitLabVulnerabilityDetailUrl';

  /**
   * Description of the field.
   */
  description: string | null;

  /**
   * Name of the field.
   */
  fieldName: string | null;

  /**
   * Href of the URL.
   */
  href: string;

  /**
   * Name of the field.
   */
  name: string | null;

  /**
   * Text of the URL.
   */
  text: string | null;
}

/**
 * The dismissal reason of the Vulnerability
 */
export const enum XGitLabVulnerabilityDismissalReason {
  /**
   * The vulnerability is known, and has not been remediated or mitigated, but is considered to be an acceptable business risk.
   */
  ACCEPTABLE_RISK = 'ACCEPTABLE_RISK',

  /**
   * An error in reporting in which a test result incorrectly indicates the
   * presence of a vulnerability in a system when the vulnerability is not present.
   */
  FALSE_POSITIVE = 'FALSE_POSITIVE',

  /**
   * A management, operational, or technical control (that is, safeguard or
   * countermeasure) employed by an organization that provides equivalent or
   * comparable protection for an information system.
   */
  MITIGATING_CONTROL = 'MITIGATING_CONTROL',

  /**
   * The finding is not a vulnerability because it is part of a test or is test data.
   */
  USED_IN_TESTS = 'USED_IN_TESTS',

  /**
   * The vulnerability is known, and has not been remediated or mitigated, but is
   * considered to be in a part of the application that will not be updated.
   */
  NOT_APPLICABLE = 'NOT_APPLICABLE',
}

/**
 * Autogenerated input type of VulnerabilityDismiss
 */
export interface IXGitLabVulnerabilityDismissInput {
  /**
   * ID of the vulnerability to be dismissed.
   */
  id: any;

  /**
   * Comment why vulnerability should be dismissed.
   */
  comment?: string | null;

  /**
   * Reason why vulnerability should be dismissed.
   */
  dismissalReason?: XGitLabVulnerabilityDismissalReason | null;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of VulnerabilityDismiss
 */
export interface IXGitLabVulnerabilityDismissPayload {
  __typename: '_xGitLabVulnerabilityDismissPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * Errors encountered during execution of the mutation.
   */
  errors: Array<string>;

  /**
   * Vulnerability after dismissal.
   */
  vulnerability: IXGitLabVulnerability | null;
}

/**
 * An edge in a connection.
 */
export interface IXGitLabVulnerabilityEdge {
  __typename: '_xGitLabVulnerabilityEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitLabVulnerability | null;
}

/**
 * Represents an external issue link of a vulnerability
 */
export interface IXGitLabVulnerabilityExternalIssueLink {
  __typename: '_xGitLabVulnerabilityExternalIssueLink';

  /**
   * The external issue attached to the issue link.
   */
  externalIssue: IXGitLabExternalIssue | null;

  /**
   * GraphQL ID of the external issue link.
   */
  id: any;

  /**
   * Type of the external issue link.
   */
  linkType: XGitLabVulnerabilityExternalIssueLinkType;
}

/**
 * The connection type for VulnerabilityExternalIssueLink.
 */
export interface IXGitLabVulnerabilityExternalIssueLinkConnection {
  __typename: '_xGitLabVulnerabilityExternalIssueLinkConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitLabVulnerabilityExternalIssueLinkEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitLabVulnerabilityExternalIssueLink | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitLabPageInfo;
}

/**
 * Autogenerated input type of VulnerabilityExternalIssueLinkCreate
 */
export interface IXGitLabVulnerabilityExternalIssueLinkCreateInput {
  /**
   * ID of the vulnerability.
   */
  id: any;

  /**
   * Type of the external issue link.
   */
  linkType: XGitLabVulnerabilityExternalIssueLinkType;

  /**
   * External tracker type of the external issue link.
   */
  externalTracker: XGitLabVulnerabilityExternalIssueLinkExternalTracker;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of VulnerabilityExternalIssueLinkCreate
 */
export interface IXGitLabVulnerabilityExternalIssueLinkCreatePayload {
  __typename: '_xGitLabVulnerabilityExternalIssueLinkCreatePayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * Errors encountered during execution of the mutation.
   */
  errors: Array<string>;

  /**
   * Created external issue link.
   */
  externalIssueLink: IXGitLabVulnerabilityExternalIssueLink | null;
}

/**
 * Autogenerated input type of VulnerabilityExternalIssueLinkDestroy
 */
export interface IXGitLabVulnerabilityExternalIssueLinkDestroyInput {
  /**
   * Global ID of the vulnerability external issue link.
   */
  id: any;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of VulnerabilityExternalIssueLinkDestroy
 */
export interface IXGitLabVulnerabilityExternalIssueLinkDestroyPayload {
  __typename: '_xGitLabVulnerabilityExternalIssueLinkDestroyPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * Errors encountered during execution of the mutation.
   */
  errors: Array<string>;
}

/**
 * An edge in a connection.
 */
export interface IXGitLabVulnerabilityExternalIssueLinkEdge {
  __typename: '_xGitLabVulnerabilityExternalIssueLinkEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitLabVulnerabilityExternalIssueLink | null;
}

/**
 * The external tracker of the external issue link related to a vulnerability
 */
export const enum XGitLabVulnerabilityExternalIssueLinkExternalTracker {
  /**
   * Jira external tracker
   */
  JIRA = 'JIRA',
}

/**
 * The type of the external issue link related to a vulnerability
 */
export const enum XGitLabVulnerabilityExternalIssueLinkType {
  /**
   * Created link type
   */
  CREATED = 'CREATED',
}

/**
 * The grade of the vulnerable project
 */
export const enum XGitLabVulnerabilityGrade {
  /**
   * A grade
   */
  A = 'A',

  /**
   * B grade
   */
  B = 'B',

  /**
   * C grade
   */
  C = 'C',

  /**
   * D grade
   */
  D = 'D',

  /**
   * F grade
   */
  F = 'F',
}

/**
 * Represents a vulnerability identifier
 */
export interface IXGitLabVulnerabilityIdentifier {
  __typename: '_xGitLabVulnerabilityIdentifier';

  /**
   * External ID of the vulnerability identifier.
   */
  externalId: string | null;

  /**
   * External type of the vulnerability identifier.
   */
  externalType: string | null;

  /**
   * Name of the vulnerability identifier.
   */
  name: string | null;

  /**
   * URL of the vulnerability identifier.
   */
  url: string | null;
}

export interface IXGitLabVulnerabilityIdentifierInput {
  /**
   * Name of the vulnerability identifier.
   */
  name: string;

  /**
   * URL of the vulnerability identifier.
   */
  url: string;

  /**
   * External type of the vulnerability identifier.
   */
  externalType?: string | null;

  /**
   * External ID of the vulnerability identifier.
   */
  externalId?: string | null;
}

/**
 * Represents an issue link of a vulnerability
 */
export interface IXGitLabVulnerabilityIssueLink {
  __typename: '_xGitLabVulnerabilityIssueLink';

  /**
   * GraphQL ID of the vulnerability.
   */
  id: string;

  /**
   * Issue attached to issue link.
   */
  issue: IXGitLabIssue;

  /**
   * Type of the issue link.
   */
  linkType: XGitLabVulnerabilityIssueLinkType;
}

/**
 * The connection type for VulnerabilityIssueLink.
 */
export interface IXGitLabVulnerabilityIssueLinkConnection {
  __typename: '_xGitLabVulnerabilityIssueLinkConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitLabVulnerabilityIssueLinkEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitLabVulnerabilityIssueLink | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitLabPageInfo;
}

/**
 * An edge in a connection.
 */
export interface IXGitLabVulnerabilityIssueLinkEdge {
  __typename: '_xGitLabVulnerabilityIssueLinkEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitLabVulnerabilityIssueLink | null;
}

/**
 * The type of the issue link related to a vulnerability
 */
export const enum XGitLabVulnerabilityIssueLinkType {
  /**
   * Has a related issue
   */
  RELATED = 'RELATED',

  /**
   * Issue is created for the vulnerability
   */
  CREATED = 'CREATED',
}

/**
 * Represents a link related to a vulnerability
 */
export interface IXGitLabVulnerabilityLink {
  __typename: '_xGitLabVulnerabilityLink';

  /**
   * Name of the link.
   */
  name: string | null;

  /**
   * URL of the link.
   */
  url: string;
}

/**
 * Represents a vulnerability location. The fields with data will depend on the vulnerability report type
 */
export type _xGitLabVulnerabilityLocation =
  | IXGitLabVulnerabilityLocationContainerScanning
  | IXGitLabVulnerabilityLocationCoverageFuzzing
  | IXGitLabVulnerabilityLocationDast
  | IXGitLabVulnerabilityLocationDependencyScanning
  | IXGitLabVulnerabilityLocationGeneric
  | IXGitLabVulnerabilityLocationSast
  | IXGitLabVulnerabilityLocationSecretDetection;

/**
 * Represents the location of a vulnerability found by a container security scan
 */
export interface IXGitLabVulnerabilityLocationContainerScanning {
  __typename: '_xGitLabVulnerabilityLocationContainerScanning';

  /**
   * Dependency containing the vulnerability.
   */
  dependency: IXGitLabVulnerableDependency | null;

  /**
   * Name of the vulnerable container image.
   */
  image: string | null;

  /**
   * Operating system that runs on the vulnerable container image.
   */
  operatingSystem: string | null;
}

/**
 * Represents the location of a vulnerability found by a Coverage Fuzzing scan
 */
export interface IXGitLabVulnerabilityLocationCoverageFuzzing {
  __typename: '_xGitLabVulnerabilityLocationCoverageFuzzing';

  /**
   * Blob path to the vulnerable file.
   */
  blobPath: string | null;

  /**
   * Number of the last relevant line in the vulnerable file.
   */
  endLine: string | null;

  /**
   * Path to the vulnerable file.
   */
  file: string | null;

  /**
   * Number of the first relevant line in the vulnerable file.
   */
  startLine: string | null;

  /**
   * Class containing the vulnerability.
   */
  vulnerableClass: string | null;

  /**
   * Method containing the vulnerability.
   */
  vulnerableMethod: string | null;
}

/**
 * Represents the location of a vulnerability found by a DAST scan
 */
export interface IXGitLabVulnerabilityLocationDast {
  __typename: '_xGitLabVulnerabilityLocationDast';

  /**
   * Domain name of the vulnerable request.
   */
  hostname: string | null;

  /**
   * Query parameter for the URL on which the vulnerability occurred.
   */
  param: string | null;

  /**
   * URL path and query string of the vulnerable request.
   */
  path: string | null;

  /**
   * HTTP method of the vulnerable request.
   */
  requestMethod: string | null;
}

/**
 * Represents the location of a vulnerability found by a dependency security scan
 */
export interface IXGitLabVulnerabilityLocationDependencyScanning {
  __typename: '_xGitLabVulnerabilityLocationDependencyScanning';

  /**
   * Blob path to the vulnerable file.
   */
  blobPath: string | null;

  /**
   * Dependency containing the vulnerability.
   */
  dependency: IXGitLabVulnerableDependency | null;

  /**
   * Path to the vulnerable file.
   */
  file: string | null;
}

/**
 * Represents the location of a vulnerability found by a generic scanner.
 */
export interface IXGitLabVulnerabilityLocationGeneric {
  __typename: '_xGitLabVulnerabilityLocationGeneric';

  /**
   * Free-form description of where the vulnerability is located.
   */
  description: string | null;
}

/**
 * Represents the location of a vulnerability found by a SAST scan
 */
export interface IXGitLabVulnerabilityLocationSast {
  __typename: '_xGitLabVulnerabilityLocationSast';

  /**
   * Blob path to the vulnerable file.
   */
  blobPath: string | null;

  /**
   * Number of the last relevant line in the vulnerable file.
   */
  endLine: string | null;

  /**
   * Path to the vulnerable file.
   */
  file: string | null;

  /**
   * Number of the first relevant line in the vulnerable file.
   */
  startLine: string | null;

  /**
   * Class containing the vulnerability.
   */
  vulnerableClass: string | null;

  /**
   * Method containing the vulnerability.
   */
  vulnerableMethod: string | null;
}

/**
 * Represents the location of a vulnerability found by a secret detection scan
 */
export interface IXGitLabVulnerabilityLocationSecretDetection {
  __typename: '_xGitLabVulnerabilityLocationSecretDetection';

  /**
   * Blob path to the vulnerable file.
   */
  blobPath: string | null;

  /**
   * Number of the last relevant line in the vulnerable file.
   */
  endLine: string | null;

  /**
   * Path to the vulnerable file.
   */
  file: string | null;

  /**
   * Number of the first relevant line in the vulnerable file.
   */
  startLine: string | null;

  /**
   * Class containing the vulnerability.
   */
  vulnerableClass: string | null;

  /**
   * Method containing the vulnerability.
   */
  vulnerableMethod: string | null;
}

/**
 * Check permissions for the current user on a vulnerability
 */
export interface IXGitLabVulnerabilityPermissions {
  __typename: '_xGitLabVulnerabilityPermissions';

  /**
   * Indicates the user can perform `admin_vulnerability` on this resource
   */
  adminVulnerability: boolean;

  /**
   * Indicates the user can perform `admin_vulnerability_external_issue_link` on this resource
   */
  adminVulnerabilityExternalIssueLink: boolean;

  /**
   * Indicates the user can perform `admin_vulnerability_issue_link` on this resource
   */
  adminVulnerabilityIssueLink: boolean;

  /**
   * Indicates the user can perform `create_vulnerability` on this resource
   */
  createVulnerability: boolean;

  /**
   * Indicates the user can perform `create_vulnerability_export` on this resource
   */
  createVulnerabilityExport: boolean;

  /**
   * Indicates the user can perform `create_vulnerability_feedback` on this resource
   */
  createVulnerabilityFeedback: boolean;

  /**
   * Indicates the user can perform `destroy_vulnerability_feedback` on this resource
   */
  destroyVulnerabilityFeedback: boolean;

  /**
   * Indicates the user can perform `read_vulnerability_feedback` on this resource
   */
  readVulnerabilityFeedback: boolean;

  /**
   * Indicates the user can perform `update_vulnerability_feedback` on this resource
   */
  updateVulnerabilityFeedback: boolean;
}

/**
 * The type of the security scan that found the vulnerability
 */
export const enum XGitLabVulnerabilityReportType {
  /**
   * SAST report
   */
  SAST = 'SAST',

  /**
   * Dependency Scanning report
   */
  DEPENDENCY_SCANNING = 'DEPENDENCY_SCANNING',

  /**
   * Container Scanning report
   */
  CONTAINER_SCANNING = 'CONTAINER_SCANNING',

  /**
   * DAST report
   */
  DAST = 'DAST',

  /**
   * Secret Detection report
   */
  SECRET_DETECTION = 'SECRET_DETECTION',

  /**
   * Coverage Fuzzing report
   */
  COVERAGE_FUZZING = 'COVERAGE_FUZZING',

  /**
   * API Fuzzing report
   */
  API_FUZZING = 'API_FUZZING',

  /**
   * Cluster Image Scanning report
   */
  CLUSTER_IMAGE_SCANNING = 'CLUSTER_IMAGE_SCANNING',

  /**
   * Generic report
   */
  GENERIC = 'GENERIC',
}

/**
 * Autogenerated input type of VulnerabilityResolve
 */
export interface IXGitLabVulnerabilityResolveInput {
  /**
   * ID of the vulnerability to be resolved.
   */
  id: any;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of VulnerabilityResolve
 */
export interface IXGitLabVulnerabilityResolvePayload {
  __typename: '_xGitLabVulnerabilityResolvePayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * Errors encountered during execution of the mutation.
   */
  errors: Array<string>;

  /**
   * Vulnerability after state change.
   */
  vulnerability: IXGitLabVulnerability | null;
}

/**
 * Autogenerated input type of VulnerabilityRevertToDetected
 */
export interface IXGitLabVulnerabilityRevertToDetectedInput {
  /**
   * ID of the vulnerability to be reverted.
   */
  id: any;

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string | null;
}

/**
 * Autogenerated return type of VulnerabilityRevertToDetected
 */
export interface IXGitLabVulnerabilityRevertToDetectedPayload {
  __typename: '_xGitLabVulnerabilityRevertToDetectedPayload';

  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId: string | null;

  /**
   * Errors encountered during execution of the mutation.
   */
  errors: Array<string>;

  /**
   * Vulnerability after revert.
   */
  vulnerability: IXGitLabVulnerability | null;
}

/**
 * Represents a vulnerability scanner
 */
export interface IXGitLabVulnerabilityScanner {
  __typename: '_xGitLabVulnerabilityScanner';

  /**
   * External ID of the vulnerability scanner.
   */
  externalId: string | null;

  /**
   * ID of the scanner.
   */
  id: string | null;

  /**
   * Name of the vulnerability scanner.
   */
  name: string | null;

  /**
   * Type of the vulnerability report.
   */
  reportType: XGitLabVulnerabilityReportType | null;

  /**
   * Vendor of the vulnerability scanner.
   */
  vendor: string | null;
}

/**
 * The connection type for VulnerabilityScanner.
 */
export interface IXGitLabVulnerabilityScannerConnection {
  __typename: '_xGitLabVulnerabilityScannerConnection';

  /**
   * A list of edges.
   */
  edges: Array<IXGitLabVulnerabilityScannerEdge | null> | null;

  /**
   * A list of nodes.
   */
  nodes: Array<IXGitLabVulnerabilityScanner | null> | null;

  /**
   * Information to aid in pagination.
   */
  pageInfo: IXGitLabPageInfo;
}

/**
 * An edge in a connection.
 */
export interface IXGitLabVulnerabilityScannerEdge {
  __typename: '_xGitLabVulnerabilityScannerEdge';

  /**
   * A cursor for use in pagination.
   */
  cursor: string;

  /**
   * The item at the end of the edge.
   */
  node: IXGitLabVulnerabilityScanner | null;
}

export interface IXGitLabVulnerabilityScannerInput {
  /**
   * Unique ID that identifies the scanner.
   */
  id: string;

  /**
   * Human readable value that identifies the analyzer, not required to be unique.
   */
  name: string;

  /**
   * Link to more information about the analyzer.
   */
  url: string;

  /**
   * Information about vendor/maintainer of the scanner.
   */
  vendor?: IXGitLabVulnerabilityScannerVendorInput | null;

  /**
   * Version of the scanner.
   */
  version: string;
}

export interface IXGitLabVulnerabilityScannerVendorInput {
  /**
   * Name of the vendor/maintainer.
   */
  name: string;
}

/**
 * Represents vulnerability counts by severity
 */
export interface IXGitLabVulnerabilitySeveritiesCount {
  __typename: '_xGitLabVulnerabilitySeveritiesCount';

  /**
   * Number of vulnerabilities of CRITICAL severity of the project
   */
  critical: number | null;

  /**
   * Number of vulnerabilities of HIGH severity of the project
   */
  high: number | null;

  /**
   * Number of vulnerabilities of INFO severity of the project
   */
  info: number | null;

  /**
   * Number of vulnerabilities of LOW severity of the project
   */
  low: number | null;

  /**
   * Number of vulnerabilities of MEDIUM severity of the project
   */
  medium: number | null;

  /**
   * Number of vulnerabilities of UNKNOWN severity of the project
   */
  unknown: number | null;
}

/**
 * The severity of the vulnerability
 */
export const enum XGitLabVulnerabilitySeverity {
  /**
   * Info severity
   */
  INFO = 'INFO',

  /**
   * Unknown severity
   */
  UNKNOWN = 'UNKNOWN',

  /**
   * Low severity
   */
  LOW = 'LOW',

  /**
   * Medium severity
   */
  MEDIUM = 'MEDIUM',

  /**
   * High severity
   */
  HIGH = 'HIGH',

  /**
   * Critical severity
   */
  CRITICAL = 'CRITICAL',
}

/**
 * Vulnerability sort values
 */
export const enum XGitLabVulnerabilitySort {
  /**
   * Severity in descending order.
   */
  severity_desc = 'severity_desc',

  /**
   * Severity in ascending order.
   */
  severity_asc = 'severity_asc',

  /**
   * Title in descending order.
   * @deprecated "Deprecated due to performance issues. Deprecated in 14.2."
   */
  title_desc = 'title_desc',

  /**
   * Title in ascending order.
   * @deprecated "Deprecated due to performance issues. Deprecated in 14.2."
   */
  title_asc = 'title_asc',

  /**
   * Detection timestamp in descending order.
   */
  detected_desc = 'detected_desc',

  /**
   * Detection timestamp in ascending order.
   */
  detected_asc = 'detected_asc',

  /**
   * Report Type in descending order.
   */
  report_type_desc = 'report_type_desc',

  /**
   * Report Type in ascending order.
   */
  report_type_asc = 'report_type_asc',

  /**
   * State in descending order.
   */
  state_desc = 'state_desc',

  /**
   * State in ascending order.
   */
  state_asc = 'state_asc',
}

/**
 * The state of the vulnerability
 */
export const enum XGitLabVulnerabilityState {
  /**
   * Detected vulnerability
   */
  DETECTED = 'DETECTED',

  /**
   * Confirmed vulnerability
   */
  CONFIRMED = 'CONFIRMED',

  /**
   * Resolved vulnerability
   */
  RESOLVED = 'RESOLVED',

  /**
   * Dismissed vulnerability
   */
  DISMISSED = 'DISMISSED',
}

/**
 * Represents a vulnerable dependency. Used in vulnerability location data
 */
export interface IXGitLabVulnerableDependency {
  __typename: '_xGitLabVulnerableDependency';

  /**
   * Package associated with the vulnerable dependency.
   */
  package: IXGitLabVulnerablePackage | null;

  /**
   * Version of the vulnerable dependency.
   */
  version: string | null;
}

/**
 * Represents a vulnerable package. Used in vulnerability dependency data
 */
export interface IXGitLabVulnerablePackage {
  __typename: '_xGitLabVulnerablePackage';

  /**
   * Name of the vulnerable package.
   */
  name: string | null;
}

/**
 * Represents vulnerability letter grades with associated projects
 */
export interface IXGitLabVulnerableProjectsByGrade {
  __typename: '_xGitLabVulnerableProjectsByGrade';

  /**
   * Number of projects within this grade.
   */
  count: number;

  /**
   * Grade based on the highest severity vulnerability present.
   */
  grade: XGitLabVulnerabilityGrade;

  /**
   * Projects within this grade.
   */
  projects: IXGitLabProjectConnection;
}

export interface IProjectsOnXGitLabVulnerableProjectsByGradeArguments {
  /**
   * Returns the elements in the list that come after the specified cursor.
   */
  after?: string | null;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;
}

/**
 * Weight ID wildcard values
 */
export const enum XGitLabWeightWildcardId {
  /**
   * No weight is assigned.
   */
  NONE = 'NONE',

  /**
   * Weight is assigned.
   */
  ANY = 'ANY',
}

export interface IXGitLabErrorLocation {
  __typename: '_xGitLabErrorLocation';
  line: number;
  column: number;
}

export interface IXGitLabError {
  __typename: '_xGitLabError';
  message: string;
  locations: Array<IXGitLabErrorLocation> | null;
  path: Array<string> | null;
}

export interface IXGitLabApi {
  __typename: '_xGitLabApi';
  errors: Array<IXGitLabError> | null;
  query: IXGitLabQuery | null;
  mutation: IXGitLabMutation | null;
}

// tslint:enable
