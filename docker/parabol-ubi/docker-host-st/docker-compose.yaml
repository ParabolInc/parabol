version: '3.9'

services:
  postgres:
    container_name: postgres
    image: postgres:15.4
    restart: always
    env_file: .env
    environment:
      - PGUSER=$POSTGRES_USER
    ports:
      - '5432:5432'
    volumes:
      #- './postgres/postgres.conf:/usr/local/etc/postgres/postgres.conf'
      - './data/postgres/pgdata:/var/lib/postgresql/data'
    #command: 'postgres -c config_file=/usr/local/etc/postgres/postgres.conf'
    healthcheck:
      test: ["CMD-SHELL", "pg_isready", "-d", "$POSTGRES_DB", "-U", "$POSTGRES_USER"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - parabol-network
  pgadmin:
    container_name: pgadmin
    image: dpage/pgadmin4:8.3
    depends_on:
      postgres:
        condition: service_healthy
    env_file: .env
    ports:
      - "5050:80"
    networks:
      - parabol-network
  rethinkdb:
    container_name: rethinkdb
    image: rethinkdb:2.4.2
    restart: always
    ports:
      - '8080:8080'
      - '29015:29015'
      - '28015:28015'
    volumes:
      - ./data/rethink:/data
    networks:
      - parabol-network
  redis:
    container_name: redis
    image: redis:7.0-alpine
    healthcheck:
      test: "[ $$(redis-cli ping) = 'PONG' ]"
      interval: 10s
      timeout: 5s
      retries: 5
    restart: always
    ports:
      - '6379:6379'
    volumes:
      - ./data/redis:/data
    networks:
      - parabol-network
  # test-task:
  #   image: busybox
  #   command: sh -c "sleep 30"
  #   depends_on:
  #     rethinkdb:
  #       condition: service_started
  #     postgres:
  #       condition: service_started
  #     redis:
  #       condition: service_healthy
  #   networks:
  #     - parabol-network
  # test-process:
  #   image: nginx
  #   depends_on:
  #     test-task:
  #       condition: service_completed_successfully
  #     rethinkdb:
  #       condition: service_started
  #     postgres:
  #       condition: service_started
  #     redis:
  #       condition: service_healthy
  #   networks:
  #     - parabol-network
  pre-deploy:
    container_name: pre-deploy
    image: us-central1-docker.pkg.dev/prbl-tooling/parabol-production/parabol:v7.15.2
    command: bash -c "node dist/preDeploy.js"
    env_file: .env
    environment:
      - SERVER_ID=0
    volumes:
      - './.env:/parabol/.env'
    depends_on:
      rethinkdb:
        condition: service_started
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - parabol-network
  # chronos:
  #   image: us-central1-docker.pkg.dev/prbl-tooling/parabol-production/parabol:v7.15.2
  #   restart: always
  #   command: bash -c "node dist/chronos.js"
  #   env_file: .env
  #   environment:
  #     - SERVER_ID=1
  #   volumes:
  #     - './.env:/parabol/.env'
  #   depends_on:
  #     pre-deploy:
  #       condition: service_completed_successfully
  #     rethinkdb:
  #       condition: service_started
  #     postgres:
  #       condition: service_healthy
  #     redis:
  #       condition: service_healthy
  #   networks:
  #     - parabol-network
  web-server:
    container_name: web-server
    image: us-central1-docker.pkg.dev/prbl-tooling/parabol-production/parabol:v7.15.2
    restart: always
    command: bash -c "node dist/web.js"
    env_file: .env
    environment:
      - SERVER_ID=5
    ports:
      - '3000:3000'
    volumes:
      - './.env:/parabol/.env'
    depends_on:
      pre-deploy:
        condition: service_completed_successfully
      rethinkdb:
        condition: service_started
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - parabol-network
  gql-executor:
    container_name: gql-executor
    image: us-central1-docker.pkg.dev/prbl-tooling/parabol-production/parabol:v7.15.2
    restart: always
    command: bash -c "node dist/gqlExecutor.js"
    env_file: .env
    environment:
      - SERVER_ID=10
    volumes:
      - './.env:/parabol/.env'
    depends_on:
      pre-deploy:
        condition: service_completed_successfully
      rethinkdb:
        condition: service_started
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - parabol-network
networks:
  parabol-network:
