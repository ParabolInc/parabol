name: Build

on:
  push:
    paths-ignore:
      # don't run this if docs are the only thing affected
      - "docs/**"
env:
  PARABOL_DOCKERFILE: ./docker/parabol-ubi/docker-build/dockerfiles/pipeline.dockerfile
  PARABOL_BUILD_ENV_PATH: docker/parabol-ubi/docker-build/environments/pipeline

jobs:
  build:
    runs-on: ubuntu-4core
    permissions:
      contents: "read"
      id-token: "write"
    services:
      postgres:
        image: postgres:12.10-alpine
        # This env variables must be the same in the file PARABOL_BUILD_ENV_PATH
        env:
          POSTGRES_PASSWORD: "temppassword"
          POSTGRES_USER: "tempuser"
          POSTGRES_DB: "tempdb"
        ports:
          - 5432:5432
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      rethinkdb:
        image: rethinkdb:2.4.2
        ports:
          - 8080:8080
          - 28015:28015
          - 29015:29015
      redis:
        image: redis:6.2.6
        ports:
          - 6379:6379
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 2

      # 1.- Only images produced on tags are built with addiotional security. It takes about 2 more minutes to build.
      # 2.- Change the NO_DEPS for tags to true whenenver we want to start building using the --no-deps option. It requires more memory than what is available in the free runners and it also takes more time to build.
      - name: Setup runtime variables
        run: |
          NODE_VERSION=$(jq -r -j '.engines.node|ltrimstr("^")' package.json)
          echo "NODE_VERSION=${NODE_VERSION}" >> $GITHUB_ENV

          if [ ${{github.ref_type}} = "tag" ]; then
            DOCKER_REPOSITORY_FOR_REF=${{ secrets.GCP_AR_PARABOL }}
          else
            DOCKER_REPOSITORY_FOR_REF=${{ secrets.GCP_AR_PARABOL_DEV }}
          fi

          echo "DOCKER_REPOSITORY_FOR_REF=${DOCKER_REPOSITORY_FOR_REF}" >> $GITHUB_ENV

          GITHUB_REF_NAME_NORMALIZED=$(echo ${{github.ref_name}} | tr / -)
          echo "GITHUB_REF_NAME_NORMALIZED=${GITHUB_REF_NAME_NORMALIZED}" >> $GITHUB_ENV

          DOCKERIZE=${{ contains(fromJSON('["master", "staging", "production"]'), github.ref_name) || contains(github.event.head_commit.message, '@dockerize')}}
          echo $DOCKERIZE
          echo "DOCKERIZE=${DOCKERIZE}" >> $GITHUB_ENV
      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version-file: package.json
          # Do not cache yarn dir here. Running yarn install is too slow.
          # Instead, we aggressively cache node_modules below

      - name: Get cached node modules
        id: cache
        uses: actions/cache@v3
        with:
          path: |
            **/node_modules
          key: node_modules-${{ runner.os }}-${{ env.NODE_VERSION }}-${{ hashFiles('yarn.lock') }}

      - name: Install node_modules
        if: steps.cache.outputs.cache-hit != 'true'
        run: yarn install --immutable

      - name: Build the DBs
        run: |
          cp ${{ env.PARABOL_BUILD_ENV_PATH }} ./.env
          yarn db:migrate
          yarn pg:migrate up
          yarn pg:build

      - name: Build cheap
        if: env.DOCKERIZE != true
        run: yarn build
      - name: Build prod
        if: env.DOCKERIZE == true
        run: yarn build --no-deps

      - name: Check Code Quality
        uses: nrwl/nx-set-shas@v2
      - run: |
          npx nx affected --target=typecheck
          npx nx affected --target=lint:check
          npx nx affected --target=prettier:check

      - name: Set up Docker Buildx
        if: env.DOCKERIZE == true
        uses: docker/setup-buildx-action@v2
        with:
          buildkitd-flags: "--allow-insecure-entitlement network.host"
          driver-opts: network=host

      - id: "auth"
        name: "Authenticate to Google Cloud"
        if: env.DOCKERIZE == true
        uses: "google-github-actions/auth@v1"
        with:
          token_format: "access_token"
          workload_identity_provider: ${{ secrets.GCP_WI_PROVIDER_NAME }}
          service_account: ${{ secrets.GCP_SA_EMAIL }}

      - uses: "docker/login-action@v2"
        if: env.DOCKERIZE == true
        with:
          registry: ${{ secrets.GCP_DOCKER_REGISTRY }}
          username: "oauth2accesstoken"
          password: "${{ steps.auth.outputs.access_token }}"

      - name: Build and push
        if: env.DOCKERIZE == true
        uses: docker/build-push-action@v4
        with:
          network: host
          allow: network.host
          file: ${{ env.PARABOL_DOCKERFILE }}
          context: .
          build-args: |
            "_NODE_VERSION=${{ env.NODE_VERSION }}"
            "_SECURITY_ENABLED=true"
          push: true
          tags: |
            "${{ secrets.GCP_AR_PARABOL_DEV }}:${{github.sha}}"
            "${{ env.DOCKER_REPOSITORY_FOR_REF }}:${{ env.GITHUB_REF_NAME_NORMALIZED }}"
